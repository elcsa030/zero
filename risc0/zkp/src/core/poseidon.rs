// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Constants generated by https://extgit.iaik.tugraz.at/krypto/hadeshash.git
// Commit: b5434fd2b2785926dd1dd386efbef167da57c064
// `sage generate_params_poseidon.sage 1 0 31 24 7 128 78000001`
// Hand refomatted...

//! An implementation of Poseidon targeting the Baby Bear field with a security
//! of 128 bits.

/// How many cells are in the sponge
pub const CELLS: usize = 24;
const ROUNDS_FULL: usize = 8;
const ROUNDS_HALF_FULL: usize = ROUNDS_FULL / 2;
const ROUNDS_PARTIAL: usize = 21;

use lazy_static::lazy_static;

use crate::field::baby_bear::Elem;

macro_rules! baby_bear_array {
    [$($x:literal),* $(,)?] => {
        [$(Elem::new($x)),* ]
    }
}

/// Round constants: Added to CELLS at the start of each round.
/// Size = CELLS * ROUNDS
pub const ROUND_CONSTANTS: &'static [Elem] = &baby_bear_array![
    0x0fa20c37, 0x0795bb97, 0x12c60b9c, 0x0eabd88e, 0x096485ca, 0x07093527, 0x1b1d4e50, 0x30a01ace,
    0x3bd86f5a, 0x69af7c28, 0x3f94775f, 0x731560e8, 0x465a0ecd, 0x574ef807, 0x62fd4870, 0x52ccfe44,
    0x14772b14, 0x4dedf371, 0x260acd7c, 0x1f51dc58, 0x75125532, 0x686a4d7b, 0x54bac179, 0x31947706,
    0x29799d3b, 0x6e01ae90, 0x203a7a64, 0x4f7e25be, 0x72503f77, 0x45bd3b69, 0x769bd6b4, 0x5a867f08,
    0x4fdba082, 0x251c4318, 0x28f06201, 0x6788c43a, 0x4c6d6a99, 0x357784a8, 0x2abaf051, 0x770f7de6,
    0x1794b784, 0x4796c57a, 0x724b7a10, 0x449989a7, 0x64935cf1, 0x59e14aac, 0x0e620bb8, 0x3af5a33b,
    0x4465cc0e, 0x019df68f, 0x4af8d068, 0x08784f82, 0x0cefdeae, 0x6337a467, 0x32fa7a16, 0x486f62d6,
    0x386a7480, 0x20f17c4a, 0x54e50da8, 0x2012cf03, 0x5fe52950, 0x09afb6cd, 0x2523044e, 0x5c54d0ef,
    0x71c01f3c, 0x60b2c4fb, 0x4050b379, 0x5e6a70a5, 0x418543f5, 0x71debe56, 0x1aad2994, 0x3368a483,
    0x07a86f3a, 0x5ea43ff1, 0x2443780e, 0x4ce444f7, 0x146f9882, 0x3132b089, 0x197ea856, 0x667030c3,
    0x2317d5dc, 0x0c2c48a7, 0x56b2df66, 0x67bd81e9, 0x4fcdfb19, 0x4baaef32, 0x0328d30a, 0x6235760d,
    0x12432912, 0x0a49e258, 0x030e1b70, 0x48caeb03, 0x49e4d9e9, 0x1051b5c6, 0x6a36dbbe, 0x4cff27a5,
    0x1da78ec2, 0x730b0924, 0x3eb56cf3, 0x5bd93073, 0x37204c97, 0x51642d89, 0x66e943e8, 0x1a3e72de,
    0x70beb1e9, 0x30ff3b3f, 0x4240d1c4, 0x12647b8d, 0x65d86965, 0x49ef4d7c, 0x47785697, 0x46b3969f,
    0x5c7b7a0e, 0x7078fc60, 0x4f22d482, 0x482a9aee, 0x6beb839d, 0x032959ad, 0x2b18af6a, 0x55d3dc8c,
    0x43bd26c8, 0x0c41595f, 0x7048d2e2, 0x00db8983, 0x2af563d7, 0x6e84758f, 0x611d64e1, 0x1f9977e2,
    0x64163a0a, 0x5c5fc27b, 0x02e22561, 0x3a2d75db, 0x1ba7b71a, 0x34343f64, 0x7406b35d, 0x19df8299,
    0x6ff4480a, 0x514a81c8, 0x57ab52ce, 0x6ad69f52, 0x3e0c0e0d, 0x48126114, 0x2a9d62cc, 0x17441f23,
    0x485762bb, 0x2f218674, 0x06fdc64a, 0x0861b7f2, 0x3b36eee6, 0x70a11040, 0x04b31737, 0x3722a872,
    0x2a351c63, 0x623560dc, 0x62584ab2, 0x382c7c04, 0x3bf9edc7, 0x0e38fe51, 0x376f3b10, 0x5381e178,
    0x3afc61c7, 0x5c1bcb4d, 0x6643ce1f, 0x2d0af1c1, 0x08f583cc, 0x5d6ff60f, 0x6324c1e5, 0x74412fb7,
    0x70c0192e, 0x0b72f141, 0x4067a111, 0x57388c4f, 0x351009ec, 0x0974c159, 0x539a58b3, 0x038c0cff,
    0x476c0392, 0x3f7bc15f, 0x4491dd2c, 0x4d1fef55, 0x04936ae3, 0x58214dd4, 0x683c6aad, 0x1b42f16b,
    0x6dc79135, 0x2d4e71ec, 0x3e2946ea, 0x59dce8db, 0x6cee892a, 0x47f07350, 0x7106ce93, 0x3bd4a7a9,
    0x2bfe636a, 0x430011e9, 0x001cd66a, 0x307faf5b, 0x0d9ef3fe, 0x6d40043a, 0x2e8f470c, 0x1b6865e8,
    0x0c0e6c01, 0x4d41981f, 0x423b9d3d, 0x410408cc, 0x263f0884, 0x5311bbd0, 0x4dae58d8, 0x30401cea,
    0x09afa575, 0x4b3d5b42, 0x63ac0b37, 0x5fe5bb14, 0x5244e9d4, 0x211c1eac, 0x06ae5d7e, 0x5092f65b,
    0x28080606, 0x7674412b, 0x07af1270, 0x4367417f, 0x50cb1c2a, 0x0fc8ebad, 0x2816abbc, 0x3f16a59a,
    0x4d633c22, 0x71dbd897, 0x6f2b378c, 0x0936e659, 0x0ba9fd23, 0x49969750, 0x4bfd5a2c, 0x1f9b3a31,
    0x613fe177, 0x2e17149d, 0x05431faa, 0x0706f03b, 0x5a810ed3, 0x345424dd, 0x3111b0ce, 0x0b7753d3,
    0x68dc180d, 0x3d51624f, 0x1f72ce83, 0x6f68c901, 0x39f01403, 0x3e496c94, 0x0f8d6022, 0x3b90f26b,
    0x0ac4ff19, 0x38b0519e, 0x1ec6af68, 0x463243e8, 0x354d173c, 0x13bcaaa5, 0x2840d845, 0x33d63611,
    0x675d9dd9, 0x6e11b2e0, 0x3d626b93, 0x06131077, 0x3e508d01, 0x5feea10f, 0x0abf698c, 0x0a4b3856,
    0x124dede5, 0x6805de45, 0x73cfbf3c, 0x47f8d207, 0x478b009b, 0x67be1c2e, 0x2bb6a2f5, 0x62fa3b51,
    0x4119d1c4, 0x454386c4, 0x45ef075a, 0x590aa38f, 0x0fdcef79, 0x0581f7b1, 0x13d763c5, 0x061e601f,
    0x33dd05e0, 0x23ffe142, 0x2b29ac8e, 0x47c382f6, 0x3e787c86, 0x3f20b08d, 0x4d935dfa, 0x3a3c23df,
    0x4d9dad01, 0x4e5ddddc, 0x722bab01, 0x1a51d5ce, 0x27e556b7, 0x3fa18fe1, 0x6d0f2958, 0x3059f7d1,
    0x230519d7, 0x3952f12a, 0x46619d26, 0x62a8ebf8, 0x644fb0ab, 0x22a0f3d6, 0x21fd764f, 0x32866049,
    0x409133f1, 0x1667a8a2, 0x06a6c7b7, 0x6f53160f, 0x273b11d2, 0x03176c5e, 0x72f9bbfa, 0x73ceba92,
    0x5cdef81e, 0x01393286, 0x46daee07, 0x065d7ba7, 0x52d72d70, 0x3bab4b64, 0x6ada3843, 0x2fc5fbed,
    0x770d61b1, 0x5715aaea, 0x03ef0e91, 0x75b6c771, 0x242adf60, 0x00d0ca4d, 0x36c0e389, 0x6602a85b,
    0x1a2a3e30, 0x08e8402e, 0x4f427415, 0x4ca090cb, 0x112be00b, 0x68942c71, 0x5ae9a9d9, 0x0fd80700,
    0x710937b7, 0x22263d8a, 0x693f8325, 0x5ad70998, 0x337c7833, 0x64f3e8aa, 0x50de3c29, 0x5b4d4100,
    0x64fd2dcf, 0x76e3bf54, 0x1c254781, 0x5500ad0a, 0x213f01e0, 0x05860297, 0x0a1006cb, 0x77048a99,
    0x5d62287e, 0x15b9c906, 0x1f496f00, 0x00c0c7e0, 0x322b6472, 0x278f62c7, 0x0dc1ebb9, 0x4dd5a99e,
    0x32e5b93a, 0x5e37fb0d, 0x480448df, 0x1b473c1c, 0x4ef02492, 0x01d34c64, 0x1823e880, 0x15658531,
    0x5b192ad9, 0x595581d0, 0x13579188, 0x4a8dc02b, 0x1179a528, 0x3232c1c5, 0x76026f85, 0x23d0b156,
    0x371578fb, 0x541b82cf, 0x70d62891, 0x361b0736, 0x7495f131, 0x4d5f3c2f, 0x14c92dfd, 0x08b45e27,
    0x3a75137f, 0x473c3745, 0x4b91cc24, 0x0cd72859, 0x0e1fe6f0, 0x136d6cb4, 0x768b6779, 0x0cb9cd80,
    0x13ec6cf9, 0x22c85a46, 0x3f108b3b, 0x18a1a088, 0x3e5a4e5f, 0x439e9682, 0x6167c1db, 0x03ef6829,
    0x47ec4179, 0x34eab8cd, 0x7174d996, 0x677070f9, 0x3b9021cf, 0x5f8a718e, 0x42bd5b38, 0x1d916068,
    0x474976a3, 0x7509fdec, 0x13403014, 0x67bd93b4, 0x1d39399b, 0x3f92f399, 0x48222be6, 0x6115c6be,
    0x2ea139c5, 0x4c7db79d, 0x5b1669af, 0x4fb62878, 0x62d070ea, 0x631cb189, 0x081e67db, 0x379e8018,
    0x13668ff5, 0x3771cd2c, 0x630ab736, 0x53a679ec, 0x125d4ccd, 0x0953a209, 0x36fdc8df, 0x77be669b,
    0x5b4ea7fa, 0x17ea3f57, 0x6fa0454f, 0x07ef0ea5, 0x13dbb0bb, 0x19329741, 0x01082270, 0x3dfdc9ba,
    0x054e9eb1, 0x5fdc6fab, 0x68c5095d, 0x3820abbb, 0x18c49ea6, 0x2e9e188a, 0x2ae6ba8e, 0x3316e9b4,
    0x1198f546, 0x6d48ac8c, 0x11da719f, 0x4d8971e9, 0x3eada1b5, 0x322bd9ba, 0x2952c026, 0x3615a986,
    0x1c4df5d1, 0x3d0271a0, 0x11825b34, 0x44020592, 0x10adcc7f, 0x74724522, 0x1a7d3cc7, 0x3c051d52,
    0x688a979a, 0x19d3e91c, 0x6f4d5844, 0x3b366285, 0x3bab9ff4, 0x4fab2833, 0x53b0a92c, 0x0f35a1f3,
    0x0a6700b4, 0x219ce3cf, 0x58aaad93, 0x015c6972, 0x62bf3753, 0x4c0c22ab, 0x06159dac, 0x747a77db,
    0x122ae678, 0x040b047b, 0x0d704a7b, 0x4173964d, 0x5dd358db, 0x12844624, 0x19e307d1, 0x546cde54,
    0x205c95d6, 0x6f4a0c40, 0x5b4341fb, 0x666b78d6, 0x0443be7a, 0x3b981801, 0x61e2e930, 0x08767993,
    0x7301b3ae, 0x338a237d, 0x5c6235d0, 0x4e8738e9, 0x3abf961d, 0x083a0e7d, 0x32013dd4, 0x067194e2,
    0x0c959b6a, 0x63599487, 0x6a5dc6bc, 0x22e70afa, 0x31791344, 0x18dba091, 0x4fb0cfd4, 0x756bdf68,
    0x643ddd4a, 0x1737a0da, 0x4ba1da4f, 0x3e5903b0, 0x19143f40, 0x40230ee6, 0x348ca8a7, 0x0ee0e8c2,
    0x2fd2cab9, 0x21d83fd9, 0x16350cd5, 0x2a74f8d1, 0x3f4509c8, 0x5dfeee95, 0x604bc769, 0x74483c22,
    0x7258f84d, 0x38ea3718, 0x5d0bc047, 0x470fa0a8, 0x342768f7, 0x6e7d3fc4, 0x2c3b121d, 0x6cdb42b0,
    0x517dae8e, 0x036790e6, 0x35f5cc07, 0x0b4320e6, 0x5bc6356f, 0x3ddeffd2, 0x630745f4, 0x3d294495,
    0x0c631df0, 0x37b887f2, 0x13847e31, 0x2117bd80, 0x31b19840, 0x3cca21e7, 0x359dff03, 0x350b873d,
    0x6e09a5ec, 0x7227eb0a, 0x2cb61c48, 0x42b94b58, 0x74641f5d, 0x2b4b970f, 0x5edcd109, 0x16471628,
    0x4eade53b, 0x15778bd8, 0x0f63d6ec, 0x7541ff2d, 0x668283da, 0x70052aab, 0x6463f544, 0x15d577ee,
    0x634f67b8, 0x3985d088, 0x0455bddf, 0x3c2c3650, 0x523e91cc, 0x13d37dd0, 0x6dc4ecf0, 0x01d27ccd,
    0x0978f179, 0x6a5e0ac0, 0x0562d555, 0x2938fd4f, 0x442c8e97, 0x282ea5ea, 0x26d34fd4, 0x4daacbcd,
    0x4b2aab64, 0x19f2ec4a, 0x073cc19b, 0x77771cc2, 0x70adc427, 0x4aab0883, 0x4f942ad8, 0x680ee898,
    0x73dd609f, 0x2f386740, 0x5a447572, 0x4661fbfc, 0x1138e81f, 0x2e4bc025, 0x4b4eb6af, 0x43e1f164,
    0x0fc4efce, 0x62ecb9d9, 0x33fd96c4, 0x69975a21, 0x1448aab1, 0x2021b32d, 0x02761f78, 0x36d32b9a,
    0x49f27e6b, 0x6b3c0905, 0x3ec37660, 0x294b9aef, 0x6f91b6ca, 0x72916b26, 0x05f0a48a, 0x00625502,
    0x15fdb305, 0x167d5214, 0x4679ee70, 0x746d93b3, 0x3df48789, 0x4f5e66f6, 0x57100659, 0x6d511c3f,
    0x41446816, 0x34a9a45e, 0x11789802, 0x0e6e7543, 0x3543a894, 0x271aa58f, 0x6c18fabe, 0x6716e081,
    0x4e7ebd9f, 0x6ac3f192, 0x5b81c87d, 0x4d5994fd, 0x0b1de23a, 0x57a1ab89, 0x2d651a8f, 0x1cee7cf3,
    0x2ebacc98, 0x0f627a88, 0x10df6935, 0x0e71678d, 0x34d4613a, 0x677b1b3c, 0x47812824, 0x41c6a57e,
    0x151419e4, 0x4f91c429, 0x5ef4f800, 0x666ef479, 0x32a1775a, 0x720ce960, 0x1e3f9af6, 0x718d884d,
    0x1a15cd27, 0x335d850c, 0x49c98fa3, 0x69cc0acb, 0x1cff3339, 0x5408e304, 0x4e6e866e, 0x3be35d35,
    0x3e1f2905, 0x23f1d80d, 0x662e279f, 0x1435e4a3, 0x75e2dd05, 0x0988624a, 0x377a1b05, 0x7628ec95,
    0x61010841, 0x42bbccb9, 0x078cfd5b, 0x494f7cbd, 0x67e80643, 0x29c7d710, 0x346f1642, 0x5e50b089,
    0x683a9d1c, 0x6d85d09f, 0x74c82186, 0x2a09cc00, 0x57035a44, 0x5851c292, 0x032bf1f1, 0x29920074,
    0x11b31845, 0x3a6424f5, 0x15d2972b, 0x3f3fcaf7, 0x03eb9631, 0x67a5df9c, 0x6bb87fbf, 0x4ad8f8b6,
];

/// MDS matrix: mixes cells at the end of each round
/// Size = CELLS * CELLS
pub const MDS: &'static [Elem] = &baby_bear_array![
    0x0925f057, 0x5bd30478, 0x07ebbe62, 0x2c815225, 0x4d84dac1, 0x4c7998ba, 0x3a7fea49, 0x3aa9a481,
    0x49c11a1e, 0x04d8979d, 0x5fbfade1, 0x2429dfd7, 0x272efaae, 0x46f9efea, 0x22bc6d5a, 0x4f62ff6c,
    0x0cda4bdd, 0x2331370f, 0x02623b6d, 0x195478b1, 0x37dc87b8, 0x59ea764c, 0x00e4d93f, 0x2a00959b,
    0x1be1ea19, 0x22632b65, 0x2b39a730, 0x599f41fa, 0x2bcc4ef2, 0x35d53004, 0x71093d6b, 0x1601d8eb,
    0x18ff56ea, 0x45b3166e, 0x26676a4c, 0x6c61d068, 0x08045c46, 0x62db29fd, 0x3be5970a, 0x4eafdf1c,
    0x57400877, 0x457966f3, 0x51663e1f, 0x28483bb1, 0x0196ae3f, 0x70cb51e6, 0x065450de, 0x36f5e610,
    0x0da76953, 0x6360267c, 0x649bcf3e, 0x5d146c16, 0x2ba614a5, 0x6254afca, 0x5141dd28, 0x3a1b182c,
    0x59d7bd8c, 0x59d8d654, 0x2d93170c, 0x5a5799eb, 0x1898b04f, 0x046d0280, 0x7346d1af, 0x5eddb85c,
    0x0003a191, 0x15756d99, 0x0ced69e1, 0x176bd942, 0x334cc69f, 0x04d66783, 0x191b55d6, 0x054a3fb0,
    0x7310de95, 0x08869524, 0x15345fa8, 0x4e4be25a, 0x453c4ca2, 0x64ede5d9, 0x7061392b, 0x23b4bc9e,
    0x25943dde, 0x42f43c1f, 0x1c2e09bb, 0x1b035428, 0x288bd9f8, 0x4efd9ccc, 0x2d2d3e48, 0x3b6f9770,
    0x445e8fb1, 0x347b6137, 0x4aced0cd, 0x4ac94fcf, 0x49fbc261, 0x6f7c9284, 0x46225cec, 0x123b099e,
    0x3e5c53ed, 0x5f8242d0, 0x56ee4d17, 0x1e6c4fcb, 0x5f339894, 0x4f5159f3, 0x66f69ac5, 0x2204cc14,
    0x5e14f5ae, 0x72eb2590, 0x71a91997, 0x2b48356e, 0x16cded03, 0x075fe86b, 0x26972bbf, 0x3ad0285e,
    0x41b69d6d, 0x578414e5, 0x2c111bdd, 0x4eddc239, 0x6c8bb56e, 0x144580e7, 0x2b36591a, 0x49e5e75c,
    0x6999c112, 0x65413605, 0x30cda1fa, 0x3d259a65, 0x583d5e9f, 0x0bd02653, 0x019c0847, 0x42484053,
    0x190a61d5, 0x0f7739e9, 0x707b8505, 0x3f4ebca9, 0x63ad34a6, 0x27a8fc11, 0x53dd908b, 0x5acc1bdf,
    0x287cf6cb, 0x2fe01473, 0x636b6843, 0x5daff065, 0x490cd097, 0x7676ba60, 0x2f678799, 0x25c761b9,
    0x01a043b3, 0x0a06b251, 0x61fa125e, 0x54ca6575, 0x07356fbe, 0x33e226e5, 0x51e61933, 0x7268cd6f,
    0x1b21302d, 0x0f4af69a, 0x508fb194, 0x6cc4f14e, 0x72dd7fe4, 0x51b4f177, 0x35d45e03, 0x69fc8c9b,
    0x281e9120, 0x1fcdc07a, 0x76aa9262, 0x282f5ff8, 0x7480999c, 0x73e3cd28, 0x2be5ae1c, 0x5db93f16,
    0x369500c4, 0x2941e8f7, 0x27f4bd6c, 0x0348fad8, 0x6a5c67cb, 0x3739b4d1, 0x276d5b5e, 0x60d58142,
    0x4ebdf918, 0x37cfc54b, 0x2b4de0cf, 0x10d601d5, 0x3a8df00d, 0x35e89b3f, 0x548da971, 0x03f5f997,
    0x68628587, 0x3893210d, 0x24043cae, 0x5b227372, 0x3ee8ed86, 0x40bbbf3b, 0x6cf9338c, 0x6fcfe498,
    0x5a48cf60, 0x1a7f7a18, 0x42709932, 0x1ae4dc98, 0x6928eb2c, 0x0de4538e, 0x68268248, 0x6ebcea28,
    0x0e372c10, 0x39f53425, 0x25d12fce, 0x4d1fe6a5, 0x4bd1c661, 0x432c0744, 0x3874139f, 0x15114aee,
    0x2fc6b6f7, 0x694a14a5, 0x473565eb, 0x3922ae25, 0x2c853bc1, 0x23b8ab07, 0x1140d139, 0x64b8711d,
    0x70d4bd89, 0x284410d0, 0x4b6930d0, 0x35d7af94, 0x4da3d9b4, 0x754ab306, 0x3acb5b63, 0x2dc805e3,
    0x1ca07765, 0x569c4ed2, 0x2457a9a6, 0x12b339c9, 0x129ef929, 0x4497c160, 0x704b1ae5, 0x67a01685,
    0x1342fc31, 0x5b0e8ea9, 0x39fb311c, 0x54494150, 0x39f504ac, 0x22413dd9, 0x65bc3ab4, 0x467309a0,
    0x3c329434, 0x60ce4e7a, 0x5aaabf5a, 0x34bd43ae, 0x370e36f4, 0x54ce6827, 0x5b2f8506, 0x4402d3c2,
    0x29e7c9dd, 0x25e76027, 0x57e7c180, 0x60fac76e, 0x015527ab, 0x1413b075, 0x38f2a6e1, 0x130e0153,
    0x0c8b0c05, 0x73efc6c4, 0x069e01a3, 0x3b70f938, 0x70a6f6b8, 0x33293983, 0x71fe5d22, 0x1f3accca,
    0x5a7b5790, 0x08dd413f, 0x09a6d072, 0x676c15b2, 0x41b1dea1, 0x5f19064a, 0x6e60fd03, 0x74bfd7cc,
    0x344cbfa9, 0x631c9696, 0x2924dc64, 0x33136084, 0x0d13c3a4, 0x4f7d76aa, 0x5089da22, 0x5925f2a3,
    0x764a21b3, 0x594165ca, 0x26dfba44, 0x50ae3c38, 0x643d4e05, 0x6905dbf2, 0x03c56d5b, 0x2d7d6a71,
    0x415b9d64, 0x1afd63f4, 0x76059483, 0x38fdca00, 0x0b42f518, 0x35564f98, 0x60051034, 0x6b46ae98,
    0x1a5cae77, 0x3015a332, 0x17858a7e, 0x44ef21ee, 0x3d5a7d20, 0x24b48ec5, 0x7074ae8e, 0x694e64ed,
    0x5ed5d4a5, 0x07c9fbb8, 0x26407f68, 0x2e9722eb, 0x690be9aa, 0x5bb05c66, 0x736c2a3d, 0x1f43c242,
    0x1e5e97aa, 0x67a1e3f6, 0x3a636104, 0x400cdfbc, 0x1041f8d2, 0x58f7e7a6, 0x521fdfc9, 0x53eec74f,
    0x4a2c3859, 0x62d09339, 0x778e9ee0, 0x32ffa9cc, 0x73a1a0f1, 0x531f7686, 0x291bbaf8, 0x2a9b0999,
    0x2ed9a967, 0x3558946d, 0x51a16aee, 0x6dee7dcc, 0x5f8e2e50, 0x1d1db308, 0x38e86590, 0x3e553f81,
    0x33b0eb77, 0x6cfe1511, 0x53cab467, 0x61ce93ad, 0x53c2b2bf, 0x1ca9f922, 0x30ecad90, 0x4571fac6,
    0x08bec418, 0x0cfe39f5, 0x581a27f9, 0x735e6fe6, 0x067c6e66, 0x6e6a2a64, 0x6dd27e02, 0x242937d2,
    0x3bd55ad4, 0x568f129b, 0x63f1b1fe, 0x212c0bff, 0x1ab1333d, 0x54776b6d, 0x42625d9e, 0x3be659b9,
    0x36679280, 0x0a40d878, 0x2961758d, 0x4c9790e0, 0x0fef0621, 0x2ff938f4, 0x66e96dbe, 0x6515861c,
    0x5bb6f737, 0x10229384, 0x0617aaa2, 0x48a27437, 0x25023a30, 0x210ed00f, 0x1b54155c, 0x24dd7b97,
    0x75a3a872, 0x34db5061, 0x0b92a052, 0x226376a9, 0x40fa919c, 0x1e1d0bf8, 0x18273d85, 0x5c15896c,
    0x006a92a1, 0x3af8d5bd, 0x4487ad5e, 0x39087d11, 0x4f159150, 0x2bb040d7, 0x31f595bd, 0x4a2047fa,
    0x25bd0741, 0x36018f9a, 0x5c0ce06a, 0x1d9e9d18, 0x420ebe0f, 0x58891fad, 0x10125523, 0x730eb67d,
    0x51d0429f, 0x0adaf59f, 0x71bb943d, 0x0adf7774, 0x215cf5a0, 0x644212e3, 0x42e40284, 0x3c7b3a58,
    0x6342596d, 0x669292fa, 0x2e5320e8, 0x4a6322d0, 0x3049d594, 0x59382436, 0x4c868c1a, 0x4af57fe8,
    0x2ba63a1f, 0x356288fd, 0x32e3c785, 0x08461bd2, 0x6f13e7c6, 0x43f66a43, 0x337aa954, 0x7751a941,
    0x01f6b2ae, 0x14363b26, 0x40f20ed5, 0x3e0c7ec0, 0x573e1600, 0x3f428f42, 0x6b702983, 0x700456fe,
    0x2b8ed50d, 0x7753512f, 0x08e9fd9b, 0x2373ddae, 0x1dbf1c53, 0x6cffa570, 0x34c27996, 0x0ed6ac67,
    0x2bebcc23, 0x699b5f40, 0x7401ce2d, 0x38a0c2e7, 0x43a13902, 0x38a1d22b, 0x0fe9b309, 0x2eee4333,
    0x0d760063, 0x54fe7427, 0x3d6828a8, 0x19967b11, 0x65d13bc4, 0x4e3d0222, 0x069d76c3, 0x2eda069a,
    0x48ddb980, 0x1429a139, 0x33b482fc, 0x4e9c25e8, 0x6a65cfad, 0x4ad014c1, 0x4a87f95a, 0x4df7e92a,
    0x01dc838f, 0x04693906, 0x4054c5cf, 0x590853bd, 0x2f24f4b8, 0x75225b01, 0x22c7029f, 0x47eb658c,
    0x6dc3bbd9, 0x4b281a5b, 0x08dcd650, 0x0d5c5101, 0x6f053db2, 0x5817ef9d, 0x28f3145c, 0x12be5a0d,
    0x49aa0377, 0x0b59edff, 0x16b8b6e9, 0x54eca830, 0x1b17774f, 0x2717f533, 0x67a6cfb1, 0x48b2d969,
    0x2592ee6d, 0x0682e514, 0x2f4b7d93, 0x29987e45, 0x1c8a95c9, 0x6ec54f61, 0x0ac051c6, 0x0b4547ec,
    0x27954891, 0x53d86bd0, 0x0190b333, 0x3d5e071f, 0x1fc8e989, 0x49117c77, 0x6039d94f, 0x3bd38ce0,
    0x20a52f8b, 0x21114a75, 0x14ff5479, 0x0541e715, 0x479e4333, 0x50a682da, 0x2ad2c099, 0x602118de,
    0x608e2f9f, 0x67f80f52, 0x651c3bae, 0x23d9d908, 0x4ff9730c, 0x3d85fe89, 0x4ea4b49e, 0x6002eefc,
    0x1c3bb2a9, 0x6ccc1661, 0x5c648b55, 0x27be661f, 0x00ab2809, 0x1a85557e, 0x4943fc8c, 0x64907221,
    0x4702b2ac, 0x17b6bbaa, 0x2cc138b7, 0x5160fa0d, 0x1d09780d, 0x11a8d68a, 0x05c60089, 0x12f7d668,
    0x190f2b66, 0x75723f70, 0x371c0a9d, 0x74661a50, 0x25f4cf94, 0x61e4062b, 0x59c81acc, 0x3006c21c,
    0x263237eb, 0x128a2bec, 0x6e0b8699, 0x37f9f129, 0x368d1785, 0x5e012d80, 0x225e6aca, 0x27b80004,
    0x1681937c, 0x29bc22e5, 0x3ecae7ce, 0x6ee8208b, 0x5b962b3e, 0x117876c4, 0x6d8bba88, 0x6f88b0e5,
    0x41c02969, 0x5b5fa8e3, 0x52b409fc, 0x2f3c432f, 0x38fb2c2d, 0x61cbc601, 0x2d15a7e2, 0x3514073d,
    0x1cab657a, 0x065031f7, 0x09f468c3, 0x69f29f12, 0x75918d89, 0x6b0b3c00, 0x1a89fae5, 0x1827d23b,
];

fn compute_partial_compression() -> (
    [Elem; (CELLS + ROUNDS_PARTIAL) * (CELLS + ROUNDS_PARTIAL)],
    [Elem; CELLS + ROUNDS_PARTIAL],
) {
    // We make a matrix of size (CELLS + ROUNDS_PARTIAL) x (CELLS + ROUNDS_PARTIAL +
    // 1) which allows us to combine the linear operations of round constants +
    // MDS values. As we go, we track for each 'cell' the linear effect of all
    // input cells and all sboxes up until this point.
    const ROW_SIZE: usize = CELLS + ROUNDS_PARTIAL;
    let mut final_matrix = [Elem::new(0); ROW_SIZE * ROW_SIZE];
    let mut final_offset = [Elem::new(0); ROW_SIZE];

    // Initially, each cell is identity
    let mut cur_matrix = [Elem::new(0); CELLS * ROW_SIZE];
    for i in 0..CELLS {
        cur_matrix[i * ROW_SIZE + i] = Elem::new(1);
    }
    // Initially, offset is 0
    let mut cur_offset = [Elem::new(0); CELLS];

    // Now, time to do all the rounds
    for round in 0..ROUNDS_PARTIAL {
        // Add the constants to the current offset
        for i in 0..CELLS {
            cur_offset[i] = cur_offset[i] + ROUND_CONSTANTS[(ROUNDS_HALF_FULL + round) * CELLS + i];
        }
        // Write data for this round's sbox based on CELL 0
        final_offset[CELLS + round] = cur_offset[0];
        for i in 0..ROW_SIZE {
            final_matrix[(CELLS + round) * ROW_SIZE + i] = cur_matrix[i];
        }
        // Now, replace the 0th row so it is purely determined by rounds box
        for i in 0..ROW_SIZE {
            cur_matrix[i] = if i == CELLS + round {
                Elem::new(1)
            } else {
                Elem::new(0)
            };
        }
        cur_offset[0] = Elem::new(0);
        // Now, do the MDS multiply.
        let old_matrix = cur_matrix;
        let old_offset = cur_offset;
        for i in 0..CELLS {
            for j in 0..ROW_SIZE {
                let mut tot = Elem::new(0);
                for k in 0..CELLS {
                    tot += MDS[i * CELLS + k] * old_matrix[k * ROW_SIZE + j];
                }
                cur_matrix[i * ROW_SIZE + j] = tot;
            }
        }
        for i in 0..CELLS {
            let mut tot = Elem::new(0);
            for j in 0..CELLS {
                tot += MDS[i * CELLS + j] * old_offset[j];
            }
            cur_offset[i] = tot;
        }
    }
    // Write out final state
    for i in 0..CELLS {
        final_offset[i] = cur_offset[i];
        for j in 0..ROW_SIZE {
            final_matrix[i * ROW_SIZE + j] = cur_matrix[i * ROW_SIZE + j];
        }
    }
    return (final_matrix, final_offset);
}

lazy_static! {
    /// Statically computed matrixes that accelerate partial round computations
    pub static ref PARTIAL_COMP_MATRIX: [Elem; (CELLS + ROUNDS_PARTIAL) * (CELLS + ROUNDS_PARTIAL)] =
        compute_partial_compression().0;
    /// Statically computed vectors that accelerate partial round computations
    pub static ref PARTIAL_COMP_OFFSET: [Elem; (CELLS + ROUNDS_PARTIAL)] =
        compute_partial_compression().1;
}

fn add_round_constants(cells: &mut [Elem; CELLS], round: usize) {
    for i in 0..CELLS {
        cells[i] += ROUND_CONSTANTS[round * CELLS + i];
    }
}

fn sbox(x: Elem) -> Elem {
    let x2 = x * x;
    let x4 = x2 * x2;
    let x6 = x4 * x2;
    return x6 * x;
}

fn do_full_sboxes(cells: &mut [Elem; CELLS]) {
    for i in 0..CELLS {
        cells[i] = sbox(cells[i]);
    }
}

fn multiply_by_mds(cells: &mut [Elem; CELLS]) {
    let old_cells = *cells;
    for i in 0..CELLS {
        let mut tot = Elem::new(0);
        for j in 0..CELLS {
            tot += MDS[i * CELLS + j] * old_cells[j];
        }
        cells[i] = tot;
    }
}

fn full_round(cells: &mut [Elem; CELLS], round: usize) {
    add_round_constants(cells, round);
    do_full_sboxes(cells);
    multiply_by_mds(cells);
}

/// The raw sponge mixing function
pub fn poseidon_mix(cells: &mut [Elem; CELLS]) {
    const ROW_SIZE: usize = CELLS + ROUNDS_PARTIAL;
    let mut round = 0;
    // Do initial full rounds
    for _i in 0..ROUNDS_HALF_FULL {
        full_round(cells, round);
        round += 1;
    }
    // Compute sbox outputs
    let old_cells = *cells;
    let mut sboxes = [Elem::new(0); ROUNDS_PARTIAL];
    for i in 0..ROUNDS_PARTIAL {
        // For each sbox, compute it's input
        let mut sbox_in = PARTIAL_COMP_OFFSET[CELLS + i];
        for j in 0..CELLS {
            sbox_in += PARTIAL_COMP_MATRIX[(CELLS + i) * ROW_SIZE + j] * cells[j];
        }
        for j in 0..i {
            sbox_in += PARTIAL_COMP_MATRIX[(CELLS + i) * ROW_SIZE + CELLS + j] * sboxes[j];
        }
        // Run it through the sbox + record it
        sboxes[i] = sbox(sbox_in);
    }
    // Forward output data back to cells
    for i in 0..CELLS {
        let mut out = PARTIAL_COMP_OFFSET[i];
        for j in 0..CELLS {
            out += PARTIAL_COMP_MATRIX[i * ROW_SIZE + j] * old_cells[j];
        }
        for j in 0..ROUNDS_PARTIAL {
            out += PARTIAL_COMP_MATRIX[i * ROW_SIZE + CELLS + j] * sboxes[j];
        }
        cells[i] = out;
    }
    round += ROUNDS_PARTIAL;
    // Do remaining full rounds
    for _i in 0..ROUNDS_HALF_FULL {
        full_round(cells, round);
        round += 1;
    }
}

/// The 'rate' of the sponge, i.e. how much we can safely add/remove per mixing.
pub const CELLS_RATE: usize = 16;

/// The size of the hash output in cells (~ 248 bits)
pub const CELLS_OUT: usize = 8;

/// Perform a unpadded hash of a vector of elements.  Because this is unpadded
/// collision resistance is only true for vectors of the same size.  If the size
/// is variable, this is subject to length extension attacks.
pub fn unpadded_hash<'a, I>(iter: I) -> [Elem; CELLS_OUT]
where
    I: Iterator<Item = &'a Elem>,
{
    let mut state = [Elem::new(0); CELLS];
    let mut count = 0;
    let mut unmixed = 0;
    for val in iter {
        state[unmixed] += *val;
        count += 1;
        unmixed += 1;
        if unmixed == CELLS_RATE {
            poseidon_mix(&mut state);
            unmixed = 0;
        }
    }
    if unmixed != 0 || count == 0 {
        poseidon_mix(&mut state);
    }
    state.as_slice()[0..CELLS_OUT].try_into().unwrap()
}

#[cfg(test)]
mod tests {
    use super::*;

    fn do_partial_sboxes(cells: &mut [Elem; CELLS]) {
        cells[0] = sbox(cells[0]);
    }

    fn partial_round_naive(cells: &mut [Elem; CELLS], round: usize) {
        add_round_constants(cells, round);
        do_partial_sboxes(cells);
        multiply_by_mds(cells);
    }

    // Naive version of poseidon
    fn poseidon_mix_naive(cells: &mut [Elem; CELLS]) {
        let mut round = 0;
        for _i in 0..ROUNDS_HALF_FULL {
            full_round(cells, round);
            round += 1;
        }
        for _i in 0..ROUNDS_PARTIAL {
            partial_round_naive(cells, round);
            round += 1;
        }
        for _i in 0..ROUNDS_HALF_FULL {
            full_round(cells, round);
            round += 1;
        }
    }

    #[test]
    fn compare_naive() {
        env_logger::init();
        // Make a fixed input
        let mut test_in_1 = [Elem::new(1); CELLS];
        // Copy it
        let mut test_in_2 = test_in_1;
        // Try two versions
        poseidon_mix_naive(&mut test_in_1);
        poseidon_mix(&mut test_in_2);
        log::debug!("test_in_1: {:?}", test_in_1);
        log::debug!("test_in_2: {:?}", test_in_2);
        // Verify they are the same
        assert_eq!(test_in_1, test_in_2);
    }
}
