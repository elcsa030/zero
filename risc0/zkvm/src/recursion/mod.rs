// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! This module implements the verifier for the recursion circuit.
//!
//! This module implements receipts that are generated from the recursion
//! circuit as well as verification functions for each type of receipt.
use risc0_zkp::{
    adapter::{CircuitCoreDef, TapsProvider},
    field::baby_bear::BabyBear,
    taps::TapSet,
};
mod control_id;
mod info;
/// This module exposes the poly_ext function used in the prover and verifier
/// This module is usually private but this is marked public because the
/// recursion circuit code needs this module.
pub mod poly_ext;
/// Similar to poly_ext, this module exposes code needed by both the recursion
/// prover and verifier.
pub mod taps;

/// this module contains implementation of receipt verification generated by the
/// recursion circuit
pub mod receipt;

/// This struct implements traits that are defined by code generated by the
/// circuit definition. The only reason this is private is to facilitate getting
/// the values from the `info` module from the recursion prover.
pub struct CircuitImpl;

impl CircuitImpl {
    const fn new() -> Self {
        CircuitImpl
    }
}

impl TapsProvider for CircuitImpl {
    fn get_taps(&self) -> &'static TapSet<'static> {
        taps::TAPSET
    }
}

impl CircuitCoreDef<BabyBear> for CircuitImpl {}

pub(crate) const CIRCUIT_CORE: CircuitImpl = CircuitImpl::new();
