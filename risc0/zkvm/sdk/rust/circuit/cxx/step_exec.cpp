// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 5> host_outs;
  Fp x0(7);
  Fp x1(2);
  Fp x2(3);
  Fp x3(4);
  Fp x4(5);
  Fp x5(6);
  Fp x6(8);
  Fp x7(9);
  Fp x8(10);
  Fp x9(11);
  Fp x10(1509949441);
  Fp x11(16);
  Fp x12(64);
  Fp x13(256);
  Fp x14(1024);
  Fp x15(4096);
  Fp x16(16384);
  Fp x17(65536);
  Fp x18(262144);
  Fp x19(1048576);
  Fp x20(4194304);
  Fp x21(16777216);
  Fp x22(67108864);
  Fp x23(268435456);
  Fp x24(1073741824);
  Fp x25(1887436801);
  Fp x26(1006632961);
  Fp x27(32);
  Fp x28(128);
  Fp x29(512);
  Fp x30(2048);
  Fp x31(8192);
  Fp x32(32768);
  Fp x33(2013235201);
  Fp x34(63488);
  Fp x35(65535);
  Fp x36(61440);
  Fp x37(65520);
  Fp x38(12);
  Fp x39(24);
  Fp x40(27);
  Fp x41(25);
  Fp x42(13);
  Fp x43(28);
  Fp x44(14);
  Fp x45(15);
  Fp x46(17);
  Fp x47(18);
  Fp x48(19);
  Fp x49(20);
  Fp x50(21);
  Fp x51(22);
  Fp x52(23);
  Fp x53(26);
  Fp x54(29);
  Fp x55(30);
  Fp x56(31);
  Fp x57(131072);
  Fp x58(524288);
  Fp x59(2097152);
  Fp x60(8388608);
  Fp x61(65280);
  Fp x62(2013265801);
  Fp x63(8190);
  Fp x64(131070);
  Fp x65(2013204481);
  Fp x66(2013264001);
  Fp x67(2005401601);
  Fp x68(11010048);
  Fp x69(1761607681);
  Fp x70(0);
  Fp x71(1);
  Fp x72 = args[0][0 * steps + ((cycle - 0) & mask)];
  Fp x73 = args[0][3 * steps + ((cycle - 0) & mask)];
  if (x73 != 0) {
    host_args[0] = x72;
    host(ctx, "log", "C%u: Init", host_args.data(), 1, host_outs.data(), 0);
    args[2][128 * steps + cycle] = x70;
    args[2][131 * steps + cycle] = x70;
    {
      host_args[0] = x72;
      host_args[1] = x70;
      host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
      Fp x74 = host_outs[0];
      Fp x75 = host_outs[1];
      args[2][129 * steps + cycle] = x74;
      args[2][130 * steps + cycle] = x75;
    }
    {
      args[2][132 * steps + cycle] = x70;
      args[2][133 * steps + cycle] = x70;
      args[2][134 * steps + cycle] = x70;
      args[2][135 * steps + cycle] = x70;
      args[2][136 * steps + cycle] = x70;
      args[2][137 * steps + cycle] = x70;
      args[2][138 * steps + cycle] = x70;
      args[2][139 * steps + cycle] = x71;
      args[2][140 * steps + cycle] = x70;
      args[2][141 * steps + cycle] = x70;
      args[2][142 * steps + cycle] = x70;
      args[2][143 * steps + cycle] = x70;
    }
    Fp x76 = args[2][133 * steps + ((cycle - 0) & mask)];
    Fp x77 = args[2][134 * steps + ((cycle - 0) & mask)];
    Fp x78 = x77 * x1;
    Fp x79 = x76 + x78;
    Fp x80 = args[2][135 * steps + ((cycle - 0) & mask)];
    Fp x81 = x80 * x2;
    Fp x82 = x79 + x81;
    Fp x83 = args[2][136 * steps + ((cycle - 0) & mask)];
    Fp x84 = x83 * x3;
    Fp x85 = x82 + x84;
    Fp x86 = args[2][137 * steps + ((cycle - 0) & mask)];
    Fp x87 = x86 * x4;
    Fp x88 = x85 + x87;
    Fp x89 = args[2][138 * steps + ((cycle - 0) & mask)];
    Fp x90 = x89 * x5;
    Fp x91 = x88 + x90;
    Fp x92 = args[2][139 * steps + ((cycle - 0) & mask)];
    Fp x93 = x92 * x0;
    Fp x94 = x91 + x93;
    Fp x95 = args[2][140 * steps + ((cycle - 0) & mask)];
    Fp x96 = x95 * x6;
    Fp x97 = x94 + x96;
    Fp x98 = args[2][141 * steps + ((cycle - 0) & mask)];
    Fp x99 = x98 * x7;
    Fp x100 = x97 + x99;
    Fp x101 = args[2][142 * steps + ((cycle - 0) & mask)];
    Fp x102 = x101 * x8;
    Fp x103 = x100 + x102;
    Fp x104 = args[2][143 * steps + ((cycle - 0) & mask)];
    Fp x105 = x104 * x9;
    Fp x106 = x103 + x105;
    Fp x107 = x106 - x0;
    if (x107 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    Fp x108 = args[2][132 * steps + ((cycle - 0) & mask)];
    Fp x109 = x108 - x71;
    Fp x110 = x108 * x109;
    if (x110 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x111 = x76 - x71;
    Fp x112 = x76 * x111;
    if (x112 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x113 = x77 - x71;
    Fp x114 = x77 * x113;
    if (x114 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x115 = x80 - x71;
    Fp x116 = x80 * x115;
    if (x116 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x117 = x83 - x71;
    Fp x118 = x83 * x117;
    if (x118 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x119 = x86 - x71;
    Fp x120 = x86 * x119;
    if (x120 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x121 = x89 - x71;
    Fp x122 = x89 * x121;
    if (x122 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x123 = x92 - x71;
    Fp x124 = x92 * x123;
    if (x124 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x125 = x95 - x71;
    Fp x126 = x95 * x125;
    if (x126 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x127 = x98 - x71;
    Fp x128 = x98 * x127;
    if (x128 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x129 = x101 - x71;
    Fp x130 = x101 * x129;
    if (x130 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x131 = x104 - x71;
    Fp x132 = x104 * x131;
    if (x132 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x133 = x108 + x76;
    Fp x134 = x133 + x77;
    Fp x135 = x134 + x80;
    Fp x136 = x135 + x83;
    Fp x137 = x136 + x86;
    Fp x138 = x137 + x89;
    Fp x139 = x138 + x92;
    Fp x140 = x139 + x95;
    Fp x141 = x140 + x98;
    Fp x142 = x141 + x101;
    Fp x143 = x142 + x104;
    Fp x144 = x143 - x71;
    if (x144 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
  }
  Fp x145 = args[0][4 * steps + ((cycle - 0) & mask)];
  if (x145 != 0) {
    Fp x146 = args[0][10 * steps + ((cycle - 0) & mask)];
    Fp x147 = x146 * x3;
    Fp x148 = args[0][13 * steps + ((cycle - 0) & mask)];
    Fp x149 = args[0][12 * steps + ((cycle - 0) & mask)];
    host_args[0] = x72;
    host_args[1] = x147;
    host_args[2] = x148;
    host_args[3] = x149;
    host(ctx, "log", "C%u: MemWrite: M[0x%x] = 0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
    Fp x150 = args[0][11 * steps + ((cycle - 0) & mask)];
    {
      host_args[0] = x72;
      host_args[1] = x146;
      host_args[2] = x149;
      host_args[3] = x148;
      host(ctx, "memWrite", "", host_args.data(), 4, host_outs.data(), 0);
    }
    args[2][128 * steps + cycle] = x146;
    Fp x151 = x71 - x150;
    args[2][131 * steps + cycle] = x151;
    args[2][129 * steps + cycle] = x149;
    args[2][130 * steps + cycle] = x148;
    {
      args[2][132 * steps + cycle] = x70;
      args[2][133 * steps + cycle] = x70;
      args[2][134 * steps + cycle] = x70;
      args[2][135 * steps + cycle] = x70;
      args[2][136 * steps + cycle] = x70;
      args[2][137 * steps + cycle] = x70;
      args[2][138 * steps + cycle] = x70;
      args[2][139 * steps + cycle] = x71;
      args[2][140 * steps + cycle] = x70;
      args[2][141 * steps + cycle] = x70;
      args[2][142 * steps + cycle] = x70;
      args[2][143 * steps + cycle] = x70;
    }
    Fp x152 = args[2][133 * steps + ((cycle - 0) & mask)];
    Fp x153 = args[2][134 * steps + ((cycle - 0) & mask)];
    Fp x154 = x153 * x1;
    Fp x155 = x152 + x154;
    Fp x156 = args[2][135 * steps + ((cycle - 0) & mask)];
    Fp x157 = x156 * x2;
    Fp x158 = x155 + x157;
    Fp x159 = args[2][136 * steps + ((cycle - 0) & mask)];
    Fp x160 = x159 * x3;
    Fp x161 = x158 + x160;
    Fp x162 = args[2][137 * steps + ((cycle - 0) & mask)];
    Fp x163 = x162 * x4;
    Fp x164 = x161 + x163;
    Fp x165 = args[2][138 * steps + ((cycle - 0) & mask)];
    Fp x166 = x165 * x5;
    Fp x167 = x164 + x166;
    Fp x168 = args[2][139 * steps + ((cycle - 0) & mask)];
    Fp x169 = x168 * x0;
    Fp x170 = x167 + x169;
    Fp x171 = args[2][140 * steps + ((cycle - 0) & mask)];
    Fp x172 = x171 * x6;
    Fp x173 = x170 + x172;
    Fp x174 = args[2][141 * steps + ((cycle - 0) & mask)];
    Fp x175 = x174 * x7;
    Fp x176 = x173 + x175;
    Fp x177 = args[2][142 * steps + ((cycle - 0) & mask)];
    Fp x178 = x177 * x8;
    Fp x179 = x176 + x178;
    Fp x180 = args[2][143 * steps + ((cycle - 0) & mask)];
    Fp x181 = x180 * x9;
    Fp x182 = x179 + x181;
    Fp x183 = x182 - x0;
    if (x183 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    Fp x184 = args[2][132 * steps + ((cycle - 0) & mask)];
    Fp x185 = x184 - x71;
    Fp x186 = x184 * x185;
    if (x186 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x187 = x152 - x71;
    Fp x188 = x152 * x187;
    if (x188 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x189 = x153 - x71;
    Fp x190 = x153 * x189;
    if (x190 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x191 = x156 - x71;
    Fp x192 = x156 * x191;
    if (x192 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x193 = x159 - x71;
    Fp x194 = x159 * x193;
    if (x194 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x195 = x162 - x71;
    Fp x196 = x162 * x195;
    if (x196 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x197 = x165 - x71;
    Fp x198 = x165 * x197;
    if (x198 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x199 = x168 - x71;
    Fp x200 = x168 * x199;
    if (x200 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x201 = x171 - x71;
    Fp x202 = x171 * x201;
    if (x202 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x203 = x174 - x71;
    Fp x204 = x174 * x203;
    if (x204 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x205 = x177 - x71;
    Fp x206 = x177 * x205;
    if (x206 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x207 = x180 - x71;
    Fp x208 = x180 * x207;
    if (x208 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x209 = x184 + x152;
    Fp x210 = x209 + x153;
    Fp x211 = x210 + x156;
    Fp x212 = x211 + x159;
    Fp x213 = x212 + x162;
    Fp x214 = x213 + x165;
    Fp x215 = x214 + x168;
    Fp x216 = x215 + x171;
    Fp x217 = x216 + x174;
    Fp x218 = x217 + x177;
    Fp x219 = x218 + x180;
    Fp x220 = x219 - x71;
    if (x220 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
  }
  Fp x221 = args[0][5 * steps + ((cycle - 0) & mask)];
  if (x221 != 0) {
    Fp x222 = args[0][10 * steps + ((cycle - 0) & mask)];
    host_args[0] = x72;
    host_args[1] = x222;
    host(ctx, "log", "C%u: Reset: %u", host_args.data(), 2, host_outs.data(), 0);
    args[2][128 * steps + cycle] = x70;
    args[2][131 * steps + cycle] = x70;
    {
      host_args[0] = x72;
      host_args[1] = x70;
      host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
      Fp x223 = host_outs[0];
      Fp x224 = host_outs[1];
      args[2][129 * steps + cycle] = x223;
      args[2][130 * steps + cycle] = x224;
    }
    {
      args[2][132 * steps + cycle] = x70;
      args[2][133 * steps + cycle] = x70;
      args[2][134 * steps + cycle] = x70;
      args[2][135 * steps + cycle] = x70;
      args[2][136 * steps + cycle] = x70;
      args[2][137 * steps + cycle] = x70;
      args[2][138 * steps + cycle] = x70;
      args[2][139 * steps + cycle] = x71;
      args[2][140 * steps + cycle] = x70;
      args[2][141 * steps + cycle] = x70;
      args[2][142 * steps + cycle] = x70;
      args[2][143 * steps + cycle] = x70;
    }
    Fp x225 = args[2][133 * steps + ((cycle - 0) & mask)];
    Fp x226 = args[2][134 * steps + ((cycle - 0) & mask)];
    Fp x227 = x226 * x1;
    Fp x228 = x225 + x227;
    Fp x229 = args[2][135 * steps + ((cycle - 0) & mask)];
    Fp x230 = x229 * x2;
    Fp x231 = x228 + x230;
    Fp x232 = args[2][136 * steps + ((cycle - 0) & mask)];
    Fp x233 = x232 * x3;
    Fp x234 = x231 + x233;
    Fp x235 = args[2][137 * steps + ((cycle - 0) & mask)];
    Fp x236 = x235 * x4;
    Fp x237 = x234 + x236;
    Fp x238 = args[2][138 * steps + ((cycle - 0) & mask)];
    Fp x239 = x238 * x5;
    Fp x240 = x237 + x239;
    Fp x241 = args[2][139 * steps + ((cycle - 0) & mask)];
    Fp x242 = x241 * x0;
    Fp x243 = x240 + x242;
    Fp x244 = args[2][140 * steps + ((cycle - 0) & mask)];
    Fp x245 = x244 * x6;
    Fp x246 = x243 + x245;
    Fp x247 = args[2][141 * steps + ((cycle - 0) & mask)];
    Fp x248 = x247 * x7;
    Fp x249 = x246 + x248;
    Fp x250 = args[2][142 * steps + ((cycle - 0) & mask)];
    Fp x251 = x250 * x8;
    Fp x252 = x249 + x251;
    Fp x253 = args[2][143 * steps + ((cycle - 0) & mask)];
    Fp x254 = x253 * x9;
    Fp x255 = x252 + x254;
    Fp x256 = x255 - x0;
    if (x256 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    {
      args[2][16 * steps + cycle] = x71;
      args[2][17 * steps + cycle] = x70;
      args[2][18 * steps + cycle] = x70;
      args[2][19 * steps + cycle] = x70;
      args[2][20 * steps + cycle] = x70;
      args[2][21 * steps + cycle] = x70;
      args[2][22 * steps + cycle] = x70;
      args[2][23 * steps + cycle] = x70;
    }
    Fp x257 = args[2][17 * steps + ((cycle - 0) & mask)];
    Fp x258 = args[2][18 * steps + ((cycle - 0) & mask)];
    Fp x259 = x258 * x1;
    Fp x260 = x257 + x259;
    Fp x261 = args[2][19 * steps + ((cycle - 0) & mask)];
    Fp x262 = x261 * x2;
    Fp x263 = x260 + x262;
    Fp x264 = args[2][20 * steps + ((cycle - 0) & mask)];
    Fp x265 = x264 * x3;
    Fp x266 = x263 + x265;
    Fp x267 = args[2][21 * steps + ((cycle - 0) & mask)];
    Fp x268 = x267 * x4;
    Fp x269 = x266 + x268;
    Fp x270 = args[2][22 * steps + ((cycle - 0) & mask)];
    Fp x271 = x270 * x5;
    Fp x272 = x269 + x271;
    Fp x273 = args[2][23 * steps + ((cycle - 0) & mask)];
    Fp x274 = x273 * x0;
    Fp x275 = x272 + x274;
    if (x275 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    {
      args[2][24 * steps + cycle] = x71;
      args[2][25 * steps + cycle] = x70;
      args[2][26 * steps + cycle] = x70;
      args[2][27 * steps + cycle] = x70;
    }
    Fp x276 = args[2][25 * steps + ((cycle - 0) & mask)];
    Fp x277 = args[2][26 * steps + ((cycle - 0) & mask)];
    Fp x278 = x277 * x1;
    Fp x279 = x276 + x278;
    Fp x280 = args[2][27 * steps + ((cycle - 0) & mask)];
    Fp x281 = x280 * x2;
    Fp x282 = x279 + x281;
    if (x282 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    {
      Fp x283 = Fp(x222.asUInt32() & x2.asUInt32());
      args[2][0 * steps + cycle] = x283;
      Fp x284 = x222 - x283;
      Fp x285 = x284 * x10;
      Fp x286 = Fp(x285.asUInt32() & x2.asUInt32());
      args[2][1 * steps + cycle] = x286;
      Fp x287 = x285 - x286;
      Fp x288 = x287 * x10;
      Fp x289 = Fp(x288.asUInt32() & x2.asUInt32());
      args[2][2 * steps + cycle] = x289;
      Fp x290 = x288 - x289;
      Fp x291 = x290 * x10;
      Fp x292 = Fp(x291.asUInt32() & x2.asUInt32());
      args[2][3 * steps + cycle] = x292;
      Fp x293 = x291 - x292;
      Fp x294 = x293 * x10;
      Fp x295 = Fp(x294.asUInt32() & x2.asUInt32());
      args[2][4 * steps + cycle] = x295;
      Fp x296 = x294 - x295;
      Fp x297 = x296 * x10;
      Fp x298 = Fp(x297.asUInt32() & x2.asUInt32());
      args[2][5 * steps + cycle] = x298;
      Fp x299 = x297 - x298;
      Fp x300 = x299 * x10;
      Fp x301 = Fp(x300.asUInt32() & x2.asUInt32());
      args[2][6 * steps + cycle] = x301;
      Fp x302 = x300 - x301;
      Fp x303 = x302 * x10;
      Fp x304 = Fp(x303.asUInt32() & x2.asUInt32());
      args[2][7 * steps + cycle] = x304;
      Fp x305 = x303 - x304;
      Fp x306 = x305 * x10;
      Fp x307 = Fp(x306.asUInt32() & x2.asUInt32());
      args[2][8 * steps + cycle] = x307;
      Fp x308 = x306 - x307;
      Fp x309 = x308 * x10;
      Fp x310 = Fp(x309.asUInt32() & x2.asUInt32());
      args[2][9 * steps + cycle] = x310;
      Fp x311 = x309 - x310;
      Fp x312 = x311 * x10;
      Fp x313 = Fp(x312.asUInt32() & x2.asUInt32());
      args[2][10 * steps + cycle] = x313;
      Fp x314 = x312 - x313;
      Fp x315 = x314 * x10;
      Fp x316 = Fp(x315.asUInt32() & x2.asUInt32());
      args[2][11 * steps + cycle] = x316;
      Fp x317 = x315 - x316;
      Fp x318 = x317 * x10;
      Fp x319 = Fp(x318.asUInt32() & x2.asUInt32());
      args[2][12 * steps + cycle] = x319;
      Fp x320 = x318 - x319;
      Fp x321 = x320 * x10;
      Fp x322 = Fp(x321.asUInt32() & x2.asUInt32());
      args[2][13 * steps + cycle] = x322;
      Fp x323 = x321 - x322;
      Fp x324 = x323 * x10;
      Fp x325 = Fp(x324.asUInt32() & x2.asUInt32());
      args[2][14 * steps + cycle] = x325;
      Fp x326 = x324 - x325;
      Fp x327 = x326 * x10;
      Fp x328 = Fp(x327.asUInt32() & x2.asUInt32());
      args[2][15 * steps + cycle] = x328;
    }
    Fp x329 = args[2][0 * steps + ((cycle - 0) & mask)];
    Fp x330 = args[2][1 * steps + ((cycle - 0) & mask)];
    Fp x331 = x330 * x3;
    Fp x332 = x329 + x331;
    Fp x333 = args[2][2 * steps + ((cycle - 0) & mask)];
    Fp x334 = x333 * x11;
    Fp x335 = x332 + x334;
    Fp x336 = args[2][3 * steps + ((cycle - 0) & mask)];
    Fp x337 = x336 * x12;
    Fp x338 = x335 + x337;
    Fp x339 = args[2][4 * steps + ((cycle - 0) & mask)];
    Fp x340 = x339 * x13;
    Fp x341 = x338 + x340;
    Fp x342 = args[2][5 * steps + ((cycle - 0) & mask)];
    Fp x343 = x342 * x14;
    Fp x344 = x341 + x343;
    Fp x345 = args[2][6 * steps + ((cycle - 0) & mask)];
    Fp x346 = x345 * x15;
    Fp x347 = x344 + x346;
    Fp x348 = args[2][7 * steps + ((cycle - 0) & mask)];
    Fp x349 = x348 * x16;
    Fp x350 = x347 + x349;
    Fp x351 = args[2][8 * steps + ((cycle - 0) & mask)];
    Fp x352 = x351 * x17;
    Fp x353 = x350 + x352;
    Fp x354 = args[2][9 * steps + ((cycle - 0) & mask)];
    Fp x355 = x354 * x18;
    Fp x356 = x353 + x355;
    Fp x357 = args[2][10 * steps + ((cycle - 0) & mask)];
    Fp x358 = x357 * x19;
    Fp x359 = x356 + x358;
    Fp x360 = args[2][11 * steps + ((cycle - 0) & mask)];
    Fp x361 = x360 * x20;
    Fp x362 = x359 + x361;
    Fp x363 = args[2][12 * steps + ((cycle - 0) & mask)];
    Fp x364 = x363 * x21;
    Fp x365 = x362 + x364;
    Fp x366 = args[2][13 * steps + ((cycle - 0) & mask)];
    Fp x367 = x366 * x22;
    Fp x368 = x365 + x367;
    Fp x369 = args[2][14 * steps + ((cycle - 0) & mask)];
    Fp x370 = x369 * x23;
    Fp x371 = x368 + x370;
    Fp x372 = args[2][15 * steps + ((cycle - 0) & mask)];
    Fp x373 = x372 * x24;
    Fp x374 = x371 + x373;
    Fp x375 = x222 - x374;
    if (x375 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.cpp:46");
    args[2][28 * steps + cycle] = x70;
    args[2][29 * steps + cycle] = x70;
    {
      args[2][30 * steps + cycle] = x70;
      args[2][31 * steps + cycle] = x70;
    }
    Fp x376 = args[2][30 * steps + ((cycle - 0) & mask)];
    Fp x377 = args[2][31 * steps + ((cycle - 0) & mask)];
    Fp x378 = x377 * x3;
    Fp x379 = x376 + x378;
    Fp x380 = x70 - x379;
    Fp x381 = x380 * x25;
    if (x381 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.cpp:49");
    args[2][32 * steps + cycle] = x70;
    args[2][33 * steps + cycle] = x70;
    args[2][34 * steps + cycle] = x70;
    args[2][35 * steps + cycle] = x70;
    args[2][36 * steps + cycle] = x70;
    args[2][37 * steps + cycle] = x70;
    args[2][38 * steps + cycle] = x70;
    args[2][39 * steps + cycle] = x70;
    args[2][40 * steps + cycle] = x70;
    args[2][41 * steps + cycle] = x70;
    args[2][42 * steps + cycle] = x70;
    args[2][43 * steps + cycle] = x70;
    args[2][44 * steps + cycle] = x70;
    args[2][45 * steps + cycle] = x70;
    args[2][46 * steps + cycle] = x70;
    args[2][47 * steps + cycle] = x70;
    args[2][48 * steps + cycle] = x70;
    args[2][49 * steps + cycle] = x70;
    args[2][50 * steps + cycle] = x70;
    args[2][51 * steps + cycle] = x70;
    args[2][52 * steps + cycle] = x70;
    args[2][53 * steps + cycle] = x70;
    args[2][54 * steps + cycle] = x70;
    args[2][55 * steps + cycle] = x70;
    args[2][56 * steps + cycle] = x70;
    args[2][57 * steps + cycle] = x70;
    args[2][58 * steps + cycle] = x70;
    args[2][59 * steps + cycle] = x70;
    args[2][60 * steps + cycle] = x70;
    args[2][61 * steps + cycle] = x70;
    args[2][62 * steps + cycle] = x70;
    args[2][63 * steps + cycle] = x70;
    args[2][64 * steps + cycle] = x70;
    args[2][65 * steps + cycle] = x70;
    args[2][66 * steps + cycle] = x70;
    args[2][67 * steps + cycle] = x70;
    args[2][68 * steps + cycle] = x70;
    args[2][69 * steps + cycle] = x70;
    args[2][70 * steps + cycle] = x70;
    args[2][71 * steps + cycle] = x70;
    args[2][72 * steps + cycle] = x70;
    args[2][73 * steps + cycle] = x70;
    args[2][74 * steps + cycle] = x70;
    args[2][75 * steps + cycle] = x70;
    args[2][76 * steps + cycle] = x70;
    args[2][77 * steps + cycle] = x70;
    args[2][78 * steps + cycle] = x70;
    args[2][79 * steps + cycle] = x70;
    args[2][80 * steps + cycle] = x70;
    args[2][81 * steps + cycle] = x70;
    args[2][82 * steps + cycle] = x70;
    args[2][83 * steps + cycle] = x70;
    args[2][84 * steps + cycle] = x70;
    args[2][85 * steps + cycle] = x70;
    args[2][86 * steps + cycle] = x70;
    args[2][87 * steps + cycle] = x70;
    args[2][88 * steps + cycle] = x70;
    args[2][89 * steps + cycle] = x70;
    args[2][90 * steps + cycle] = x70;
    args[2][91 * steps + cycle] = x70;
    args[2][92 * steps + cycle] = x70;
    args[2][93 * steps + cycle] = x70;
    args[2][94 * steps + cycle] = x70;
    args[2][95 * steps + cycle] = x70;
    Fp x382 = x329 - x71;
    Fp x383 = x329 * x382;
    Fp x384 = x329 - x1;
    Fp x385 = x383 * x384;
    Fp x386 = x329 - x2;
    Fp x387 = x385 * x386;
    if (x387 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x388 = x330 - x71;
    Fp x389 = x330 * x388;
    Fp x390 = x330 - x1;
    Fp x391 = x389 * x390;
    Fp x392 = x330 - x2;
    Fp x393 = x391 * x392;
    if (x393 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x394 = x333 - x71;
    Fp x395 = x333 * x394;
    Fp x396 = x333 - x1;
    Fp x397 = x395 * x396;
    Fp x398 = x333 - x2;
    Fp x399 = x397 * x398;
    if (x399 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x400 = x336 - x71;
    Fp x401 = x336 * x400;
    Fp x402 = x336 - x1;
    Fp x403 = x401 * x402;
    Fp x404 = x336 - x2;
    Fp x405 = x403 * x404;
    if (x405 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x406 = x339 - x71;
    Fp x407 = x339 * x406;
    Fp x408 = x339 - x1;
    Fp x409 = x407 * x408;
    Fp x410 = x339 - x2;
    Fp x411 = x409 * x410;
    if (x411 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x412 = x342 - x71;
    Fp x413 = x342 * x412;
    Fp x414 = x342 - x1;
    Fp x415 = x413 * x414;
    Fp x416 = x342 - x2;
    Fp x417 = x415 * x416;
    if (x417 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x418 = x345 - x71;
    Fp x419 = x345 * x418;
    Fp x420 = x345 - x1;
    Fp x421 = x419 * x420;
    Fp x422 = x345 - x2;
    Fp x423 = x421 * x422;
    if (x423 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x424 = x348 - x71;
    Fp x425 = x348 * x424;
    Fp x426 = x348 - x1;
    Fp x427 = x425 * x426;
    Fp x428 = x348 - x2;
    Fp x429 = x427 * x428;
    if (x429 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x430 = x351 - x71;
    Fp x431 = x351 * x430;
    Fp x432 = x351 - x1;
    Fp x433 = x431 * x432;
    Fp x434 = x351 - x2;
    Fp x435 = x433 * x434;
    if (x435 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x436 = x354 - x71;
    Fp x437 = x354 * x436;
    Fp x438 = x354 - x1;
    Fp x439 = x437 * x438;
    Fp x440 = x354 - x2;
    Fp x441 = x439 * x440;
    if (x441 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x442 = x357 - x71;
    Fp x443 = x357 * x442;
    Fp x444 = x357 - x1;
    Fp x445 = x443 * x444;
    Fp x446 = x357 - x2;
    Fp x447 = x445 * x446;
    if (x447 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x448 = x360 - x71;
    Fp x449 = x360 * x448;
    Fp x450 = x360 - x1;
    Fp x451 = x449 * x450;
    Fp x452 = x360 - x2;
    Fp x453 = x451 * x452;
    if (x453 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x454 = x363 - x71;
    Fp x455 = x363 * x454;
    Fp x456 = x363 - x1;
    Fp x457 = x455 * x456;
    Fp x458 = x363 - x2;
    Fp x459 = x457 * x458;
    if (x459 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x460 = x366 - x71;
    Fp x461 = x366 * x460;
    Fp x462 = x366 - x1;
    Fp x463 = x461 * x462;
    Fp x464 = x366 - x2;
    Fp x465 = x463 * x464;
    if (x465 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x466 = x369 - x71;
    Fp x467 = x369 * x466;
    Fp x468 = x369 - x1;
    Fp x469 = x467 * x468;
    Fp x470 = x369 - x2;
    Fp x471 = x469 * x470;
    if (x471 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x472 = x372 - x71;
    Fp x473 = x372 * x472;
    Fp x474 = x372 - x1;
    Fp x475 = x473 * x474;
    Fp x476 = x372 - x2;
    Fp x477 = x475 * x476;
    if (x477 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x478 = args[2][16 * steps + ((cycle - 0) & mask)];
    Fp x479 = x478 - x71;
    Fp x480 = x478 * x479;
    Fp x481 = x478 - x1;
    Fp x482 = x480 * x481;
    Fp x483 = x478 - x2;
    Fp x484 = x482 * x483;
    if (x484 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x485 = x257 - x71;
    Fp x486 = x257 * x485;
    Fp x487 = x257 - x1;
    Fp x488 = x486 * x487;
    Fp x489 = x257 - x2;
    Fp x490 = x488 * x489;
    if (x490 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x491 = x258 - x71;
    Fp x492 = x258 * x491;
    Fp x493 = x258 - x1;
    Fp x494 = x492 * x493;
    Fp x495 = x258 - x2;
    Fp x496 = x494 * x495;
    if (x496 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x497 = x261 - x71;
    Fp x498 = x261 * x497;
    Fp x499 = x261 - x1;
    Fp x500 = x498 * x499;
    Fp x501 = x261 - x2;
    Fp x502 = x500 * x501;
    if (x502 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x503 = x264 - x71;
    Fp x504 = x264 * x503;
    Fp x505 = x264 - x1;
    Fp x506 = x504 * x505;
    Fp x507 = x264 - x2;
    Fp x508 = x506 * x507;
    if (x508 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x509 = x267 - x71;
    Fp x510 = x267 * x509;
    Fp x511 = x267 - x1;
    Fp x512 = x510 * x511;
    Fp x513 = x267 - x2;
    Fp x514 = x512 * x513;
    if (x514 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x515 = x270 - x71;
    Fp x516 = x270 * x515;
    Fp x517 = x270 - x1;
    Fp x518 = x516 * x517;
    Fp x519 = x270 - x2;
    Fp x520 = x518 * x519;
    if (x520 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x521 = x273 - x71;
    Fp x522 = x273 * x521;
    Fp x523 = x273 - x1;
    Fp x524 = x522 * x523;
    Fp x525 = x273 - x2;
    Fp x526 = x524 * x525;
    if (x526 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x527 = args[2][24 * steps + ((cycle - 0) & mask)];
    Fp x528 = x527 - x71;
    Fp x529 = x527 * x528;
    Fp x530 = x527 - x1;
    Fp x531 = x529 * x530;
    Fp x532 = x527 - x2;
    Fp x533 = x531 * x532;
    if (x533 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x534 = x276 - x71;
    Fp x535 = x276 * x534;
    Fp x536 = x276 - x1;
    Fp x537 = x535 * x536;
    Fp x538 = x276 - x2;
    Fp x539 = x537 * x538;
    if (x539 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x540 = x277 - x71;
    Fp x541 = x277 * x540;
    Fp x542 = x277 - x1;
    Fp x543 = x541 * x542;
    Fp x544 = x277 - x2;
    Fp x545 = x543 * x544;
    if (x545 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x546 = x280 - x71;
    Fp x547 = x280 * x546;
    Fp x548 = x280 - x1;
    Fp x549 = x547 * x548;
    Fp x550 = x280 - x2;
    Fp x551 = x549 * x550;
    if (x551 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x552 = args[2][28 * steps + ((cycle - 0) & mask)];
    Fp x553 = x552 - x71;
    Fp x554 = x552 * x553;
    Fp x555 = x552 - x1;
    Fp x556 = x554 * x555;
    Fp x557 = x552 - x2;
    Fp x558 = x556 * x557;
    if (x558 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x559 = args[2][29 * steps + ((cycle - 0) & mask)];
    Fp x560 = x559 - x71;
    Fp x561 = x559 * x560;
    Fp x562 = x559 - x1;
    Fp x563 = x561 * x562;
    Fp x564 = x559 - x2;
    Fp x565 = x563 * x564;
    if (x565 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x566 = x376 - x71;
    Fp x567 = x376 * x566;
    Fp x568 = x376 - x1;
    Fp x569 = x567 * x568;
    Fp x570 = x376 - x2;
    Fp x571 = x569 * x570;
    if (x571 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x572 = x377 - x71;
    Fp x573 = x377 * x572;
    Fp x574 = x377 - x1;
    Fp x575 = x573 * x574;
    Fp x576 = x377 - x2;
    Fp x577 = x575 * x576;
    if (x577 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    if (x480 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    if (x486 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    if (x492 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    if (x498 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    if (x504 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    if (x510 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    if (x516 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    if (x522 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    Fp x578 = x478 + x257;
    Fp x579 = x578 + x258;
    Fp x580 = x579 + x261;
    Fp x581 = x580 + x264;
    Fp x582 = x581 + x267;
    Fp x583 = x582 + x270;
    Fp x584 = x583 + x273;
    Fp x585 = x584 - x71;
    if (x585 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
    if (x529 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
    if (x535 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
    if (x541 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
    if (x547 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
    Fp x586 = x527 + x276;
    Fp x587 = x586 + x277;
    Fp x588 = x587 + x280;
    Fp x589 = x588 - x71;
    if (x589 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
    if (x554 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:34");
    if (x561 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:35");
    Fp x590 = args[2][132 * steps + ((cycle - 0) & mask)];
    Fp x591 = x590 - x71;
    Fp x592 = x590 * x591;
    if (x592 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x593 = x225 - x71;
    Fp x594 = x225 * x593;
    if (x594 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x595 = x226 - x71;
    Fp x596 = x226 * x595;
    if (x596 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x597 = x229 - x71;
    Fp x598 = x229 * x597;
    if (x598 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x599 = x232 - x71;
    Fp x600 = x232 * x599;
    if (x600 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x601 = x235 - x71;
    Fp x602 = x235 * x601;
    if (x602 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x603 = x238 - x71;
    Fp x604 = x238 * x603;
    if (x604 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x605 = x241 - x71;
    Fp x606 = x241 * x605;
    if (x606 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x607 = x244 - x71;
    Fp x608 = x244 * x607;
    if (x608 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x609 = x247 - x71;
    Fp x610 = x247 * x609;
    if (x610 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x611 = x250 - x71;
    Fp x612 = x250 * x611;
    if (x612 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x613 = x253 - x71;
    Fp x614 = x253 * x613;
    if (x614 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x615 = x590 + x225;
    Fp x616 = x615 + x226;
    Fp x617 = x616 + x229;
    Fp x618 = x617 + x232;
    Fp x619 = x618 + x235;
    Fp x620 = x619 + x238;
    Fp x621 = x620 + x241;
    Fp x622 = x621 + x244;
    Fp x623 = x622 + x247;
    Fp x624 = x623 + x250;
    Fp x625 = x624 + x253;
    Fp x626 = x625 - x71;
    if (x626 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
  }
  Fp x627 = args[0][6 * steps + ((cycle - 0) & mask)];
  if (x627 != 0) {
    host_args[0] = x72;
    host(ctx, "log", "C%u: Fini", host_args.data(), 1, host_outs.data(), 0);
    args[2][128 * steps + cycle] = x70;
    args[2][131 * steps + cycle] = x70;
    {
      host_args[0] = x72;
      host_args[1] = x70;
      host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
      Fp x628 = host_outs[0];
      Fp x629 = host_outs[1];
      args[2][129 * steps + cycle] = x628;
      args[2][130 * steps + cycle] = x629;
    }
    {
      args[2][132 * steps + cycle] = x70;
      args[2][133 * steps + cycle] = x70;
      args[2][134 * steps + cycle] = x70;
      args[2][135 * steps + cycle] = x70;
      args[2][136 * steps + cycle] = x70;
      args[2][137 * steps + cycle] = x70;
      args[2][138 * steps + cycle] = x70;
      args[2][139 * steps + cycle] = x70;
      args[2][140 * steps + cycle] = x70;
      args[2][141 * steps + cycle] = x70;
      args[2][142 * steps + cycle] = x70;
      args[2][143 * steps + cycle] = x71;
    }
    Fp x630 = args[2][133 * steps + ((cycle - 0) & mask)];
    Fp x631 = args[2][134 * steps + ((cycle - 0) & mask)];
    Fp x632 = x631 * x1;
    Fp x633 = x630 + x632;
    Fp x634 = args[2][135 * steps + ((cycle - 0) & mask)];
    Fp x635 = x634 * x2;
    Fp x636 = x633 + x635;
    Fp x637 = args[2][136 * steps + ((cycle - 0) & mask)];
    Fp x638 = x637 * x3;
    Fp x639 = x636 + x638;
    Fp x640 = args[2][137 * steps + ((cycle - 0) & mask)];
    Fp x641 = x640 * x4;
    Fp x642 = x639 + x641;
    Fp x643 = args[2][138 * steps + ((cycle - 0) & mask)];
    Fp x644 = x643 * x5;
    Fp x645 = x642 + x644;
    Fp x646 = args[2][139 * steps + ((cycle - 0) & mask)];
    Fp x647 = x646 * x0;
    Fp x648 = x645 + x647;
    Fp x649 = args[2][140 * steps + ((cycle - 0) & mask)];
    Fp x650 = x649 * x6;
    Fp x651 = x648 + x650;
    Fp x652 = args[2][141 * steps + ((cycle - 0) & mask)];
    Fp x653 = x652 * x7;
    Fp x654 = x651 + x653;
    Fp x655 = args[2][142 * steps + ((cycle - 0) & mask)];
    Fp x656 = x655 * x8;
    Fp x657 = x654 + x656;
    Fp x658 = args[2][143 * steps + ((cycle - 0) & mask)];
    Fp x659 = x658 * x9;
    Fp x660 = x657 + x659;
    Fp x661 = x660 - x9;
    if (x661 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    Fp x662 = args[2][143 * steps + ((cycle - 1) & mask)];
    Fp x663 = x662 - x71;
    if (x663 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.cpp:60");
    Fp x664 = args[2][132 * steps + ((cycle - 0) & mask)];
    Fp x665 = x664 - x71;
    Fp x666 = x664 * x665;
    if (x666 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x667 = x630 - x71;
    Fp x668 = x630 * x667;
    if (x668 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x669 = x631 - x71;
    Fp x670 = x631 * x669;
    if (x670 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x671 = x634 - x71;
    Fp x672 = x634 * x671;
    if (x672 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x673 = x637 - x71;
    Fp x674 = x637 * x673;
    if (x674 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x675 = x640 - x71;
    Fp x676 = x640 * x675;
    if (x676 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x677 = x643 - x71;
    Fp x678 = x643 * x677;
    if (x678 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x679 = x646 - x71;
    Fp x680 = x646 * x679;
    if (x680 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x681 = x649 - x71;
    Fp x682 = x649 * x681;
    if (x682 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x683 = x652 - x71;
    Fp x684 = x652 * x683;
    if (x684 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x685 = x655 - x71;
    Fp x686 = x655 * x685;
    if (x686 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x687 = x658 - x71;
    Fp x688 = x658 * x687;
    if (x688 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x689 = x664 + x630;
    Fp x690 = x689 + x631;
    Fp x691 = x690 + x634;
    Fp x692 = x691 + x637;
    Fp x693 = x692 + x640;
    Fp x694 = x693 + x643;
    Fp x695 = x694 + x646;
    Fp x696 = x695 + x649;
    Fp x697 = x696 + x652;
    Fp x698 = x697 + x655;
    Fp x699 = x698 + x658;
    Fp x700 = x699 - x71;
    if (x700 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
  }
  Fp x701 = args[0][7 * steps + ((cycle - 0) & mask)];
  Fp x702 = args[0][11 * steps + ((cycle - 0) & mask)];
  Fp x703 = x701 * x702;
  Fp x704 = args[0][1 * steps + ((cycle - 0) & mask)];
  if (x704 != 0) {
    Fp x705 = args[2][139 * steps + ((cycle - 1) & mask)];
    if (x705 != 0) {
      {
        args[2][132 * steps + cycle] = x71;
        args[2][133 * steps + cycle] = x70;
        args[2][134 * steps + cycle] = x70;
        args[2][135 * steps + cycle] = x70;
        args[2][136 * steps + cycle] = x70;
        args[2][137 * steps + cycle] = x70;
        args[2][138 * steps + cycle] = x70;
        args[2][139 * steps + cycle] = x70;
        args[2][140 * steps + cycle] = x70;
        args[2][141 * steps + cycle] = x70;
        args[2][142 * steps + cycle] = x70;
        args[2][143 * steps + cycle] = x70;
      }
      Fp x706 = args[2][133 * steps + ((cycle - 0) & mask)];
      Fp x707 = args[2][134 * steps + ((cycle - 0) & mask)];
      Fp x708 = x707 * x1;
      Fp x709 = x706 + x708;
      Fp x710 = args[2][135 * steps + ((cycle - 0) & mask)];
      Fp x711 = x710 * x2;
      Fp x712 = x709 + x711;
      Fp x713 = args[2][136 * steps + ((cycle - 0) & mask)];
      Fp x714 = x713 * x3;
      Fp x715 = x712 + x714;
      Fp x716 = args[2][137 * steps + ((cycle - 0) & mask)];
      Fp x717 = x716 * x4;
      Fp x718 = x715 + x717;
      Fp x719 = args[2][138 * steps + ((cycle - 0) & mask)];
      Fp x720 = x719 * x5;
      Fp x721 = x718 + x720;
      Fp x722 = args[2][139 * steps + ((cycle - 0) & mask)];
      Fp x723 = x722 * x0;
      Fp x724 = x721 + x723;
      Fp x725 = args[2][140 * steps + ((cycle - 0) & mask)];
      Fp x726 = x725 * x6;
      Fp x727 = x724 + x726;
      Fp x728 = args[2][141 * steps + ((cycle - 0) & mask)];
      Fp x729 = x728 * x7;
      Fp x730 = x727 + x729;
      Fp x731 = args[2][142 * steps + ((cycle - 0) & mask)];
      Fp x732 = x731 * x8;
      Fp x733 = x730 + x732;
      Fp x734 = args[2][143 * steps + ((cycle - 0) & mask)];
      Fp x735 = x734 * x9;
      Fp x736 = x733 + x735;
      if (x736 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    }
    Fp x737 = args[2][132 * steps + ((cycle - 1) & mask)];
    if (x737 != 0) {
      Fp x738 = args[2][120 * steps + ((cycle - 1) & mask)];
      {
        Fp x739 = (x738 == 0) ? Fp(1) : Fp(0);
        args[2][132 * steps + cycle] = x739;
        Fp x740 = x738 - x71;
        Fp x741 = (x740 == 0) ? Fp(1) : Fp(0);
        args[2][133 * steps + cycle] = x741;
        Fp x742 = x738 - x1;
        Fp x743 = (x742 == 0) ? Fp(1) : Fp(0);
        args[2][134 * steps + cycle] = x743;
        Fp x744 = x738 - x2;
        Fp x745 = (x744 == 0) ? Fp(1) : Fp(0);
        args[2][135 * steps + cycle] = x745;
        Fp x746 = x738 - x3;
        Fp x747 = (x746 == 0) ? Fp(1) : Fp(0);
        args[2][136 * steps + cycle] = x747;
        Fp x748 = x738 - x4;
        Fp x749 = (x748 == 0) ? Fp(1) : Fp(0);
        args[2][137 * steps + cycle] = x749;
        Fp x750 = x738 - x5;
        Fp x751 = (x750 == 0) ? Fp(1) : Fp(0);
        args[2][138 * steps + cycle] = x751;
        Fp x752 = x738 - x0;
        Fp x753 = (x752 == 0) ? Fp(1) : Fp(0);
        args[2][139 * steps + cycle] = x753;
        Fp x754 = x738 - x6;
        Fp x755 = (x754 == 0) ? Fp(1) : Fp(0);
        args[2][140 * steps + cycle] = x755;
        Fp x756 = x738 - x7;
        Fp x757 = (x756 == 0) ? Fp(1) : Fp(0);
        args[2][141 * steps + cycle] = x757;
        Fp x758 = x738 - x8;
        Fp x759 = (x758 == 0) ? Fp(1) : Fp(0);
        args[2][142 * steps + cycle] = x759;
        Fp x760 = x738 - x9;
        Fp x761 = (x760 == 0) ? Fp(1) : Fp(0);
        args[2][143 * steps + cycle] = x761;
      }
      Fp x762 = args[2][133 * steps + ((cycle - 0) & mask)];
      Fp x763 = args[2][134 * steps + ((cycle - 0) & mask)];
      Fp x764 = x763 * x1;
      Fp x765 = x762 + x764;
      Fp x766 = args[2][135 * steps + ((cycle - 0) & mask)];
      Fp x767 = x766 * x2;
      Fp x768 = x765 + x767;
      Fp x769 = args[2][136 * steps + ((cycle - 0) & mask)];
      Fp x770 = x769 * x3;
      Fp x771 = x768 + x770;
      Fp x772 = args[2][137 * steps + ((cycle - 0) & mask)];
      Fp x773 = x772 * x4;
      Fp x774 = x771 + x773;
      Fp x775 = args[2][138 * steps + ((cycle - 0) & mask)];
      Fp x776 = x775 * x5;
      Fp x777 = x774 + x776;
      Fp x778 = args[2][139 * steps + ((cycle - 0) & mask)];
      Fp x779 = x778 * x0;
      Fp x780 = x777 + x779;
      Fp x781 = args[2][140 * steps + ((cycle - 0) & mask)];
      Fp x782 = x781 * x6;
      Fp x783 = x780 + x782;
      Fp x784 = args[2][141 * steps + ((cycle - 0) & mask)];
      Fp x785 = x784 * x7;
      Fp x786 = x783 + x785;
      Fp x787 = args[2][142 * steps + ((cycle - 0) & mask)];
      Fp x788 = x787 * x8;
      Fp x789 = x786 + x788;
      Fp x790 = args[2][143 * steps + ((cycle - 0) & mask)];
      Fp x791 = x790 * x9;
      Fp x792 = x789 + x791;
      Fp x793 = x792 - x738;
      if (x793 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      if (x781 != 0) {
        Fp x794 = args[2][34 * steps + ((cycle - 2) & mask)];
        args[1][0] = x794;
        Fp x795 = args[2][35 * steps + ((cycle - 2) & mask)];
        args[1][1] = x795;
        Fp x796 = args[2][36 * steps + ((cycle - 2) & mask)];
        args[1][2] = x796;
        Fp x797 = args[2][37 * steps + ((cycle - 2) & mask)];
        args[1][3] = x797;
        Fp x798 = args[2][38 * steps + ((cycle - 2) & mask)];
        args[1][4] = x798;
        Fp x799 = args[2][39 * steps + ((cycle - 2) & mask)];
        args[1][5] = x799;
        Fp x800 = args[2][40 * steps + ((cycle - 2) & mask)];
        args[1][6] = x800;
        Fp x801 = args[2][41 * steps + ((cycle - 2) & mask)];
        args[1][7] = x801;
        Fp x802 = args[2][42 * steps + ((cycle - 2) & mask)];
        args[1][8] = x802;
        Fp x803 = args[2][43 * steps + ((cycle - 2) & mask)];
        args[1][9] = x803;
        Fp x804 = args[2][44 * steps + ((cycle - 2) & mask)];
        args[1][10] = x804;
        Fp x805 = args[2][45 * steps + ((cycle - 2) & mask)];
        args[1][11] = x805;
        Fp x806 = args[2][46 * steps + ((cycle - 2) & mask)];
        args[1][12] = x806;
        Fp x807 = args[2][47 * steps + ((cycle - 2) & mask)];
        args[1][13] = x807;
        Fp x808 = args[2][48 * steps + ((cycle - 2) & mask)];
        args[1][14] = x808;
        Fp x809 = args[2][49 * steps + ((cycle - 2) & mask)];
        args[1][15] = x809;
        Fp x810 = args[2][50 * steps + ((cycle - 2) & mask)];
        args[1][16] = x810;
        Fp x811 = args[2][51 * steps + ((cycle - 2) & mask)];
        args[1][17] = x811;
      }
    }
    Fp x812 = args[2][140 * steps + ((cycle - 1) & mask)];
    if (x812 != 0) {
      if (x703 != 0) {
        {
          args[2][132 * steps + cycle] = x70;
          args[2][133 * steps + cycle] = x70;
          args[2][134 * steps + cycle] = x70;
          args[2][135 * steps + cycle] = x70;
          args[2][136 * steps + cycle] = x70;
          args[2][137 * steps + cycle] = x70;
          args[2][138 * steps + cycle] = x70;
          args[2][139 * steps + cycle] = x70;
          args[2][140 * steps + cycle] = x70;
          args[2][141 * steps + cycle] = x71;
          args[2][142 * steps + cycle] = x70;
          args[2][143 * steps + cycle] = x70;
        }
        Fp x813 = args[2][133 * steps + ((cycle - 0) & mask)];
        Fp x814 = args[2][134 * steps + ((cycle - 0) & mask)];
        Fp x815 = x814 * x1;
        Fp x816 = x813 + x815;
        Fp x817 = args[2][135 * steps + ((cycle - 0) & mask)];
        Fp x818 = x817 * x2;
        Fp x819 = x816 + x818;
        Fp x820 = args[2][136 * steps + ((cycle - 0) & mask)];
        Fp x821 = x820 * x3;
        Fp x822 = x819 + x821;
        Fp x823 = args[2][137 * steps + ((cycle - 0) & mask)];
        Fp x824 = x823 * x4;
        Fp x825 = x822 + x824;
        Fp x826 = args[2][138 * steps + ((cycle - 0) & mask)];
        Fp x827 = x826 * x5;
        Fp x828 = x825 + x827;
        Fp x829 = args[2][139 * steps + ((cycle - 0) & mask)];
        Fp x830 = x829 * x0;
        Fp x831 = x828 + x830;
        Fp x832 = args[2][140 * steps + ((cycle - 0) & mask)];
        Fp x833 = x832 * x6;
        Fp x834 = x831 + x833;
        Fp x835 = args[2][141 * steps + ((cycle - 0) & mask)];
        Fp x836 = x835 * x7;
        Fp x837 = x834 + x836;
        Fp x838 = args[2][142 * steps + ((cycle - 0) & mask)];
        Fp x839 = x838 * x8;
        Fp x840 = x837 + x839;
        Fp x841 = args[2][143 * steps + ((cycle - 0) & mask)];
        Fp x842 = x841 * x9;
        Fp x843 = x840 + x842;
        Fp x844 = x843 - x7;
        if (x844 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      }
      Fp x845 = x71 - x703;
      if (x845 != 0) {
        {
          args[2][132 * steps + cycle] = x70;
          args[2][133 * steps + cycle] = x70;
          args[2][134 * steps + cycle] = x70;
          args[2][135 * steps + cycle] = x70;
          args[2][136 * steps + cycle] = x70;
          args[2][137 * steps + cycle] = x70;
          args[2][138 * steps + cycle] = x70;
          args[2][139 * steps + cycle] = x70;
          args[2][140 * steps + cycle] = x71;
          args[2][141 * steps + cycle] = x70;
          args[2][142 * steps + cycle] = x70;
          args[2][143 * steps + cycle] = x70;
        }
        Fp x846 = args[2][133 * steps + ((cycle - 0) & mask)];
        Fp x847 = args[2][134 * steps + ((cycle - 0) & mask)];
        Fp x848 = x847 * x1;
        Fp x849 = x846 + x848;
        Fp x850 = args[2][135 * steps + ((cycle - 0) & mask)];
        Fp x851 = x850 * x2;
        Fp x852 = x849 + x851;
        Fp x853 = args[2][136 * steps + ((cycle - 0) & mask)];
        Fp x854 = x853 * x3;
        Fp x855 = x852 + x854;
        Fp x856 = args[2][137 * steps + ((cycle - 0) & mask)];
        Fp x857 = x856 * x4;
        Fp x858 = x855 + x857;
        Fp x859 = args[2][138 * steps + ((cycle - 0) & mask)];
        Fp x860 = x859 * x5;
        Fp x861 = x858 + x860;
        Fp x862 = args[2][139 * steps + ((cycle - 0) & mask)];
        Fp x863 = x862 * x0;
        Fp x864 = x861 + x863;
        Fp x865 = args[2][140 * steps + ((cycle - 0) & mask)];
        Fp x866 = x865 * x6;
        Fp x867 = x864 + x866;
        Fp x868 = args[2][141 * steps + ((cycle - 0) & mask)];
        Fp x869 = x868 * x7;
        Fp x870 = x867 + x869;
        Fp x871 = args[2][142 * steps + ((cycle - 0) & mask)];
        Fp x872 = x871 * x8;
        Fp x873 = x870 + x872;
        Fp x874 = args[2][143 * steps + ((cycle - 0) & mask)];
        Fp x875 = x874 * x9;
        Fp x876 = x873 + x875;
        Fp x877 = x876 - x6;
        if (x877 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      }
    }
    Fp x878 = args[2][141 * steps + ((cycle - 1) & mask)];
    Fp x879 = args[2][142 * steps + ((cycle - 1) & mask)];
    Fp x880 = x878 + x879;
    if (x880 != 0) {
      Fp x881 = args[2][127 * steps + ((cycle - 1) & mask)];
      {
        Fp x882 = (x881 == 0) ? Fp(1) : Fp(0);
        args[2][132 * steps + cycle] = x882;
        Fp x883 = x881 - x71;
        Fp x884 = (x883 == 0) ? Fp(1) : Fp(0);
        args[2][133 * steps + cycle] = x884;
        Fp x885 = x881 - x1;
        Fp x886 = (x885 == 0) ? Fp(1) : Fp(0);
        args[2][134 * steps + cycle] = x886;
        Fp x887 = x881 - x2;
        Fp x888 = (x887 == 0) ? Fp(1) : Fp(0);
        args[2][135 * steps + cycle] = x888;
        Fp x889 = x881 - x3;
        Fp x890 = (x889 == 0) ? Fp(1) : Fp(0);
        args[2][136 * steps + cycle] = x890;
        Fp x891 = x881 - x4;
        Fp x892 = (x891 == 0) ? Fp(1) : Fp(0);
        args[2][137 * steps + cycle] = x892;
        Fp x893 = x881 - x5;
        Fp x894 = (x893 == 0) ? Fp(1) : Fp(0);
        args[2][138 * steps + cycle] = x894;
        Fp x895 = x881 - x0;
        Fp x896 = (x895 == 0) ? Fp(1) : Fp(0);
        args[2][139 * steps + cycle] = x896;
        Fp x897 = x881 - x6;
        Fp x898 = (x897 == 0) ? Fp(1) : Fp(0);
        args[2][140 * steps + cycle] = x898;
        Fp x899 = x881 - x7;
        Fp x900 = (x899 == 0) ? Fp(1) : Fp(0);
        args[2][141 * steps + cycle] = x900;
        Fp x901 = x881 - x8;
        Fp x902 = (x901 == 0) ? Fp(1) : Fp(0);
        args[2][142 * steps + cycle] = x902;
        Fp x903 = x881 - x9;
        Fp x904 = (x903 == 0) ? Fp(1) : Fp(0);
        args[2][143 * steps + cycle] = x904;
      }
      Fp x905 = args[2][133 * steps + ((cycle - 0) & mask)];
      Fp x906 = args[2][134 * steps + ((cycle - 0) & mask)];
      Fp x907 = x906 * x1;
      Fp x908 = x905 + x907;
      Fp x909 = args[2][135 * steps + ((cycle - 0) & mask)];
      Fp x910 = x909 * x2;
      Fp x911 = x908 + x910;
      Fp x912 = args[2][136 * steps + ((cycle - 0) & mask)];
      Fp x913 = x912 * x3;
      Fp x914 = x911 + x913;
      Fp x915 = args[2][137 * steps + ((cycle - 0) & mask)];
      Fp x916 = x915 * x4;
      Fp x917 = x914 + x916;
      Fp x918 = args[2][138 * steps + ((cycle - 0) & mask)];
      Fp x919 = x918 * x5;
      Fp x920 = x917 + x919;
      Fp x921 = args[2][139 * steps + ((cycle - 0) & mask)];
      Fp x922 = x921 * x0;
      Fp x923 = x920 + x922;
      Fp x924 = args[2][140 * steps + ((cycle - 0) & mask)];
      Fp x925 = x924 * x6;
      Fp x926 = x923 + x925;
      Fp x927 = args[2][141 * steps + ((cycle - 0) & mask)];
      Fp x928 = x927 * x7;
      Fp x929 = x926 + x928;
      Fp x930 = args[2][142 * steps + ((cycle - 0) & mask)];
      Fp x931 = x930 * x8;
      Fp x932 = x929 + x931;
      Fp x933 = args[2][143 * steps + ((cycle - 0) & mask)];
      Fp x934 = x933 * x9;
      Fp x935 = x932 + x934;
      Fp x936 = x935 - x881;
      if (x936 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    }
    Fp x937 = args[2][143 * steps + ((cycle - 1) & mask)];
    if (x937 != 0) {
      {
        args[2][132 * steps + cycle] = x70;
        args[2][133 * steps + cycle] = x70;
        args[2][134 * steps + cycle] = x70;
        args[2][135 * steps + cycle] = x70;
        args[2][136 * steps + cycle] = x70;
        args[2][137 * steps + cycle] = x70;
        args[2][138 * steps + cycle] = x70;
        args[2][139 * steps + cycle] = x70;
        args[2][140 * steps + cycle] = x70;
        args[2][141 * steps + cycle] = x70;
        args[2][142 * steps + cycle] = x70;
        args[2][143 * steps + cycle] = x71;
      }
      Fp x938 = args[2][133 * steps + ((cycle - 0) & mask)];
      Fp x939 = args[2][134 * steps + ((cycle - 0) & mask)];
      Fp x940 = x939 * x1;
      Fp x941 = x938 + x940;
      Fp x942 = args[2][135 * steps + ((cycle - 0) & mask)];
      Fp x943 = x942 * x2;
      Fp x944 = x941 + x943;
      Fp x945 = args[2][136 * steps + ((cycle - 0) & mask)];
      Fp x946 = x945 * x3;
      Fp x947 = x944 + x946;
      Fp x948 = args[2][137 * steps + ((cycle - 0) & mask)];
      Fp x949 = x948 * x4;
      Fp x950 = x947 + x949;
      Fp x951 = args[2][138 * steps + ((cycle - 0) & mask)];
      Fp x952 = x951 * x5;
      Fp x953 = x950 + x952;
      Fp x954 = args[2][139 * steps + ((cycle - 0) & mask)];
      Fp x955 = x954 * x0;
      Fp x956 = x953 + x955;
      Fp x957 = args[2][140 * steps + ((cycle - 0) & mask)];
      Fp x958 = x957 * x6;
      Fp x959 = x956 + x958;
      Fp x960 = args[2][141 * steps + ((cycle - 0) & mask)];
      Fp x961 = x960 * x7;
      Fp x962 = x959 + x961;
      Fp x963 = args[2][142 * steps + ((cycle - 0) & mask)];
      Fp x964 = x963 * x8;
      Fp x965 = x962 + x964;
      Fp x966 = args[2][143 * steps + ((cycle - 0) & mask)];
      Fp x967 = x966 * x9;
      Fp x968 = x965 + x967;
      Fp x969 = x968 - x9;
      if (x969 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    }
    Fp x970 = args[2][132 * steps + ((cycle - 0) & mask)];
    if (x970 != 0) {
      Fp x971 = args[2][0 * steps + ((cycle - 1) & mask)];
      if (x971 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:37");
      Fp x972 = args[2][1 * steps + ((cycle - 1) & mask)];
      Fp x973 = args[2][2 * steps + ((cycle - 1) & mask)];
      Fp x974 = x973 * x3;
      Fp x975 = x972 + x974;
      Fp x976 = args[2][3 * steps + ((cycle - 1) & mask)];
      Fp x977 = x976 * x11;
      Fp x978 = x975 + x977;
      Fp x979 = args[2][4 * steps + ((cycle - 1) & mask)];
      Fp x980 = x979 * x12;
      Fp x981 = x978 + x980;
      Fp x982 = args[2][5 * steps + ((cycle - 1) & mask)];
      Fp x983 = x982 * x13;
      Fp x984 = x981 + x983;
      Fp x985 = args[2][6 * steps + ((cycle - 1) & mask)];
      Fp x986 = x985 * x14;
      Fp x987 = x984 + x986;
      Fp x988 = args[2][7 * steps + ((cycle - 1) & mask)];
      Fp x989 = x988 * x15;
      Fp x990 = x987 + x989;
      Fp x991 = args[2][8 * steps + ((cycle - 1) & mask)];
      Fp x992 = x991 * x16;
      Fp x993 = x990 + x992;
      Fp x994 = args[2][9 * steps + ((cycle - 1) & mask)];
      Fp x995 = x994 * x17;
      Fp x996 = x993 + x995;
      Fp x997 = args[2][10 * steps + ((cycle - 1) & mask)];
      Fp x998 = x997 * x18;
      Fp x999 = x996 + x998;
      Fp x1000 = args[2][11 * steps + ((cycle - 1) & mask)];
      Fp x1001 = x1000 * x19;
      Fp x1002 = x999 + x1001;
      Fp x1003 = args[2][12 * steps + ((cycle - 1) & mask)];
      Fp x1004 = x1003 * x20;
      Fp x1005 = x1002 + x1004;
      args[2][128 * steps + cycle] = x1005;
      args[2][131 * steps + cycle] = x70;
      {
        host_args[0] = x72;
        host_args[1] = x1005;
        host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
        Fp x1006 = host_outs[0];
        Fp x1007 = host_outs[1];
        args[2][129 * steps + cycle] = x1006;
        args[2][130 * steps + cycle] = x1007;
      }
      Fp x1008 = args[2][129 * steps + ((cycle - 0) & mask)];
      Fp x1009 = args[2][130 * steps + ((cycle - 0) & mask)];
      {
        Fp x1010 = Fp(x1008.asUInt32() & x71.asUInt32());
        args[2][0 * steps + cycle] = x1010;
        Fp x1011 = x1008 - x1010;
        Fp x1012 = x1011 * x26;
        Fp x1013 = Fp(x1012.asUInt32() & x71.asUInt32());
        args[2][1 * steps + cycle] = x1013;
        Fp x1014 = x1012 - x1013;
        Fp x1015 = x1014 * x26;
        Fp x1016 = Fp(x1015.asUInt32() & x71.asUInt32());
        args[2][2 * steps + cycle] = x1016;
        Fp x1017 = x1015 - x1016;
        Fp x1018 = x1017 * x26;
        Fp x1019 = Fp(x1018.asUInt32() & x71.asUInt32());
        args[2][3 * steps + cycle] = x1019;
        Fp x1020 = x1018 - x1019;
        Fp x1021 = x1020 * x26;
        Fp x1022 = Fp(x1021.asUInt32() & x71.asUInt32());
        args[2][4 * steps + cycle] = x1022;
        Fp x1023 = x1021 - x1022;
        Fp x1024 = x1023 * x26;
        Fp x1025 = Fp(x1024.asUInt32() & x71.asUInt32());
        args[2][5 * steps + cycle] = x1025;
        Fp x1026 = x1024 - x1025;
        Fp x1027 = x1026 * x26;
        Fp x1028 = Fp(x1027.asUInt32() & x71.asUInt32());
        args[2][6 * steps + cycle] = x1028;
        Fp x1029 = x1027 - x1028;
        Fp x1030 = x1029 * x26;
        Fp x1031 = Fp(x1030.asUInt32() & x71.asUInt32());
        args[2][7 * steps + cycle] = x1031;
        Fp x1032 = x1030 - x1031;
        Fp x1033 = x1032 * x26;
        Fp x1034 = Fp(x1033.asUInt32() & x71.asUInt32());
        args[2][8 * steps + cycle] = x1034;
        Fp x1035 = x1033 - x1034;
        Fp x1036 = x1035 * x26;
        Fp x1037 = Fp(x1036.asUInt32() & x71.asUInt32());
        args[2][9 * steps + cycle] = x1037;
        Fp x1038 = x1036 - x1037;
        Fp x1039 = x1038 * x26;
        Fp x1040 = Fp(x1039.asUInt32() & x71.asUInt32());
        args[2][10 * steps + cycle] = x1040;
        Fp x1041 = x1039 - x1040;
        Fp x1042 = x1041 * x26;
        Fp x1043 = Fp(x1042.asUInt32() & x71.asUInt32());
        args[2][11 * steps + cycle] = x1043;
        Fp x1044 = x1042 - x1043;
        Fp x1045 = x1044 * x26;
        Fp x1046 = Fp(x1045.asUInt32() & x71.asUInt32());
        args[2][12 * steps + cycle] = x1046;
        Fp x1047 = x1045 - x1046;
        Fp x1048 = x1047 * x26;
        Fp x1049 = Fp(x1048.asUInt32() & x71.asUInt32());
        args[2][13 * steps + cycle] = x1049;
        Fp x1050 = x1048 - x1049;
        Fp x1051 = x1050 * x26;
        Fp x1052 = Fp(x1051.asUInt32() & x71.asUInt32());
        args[2][14 * steps + cycle] = x1052;
        Fp x1053 = x1051 - x1052;
        Fp x1054 = x1053 * x26;
        Fp x1055 = Fp(x1054.asUInt32() & x71.asUInt32());
        args[2][15 * steps + cycle] = x1055;
      }
      Fp x1056 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x1057 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x1058 = x1057 * x1;
      Fp x1059 = x1056 + x1058;
      Fp x1060 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x1061 = x1060 * x3;
      Fp x1062 = x1059 + x1061;
      Fp x1063 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x1064 = x1063 * x6;
      Fp x1065 = x1062 + x1064;
      Fp x1066 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x1067 = x1066 * x11;
      Fp x1068 = x1065 + x1067;
      Fp x1069 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x1070 = x1069 * x27;
      Fp x1071 = x1068 + x1070;
      Fp x1072 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x1073 = x1072 * x12;
      Fp x1074 = x1071 + x1073;
      Fp x1075 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x1076 = x1075 * x28;
      Fp x1077 = x1074 + x1076;
      Fp x1078 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x1079 = x1078 * x13;
      Fp x1080 = x1077 + x1079;
      Fp x1081 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x1082 = x1081 * x29;
      Fp x1083 = x1080 + x1082;
      Fp x1084 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x1085 = x1084 * x14;
      Fp x1086 = x1083 + x1085;
      Fp x1087 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x1088 = x1087 * x30;
      Fp x1089 = x1086 + x1088;
      Fp x1090 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x1091 = x1090 * x15;
      Fp x1092 = x1089 + x1091;
      Fp x1093 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x1094 = x1093 * x31;
      Fp x1095 = x1092 + x1094;
      Fp x1096 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x1097 = x1096 * x16;
      Fp x1098 = x1095 + x1097;
      Fp x1099 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x1100 = x1099 * x32;
      Fp x1101 = x1098 + x1100;
      Fp x1102 = x1008 - x1101;
      Fp x1103 = x1102 * x33;
      if (x1103 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:47");
      {
        Fp x1104 = Fp(x1009.asUInt32() & x71.asUInt32());
        args[2][16 * steps + cycle] = x1104;
        Fp x1105 = x1009 - x1104;
        Fp x1106 = x1105 * x26;
        Fp x1107 = Fp(x1106.asUInt32() & x71.asUInt32());
        args[2][17 * steps + cycle] = x1107;
        Fp x1108 = x1106 - x1107;
        Fp x1109 = x1108 * x26;
        Fp x1110 = Fp(x1109.asUInt32() & x71.asUInt32());
        args[2][18 * steps + cycle] = x1110;
        Fp x1111 = x1109 - x1110;
        Fp x1112 = x1111 * x26;
        Fp x1113 = Fp(x1112.asUInt32() & x71.asUInt32());
        args[2][19 * steps + cycle] = x1113;
        Fp x1114 = x1112 - x1113;
        Fp x1115 = x1114 * x26;
        Fp x1116 = Fp(x1115.asUInt32() & x71.asUInt32());
        args[2][20 * steps + cycle] = x1116;
        Fp x1117 = x1115 - x1116;
        Fp x1118 = x1117 * x26;
        Fp x1119 = Fp(x1118.asUInt32() & x71.asUInt32());
        args[2][21 * steps + cycle] = x1119;
        Fp x1120 = x1118 - x1119;
        Fp x1121 = x1120 * x26;
        Fp x1122 = Fp(x1121.asUInt32() & x71.asUInt32());
        args[2][22 * steps + cycle] = x1122;
        Fp x1123 = x1121 - x1122;
        Fp x1124 = x1123 * x26;
        Fp x1125 = Fp(x1124.asUInt32() & x71.asUInt32());
        args[2][23 * steps + cycle] = x1125;
        Fp x1126 = x1124 - x1125;
        Fp x1127 = x1126 * x26;
        Fp x1128 = Fp(x1127.asUInt32() & x71.asUInt32());
        args[2][24 * steps + cycle] = x1128;
        Fp x1129 = x1127 - x1128;
        Fp x1130 = x1129 * x26;
        Fp x1131 = Fp(x1130.asUInt32() & x71.asUInt32());
        args[2][25 * steps + cycle] = x1131;
        Fp x1132 = x1130 - x1131;
        Fp x1133 = x1132 * x26;
        Fp x1134 = Fp(x1133.asUInt32() & x71.asUInt32());
        args[2][26 * steps + cycle] = x1134;
        Fp x1135 = x1133 - x1134;
        Fp x1136 = x1135 * x26;
        Fp x1137 = Fp(x1136.asUInt32() & x71.asUInt32());
        args[2][27 * steps + cycle] = x1137;
        Fp x1138 = x1136 - x1137;
        Fp x1139 = x1138 * x26;
        Fp x1140 = Fp(x1139.asUInt32() & x71.asUInt32());
        args[2][28 * steps + cycle] = x1140;
        Fp x1141 = x1139 - x1140;
        Fp x1142 = x1141 * x26;
        Fp x1143 = Fp(x1142.asUInt32() & x71.asUInt32());
        args[2][29 * steps + cycle] = x1143;
        Fp x1144 = x1142 - x1143;
        Fp x1145 = x1144 * x26;
        Fp x1146 = Fp(x1145.asUInt32() & x71.asUInt32());
        args[2][30 * steps + cycle] = x1146;
        Fp x1147 = x1145 - x1146;
        Fp x1148 = x1147 * x26;
        Fp x1149 = Fp(x1148.asUInt32() & x71.asUInt32());
        args[2][31 * steps + cycle] = x1149;
      }
      Fp x1150 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x1151 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x1152 = x1151 * x1;
      Fp x1153 = x1150 + x1152;
      Fp x1154 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x1155 = x1154 * x3;
      Fp x1156 = x1153 + x1155;
      Fp x1157 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x1158 = x1157 * x6;
      Fp x1159 = x1156 + x1158;
      Fp x1160 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x1161 = x1160 * x11;
      Fp x1162 = x1159 + x1161;
      Fp x1163 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x1164 = x1163 * x27;
      Fp x1165 = x1162 + x1164;
      Fp x1166 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x1167 = x1166 * x12;
      Fp x1168 = x1165 + x1167;
      Fp x1169 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x1170 = x1169 * x28;
      Fp x1171 = x1168 + x1170;
      Fp x1172 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x1173 = x1172 * x13;
      Fp x1174 = x1171 + x1173;
      Fp x1175 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x1176 = x1175 * x29;
      Fp x1177 = x1174 + x1176;
      Fp x1178 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x1179 = x1178 * x14;
      Fp x1180 = x1177 + x1179;
      Fp x1181 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x1182 = x1181 * x30;
      Fp x1183 = x1180 + x1182;
      Fp x1184 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x1185 = x1184 * x15;
      Fp x1186 = x1183 + x1185;
      Fp x1187 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x1188 = x1187 * x31;
      Fp x1189 = x1186 + x1188;
      Fp x1190 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x1191 = x1190 * x16;
      Fp x1192 = x1189 + x1191;
      Fp x1193 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x1194 = x1193 * x32;
      Fp x1195 = x1192 + x1194;
      Fp x1196 = x1009 - x1195;
      Fp x1197 = x1196 * x33;
      if (x1197 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:47");
      Fp x1198 = x1056 - x71;
      if (x1198 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:50");
      Fp x1199 = x1057 - x71;
      if (x1199 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:51");
      Fp x1200 = x1178 * x1;
      Fp x1201 = x1175 + x1200;
      Fp x1202 = x1181 * x3;
      Fp x1203 = x1201 + x1202;
      Fp x1204 = x1184 * x6;
      Fp x1205 = x1203 + x1204;
      Fp x1206 = x1187 * x11;
      Fp x1207 = x1205 + x1206;
      Fp x1208 = x1190 * x27;
      Fp x1209 = x1207 + x1208;
      Fp x1210 = x1209 * x27;
      Fp x1211 = x1166 * x1;
      Fp x1212 = x1163 + x1211;
      Fp x1213 = x1169 * x3;
      Fp x1214 = x1212 + x1213;
      Fp x1215 = x1172 * x6;
      Fp x1216 = x1214 + x1215;
      Fp x1217 = x1216 * x1;
      Fp x1218 = x1081 * x1;
      Fp x1219 = x1078 + x1218;
      Fp x1220 = x1084 * x3;
      Fp x1221 = x1219 + x1220;
      Fp x1222 = x1087 * x6;
      Fp x1223 = x1221 + x1222;
      Fp x1224 = x1223 * x1;
      Fp x1225 = x1093 * x1;
      Fp x1226 = x1090 + x1225;
      Fp x1227 = x1096 * x3;
      Fp x1228 = x1226 + x1227;
      Fp x1229 = x1099 * x6;
      Fp x1230 = x1228 + x1229;
      Fp x1231 = x1230 * x15;
      Fp x1232 = x1163 * x1;
      Fp x1233 = x1160 + x1232;
      Fp x1234 = x1166 * x3;
      Fp x1235 = x1233 + x1234;
      Fp x1236 = x1169 * x6;
      Fp x1237 = x1235 + x1236;
      Fp x1238 = x1172 * x11;
      Fp x1239 = x1237 + x1238;
      Fp x1240 = x1175 * x27;
      Fp x1241 = x1239 + x1240;
      Fp x1242 = x1178 * x12;
      Fp x1243 = x1241 + x1242;
      Fp x1244 = x1181 * x28;
      Fp x1245 = x1243 + x1244;
      Fp x1246 = x1184 * x13;
      Fp x1247 = x1245 + x1246;
      Fp x1248 = x1187 * x29;
      Fp x1249 = x1247 + x1248;
      Fp x1250 = x1190 * x14;
      Fp x1251 = x1249 + x1250;
      Fp x1252 = x1251 * x11;
      Fp x1253 = x1210 + x1217;
      Fp x1254 = x1253 + x1160;
      Fp x1255 = x1193 * x34;
      Fp x1256 = x1254 + x1255;
      Fp x1257 = x1193 * x35;
      Fp x1258 = x1210 + x1224;
      Fp x1259 = x1258 + x1075;
      Fp x1260 = x1259 + x1255;
      Fp x1261 = x1075 * x30;
      Fp x1262 = x1258 + x1261;
      Fp x1263 = x1193 * x36;
      Fp x1264 = x1262 + x1263;
      Fp x1265 = x1252 + x1159;
      Fp x1266 = x1265 + x1194;
      Fp x1267 = x1160 * x30;
      Fp x1268 = x1231 + x1267;
      Fp x1269 = x1268 + x1210;
      Fp x1270 = x1269 + x1217;
      Fp x1271 = x1193 * x37;
      Fp x1272 = x1159 + x1271;
      Fp x1273 = x1150 * x1;
      Fp x1274 = x1099 + x1273;
      Fp x1275 = x1151 * x3;
      Fp x1276 = x1274 + x1275;
      Fp x1277 = x1154 * x6;
      Fp x1278 = x1276 + x1277;
      Fp x1279 = x1157 * x11;
      Fp x1280 = x1278 + x1279;
      {
        Fp x1281 = (x1276 == 0) ? Fp(1) : Fp(0);
        args[2][88 * steps + cycle] = x1281;
        Fp x1282 = x1276 - x71;
        Fp x1283 = (x1282 == 0) ? Fp(1) : Fp(0);
        args[2][89 * steps + cycle] = x1283;
        Fp x1284 = x1276 - x1;
        Fp x1285 = (x1284 == 0) ? Fp(1) : Fp(0);
        args[2][90 * steps + cycle] = x1285;
        Fp x1286 = x1276 - x2;
        Fp x1287 = (x1286 == 0) ? Fp(1) : Fp(0);
        args[2][91 * steps + cycle] = x1287;
        Fp x1288 = x1276 - x3;
        Fp x1289 = (x1288 == 0) ? Fp(1) : Fp(0);
        args[2][92 * steps + cycle] = x1289;
        Fp x1290 = x1276 - x4;
        Fp x1291 = (x1290 == 0) ? Fp(1) : Fp(0);
        args[2][93 * steps + cycle] = x1291;
        Fp x1292 = x1276 - x5;
        Fp x1293 = (x1292 == 0) ? Fp(1) : Fp(0);
        args[2][94 * steps + cycle] = x1293;
        Fp x1294 = x1276 - x0;
        Fp x1295 = (x1294 == 0) ? Fp(1) : Fp(0);
        args[2][95 * steps + cycle] = x1295;
      }
      Fp x1296 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x1297 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x1298 = x1297 * x1;
      Fp x1299 = x1296 + x1298;
      Fp x1300 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x1301 = x1300 * x2;
      Fp x1302 = x1299 + x1301;
      Fp x1303 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x1304 = x1303 * x3;
      Fp x1305 = x1302 + x1304;
      Fp x1306 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x1307 = x1306 * x4;
      Fp x1308 = x1305 + x1307;
      Fp x1309 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x1310 = x1309 * x5;
      Fp x1311 = x1308 + x1310;
      Fp x1312 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x1313 = x1312 * x0;
      Fp x1314 = x1311 + x1313;
      Fp x1315 = x1314 - x1276;
      if (x1315 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      {
        Fp x1316 = (x1235 == 0) ? Fp(1) : Fp(0);
        args[2][100 * steps + cycle] = x1316;
        Fp x1317 = x1235 - x71;
        Fp x1318 = (x1317 == 0) ? Fp(1) : Fp(0);
        args[2][101 * steps + cycle] = x1318;
        Fp x1319 = x1235 - x1;
        Fp x1320 = (x1319 == 0) ? Fp(1) : Fp(0);
        args[2][102 * steps + cycle] = x1320;
        Fp x1321 = x1235 - x2;
        Fp x1322 = (x1321 == 0) ? Fp(1) : Fp(0);
        args[2][103 * steps + cycle] = x1322;
        Fp x1323 = x1235 - x3;
        Fp x1324 = (x1323 == 0) ? Fp(1) : Fp(0);
        args[2][104 * steps + cycle] = x1324;
        Fp x1325 = x1235 - x4;
        Fp x1326 = (x1325 == 0) ? Fp(1) : Fp(0);
        args[2][105 * steps + cycle] = x1326;
        Fp x1327 = x1235 - x5;
        Fp x1328 = (x1327 == 0) ? Fp(1) : Fp(0);
        args[2][106 * steps + cycle] = x1328;
        Fp x1329 = x1235 - x0;
        Fp x1330 = (x1329 == 0) ? Fp(1) : Fp(0);
        args[2][107 * steps + cycle] = x1330;
      }
      Fp x1331 = args[2][101 * steps + ((cycle - 0) & mask)];
      Fp x1332 = args[2][102 * steps + ((cycle - 0) & mask)];
      Fp x1333 = x1332 * x1;
      Fp x1334 = x1331 + x1333;
      Fp x1335 = args[2][103 * steps + ((cycle - 0) & mask)];
      Fp x1336 = x1335 * x2;
      Fp x1337 = x1334 + x1336;
      Fp x1338 = args[2][104 * steps + ((cycle - 0) & mask)];
      Fp x1339 = x1338 * x3;
      Fp x1340 = x1337 + x1339;
      Fp x1341 = args[2][105 * steps + ((cycle - 0) & mask)];
      Fp x1342 = x1341 * x4;
      Fp x1343 = x1340 + x1342;
      Fp x1344 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x1345 = x1344 * x5;
      Fp x1346 = x1343 + x1345;
      Fp x1347 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x1348 = x1347 * x0;
      Fp x1349 = x1346 + x1348;
      Fp x1350 = x1349 - x1235;
      if (x1350 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      Fp x1351 = x1157 * x1;
      Fp x1352 = x1154 + x1351;
      {
        Fp x1353 = (x1352 == 0) ? Fp(1) : Fp(0);
        args[2][96 * steps + cycle] = x1353;
        Fp x1354 = x1352 - x71;
        Fp x1355 = (x1354 == 0) ? Fp(1) : Fp(0);
        args[2][97 * steps + cycle] = x1355;
        Fp x1356 = x1352 - x1;
        Fp x1357 = (x1356 == 0) ? Fp(1) : Fp(0);
        args[2][98 * steps + cycle] = x1357;
        Fp x1358 = x1352 - x2;
        Fp x1359 = (x1358 == 0) ? Fp(1) : Fp(0);
        args[2][99 * steps + cycle] = x1359;
      }
      Fp x1360 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x1361 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x1362 = x1361 * x1;
      Fp x1363 = x1360 + x1362;
      Fp x1364 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x1365 = x1364 * x2;
      Fp x1366 = x1363 + x1365;
      Fp x1367 = x1366 - x1352;
      if (x1367 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      Fp x1368 = x1172 * x1;
      Fp x1369 = x1169 + x1368;
      {
        Fp x1370 = (x1369 == 0) ? Fp(1) : Fp(0);
        args[2][108 * steps + cycle] = x1370;
        Fp x1371 = x1369 - x71;
        Fp x1372 = (x1371 == 0) ? Fp(1) : Fp(0);
        args[2][109 * steps + cycle] = x1372;
        Fp x1373 = x1369 - x1;
        Fp x1374 = (x1373 == 0) ? Fp(1) : Fp(0);
        args[2][110 * steps + cycle] = x1374;
        Fp x1375 = x1369 - x2;
        Fp x1376 = (x1375 == 0) ? Fp(1) : Fp(0);
        args[2][111 * steps + cycle] = x1376;
      }
      Fp x1377 = args[2][109 * steps + ((cycle - 0) & mask)];
      Fp x1378 = args[2][110 * steps + ((cycle - 0) & mask)];
      Fp x1379 = x1378 * x1;
      Fp x1380 = x1377 + x1379;
      Fp x1381 = args[2][111 * steps + ((cycle - 0) & mask)];
      Fp x1382 = x1381 * x2;
      Fp x1383 = x1380 + x1382;
      Fp x1384 = x1383 - x1369;
      if (x1384 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      Fp x1385 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x1386 = x1296 * x1385;
      Fp x1387 = args[2][108 * steps + ((cycle - 0) & mask)];
      Fp x1388 = x1331 * x1387;
      Fp x1389 = args[2][34 * steps + ((cycle - 1) & mask)];
      Fp x1390 = args[2][35 * steps + ((cycle - 1) & mask)];
      Fp x1391 = x1386 * x1389;
      Fp x1392 = x1386 * x1390;
      Fp x1393 = x1388 * x1389;
      Fp x1394 = x1388 * x1390;
      Fp x1395 = x1297 * x1385;
      Fp x1396 = x1332 * x1387;
      Fp x1397 = args[2][36 * steps + ((cycle - 1) & mask)];
      Fp x1398 = args[2][37 * steps + ((cycle - 1) & mask)];
      Fp x1399 = x1395 * x1397;
      Fp x1400 = x1395 * x1398;
      Fp x1401 = x1391 + x1399;
      Fp x1402 = x1392 + x1400;
      Fp x1403 = x1396 * x1397;
      Fp x1404 = x1396 * x1398;
      Fp x1405 = x1393 + x1403;
      Fp x1406 = x1394 + x1404;
      Fp x1407 = x1300 * x1385;
      Fp x1408 = x1335 * x1387;
      Fp x1409 = args[2][38 * steps + ((cycle - 1) & mask)];
      Fp x1410 = args[2][39 * steps + ((cycle - 1) & mask)];
      Fp x1411 = x1407 * x1409;
      Fp x1412 = x1407 * x1410;
      Fp x1413 = x1401 + x1411;
      Fp x1414 = x1402 + x1412;
      Fp x1415 = x1408 * x1409;
      Fp x1416 = x1408 * x1410;
      Fp x1417 = x1405 + x1415;
      Fp x1418 = x1406 + x1416;
      Fp x1419 = x1303 * x1385;
      Fp x1420 = x1338 * x1387;
      Fp x1421 = args[2][40 * steps + ((cycle - 1) & mask)];
      Fp x1422 = args[2][41 * steps + ((cycle - 1) & mask)];
      Fp x1423 = x1419 * x1421;
      Fp x1424 = x1419 * x1422;
      Fp x1425 = x1413 + x1423;
      Fp x1426 = x1414 + x1424;
      Fp x1427 = x1420 * x1421;
      Fp x1428 = x1420 * x1422;
      Fp x1429 = x1417 + x1427;
      Fp x1430 = x1418 + x1428;
      Fp x1431 = x1306 * x1385;
      Fp x1432 = x1341 * x1387;
      Fp x1433 = args[2][42 * steps + ((cycle - 1) & mask)];
      Fp x1434 = args[2][43 * steps + ((cycle - 1) & mask)];
      Fp x1435 = x1431 * x1433;
      Fp x1436 = x1431 * x1434;
      Fp x1437 = x1425 + x1435;
      Fp x1438 = x1426 + x1436;
      Fp x1439 = x1432 * x1433;
      Fp x1440 = x1432 * x1434;
      Fp x1441 = x1429 + x1439;
      Fp x1442 = x1430 + x1440;
      Fp x1443 = x1309 * x1385;
      Fp x1444 = x1344 * x1387;
      Fp x1445 = args[2][44 * steps + ((cycle - 1) & mask)];
      Fp x1446 = args[2][45 * steps + ((cycle - 1) & mask)];
      Fp x1447 = x1443 * x1445;
      Fp x1448 = x1443 * x1446;
      Fp x1449 = x1437 + x1447;
      Fp x1450 = x1438 + x1448;
      Fp x1451 = x1444 * x1445;
      Fp x1452 = x1444 * x1446;
      Fp x1453 = x1441 + x1451;
      Fp x1454 = x1442 + x1452;
      Fp x1455 = x1312 * x1385;
      Fp x1456 = x1347 * x1387;
      Fp x1457 = args[2][46 * steps + ((cycle - 1) & mask)];
      Fp x1458 = args[2][47 * steps + ((cycle - 1) & mask)];
      Fp x1459 = x1455 * x1457;
      Fp x1460 = x1455 * x1458;
      Fp x1461 = x1449 + x1459;
      Fp x1462 = x1450 + x1460;
      Fp x1463 = x1456 * x1457;
      Fp x1464 = x1456 * x1458;
      Fp x1465 = x1453 + x1463;
      Fp x1466 = x1454 + x1464;
      Fp x1467 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x1468 = x1467 * x1360;
      Fp x1469 = args[2][100 * steps + ((cycle - 0) & mask)];
      Fp x1470 = x1469 * x1377;
      Fp x1471 = args[2][48 * steps + ((cycle - 1) & mask)];
      Fp x1472 = args[2][49 * steps + ((cycle - 1) & mask)];
      Fp x1473 = x1468 * x1471;
      Fp x1474 = x1468 * x1472;
      Fp x1475 = x1461 + x1473;
      Fp x1476 = x1462 + x1474;
      Fp x1477 = x1470 * x1471;
      Fp x1478 = x1470 * x1472;
      Fp x1479 = x1465 + x1477;
      Fp x1480 = x1466 + x1478;
      Fp x1481 = x1296 * x1360;
      Fp x1482 = x1331 * x1377;
      Fp x1483 = args[2][50 * steps + ((cycle - 1) & mask)];
      Fp x1484 = args[2][51 * steps + ((cycle - 1) & mask)];
      Fp x1485 = x1481 * x1483;
      Fp x1486 = x1481 * x1484;
      Fp x1487 = x1475 + x1485;
      Fp x1488 = x1476 + x1486;
      Fp x1489 = x1482 * x1483;
      Fp x1490 = x1482 * x1484;
      Fp x1491 = x1479 + x1489;
      Fp x1492 = x1480 + x1490;
      Fp x1493 = x1297 * x1360;
      Fp x1494 = x1332 * x1377;
      Fp x1495 = args[2][52 * steps + ((cycle - 1) & mask)];
      Fp x1496 = args[2][53 * steps + ((cycle - 1) & mask)];
      Fp x1497 = x1493 * x1495;
      Fp x1498 = x1493 * x1496;
      Fp x1499 = x1487 + x1497;
      Fp x1500 = x1488 + x1498;
      Fp x1501 = x1494 * x1495;
      Fp x1502 = x1494 * x1496;
      Fp x1503 = x1491 + x1501;
      Fp x1504 = x1492 + x1502;
      Fp x1505 = x1300 * x1360;
      Fp x1506 = x1335 * x1377;
      Fp x1507 = args[2][54 * steps + ((cycle - 1) & mask)];
      Fp x1508 = args[2][55 * steps + ((cycle - 1) & mask)];
      Fp x1509 = x1505 * x1507;
      Fp x1510 = x1505 * x1508;
      Fp x1511 = x1499 + x1509;
      Fp x1512 = x1500 + x1510;
      Fp x1513 = x1506 * x1507;
      Fp x1514 = x1506 * x1508;
      Fp x1515 = x1503 + x1513;
      Fp x1516 = x1504 + x1514;
      Fp x1517 = x1303 * x1360;
      Fp x1518 = x1338 * x1377;
      Fp x1519 = args[2][56 * steps + ((cycle - 1) & mask)];
      Fp x1520 = args[2][57 * steps + ((cycle - 1) & mask)];
      Fp x1521 = x1517 * x1519;
      Fp x1522 = x1517 * x1520;
      Fp x1523 = x1511 + x1521;
      Fp x1524 = x1512 + x1522;
      Fp x1525 = x1518 * x1519;
      Fp x1526 = x1518 * x1520;
      Fp x1527 = x1515 + x1525;
      Fp x1528 = x1516 + x1526;
      Fp x1529 = x1306 * x1360;
      Fp x1530 = x1341 * x1377;
      Fp x1531 = args[2][58 * steps + ((cycle - 1) & mask)];
      Fp x1532 = args[2][59 * steps + ((cycle - 1) & mask)];
      Fp x1533 = x1529 * x1531;
      Fp x1534 = x1529 * x1532;
      Fp x1535 = x1523 + x1533;
      Fp x1536 = x1524 + x1534;
      Fp x1537 = x1530 * x1531;
      Fp x1538 = x1530 * x1532;
      Fp x1539 = x1527 + x1537;
      Fp x1540 = x1528 + x1538;
      Fp x1541 = x1309 * x1360;
      Fp x1542 = x1344 * x1377;
      Fp x1543 = args[2][60 * steps + ((cycle - 1) & mask)];
      Fp x1544 = args[2][61 * steps + ((cycle - 1) & mask)];
      Fp x1545 = x1541 * x1543;
      Fp x1546 = x1541 * x1544;
      Fp x1547 = x1535 + x1545;
      Fp x1548 = x1536 + x1546;
      Fp x1549 = x1542 * x1543;
      Fp x1550 = x1542 * x1544;
      Fp x1551 = x1539 + x1549;
      Fp x1552 = x1540 + x1550;
      Fp x1553 = x1312 * x1360;
      Fp x1554 = x1347 * x1377;
      Fp x1555 = args[2][62 * steps + ((cycle - 1) & mask)];
      Fp x1556 = args[2][63 * steps + ((cycle - 1) & mask)];
      Fp x1557 = x1553 * x1555;
      Fp x1558 = x1553 * x1556;
      Fp x1559 = x1547 + x1557;
      Fp x1560 = x1548 + x1558;
      Fp x1561 = x1554 * x1555;
      Fp x1562 = x1554 * x1556;
      Fp x1563 = x1551 + x1561;
      Fp x1564 = x1552 + x1562;
      Fp x1565 = x1467 * x1361;
      Fp x1566 = x1469 * x1378;
      Fp x1567 = args[2][64 * steps + ((cycle - 1) & mask)];
      Fp x1568 = args[2][65 * steps + ((cycle - 1) & mask)];
      Fp x1569 = x1565 * x1567;
      Fp x1570 = x1565 * x1568;
      Fp x1571 = x1559 + x1569;
      Fp x1572 = x1560 + x1570;
      Fp x1573 = x1566 * x1567;
      Fp x1574 = x1566 * x1568;
      Fp x1575 = x1563 + x1573;
      Fp x1576 = x1564 + x1574;
      Fp x1577 = x1296 * x1361;
      Fp x1578 = x1331 * x1378;
      Fp x1579 = args[2][66 * steps + ((cycle - 1) & mask)];
      Fp x1580 = args[2][67 * steps + ((cycle - 1) & mask)];
      Fp x1581 = x1577 * x1579;
      Fp x1582 = x1577 * x1580;
      Fp x1583 = x1571 + x1581;
      Fp x1584 = x1572 + x1582;
      Fp x1585 = x1578 * x1579;
      Fp x1586 = x1578 * x1580;
      Fp x1587 = x1575 + x1585;
      Fp x1588 = x1576 + x1586;
      Fp x1589 = x1297 * x1361;
      Fp x1590 = x1332 * x1378;
      Fp x1591 = args[2][68 * steps + ((cycle - 1) & mask)];
      Fp x1592 = args[2][69 * steps + ((cycle - 1) & mask)];
      Fp x1593 = x1589 * x1591;
      Fp x1594 = x1589 * x1592;
      Fp x1595 = x1583 + x1593;
      Fp x1596 = x1584 + x1594;
      Fp x1597 = x1590 * x1591;
      Fp x1598 = x1590 * x1592;
      Fp x1599 = x1587 + x1597;
      Fp x1600 = x1588 + x1598;
      Fp x1601 = x1300 * x1361;
      Fp x1602 = x1335 * x1378;
      Fp x1603 = args[2][70 * steps + ((cycle - 1) & mask)];
      Fp x1604 = args[2][71 * steps + ((cycle - 1) & mask)];
      Fp x1605 = x1601 * x1603;
      Fp x1606 = x1601 * x1604;
      Fp x1607 = x1595 + x1605;
      Fp x1608 = x1596 + x1606;
      Fp x1609 = x1602 * x1603;
      Fp x1610 = x1602 * x1604;
      Fp x1611 = x1599 + x1609;
      Fp x1612 = x1600 + x1610;
      Fp x1613 = x1303 * x1361;
      Fp x1614 = x1338 * x1378;
      Fp x1615 = args[2][72 * steps + ((cycle - 1) & mask)];
      Fp x1616 = args[2][73 * steps + ((cycle - 1) & mask)];
      Fp x1617 = x1613 * x1615;
      Fp x1618 = x1613 * x1616;
      Fp x1619 = x1607 + x1617;
      Fp x1620 = x1608 + x1618;
      Fp x1621 = x1614 * x1615;
      Fp x1622 = x1614 * x1616;
      Fp x1623 = x1611 + x1621;
      Fp x1624 = x1612 + x1622;
      Fp x1625 = x1306 * x1361;
      Fp x1626 = x1341 * x1378;
      Fp x1627 = args[2][74 * steps + ((cycle - 1) & mask)];
      Fp x1628 = args[2][75 * steps + ((cycle - 1) & mask)];
      Fp x1629 = x1625 * x1627;
      Fp x1630 = x1625 * x1628;
      Fp x1631 = x1619 + x1629;
      Fp x1632 = x1620 + x1630;
      Fp x1633 = x1626 * x1627;
      Fp x1634 = x1626 * x1628;
      Fp x1635 = x1623 + x1633;
      Fp x1636 = x1624 + x1634;
      Fp x1637 = x1309 * x1361;
      Fp x1638 = x1344 * x1378;
      Fp x1639 = args[2][76 * steps + ((cycle - 1) & mask)];
      Fp x1640 = args[2][77 * steps + ((cycle - 1) & mask)];
      Fp x1641 = x1637 * x1639;
      Fp x1642 = x1637 * x1640;
      Fp x1643 = x1631 + x1641;
      Fp x1644 = x1632 + x1642;
      Fp x1645 = x1638 * x1639;
      Fp x1646 = x1638 * x1640;
      Fp x1647 = x1635 + x1645;
      Fp x1648 = x1636 + x1646;
      Fp x1649 = x1312 * x1361;
      Fp x1650 = x1347 * x1378;
      Fp x1651 = args[2][78 * steps + ((cycle - 1) & mask)];
      Fp x1652 = args[2][79 * steps + ((cycle - 1) & mask)];
      Fp x1653 = x1649 * x1651;
      Fp x1654 = x1649 * x1652;
      Fp x1655 = x1643 + x1653;
      Fp x1656 = x1644 + x1654;
      Fp x1657 = x1650 * x1651;
      Fp x1658 = x1650 * x1652;
      Fp x1659 = x1647 + x1657;
      Fp x1660 = x1648 + x1658;
      Fp x1661 = x1467 * x1364;
      Fp x1662 = x1469 * x1381;
      Fp x1663 = args[2][80 * steps + ((cycle - 1) & mask)];
      Fp x1664 = args[2][81 * steps + ((cycle - 1) & mask)];
      Fp x1665 = x1661 * x1663;
      Fp x1666 = x1661 * x1664;
      Fp x1667 = x1655 + x1665;
      Fp x1668 = x1656 + x1666;
      Fp x1669 = x1662 * x1663;
      Fp x1670 = x1662 * x1664;
      Fp x1671 = x1659 + x1669;
      Fp x1672 = x1660 + x1670;
      Fp x1673 = x1296 * x1364;
      Fp x1674 = x1331 * x1381;
      Fp x1675 = args[2][82 * steps + ((cycle - 1) & mask)];
      Fp x1676 = args[2][83 * steps + ((cycle - 1) & mask)];
      Fp x1677 = x1673 * x1675;
      Fp x1678 = x1673 * x1676;
      Fp x1679 = x1667 + x1677;
      Fp x1680 = x1668 + x1678;
      Fp x1681 = x1674 * x1675;
      Fp x1682 = x1674 * x1676;
      Fp x1683 = x1671 + x1681;
      Fp x1684 = x1672 + x1682;
      Fp x1685 = x1297 * x1364;
      Fp x1686 = x1332 * x1381;
      Fp x1687 = args[2][84 * steps + ((cycle - 1) & mask)];
      Fp x1688 = args[2][85 * steps + ((cycle - 1) & mask)];
      Fp x1689 = x1685 * x1687;
      Fp x1690 = x1685 * x1688;
      Fp x1691 = x1679 + x1689;
      Fp x1692 = x1680 + x1690;
      Fp x1693 = x1686 * x1687;
      Fp x1694 = x1686 * x1688;
      Fp x1695 = x1683 + x1693;
      Fp x1696 = x1684 + x1694;
      Fp x1697 = x1300 * x1364;
      Fp x1698 = x1335 * x1381;
      Fp x1699 = args[2][86 * steps + ((cycle - 1) & mask)];
      Fp x1700 = args[2][87 * steps + ((cycle - 1) & mask)];
      Fp x1701 = x1697 * x1699;
      Fp x1702 = x1697 * x1700;
      Fp x1703 = x1691 + x1701;
      Fp x1704 = x1692 + x1702;
      Fp x1705 = x1698 * x1699;
      Fp x1706 = x1698 * x1700;
      Fp x1707 = x1695 + x1705;
      Fp x1708 = x1696 + x1706;
      Fp x1709 = x1303 * x1364;
      Fp x1710 = x1338 * x1381;
      Fp x1711 = args[2][88 * steps + ((cycle - 1) & mask)];
      Fp x1712 = args[2][89 * steps + ((cycle - 1) & mask)];
      Fp x1713 = x1709 * x1711;
      Fp x1714 = x1709 * x1712;
      Fp x1715 = x1703 + x1713;
      Fp x1716 = x1704 + x1714;
      Fp x1717 = x1710 * x1711;
      Fp x1718 = x1710 * x1712;
      Fp x1719 = x1707 + x1717;
      Fp x1720 = x1708 + x1718;
      Fp x1721 = x1306 * x1364;
      Fp x1722 = x1341 * x1381;
      Fp x1723 = args[2][90 * steps + ((cycle - 1) & mask)];
      Fp x1724 = args[2][91 * steps + ((cycle - 1) & mask)];
      Fp x1725 = x1721 * x1723;
      Fp x1726 = x1721 * x1724;
      Fp x1727 = x1715 + x1725;
      Fp x1728 = x1716 + x1726;
      Fp x1729 = x1722 * x1723;
      Fp x1730 = x1722 * x1724;
      Fp x1731 = x1719 + x1729;
      Fp x1732 = x1720 + x1730;
      Fp x1733 = x1309 * x1364;
      Fp x1734 = x1344 * x1381;
      Fp x1735 = args[2][92 * steps + ((cycle - 1) & mask)];
      Fp x1736 = args[2][93 * steps + ((cycle - 1) & mask)];
      Fp x1737 = x1733 * x1735;
      Fp x1738 = x1733 * x1736;
      Fp x1739 = x1727 + x1737;
      Fp x1740 = x1728 + x1738;
      Fp x1741 = x1734 * x1735;
      Fp x1742 = x1734 * x1736;
      Fp x1743 = x1731 + x1741;
      Fp x1744 = x1732 + x1742;
      Fp x1745 = x1312 * x1364;
      Fp x1746 = x1347 * x1381;
      Fp x1747 = args[2][94 * steps + ((cycle - 1) & mask)];
      Fp x1748 = args[2][95 * steps + ((cycle - 1) & mask)];
      Fp x1749 = x1745 * x1747;
      Fp x1750 = x1745 * x1748;
      Fp x1751 = x1739 + x1749;
      Fp x1752 = x1740 + x1750;
      Fp x1753 = x1746 * x1747;
      Fp x1754 = x1746 * x1748;
      Fp x1755 = x1743 + x1753;
      Fp x1756 = x1744 + x1754;
      args[2][116 * steps + cycle] = x1751;
      args[2][117 * steps + cycle] = x1752;
      args[2][118 * steps + cycle] = x1755;
      args[2][119 * steps + cycle] = x1756;
      Fp x1757 = x1063 * x1;
      Fp x1758 = x1060 + x1757;
      Fp x1759 = x1066 * x3;
      Fp x1760 = x1758 + x1759;
      Fp x1761 = x1069 * x6;
      Fp x1762 = x1760 + x1761;
      Fp x1763 = x1072 * x11;
      Fp x1764 = x1762 + x1763;
      Fp x1765 = x1193 * x12;
      Fp x1766 = x1209 + x1765;
      {
        Fp x1767 = x38 - x1764;
        Fp x1768 = (x1767 == 0) ? Fp(1) : Fp(0);
        Fp x1769 = x71 - x1768;
        Fp x1770 = x71 - x1769;
        Fp x1771 = x70 - x1228;
        Fp x1772 = (x1771 == 0) ? Fp(1) : Fp(0);
        Fp x1773 = x71 - x1772;
        Fp x1774 = x71 - x1773;
        Fp x1775 = x1770 * x1774;
        Fp x1776 = x70 - x1766;
        Fp x1777 = (x1776 == 0) ? Fp(1) : Fp(0);
        Fp x1778 = x71 - x1777;
        Fp x1779 = x71 - x1778;
        Fp x1780 = x1775 * x1779;
        if (x1780 != 0) {
          {
            args[2][72 * steps + cycle] = x71;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x1781 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x1782 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x1783 = x1782 * x1;
          Fp x1784 = x1781 + x1783;
          Fp x1785 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x1786 = x1785 * x2;
          Fp x1787 = x1784 + x1786;
          Fp x1788 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x1789 = x1788 * x3;
          Fp x1790 = x1787 + x1789;
          Fp x1791 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x1792 = x1791 * x4;
          Fp x1793 = x1790 + x1792;
          Fp x1794 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x1795 = x1794 * x5;
          Fp x1796 = x1793 + x1795;
          Fp x1797 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x1798 = x1797 * x0;
          Fp x1799 = x1796 + x1798;
          if (x1799 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x71;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x1800 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x1801 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x1802 = x1801 * x1;
          Fp x1803 = x1800 + x1802;
          Fp x1804 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x1805 = x1804 * x2;
          Fp x1806 = x1803 + x1805;
          Fp x1807 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x1808 = x1807 * x3;
          Fp x1809 = x1806 + x1808;
          Fp x1810 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x1811 = x1810 * x4;
          Fp x1812 = x1809 + x1811;
          Fp x1813 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x1814 = x1813 * x5;
          Fp x1815 = x1812 + x1814;
          Fp x1816 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x1817 = x1816 * x0;
          Fp x1818 = x1815 + x1817;
          if (x1818 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x1819 = x27 - x1766;
        Fp x1820 = (x1819 == 0) ? Fp(1) : Fp(0);
        Fp x1821 = x71 - x1820;
        Fp x1822 = x71 - x1821;
        Fp x1823 = x1775 * x1822;
        if (x1823 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x71;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x1824 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x1825 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x1826 = x1825 * x1;
          Fp x1827 = x1824 + x1826;
          Fp x1828 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x1829 = x1828 * x2;
          Fp x1830 = x1827 + x1829;
          Fp x1831 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x1832 = x1831 * x3;
          Fp x1833 = x1830 + x1832;
          Fp x1834 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x1835 = x1834 * x4;
          Fp x1836 = x1833 + x1835;
          Fp x1837 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x1838 = x1837 * x5;
          Fp x1839 = x1836 + x1838;
          Fp x1840 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x1841 = x1840 * x0;
          Fp x1842 = x1839 + x1841;
          Fp x1843 = x1842 - x71;
          if (x1843 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x71;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x1844 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x1845 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x1846 = x1845 * x1;
          Fp x1847 = x1844 + x1846;
          Fp x1848 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x1849 = x1848 * x2;
          Fp x1850 = x1847 + x1849;
          Fp x1851 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x1852 = x1851 * x3;
          Fp x1853 = x1850 + x1852;
          Fp x1854 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x1855 = x1854 * x4;
          Fp x1856 = x1853 + x1855;
          Fp x1857 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x1858 = x1857 * x5;
          Fp x1859 = x1856 + x1858;
          Fp x1860 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x1861 = x1860 * x0;
          Fp x1862 = x1859 + x1861;
          if (x1862 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x1863 = x3 - x1228;
        Fp x1864 = (x1863 == 0) ? Fp(1) : Fp(0);
        Fp x1865 = x71 - x1864;
        Fp x1866 = x71 - x1865;
        Fp x1867 = x1770 * x1866;
        Fp x1868 = x1867 * x1779;
        if (x1868 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x71;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x1869 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x1870 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x1871 = x1870 * x1;
          Fp x1872 = x1869 + x1871;
          Fp x1873 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x1874 = x1873 * x2;
          Fp x1875 = x1872 + x1874;
          Fp x1876 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x1877 = x1876 * x3;
          Fp x1878 = x1875 + x1877;
          Fp x1879 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x1880 = x1879 * x4;
          Fp x1881 = x1878 + x1880;
          Fp x1882 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x1883 = x1882 * x5;
          Fp x1884 = x1881 + x1883;
          Fp x1885 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x1886 = x1885 * x0;
          Fp x1887 = x1884 + x1886;
          Fp x1888 = x1887 - x1;
          if (x1888 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x71;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x1889 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x1890 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x1891 = x1890 * x1;
          Fp x1892 = x1889 + x1891;
          Fp x1893 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x1894 = x1893 * x2;
          Fp x1895 = x1892 + x1894;
          Fp x1896 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x1897 = x1896 * x3;
          Fp x1898 = x1895 + x1897;
          Fp x1899 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x1900 = x1899 * x4;
          Fp x1901 = x1898 + x1900;
          Fp x1902 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x1903 = x1902 * x5;
          Fp x1904 = x1901 + x1903;
          Fp x1905 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x1906 = x1905 * x0;
          Fp x1907 = x1904 + x1906;
          if (x1907 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x1908 = x5 - x1228;
        Fp x1909 = (x1908 == 0) ? Fp(1) : Fp(0);
        Fp x1910 = x71 - x1909;
        Fp x1911 = x71 - x1910;
        Fp x1912 = x1770 * x1911;
        Fp x1913 = x1912 * x1779;
        if (x1913 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x71;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x1914 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x1915 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x1916 = x1915 * x1;
          Fp x1917 = x1914 + x1916;
          Fp x1918 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x1919 = x1918 * x2;
          Fp x1920 = x1917 + x1919;
          Fp x1921 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x1922 = x1921 * x3;
          Fp x1923 = x1920 + x1922;
          Fp x1924 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x1925 = x1924 * x4;
          Fp x1926 = x1923 + x1925;
          Fp x1927 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x1928 = x1927 * x5;
          Fp x1929 = x1926 + x1928;
          Fp x1930 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x1931 = x1930 * x0;
          Fp x1932 = x1929 + x1931;
          Fp x1933 = x1932 - x2;
          if (x1933 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x71;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x1934 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x1935 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x1936 = x1935 * x1;
          Fp x1937 = x1934 + x1936;
          Fp x1938 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x1939 = x1938 * x2;
          Fp x1940 = x1937 + x1939;
          Fp x1941 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x1942 = x1941 * x3;
          Fp x1943 = x1940 + x1942;
          Fp x1944 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x1945 = x1944 * x4;
          Fp x1946 = x1943 + x1945;
          Fp x1947 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x1948 = x1947 * x5;
          Fp x1949 = x1946 + x1948;
          Fp x1950 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x1951 = x1950 * x0;
          Fp x1952 = x1949 + x1951;
          if (x1952 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x1953 = x0 - x1228;
        Fp x1954 = (x1953 == 0) ? Fp(1) : Fp(0);
        Fp x1955 = x71 - x1954;
        Fp x1956 = x71 - x1955;
        Fp x1957 = x1770 * x1956;
        Fp x1958 = x1957 * x1779;
        if (x1958 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x71;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x1959 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x1960 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x1961 = x1960 * x1;
          Fp x1962 = x1959 + x1961;
          Fp x1963 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x1964 = x1963 * x2;
          Fp x1965 = x1962 + x1964;
          Fp x1966 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x1967 = x1966 * x3;
          Fp x1968 = x1965 + x1967;
          Fp x1969 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x1970 = x1969 * x4;
          Fp x1971 = x1968 + x1970;
          Fp x1972 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x1973 = x1972 * x5;
          Fp x1974 = x1971 + x1973;
          Fp x1975 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x1976 = x1975 * x0;
          Fp x1977 = x1974 + x1976;
          Fp x1978 = x1977 - x3;
          if (x1978 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x71;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x1979 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x1980 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x1981 = x1980 * x1;
          Fp x1982 = x1979 + x1981;
          Fp x1983 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x1984 = x1983 * x2;
          Fp x1985 = x1982 + x1984;
          Fp x1986 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x1987 = x1986 * x3;
          Fp x1988 = x1985 + x1987;
          Fp x1989 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x1990 = x1989 * x4;
          Fp x1991 = x1988 + x1990;
          Fp x1992 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x1993 = x1992 * x5;
          Fp x1994 = x1991 + x1993;
          Fp x1995 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x1996 = x1995 * x0;
          Fp x1997 = x1994 + x1996;
          if (x1997 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x1998 = x1 - x1228;
        Fp x1999 = (x1998 == 0) ? Fp(1) : Fp(0);
        Fp x2000 = x71 - x1999;
        Fp x2001 = x71 - x2000;
        Fp x2002 = x1770 * x2001;
        Fp x2003 = x2002 * x1779;
        if (x2003 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x71;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2004 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2005 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2006 = x2005 * x1;
          Fp x2007 = x2004 + x2006;
          Fp x2008 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2009 = x2008 * x2;
          Fp x2010 = x2007 + x2009;
          Fp x2011 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2012 = x2011 * x3;
          Fp x2013 = x2010 + x2012;
          Fp x2014 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2015 = x2014 * x4;
          Fp x2016 = x2013 + x2015;
          Fp x2017 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2018 = x2017 * x5;
          Fp x2019 = x2016 + x2018;
          Fp x2020 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2021 = x2020 * x0;
          Fp x2022 = x2019 + x2021;
          Fp x2023 = x2022 - x4;
          if (x2023 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x71;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2024 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2025 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2026 = x2025 * x1;
          Fp x2027 = x2024 + x2026;
          Fp x2028 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2029 = x2028 * x2;
          Fp x2030 = x2027 + x2029;
          Fp x2031 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2032 = x2031 * x3;
          Fp x2033 = x2030 + x2032;
          Fp x2034 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2035 = x2034 * x4;
          Fp x2036 = x2033 + x2035;
          Fp x2037 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2038 = x2037 * x5;
          Fp x2039 = x2036 + x2038;
          Fp x2040 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2041 = x2040 * x0;
          Fp x2042 = x2039 + x2041;
          if (x2042 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2043 = x2 - x1228;
        Fp x2044 = (x2043 == 0) ? Fp(1) : Fp(0);
        Fp x2045 = x71 - x2044;
        Fp x2046 = x71 - x2045;
        Fp x2047 = x1770 * x2046;
        Fp x2048 = x2047 * x1779;
        if (x2048 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x71;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2049 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2050 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2051 = x2050 * x1;
          Fp x2052 = x2049 + x2051;
          Fp x2053 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2054 = x2053 * x2;
          Fp x2055 = x2052 + x2054;
          Fp x2056 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2057 = x2056 * x3;
          Fp x2058 = x2055 + x2057;
          Fp x2059 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2060 = x2059 * x4;
          Fp x2061 = x2058 + x2060;
          Fp x2062 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2063 = x2062 * x5;
          Fp x2064 = x2061 + x2063;
          Fp x2065 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2066 = x2065 * x0;
          Fp x2067 = x2064 + x2066;
          Fp x2068 = x2067 - x5;
          if (x2068 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x71;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2069 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2070 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2071 = x2070 * x1;
          Fp x2072 = x2069 + x2071;
          Fp x2073 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2074 = x2073 * x2;
          Fp x2075 = x2072 + x2074;
          Fp x2076 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2077 = x2076 * x3;
          Fp x2078 = x2075 + x2077;
          Fp x2079 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2080 = x2079 * x4;
          Fp x2081 = x2078 + x2080;
          Fp x2082 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2083 = x2082 * x5;
          Fp x2084 = x2081 + x2083;
          Fp x2085 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2086 = x2085 * x0;
          Fp x2087 = x2084 + x2086;
          if (x2087 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2088 = x3 - x1764;
        Fp x2089 = (x2088 == 0) ? Fp(1) : Fp(0);
        Fp x2090 = x71 - x2089;
        Fp x2091 = x71 - x2090;
        Fp x2092 = x2091 * x1774;
        if (x2092 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x71;
          }
          Fp x2093 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2094 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2095 = x2094 * x1;
          Fp x2096 = x2093 + x2095;
          Fp x2097 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2098 = x2097 * x2;
          Fp x2099 = x2096 + x2098;
          Fp x2100 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2101 = x2100 * x3;
          Fp x2102 = x2099 + x2101;
          Fp x2103 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2104 = x2103 * x4;
          Fp x2105 = x2102 + x2104;
          Fp x2106 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2107 = x2106 * x5;
          Fp x2108 = x2105 + x2107;
          Fp x2109 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2110 = x2109 * x0;
          Fp x2111 = x2108 + x2110;
          Fp x2112 = x2111 - x0;
          if (x2112 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x71;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2113 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2114 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2115 = x2114 * x1;
          Fp x2116 = x2113 + x2115;
          Fp x2117 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2118 = x2117 * x2;
          Fp x2119 = x2116 + x2118;
          Fp x2120 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2121 = x2120 * x3;
          Fp x2122 = x2119 + x2121;
          Fp x2123 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2124 = x2123 * x4;
          Fp x2125 = x2122 + x2124;
          Fp x2126 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2127 = x2126 * x5;
          Fp x2128 = x2125 + x2127;
          Fp x2129 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2130 = x2129 * x0;
          Fp x2131 = x2128 + x2130;
          if (x2131 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2132 = x2091 * x1866;
        if (x2132 != 0) {
          {
            args[2][72 * steps + cycle] = x71;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2133 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2134 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2135 = x2134 * x1;
          Fp x2136 = x2133 + x2135;
          Fp x2137 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2138 = x2137 * x2;
          Fp x2139 = x2136 + x2138;
          Fp x2140 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2141 = x2140 * x3;
          Fp x2142 = x2139 + x2141;
          Fp x2143 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2144 = x2143 * x4;
          Fp x2145 = x2142 + x2144;
          Fp x2146 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2147 = x2146 * x5;
          Fp x2148 = x2145 + x2147;
          Fp x2149 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2150 = x2149 * x0;
          Fp x2151 = x2148 + x2150;
          if (x2151 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x71;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2152 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2153 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2154 = x2153 * x1;
          Fp x2155 = x2152 + x2154;
          Fp x2156 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2157 = x2156 * x2;
          Fp x2158 = x2155 + x2157;
          Fp x2159 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2160 = x2159 * x3;
          Fp x2161 = x2158 + x2160;
          Fp x2162 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2163 = x2162 * x4;
          Fp x2164 = x2161 + x2163;
          Fp x2165 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2166 = x2165 * x5;
          Fp x2167 = x2164 + x2166;
          Fp x2168 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2169 = x2168 * x0;
          Fp x2170 = x2167 + x2169;
          Fp x2171 = x2170 - x71;
          if (x2171 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2172 = x2091 * x1911;
        if (x2172 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x71;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2173 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2174 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2175 = x2174 * x1;
          Fp x2176 = x2173 + x2175;
          Fp x2177 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2178 = x2177 * x2;
          Fp x2179 = x2176 + x2178;
          Fp x2180 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2181 = x2180 * x3;
          Fp x2182 = x2179 + x2181;
          Fp x2183 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2184 = x2183 * x4;
          Fp x2185 = x2182 + x2184;
          Fp x2186 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2187 = x2186 * x5;
          Fp x2188 = x2185 + x2187;
          Fp x2189 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2190 = x2189 * x0;
          Fp x2191 = x2188 + x2190;
          Fp x2192 = x2191 - x71;
          if (x2192 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x71;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2193 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2194 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2195 = x2194 * x1;
          Fp x2196 = x2193 + x2195;
          Fp x2197 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2198 = x2197 * x2;
          Fp x2199 = x2196 + x2198;
          Fp x2200 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2201 = x2200 * x3;
          Fp x2202 = x2199 + x2201;
          Fp x2203 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2204 = x2203 * x4;
          Fp x2205 = x2202 + x2204;
          Fp x2206 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2207 = x2206 * x5;
          Fp x2208 = x2205 + x2207;
          Fp x2209 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2210 = x2209 * x0;
          Fp x2211 = x2208 + x2210;
          Fp x2212 = x2211 - x71;
          if (x2212 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2213 = x2091 * x1956;
        if (x2213 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x71;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2214 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2215 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2216 = x2215 * x1;
          Fp x2217 = x2214 + x2216;
          Fp x2218 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2219 = x2218 * x2;
          Fp x2220 = x2217 + x2219;
          Fp x2221 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2222 = x2221 * x3;
          Fp x2223 = x2220 + x2222;
          Fp x2224 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2225 = x2224 * x4;
          Fp x2226 = x2223 + x2225;
          Fp x2227 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2228 = x2227 * x5;
          Fp x2229 = x2226 + x2228;
          Fp x2230 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2231 = x2230 * x0;
          Fp x2232 = x2229 + x2231;
          Fp x2233 = x2232 - x1;
          if (x2233 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x71;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2234 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2235 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2236 = x2235 * x1;
          Fp x2237 = x2234 + x2236;
          Fp x2238 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2239 = x2238 * x2;
          Fp x2240 = x2237 + x2239;
          Fp x2241 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2242 = x2241 * x3;
          Fp x2243 = x2240 + x2242;
          Fp x2244 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2245 = x2244 * x4;
          Fp x2246 = x2243 + x2245;
          Fp x2247 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2248 = x2247 * x5;
          Fp x2249 = x2246 + x2248;
          Fp x2250 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2251 = x2250 * x0;
          Fp x2252 = x2249 + x2251;
          Fp x2253 = x2252 - x71;
          if (x2253 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2254 = x2091 * x2001;
        if (x2254 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x71;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2255 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2256 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2257 = x2256 * x1;
          Fp x2258 = x2255 + x2257;
          Fp x2259 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2260 = x2259 * x2;
          Fp x2261 = x2258 + x2260;
          Fp x2262 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2263 = x2262 * x3;
          Fp x2264 = x2261 + x2263;
          Fp x2265 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2266 = x2265 * x4;
          Fp x2267 = x2264 + x2266;
          Fp x2268 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2269 = x2268 * x5;
          Fp x2270 = x2267 + x2269;
          Fp x2271 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2272 = x2271 * x0;
          Fp x2273 = x2270 + x2272;
          Fp x2274 = x2273 - x2;
          if (x2274 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x71;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2275 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2276 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2277 = x2276 * x1;
          Fp x2278 = x2275 + x2277;
          Fp x2279 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2280 = x2279 * x2;
          Fp x2281 = x2278 + x2280;
          Fp x2282 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2283 = x2282 * x3;
          Fp x2284 = x2281 + x2283;
          Fp x2285 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2286 = x2285 * x4;
          Fp x2287 = x2284 + x2286;
          Fp x2288 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2289 = x2288 * x5;
          Fp x2290 = x2287 + x2289;
          Fp x2291 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2292 = x2291 * x0;
          Fp x2293 = x2290 + x2292;
          Fp x2294 = x2293 - x71;
          if (x2294 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2295 = x2091 * x2046;
        if (x2295 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x71;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2296 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2297 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2298 = x2297 * x1;
          Fp x2299 = x2296 + x2298;
          Fp x2300 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2301 = x2300 * x2;
          Fp x2302 = x2299 + x2301;
          Fp x2303 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2304 = x2303 * x3;
          Fp x2305 = x2302 + x2304;
          Fp x2306 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2307 = x2306 * x4;
          Fp x2308 = x2305 + x2307;
          Fp x2309 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2310 = x2309 * x5;
          Fp x2311 = x2308 + x2310;
          Fp x2312 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2313 = x2312 * x0;
          Fp x2314 = x2311 + x2313;
          Fp x2315 = x2314 - x4;
          if (x2315 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x71;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2316 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2317 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2318 = x2317 * x1;
          Fp x2319 = x2316 + x2318;
          Fp x2320 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2321 = x2320 * x2;
          Fp x2322 = x2319 + x2321;
          Fp x2323 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2324 = x2323 * x3;
          Fp x2325 = x2322 + x2324;
          Fp x2326 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2327 = x2326 * x4;
          Fp x2328 = x2325 + x2327;
          Fp x2329 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2330 = x2329 * x5;
          Fp x2331 = x2328 + x2330;
          Fp x2332 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2333 = x2332 * x0;
          Fp x2334 = x2331 + x2333;
          Fp x2335 = x2334 - x71;
          if (x2335 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2336 = x70 - x1764;
        Fp x2337 = (x2336 == 0) ? Fp(1) : Fp(0);
        Fp x2338 = x71 - x2337;
        Fp x2339 = x71 - x2338;
        Fp x2340 = x2339 * x1774;
        if (x2340 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x71;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2341 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2342 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2343 = x2342 * x1;
          Fp x2344 = x2341 + x2343;
          Fp x2345 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2346 = x2345 * x2;
          Fp x2347 = x2344 + x2346;
          Fp x2348 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2349 = x2348 * x3;
          Fp x2350 = x2347 + x2349;
          Fp x2351 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2352 = x2351 * x4;
          Fp x2353 = x2350 + x2352;
          Fp x2354 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2355 = x2354 * x5;
          Fp x2356 = x2353 + x2355;
          Fp x2357 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2358 = x2357 * x0;
          Fp x2359 = x2356 + x2358;
          Fp x2360 = x2359 - x5;
          if (x2360 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x71;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2361 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2362 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2363 = x2362 * x1;
          Fp x2364 = x2361 + x2363;
          Fp x2365 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2366 = x2365 * x2;
          Fp x2367 = x2364 + x2366;
          Fp x2368 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2369 = x2368 * x3;
          Fp x2370 = x2367 + x2369;
          Fp x2371 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2372 = x2371 * x4;
          Fp x2373 = x2370 + x2372;
          Fp x2374 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2375 = x2374 * x5;
          Fp x2376 = x2373 + x2375;
          Fp x2377 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2378 = x2377 * x0;
          Fp x2379 = x2376 + x2378;
          Fp x2380 = x2379 - x71;
          if (x2380 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2381 = x71 - x1228;
        Fp x2382 = (x2381 == 0) ? Fp(1) : Fp(0);
        Fp x2383 = x71 - x2382;
        Fp x2384 = x71 - x2383;
        Fp x2385 = x2339 * x2384;
        if (x2385 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x71;
          }
          Fp x2386 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2387 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2388 = x2387 * x1;
          Fp x2389 = x2386 + x2388;
          Fp x2390 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2391 = x2390 * x2;
          Fp x2392 = x2389 + x2391;
          Fp x2393 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2394 = x2393 * x3;
          Fp x2395 = x2392 + x2394;
          Fp x2396 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2397 = x2396 * x4;
          Fp x2398 = x2395 + x2397;
          Fp x2399 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2400 = x2399 * x5;
          Fp x2401 = x2398 + x2400;
          Fp x2402 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2403 = x2402 * x0;
          Fp x2404 = x2401 + x2403;
          Fp x2405 = x2404 - x0;
          if (x2405 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x71;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2406 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2407 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2408 = x2407 * x1;
          Fp x2409 = x2406 + x2408;
          Fp x2410 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2411 = x2410 * x2;
          Fp x2412 = x2409 + x2411;
          Fp x2413 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2414 = x2413 * x3;
          Fp x2415 = x2412 + x2414;
          Fp x2416 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2417 = x2416 * x4;
          Fp x2418 = x2415 + x2417;
          Fp x2419 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2420 = x2419 * x5;
          Fp x2421 = x2418 + x2420;
          Fp x2422 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2423 = x2422 * x0;
          Fp x2424 = x2421 + x2423;
          Fp x2425 = x2424 - x71;
          if (x2425 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2426 = x2339 * x2001;
        if (x2426 != 0) {
          {
            args[2][72 * steps + cycle] = x71;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2427 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2428 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2429 = x2428 * x1;
          Fp x2430 = x2427 + x2429;
          Fp x2431 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2432 = x2431 * x2;
          Fp x2433 = x2430 + x2432;
          Fp x2434 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2435 = x2434 * x3;
          Fp x2436 = x2433 + x2435;
          Fp x2437 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2438 = x2437 * x4;
          Fp x2439 = x2436 + x2438;
          Fp x2440 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2441 = x2440 * x5;
          Fp x2442 = x2439 + x2441;
          Fp x2443 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2444 = x2443 * x0;
          Fp x2445 = x2442 + x2444;
          if (x2445 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x71;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2446 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2447 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2448 = x2447 * x1;
          Fp x2449 = x2446 + x2448;
          Fp x2450 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2451 = x2450 * x2;
          Fp x2452 = x2449 + x2451;
          Fp x2453 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2454 = x2453 * x3;
          Fp x2455 = x2452 + x2454;
          Fp x2456 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2457 = x2456 * x4;
          Fp x2458 = x2455 + x2457;
          Fp x2459 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2460 = x2459 * x5;
          Fp x2461 = x2458 + x2460;
          Fp x2462 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2463 = x2462 * x0;
          Fp x2464 = x2461 + x2463;
          Fp x2465 = x2464 - x1;
          if (x2465 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2466 = x2339 * x1866;
        if (x2466 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x71;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2467 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2468 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2469 = x2468 * x1;
          Fp x2470 = x2467 + x2469;
          Fp x2471 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2472 = x2471 * x2;
          Fp x2473 = x2470 + x2472;
          Fp x2474 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2475 = x2474 * x3;
          Fp x2476 = x2473 + x2475;
          Fp x2477 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2478 = x2477 * x4;
          Fp x2479 = x2476 + x2478;
          Fp x2480 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2481 = x2480 * x5;
          Fp x2482 = x2479 + x2481;
          Fp x2483 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2484 = x2483 * x0;
          Fp x2485 = x2482 + x2484;
          Fp x2486 = x2485 - x71;
          if (x2486 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x71;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2487 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2488 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2489 = x2488 * x1;
          Fp x2490 = x2487 + x2489;
          Fp x2491 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2492 = x2491 * x2;
          Fp x2493 = x2490 + x2492;
          Fp x2494 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2495 = x2494 * x3;
          Fp x2496 = x2493 + x2495;
          Fp x2497 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2498 = x2497 * x4;
          Fp x2499 = x2496 + x2498;
          Fp x2500 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2501 = x2500 * x5;
          Fp x2502 = x2499 + x2501;
          Fp x2503 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2504 = x2503 * x0;
          Fp x2505 = x2502 + x2504;
          Fp x2506 = x2505 - x1;
          if (x2506 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2507 = x4 - x1228;
        Fp x2508 = (x2507 == 0) ? Fp(1) : Fp(0);
        Fp x2509 = x71 - x2508;
        Fp x2510 = x71 - x2509;
        Fp x2511 = x2339 * x2510;
        if (x2511 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x71;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2512 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2513 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2514 = x2513 * x1;
          Fp x2515 = x2512 + x2514;
          Fp x2516 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2517 = x2516 * x2;
          Fp x2518 = x2515 + x2517;
          Fp x2519 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2520 = x2519 * x3;
          Fp x2521 = x2518 + x2520;
          Fp x2522 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2523 = x2522 * x4;
          Fp x2524 = x2521 + x2523;
          Fp x2525 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2526 = x2525 * x5;
          Fp x2527 = x2524 + x2526;
          Fp x2528 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2529 = x2528 * x0;
          Fp x2530 = x2527 + x2529;
          Fp x2531 = x2530 - x1;
          if (x2531 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x71;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2532 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2533 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2534 = x2533 * x1;
          Fp x2535 = x2532 + x2534;
          Fp x2536 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2537 = x2536 * x2;
          Fp x2538 = x2535 + x2537;
          Fp x2539 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2540 = x2539 * x3;
          Fp x2541 = x2538 + x2540;
          Fp x2542 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2543 = x2542 * x4;
          Fp x2544 = x2541 + x2543;
          Fp x2545 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2546 = x2545 * x5;
          Fp x2547 = x2544 + x2546;
          Fp x2548 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2549 = x2548 * x0;
          Fp x2550 = x2547 + x2549;
          Fp x2551 = x2550 - x1;
          if (x2551 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2552 = x6 - x1764;
        Fp x2553 = (x2552 == 0) ? Fp(1) : Fp(0);
        Fp x2554 = x71 - x2553;
        Fp x2555 = x71 - x2554;
        Fp x2556 = x2555 * x1774;
        if (x2556 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x71;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2557 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2558 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2559 = x2558 * x1;
          Fp x2560 = x2557 + x2559;
          Fp x2561 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2562 = x2561 * x2;
          Fp x2563 = x2560 + x2562;
          Fp x2564 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2565 = x2564 * x3;
          Fp x2566 = x2563 + x2565;
          Fp x2567 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2568 = x2567 * x4;
          Fp x2569 = x2566 + x2568;
          Fp x2570 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2571 = x2570 * x5;
          Fp x2572 = x2569 + x2571;
          Fp x2573 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2574 = x2573 * x0;
          Fp x2575 = x2572 + x2574;
          Fp x2576 = x2575 - x2;
          if (x2576 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x71;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2577 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2578 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2579 = x2578 * x1;
          Fp x2580 = x2577 + x2579;
          Fp x2581 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2582 = x2581 * x2;
          Fp x2583 = x2580 + x2582;
          Fp x2584 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2585 = x2584 * x3;
          Fp x2586 = x2583 + x2585;
          Fp x2587 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2588 = x2587 * x4;
          Fp x2589 = x2586 + x2588;
          Fp x2590 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2591 = x2590 * x5;
          Fp x2592 = x2589 + x2591;
          Fp x2593 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2594 = x2593 * x0;
          Fp x2595 = x2592 + x2594;
          Fp x2596 = x2595 - x1;
          if (x2596 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2597 = x2555 * x2384;
        if (x2597 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x71;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2598 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2599 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2600 = x2599 * x1;
          Fp x2601 = x2598 + x2600;
          Fp x2602 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2603 = x2602 * x2;
          Fp x2604 = x2601 + x2603;
          Fp x2605 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2606 = x2605 * x3;
          Fp x2607 = x2604 + x2606;
          Fp x2608 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2609 = x2608 * x4;
          Fp x2610 = x2607 + x2609;
          Fp x2611 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2612 = x2611 * x5;
          Fp x2613 = x2610 + x2612;
          Fp x2614 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2615 = x2614 * x0;
          Fp x2616 = x2613 + x2615;
          Fp x2617 = x2616 - x3;
          if (x2617 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x71;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2618 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2619 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2620 = x2619 * x1;
          Fp x2621 = x2618 + x2620;
          Fp x2622 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2623 = x2622 * x2;
          Fp x2624 = x2621 + x2623;
          Fp x2625 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2626 = x2625 * x3;
          Fp x2627 = x2624 + x2626;
          Fp x2628 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2629 = x2628 * x4;
          Fp x2630 = x2627 + x2629;
          Fp x2631 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2632 = x2631 * x5;
          Fp x2633 = x2630 + x2632;
          Fp x2634 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2635 = x2634 * x0;
          Fp x2636 = x2633 + x2635;
          Fp x2637 = x2636 - x1;
          if (x2637 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2638 = x2555 * x2001;
        if (x2638 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x71;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2639 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2640 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2641 = x2640 * x1;
          Fp x2642 = x2639 + x2641;
          Fp x2643 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2644 = x2643 * x2;
          Fp x2645 = x2642 + x2644;
          Fp x2646 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2647 = x2646 * x3;
          Fp x2648 = x2645 + x2647;
          Fp x2649 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2650 = x2649 * x4;
          Fp x2651 = x2648 + x2650;
          Fp x2652 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2653 = x2652 * x5;
          Fp x2654 = x2651 + x2653;
          Fp x2655 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2656 = x2655 * x0;
          Fp x2657 = x2654 + x2656;
          Fp x2658 = x2657 - x4;
          if (x2658 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x71;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2659 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2660 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2661 = x2660 * x1;
          Fp x2662 = x2659 + x2661;
          Fp x2663 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2664 = x2663 * x2;
          Fp x2665 = x2662 + x2664;
          Fp x2666 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2667 = x2666 * x3;
          Fp x2668 = x2665 + x2667;
          Fp x2669 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2670 = x2669 * x4;
          Fp x2671 = x2668 + x2670;
          Fp x2672 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2673 = x2672 * x5;
          Fp x2674 = x2671 + x2673;
          Fp x2675 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2676 = x2675 * x0;
          Fp x2677 = x2674 + x2676;
          Fp x2678 = x2677 - x1;
          if (x2678 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2679 = x39 - x1764;
        Fp x2680 = (x2679 == 0) ? Fp(1) : Fp(0);
        Fp x2681 = x71 - x2680;
        Fp x2682 = x71 - x2681;
        Fp x2683 = x2682 * x1774;
        if (x2683 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x71;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2684 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2685 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2686 = x2685 * x1;
          Fp x2687 = x2684 + x2686;
          Fp x2688 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2689 = x2688 * x2;
          Fp x2690 = x2687 + x2689;
          Fp x2691 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2692 = x2691 * x3;
          Fp x2693 = x2690 + x2692;
          Fp x2694 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2695 = x2694 * x4;
          Fp x2696 = x2693 + x2695;
          Fp x2697 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2698 = x2697 * x5;
          Fp x2699 = x2696 + x2698;
          Fp x2700 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2701 = x2700 * x0;
          Fp x2702 = x2699 + x2701;
          Fp x2703 = x2702 - x5;
          if (x2703 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x71;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2704 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2705 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2706 = x2705 * x1;
          Fp x2707 = x2704 + x2706;
          Fp x2708 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2709 = x2708 * x2;
          Fp x2710 = x2707 + x2709;
          Fp x2711 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2712 = x2711 * x3;
          Fp x2713 = x2710 + x2712;
          Fp x2714 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2715 = x2714 * x4;
          Fp x2716 = x2713 + x2715;
          Fp x2717 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2718 = x2717 * x5;
          Fp x2719 = x2716 + x2718;
          Fp x2720 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2721 = x2720 * x0;
          Fp x2722 = x2719 + x2721;
          Fp x2723 = x2722 - x1;
          if (x2723 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2724 = x2682 * x2384;
        if (x2724 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x71;
          }
          Fp x2725 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2726 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2727 = x2726 * x1;
          Fp x2728 = x2725 + x2727;
          Fp x2729 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2730 = x2729 * x2;
          Fp x2731 = x2728 + x2730;
          Fp x2732 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2733 = x2732 * x3;
          Fp x2734 = x2731 + x2733;
          Fp x2735 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2736 = x2735 * x4;
          Fp x2737 = x2734 + x2736;
          Fp x2738 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2739 = x2738 * x5;
          Fp x2740 = x2737 + x2739;
          Fp x2741 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2742 = x2741 * x0;
          Fp x2743 = x2740 + x2742;
          Fp x2744 = x2743 - x0;
          if (x2744 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x71;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2745 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2746 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2747 = x2746 * x1;
          Fp x2748 = x2745 + x2747;
          Fp x2749 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2750 = x2749 * x2;
          Fp x2751 = x2748 + x2750;
          Fp x2752 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2753 = x2752 * x3;
          Fp x2754 = x2751 + x2753;
          Fp x2755 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2756 = x2755 * x4;
          Fp x2757 = x2754 + x2756;
          Fp x2758 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2759 = x2758 * x5;
          Fp x2760 = x2757 + x2759;
          Fp x2761 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2762 = x2761 * x0;
          Fp x2763 = x2760 + x2762;
          Fp x2764 = x2763 - x1;
          if (x2764 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2765 = x2682 * x1866;
        if (x2765 != 0) {
          {
            args[2][72 * steps + cycle] = x71;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2766 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2767 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2768 = x2767 * x1;
          Fp x2769 = x2766 + x2768;
          Fp x2770 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2771 = x2770 * x2;
          Fp x2772 = x2769 + x2771;
          Fp x2773 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2774 = x2773 * x3;
          Fp x2775 = x2772 + x2774;
          Fp x2776 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2777 = x2776 * x4;
          Fp x2778 = x2775 + x2777;
          Fp x2779 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2780 = x2779 * x5;
          Fp x2781 = x2778 + x2780;
          Fp x2782 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2783 = x2782 * x0;
          Fp x2784 = x2781 + x2783;
          if (x2784 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x71;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2785 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2786 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2787 = x2786 * x1;
          Fp x2788 = x2785 + x2787;
          Fp x2789 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2790 = x2789 * x2;
          Fp x2791 = x2788 + x2790;
          Fp x2792 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2793 = x2792 * x3;
          Fp x2794 = x2791 + x2793;
          Fp x2795 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2796 = x2795 * x4;
          Fp x2797 = x2794 + x2796;
          Fp x2798 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2799 = x2798 * x5;
          Fp x2800 = x2797 + x2799;
          Fp x2801 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2802 = x2801 * x0;
          Fp x2803 = x2800 + x2802;
          Fp x2804 = x2803 - x2;
          if (x2804 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2805 = x2682 * x2510;
        if (x2805 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x71;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2806 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2807 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2808 = x2807 * x1;
          Fp x2809 = x2806 + x2808;
          Fp x2810 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2811 = x2810 * x2;
          Fp x2812 = x2809 + x2811;
          Fp x2813 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2814 = x2813 * x3;
          Fp x2815 = x2812 + x2814;
          Fp x2816 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2817 = x2816 * x4;
          Fp x2818 = x2815 + x2817;
          Fp x2819 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2820 = x2819 * x5;
          Fp x2821 = x2818 + x2820;
          Fp x2822 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2823 = x2822 * x0;
          Fp x2824 = x2821 + x2823;
          Fp x2825 = x2824 - x71;
          if (x2825 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x71;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2826 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2827 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2828 = x2827 * x1;
          Fp x2829 = x2826 + x2828;
          Fp x2830 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2831 = x2830 * x2;
          Fp x2832 = x2829 + x2831;
          Fp x2833 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2834 = x2833 * x3;
          Fp x2835 = x2832 + x2834;
          Fp x2836 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2837 = x2836 * x4;
          Fp x2838 = x2835 + x2837;
          Fp x2839 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2840 = x2839 * x5;
          Fp x2841 = x2838 + x2840;
          Fp x2842 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2843 = x2842 * x0;
          Fp x2844 = x2841 + x2843;
          Fp x2845 = x2844 - x2;
          if (x2845 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2846 = x2682 * x1911;
        if (x2846 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x71;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2847 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2848 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2849 = x2848 * x1;
          Fp x2850 = x2847 + x2849;
          Fp x2851 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2852 = x2851 * x2;
          Fp x2853 = x2850 + x2852;
          Fp x2854 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2855 = x2854 * x3;
          Fp x2856 = x2853 + x2855;
          Fp x2857 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2858 = x2857 * x4;
          Fp x2859 = x2856 + x2858;
          Fp x2860 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2861 = x2860 * x5;
          Fp x2862 = x2859 + x2861;
          Fp x2863 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2864 = x2863 * x0;
          Fp x2865 = x2862 + x2864;
          Fp x2866 = x2865 - x1;
          if (x2866 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x71;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2867 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2868 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2869 = x2868 * x1;
          Fp x2870 = x2867 + x2869;
          Fp x2871 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2872 = x2871 * x2;
          Fp x2873 = x2870 + x2872;
          Fp x2874 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2875 = x2874 * x3;
          Fp x2876 = x2873 + x2875;
          Fp x2877 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2878 = x2877 * x4;
          Fp x2879 = x2876 + x2878;
          Fp x2880 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2881 = x2880 * x5;
          Fp x2882 = x2879 + x2881;
          Fp x2883 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2884 = x2883 * x0;
          Fp x2885 = x2882 + x2884;
          Fp x2886 = x2885 - x2;
          if (x2886 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2887 = x2682 * x1956;
        if (x2887 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x71;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2888 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2889 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2890 = x2889 * x1;
          Fp x2891 = x2888 + x2890;
          Fp x2892 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2893 = x2892 * x2;
          Fp x2894 = x2891 + x2893;
          Fp x2895 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2896 = x2895 * x3;
          Fp x2897 = x2894 + x2896;
          Fp x2898 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2899 = x2898 * x4;
          Fp x2900 = x2897 + x2899;
          Fp x2901 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2902 = x2901 * x5;
          Fp x2903 = x2900 + x2902;
          Fp x2904 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2905 = x2904 * x0;
          Fp x2906 = x2903 + x2905;
          Fp x2907 = x2906 - x2;
          if (x2907 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x71;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2908 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2909 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2910 = x2909 * x1;
          Fp x2911 = x2908 + x2910;
          Fp x2912 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2913 = x2912 * x2;
          Fp x2914 = x2911 + x2913;
          Fp x2915 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2916 = x2915 * x3;
          Fp x2917 = x2914 + x2916;
          Fp x2918 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2919 = x2918 * x4;
          Fp x2920 = x2917 + x2919;
          Fp x2921 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2922 = x2921 * x5;
          Fp x2923 = x2920 + x2922;
          Fp x2924 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2925 = x2924 * x0;
          Fp x2926 = x2923 + x2925;
          Fp x2927 = x2926 - x2;
          if (x2927 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2928 = x40 - x1764;
        Fp x2929 = (x2928 == 0) ? Fp(1) : Fp(0);
        Fp x2930 = x71 - x2929;
        Fp x2931 = x71 - x2930;
        if (x2931 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x71;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2932 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2933 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2934 = x2933 * x1;
          Fp x2935 = x2932 + x2934;
          Fp x2936 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2937 = x2936 * x2;
          Fp x2938 = x2935 + x2937;
          Fp x2939 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2940 = x2939 * x3;
          Fp x2941 = x2938 + x2940;
          Fp x2942 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2943 = x2942 * x4;
          Fp x2944 = x2941 + x2943;
          Fp x2945 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2946 = x2945 * x5;
          Fp x2947 = x2944 + x2946;
          Fp x2948 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2949 = x2948 * x0;
          Fp x2950 = x2947 + x2949;
          Fp x2951 = x2950 - x3;
          if (x2951 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x71;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2952 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2953 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2954 = x2953 * x1;
          Fp x2955 = x2952 + x2954;
          Fp x2956 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x2957 = x2956 * x2;
          Fp x2958 = x2955 + x2957;
          Fp x2959 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x2960 = x2959 * x3;
          Fp x2961 = x2958 + x2960;
          Fp x2962 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x2963 = x2962 * x4;
          Fp x2964 = x2961 + x2963;
          Fp x2965 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x2966 = x2965 * x5;
          Fp x2967 = x2964 + x2966;
          Fp x2968 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x2969 = x2968 * x0;
          Fp x2970 = x2967 + x2969;
          Fp x2971 = x2970 - x2;
          if (x2971 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x2972 = x41 - x1764;
        Fp x2973 = (x2972 == 0) ? Fp(1) : Fp(0);
        Fp x2974 = x71 - x2973;
        Fp x2975 = x71 - x2974;
        Fp x2976 = x2975 * x1774;
        if (x2976 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x71;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x2977 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x2978 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x2979 = x2978 * x1;
          Fp x2980 = x2977 + x2979;
          Fp x2981 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x2982 = x2981 * x2;
          Fp x2983 = x2980 + x2982;
          Fp x2984 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x2985 = x2984 * x3;
          Fp x2986 = x2983 + x2985;
          Fp x2987 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x2988 = x2987 * x4;
          Fp x2989 = x2986 + x2988;
          Fp x2990 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x2991 = x2990 * x5;
          Fp x2992 = x2989 + x2991;
          Fp x2993 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x2994 = x2993 * x0;
          Fp x2995 = x2992 + x2994;
          Fp x2996 = x2995 - x4;
          if (x2996 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x71;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x2997 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x2998 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x2999 = x2998 * x1;
          Fp x3000 = x2997 + x2999;
          Fp x3001 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3002 = x3001 * x2;
          Fp x3003 = x3000 + x3002;
          Fp x3004 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3005 = x3004 * x3;
          Fp x3006 = x3003 + x3005;
          Fp x3007 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3008 = x3007 * x4;
          Fp x3009 = x3006 + x3008;
          Fp x3010 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3011 = x3010 * x5;
          Fp x3012 = x3009 + x3011;
          Fp x3013 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3014 = x3013 * x0;
          Fp x3015 = x3012 + x3014;
          Fp x3016 = x3015 - x2;
          if (x3016 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3017 = x42 - x1764;
        Fp x3018 = (x3017 == 0) ? Fp(1) : Fp(0);
        Fp x3019 = x71 - x3018;
        Fp x3020 = x71 - x3019;
        if (x3020 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x71;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3021 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3022 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3023 = x3022 * x1;
          Fp x3024 = x3021 + x3023;
          Fp x3025 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3026 = x3025 * x2;
          Fp x3027 = x3024 + x3026;
          Fp x3028 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3029 = x3028 * x3;
          Fp x3030 = x3027 + x3029;
          Fp x3031 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3032 = x3031 * x4;
          Fp x3033 = x3030 + x3032;
          Fp x3034 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3035 = x3034 * x5;
          Fp x3036 = x3033 + x3035;
          Fp x3037 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3038 = x3037 * x0;
          Fp x3039 = x3036 + x3038;
          Fp x3040 = x3039 - x5;
          if (x3040 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x71;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3041 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3042 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3043 = x3042 * x1;
          Fp x3044 = x3041 + x3043;
          Fp x3045 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3046 = x3045 * x2;
          Fp x3047 = x3044 + x3046;
          Fp x3048 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3049 = x3048 * x3;
          Fp x3050 = x3047 + x3049;
          Fp x3051 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3052 = x3051 * x4;
          Fp x3053 = x3050 + x3052;
          Fp x3054 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3055 = x3054 * x5;
          Fp x3056 = x3053 + x3055;
          Fp x3057 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3058 = x3057 * x0;
          Fp x3059 = x3056 + x3058;
          Fp x3060 = x3059 - x2;
          if (x3060 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3061 = x4 - x1764;
        Fp x3062 = (x3061 == 0) ? Fp(1) : Fp(0);
        Fp x3063 = x71 - x3062;
        Fp x3064 = x71 - x3063;
        if (x3064 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x71;
          }
          Fp x3065 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3066 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3067 = x3066 * x1;
          Fp x3068 = x3065 + x3067;
          Fp x3069 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3070 = x3069 * x2;
          Fp x3071 = x3068 + x3070;
          Fp x3072 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3073 = x3072 * x3;
          Fp x3074 = x3071 + x3073;
          Fp x3075 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3076 = x3075 * x4;
          Fp x3077 = x3074 + x3076;
          Fp x3078 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3079 = x3078 * x5;
          Fp x3080 = x3077 + x3079;
          Fp x3081 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3082 = x3081 * x0;
          Fp x3083 = x3080 + x3082;
          Fp x3084 = x3083 - x0;
          if (x3084 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x71;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3085 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3086 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3087 = x3086 * x1;
          Fp x3088 = x3085 + x3087;
          Fp x3089 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3090 = x3089 * x2;
          Fp x3091 = x3088 + x3090;
          Fp x3092 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3093 = x3092 * x3;
          Fp x3094 = x3091 + x3093;
          Fp x3095 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3096 = x3095 * x4;
          Fp x3097 = x3094 + x3096;
          Fp x3098 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3099 = x3098 * x5;
          Fp x3100 = x3097 + x3099;
          Fp x3101 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3102 = x3101 * x0;
          Fp x3103 = x3100 + x3102;
          Fp x3104 = x3103 - x2;
          if (x3104 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3105 = x71 - x1766;
        Fp x3106 = (x3105 == 0) ? Fp(1) : Fp(0);
        Fp x3107 = x71 - x3106;
        Fp x3108 = x71 - x3107;
        Fp x3109 = x1775 * x3108;
        if (x3109 != 0) {
          {
            args[2][72 * steps + cycle] = x71;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3110 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3111 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3112 = x3111 * x1;
          Fp x3113 = x3110 + x3112;
          Fp x3114 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3115 = x3114 * x2;
          Fp x3116 = x3113 + x3115;
          Fp x3117 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3118 = x3117 * x3;
          Fp x3119 = x3116 + x3118;
          Fp x3120 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3121 = x3120 * x4;
          Fp x3122 = x3119 + x3121;
          Fp x3123 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3124 = x3123 * x5;
          Fp x3125 = x3122 + x3124;
          Fp x3126 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3127 = x3126 * x0;
          Fp x3128 = x3125 + x3127;
          if (x3128 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x71;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3129 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3130 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3131 = x3130 * x1;
          Fp x3132 = x3129 + x3131;
          Fp x3133 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3134 = x3133 * x2;
          Fp x3135 = x3132 + x3134;
          Fp x3136 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3137 = x3136 * x3;
          Fp x3138 = x3135 + x3137;
          Fp x3139 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3140 = x3139 * x4;
          Fp x3141 = x3138 + x3140;
          Fp x3142 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3143 = x3142 * x5;
          Fp x3144 = x3141 + x3143;
          Fp x3145 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3146 = x3145 * x0;
          Fp x3147 = x3144 + x3146;
          Fp x3148 = x3147 - x3;
          if (x3148 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3149 = x1770 * x2384;
        Fp x3150 = x3149 * x3108;
        if (x3150 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x71;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3151 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3152 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3153 = x3152 * x1;
          Fp x3154 = x3151 + x3153;
          Fp x3155 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3156 = x3155 * x2;
          Fp x3157 = x3154 + x3156;
          Fp x3158 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3159 = x3158 * x3;
          Fp x3160 = x3157 + x3159;
          Fp x3161 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3162 = x3161 * x4;
          Fp x3163 = x3160 + x3162;
          Fp x3164 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3165 = x3164 * x5;
          Fp x3166 = x3163 + x3165;
          Fp x3167 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3168 = x3167 * x0;
          Fp x3169 = x3166 + x3168;
          Fp x3170 = x3169 - x71;
          if (x3170 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x71;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3171 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3172 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3173 = x3172 * x1;
          Fp x3174 = x3171 + x3173;
          Fp x3175 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3176 = x3175 * x2;
          Fp x3177 = x3174 + x3176;
          Fp x3178 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3179 = x3178 * x3;
          Fp x3180 = x3177 + x3179;
          Fp x3181 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3182 = x3181 * x4;
          Fp x3183 = x3180 + x3182;
          Fp x3184 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3185 = x3184 * x5;
          Fp x3186 = x3183 + x3185;
          Fp x3187 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3188 = x3187 * x0;
          Fp x3189 = x3186 + x3188;
          Fp x3190 = x3189 - x3;
          if (x3190 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3191 = x2002 * x3108;
        if (x3191 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x71;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3192 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3193 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3194 = x3193 * x1;
          Fp x3195 = x3192 + x3194;
          Fp x3196 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3197 = x3196 * x2;
          Fp x3198 = x3195 + x3197;
          Fp x3199 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3200 = x3199 * x3;
          Fp x3201 = x3198 + x3200;
          Fp x3202 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3203 = x3202 * x4;
          Fp x3204 = x3201 + x3203;
          Fp x3205 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3206 = x3205 * x5;
          Fp x3207 = x3204 + x3206;
          Fp x3208 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3209 = x3208 * x0;
          Fp x3210 = x3207 + x3209;
          Fp x3211 = x3210 - x1;
          if (x3211 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x71;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3212 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3213 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3214 = x3213 * x1;
          Fp x3215 = x3212 + x3214;
          Fp x3216 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3217 = x3216 * x2;
          Fp x3218 = x3215 + x3217;
          Fp x3219 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3220 = x3219 * x3;
          Fp x3221 = x3218 + x3220;
          Fp x3222 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3223 = x3222 * x4;
          Fp x3224 = x3221 + x3223;
          Fp x3225 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3226 = x3225 * x5;
          Fp x3227 = x3224 + x3226;
          Fp x3228 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3229 = x3228 * x0;
          Fp x3230 = x3227 + x3229;
          Fp x3231 = x3230 - x3;
          if (x3231 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3232 = x2047 * x3108;
        if (x3232 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x71;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3233 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3234 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3235 = x3234 * x1;
          Fp x3236 = x3233 + x3235;
          Fp x3237 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3238 = x3237 * x2;
          Fp x3239 = x3236 + x3238;
          Fp x3240 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3241 = x3240 * x3;
          Fp x3242 = x3239 + x3241;
          Fp x3243 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3244 = x3243 * x4;
          Fp x3245 = x3242 + x3244;
          Fp x3246 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3247 = x3246 * x5;
          Fp x3248 = x3245 + x3247;
          Fp x3249 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3250 = x3249 * x0;
          Fp x3251 = x3248 + x3250;
          Fp x3252 = x3251 - x2;
          if (x3252 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x71;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3253 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3254 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3255 = x3254 * x1;
          Fp x3256 = x3253 + x3255;
          Fp x3257 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3258 = x3257 * x2;
          Fp x3259 = x3256 + x3258;
          Fp x3260 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3261 = x3260 * x3;
          Fp x3262 = x3259 + x3261;
          Fp x3263 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3264 = x3263 * x4;
          Fp x3265 = x3262 + x3264;
          Fp x3266 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3267 = x3266 * x5;
          Fp x3268 = x3265 + x3267;
          Fp x3269 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3270 = x3269 * x0;
          Fp x3271 = x3268 + x3270;
          Fp x3272 = x3271 - x3;
          if (x3272 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3273 = x3149 * x1779;
        if (x3273 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x71;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3274 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3275 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3276 = x3275 * x1;
          Fp x3277 = x3274 + x3276;
          Fp x3278 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3279 = x3278 * x2;
          Fp x3280 = x3277 + x3279;
          Fp x3281 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3282 = x3281 * x3;
          Fp x3283 = x3280 + x3282;
          Fp x3284 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3285 = x3284 * x4;
          Fp x3286 = x3283 + x3285;
          Fp x3287 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3288 = x3287 * x5;
          Fp x3289 = x3286 + x3288;
          Fp x3290 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3291 = x3290 * x0;
          Fp x3292 = x3289 + x3291;
          Fp x3293 = x3292 - x3;
          if (x3293 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x71;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3294 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3295 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3296 = x3295 * x1;
          Fp x3297 = x3294 + x3296;
          Fp x3298 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3299 = x3298 * x2;
          Fp x3300 = x3297 + x3299;
          Fp x3301 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3302 = x3301 * x3;
          Fp x3303 = x3300 + x3302;
          Fp x3304 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3305 = x3304 * x4;
          Fp x3306 = x3303 + x3305;
          Fp x3307 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3308 = x3307 * x5;
          Fp x3309 = x3306 + x3308;
          Fp x3310 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3311 = x3310 * x0;
          Fp x3312 = x3309 + x3311;
          Fp x3313 = x3312 - x3;
          if (x3313 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3314 = x2091 * x2384;
        Fp x3315 = x3314 * x1779;
        if (x3315 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x71;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3316 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3317 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3318 = x3317 * x1;
          Fp x3319 = x3316 + x3318;
          Fp x3320 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3321 = x3320 * x2;
          Fp x3322 = x3319 + x3321;
          Fp x3323 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3324 = x3323 * x3;
          Fp x3325 = x3322 + x3324;
          Fp x3326 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3327 = x3326 * x4;
          Fp x3328 = x3325 + x3327;
          Fp x3329 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3330 = x3329 * x5;
          Fp x3331 = x3328 + x3330;
          Fp x3332 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3333 = x3332 * x0;
          Fp x3334 = x3331 + x3333;
          Fp x3335 = x3334 - x4;
          if (x3335 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x71;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3336 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3337 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3338 = x3337 * x1;
          Fp x3339 = x3336 + x3338;
          Fp x3340 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3341 = x3340 * x2;
          Fp x3342 = x3339 + x3341;
          Fp x3343 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3344 = x3343 * x3;
          Fp x3345 = x3342 + x3344;
          Fp x3346 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3347 = x3346 * x4;
          Fp x3348 = x3345 + x3347;
          Fp x3349 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3350 = x3349 * x5;
          Fp x3351 = x3348 + x3350;
          Fp x3352 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3353 = x3352 * x0;
          Fp x3354 = x3351 + x3353;
          Fp x3355 = x3354 - x3;
          if (x3355 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3356 = x1867 * x3108;
        if (x3356 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x71;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3357 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3358 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3359 = x3358 * x1;
          Fp x3360 = x3357 + x3359;
          Fp x3361 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3362 = x3361 * x2;
          Fp x3363 = x3360 + x3362;
          Fp x3364 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3365 = x3364 * x3;
          Fp x3366 = x3363 + x3365;
          Fp x3367 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3368 = x3367 * x4;
          Fp x3369 = x3366 + x3368;
          Fp x3370 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3371 = x3370 * x5;
          Fp x3372 = x3369 + x3371;
          Fp x3373 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3374 = x3373 * x0;
          Fp x3375 = x3372 + x3374;
          Fp x3376 = x3375 - x1;
          if (x3376 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x71;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3377 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3378 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3379 = x3378 * x1;
          Fp x3380 = x3377 + x3379;
          Fp x3381 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3382 = x3381 * x2;
          Fp x3383 = x3380 + x3382;
          Fp x3384 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3385 = x3384 * x3;
          Fp x3386 = x3383 + x3385;
          Fp x3387 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3388 = x3387 * x4;
          Fp x3389 = x3386 + x3388;
          Fp x3390 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3391 = x3390 * x5;
          Fp x3392 = x3389 + x3391;
          Fp x3393 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3394 = x3393 * x0;
          Fp x3395 = x3392 + x3394;
          Fp x3396 = x3395 - x4;
          if (x3396 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3397 = x1770 * x2510;
        Fp x3398 = x3397 * x3108;
        if (x3398 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x71;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3399 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3400 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3401 = x3400 * x1;
          Fp x3402 = x3399 + x3401;
          Fp x3403 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3404 = x3403 * x2;
          Fp x3405 = x3402 + x3404;
          Fp x3406 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3407 = x3406 * x3;
          Fp x3408 = x3405 + x3407;
          Fp x3409 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3410 = x3409 * x4;
          Fp x3411 = x3408 + x3410;
          Fp x3412 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3413 = x3412 * x5;
          Fp x3414 = x3411 + x3413;
          Fp x3415 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3416 = x3415 * x0;
          Fp x3417 = x3414 + x3416;
          Fp x3418 = x3417 - x2;
          if (x3418 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x71;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3419 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3420 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3421 = x3420 * x1;
          Fp x3422 = x3419 + x3421;
          Fp x3423 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3424 = x3423 * x2;
          Fp x3425 = x3422 + x3424;
          Fp x3426 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3427 = x3426 * x3;
          Fp x3428 = x3425 + x3427;
          Fp x3429 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3430 = x3429 * x4;
          Fp x3431 = x3428 + x3430;
          Fp x3432 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3433 = x3432 * x5;
          Fp x3434 = x3431 + x3433;
          Fp x3435 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3436 = x3435 * x0;
          Fp x3437 = x3434 + x3436;
          Fp x3438 = x3437 - x4;
          if (x3438 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3439 = x1912 * x3108;
        if (x3439 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x71;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3440 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3441 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3442 = x3441 * x1;
          Fp x3443 = x3440 + x3442;
          Fp x3444 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3445 = x3444 * x2;
          Fp x3446 = x3443 + x3445;
          Fp x3447 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3448 = x3447 * x3;
          Fp x3449 = x3446 + x3448;
          Fp x3450 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3451 = x3450 * x4;
          Fp x3452 = x3449 + x3451;
          Fp x3453 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3454 = x3453 * x5;
          Fp x3455 = x3452 + x3454;
          Fp x3456 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3457 = x3456 * x0;
          Fp x3458 = x3455 + x3457;
          Fp x3459 = x3458 - x3;
          if (x3459 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x71;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3460 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3461 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3462 = x3461 * x1;
          Fp x3463 = x3460 + x3462;
          Fp x3464 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3465 = x3464 * x2;
          Fp x3466 = x3463 + x3465;
          Fp x3467 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3468 = x3467 * x3;
          Fp x3469 = x3466 + x3468;
          Fp x3470 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3471 = x3470 * x4;
          Fp x3472 = x3469 + x3471;
          Fp x3473 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3474 = x3473 * x5;
          Fp x3475 = x3472 + x3474;
          Fp x3476 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3477 = x3476 * x0;
          Fp x3478 = x3475 + x3477;
          Fp x3479 = x3478 - x4;
          if (x3479 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3480 = x1957 * x3108;
        if (x3480 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x71;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3481 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3482 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3483 = x3482 * x1;
          Fp x3484 = x3481 + x3483;
          Fp x3485 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3486 = x3485 * x2;
          Fp x3487 = x3484 + x3486;
          Fp x3488 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3489 = x3488 * x3;
          Fp x3490 = x3487 + x3489;
          Fp x3491 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3492 = x3491 * x4;
          Fp x3493 = x3490 + x3492;
          Fp x3494 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3495 = x3494 * x5;
          Fp x3496 = x3493 + x3495;
          Fp x3497 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3498 = x3497 * x0;
          Fp x3499 = x3496 + x3498;
          Fp x3500 = x3499 - x4;
          if (x3500 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x71;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3501 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3502 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3503 = x3502 * x1;
          Fp x3504 = x3501 + x3503;
          Fp x3505 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3506 = x3505 * x2;
          Fp x3507 = x3504 + x3506;
          Fp x3508 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3509 = x3508 * x3;
          Fp x3510 = x3507 + x3509;
          Fp x3511 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3512 = x3511 * x4;
          Fp x3513 = x3510 + x3512;
          Fp x3514 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3515 = x3514 * x5;
          Fp x3516 = x3513 + x3515;
          Fp x3517 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3518 = x3517 * x0;
          Fp x3519 = x3516 + x3518;
          Fp x3520 = x3519 - x4;
          if (x3520 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3521 = x3397 * x1779;
        if (x3521 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x71;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3522 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3523 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3524 = x3523 * x1;
          Fp x3525 = x3522 + x3524;
          Fp x3526 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3527 = x3526 * x2;
          Fp x3528 = x3525 + x3527;
          Fp x3529 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3530 = x3529 * x3;
          Fp x3531 = x3528 + x3530;
          Fp x3532 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3533 = x3532 * x4;
          Fp x3534 = x3531 + x3533;
          Fp x3535 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3536 = x3535 * x5;
          Fp x3537 = x3534 + x3536;
          Fp x3538 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3539 = x3538 * x0;
          Fp x3540 = x3537 + x3539;
          Fp x3541 = x3540 - x5;
          if (x3541 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x71;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3542 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3543 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3544 = x3543 * x1;
          Fp x3545 = x3542 + x3544;
          Fp x3546 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3547 = x3546 * x2;
          Fp x3548 = x3545 + x3547;
          Fp x3549 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3550 = x3549 * x3;
          Fp x3551 = x3548 + x3550;
          Fp x3552 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3553 = x3552 * x4;
          Fp x3554 = x3551 + x3553;
          Fp x3555 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3556 = x3555 * x5;
          Fp x3557 = x3554 + x3556;
          Fp x3558 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3559 = x3558 * x0;
          Fp x3560 = x3557 + x3559;
          Fp x3561 = x3560 - x4;
          if (x3561 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3562 = x3397 * x1822;
        if (x3562 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x71;
          }
          Fp x3563 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3564 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3565 = x3564 * x1;
          Fp x3566 = x3563 + x3565;
          Fp x3567 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3568 = x3567 * x2;
          Fp x3569 = x3566 + x3568;
          Fp x3570 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3571 = x3570 * x3;
          Fp x3572 = x3569 + x3571;
          Fp x3573 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3574 = x3573 * x4;
          Fp x3575 = x3572 + x3574;
          Fp x3576 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3577 = x3576 * x5;
          Fp x3578 = x3575 + x3577;
          Fp x3579 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3580 = x3579 * x0;
          Fp x3581 = x3578 + x3580;
          Fp x3582 = x3581 - x0;
          if (x3582 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x71;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3583 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3584 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3585 = x3584 * x1;
          Fp x3586 = x3583 + x3585;
          Fp x3587 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3588 = x3587 * x2;
          Fp x3589 = x3586 + x3588;
          Fp x3590 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3591 = x3590 * x3;
          Fp x3592 = x3589 + x3591;
          Fp x3593 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3594 = x3593 * x4;
          Fp x3595 = x3592 + x3594;
          Fp x3596 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3597 = x3596 * x5;
          Fp x3598 = x3595 + x3597;
          Fp x3599 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3600 = x3599 * x0;
          Fp x3601 = x3598 + x3600;
          Fp x3602 = x3601 - x4;
          if (x3602 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3603 = x2091 * x2510;
        Fp x3604 = x3603 * x1779;
        if (x3604 != 0) {
          {
            args[2][72 * steps + cycle] = x71;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3605 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3606 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3607 = x3606 * x1;
          Fp x3608 = x3605 + x3607;
          Fp x3609 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3610 = x3609 * x2;
          Fp x3611 = x3608 + x3610;
          Fp x3612 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3613 = x3612 * x3;
          Fp x3614 = x3611 + x3613;
          Fp x3615 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3616 = x3615 * x4;
          Fp x3617 = x3614 + x3616;
          Fp x3618 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3619 = x3618 * x5;
          Fp x3620 = x3617 + x3619;
          Fp x3621 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3622 = x3621 * x0;
          Fp x3623 = x3620 + x3622;
          if (x3623 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x71;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3624 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3625 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3626 = x3625 * x1;
          Fp x3627 = x3624 + x3626;
          Fp x3628 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3629 = x3628 * x2;
          Fp x3630 = x3627 + x3629;
          Fp x3631 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3632 = x3631 * x3;
          Fp x3633 = x3630 + x3632;
          Fp x3634 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3635 = x3634 * x4;
          Fp x3636 = x3633 + x3635;
          Fp x3637 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3638 = x3637 * x5;
          Fp x3639 = x3636 + x3638;
          Fp x3640 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3641 = x3640 * x0;
          Fp x3642 = x3639 + x3641;
          Fp x3643 = x3642 - x5;
          if (x3643 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3644 = x3603 * x1822;
        if (x3644 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x71;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x70;
          }
          Fp x3645 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3646 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3647 = x3646 * x1;
          Fp x3648 = x3645 + x3647;
          Fp x3649 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3650 = x3649 * x2;
          Fp x3651 = x3648 + x3650;
          Fp x3652 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3653 = x3652 * x3;
          Fp x3654 = x3651 + x3653;
          Fp x3655 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3656 = x3655 * x4;
          Fp x3657 = x3654 + x3656;
          Fp x3658 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3659 = x3658 * x5;
          Fp x3660 = x3657 + x3659;
          Fp x3661 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3662 = x3661 * x0;
          Fp x3663 = x3660 + x3662;
          Fp x3664 = x3663 - x71;
          if (x3664 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x71;
            args[2][87 * steps + cycle] = x70;
          }
          Fp x3665 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3666 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3667 = x3666 * x1;
          Fp x3668 = x3665 + x3667;
          Fp x3669 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3670 = x3669 * x2;
          Fp x3671 = x3668 + x3670;
          Fp x3672 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3673 = x3672 * x3;
          Fp x3674 = x3671 + x3673;
          Fp x3675 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3676 = x3675 * x4;
          Fp x3677 = x3674 + x3676;
          Fp x3678 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3679 = x3678 * x5;
          Fp x3680 = x3677 + x3679;
          Fp x3681 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3682 = x3681 * x0;
          Fp x3683 = x3680 + x3682;
          Fp x3684 = x3683 - x5;
          if (x3684 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        Fp x3685 = x43 - x1764;
        Fp x3686 = (x3685 == 0) ? Fp(1) : Fp(0);
        Fp x3687 = x71 - x3686;
        Fp x3688 = x71 - x3687;
        Fp x3689 = x3688 * x1774;
        Fp x3690 = x3689 * x1779;
        if (x3690 != 0) {
          {
            args[2][72 * steps + cycle] = x70;
            args[2][73 * steps + cycle] = x70;
            args[2][74 * steps + cycle] = x70;
            args[2][75 * steps + cycle] = x70;
            args[2][76 * steps + cycle] = x70;
            args[2][77 * steps + cycle] = x70;
            args[2][78 * steps + cycle] = x70;
            args[2][79 * steps + cycle] = x71;
          }
          Fp x3691 = args[2][73 * steps + ((cycle - 0) & mask)];
          Fp x3692 = args[2][74 * steps + ((cycle - 0) & mask)];
          Fp x3693 = x3692 * x1;
          Fp x3694 = x3691 + x3693;
          Fp x3695 = args[2][75 * steps + ((cycle - 0) & mask)];
          Fp x3696 = x3695 * x2;
          Fp x3697 = x3694 + x3696;
          Fp x3698 = args[2][76 * steps + ((cycle - 0) & mask)];
          Fp x3699 = x3698 * x3;
          Fp x3700 = x3697 + x3699;
          Fp x3701 = args[2][77 * steps + ((cycle - 0) & mask)];
          Fp x3702 = x3701 * x4;
          Fp x3703 = x3700 + x3702;
          Fp x3704 = args[2][78 * steps + ((cycle - 0) & mask)];
          Fp x3705 = x3704 * x5;
          Fp x3706 = x3703 + x3705;
          Fp x3707 = args[2][79 * steps + ((cycle - 0) & mask)];
          Fp x3708 = x3707 * x0;
          Fp x3709 = x3706 + x3708;
          Fp x3710 = x3709 - x0;
          if (x3710 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
          {
            args[2][80 * steps + cycle] = x70;
            args[2][81 * steps + cycle] = x70;
            args[2][82 * steps + cycle] = x70;
            args[2][83 * steps + cycle] = x70;
            args[2][84 * steps + cycle] = x70;
            args[2][85 * steps + cycle] = x70;
            args[2][86 * steps + cycle] = x70;
            args[2][87 * steps + cycle] = x71;
          }
          Fp x3711 = args[2][81 * steps + ((cycle - 0) & mask)];
          Fp x3712 = args[2][82 * steps + ((cycle - 0) & mask)];
          Fp x3713 = x3712 * x1;
          Fp x3714 = x3711 + x3713;
          Fp x3715 = args[2][83 * steps + ((cycle - 0) & mask)];
          Fp x3716 = x3715 * x2;
          Fp x3717 = x3714 + x3716;
          Fp x3718 = args[2][84 * steps + ((cycle - 0) & mask)];
          Fp x3719 = x3718 * x3;
          Fp x3720 = x3717 + x3719;
          Fp x3721 = args[2][85 * steps + ((cycle - 0) & mask)];
          Fp x3722 = x3721 * x4;
          Fp x3723 = x3720 + x3722;
          Fp x3724 = args[2][86 * steps + ((cycle - 0) & mask)];
          Fp x3725 = x3724 * x5;
          Fp x3726 = x3723 + x3725;
          Fp x3727 = args[2][87 * steps + ((cycle - 0) & mask)];
          Fp x3728 = x3727 * x0;
          Fp x3729 = x3726 + x3728;
          Fp x3730 = x3729 - x0;
          if (x3730 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
      }
      Fp x3731 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x3732 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x3733 = x3731 * x3732;
      if (x3733 != 0) {
        Fp x3734 = x1764 - x38;
        if (x3734 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:50");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:50");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:50");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x3735 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x3736 = Fp(x3735.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x3736;
            Fp x3737 = x3735 - x3736;
            Fp x3738 = x3737 * x10;
            Fp x3739 = Fp(x3738.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x3739;
            Fp x3740 = x3738 - x3739;
            Fp x3741 = x3740 * x10;
            Fp x3742 = Fp(x3741.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x3742;
            Fp x3743 = x3741 - x3742;
            Fp x3744 = x3743 * x10;
            Fp x3745 = Fp(x3744.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x3745;
            Fp x3746 = x3744 - x3745;
            Fp x3747 = x3746 * x10;
            Fp x3748 = Fp(x3747.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x3748;
            Fp x3749 = x3747 - x3748;
            Fp x3750 = x3749 * x10;
            Fp x3751 = Fp(x3750.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x3751;
            Fp x3752 = x3750 - x3751;
            Fp x3753 = x3752 * x10;
            Fp x3754 = Fp(x3753.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x3754;
            Fp x3755 = x3753 - x3754;
            Fp x3756 = x3755 * x10;
            Fp x3757 = Fp(x3756.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x3757;
          }
          Fp x3758 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x3759 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x3760 = x3759 * x3;
          Fp x3761 = x3758 + x3760;
          Fp x3762 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x3763 = x3762 * x11;
          Fp x3764 = x3761 + x3763;
          Fp x3765 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x3766 = x3765 * x12;
          Fp x3767 = x3764 + x3766;
          Fp x3768 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x3769 = x3768 * x13;
          Fp x3770 = x3767 + x3769;
          Fp x3771 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x3772 = x3771 * x14;
          Fp x3773 = x3770 + x3772;
          Fp x3774 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x3775 = x3774 * x15;
          Fp x3776 = x3773 + x3775;
          Fp x3777 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x3778 = x3777 * x16;
          Fp x3779 = x3776 + x3778;
          Fp x3780 = x3735 - x3779;
          Fp x3781 = x3780 * x33;
          if (x3781 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:50");
          {
            Fp x3782 = Fp(x3762.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x3782;
            Fp x3783 = x3762 - x3782;
            Fp x3784 = x3783 * x26;
            Fp x3785 = Fp(x3784.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x3785;
          }
          Fp x3786 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x3787 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x3788 = x3787 * x1;
          Fp x3789 = x3786 + x3788;
          Fp x3790 = x3762 - x3789;
          Fp x3791 = x3790 * x10;
          if (x3791 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:50");
          Fp x3792 = x3786 * x11;
          Fp x3793 = x3761 + x3792;
          {
            Fp x3794 = (x3793 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x3794;
            Fp x3795 = x3793 - x71;
            Fp x3796 = (x3795 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x3796;
            Fp x3797 = x3793 - x1;
            Fp x3798 = (x3797 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x3798;
            Fp x3799 = x3793 - x2;
            Fp x3800 = (x3799 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x3800;
            Fp x3801 = x3793 - x3;
            Fp x3802 = (x3801 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x3802;
            Fp x3803 = x3793 - x4;
            Fp x3804 = (x3803 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x3804;
            Fp x3805 = x3793 - x5;
            Fp x3806 = (x3805 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x3806;
            Fp x3807 = x3793 - x0;
            Fp x3808 = (x3807 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x3808;
            Fp x3809 = x3793 - x6;
            Fp x3810 = (x3809 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x3810;
            Fp x3811 = x3793 - x7;
            Fp x3812 = (x3811 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x3812;
            Fp x3813 = x3793 - x8;
            Fp x3814 = (x3813 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x3814;
            Fp x3815 = x3793 - x9;
            Fp x3816 = (x3815 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x3816;
            Fp x3817 = x3793 - x38;
            Fp x3818 = (x3817 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x3818;
            Fp x3819 = x3793 - x42;
            Fp x3820 = (x3819 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x3820;
            Fp x3821 = x3793 - x44;
            Fp x3822 = (x3821 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x3822;
            Fp x3823 = x3793 - x45;
            Fp x3824 = (x3823 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x3824;
            Fp x3825 = x3793 - x11;
            Fp x3826 = (x3825 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x3826;
            Fp x3827 = x3793 - x46;
            Fp x3828 = (x3827 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x3828;
            Fp x3829 = x3793 - x47;
            Fp x3830 = (x3829 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x3830;
            Fp x3831 = x3793 - x48;
            Fp x3832 = (x3831 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x3832;
            Fp x3833 = x3793 - x49;
            Fp x3834 = (x3833 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x3834;
            Fp x3835 = x3793 - x50;
            Fp x3836 = (x3835 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x3836;
            Fp x3837 = x3793 - x51;
            Fp x3838 = (x3837 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x3838;
            Fp x3839 = x3793 - x52;
            Fp x3840 = (x3839 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x3840;
            Fp x3841 = x3793 - x39;
            Fp x3842 = (x3841 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x3842;
            Fp x3843 = x3793 - x41;
            Fp x3844 = (x3843 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x3844;
            Fp x3845 = x3793 - x53;
            Fp x3846 = (x3845 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x3846;
            Fp x3847 = x3793 - x40;
            Fp x3848 = (x3847 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x3848;
            Fp x3849 = x3793 - x43;
            Fp x3850 = (x3849 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x3850;
            Fp x3851 = x3793 - x54;
            Fp x3852 = (x3851 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x3852;
            Fp x3853 = x3793 - x55;
            Fp x3854 = (x3853 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x3854;
            Fp x3855 = x3793 - x56;
            Fp x3856 = (x3855 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x3856;
          }
          Fp x3857 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x3858 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x3859 = x3858 * x1;
          Fp x3860 = x3857 + x3859;
          Fp x3861 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x3862 = x3861 * x2;
          Fp x3863 = x3860 + x3862;
          Fp x3864 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x3865 = x3864 * x3;
          Fp x3866 = x3863 + x3865;
          Fp x3867 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x3868 = x3867 * x4;
          Fp x3869 = x3866 + x3868;
          Fp x3870 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x3871 = x3870 * x5;
          Fp x3872 = x3869 + x3871;
          Fp x3873 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x3874 = x3873 * x0;
          Fp x3875 = x3872 + x3874;
          Fp x3876 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x3877 = x3876 * x6;
          Fp x3878 = x3875 + x3877;
          Fp x3879 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x3880 = x3879 * x7;
          Fp x3881 = x3878 + x3880;
          Fp x3882 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x3883 = x3882 * x8;
          Fp x3884 = x3881 + x3883;
          Fp x3885 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x3886 = x3885 * x9;
          Fp x3887 = x3884 + x3886;
          Fp x3888 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x3889 = x3888 * x38;
          Fp x3890 = x3887 + x3889;
          Fp x3891 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x3892 = x3891 * x42;
          Fp x3893 = x3890 + x3892;
          Fp x3894 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x3895 = x3894 * x44;
          Fp x3896 = x3893 + x3895;
          Fp x3897 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x3898 = x3897 * x45;
          Fp x3899 = x3896 + x3898;
          Fp x3900 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x3901 = x3900 * x11;
          Fp x3902 = x3899 + x3901;
          Fp x3903 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x3904 = x3903 * x46;
          Fp x3905 = x3902 + x3904;
          Fp x3906 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x3907 = x3906 * x47;
          Fp x3908 = x3905 + x3907;
          Fp x3909 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x3910 = x3909 * x48;
          Fp x3911 = x3908 + x3910;
          Fp x3912 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x3913 = x3912 * x49;
          Fp x3914 = x3911 + x3913;
          Fp x3915 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x3916 = x3915 * x50;
          Fp x3917 = x3914 + x3916;
          Fp x3918 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x3919 = x3918 * x51;
          Fp x3920 = x3917 + x3919;
          Fp x3921 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x3922 = x3921 * x52;
          Fp x3923 = x3920 + x3922;
          Fp x3924 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x3925 = x3924 * x39;
          Fp x3926 = x3923 + x3925;
          Fp x3927 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x3928 = x3927 * x41;
          Fp x3929 = x3926 + x3928;
          Fp x3930 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x3931 = x3930 * x53;
          Fp x3932 = x3929 + x3931;
          Fp x3933 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x3934 = x3933 * x40;
          Fp x3935 = x3932 + x3934;
          Fp x3936 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x3937 = x3936 * x43;
          Fp x3938 = x3935 + x3937;
          Fp x3939 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x3940 = x3939 * x54;
          Fp x3941 = x3938 + x3940;
          Fp x3942 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x3943 = x3942 * x55;
          Fp x3944 = x3941 + x3943;
          Fp x3945 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x3946 = x3945 * x56;
          Fp x3947 = x3944 + x3946;
          Fp x3948 = x3947 - x3793;
          if (x3948 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x71;
        Fp x3949 = x1005 * x3;
        Fp x3950 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x3951 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x3952 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x3953 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x3954 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x3955 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x3949;
        host_args[2] = x1280;
        host_args[3] = x3950;
        host_args[4] = x3951;
        host_args[5] = x1239;
        host_args[6] = x3952;
        host_args[7] = x3953;
        host_args[8] = x3954;
        host_args[9] = x3955;
        host(ctx, "log", "C%u: pc: %08x Decode: ADD r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x3956 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x3957 = x3956 * x3732;
      if (x3957 != 0) {
        Fp x3958 = x1764 - x38;
        if (x3958 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:51");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:51");
        Fp x3959 = x1766 - x27;
        if (x3959 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:51");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x3960 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x3961 = Fp(x3960.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x3961;
            Fp x3962 = x3960 - x3961;
            Fp x3963 = x3962 * x10;
            Fp x3964 = Fp(x3963.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x3964;
            Fp x3965 = x3963 - x3964;
            Fp x3966 = x3965 * x10;
            Fp x3967 = Fp(x3966.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x3967;
            Fp x3968 = x3966 - x3967;
            Fp x3969 = x3968 * x10;
            Fp x3970 = Fp(x3969.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x3970;
            Fp x3971 = x3969 - x3970;
            Fp x3972 = x3971 * x10;
            Fp x3973 = Fp(x3972.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x3973;
            Fp x3974 = x3972 - x3973;
            Fp x3975 = x3974 * x10;
            Fp x3976 = Fp(x3975.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x3976;
            Fp x3977 = x3975 - x3976;
            Fp x3978 = x3977 * x10;
            Fp x3979 = Fp(x3978.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x3979;
            Fp x3980 = x3978 - x3979;
            Fp x3981 = x3980 * x10;
            Fp x3982 = Fp(x3981.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x3982;
          }
          Fp x3983 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x3984 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x3985 = x3984 * x3;
          Fp x3986 = x3983 + x3985;
          Fp x3987 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x3988 = x3987 * x11;
          Fp x3989 = x3986 + x3988;
          Fp x3990 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x3991 = x3990 * x12;
          Fp x3992 = x3989 + x3991;
          Fp x3993 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x3994 = x3993 * x13;
          Fp x3995 = x3992 + x3994;
          Fp x3996 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x3997 = x3996 * x14;
          Fp x3998 = x3995 + x3997;
          Fp x3999 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x4000 = x3999 * x15;
          Fp x4001 = x3998 + x4000;
          Fp x4002 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x4003 = x4002 * x16;
          Fp x4004 = x4001 + x4003;
          Fp x4005 = x3960 - x4004;
          Fp x4006 = x4005 * x33;
          if (x4006 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:51");
          {
            Fp x4007 = Fp(x3987.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x4007;
            Fp x4008 = x3987 - x4007;
            Fp x4009 = x4008 * x26;
            Fp x4010 = Fp(x4009.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x4010;
          }
          Fp x4011 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x4012 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x4013 = x4012 * x1;
          Fp x4014 = x4011 + x4013;
          Fp x4015 = x3987 - x4014;
          Fp x4016 = x4015 * x10;
          if (x4016 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:51");
          Fp x4017 = x4011 * x11;
          Fp x4018 = x3986 + x4017;
          {
            Fp x4019 = (x4018 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x4019;
            Fp x4020 = x4018 - x71;
            Fp x4021 = (x4020 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x4021;
            Fp x4022 = x4018 - x1;
            Fp x4023 = (x4022 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x4023;
            Fp x4024 = x4018 - x2;
            Fp x4025 = (x4024 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x4025;
            Fp x4026 = x4018 - x3;
            Fp x4027 = (x4026 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x4027;
            Fp x4028 = x4018 - x4;
            Fp x4029 = (x4028 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x4029;
            Fp x4030 = x4018 - x5;
            Fp x4031 = (x4030 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x4031;
            Fp x4032 = x4018 - x0;
            Fp x4033 = (x4032 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x4033;
            Fp x4034 = x4018 - x6;
            Fp x4035 = (x4034 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x4035;
            Fp x4036 = x4018 - x7;
            Fp x4037 = (x4036 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x4037;
            Fp x4038 = x4018 - x8;
            Fp x4039 = (x4038 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x4039;
            Fp x4040 = x4018 - x9;
            Fp x4041 = (x4040 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x4041;
            Fp x4042 = x4018 - x38;
            Fp x4043 = (x4042 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x4043;
            Fp x4044 = x4018 - x42;
            Fp x4045 = (x4044 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x4045;
            Fp x4046 = x4018 - x44;
            Fp x4047 = (x4046 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x4047;
            Fp x4048 = x4018 - x45;
            Fp x4049 = (x4048 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x4049;
            Fp x4050 = x4018 - x11;
            Fp x4051 = (x4050 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x4051;
            Fp x4052 = x4018 - x46;
            Fp x4053 = (x4052 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x4053;
            Fp x4054 = x4018 - x47;
            Fp x4055 = (x4054 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x4055;
            Fp x4056 = x4018 - x48;
            Fp x4057 = (x4056 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x4057;
            Fp x4058 = x4018 - x49;
            Fp x4059 = (x4058 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x4059;
            Fp x4060 = x4018 - x50;
            Fp x4061 = (x4060 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x4061;
            Fp x4062 = x4018 - x51;
            Fp x4063 = (x4062 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x4063;
            Fp x4064 = x4018 - x52;
            Fp x4065 = (x4064 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x4065;
            Fp x4066 = x4018 - x39;
            Fp x4067 = (x4066 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x4067;
            Fp x4068 = x4018 - x41;
            Fp x4069 = (x4068 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x4069;
            Fp x4070 = x4018 - x53;
            Fp x4071 = (x4070 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x4071;
            Fp x4072 = x4018 - x40;
            Fp x4073 = (x4072 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x4073;
            Fp x4074 = x4018 - x43;
            Fp x4075 = (x4074 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x4075;
            Fp x4076 = x4018 - x54;
            Fp x4077 = (x4076 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x4077;
            Fp x4078 = x4018 - x55;
            Fp x4079 = (x4078 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x4079;
            Fp x4080 = x4018 - x56;
            Fp x4081 = (x4080 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x4081;
          }
          Fp x4082 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x4083 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x4084 = x4083 * x1;
          Fp x4085 = x4082 + x4084;
          Fp x4086 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x4087 = x4086 * x2;
          Fp x4088 = x4085 + x4087;
          Fp x4089 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x4090 = x4089 * x3;
          Fp x4091 = x4088 + x4090;
          Fp x4092 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x4093 = x4092 * x4;
          Fp x4094 = x4091 + x4093;
          Fp x4095 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x4096 = x4095 * x5;
          Fp x4097 = x4094 + x4096;
          Fp x4098 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x4099 = x4098 * x0;
          Fp x4100 = x4097 + x4099;
          Fp x4101 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x4102 = x4101 * x6;
          Fp x4103 = x4100 + x4102;
          Fp x4104 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x4105 = x4104 * x7;
          Fp x4106 = x4103 + x4105;
          Fp x4107 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x4108 = x4107 * x8;
          Fp x4109 = x4106 + x4108;
          Fp x4110 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x4111 = x4110 * x9;
          Fp x4112 = x4109 + x4111;
          Fp x4113 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x4114 = x4113 * x38;
          Fp x4115 = x4112 + x4114;
          Fp x4116 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x4117 = x4116 * x42;
          Fp x4118 = x4115 + x4117;
          Fp x4119 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x4120 = x4119 * x44;
          Fp x4121 = x4118 + x4120;
          Fp x4122 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x4123 = x4122 * x45;
          Fp x4124 = x4121 + x4123;
          Fp x4125 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x4126 = x4125 * x11;
          Fp x4127 = x4124 + x4126;
          Fp x4128 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x4129 = x4128 * x46;
          Fp x4130 = x4127 + x4129;
          Fp x4131 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x4132 = x4131 * x47;
          Fp x4133 = x4130 + x4132;
          Fp x4134 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x4135 = x4134 * x48;
          Fp x4136 = x4133 + x4135;
          Fp x4137 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x4138 = x4137 * x49;
          Fp x4139 = x4136 + x4138;
          Fp x4140 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x4141 = x4140 * x50;
          Fp x4142 = x4139 + x4141;
          Fp x4143 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x4144 = x4143 * x51;
          Fp x4145 = x4142 + x4144;
          Fp x4146 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x4147 = x4146 * x52;
          Fp x4148 = x4145 + x4147;
          Fp x4149 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x4150 = x4149 * x39;
          Fp x4151 = x4148 + x4150;
          Fp x4152 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x4153 = x4152 * x41;
          Fp x4154 = x4151 + x4153;
          Fp x4155 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x4156 = x4155 * x53;
          Fp x4157 = x4154 + x4156;
          Fp x4158 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x4159 = x4158 * x40;
          Fp x4160 = x4157 + x4159;
          Fp x4161 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x4162 = x4161 * x43;
          Fp x4163 = x4160 + x4162;
          Fp x4164 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x4165 = x4164 * x54;
          Fp x4166 = x4163 + x4165;
          Fp x4167 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x4168 = x4167 * x55;
          Fp x4169 = x4166 + x4168;
          Fp x4170 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x4171 = x4170 * x56;
          Fp x4172 = x4169 + x4171;
          Fp x4173 = x4172 - x4018;
          if (x4173 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x71;
        Fp x4174 = x1005 * x3;
        Fp x4175 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x4176 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x4177 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x4178 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x4179 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x4180 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x4174;
        host_args[2] = x1280;
        host_args[3] = x4175;
        host_args[4] = x4176;
        host_args[5] = x1239;
        host_args[6] = x4177;
        host_args[7] = x4178;
        host_args[8] = x4179;
        host_args[9] = x4180;
        host(ctx, "log", "C%u: pc: %08x Decode: SUB r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x4181 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x4182 = x4181 * x3732;
      if (x4182 != 0) {
        Fp x4183 = x1764 - x38;
        if (x4183 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:52");
        Fp x4184 = x1228 - x3;
        if (x4184 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:52");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:52");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x4185 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x4186 = Fp(x4185.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x4186;
            Fp x4187 = x4185 - x4186;
            Fp x4188 = x4187 * x10;
            Fp x4189 = Fp(x4188.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x4189;
            Fp x4190 = x4188 - x4189;
            Fp x4191 = x4190 * x10;
            Fp x4192 = Fp(x4191.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x4192;
            Fp x4193 = x4191 - x4192;
            Fp x4194 = x4193 * x10;
            Fp x4195 = Fp(x4194.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x4195;
            Fp x4196 = x4194 - x4195;
            Fp x4197 = x4196 * x10;
            Fp x4198 = Fp(x4197.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x4198;
            Fp x4199 = x4197 - x4198;
            Fp x4200 = x4199 * x10;
            Fp x4201 = Fp(x4200.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x4201;
            Fp x4202 = x4200 - x4201;
            Fp x4203 = x4202 * x10;
            Fp x4204 = Fp(x4203.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x4204;
            Fp x4205 = x4203 - x4204;
            Fp x4206 = x4205 * x10;
            Fp x4207 = Fp(x4206.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x4207;
          }
          Fp x4208 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x4209 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x4210 = x4209 * x3;
          Fp x4211 = x4208 + x4210;
          Fp x4212 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x4213 = x4212 * x11;
          Fp x4214 = x4211 + x4213;
          Fp x4215 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x4216 = x4215 * x12;
          Fp x4217 = x4214 + x4216;
          Fp x4218 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x4219 = x4218 * x13;
          Fp x4220 = x4217 + x4219;
          Fp x4221 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x4222 = x4221 * x14;
          Fp x4223 = x4220 + x4222;
          Fp x4224 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x4225 = x4224 * x15;
          Fp x4226 = x4223 + x4225;
          Fp x4227 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x4228 = x4227 * x16;
          Fp x4229 = x4226 + x4228;
          Fp x4230 = x4185 - x4229;
          Fp x4231 = x4230 * x33;
          if (x4231 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:52");
          {
            Fp x4232 = Fp(x4212.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x4232;
            Fp x4233 = x4212 - x4232;
            Fp x4234 = x4233 * x26;
            Fp x4235 = Fp(x4234.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x4235;
          }
          Fp x4236 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x4237 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x4238 = x4237 * x1;
          Fp x4239 = x4236 + x4238;
          Fp x4240 = x4212 - x4239;
          Fp x4241 = x4240 * x10;
          if (x4241 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:52");
          Fp x4242 = x4236 * x11;
          Fp x4243 = x4211 + x4242;
          {
            Fp x4244 = (x4243 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x4244;
            Fp x4245 = x4243 - x71;
            Fp x4246 = (x4245 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x4246;
            Fp x4247 = x4243 - x1;
            Fp x4248 = (x4247 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x4248;
            Fp x4249 = x4243 - x2;
            Fp x4250 = (x4249 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x4250;
            Fp x4251 = x4243 - x3;
            Fp x4252 = (x4251 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x4252;
            Fp x4253 = x4243 - x4;
            Fp x4254 = (x4253 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x4254;
            Fp x4255 = x4243 - x5;
            Fp x4256 = (x4255 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x4256;
            Fp x4257 = x4243 - x0;
            Fp x4258 = (x4257 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x4258;
            Fp x4259 = x4243 - x6;
            Fp x4260 = (x4259 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x4260;
            Fp x4261 = x4243 - x7;
            Fp x4262 = (x4261 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x4262;
            Fp x4263 = x4243 - x8;
            Fp x4264 = (x4263 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x4264;
            Fp x4265 = x4243 - x9;
            Fp x4266 = (x4265 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x4266;
            Fp x4267 = x4243 - x38;
            Fp x4268 = (x4267 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x4268;
            Fp x4269 = x4243 - x42;
            Fp x4270 = (x4269 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x4270;
            Fp x4271 = x4243 - x44;
            Fp x4272 = (x4271 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x4272;
            Fp x4273 = x4243 - x45;
            Fp x4274 = (x4273 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x4274;
            Fp x4275 = x4243 - x11;
            Fp x4276 = (x4275 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x4276;
            Fp x4277 = x4243 - x46;
            Fp x4278 = (x4277 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x4278;
            Fp x4279 = x4243 - x47;
            Fp x4280 = (x4279 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x4280;
            Fp x4281 = x4243 - x48;
            Fp x4282 = (x4281 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x4282;
            Fp x4283 = x4243 - x49;
            Fp x4284 = (x4283 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x4284;
            Fp x4285 = x4243 - x50;
            Fp x4286 = (x4285 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x4286;
            Fp x4287 = x4243 - x51;
            Fp x4288 = (x4287 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x4288;
            Fp x4289 = x4243 - x52;
            Fp x4290 = (x4289 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x4290;
            Fp x4291 = x4243 - x39;
            Fp x4292 = (x4291 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x4292;
            Fp x4293 = x4243 - x41;
            Fp x4294 = (x4293 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x4294;
            Fp x4295 = x4243 - x53;
            Fp x4296 = (x4295 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x4296;
            Fp x4297 = x4243 - x40;
            Fp x4298 = (x4297 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x4298;
            Fp x4299 = x4243 - x43;
            Fp x4300 = (x4299 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x4300;
            Fp x4301 = x4243 - x54;
            Fp x4302 = (x4301 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x4302;
            Fp x4303 = x4243 - x55;
            Fp x4304 = (x4303 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x4304;
            Fp x4305 = x4243 - x56;
            Fp x4306 = (x4305 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x4306;
          }
          Fp x4307 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x4308 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x4309 = x4308 * x1;
          Fp x4310 = x4307 + x4309;
          Fp x4311 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x4312 = x4311 * x2;
          Fp x4313 = x4310 + x4312;
          Fp x4314 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x4315 = x4314 * x3;
          Fp x4316 = x4313 + x4315;
          Fp x4317 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x4318 = x4317 * x4;
          Fp x4319 = x4316 + x4318;
          Fp x4320 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x4321 = x4320 * x5;
          Fp x4322 = x4319 + x4321;
          Fp x4323 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x4324 = x4323 * x0;
          Fp x4325 = x4322 + x4324;
          Fp x4326 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x4327 = x4326 * x6;
          Fp x4328 = x4325 + x4327;
          Fp x4329 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x4330 = x4329 * x7;
          Fp x4331 = x4328 + x4330;
          Fp x4332 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x4333 = x4332 * x8;
          Fp x4334 = x4331 + x4333;
          Fp x4335 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x4336 = x4335 * x9;
          Fp x4337 = x4334 + x4336;
          Fp x4338 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x4339 = x4338 * x38;
          Fp x4340 = x4337 + x4339;
          Fp x4341 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x4342 = x4341 * x42;
          Fp x4343 = x4340 + x4342;
          Fp x4344 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x4345 = x4344 * x44;
          Fp x4346 = x4343 + x4345;
          Fp x4347 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x4348 = x4347 * x45;
          Fp x4349 = x4346 + x4348;
          Fp x4350 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x4351 = x4350 * x11;
          Fp x4352 = x4349 + x4351;
          Fp x4353 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x4354 = x4353 * x46;
          Fp x4355 = x4352 + x4354;
          Fp x4356 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x4357 = x4356 * x47;
          Fp x4358 = x4355 + x4357;
          Fp x4359 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x4360 = x4359 * x48;
          Fp x4361 = x4358 + x4360;
          Fp x4362 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x4363 = x4362 * x49;
          Fp x4364 = x4361 + x4363;
          Fp x4365 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x4366 = x4365 * x50;
          Fp x4367 = x4364 + x4366;
          Fp x4368 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x4369 = x4368 * x51;
          Fp x4370 = x4367 + x4369;
          Fp x4371 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x4372 = x4371 * x52;
          Fp x4373 = x4370 + x4372;
          Fp x4374 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x4375 = x4374 * x39;
          Fp x4376 = x4373 + x4375;
          Fp x4377 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x4378 = x4377 * x41;
          Fp x4379 = x4376 + x4378;
          Fp x4380 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x4381 = x4380 * x53;
          Fp x4382 = x4379 + x4381;
          Fp x4383 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x4384 = x4383 * x40;
          Fp x4385 = x4382 + x4384;
          Fp x4386 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x4387 = x4386 * x43;
          Fp x4388 = x4385 + x4387;
          Fp x4389 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x4390 = x4389 * x54;
          Fp x4391 = x4388 + x4390;
          Fp x4392 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x4393 = x4392 * x55;
          Fp x4394 = x4391 + x4393;
          Fp x4395 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x4396 = x4395 * x56;
          Fp x4397 = x4394 + x4396;
          Fp x4398 = x4397 - x4243;
          if (x4398 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x71;
        Fp x4399 = x1005 * x3;
        Fp x4400 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x4401 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x4402 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x4403 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x4404 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x4405 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x4399;
        host_args[2] = x1280;
        host_args[3] = x4400;
        host_args[4] = x4401;
        host_args[5] = x1239;
        host_args[6] = x4402;
        host_args[7] = x4403;
        host_args[8] = x4404;
        host_args[9] = x4405;
        host(ctx, "log", "C%u: pc: %08x Decode: XOR r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x4406 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x4407 = x4406 * x3732;
      if (x4407 != 0) {
        Fp x4408 = x1764 - x38;
        if (x4408 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:53");
        Fp x4409 = x1228 - x5;
        if (x4409 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:53");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:53");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x4410 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x4411 = Fp(x4410.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x4411;
            Fp x4412 = x4410 - x4411;
            Fp x4413 = x4412 * x10;
            Fp x4414 = Fp(x4413.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x4414;
            Fp x4415 = x4413 - x4414;
            Fp x4416 = x4415 * x10;
            Fp x4417 = Fp(x4416.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x4417;
            Fp x4418 = x4416 - x4417;
            Fp x4419 = x4418 * x10;
            Fp x4420 = Fp(x4419.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x4420;
            Fp x4421 = x4419 - x4420;
            Fp x4422 = x4421 * x10;
            Fp x4423 = Fp(x4422.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x4423;
            Fp x4424 = x4422 - x4423;
            Fp x4425 = x4424 * x10;
            Fp x4426 = Fp(x4425.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x4426;
            Fp x4427 = x4425 - x4426;
            Fp x4428 = x4427 * x10;
            Fp x4429 = Fp(x4428.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x4429;
            Fp x4430 = x4428 - x4429;
            Fp x4431 = x4430 * x10;
            Fp x4432 = Fp(x4431.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x4432;
          }
          Fp x4433 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x4434 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x4435 = x4434 * x3;
          Fp x4436 = x4433 + x4435;
          Fp x4437 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x4438 = x4437 * x11;
          Fp x4439 = x4436 + x4438;
          Fp x4440 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x4441 = x4440 * x12;
          Fp x4442 = x4439 + x4441;
          Fp x4443 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x4444 = x4443 * x13;
          Fp x4445 = x4442 + x4444;
          Fp x4446 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x4447 = x4446 * x14;
          Fp x4448 = x4445 + x4447;
          Fp x4449 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x4450 = x4449 * x15;
          Fp x4451 = x4448 + x4450;
          Fp x4452 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x4453 = x4452 * x16;
          Fp x4454 = x4451 + x4453;
          Fp x4455 = x4410 - x4454;
          Fp x4456 = x4455 * x33;
          if (x4456 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:53");
          {
            Fp x4457 = Fp(x4437.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x4457;
            Fp x4458 = x4437 - x4457;
            Fp x4459 = x4458 * x26;
            Fp x4460 = Fp(x4459.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x4460;
          }
          Fp x4461 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x4462 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x4463 = x4462 * x1;
          Fp x4464 = x4461 + x4463;
          Fp x4465 = x4437 - x4464;
          Fp x4466 = x4465 * x10;
          if (x4466 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:53");
          Fp x4467 = x4461 * x11;
          Fp x4468 = x4436 + x4467;
          {
            Fp x4469 = (x4468 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x4469;
            Fp x4470 = x4468 - x71;
            Fp x4471 = (x4470 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x4471;
            Fp x4472 = x4468 - x1;
            Fp x4473 = (x4472 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x4473;
            Fp x4474 = x4468 - x2;
            Fp x4475 = (x4474 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x4475;
            Fp x4476 = x4468 - x3;
            Fp x4477 = (x4476 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x4477;
            Fp x4478 = x4468 - x4;
            Fp x4479 = (x4478 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x4479;
            Fp x4480 = x4468 - x5;
            Fp x4481 = (x4480 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x4481;
            Fp x4482 = x4468 - x0;
            Fp x4483 = (x4482 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x4483;
            Fp x4484 = x4468 - x6;
            Fp x4485 = (x4484 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x4485;
            Fp x4486 = x4468 - x7;
            Fp x4487 = (x4486 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x4487;
            Fp x4488 = x4468 - x8;
            Fp x4489 = (x4488 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x4489;
            Fp x4490 = x4468 - x9;
            Fp x4491 = (x4490 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x4491;
            Fp x4492 = x4468 - x38;
            Fp x4493 = (x4492 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x4493;
            Fp x4494 = x4468 - x42;
            Fp x4495 = (x4494 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x4495;
            Fp x4496 = x4468 - x44;
            Fp x4497 = (x4496 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x4497;
            Fp x4498 = x4468 - x45;
            Fp x4499 = (x4498 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x4499;
            Fp x4500 = x4468 - x11;
            Fp x4501 = (x4500 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x4501;
            Fp x4502 = x4468 - x46;
            Fp x4503 = (x4502 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x4503;
            Fp x4504 = x4468 - x47;
            Fp x4505 = (x4504 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x4505;
            Fp x4506 = x4468 - x48;
            Fp x4507 = (x4506 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x4507;
            Fp x4508 = x4468 - x49;
            Fp x4509 = (x4508 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x4509;
            Fp x4510 = x4468 - x50;
            Fp x4511 = (x4510 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x4511;
            Fp x4512 = x4468 - x51;
            Fp x4513 = (x4512 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x4513;
            Fp x4514 = x4468 - x52;
            Fp x4515 = (x4514 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x4515;
            Fp x4516 = x4468 - x39;
            Fp x4517 = (x4516 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x4517;
            Fp x4518 = x4468 - x41;
            Fp x4519 = (x4518 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x4519;
            Fp x4520 = x4468 - x53;
            Fp x4521 = (x4520 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x4521;
            Fp x4522 = x4468 - x40;
            Fp x4523 = (x4522 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x4523;
            Fp x4524 = x4468 - x43;
            Fp x4525 = (x4524 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x4525;
            Fp x4526 = x4468 - x54;
            Fp x4527 = (x4526 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x4527;
            Fp x4528 = x4468 - x55;
            Fp x4529 = (x4528 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x4529;
            Fp x4530 = x4468 - x56;
            Fp x4531 = (x4530 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x4531;
          }
          Fp x4532 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x4533 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x4534 = x4533 * x1;
          Fp x4535 = x4532 + x4534;
          Fp x4536 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x4537 = x4536 * x2;
          Fp x4538 = x4535 + x4537;
          Fp x4539 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x4540 = x4539 * x3;
          Fp x4541 = x4538 + x4540;
          Fp x4542 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x4543 = x4542 * x4;
          Fp x4544 = x4541 + x4543;
          Fp x4545 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x4546 = x4545 * x5;
          Fp x4547 = x4544 + x4546;
          Fp x4548 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x4549 = x4548 * x0;
          Fp x4550 = x4547 + x4549;
          Fp x4551 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x4552 = x4551 * x6;
          Fp x4553 = x4550 + x4552;
          Fp x4554 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x4555 = x4554 * x7;
          Fp x4556 = x4553 + x4555;
          Fp x4557 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x4558 = x4557 * x8;
          Fp x4559 = x4556 + x4558;
          Fp x4560 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x4561 = x4560 * x9;
          Fp x4562 = x4559 + x4561;
          Fp x4563 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x4564 = x4563 * x38;
          Fp x4565 = x4562 + x4564;
          Fp x4566 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x4567 = x4566 * x42;
          Fp x4568 = x4565 + x4567;
          Fp x4569 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x4570 = x4569 * x44;
          Fp x4571 = x4568 + x4570;
          Fp x4572 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x4573 = x4572 * x45;
          Fp x4574 = x4571 + x4573;
          Fp x4575 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x4576 = x4575 * x11;
          Fp x4577 = x4574 + x4576;
          Fp x4578 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x4579 = x4578 * x46;
          Fp x4580 = x4577 + x4579;
          Fp x4581 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x4582 = x4581 * x47;
          Fp x4583 = x4580 + x4582;
          Fp x4584 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x4585 = x4584 * x48;
          Fp x4586 = x4583 + x4585;
          Fp x4587 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x4588 = x4587 * x49;
          Fp x4589 = x4586 + x4588;
          Fp x4590 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x4591 = x4590 * x50;
          Fp x4592 = x4589 + x4591;
          Fp x4593 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x4594 = x4593 * x51;
          Fp x4595 = x4592 + x4594;
          Fp x4596 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x4597 = x4596 * x52;
          Fp x4598 = x4595 + x4597;
          Fp x4599 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x4600 = x4599 * x39;
          Fp x4601 = x4598 + x4600;
          Fp x4602 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x4603 = x4602 * x41;
          Fp x4604 = x4601 + x4603;
          Fp x4605 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x4606 = x4605 * x53;
          Fp x4607 = x4604 + x4606;
          Fp x4608 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x4609 = x4608 * x40;
          Fp x4610 = x4607 + x4609;
          Fp x4611 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x4612 = x4611 * x43;
          Fp x4613 = x4610 + x4612;
          Fp x4614 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x4615 = x4614 * x54;
          Fp x4616 = x4613 + x4615;
          Fp x4617 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x4618 = x4617 * x55;
          Fp x4619 = x4616 + x4618;
          Fp x4620 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x4621 = x4620 * x56;
          Fp x4622 = x4619 + x4621;
          Fp x4623 = x4622 - x4468;
          if (x4623 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x71;
        Fp x4624 = x1005 * x3;
        Fp x4625 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x4626 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x4627 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x4628 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x4629 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x4630 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x4624;
        host_args[2] = x1280;
        host_args[3] = x4625;
        host_args[4] = x4626;
        host_args[5] = x1239;
        host_args[6] = x4627;
        host_args[7] = x4628;
        host_args[8] = x4629;
        host_args[9] = x4630;
        host(ctx, "log", "C%u: pc: %08x Decode: OR r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x4631 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x4632 = x4631 * x3732;
      if (x4632 != 0) {
        Fp x4633 = x1764 - x38;
        if (x4633 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:54");
        Fp x4634 = x1228 - x0;
        if (x4634 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:54");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:54");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x4635 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x4636 = Fp(x4635.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x4636;
            Fp x4637 = x4635 - x4636;
            Fp x4638 = x4637 * x10;
            Fp x4639 = Fp(x4638.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x4639;
            Fp x4640 = x4638 - x4639;
            Fp x4641 = x4640 * x10;
            Fp x4642 = Fp(x4641.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x4642;
            Fp x4643 = x4641 - x4642;
            Fp x4644 = x4643 * x10;
            Fp x4645 = Fp(x4644.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x4645;
            Fp x4646 = x4644 - x4645;
            Fp x4647 = x4646 * x10;
            Fp x4648 = Fp(x4647.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x4648;
            Fp x4649 = x4647 - x4648;
            Fp x4650 = x4649 * x10;
            Fp x4651 = Fp(x4650.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x4651;
            Fp x4652 = x4650 - x4651;
            Fp x4653 = x4652 * x10;
            Fp x4654 = Fp(x4653.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x4654;
            Fp x4655 = x4653 - x4654;
            Fp x4656 = x4655 * x10;
            Fp x4657 = Fp(x4656.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x4657;
          }
          Fp x4658 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x4659 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x4660 = x4659 * x3;
          Fp x4661 = x4658 + x4660;
          Fp x4662 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x4663 = x4662 * x11;
          Fp x4664 = x4661 + x4663;
          Fp x4665 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x4666 = x4665 * x12;
          Fp x4667 = x4664 + x4666;
          Fp x4668 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x4669 = x4668 * x13;
          Fp x4670 = x4667 + x4669;
          Fp x4671 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x4672 = x4671 * x14;
          Fp x4673 = x4670 + x4672;
          Fp x4674 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x4675 = x4674 * x15;
          Fp x4676 = x4673 + x4675;
          Fp x4677 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x4678 = x4677 * x16;
          Fp x4679 = x4676 + x4678;
          Fp x4680 = x4635 - x4679;
          Fp x4681 = x4680 * x33;
          if (x4681 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:54");
          {
            Fp x4682 = Fp(x4662.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x4682;
            Fp x4683 = x4662 - x4682;
            Fp x4684 = x4683 * x26;
            Fp x4685 = Fp(x4684.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x4685;
          }
          Fp x4686 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x4687 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x4688 = x4687 * x1;
          Fp x4689 = x4686 + x4688;
          Fp x4690 = x4662 - x4689;
          Fp x4691 = x4690 * x10;
          if (x4691 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:54");
          Fp x4692 = x4686 * x11;
          Fp x4693 = x4661 + x4692;
          {
            Fp x4694 = (x4693 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x4694;
            Fp x4695 = x4693 - x71;
            Fp x4696 = (x4695 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x4696;
            Fp x4697 = x4693 - x1;
            Fp x4698 = (x4697 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x4698;
            Fp x4699 = x4693 - x2;
            Fp x4700 = (x4699 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x4700;
            Fp x4701 = x4693 - x3;
            Fp x4702 = (x4701 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x4702;
            Fp x4703 = x4693 - x4;
            Fp x4704 = (x4703 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x4704;
            Fp x4705 = x4693 - x5;
            Fp x4706 = (x4705 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x4706;
            Fp x4707 = x4693 - x0;
            Fp x4708 = (x4707 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x4708;
            Fp x4709 = x4693 - x6;
            Fp x4710 = (x4709 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x4710;
            Fp x4711 = x4693 - x7;
            Fp x4712 = (x4711 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x4712;
            Fp x4713 = x4693 - x8;
            Fp x4714 = (x4713 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x4714;
            Fp x4715 = x4693 - x9;
            Fp x4716 = (x4715 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x4716;
            Fp x4717 = x4693 - x38;
            Fp x4718 = (x4717 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x4718;
            Fp x4719 = x4693 - x42;
            Fp x4720 = (x4719 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x4720;
            Fp x4721 = x4693 - x44;
            Fp x4722 = (x4721 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x4722;
            Fp x4723 = x4693 - x45;
            Fp x4724 = (x4723 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x4724;
            Fp x4725 = x4693 - x11;
            Fp x4726 = (x4725 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x4726;
            Fp x4727 = x4693 - x46;
            Fp x4728 = (x4727 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x4728;
            Fp x4729 = x4693 - x47;
            Fp x4730 = (x4729 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x4730;
            Fp x4731 = x4693 - x48;
            Fp x4732 = (x4731 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x4732;
            Fp x4733 = x4693 - x49;
            Fp x4734 = (x4733 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x4734;
            Fp x4735 = x4693 - x50;
            Fp x4736 = (x4735 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x4736;
            Fp x4737 = x4693 - x51;
            Fp x4738 = (x4737 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x4738;
            Fp x4739 = x4693 - x52;
            Fp x4740 = (x4739 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x4740;
            Fp x4741 = x4693 - x39;
            Fp x4742 = (x4741 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x4742;
            Fp x4743 = x4693 - x41;
            Fp x4744 = (x4743 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x4744;
            Fp x4745 = x4693 - x53;
            Fp x4746 = (x4745 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x4746;
            Fp x4747 = x4693 - x40;
            Fp x4748 = (x4747 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x4748;
            Fp x4749 = x4693 - x43;
            Fp x4750 = (x4749 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x4750;
            Fp x4751 = x4693 - x54;
            Fp x4752 = (x4751 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x4752;
            Fp x4753 = x4693 - x55;
            Fp x4754 = (x4753 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x4754;
            Fp x4755 = x4693 - x56;
            Fp x4756 = (x4755 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x4756;
          }
          Fp x4757 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x4758 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x4759 = x4758 * x1;
          Fp x4760 = x4757 + x4759;
          Fp x4761 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x4762 = x4761 * x2;
          Fp x4763 = x4760 + x4762;
          Fp x4764 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x4765 = x4764 * x3;
          Fp x4766 = x4763 + x4765;
          Fp x4767 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x4768 = x4767 * x4;
          Fp x4769 = x4766 + x4768;
          Fp x4770 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x4771 = x4770 * x5;
          Fp x4772 = x4769 + x4771;
          Fp x4773 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x4774 = x4773 * x0;
          Fp x4775 = x4772 + x4774;
          Fp x4776 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x4777 = x4776 * x6;
          Fp x4778 = x4775 + x4777;
          Fp x4779 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x4780 = x4779 * x7;
          Fp x4781 = x4778 + x4780;
          Fp x4782 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x4783 = x4782 * x8;
          Fp x4784 = x4781 + x4783;
          Fp x4785 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x4786 = x4785 * x9;
          Fp x4787 = x4784 + x4786;
          Fp x4788 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x4789 = x4788 * x38;
          Fp x4790 = x4787 + x4789;
          Fp x4791 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x4792 = x4791 * x42;
          Fp x4793 = x4790 + x4792;
          Fp x4794 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x4795 = x4794 * x44;
          Fp x4796 = x4793 + x4795;
          Fp x4797 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x4798 = x4797 * x45;
          Fp x4799 = x4796 + x4798;
          Fp x4800 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x4801 = x4800 * x11;
          Fp x4802 = x4799 + x4801;
          Fp x4803 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x4804 = x4803 * x46;
          Fp x4805 = x4802 + x4804;
          Fp x4806 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x4807 = x4806 * x47;
          Fp x4808 = x4805 + x4807;
          Fp x4809 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x4810 = x4809 * x48;
          Fp x4811 = x4808 + x4810;
          Fp x4812 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x4813 = x4812 * x49;
          Fp x4814 = x4811 + x4813;
          Fp x4815 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x4816 = x4815 * x50;
          Fp x4817 = x4814 + x4816;
          Fp x4818 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x4819 = x4818 * x51;
          Fp x4820 = x4817 + x4819;
          Fp x4821 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x4822 = x4821 * x52;
          Fp x4823 = x4820 + x4822;
          Fp x4824 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x4825 = x4824 * x39;
          Fp x4826 = x4823 + x4825;
          Fp x4827 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x4828 = x4827 * x41;
          Fp x4829 = x4826 + x4828;
          Fp x4830 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x4831 = x4830 * x53;
          Fp x4832 = x4829 + x4831;
          Fp x4833 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x4834 = x4833 * x40;
          Fp x4835 = x4832 + x4834;
          Fp x4836 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x4837 = x4836 * x43;
          Fp x4838 = x4835 + x4837;
          Fp x4839 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x4840 = x4839 * x54;
          Fp x4841 = x4838 + x4840;
          Fp x4842 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x4843 = x4842 * x55;
          Fp x4844 = x4841 + x4843;
          Fp x4845 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x4846 = x4845 * x56;
          Fp x4847 = x4844 + x4846;
          Fp x4848 = x4847 - x4693;
          if (x4848 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x71;
        Fp x4849 = x1005 * x3;
        Fp x4850 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x4851 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x4852 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x4853 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x4854 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x4855 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x4849;
        host_args[2] = x1280;
        host_args[3] = x4850;
        host_args[4] = x4851;
        host_args[5] = x1239;
        host_args[6] = x4852;
        host_args[7] = x4853;
        host_args[8] = x4854;
        host_args[9] = x4855;
        host(ctx, "log", "C%u: pc: %08x Decode: AND r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x4856 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x4857 = x4856 * x3732;
      if (x4857 != 0) {
        Fp x4858 = x1764 - x38;
        if (x4858 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:55");
        Fp x4859 = x1228 - x1;
        if (x4859 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:55");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:55");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x4860 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x4861 = Fp(x4860.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x4861;
            Fp x4862 = x4860 - x4861;
            Fp x4863 = x4862 * x10;
            Fp x4864 = Fp(x4863.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x4864;
            Fp x4865 = x4863 - x4864;
            Fp x4866 = x4865 * x10;
            Fp x4867 = Fp(x4866.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x4867;
            Fp x4868 = x4866 - x4867;
            Fp x4869 = x4868 * x10;
            Fp x4870 = Fp(x4869.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x4870;
            Fp x4871 = x4869 - x4870;
            Fp x4872 = x4871 * x10;
            Fp x4873 = Fp(x4872.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x4873;
            Fp x4874 = x4872 - x4873;
            Fp x4875 = x4874 * x10;
            Fp x4876 = Fp(x4875.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x4876;
            Fp x4877 = x4875 - x4876;
            Fp x4878 = x4877 * x10;
            Fp x4879 = Fp(x4878.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x4879;
            Fp x4880 = x4878 - x4879;
            Fp x4881 = x4880 * x10;
            Fp x4882 = Fp(x4881.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x4882;
          }
          Fp x4883 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x4884 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x4885 = x4884 * x3;
          Fp x4886 = x4883 + x4885;
          Fp x4887 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x4888 = x4887 * x11;
          Fp x4889 = x4886 + x4888;
          Fp x4890 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x4891 = x4890 * x12;
          Fp x4892 = x4889 + x4891;
          Fp x4893 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x4894 = x4893 * x13;
          Fp x4895 = x4892 + x4894;
          Fp x4896 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x4897 = x4896 * x14;
          Fp x4898 = x4895 + x4897;
          Fp x4899 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x4900 = x4899 * x15;
          Fp x4901 = x4898 + x4900;
          Fp x4902 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x4903 = x4902 * x16;
          Fp x4904 = x4901 + x4903;
          Fp x4905 = x4860 - x4904;
          Fp x4906 = x4905 * x33;
          if (x4906 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:55");
          {
            Fp x4907 = Fp(x4887.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x4907;
            Fp x4908 = x4887 - x4907;
            Fp x4909 = x4908 * x26;
            Fp x4910 = Fp(x4909.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x4910;
          }
          Fp x4911 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x4912 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x4913 = x4912 * x1;
          Fp x4914 = x4911 + x4913;
          Fp x4915 = x4887 - x4914;
          Fp x4916 = x4915 * x10;
          if (x4916 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:55");
          Fp x4917 = x4911 * x11;
          Fp x4918 = x4886 + x4917;
          {
            Fp x4919 = (x4918 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x4919;
            Fp x4920 = x4918 - x71;
            Fp x4921 = (x4920 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x4921;
            Fp x4922 = x4918 - x1;
            Fp x4923 = (x4922 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x4923;
            Fp x4924 = x4918 - x2;
            Fp x4925 = (x4924 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x4925;
            Fp x4926 = x4918 - x3;
            Fp x4927 = (x4926 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x4927;
            Fp x4928 = x4918 - x4;
            Fp x4929 = (x4928 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x4929;
            Fp x4930 = x4918 - x5;
            Fp x4931 = (x4930 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x4931;
            Fp x4932 = x4918 - x0;
            Fp x4933 = (x4932 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x4933;
            Fp x4934 = x4918 - x6;
            Fp x4935 = (x4934 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x4935;
            Fp x4936 = x4918 - x7;
            Fp x4937 = (x4936 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x4937;
            Fp x4938 = x4918 - x8;
            Fp x4939 = (x4938 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x4939;
            Fp x4940 = x4918 - x9;
            Fp x4941 = (x4940 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x4941;
            Fp x4942 = x4918 - x38;
            Fp x4943 = (x4942 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x4943;
            Fp x4944 = x4918 - x42;
            Fp x4945 = (x4944 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x4945;
            Fp x4946 = x4918 - x44;
            Fp x4947 = (x4946 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x4947;
            Fp x4948 = x4918 - x45;
            Fp x4949 = (x4948 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x4949;
            Fp x4950 = x4918 - x11;
            Fp x4951 = (x4950 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x4951;
            Fp x4952 = x4918 - x46;
            Fp x4953 = (x4952 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x4953;
            Fp x4954 = x4918 - x47;
            Fp x4955 = (x4954 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x4955;
            Fp x4956 = x4918 - x48;
            Fp x4957 = (x4956 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x4957;
            Fp x4958 = x4918 - x49;
            Fp x4959 = (x4958 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x4959;
            Fp x4960 = x4918 - x50;
            Fp x4961 = (x4960 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x4961;
            Fp x4962 = x4918 - x51;
            Fp x4963 = (x4962 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x4963;
            Fp x4964 = x4918 - x52;
            Fp x4965 = (x4964 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x4965;
            Fp x4966 = x4918 - x39;
            Fp x4967 = (x4966 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x4967;
            Fp x4968 = x4918 - x41;
            Fp x4969 = (x4968 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x4969;
            Fp x4970 = x4918 - x53;
            Fp x4971 = (x4970 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x4971;
            Fp x4972 = x4918 - x40;
            Fp x4973 = (x4972 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x4973;
            Fp x4974 = x4918 - x43;
            Fp x4975 = (x4974 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x4975;
            Fp x4976 = x4918 - x54;
            Fp x4977 = (x4976 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x4977;
            Fp x4978 = x4918 - x55;
            Fp x4979 = (x4978 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x4979;
            Fp x4980 = x4918 - x56;
            Fp x4981 = (x4980 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x4981;
          }
          Fp x4982 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x4983 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x4984 = x4983 * x1;
          Fp x4985 = x4982 + x4984;
          Fp x4986 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x4987 = x4986 * x2;
          Fp x4988 = x4985 + x4987;
          Fp x4989 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x4990 = x4989 * x3;
          Fp x4991 = x4988 + x4990;
          Fp x4992 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x4993 = x4992 * x4;
          Fp x4994 = x4991 + x4993;
          Fp x4995 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x4996 = x4995 * x5;
          Fp x4997 = x4994 + x4996;
          Fp x4998 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x4999 = x4998 * x0;
          Fp x5000 = x4997 + x4999;
          Fp x5001 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x5002 = x5001 * x6;
          Fp x5003 = x5000 + x5002;
          Fp x5004 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x5005 = x5004 * x7;
          Fp x5006 = x5003 + x5005;
          Fp x5007 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x5008 = x5007 * x8;
          Fp x5009 = x5006 + x5008;
          Fp x5010 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x5011 = x5010 * x9;
          Fp x5012 = x5009 + x5011;
          Fp x5013 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x5014 = x5013 * x38;
          Fp x5015 = x5012 + x5014;
          Fp x5016 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x5017 = x5016 * x42;
          Fp x5018 = x5015 + x5017;
          Fp x5019 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x5020 = x5019 * x44;
          Fp x5021 = x5018 + x5020;
          Fp x5022 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x5023 = x5022 * x45;
          Fp x5024 = x5021 + x5023;
          Fp x5025 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x5026 = x5025 * x11;
          Fp x5027 = x5024 + x5026;
          Fp x5028 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x5029 = x5028 * x46;
          Fp x5030 = x5027 + x5029;
          Fp x5031 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x5032 = x5031 * x47;
          Fp x5033 = x5030 + x5032;
          Fp x5034 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x5035 = x5034 * x48;
          Fp x5036 = x5033 + x5035;
          Fp x5037 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x5038 = x5037 * x49;
          Fp x5039 = x5036 + x5038;
          Fp x5040 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x5041 = x5040 * x50;
          Fp x5042 = x5039 + x5041;
          Fp x5043 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x5044 = x5043 * x51;
          Fp x5045 = x5042 + x5044;
          Fp x5046 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x5047 = x5046 * x52;
          Fp x5048 = x5045 + x5047;
          Fp x5049 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x5050 = x5049 * x39;
          Fp x5051 = x5048 + x5050;
          Fp x5052 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x5053 = x5052 * x41;
          Fp x5054 = x5051 + x5053;
          Fp x5055 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x5056 = x5055 * x53;
          Fp x5057 = x5054 + x5056;
          Fp x5058 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x5059 = x5058 * x40;
          Fp x5060 = x5057 + x5059;
          Fp x5061 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x5062 = x5061 * x43;
          Fp x5063 = x5060 + x5062;
          Fp x5064 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x5065 = x5064 * x54;
          Fp x5066 = x5063 + x5065;
          Fp x5067 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x5068 = x5067 * x55;
          Fp x5069 = x5066 + x5068;
          Fp x5070 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x5071 = x5070 * x56;
          Fp x5072 = x5069 + x5071;
          Fp x5073 = x5072 - x4918;
          if (x5073 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x71;
        Fp x5074 = x1005 * x3;
        Fp x5075 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x5076 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x5077 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x5078 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x5079 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x5080 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x5074;
        host_args[2] = x1280;
        host_args[3] = x5075;
        host_args[4] = x5076;
        host_args[5] = x1239;
        host_args[6] = x5077;
        host_args[7] = x5078;
        host_args[8] = x5079;
        host_args[9] = x5080;
        host(ctx, "log", "C%u: pc: %08x Decode: SLT r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x5081 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x5082 = x5081 * x3732;
      if (x5082 != 0) {
        Fp x5083 = x1764 - x38;
        if (x5083 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:56");
        Fp x5084 = x1228 - x2;
        if (x5084 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:56");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:56");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x5085 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x5086 = Fp(x5085.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x5086;
            Fp x5087 = x5085 - x5086;
            Fp x5088 = x5087 * x10;
            Fp x5089 = Fp(x5088.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x5089;
            Fp x5090 = x5088 - x5089;
            Fp x5091 = x5090 * x10;
            Fp x5092 = Fp(x5091.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x5092;
            Fp x5093 = x5091 - x5092;
            Fp x5094 = x5093 * x10;
            Fp x5095 = Fp(x5094.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x5095;
            Fp x5096 = x5094 - x5095;
            Fp x5097 = x5096 * x10;
            Fp x5098 = Fp(x5097.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x5098;
            Fp x5099 = x5097 - x5098;
            Fp x5100 = x5099 * x10;
            Fp x5101 = Fp(x5100.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x5101;
            Fp x5102 = x5100 - x5101;
            Fp x5103 = x5102 * x10;
            Fp x5104 = Fp(x5103.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x5104;
            Fp x5105 = x5103 - x5104;
            Fp x5106 = x5105 * x10;
            Fp x5107 = Fp(x5106.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x5107;
          }
          Fp x5108 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x5109 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x5110 = x5109 * x3;
          Fp x5111 = x5108 + x5110;
          Fp x5112 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x5113 = x5112 * x11;
          Fp x5114 = x5111 + x5113;
          Fp x5115 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x5116 = x5115 * x12;
          Fp x5117 = x5114 + x5116;
          Fp x5118 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x5119 = x5118 * x13;
          Fp x5120 = x5117 + x5119;
          Fp x5121 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x5122 = x5121 * x14;
          Fp x5123 = x5120 + x5122;
          Fp x5124 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x5125 = x5124 * x15;
          Fp x5126 = x5123 + x5125;
          Fp x5127 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x5128 = x5127 * x16;
          Fp x5129 = x5126 + x5128;
          Fp x5130 = x5085 - x5129;
          Fp x5131 = x5130 * x33;
          if (x5131 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:56");
          {
            Fp x5132 = Fp(x5112.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x5132;
            Fp x5133 = x5112 - x5132;
            Fp x5134 = x5133 * x26;
            Fp x5135 = Fp(x5134.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x5135;
          }
          Fp x5136 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x5137 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x5138 = x5137 * x1;
          Fp x5139 = x5136 + x5138;
          Fp x5140 = x5112 - x5139;
          Fp x5141 = x5140 * x10;
          if (x5141 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:56");
          Fp x5142 = x5136 * x11;
          Fp x5143 = x5111 + x5142;
          {
            Fp x5144 = (x5143 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x5144;
            Fp x5145 = x5143 - x71;
            Fp x5146 = (x5145 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x5146;
            Fp x5147 = x5143 - x1;
            Fp x5148 = (x5147 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x5148;
            Fp x5149 = x5143 - x2;
            Fp x5150 = (x5149 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x5150;
            Fp x5151 = x5143 - x3;
            Fp x5152 = (x5151 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x5152;
            Fp x5153 = x5143 - x4;
            Fp x5154 = (x5153 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x5154;
            Fp x5155 = x5143 - x5;
            Fp x5156 = (x5155 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x5156;
            Fp x5157 = x5143 - x0;
            Fp x5158 = (x5157 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x5158;
            Fp x5159 = x5143 - x6;
            Fp x5160 = (x5159 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x5160;
            Fp x5161 = x5143 - x7;
            Fp x5162 = (x5161 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x5162;
            Fp x5163 = x5143 - x8;
            Fp x5164 = (x5163 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x5164;
            Fp x5165 = x5143 - x9;
            Fp x5166 = (x5165 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x5166;
            Fp x5167 = x5143 - x38;
            Fp x5168 = (x5167 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x5168;
            Fp x5169 = x5143 - x42;
            Fp x5170 = (x5169 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x5170;
            Fp x5171 = x5143 - x44;
            Fp x5172 = (x5171 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x5172;
            Fp x5173 = x5143 - x45;
            Fp x5174 = (x5173 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x5174;
            Fp x5175 = x5143 - x11;
            Fp x5176 = (x5175 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x5176;
            Fp x5177 = x5143 - x46;
            Fp x5178 = (x5177 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x5178;
            Fp x5179 = x5143 - x47;
            Fp x5180 = (x5179 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x5180;
            Fp x5181 = x5143 - x48;
            Fp x5182 = (x5181 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x5182;
            Fp x5183 = x5143 - x49;
            Fp x5184 = (x5183 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x5184;
            Fp x5185 = x5143 - x50;
            Fp x5186 = (x5185 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x5186;
            Fp x5187 = x5143 - x51;
            Fp x5188 = (x5187 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x5188;
            Fp x5189 = x5143 - x52;
            Fp x5190 = (x5189 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x5190;
            Fp x5191 = x5143 - x39;
            Fp x5192 = (x5191 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x5192;
            Fp x5193 = x5143 - x41;
            Fp x5194 = (x5193 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x5194;
            Fp x5195 = x5143 - x53;
            Fp x5196 = (x5195 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x5196;
            Fp x5197 = x5143 - x40;
            Fp x5198 = (x5197 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x5198;
            Fp x5199 = x5143 - x43;
            Fp x5200 = (x5199 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x5200;
            Fp x5201 = x5143 - x54;
            Fp x5202 = (x5201 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x5202;
            Fp x5203 = x5143 - x55;
            Fp x5204 = (x5203 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x5204;
            Fp x5205 = x5143 - x56;
            Fp x5206 = (x5205 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x5206;
          }
          Fp x5207 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x5208 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x5209 = x5208 * x1;
          Fp x5210 = x5207 + x5209;
          Fp x5211 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x5212 = x5211 * x2;
          Fp x5213 = x5210 + x5212;
          Fp x5214 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x5215 = x5214 * x3;
          Fp x5216 = x5213 + x5215;
          Fp x5217 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x5218 = x5217 * x4;
          Fp x5219 = x5216 + x5218;
          Fp x5220 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x5221 = x5220 * x5;
          Fp x5222 = x5219 + x5221;
          Fp x5223 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x5224 = x5223 * x0;
          Fp x5225 = x5222 + x5224;
          Fp x5226 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x5227 = x5226 * x6;
          Fp x5228 = x5225 + x5227;
          Fp x5229 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x5230 = x5229 * x7;
          Fp x5231 = x5228 + x5230;
          Fp x5232 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x5233 = x5232 * x8;
          Fp x5234 = x5231 + x5233;
          Fp x5235 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x5236 = x5235 * x9;
          Fp x5237 = x5234 + x5236;
          Fp x5238 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x5239 = x5238 * x38;
          Fp x5240 = x5237 + x5239;
          Fp x5241 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x5242 = x5241 * x42;
          Fp x5243 = x5240 + x5242;
          Fp x5244 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x5245 = x5244 * x44;
          Fp x5246 = x5243 + x5245;
          Fp x5247 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x5248 = x5247 * x45;
          Fp x5249 = x5246 + x5248;
          Fp x5250 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x5251 = x5250 * x11;
          Fp x5252 = x5249 + x5251;
          Fp x5253 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x5254 = x5253 * x46;
          Fp x5255 = x5252 + x5254;
          Fp x5256 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x5257 = x5256 * x47;
          Fp x5258 = x5255 + x5257;
          Fp x5259 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x5260 = x5259 * x48;
          Fp x5261 = x5258 + x5260;
          Fp x5262 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x5263 = x5262 * x49;
          Fp x5264 = x5261 + x5263;
          Fp x5265 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x5266 = x5265 * x50;
          Fp x5267 = x5264 + x5266;
          Fp x5268 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x5269 = x5268 * x51;
          Fp x5270 = x5267 + x5269;
          Fp x5271 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x5272 = x5271 * x52;
          Fp x5273 = x5270 + x5272;
          Fp x5274 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x5275 = x5274 * x39;
          Fp x5276 = x5273 + x5275;
          Fp x5277 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x5278 = x5277 * x41;
          Fp x5279 = x5276 + x5278;
          Fp x5280 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x5281 = x5280 * x53;
          Fp x5282 = x5279 + x5281;
          Fp x5283 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x5284 = x5283 * x40;
          Fp x5285 = x5282 + x5284;
          Fp x5286 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x5287 = x5286 * x43;
          Fp x5288 = x5285 + x5287;
          Fp x5289 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x5290 = x5289 * x54;
          Fp x5291 = x5288 + x5290;
          Fp x5292 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x5293 = x5292 * x55;
          Fp x5294 = x5291 + x5293;
          Fp x5295 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x5296 = x5295 * x56;
          Fp x5297 = x5294 + x5296;
          Fp x5298 = x5297 - x5143;
          if (x5298 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x71;
        Fp x5299 = x1005 * x3;
        Fp x5300 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x5301 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x5302 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x5303 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x5304 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x5305 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x5299;
        host_args[2] = x1280;
        host_args[3] = x5300;
        host_args[4] = x5301;
        host_args[5] = x1239;
        host_args[6] = x5302;
        host_args[7] = x5303;
        host_args[8] = x5304;
        host_args[9] = x5305;
        host(ctx, "log", "C%u: pc: %08x Decode: SLTU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x5306 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x5307 = x5306 * x3732;
      if (x5307 != 0) {
        Fp x5308 = x1764 - x3;
        if (x5308 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:57");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:57");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x5309 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x5310 = Fp(x5309.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x5310;
            Fp x5311 = x5309 - x5310;
            Fp x5312 = x5311 * x10;
            Fp x5313 = Fp(x5312.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x5313;
            Fp x5314 = x5312 - x5313;
            Fp x5315 = x5314 * x10;
            Fp x5316 = Fp(x5315.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x5316;
            Fp x5317 = x5315 - x5316;
            Fp x5318 = x5317 * x10;
            Fp x5319 = Fp(x5318.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x5319;
            Fp x5320 = x5318 - x5319;
            Fp x5321 = x5320 * x10;
            Fp x5322 = Fp(x5321.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x5322;
            Fp x5323 = x5321 - x5322;
            Fp x5324 = x5323 * x10;
            Fp x5325 = Fp(x5324.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x5325;
            Fp x5326 = x5324 - x5325;
            Fp x5327 = x5326 * x10;
            Fp x5328 = Fp(x5327.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x5328;
            Fp x5329 = x5327 - x5328;
            Fp x5330 = x5329 * x10;
            Fp x5331 = Fp(x5330.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x5331;
          }
          Fp x5332 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x5333 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x5334 = x5333 * x3;
          Fp x5335 = x5332 + x5334;
          Fp x5336 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x5337 = x5336 * x11;
          Fp x5338 = x5335 + x5337;
          Fp x5339 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x5340 = x5339 * x12;
          Fp x5341 = x5338 + x5340;
          Fp x5342 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x5343 = x5342 * x13;
          Fp x5344 = x5341 + x5343;
          Fp x5345 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x5346 = x5345 * x14;
          Fp x5347 = x5344 + x5346;
          Fp x5348 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x5349 = x5348 * x15;
          Fp x5350 = x5347 + x5349;
          Fp x5351 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x5352 = x5351 * x16;
          Fp x5353 = x5350 + x5352;
          Fp x5354 = x5309 - x5353;
          Fp x5355 = x5354 * x33;
          if (x5355 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:57");
          {
            Fp x5356 = Fp(x5336.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x5356;
            Fp x5357 = x5336 - x5356;
            Fp x5358 = x5357 * x26;
            Fp x5359 = Fp(x5358.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x5359;
          }
          Fp x5360 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x5361 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x5362 = x5361 * x1;
          Fp x5363 = x5360 + x5362;
          Fp x5364 = x5336 - x5363;
          Fp x5365 = x5364 * x10;
          if (x5365 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:57");
          Fp x5366 = x5360 * x11;
          Fp x5367 = x5335 + x5366;
          {
            Fp x5368 = (x5367 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x5368;
            Fp x5369 = x5367 - x71;
            Fp x5370 = (x5369 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x5370;
            Fp x5371 = x5367 - x1;
            Fp x5372 = (x5371 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x5372;
            Fp x5373 = x5367 - x2;
            Fp x5374 = (x5373 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x5374;
            Fp x5375 = x5367 - x3;
            Fp x5376 = (x5375 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x5376;
            Fp x5377 = x5367 - x4;
            Fp x5378 = (x5377 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x5378;
            Fp x5379 = x5367 - x5;
            Fp x5380 = (x5379 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x5380;
            Fp x5381 = x5367 - x0;
            Fp x5382 = (x5381 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x5382;
            Fp x5383 = x5367 - x6;
            Fp x5384 = (x5383 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x5384;
            Fp x5385 = x5367 - x7;
            Fp x5386 = (x5385 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x5386;
            Fp x5387 = x5367 - x8;
            Fp x5388 = (x5387 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x5388;
            Fp x5389 = x5367 - x9;
            Fp x5390 = (x5389 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x5390;
            Fp x5391 = x5367 - x38;
            Fp x5392 = (x5391 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x5392;
            Fp x5393 = x5367 - x42;
            Fp x5394 = (x5393 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x5394;
            Fp x5395 = x5367 - x44;
            Fp x5396 = (x5395 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x5396;
            Fp x5397 = x5367 - x45;
            Fp x5398 = (x5397 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x5398;
            Fp x5399 = x5367 - x11;
            Fp x5400 = (x5399 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x5400;
            Fp x5401 = x5367 - x46;
            Fp x5402 = (x5401 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x5402;
            Fp x5403 = x5367 - x47;
            Fp x5404 = (x5403 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x5404;
            Fp x5405 = x5367 - x48;
            Fp x5406 = (x5405 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x5406;
            Fp x5407 = x5367 - x49;
            Fp x5408 = (x5407 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x5408;
            Fp x5409 = x5367 - x50;
            Fp x5410 = (x5409 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x5410;
            Fp x5411 = x5367 - x51;
            Fp x5412 = (x5411 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x5412;
            Fp x5413 = x5367 - x52;
            Fp x5414 = (x5413 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x5414;
            Fp x5415 = x5367 - x39;
            Fp x5416 = (x5415 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x5416;
            Fp x5417 = x5367 - x41;
            Fp x5418 = (x5417 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x5418;
            Fp x5419 = x5367 - x53;
            Fp x5420 = (x5419 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x5420;
            Fp x5421 = x5367 - x40;
            Fp x5422 = (x5421 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x5422;
            Fp x5423 = x5367 - x43;
            Fp x5424 = (x5423 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x5424;
            Fp x5425 = x5367 - x54;
            Fp x5426 = (x5425 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x5426;
            Fp x5427 = x5367 - x55;
            Fp x5428 = (x5427 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x5428;
            Fp x5429 = x5367 - x56;
            Fp x5430 = (x5429 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x5430;
          }
          Fp x5431 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x5432 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x5433 = x5432 * x1;
          Fp x5434 = x5431 + x5433;
          Fp x5435 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x5436 = x5435 * x2;
          Fp x5437 = x5434 + x5436;
          Fp x5438 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x5439 = x5438 * x3;
          Fp x5440 = x5437 + x5439;
          Fp x5441 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x5442 = x5441 * x4;
          Fp x5443 = x5440 + x5442;
          Fp x5444 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x5445 = x5444 * x5;
          Fp x5446 = x5443 + x5445;
          Fp x5447 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x5448 = x5447 * x0;
          Fp x5449 = x5446 + x5448;
          Fp x5450 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x5451 = x5450 * x6;
          Fp x5452 = x5449 + x5451;
          Fp x5453 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x5454 = x5453 * x7;
          Fp x5455 = x5452 + x5454;
          Fp x5456 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x5457 = x5456 * x8;
          Fp x5458 = x5455 + x5457;
          Fp x5459 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x5460 = x5459 * x9;
          Fp x5461 = x5458 + x5460;
          Fp x5462 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x5463 = x5462 * x38;
          Fp x5464 = x5461 + x5463;
          Fp x5465 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x5466 = x5465 * x42;
          Fp x5467 = x5464 + x5466;
          Fp x5468 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x5469 = x5468 * x44;
          Fp x5470 = x5467 + x5469;
          Fp x5471 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x5472 = x5471 * x45;
          Fp x5473 = x5470 + x5472;
          Fp x5474 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x5475 = x5474 * x11;
          Fp x5476 = x5473 + x5475;
          Fp x5477 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x5478 = x5477 * x46;
          Fp x5479 = x5476 + x5478;
          Fp x5480 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x5481 = x5480 * x47;
          Fp x5482 = x5479 + x5481;
          Fp x5483 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x5484 = x5483 * x48;
          Fp x5485 = x5482 + x5484;
          Fp x5486 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x5487 = x5486 * x49;
          Fp x5488 = x5485 + x5487;
          Fp x5489 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x5490 = x5489 * x50;
          Fp x5491 = x5488 + x5490;
          Fp x5492 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x5493 = x5492 * x51;
          Fp x5494 = x5491 + x5493;
          Fp x5495 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x5496 = x5495 * x52;
          Fp x5497 = x5494 + x5496;
          Fp x5498 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x5499 = x5498 * x39;
          Fp x5500 = x5497 + x5499;
          Fp x5501 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x5502 = x5501 * x41;
          Fp x5503 = x5500 + x5502;
          Fp x5504 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x5505 = x5504 * x53;
          Fp x5506 = x5503 + x5505;
          Fp x5507 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x5508 = x5507 * x40;
          Fp x5509 = x5506 + x5508;
          Fp x5510 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x5511 = x5510 * x43;
          Fp x5512 = x5509 + x5511;
          Fp x5513 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x5514 = x5513 * x54;
          Fp x5515 = x5512 + x5514;
          Fp x5516 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x5517 = x5516 * x55;
          Fp x5518 = x5515 + x5517;
          Fp x5519 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x5520 = x5519 * x56;
          Fp x5521 = x5518 + x5520;
          Fp x5522 = x5521 - x5367;
          if (x5522 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x71;
        Fp x5523 = x1005 * x3;
        Fp x5524 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x5525 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x5526 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x5527 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x5528 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x5529 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x5523;
        host_args[2] = x1280;
        host_args[3] = x5524;
        host_args[4] = x5525;
        host_args[5] = x1239;
        host_args[6] = x5526;
        host_args[7] = x5527;
        host_args[8] = x5528;
        host_args[9] = x5529;
        host(ctx, "log", "C%u: pc: %08x Decode: ADDI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x5530 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x5531 = x3731 * x5530;
      if (x5531 != 0) {
        Fp x5532 = x1764 - x3;
        if (x5532 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:58");
        Fp x5533 = x1228 - x3;
        if (x5533 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:58");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x5534 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x5535 = Fp(x5534.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x5535;
            Fp x5536 = x5534 - x5535;
            Fp x5537 = x5536 * x10;
            Fp x5538 = Fp(x5537.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x5538;
            Fp x5539 = x5537 - x5538;
            Fp x5540 = x5539 * x10;
            Fp x5541 = Fp(x5540.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x5541;
            Fp x5542 = x5540 - x5541;
            Fp x5543 = x5542 * x10;
            Fp x5544 = Fp(x5543.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x5544;
            Fp x5545 = x5543 - x5544;
            Fp x5546 = x5545 * x10;
            Fp x5547 = Fp(x5546.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x5547;
            Fp x5548 = x5546 - x5547;
            Fp x5549 = x5548 * x10;
            Fp x5550 = Fp(x5549.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x5550;
            Fp x5551 = x5549 - x5550;
            Fp x5552 = x5551 * x10;
            Fp x5553 = Fp(x5552.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x5553;
            Fp x5554 = x5552 - x5553;
            Fp x5555 = x5554 * x10;
            Fp x5556 = Fp(x5555.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x5556;
          }
          Fp x5557 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x5558 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x5559 = x5558 * x3;
          Fp x5560 = x5557 + x5559;
          Fp x5561 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x5562 = x5561 * x11;
          Fp x5563 = x5560 + x5562;
          Fp x5564 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x5565 = x5564 * x12;
          Fp x5566 = x5563 + x5565;
          Fp x5567 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x5568 = x5567 * x13;
          Fp x5569 = x5566 + x5568;
          Fp x5570 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x5571 = x5570 * x14;
          Fp x5572 = x5569 + x5571;
          Fp x5573 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x5574 = x5573 * x15;
          Fp x5575 = x5572 + x5574;
          Fp x5576 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x5577 = x5576 * x16;
          Fp x5578 = x5575 + x5577;
          Fp x5579 = x5534 - x5578;
          Fp x5580 = x5579 * x33;
          if (x5580 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:58");
          {
            Fp x5581 = Fp(x5561.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x5581;
            Fp x5582 = x5561 - x5581;
            Fp x5583 = x5582 * x26;
            Fp x5584 = Fp(x5583.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x5584;
          }
          Fp x5585 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x5586 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x5587 = x5586 * x1;
          Fp x5588 = x5585 + x5587;
          Fp x5589 = x5561 - x5588;
          Fp x5590 = x5589 * x10;
          if (x5590 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:58");
          Fp x5591 = x5585 * x11;
          Fp x5592 = x5560 + x5591;
          {
            Fp x5593 = (x5592 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x5593;
            Fp x5594 = x5592 - x71;
            Fp x5595 = (x5594 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x5595;
            Fp x5596 = x5592 - x1;
            Fp x5597 = (x5596 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x5597;
            Fp x5598 = x5592 - x2;
            Fp x5599 = (x5598 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x5599;
            Fp x5600 = x5592 - x3;
            Fp x5601 = (x5600 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x5601;
            Fp x5602 = x5592 - x4;
            Fp x5603 = (x5602 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x5603;
            Fp x5604 = x5592 - x5;
            Fp x5605 = (x5604 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x5605;
            Fp x5606 = x5592 - x0;
            Fp x5607 = (x5606 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x5607;
            Fp x5608 = x5592 - x6;
            Fp x5609 = (x5608 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x5609;
            Fp x5610 = x5592 - x7;
            Fp x5611 = (x5610 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x5611;
            Fp x5612 = x5592 - x8;
            Fp x5613 = (x5612 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x5613;
            Fp x5614 = x5592 - x9;
            Fp x5615 = (x5614 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x5615;
            Fp x5616 = x5592 - x38;
            Fp x5617 = (x5616 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x5617;
            Fp x5618 = x5592 - x42;
            Fp x5619 = (x5618 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x5619;
            Fp x5620 = x5592 - x44;
            Fp x5621 = (x5620 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x5621;
            Fp x5622 = x5592 - x45;
            Fp x5623 = (x5622 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x5623;
            Fp x5624 = x5592 - x11;
            Fp x5625 = (x5624 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x5625;
            Fp x5626 = x5592 - x46;
            Fp x5627 = (x5626 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x5627;
            Fp x5628 = x5592 - x47;
            Fp x5629 = (x5628 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x5629;
            Fp x5630 = x5592 - x48;
            Fp x5631 = (x5630 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x5631;
            Fp x5632 = x5592 - x49;
            Fp x5633 = (x5632 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x5633;
            Fp x5634 = x5592 - x50;
            Fp x5635 = (x5634 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x5635;
            Fp x5636 = x5592 - x51;
            Fp x5637 = (x5636 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x5637;
            Fp x5638 = x5592 - x52;
            Fp x5639 = (x5638 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x5639;
            Fp x5640 = x5592 - x39;
            Fp x5641 = (x5640 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x5641;
            Fp x5642 = x5592 - x41;
            Fp x5643 = (x5642 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x5643;
            Fp x5644 = x5592 - x53;
            Fp x5645 = (x5644 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x5645;
            Fp x5646 = x5592 - x40;
            Fp x5647 = (x5646 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x5647;
            Fp x5648 = x5592 - x43;
            Fp x5649 = (x5648 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x5649;
            Fp x5650 = x5592 - x54;
            Fp x5651 = (x5650 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x5651;
            Fp x5652 = x5592 - x55;
            Fp x5653 = (x5652 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x5653;
            Fp x5654 = x5592 - x56;
            Fp x5655 = (x5654 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x5655;
          }
          Fp x5656 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x5657 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x5658 = x5657 * x1;
          Fp x5659 = x5656 + x5658;
          Fp x5660 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x5661 = x5660 * x2;
          Fp x5662 = x5659 + x5661;
          Fp x5663 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x5664 = x5663 * x3;
          Fp x5665 = x5662 + x5664;
          Fp x5666 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x5667 = x5666 * x4;
          Fp x5668 = x5665 + x5667;
          Fp x5669 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x5670 = x5669 * x5;
          Fp x5671 = x5668 + x5670;
          Fp x5672 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x5673 = x5672 * x0;
          Fp x5674 = x5671 + x5673;
          Fp x5675 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x5676 = x5675 * x6;
          Fp x5677 = x5674 + x5676;
          Fp x5678 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x5679 = x5678 * x7;
          Fp x5680 = x5677 + x5679;
          Fp x5681 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x5682 = x5681 * x8;
          Fp x5683 = x5680 + x5682;
          Fp x5684 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x5685 = x5684 * x9;
          Fp x5686 = x5683 + x5685;
          Fp x5687 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x5688 = x5687 * x38;
          Fp x5689 = x5686 + x5688;
          Fp x5690 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x5691 = x5690 * x42;
          Fp x5692 = x5689 + x5691;
          Fp x5693 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x5694 = x5693 * x44;
          Fp x5695 = x5692 + x5694;
          Fp x5696 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x5697 = x5696 * x45;
          Fp x5698 = x5695 + x5697;
          Fp x5699 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x5700 = x5699 * x11;
          Fp x5701 = x5698 + x5700;
          Fp x5702 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x5703 = x5702 * x46;
          Fp x5704 = x5701 + x5703;
          Fp x5705 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x5706 = x5705 * x47;
          Fp x5707 = x5704 + x5706;
          Fp x5708 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x5709 = x5708 * x48;
          Fp x5710 = x5707 + x5709;
          Fp x5711 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x5712 = x5711 * x49;
          Fp x5713 = x5710 + x5712;
          Fp x5714 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x5715 = x5714 * x50;
          Fp x5716 = x5713 + x5715;
          Fp x5717 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x5718 = x5717 * x51;
          Fp x5719 = x5716 + x5718;
          Fp x5720 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x5721 = x5720 * x52;
          Fp x5722 = x5719 + x5721;
          Fp x5723 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x5724 = x5723 * x39;
          Fp x5725 = x5722 + x5724;
          Fp x5726 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x5727 = x5726 * x41;
          Fp x5728 = x5725 + x5727;
          Fp x5729 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x5730 = x5729 * x53;
          Fp x5731 = x5728 + x5730;
          Fp x5732 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x5733 = x5732 * x40;
          Fp x5734 = x5731 + x5733;
          Fp x5735 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x5736 = x5735 * x43;
          Fp x5737 = x5734 + x5736;
          Fp x5738 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x5739 = x5738 * x54;
          Fp x5740 = x5737 + x5739;
          Fp x5741 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x5742 = x5741 * x55;
          Fp x5743 = x5740 + x5742;
          Fp x5744 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x5745 = x5744 * x56;
          Fp x5746 = x5743 + x5745;
          Fp x5747 = x5746 - x5592;
          if (x5747 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x1;
        Fp x5748 = x1005 * x3;
        Fp x5749 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x5750 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x5751 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x5752 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x5753 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x5754 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x5748;
        host_args[2] = x1280;
        host_args[3] = x5749;
        host_args[4] = x5750;
        host_args[5] = x1239;
        host_args[6] = x5751;
        host_args[7] = x5752;
        host_args[8] = x5753;
        host_args[9] = x5754;
        host(ctx, "log", "C%u: pc: %08x Decode: XORI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x5755 = x3956 * x5530;
      if (x5755 != 0) {
        Fp x5756 = x1764 - x3;
        if (x5756 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:59");
        Fp x5757 = x1228 - x5;
        if (x5757 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:59");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x5758 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x5759 = Fp(x5758.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x5759;
            Fp x5760 = x5758 - x5759;
            Fp x5761 = x5760 * x10;
            Fp x5762 = Fp(x5761.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x5762;
            Fp x5763 = x5761 - x5762;
            Fp x5764 = x5763 * x10;
            Fp x5765 = Fp(x5764.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x5765;
            Fp x5766 = x5764 - x5765;
            Fp x5767 = x5766 * x10;
            Fp x5768 = Fp(x5767.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x5768;
            Fp x5769 = x5767 - x5768;
            Fp x5770 = x5769 * x10;
            Fp x5771 = Fp(x5770.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x5771;
            Fp x5772 = x5770 - x5771;
            Fp x5773 = x5772 * x10;
            Fp x5774 = Fp(x5773.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x5774;
            Fp x5775 = x5773 - x5774;
            Fp x5776 = x5775 * x10;
            Fp x5777 = Fp(x5776.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x5777;
            Fp x5778 = x5776 - x5777;
            Fp x5779 = x5778 * x10;
            Fp x5780 = Fp(x5779.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x5780;
          }
          Fp x5781 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x5782 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x5783 = x5782 * x3;
          Fp x5784 = x5781 + x5783;
          Fp x5785 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x5786 = x5785 * x11;
          Fp x5787 = x5784 + x5786;
          Fp x5788 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x5789 = x5788 * x12;
          Fp x5790 = x5787 + x5789;
          Fp x5791 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x5792 = x5791 * x13;
          Fp x5793 = x5790 + x5792;
          Fp x5794 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x5795 = x5794 * x14;
          Fp x5796 = x5793 + x5795;
          Fp x5797 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x5798 = x5797 * x15;
          Fp x5799 = x5796 + x5798;
          Fp x5800 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x5801 = x5800 * x16;
          Fp x5802 = x5799 + x5801;
          Fp x5803 = x5758 - x5802;
          Fp x5804 = x5803 * x33;
          if (x5804 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:59");
          {
            Fp x5805 = Fp(x5785.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x5805;
            Fp x5806 = x5785 - x5805;
            Fp x5807 = x5806 * x26;
            Fp x5808 = Fp(x5807.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x5808;
          }
          Fp x5809 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x5810 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x5811 = x5810 * x1;
          Fp x5812 = x5809 + x5811;
          Fp x5813 = x5785 - x5812;
          Fp x5814 = x5813 * x10;
          if (x5814 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:59");
          Fp x5815 = x5809 * x11;
          Fp x5816 = x5784 + x5815;
          {
            Fp x5817 = (x5816 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x5817;
            Fp x5818 = x5816 - x71;
            Fp x5819 = (x5818 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x5819;
            Fp x5820 = x5816 - x1;
            Fp x5821 = (x5820 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x5821;
            Fp x5822 = x5816 - x2;
            Fp x5823 = (x5822 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x5823;
            Fp x5824 = x5816 - x3;
            Fp x5825 = (x5824 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x5825;
            Fp x5826 = x5816 - x4;
            Fp x5827 = (x5826 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x5827;
            Fp x5828 = x5816 - x5;
            Fp x5829 = (x5828 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x5829;
            Fp x5830 = x5816 - x0;
            Fp x5831 = (x5830 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x5831;
            Fp x5832 = x5816 - x6;
            Fp x5833 = (x5832 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x5833;
            Fp x5834 = x5816 - x7;
            Fp x5835 = (x5834 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x5835;
            Fp x5836 = x5816 - x8;
            Fp x5837 = (x5836 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x5837;
            Fp x5838 = x5816 - x9;
            Fp x5839 = (x5838 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x5839;
            Fp x5840 = x5816 - x38;
            Fp x5841 = (x5840 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x5841;
            Fp x5842 = x5816 - x42;
            Fp x5843 = (x5842 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x5843;
            Fp x5844 = x5816 - x44;
            Fp x5845 = (x5844 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x5845;
            Fp x5846 = x5816 - x45;
            Fp x5847 = (x5846 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x5847;
            Fp x5848 = x5816 - x11;
            Fp x5849 = (x5848 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x5849;
            Fp x5850 = x5816 - x46;
            Fp x5851 = (x5850 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x5851;
            Fp x5852 = x5816 - x47;
            Fp x5853 = (x5852 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x5853;
            Fp x5854 = x5816 - x48;
            Fp x5855 = (x5854 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x5855;
            Fp x5856 = x5816 - x49;
            Fp x5857 = (x5856 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x5857;
            Fp x5858 = x5816 - x50;
            Fp x5859 = (x5858 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x5859;
            Fp x5860 = x5816 - x51;
            Fp x5861 = (x5860 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x5861;
            Fp x5862 = x5816 - x52;
            Fp x5863 = (x5862 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x5863;
            Fp x5864 = x5816 - x39;
            Fp x5865 = (x5864 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x5865;
            Fp x5866 = x5816 - x41;
            Fp x5867 = (x5866 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x5867;
            Fp x5868 = x5816 - x53;
            Fp x5869 = (x5868 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x5869;
            Fp x5870 = x5816 - x40;
            Fp x5871 = (x5870 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x5871;
            Fp x5872 = x5816 - x43;
            Fp x5873 = (x5872 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x5873;
            Fp x5874 = x5816 - x54;
            Fp x5875 = (x5874 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x5875;
            Fp x5876 = x5816 - x55;
            Fp x5877 = (x5876 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x5877;
            Fp x5878 = x5816 - x56;
            Fp x5879 = (x5878 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x5879;
          }
          Fp x5880 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x5881 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x5882 = x5881 * x1;
          Fp x5883 = x5880 + x5882;
          Fp x5884 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x5885 = x5884 * x2;
          Fp x5886 = x5883 + x5885;
          Fp x5887 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x5888 = x5887 * x3;
          Fp x5889 = x5886 + x5888;
          Fp x5890 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x5891 = x5890 * x4;
          Fp x5892 = x5889 + x5891;
          Fp x5893 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x5894 = x5893 * x5;
          Fp x5895 = x5892 + x5894;
          Fp x5896 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x5897 = x5896 * x0;
          Fp x5898 = x5895 + x5897;
          Fp x5899 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x5900 = x5899 * x6;
          Fp x5901 = x5898 + x5900;
          Fp x5902 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x5903 = x5902 * x7;
          Fp x5904 = x5901 + x5903;
          Fp x5905 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x5906 = x5905 * x8;
          Fp x5907 = x5904 + x5906;
          Fp x5908 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x5909 = x5908 * x9;
          Fp x5910 = x5907 + x5909;
          Fp x5911 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x5912 = x5911 * x38;
          Fp x5913 = x5910 + x5912;
          Fp x5914 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x5915 = x5914 * x42;
          Fp x5916 = x5913 + x5915;
          Fp x5917 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x5918 = x5917 * x44;
          Fp x5919 = x5916 + x5918;
          Fp x5920 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x5921 = x5920 * x45;
          Fp x5922 = x5919 + x5921;
          Fp x5923 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x5924 = x5923 * x11;
          Fp x5925 = x5922 + x5924;
          Fp x5926 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x5927 = x5926 * x46;
          Fp x5928 = x5925 + x5927;
          Fp x5929 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x5930 = x5929 * x47;
          Fp x5931 = x5928 + x5930;
          Fp x5932 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x5933 = x5932 * x48;
          Fp x5934 = x5931 + x5933;
          Fp x5935 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x5936 = x5935 * x49;
          Fp x5937 = x5934 + x5936;
          Fp x5938 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x5939 = x5938 * x50;
          Fp x5940 = x5937 + x5939;
          Fp x5941 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x5942 = x5941 * x51;
          Fp x5943 = x5940 + x5942;
          Fp x5944 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x5945 = x5944 * x52;
          Fp x5946 = x5943 + x5945;
          Fp x5947 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x5948 = x5947 * x39;
          Fp x5949 = x5946 + x5948;
          Fp x5950 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x5951 = x5950 * x41;
          Fp x5952 = x5949 + x5951;
          Fp x5953 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x5954 = x5953 * x53;
          Fp x5955 = x5952 + x5954;
          Fp x5956 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x5957 = x5956 * x40;
          Fp x5958 = x5955 + x5957;
          Fp x5959 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x5960 = x5959 * x43;
          Fp x5961 = x5958 + x5960;
          Fp x5962 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x5963 = x5962 * x54;
          Fp x5964 = x5961 + x5963;
          Fp x5965 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x5966 = x5965 * x55;
          Fp x5967 = x5964 + x5966;
          Fp x5968 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x5969 = x5968 * x56;
          Fp x5970 = x5967 + x5969;
          Fp x5971 = x5970 - x5816;
          if (x5971 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x1;
        Fp x5972 = x1005 * x3;
        Fp x5973 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x5974 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x5975 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x5976 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x5977 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x5978 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x5972;
        host_args[2] = x1280;
        host_args[3] = x5973;
        host_args[4] = x5974;
        host_args[5] = x1239;
        host_args[6] = x5975;
        host_args[7] = x5976;
        host_args[8] = x5977;
        host_args[9] = x5978;
        host(ctx, "log", "C%u: pc: %08x Decode: ORI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x5979 = x4181 * x5530;
      if (x5979 != 0) {
        Fp x5980 = x1764 - x3;
        if (x5980 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:60");
        Fp x5981 = x1228 - x0;
        if (x5981 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:60");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x5982 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x5983 = Fp(x5982.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x5983;
            Fp x5984 = x5982 - x5983;
            Fp x5985 = x5984 * x10;
            Fp x5986 = Fp(x5985.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x5986;
            Fp x5987 = x5985 - x5986;
            Fp x5988 = x5987 * x10;
            Fp x5989 = Fp(x5988.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x5989;
            Fp x5990 = x5988 - x5989;
            Fp x5991 = x5990 * x10;
            Fp x5992 = Fp(x5991.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x5992;
            Fp x5993 = x5991 - x5992;
            Fp x5994 = x5993 * x10;
            Fp x5995 = Fp(x5994.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x5995;
            Fp x5996 = x5994 - x5995;
            Fp x5997 = x5996 * x10;
            Fp x5998 = Fp(x5997.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x5998;
            Fp x5999 = x5997 - x5998;
            Fp x6000 = x5999 * x10;
            Fp x6001 = Fp(x6000.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x6001;
            Fp x6002 = x6000 - x6001;
            Fp x6003 = x6002 * x10;
            Fp x6004 = Fp(x6003.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x6004;
          }
          Fp x6005 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x6006 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x6007 = x6006 * x3;
          Fp x6008 = x6005 + x6007;
          Fp x6009 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x6010 = x6009 * x11;
          Fp x6011 = x6008 + x6010;
          Fp x6012 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x6013 = x6012 * x12;
          Fp x6014 = x6011 + x6013;
          Fp x6015 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x6016 = x6015 * x13;
          Fp x6017 = x6014 + x6016;
          Fp x6018 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x6019 = x6018 * x14;
          Fp x6020 = x6017 + x6019;
          Fp x6021 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x6022 = x6021 * x15;
          Fp x6023 = x6020 + x6022;
          Fp x6024 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x6025 = x6024 * x16;
          Fp x6026 = x6023 + x6025;
          Fp x6027 = x5982 - x6026;
          Fp x6028 = x6027 * x33;
          if (x6028 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:60");
          {
            Fp x6029 = Fp(x6009.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x6029;
            Fp x6030 = x6009 - x6029;
            Fp x6031 = x6030 * x26;
            Fp x6032 = Fp(x6031.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x6032;
          }
          Fp x6033 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x6034 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x6035 = x6034 * x1;
          Fp x6036 = x6033 + x6035;
          Fp x6037 = x6009 - x6036;
          Fp x6038 = x6037 * x10;
          if (x6038 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:60");
          Fp x6039 = x6033 * x11;
          Fp x6040 = x6008 + x6039;
          {
            Fp x6041 = (x6040 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x6041;
            Fp x6042 = x6040 - x71;
            Fp x6043 = (x6042 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x6043;
            Fp x6044 = x6040 - x1;
            Fp x6045 = (x6044 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x6045;
            Fp x6046 = x6040 - x2;
            Fp x6047 = (x6046 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x6047;
            Fp x6048 = x6040 - x3;
            Fp x6049 = (x6048 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x6049;
            Fp x6050 = x6040 - x4;
            Fp x6051 = (x6050 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x6051;
            Fp x6052 = x6040 - x5;
            Fp x6053 = (x6052 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x6053;
            Fp x6054 = x6040 - x0;
            Fp x6055 = (x6054 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x6055;
            Fp x6056 = x6040 - x6;
            Fp x6057 = (x6056 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x6057;
            Fp x6058 = x6040 - x7;
            Fp x6059 = (x6058 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x6059;
            Fp x6060 = x6040 - x8;
            Fp x6061 = (x6060 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x6061;
            Fp x6062 = x6040 - x9;
            Fp x6063 = (x6062 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x6063;
            Fp x6064 = x6040 - x38;
            Fp x6065 = (x6064 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x6065;
            Fp x6066 = x6040 - x42;
            Fp x6067 = (x6066 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x6067;
            Fp x6068 = x6040 - x44;
            Fp x6069 = (x6068 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x6069;
            Fp x6070 = x6040 - x45;
            Fp x6071 = (x6070 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x6071;
            Fp x6072 = x6040 - x11;
            Fp x6073 = (x6072 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x6073;
            Fp x6074 = x6040 - x46;
            Fp x6075 = (x6074 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x6075;
            Fp x6076 = x6040 - x47;
            Fp x6077 = (x6076 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x6077;
            Fp x6078 = x6040 - x48;
            Fp x6079 = (x6078 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x6079;
            Fp x6080 = x6040 - x49;
            Fp x6081 = (x6080 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x6081;
            Fp x6082 = x6040 - x50;
            Fp x6083 = (x6082 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x6083;
            Fp x6084 = x6040 - x51;
            Fp x6085 = (x6084 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x6085;
            Fp x6086 = x6040 - x52;
            Fp x6087 = (x6086 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x6087;
            Fp x6088 = x6040 - x39;
            Fp x6089 = (x6088 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x6089;
            Fp x6090 = x6040 - x41;
            Fp x6091 = (x6090 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x6091;
            Fp x6092 = x6040 - x53;
            Fp x6093 = (x6092 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x6093;
            Fp x6094 = x6040 - x40;
            Fp x6095 = (x6094 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x6095;
            Fp x6096 = x6040 - x43;
            Fp x6097 = (x6096 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x6097;
            Fp x6098 = x6040 - x54;
            Fp x6099 = (x6098 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x6099;
            Fp x6100 = x6040 - x55;
            Fp x6101 = (x6100 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x6101;
            Fp x6102 = x6040 - x56;
            Fp x6103 = (x6102 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x6103;
          }
          Fp x6104 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x6105 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x6106 = x6105 * x1;
          Fp x6107 = x6104 + x6106;
          Fp x6108 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x6109 = x6108 * x2;
          Fp x6110 = x6107 + x6109;
          Fp x6111 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x6112 = x6111 * x3;
          Fp x6113 = x6110 + x6112;
          Fp x6114 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x6115 = x6114 * x4;
          Fp x6116 = x6113 + x6115;
          Fp x6117 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x6118 = x6117 * x5;
          Fp x6119 = x6116 + x6118;
          Fp x6120 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x6121 = x6120 * x0;
          Fp x6122 = x6119 + x6121;
          Fp x6123 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x6124 = x6123 * x6;
          Fp x6125 = x6122 + x6124;
          Fp x6126 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x6127 = x6126 * x7;
          Fp x6128 = x6125 + x6127;
          Fp x6129 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x6130 = x6129 * x8;
          Fp x6131 = x6128 + x6130;
          Fp x6132 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x6133 = x6132 * x9;
          Fp x6134 = x6131 + x6133;
          Fp x6135 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x6136 = x6135 * x38;
          Fp x6137 = x6134 + x6136;
          Fp x6138 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x6139 = x6138 * x42;
          Fp x6140 = x6137 + x6139;
          Fp x6141 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x6142 = x6141 * x44;
          Fp x6143 = x6140 + x6142;
          Fp x6144 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x6145 = x6144 * x45;
          Fp x6146 = x6143 + x6145;
          Fp x6147 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x6148 = x6147 * x11;
          Fp x6149 = x6146 + x6148;
          Fp x6150 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x6151 = x6150 * x46;
          Fp x6152 = x6149 + x6151;
          Fp x6153 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x6154 = x6153 * x47;
          Fp x6155 = x6152 + x6154;
          Fp x6156 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x6157 = x6156 * x48;
          Fp x6158 = x6155 + x6157;
          Fp x6159 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x6160 = x6159 * x49;
          Fp x6161 = x6158 + x6160;
          Fp x6162 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x6163 = x6162 * x50;
          Fp x6164 = x6161 + x6163;
          Fp x6165 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x6166 = x6165 * x51;
          Fp x6167 = x6164 + x6166;
          Fp x6168 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x6169 = x6168 * x52;
          Fp x6170 = x6167 + x6169;
          Fp x6171 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x6172 = x6171 * x39;
          Fp x6173 = x6170 + x6172;
          Fp x6174 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x6175 = x6174 * x41;
          Fp x6176 = x6173 + x6175;
          Fp x6177 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x6178 = x6177 * x53;
          Fp x6179 = x6176 + x6178;
          Fp x6180 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x6181 = x6180 * x40;
          Fp x6182 = x6179 + x6181;
          Fp x6183 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x6184 = x6183 * x43;
          Fp x6185 = x6182 + x6184;
          Fp x6186 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x6187 = x6186 * x54;
          Fp x6188 = x6185 + x6187;
          Fp x6189 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x6190 = x6189 * x55;
          Fp x6191 = x6188 + x6190;
          Fp x6192 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x6193 = x6192 * x56;
          Fp x6194 = x6191 + x6193;
          Fp x6195 = x6194 - x6040;
          if (x6195 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x1;
        Fp x6196 = x1005 * x3;
        Fp x6197 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x6198 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x6199 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x6200 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x6201 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x6202 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x6196;
        host_args[2] = x1280;
        host_args[3] = x6197;
        host_args[4] = x6198;
        host_args[5] = x1239;
        host_args[6] = x6199;
        host_args[7] = x6200;
        host_args[8] = x6201;
        host_args[9] = x6202;
        host(ctx, "log", "C%u: pc: %08x Decode: ANDI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x6203 = x4406 * x5530;
      if (x6203 != 0) {
        Fp x6204 = x1764 - x3;
        if (x6204 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:61");
        Fp x6205 = x1228 - x1;
        if (x6205 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:61");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x6206 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x6207 = Fp(x6206.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x6207;
            Fp x6208 = x6206 - x6207;
            Fp x6209 = x6208 * x10;
            Fp x6210 = Fp(x6209.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x6210;
            Fp x6211 = x6209 - x6210;
            Fp x6212 = x6211 * x10;
            Fp x6213 = Fp(x6212.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x6213;
            Fp x6214 = x6212 - x6213;
            Fp x6215 = x6214 * x10;
            Fp x6216 = Fp(x6215.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x6216;
            Fp x6217 = x6215 - x6216;
            Fp x6218 = x6217 * x10;
            Fp x6219 = Fp(x6218.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x6219;
            Fp x6220 = x6218 - x6219;
            Fp x6221 = x6220 * x10;
            Fp x6222 = Fp(x6221.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x6222;
            Fp x6223 = x6221 - x6222;
            Fp x6224 = x6223 * x10;
            Fp x6225 = Fp(x6224.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x6225;
            Fp x6226 = x6224 - x6225;
            Fp x6227 = x6226 * x10;
            Fp x6228 = Fp(x6227.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x6228;
          }
          Fp x6229 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x6230 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x6231 = x6230 * x3;
          Fp x6232 = x6229 + x6231;
          Fp x6233 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x6234 = x6233 * x11;
          Fp x6235 = x6232 + x6234;
          Fp x6236 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x6237 = x6236 * x12;
          Fp x6238 = x6235 + x6237;
          Fp x6239 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x6240 = x6239 * x13;
          Fp x6241 = x6238 + x6240;
          Fp x6242 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x6243 = x6242 * x14;
          Fp x6244 = x6241 + x6243;
          Fp x6245 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x6246 = x6245 * x15;
          Fp x6247 = x6244 + x6246;
          Fp x6248 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x6249 = x6248 * x16;
          Fp x6250 = x6247 + x6249;
          Fp x6251 = x6206 - x6250;
          Fp x6252 = x6251 * x33;
          if (x6252 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:61");
          {
            Fp x6253 = Fp(x6233.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x6253;
            Fp x6254 = x6233 - x6253;
            Fp x6255 = x6254 * x26;
            Fp x6256 = Fp(x6255.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x6256;
          }
          Fp x6257 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x6258 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x6259 = x6258 * x1;
          Fp x6260 = x6257 + x6259;
          Fp x6261 = x6233 - x6260;
          Fp x6262 = x6261 * x10;
          if (x6262 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:61");
          Fp x6263 = x6257 * x11;
          Fp x6264 = x6232 + x6263;
          {
            Fp x6265 = (x6264 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x6265;
            Fp x6266 = x6264 - x71;
            Fp x6267 = (x6266 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x6267;
            Fp x6268 = x6264 - x1;
            Fp x6269 = (x6268 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x6269;
            Fp x6270 = x6264 - x2;
            Fp x6271 = (x6270 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x6271;
            Fp x6272 = x6264 - x3;
            Fp x6273 = (x6272 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x6273;
            Fp x6274 = x6264 - x4;
            Fp x6275 = (x6274 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x6275;
            Fp x6276 = x6264 - x5;
            Fp x6277 = (x6276 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x6277;
            Fp x6278 = x6264 - x0;
            Fp x6279 = (x6278 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x6279;
            Fp x6280 = x6264 - x6;
            Fp x6281 = (x6280 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x6281;
            Fp x6282 = x6264 - x7;
            Fp x6283 = (x6282 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x6283;
            Fp x6284 = x6264 - x8;
            Fp x6285 = (x6284 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x6285;
            Fp x6286 = x6264 - x9;
            Fp x6287 = (x6286 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x6287;
            Fp x6288 = x6264 - x38;
            Fp x6289 = (x6288 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x6289;
            Fp x6290 = x6264 - x42;
            Fp x6291 = (x6290 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x6291;
            Fp x6292 = x6264 - x44;
            Fp x6293 = (x6292 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x6293;
            Fp x6294 = x6264 - x45;
            Fp x6295 = (x6294 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x6295;
            Fp x6296 = x6264 - x11;
            Fp x6297 = (x6296 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x6297;
            Fp x6298 = x6264 - x46;
            Fp x6299 = (x6298 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x6299;
            Fp x6300 = x6264 - x47;
            Fp x6301 = (x6300 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x6301;
            Fp x6302 = x6264 - x48;
            Fp x6303 = (x6302 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x6303;
            Fp x6304 = x6264 - x49;
            Fp x6305 = (x6304 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x6305;
            Fp x6306 = x6264 - x50;
            Fp x6307 = (x6306 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x6307;
            Fp x6308 = x6264 - x51;
            Fp x6309 = (x6308 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x6309;
            Fp x6310 = x6264 - x52;
            Fp x6311 = (x6310 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x6311;
            Fp x6312 = x6264 - x39;
            Fp x6313 = (x6312 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x6313;
            Fp x6314 = x6264 - x41;
            Fp x6315 = (x6314 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x6315;
            Fp x6316 = x6264 - x53;
            Fp x6317 = (x6316 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x6317;
            Fp x6318 = x6264 - x40;
            Fp x6319 = (x6318 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x6319;
            Fp x6320 = x6264 - x43;
            Fp x6321 = (x6320 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x6321;
            Fp x6322 = x6264 - x54;
            Fp x6323 = (x6322 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x6323;
            Fp x6324 = x6264 - x55;
            Fp x6325 = (x6324 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x6325;
            Fp x6326 = x6264 - x56;
            Fp x6327 = (x6326 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x6327;
          }
          Fp x6328 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x6329 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x6330 = x6329 * x1;
          Fp x6331 = x6328 + x6330;
          Fp x6332 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x6333 = x6332 * x2;
          Fp x6334 = x6331 + x6333;
          Fp x6335 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x6336 = x6335 * x3;
          Fp x6337 = x6334 + x6336;
          Fp x6338 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x6339 = x6338 * x4;
          Fp x6340 = x6337 + x6339;
          Fp x6341 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x6342 = x6341 * x5;
          Fp x6343 = x6340 + x6342;
          Fp x6344 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x6345 = x6344 * x0;
          Fp x6346 = x6343 + x6345;
          Fp x6347 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x6348 = x6347 * x6;
          Fp x6349 = x6346 + x6348;
          Fp x6350 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x6351 = x6350 * x7;
          Fp x6352 = x6349 + x6351;
          Fp x6353 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x6354 = x6353 * x8;
          Fp x6355 = x6352 + x6354;
          Fp x6356 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x6357 = x6356 * x9;
          Fp x6358 = x6355 + x6357;
          Fp x6359 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x6360 = x6359 * x38;
          Fp x6361 = x6358 + x6360;
          Fp x6362 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x6363 = x6362 * x42;
          Fp x6364 = x6361 + x6363;
          Fp x6365 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x6366 = x6365 * x44;
          Fp x6367 = x6364 + x6366;
          Fp x6368 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x6369 = x6368 * x45;
          Fp x6370 = x6367 + x6369;
          Fp x6371 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x6372 = x6371 * x11;
          Fp x6373 = x6370 + x6372;
          Fp x6374 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x6375 = x6374 * x46;
          Fp x6376 = x6373 + x6375;
          Fp x6377 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x6378 = x6377 * x47;
          Fp x6379 = x6376 + x6378;
          Fp x6380 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x6381 = x6380 * x48;
          Fp x6382 = x6379 + x6381;
          Fp x6383 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x6384 = x6383 * x49;
          Fp x6385 = x6382 + x6384;
          Fp x6386 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x6387 = x6386 * x50;
          Fp x6388 = x6385 + x6387;
          Fp x6389 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x6390 = x6389 * x51;
          Fp x6391 = x6388 + x6390;
          Fp x6392 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x6393 = x6392 * x52;
          Fp x6394 = x6391 + x6393;
          Fp x6395 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x6396 = x6395 * x39;
          Fp x6397 = x6394 + x6396;
          Fp x6398 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x6399 = x6398 * x41;
          Fp x6400 = x6397 + x6399;
          Fp x6401 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x6402 = x6401 * x53;
          Fp x6403 = x6400 + x6402;
          Fp x6404 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x6405 = x6404 * x40;
          Fp x6406 = x6403 + x6405;
          Fp x6407 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x6408 = x6407 * x43;
          Fp x6409 = x6406 + x6408;
          Fp x6410 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x6411 = x6410 * x54;
          Fp x6412 = x6409 + x6411;
          Fp x6413 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x6414 = x6413 * x55;
          Fp x6415 = x6412 + x6414;
          Fp x6416 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x6417 = x6416 * x56;
          Fp x6418 = x6415 + x6417;
          Fp x6419 = x6418 - x6264;
          if (x6419 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x1;
        Fp x6420 = x1005 * x3;
        Fp x6421 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x6422 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x6423 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x6424 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x6425 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x6426 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x6420;
        host_args[2] = x1280;
        host_args[3] = x6421;
        host_args[4] = x6422;
        host_args[5] = x1239;
        host_args[6] = x6423;
        host_args[7] = x6424;
        host_args[8] = x6425;
        host_args[9] = x6426;
        host(ctx, "log", "C%u: pc: %08x Decode: SLTI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x6427 = x4856 * x5530;
      if (x6427 != 0) {
        Fp x6428 = x1764 - x3;
        if (x6428 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:62");
        Fp x6429 = x1228 - x2;
        if (x6429 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:62");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x6430 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x6431 = Fp(x6430.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x6431;
            Fp x6432 = x6430 - x6431;
            Fp x6433 = x6432 * x10;
            Fp x6434 = Fp(x6433.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x6434;
            Fp x6435 = x6433 - x6434;
            Fp x6436 = x6435 * x10;
            Fp x6437 = Fp(x6436.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x6437;
            Fp x6438 = x6436 - x6437;
            Fp x6439 = x6438 * x10;
            Fp x6440 = Fp(x6439.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x6440;
            Fp x6441 = x6439 - x6440;
            Fp x6442 = x6441 * x10;
            Fp x6443 = Fp(x6442.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x6443;
            Fp x6444 = x6442 - x6443;
            Fp x6445 = x6444 * x10;
            Fp x6446 = Fp(x6445.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x6446;
            Fp x6447 = x6445 - x6446;
            Fp x6448 = x6447 * x10;
            Fp x6449 = Fp(x6448.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x6449;
            Fp x6450 = x6448 - x6449;
            Fp x6451 = x6450 * x10;
            Fp x6452 = Fp(x6451.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x6452;
          }
          Fp x6453 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x6454 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x6455 = x6454 * x3;
          Fp x6456 = x6453 + x6455;
          Fp x6457 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x6458 = x6457 * x11;
          Fp x6459 = x6456 + x6458;
          Fp x6460 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x6461 = x6460 * x12;
          Fp x6462 = x6459 + x6461;
          Fp x6463 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x6464 = x6463 * x13;
          Fp x6465 = x6462 + x6464;
          Fp x6466 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x6467 = x6466 * x14;
          Fp x6468 = x6465 + x6467;
          Fp x6469 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x6470 = x6469 * x15;
          Fp x6471 = x6468 + x6470;
          Fp x6472 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x6473 = x6472 * x16;
          Fp x6474 = x6471 + x6473;
          Fp x6475 = x6430 - x6474;
          Fp x6476 = x6475 * x33;
          if (x6476 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:62");
          {
            Fp x6477 = Fp(x6457.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x6477;
            Fp x6478 = x6457 - x6477;
            Fp x6479 = x6478 * x26;
            Fp x6480 = Fp(x6479.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x6480;
          }
          Fp x6481 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x6482 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x6483 = x6482 * x1;
          Fp x6484 = x6481 + x6483;
          Fp x6485 = x6457 - x6484;
          Fp x6486 = x6485 * x10;
          if (x6486 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:62");
          Fp x6487 = x6481 * x11;
          Fp x6488 = x6456 + x6487;
          {
            Fp x6489 = (x6488 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x6489;
            Fp x6490 = x6488 - x71;
            Fp x6491 = (x6490 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x6491;
            Fp x6492 = x6488 - x1;
            Fp x6493 = (x6492 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x6493;
            Fp x6494 = x6488 - x2;
            Fp x6495 = (x6494 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x6495;
            Fp x6496 = x6488 - x3;
            Fp x6497 = (x6496 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x6497;
            Fp x6498 = x6488 - x4;
            Fp x6499 = (x6498 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x6499;
            Fp x6500 = x6488 - x5;
            Fp x6501 = (x6500 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x6501;
            Fp x6502 = x6488 - x0;
            Fp x6503 = (x6502 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x6503;
            Fp x6504 = x6488 - x6;
            Fp x6505 = (x6504 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x6505;
            Fp x6506 = x6488 - x7;
            Fp x6507 = (x6506 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x6507;
            Fp x6508 = x6488 - x8;
            Fp x6509 = (x6508 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x6509;
            Fp x6510 = x6488 - x9;
            Fp x6511 = (x6510 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x6511;
            Fp x6512 = x6488 - x38;
            Fp x6513 = (x6512 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x6513;
            Fp x6514 = x6488 - x42;
            Fp x6515 = (x6514 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x6515;
            Fp x6516 = x6488 - x44;
            Fp x6517 = (x6516 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x6517;
            Fp x6518 = x6488 - x45;
            Fp x6519 = (x6518 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x6519;
            Fp x6520 = x6488 - x11;
            Fp x6521 = (x6520 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x6521;
            Fp x6522 = x6488 - x46;
            Fp x6523 = (x6522 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x6523;
            Fp x6524 = x6488 - x47;
            Fp x6525 = (x6524 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x6525;
            Fp x6526 = x6488 - x48;
            Fp x6527 = (x6526 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x6527;
            Fp x6528 = x6488 - x49;
            Fp x6529 = (x6528 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x6529;
            Fp x6530 = x6488 - x50;
            Fp x6531 = (x6530 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x6531;
            Fp x6532 = x6488 - x51;
            Fp x6533 = (x6532 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x6533;
            Fp x6534 = x6488 - x52;
            Fp x6535 = (x6534 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x6535;
            Fp x6536 = x6488 - x39;
            Fp x6537 = (x6536 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x6537;
            Fp x6538 = x6488 - x41;
            Fp x6539 = (x6538 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x6539;
            Fp x6540 = x6488 - x53;
            Fp x6541 = (x6540 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x6541;
            Fp x6542 = x6488 - x40;
            Fp x6543 = (x6542 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x6543;
            Fp x6544 = x6488 - x43;
            Fp x6545 = (x6544 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x6545;
            Fp x6546 = x6488 - x54;
            Fp x6547 = (x6546 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x6547;
            Fp x6548 = x6488 - x55;
            Fp x6549 = (x6548 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x6549;
            Fp x6550 = x6488 - x56;
            Fp x6551 = (x6550 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x6551;
          }
          Fp x6552 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x6553 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x6554 = x6553 * x1;
          Fp x6555 = x6552 + x6554;
          Fp x6556 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x6557 = x6556 * x2;
          Fp x6558 = x6555 + x6557;
          Fp x6559 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x6560 = x6559 * x3;
          Fp x6561 = x6558 + x6560;
          Fp x6562 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x6563 = x6562 * x4;
          Fp x6564 = x6561 + x6563;
          Fp x6565 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x6566 = x6565 * x5;
          Fp x6567 = x6564 + x6566;
          Fp x6568 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x6569 = x6568 * x0;
          Fp x6570 = x6567 + x6569;
          Fp x6571 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x6572 = x6571 * x6;
          Fp x6573 = x6570 + x6572;
          Fp x6574 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x6575 = x6574 * x7;
          Fp x6576 = x6573 + x6575;
          Fp x6577 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x6578 = x6577 * x8;
          Fp x6579 = x6576 + x6578;
          Fp x6580 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x6581 = x6580 * x9;
          Fp x6582 = x6579 + x6581;
          Fp x6583 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x6584 = x6583 * x38;
          Fp x6585 = x6582 + x6584;
          Fp x6586 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x6587 = x6586 * x42;
          Fp x6588 = x6585 + x6587;
          Fp x6589 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x6590 = x6589 * x44;
          Fp x6591 = x6588 + x6590;
          Fp x6592 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x6593 = x6592 * x45;
          Fp x6594 = x6591 + x6593;
          Fp x6595 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x6596 = x6595 * x11;
          Fp x6597 = x6594 + x6596;
          Fp x6598 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x6599 = x6598 * x46;
          Fp x6600 = x6597 + x6599;
          Fp x6601 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x6602 = x6601 * x47;
          Fp x6603 = x6600 + x6602;
          Fp x6604 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x6605 = x6604 * x48;
          Fp x6606 = x6603 + x6605;
          Fp x6607 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x6608 = x6607 * x49;
          Fp x6609 = x6606 + x6608;
          Fp x6610 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x6611 = x6610 * x50;
          Fp x6612 = x6609 + x6611;
          Fp x6613 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x6614 = x6613 * x51;
          Fp x6615 = x6612 + x6614;
          Fp x6616 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x6617 = x6616 * x52;
          Fp x6618 = x6615 + x6617;
          Fp x6619 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x6620 = x6619 * x39;
          Fp x6621 = x6618 + x6620;
          Fp x6622 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x6623 = x6622 * x41;
          Fp x6624 = x6621 + x6623;
          Fp x6625 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x6626 = x6625 * x53;
          Fp x6627 = x6624 + x6626;
          Fp x6628 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x6629 = x6628 * x40;
          Fp x6630 = x6627 + x6629;
          Fp x6631 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x6632 = x6631 * x43;
          Fp x6633 = x6630 + x6632;
          Fp x6634 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x6635 = x6634 * x54;
          Fp x6636 = x6633 + x6635;
          Fp x6637 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x6638 = x6637 * x55;
          Fp x6639 = x6636 + x6638;
          Fp x6640 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x6641 = x6640 * x56;
          Fp x6642 = x6639 + x6641;
          Fp x6643 = x6642 - x6488;
          if (x6643 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x1;
        Fp x6644 = x1005 * x3;
        Fp x6645 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x6646 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x6647 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x6648 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x6649 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x6650 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x6644;
        host_args[2] = x1280;
        host_args[3] = x6645;
        host_args[4] = x6646;
        host_args[5] = x1239;
        host_args[6] = x6647;
        host_args[7] = x6648;
        host_args[8] = x6649;
        host_args[9] = x6650;
        host(ctx, "log", "C%u: pc: %08x Decode: SLTIU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x6651 = x5081 * x5530;
      if (x6651 != 0) {
        if (x1764 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:63");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:63");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x6652 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x6653 = Fp(x6652.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x6653;
            Fp x6654 = x6652 - x6653;
            Fp x6655 = x6654 * x10;
            Fp x6656 = Fp(x6655.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x6656;
            Fp x6657 = x6655 - x6656;
            Fp x6658 = x6657 * x10;
            Fp x6659 = Fp(x6658.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x6659;
            Fp x6660 = x6658 - x6659;
            Fp x6661 = x6660 * x10;
            Fp x6662 = Fp(x6661.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x6662;
            Fp x6663 = x6661 - x6662;
            Fp x6664 = x6663 * x10;
            Fp x6665 = Fp(x6664.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x6665;
            Fp x6666 = x6664 - x6665;
            Fp x6667 = x6666 * x10;
            Fp x6668 = Fp(x6667.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x6668;
            Fp x6669 = x6667 - x6668;
            Fp x6670 = x6669 * x10;
            Fp x6671 = Fp(x6670.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x6671;
            Fp x6672 = x6670 - x6671;
            Fp x6673 = x6672 * x10;
            Fp x6674 = Fp(x6673.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x6674;
          }
          Fp x6675 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x6676 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x6677 = x6676 * x3;
          Fp x6678 = x6675 + x6677;
          Fp x6679 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x6680 = x6679 * x11;
          Fp x6681 = x6678 + x6680;
          Fp x6682 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x6683 = x6682 * x12;
          Fp x6684 = x6681 + x6683;
          Fp x6685 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x6686 = x6685 * x13;
          Fp x6687 = x6684 + x6686;
          Fp x6688 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x6689 = x6688 * x14;
          Fp x6690 = x6687 + x6689;
          Fp x6691 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x6692 = x6691 * x15;
          Fp x6693 = x6690 + x6692;
          Fp x6694 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x6695 = x6694 * x16;
          Fp x6696 = x6693 + x6695;
          Fp x6697 = x6652 - x6696;
          Fp x6698 = x6697 * x33;
          if (x6698 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:63");
          {
            Fp x6699 = Fp(x6679.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x6699;
            Fp x6700 = x6679 - x6699;
            Fp x6701 = x6700 * x26;
            Fp x6702 = Fp(x6701.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x6702;
          }
          Fp x6703 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x6704 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x6705 = x6704 * x1;
          Fp x6706 = x6703 + x6705;
          Fp x6707 = x6679 - x6706;
          Fp x6708 = x6707 * x10;
          if (x6708 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:63");
          Fp x6709 = x6703 * x11;
          Fp x6710 = x6678 + x6709;
          {
            Fp x6711 = (x6710 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x6711;
            Fp x6712 = x6710 - x71;
            Fp x6713 = (x6712 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x6713;
            Fp x6714 = x6710 - x1;
            Fp x6715 = (x6714 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x6715;
            Fp x6716 = x6710 - x2;
            Fp x6717 = (x6716 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x6717;
            Fp x6718 = x6710 - x3;
            Fp x6719 = (x6718 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x6719;
            Fp x6720 = x6710 - x4;
            Fp x6721 = (x6720 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x6721;
            Fp x6722 = x6710 - x5;
            Fp x6723 = (x6722 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x6723;
            Fp x6724 = x6710 - x0;
            Fp x6725 = (x6724 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x6725;
            Fp x6726 = x6710 - x6;
            Fp x6727 = (x6726 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x6727;
            Fp x6728 = x6710 - x7;
            Fp x6729 = (x6728 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x6729;
            Fp x6730 = x6710 - x8;
            Fp x6731 = (x6730 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x6731;
            Fp x6732 = x6710 - x9;
            Fp x6733 = (x6732 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x6733;
            Fp x6734 = x6710 - x38;
            Fp x6735 = (x6734 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x6735;
            Fp x6736 = x6710 - x42;
            Fp x6737 = (x6736 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x6737;
            Fp x6738 = x6710 - x44;
            Fp x6739 = (x6738 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x6739;
            Fp x6740 = x6710 - x45;
            Fp x6741 = (x6740 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x6741;
            Fp x6742 = x6710 - x11;
            Fp x6743 = (x6742 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x6743;
            Fp x6744 = x6710 - x46;
            Fp x6745 = (x6744 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x6745;
            Fp x6746 = x6710 - x47;
            Fp x6747 = (x6746 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x6747;
            Fp x6748 = x6710 - x48;
            Fp x6749 = (x6748 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x6749;
            Fp x6750 = x6710 - x49;
            Fp x6751 = (x6750 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x6751;
            Fp x6752 = x6710 - x50;
            Fp x6753 = (x6752 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x6753;
            Fp x6754 = x6710 - x51;
            Fp x6755 = (x6754 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x6755;
            Fp x6756 = x6710 - x52;
            Fp x6757 = (x6756 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x6757;
            Fp x6758 = x6710 - x39;
            Fp x6759 = (x6758 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x6759;
            Fp x6760 = x6710 - x41;
            Fp x6761 = (x6760 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x6761;
            Fp x6762 = x6710 - x53;
            Fp x6763 = (x6762 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x6763;
            Fp x6764 = x6710 - x40;
            Fp x6765 = (x6764 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x6765;
            Fp x6766 = x6710 - x43;
            Fp x6767 = (x6766 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x6767;
            Fp x6768 = x6710 - x54;
            Fp x6769 = (x6768 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x6769;
            Fp x6770 = x6710 - x55;
            Fp x6771 = (x6770 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x6771;
            Fp x6772 = x6710 - x56;
            Fp x6773 = (x6772 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x6773;
          }
          Fp x6774 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x6775 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x6776 = x6775 * x1;
          Fp x6777 = x6774 + x6776;
          Fp x6778 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x6779 = x6778 * x2;
          Fp x6780 = x6777 + x6779;
          Fp x6781 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x6782 = x6781 * x3;
          Fp x6783 = x6780 + x6782;
          Fp x6784 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x6785 = x6784 * x4;
          Fp x6786 = x6783 + x6785;
          Fp x6787 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x6788 = x6787 * x5;
          Fp x6789 = x6786 + x6788;
          Fp x6790 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x6791 = x6790 * x0;
          Fp x6792 = x6789 + x6791;
          Fp x6793 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x6794 = x6793 * x6;
          Fp x6795 = x6792 + x6794;
          Fp x6796 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x6797 = x6796 * x7;
          Fp x6798 = x6795 + x6797;
          Fp x6799 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x6800 = x6799 * x8;
          Fp x6801 = x6798 + x6800;
          Fp x6802 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x6803 = x6802 * x9;
          Fp x6804 = x6801 + x6803;
          Fp x6805 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x6806 = x6805 * x38;
          Fp x6807 = x6804 + x6806;
          Fp x6808 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x6809 = x6808 * x42;
          Fp x6810 = x6807 + x6809;
          Fp x6811 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x6812 = x6811 * x44;
          Fp x6813 = x6810 + x6812;
          Fp x6814 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x6815 = x6814 * x45;
          Fp x6816 = x6813 + x6815;
          Fp x6817 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x6818 = x6817 * x11;
          Fp x6819 = x6816 + x6818;
          Fp x6820 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x6821 = x6820 * x46;
          Fp x6822 = x6819 + x6821;
          Fp x6823 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x6824 = x6823 * x47;
          Fp x6825 = x6822 + x6824;
          Fp x6826 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x6827 = x6826 * x48;
          Fp x6828 = x6825 + x6827;
          Fp x6829 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x6830 = x6829 * x49;
          Fp x6831 = x6828 + x6830;
          Fp x6832 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x6833 = x6832 * x50;
          Fp x6834 = x6831 + x6833;
          Fp x6835 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x6836 = x6835 * x51;
          Fp x6837 = x6834 + x6836;
          Fp x6838 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x6839 = x6838 * x52;
          Fp x6840 = x6837 + x6839;
          Fp x6841 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x6842 = x6841 * x39;
          Fp x6843 = x6840 + x6842;
          Fp x6844 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x6845 = x6844 * x41;
          Fp x6846 = x6843 + x6845;
          Fp x6847 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x6848 = x6847 * x53;
          Fp x6849 = x6846 + x6848;
          Fp x6850 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x6851 = x6850 * x40;
          Fp x6852 = x6849 + x6851;
          Fp x6853 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x6854 = x6853 * x43;
          Fp x6855 = x6852 + x6854;
          Fp x6856 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x6857 = x6856 * x54;
          Fp x6858 = x6855 + x6857;
          Fp x6859 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x6860 = x6859 * x55;
          Fp x6861 = x6858 + x6860;
          Fp x6862 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x6863 = x6862 * x56;
          Fp x6864 = x6861 + x6863;
          Fp x6865 = x6864 - x6710;
          if (x6865 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x1;
        Fp x6866 = x1005 * x3;
        Fp x6867 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x6868 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x6869 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x6870 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x6871 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x6872 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x6866;
        host_args[2] = x1280;
        host_args[3] = x6867;
        host_args[4] = x6868;
        host_args[5] = x1239;
        host_args[6] = x6869;
        host_args[7] = x6870;
        host_args[8] = x6871;
        host_args[9] = x6872;
        host(ctx, "log", "C%u: pc: %08x Decode: LB r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x6873 = x5306 * x5530;
      if (x6873 != 0) {
        if (x1764 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:64");
        Fp x6874 = x1228 - x71;
        if (x6874 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:64");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x6875 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x6876 = Fp(x6875.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x6876;
            Fp x6877 = x6875 - x6876;
            Fp x6878 = x6877 * x10;
            Fp x6879 = Fp(x6878.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x6879;
            Fp x6880 = x6878 - x6879;
            Fp x6881 = x6880 * x10;
            Fp x6882 = Fp(x6881.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x6882;
            Fp x6883 = x6881 - x6882;
            Fp x6884 = x6883 * x10;
            Fp x6885 = Fp(x6884.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x6885;
            Fp x6886 = x6884 - x6885;
            Fp x6887 = x6886 * x10;
            Fp x6888 = Fp(x6887.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x6888;
            Fp x6889 = x6887 - x6888;
            Fp x6890 = x6889 * x10;
            Fp x6891 = Fp(x6890.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x6891;
            Fp x6892 = x6890 - x6891;
            Fp x6893 = x6892 * x10;
            Fp x6894 = Fp(x6893.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x6894;
            Fp x6895 = x6893 - x6894;
            Fp x6896 = x6895 * x10;
            Fp x6897 = Fp(x6896.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x6897;
          }
          Fp x6898 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x6899 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x6900 = x6899 * x3;
          Fp x6901 = x6898 + x6900;
          Fp x6902 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x6903 = x6902 * x11;
          Fp x6904 = x6901 + x6903;
          Fp x6905 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x6906 = x6905 * x12;
          Fp x6907 = x6904 + x6906;
          Fp x6908 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x6909 = x6908 * x13;
          Fp x6910 = x6907 + x6909;
          Fp x6911 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x6912 = x6911 * x14;
          Fp x6913 = x6910 + x6912;
          Fp x6914 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x6915 = x6914 * x15;
          Fp x6916 = x6913 + x6915;
          Fp x6917 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x6918 = x6917 * x16;
          Fp x6919 = x6916 + x6918;
          Fp x6920 = x6875 - x6919;
          Fp x6921 = x6920 * x33;
          if (x6921 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:64");
          {
            Fp x6922 = Fp(x6902.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x6922;
            Fp x6923 = x6902 - x6922;
            Fp x6924 = x6923 * x26;
            Fp x6925 = Fp(x6924.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x6925;
          }
          Fp x6926 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x6927 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x6928 = x6927 * x1;
          Fp x6929 = x6926 + x6928;
          Fp x6930 = x6902 - x6929;
          Fp x6931 = x6930 * x10;
          if (x6931 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:64");
          Fp x6932 = x6926 * x11;
          Fp x6933 = x6901 + x6932;
          {
            Fp x6934 = (x6933 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x6934;
            Fp x6935 = x6933 - x71;
            Fp x6936 = (x6935 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x6936;
            Fp x6937 = x6933 - x1;
            Fp x6938 = (x6937 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x6938;
            Fp x6939 = x6933 - x2;
            Fp x6940 = (x6939 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x6940;
            Fp x6941 = x6933 - x3;
            Fp x6942 = (x6941 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x6942;
            Fp x6943 = x6933 - x4;
            Fp x6944 = (x6943 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x6944;
            Fp x6945 = x6933 - x5;
            Fp x6946 = (x6945 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x6946;
            Fp x6947 = x6933 - x0;
            Fp x6948 = (x6947 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x6948;
            Fp x6949 = x6933 - x6;
            Fp x6950 = (x6949 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x6950;
            Fp x6951 = x6933 - x7;
            Fp x6952 = (x6951 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x6952;
            Fp x6953 = x6933 - x8;
            Fp x6954 = (x6953 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x6954;
            Fp x6955 = x6933 - x9;
            Fp x6956 = (x6955 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x6956;
            Fp x6957 = x6933 - x38;
            Fp x6958 = (x6957 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x6958;
            Fp x6959 = x6933 - x42;
            Fp x6960 = (x6959 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x6960;
            Fp x6961 = x6933 - x44;
            Fp x6962 = (x6961 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x6962;
            Fp x6963 = x6933 - x45;
            Fp x6964 = (x6963 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x6964;
            Fp x6965 = x6933 - x11;
            Fp x6966 = (x6965 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x6966;
            Fp x6967 = x6933 - x46;
            Fp x6968 = (x6967 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x6968;
            Fp x6969 = x6933 - x47;
            Fp x6970 = (x6969 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x6970;
            Fp x6971 = x6933 - x48;
            Fp x6972 = (x6971 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x6972;
            Fp x6973 = x6933 - x49;
            Fp x6974 = (x6973 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x6974;
            Fp x6975 = x6933 - x50;
            Fp x6976 = (x6975 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x6976;
            Fp x6977 = x6933 - x51;
            Fp x6978 = (x6977 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x6978;
            Fp x6979 = x6933 - x52;
            Fp x6980 = (x6979 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x6980;
            Fp x6981 = x6933 - x39;
            Fp x6982 = (x6981 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x6982;
            Fp x6983 = x6933 - x41;
            Fp x6984 = (x6983 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x6984;
            Fp x6985 = x6933 - x53;
            Fp x6986 = (x6985 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x6986;
            Fp x6987 = x6933 - x40;
            Fp x6988 = (x6987 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x6988;
            Fp x6989 = x6933 - x43;
            Fp x6990 = (x6989 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x6990;
            Fp x6991 = x6933 - x54;
            Fp x6992 = (x6991 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x6992;
            Fp x6993 = x6933 - x55;
            Fp x6994 = (x6993 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x6994;
            Fp x6995 = x6933 - x56;
            Fp x6996 = (x6995 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x6996;
          }
          Fp x6997 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x6998 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x6999 = x6998 * x1;
          Fp x7000 = x6997 + x6999;
          Fp x7001 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x7002 = x7001 * x2;
          Fp x7003 = x7000 + x7002;
          Fp x7004 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x7005 = x7004 * x3;
          Fp x7006 = x7003 + x7005;
          Fp x7007 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x7008 = x7007 * x4;
          Fp x7009 = x7006 + x7008;
          Fp x7010 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x7011 = x7010 * x5;
          Fp x7012 = x7009 + x7011;
          Fp x7013 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x7014 = x7013 * x0;
          Fp x7015 = x7012 + x7014;
          Fp x7016 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x7017 = x7016 * x6;
          Fp x7018 = x7015 + x7017;
          Fp x7019 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x7020 = x7019 * x7;
          Fp x7021 = x7018 + x7020;
          Fp x7022 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x7023 = x7022 * x8;
          Fp x7024 = x7021 + x7023;
          Fp x7025 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x7026 = x7025 * x9;
          Fp x7027 = x7024 + x7026;
          Fp x7028 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x7029 = x7028 * x38;
          Fp x7030 = x7027 + x7029;
          Fp x7031 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x7032 = x7031 * x42;
          Fp x7033 = x7030 + x7032;
          Fp x7034 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x7035 = x7034 * x44;
          Fp x7036 = x7033 + x7035;
          Fp x7037 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x7038 = x7037 * x45;
          Fp x7039 = x7036 + x7038;
          Fp x7040 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x7041 = x7040 * x11;
          Fp x7042 = x7039 + x7041;
          Fp x7043 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x7044 = x7043 * x46;
          Fp x7045 = x7042 + x7044;
          Fp x7046 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x7047 = x7046 * x47;
          Fp x7048 = x7045 + x7047;
          Fp x7049 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x7050 = x7049 * x48;
          Fp x7051 = x7048 + x7050;
          Fp x7052 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x7053 = x7052 * x49;
          Fp x7054 = x7051 + x7053;
          Fp x7055 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x7056 = x7055 * x50;
          Fp x7057 = x7054 + x7056;
          Fp x7058 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x7059 = x7058 * x51;
          Fp x7060 = x7057 + x7059;
          Fp x7061 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x7062 = x7061 * x52;
          Fp x7063 = x7060 + x7062;
          Fp x7064 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x7065 = x7064 * x39;
          Fp x7066 = x7063 + x7065;
          Fp x7067 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x7068 = x7067 * x41;
          Fp x7069 = x7066 + x7068;
          Fp x7070 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x7071 = x7070 * x53;
          Fp x7072 = x7069 + x7071;
          Fp x7073 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x7074 = x7073 * x40;
          Fp x7075 = x7072 + x7074;
          Fp x7076 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x7077 = x7076 * x43;
          Fp x7078 = x7075 + x7077;
          Fp x7079 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x7080 = x7079 * x54;
          Fp x7081 = x7078 + x7080;
          Fp x7082 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x7083 = x7082 * x55;
          Fp x7084 = x7081 + x7083;
          Fp x7085 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x7086 = x7085 * x56;
          Fp x7087 = x7084 + x7086;
          Fp x7088 = x7087 - x6933;
          if (x7088 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x1;
        Fp x7089 = x1005 * x3;
        Fp x7090 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x7091 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x7092 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x7093 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x7094 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x7095 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x7089;
        host_args[2] = x1280;
        host_args[3] = x7090;
        host_args[4] = x7091;
        host_args[5] = x1239;
        host_args[6] = x7092;
        host_args[7] = x7093;
        host_args[8] = x7094;
        host_args[9] = x7095;
        host(ctx, "log", "C%u: pc: %08x Decode: LH r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x7096 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x7097 = x3731 * x7096;
      if (x7097 != 0) {
        if (x1764 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:65");
        Fp x7098 = x1228 - x1;
        if (x7098 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:65");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x7099 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x7100 = Fp(x7099.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x7100;
            Fp x7101 = x7099 - x7100;
            Fp x7102 = x7101 * x10;
            Fp x7103 = Fp(x7102.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x7103;
            Fp x7104 = x7102 - x7103;
            Fp x7105 = x7104 * x10;
            Fp x7106 = Fp(x7105.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x7106;
            Fp x7107 = x7105 - x7106;
            Fp x7108 = x7107 * x10;
            Fp x7109 = Fp(x7108.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x7109;
            Fp x7110 = x7108 - x7109;
            Fp x7111 = x7110 * x10;
            Fp x7112 = Fp(x7111.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x7112;
            Fp x7113 = x7111 - x7112;
            Fp x7114 = x7113 * x10;
            Fp x7115 = Fp(x7114.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x7115;
            Fp x7116 = x7114 - x7115;
            Fp x7117 = x7116 * x10;
            Fp x7118 = Fp(x7117.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x7118;
            Fp x7119 = x7117 - x7118;
            Fp x7120 = x7119 * x10;
            Fp x7121 = Fp(x7120.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x7121;
          }
          Fp x7122 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x7123 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x7124 = x7123 * x3;
          Fp x7125 = x7122 + x7124;
          Fp x7126 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x7127 = x7126 * x11;
          Fp x7128 = x7125 + x7127;
          Fp x7129 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x7130 = x7129 * x12;
          Fp x7131 = x7128 + x7130;
          Fp x7132 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x7133 = x7132 * x13;
          Fp x7134 = x7131 + x7133;
          Fp x7135 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x7136 = x7135 * x14;
          Fp x7137 = x7134 + x7136;
          Fp x7138 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x7139 = x7138 * x15;
          Fp x7140 = x7137 + x7139;
          Fp x7141 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x7142 = x7141 * x16;
          Fp x7143 = x7140 + x7142;
          Fp x7144 = x7099 - x7143;
          Fp x7145 = x7144 * x33;
          if (x7145 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:65");
          {
            Fp x7146 = Fp(x7126.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x7146;
            Fp x7147 = x7126 - x7146;
            Fp x7148 = x7147 * x26;
            Fp x7149 = Fp(x7148.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x7149;
          }
          Fp x7150 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x7151 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x7152 = x7151 * x1;
          Fp x7153 = x7150 + x7152;
          Fp x7154 = x7126 - x7153;
          Fp x7155 = x7154 * x10;
          if (x7155 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:65");
          Fp x7156 = x7150 * x11;
          Fp x7157 = x7125 + x7156;
          {
            Fp x7158 = (x7157 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x7158;
            Fp x7159 = x7157 - x71;
            Fp x7160 = (x7159 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x7160;
            Fp x7161 = x7157 - x1;
            Fp x7162 = (x7161 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x7162;
            Fp x7163 = x7157 - x2;
            Fp x7164 = (x7163 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x7164;
            Fp x7165 = x7157 - x3;
            Fp x7166 = (x7165 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x7166;
            Fp x7167 = x7157 - x4;
            Fp x7168 = (x7167 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x7168;
            Fp x7169 = x7157 - x5;
            Fp x7170 = (x7169 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x7170;
            Fp x7171 = x7157 - x0;
            Fp x7172 = (x7171 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x7172;
            Fp x7173 = x7157 - x6;
            Fp x7174 = (x7173 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x7174;
            Fp x7175 = x7157 - x7;
            Fp x7176 = (x7175 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x7176;
            Fp x7177 = x7157 - x8;
            Fp x7178 = (x7177 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x7178;
            Fp x7179 = x7157 - x9;
            Fp x7180 = (x7179 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x7180;
            Fp x7181 = x7157 - x38;
            Fp x7182 = (x7181 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x7182;
            Fp x7183 = x7157 - x42;
            Fp x7184 = (x7183 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x7184;
            Fp x7185 = x7157 - x44;
            Fp x7186 = (x7185 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x7186;
            Fp x7187 = x7157 - x45;
            Fp x7188 = (x7187 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x7188;
            Fp x7189 = x7157 - x11;
            Fp x7190 = (x7189 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x7190;
            Fp x7191 = x7157 - x46;
            Fp x7192 = (x7191 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x7192;
            Fp x7193 = x7157 - x47;
            Fp x7194 = (x7193 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x7194;
            Fp x7195 = x7157 - x48;
            Fp x7196 = (x7195 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x7196;
            Fp x7197 = x7157 - x49;
            Fp x7198 = (x7197 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x7198;
            Fp x7199 = x7157 - x50;
            Fp x7200 = (x7199 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x7200;
            Fp x7201 = x7157 - x51;
            Fp x7202 = (x7201 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x7202;
            Fp x7203 = x7157 - x52;
            Fp x7204 = (x7203 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x7204;
            Fp x7205 = x7157 - x39;
            Fp x7206 = (x7205 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x7206;
            Fp x7207 = x7157 - x41;
            Fp x7208 = (x7207 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x7208;
            Fp x7209 = x7157 - x53;
            Fp x7210 = (x7209 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x7210;
            Fp x7211 = x7157 - x40;
            Fp x7212 = (x7211 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x7212;
            Fp x7213 = x7157 - x43;
            Fp x7214 = (x7213 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x7214;
            Fp x7215 = x7157 - x54;
            Fp x7216 = (x7215 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x7216;
            Fp x7217 = x7157 - x55;
            Fp x7218 = (x7217 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x7218;
            Fp x7219 = x7157 - x56;
            Fp x7220 = (x7219 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x7220;
          }
          Fp x7221 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x7222 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x7223 = x7222 * x1;
          Fp x7224 = x7221 + x7223;
          Fp x7225 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x7226 = x7225 * x2;
          Fp x7227 = x7224 + x7226;
          Fp x7228 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x7229 = x7228 * x3;
          Fp x7230 = x7227 + x7229;
          Fp x7231 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x7232 = x7231 * x4;
          Fp x7233 = x7230 + x7232;
          Fp x7234 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x7235 = x7234 * x5;
          Fp x7236 = x7233 + x7235;
          Fp x7237 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x7238 = x7237 * x0;
          Fp x7239 = x7236 + x7238;
          Fp x7240 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x7241 = x7240 * x6;
          Fp x7242 = x7239 + x7241;
          Fp x7243 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x7244 = x7243 * x7;
          Fp x7245 = x7242 + x7244;
          Fp x7246 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x7247 = x7246 * x8;
          Fp x7248 = x7245 + x7247;
          Fp x7249 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x7250 = x7249 * x9;
          Fp x7251 = x7248 + x7250;
          Fp x7252 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x7253 = x7252 * x38;
          Fp x7254 = x7251 + x7253;
          Fp x7255 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x7256 = x7255 * x42;
          Fp x7257 = x7254 + x7256;
          Fp x7258 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x7259 = x7258 * x44;
          Fp x7260 = x7257 + x7259;
          Fp x7261 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x7262 = x7261 * x45;
          Fp x7263 = x7260 + x7262;
          Fp x7264 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x7265 = x7264 * x11;
          Fp x7266 = x7263 + x7265;
          Fp x7267 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x7268 = x7267 * x46;
          Fp x7269 = x7266 + x7268;
          Fp x7270 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x7271 = x7270 * x47;
          Fp x7272 = x7269 + x7271;
          Fp x7273 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x7274 = x7273 * x48;
          Fp x7275 = x7272 + x7274;
          Fp x7276 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x7277 = x7276 * x49;
          Fp x7278 = x7275 + x7277;
          Fp x7279 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x7280 = x7279 * x50;
          Fp x7281 = x7278 + x7280;
          Fp x7282 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x7283 = x7282 * x51;
          Fp x7284 = x7281 + x7283;
          Fp x7285 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x7286 = x7285 * x52;
          Fp x7287 = x7284 + x7286;
          Fp x7288 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x7289 = x7288 * x39;
          Fp x7290 = x7287 + x7289;
          Fp x7291 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x7292 = x7291 * x41;
          Fp x7293 = x7290 + x7292;
          Fp x7294 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x7295 = x7294 * x53;
          Fp x7296 = x7293 + x7295;
          Fp x7297 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x7298 = x7297 * x40;
          Fp x7299 = x7296 + x7298;
          Fp x7300 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x7301 = x7300 * x43;
          Fp x7302 = x7299 + x7301;
          Fp x7303 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x7304 = x7303 * x54;
          Fp x7305 = x7302 + x7304;
          Fp x7306 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x7307 = x7306 * x55;
          Fp x7308 = x7305 + x7307;
          Fp x7309 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x7310 = x7309 * x56;
          Fp x7311 = x7308 + x7310;
          Fp x7312 = x7311 - x7157;
          if (x7312 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x2;
        Fp x7313 = x1005 * x3;
        Fp x7314 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x7315 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x7316 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x7317 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x7318 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x7319 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x7313;
        host_args[2] = x1280;
        host_args[3] = x7314;
        host_args[4] = x7315;
        host_args[5] = x1239;
        host_args[6] = x7316;
        host_args[7] = x7317;
        host_args[8] = x7318;
        host_args[9] = x7319;
        host(ctx, "log", "C%u: pc: %08x Decode: LW r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x7320 = x3956 * x7096;
      if (x7320 != 0) {
        if (x1764 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:66");
        Fp x7321 = x1228 - x3;
        if (x7321 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:66");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x7322 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x7323 = Fp(x7322.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x7323;
            Fp x7324 = x7322 - x7323;
            Fp x7325 = x7324 * x10;
            Fp x7326 = Fp(x7325.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x7326;
            Fp x7327 = x7325 - x7326;
            Fp x7328 = x7327 * x10;
            Fp x7329 = Fp(x7328.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x7329;
            Fp x7330 = x7328 - x7329;
            Fp x7331 = x7330 * x10;
            Fp x7332 = Fp(x7331.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x7332;
            Fp x7333 = x7331 - x7332;
            Fp x7334 = x7333 * x10;
            Fp x7335 = Fp(x7334.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x7335;
            Fp x7336 = x7334 - x7335;
            Fp x7337 = x7336 * x10;
            Fp x7338 = Fp(x7337.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x7338;
            Fp x7339 = x7337 - x7338;
            Fp x7340 = x7339 * x10;
            Fp x7341 = Fp(x7340.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x7341;
            Fp x7342 = x7340 - x7341;
            Fp x7343 = x7342 * x10;
            Fp x7344 = Fp(x7343.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x7344;
          }
          Fp x7345 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x7346 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x7347 = x7346 * x3;
          Fp x7348 = x7345 + x7347;
          Fp x7349 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x7350 = x7349 * x11;
          Fp x7351 = x7348 + x7350;
          Fp x7352 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x7353 = x7352 * x12;
          Fp x7354 = x7351 + x7353;
          Fp x7355 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x7356 = x7355 * x13;
          Fp x7357 = x7354 + x7356;
          Fp x7358 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x7359 = x7358 * x14;
          Fp x7360 = x7357 + x7359;
          Fp x7361 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x7362 = x7361 * x15;
          Fp x7363 = x7360 + x7362;
          Fp x7364 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x7365 = x7364 * x16;
          Fp x7366 = x7363 + x7365;
          Fp x7367 = x7322 - x7366;
          Fp x7368 = x7367 * x33;
          if (x7368 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:66");
          {
            Fp x7369 = Fp(x7349.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x7369;
            Fp x7370 = x7349 - x7369;
            Fp x7371 = x7370 * x26;
            Fp x7372 = Fp(x7371.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x7372;
          }
          Fp x7373 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x7374 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x7375 = x7374 * x1;
          Fp x7376 = x7373 + x7375;
          Fp x7377 = x7349 - x7376;
          Fp x7378 = x7377 * x10;
          if (x7378 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:66");
          Fp x7379 = x7373 * x11;
          Fp x7380 = x7348 + x7379;
          {
            Fp x7381 = (x7380 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x7381;
            Fp x7382 = x7380 - x71;
            Fp x7383 = (x7382 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x7383;
            Fp x7384 = x7380 - x1;
            Fp x7385 = (x7384 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x7385;
            Fp x7386 = x7380 - x2;
            Fp x7387 = (x7386 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x7387;
            Fp x7388 = x7380 - x3;
            Fp x7389 = (x7388 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x7389;
            Fp x7390 = x7380 - x4;
            Fp x7391 = (x7390 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x7391;
            Fp x7392 = x7380 - x5;
            Fp x7393 = (x7392 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x7393;
            Fp x7394 = x7380 - x0;
            Fp x7395 = (x7394 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x7395;
            Fp x7396 = x7380 - x6;
            Fp x7397 = (x7396 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x7397;
            Fp x7398 = x7380 - x7;
            Fp x7399 = (x7398 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x7399;
            Fp x7400 = x7380 - x8;
            Fp x7401 = (x7400 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x7401;
            Fp x7402 = x7380 - x9;
            Fp x7403 = (x7402 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x7403;
            Fp x7404 = x7380 - x38;
            Fp x7405 = (x7404 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x7405;
            Fp x7406 = x7380 - x42;
            Fp x7407 = (x7406 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x7407;
            Fp x7408 = x7380 - x44;
            Fp x7409 = (x7408 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x7409;
            Fp x7410 = x7380 - x45;
            Fp x7411 = (x7410 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x7411;
            Fp x7412 = x7380 - x11;
            Fp x7413 = (x7412 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x7413;
            Fp x7414 = x7380 - x46;
            Fp x7415 = (x7414 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x7415;
            Fp x7416 = x7380 - x47;
            Fp x7417 = (x7416 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x7417;
            Fp x7418 = x7380 - x48;
            Fp x7419 = (x7418 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x7419;
            Fp x7420 = x7380 - x49;
            Fp x7421 = (x7420 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x7421;
            Fp x7422 = x7380 - x50;
            Fp x7423 = (x7422 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x7423;
            Fp x7424 = x7380 - x51;
            Fp x7425 = (x7424 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x7425;
            Fp x7426 = x7380 - x52;
            Fp x7427 = (x7426 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x7427;
            Fp x7428 = x7380 - x39;
            Fp x7429 = (x7428 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x7429;
            Fp x7430 = x7380 - x41;
            Fp x7431 = (x7430 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x7431;
            Fp x7432 = x7380 - x53;
            Fp x7433 = (x7432 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x7433;
            Fp x7434 = x7380 - x40;
            Fp x7435 = (x7434 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x7435;
            Fp x7436 = x7380 - x43;
            Fp x7437 = (x7436 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x7437;
            Fp x7438 = x7380 - x54;
            Fp x7439 = (x7438 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x7439;
            Fp x7440 = x7380 - x55;
            Fp x7441 = (x7440 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x7441;
            Fp x7442 = x7380 - x56;
            Fp x7443 = (x7442 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x7443;
          }
          Fp x7444 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x7445 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x7446 = x7445 * x1;
          Fp x7447 = x7444 + x7446;
          Fp x7448 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x7449 = x7448 * x2;
          Fp x7450 = x7447 + x7449;
          Fp x7451 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x7452 = x7451 * x3;
          Fp x7453 = x7450 + x7452;
          Fp x7454 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x7455 = x7454 * x4;
          Fp x7456 = x7453 + x7455;
          Fp x7457 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x7458 = x7457 * x5;
          Fp x7459 = x7456 + x7458;
          Fp x7460 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x7461 = x7460 * x0;
          Fp x7462 = x7459 + x7461;
          Fp x7463 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x7464 = x7463 * x6;
          Fp x7465 = x7462 + x7464;
          Fp x7466 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x7467 = x7466 * x7;
          Fp x7468 = x7465 + x7467;
          Fp x7469 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x7470 = x7469 * x8;
          Fp x7471 = x7468 + x7470;
          Fp x7472 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x7473 = x7472 * x9;
          Fp x7474 = x7471 + x7473;
          Fp x7475 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x7476 = x7475 * x38;
          Fp x7477 = x7474 + x7476;
          Fp x7478 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x7479 = x7478 * x42;
          Fp x7480 = x7477 + x7479;
          Fp x7481 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x7482 = x7481 * x44;
          Fp x7483 = x7480 + x7482;
          Fp x7484 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x7485 = x7484 * x45;
          Fp x7486 = x7483 + x7485;
          Fp x7487 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x7488 = x7487 * x11;
          Fp x7489 = x7486 + x7488;
          Fp x7490 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x7491 = x7490 * x46;
          Fp x7492 = x7489 + x7491;
          Fp x7493 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x7494 = x7493 * x47;
          Fp x7495 = x7492 + x7494;
          Fp x7496 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x7497 = x7496 * x48;
          Fp x7498 = x7495 + x7497;
          Fp x7499 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x7500 = x7499 * x49;
          Fp x7501 = x7498 + x7500;
          Fp x7502 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x7503 = x7502 * x50;
          Fp x7504 = x7501 + x7503;
          Fp x7505 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x7506 = x7505 * x51;
          Fp x7507 = x7504 + x7506;
          Fp x7508 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x7509 = x7508 * x52;
          Fp x7510 = x7507 + x7509;
          Fp x7511 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x7512 = x7511 * x39;
          Fp x7513 = x7510 + x7512;
          Fp x7514 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x7515 = x7514 * x41;
          Fp x7516 = x7513 + x7515;
          Fp x7517 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x7518 = x7517 * x53;
          Fp x7519 = x7516 + x7518;
          Fp x7520 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x7521 = x7520 * x40;
          Fp x7522 = x7519 + x7521;
          Fp x7523 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x7524 = x7523 * x43;
          Fp x7525 = x7522 + x7524;
          Fp x7526 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x7527 = x7526 * x54;
          Fp x7528 = x7525 + x7527;
          Fp x7529 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x7530 = x7529 * x55;
          Fp x7531 = x7528 + x7530;
          Fp x7532 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x7533 = x7532 * x56;
          Fp x7534 = x7531 + x7533;
          Fp x7535 = x7534 - x7380;
          if (x7535 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x2;
        Fp x7536 = x1005 * x3;
        Fp x7537 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x7538 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x7539 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x7540 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x7541 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x7542 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x7536;
        host_args[2] = x1280;
        host_args[3] = x7537;
        host_args[4] = x7538;
        host_args[5] = x1239;
        host_args[6] = x7539;
        host_args[7] = x7540;
        host_args[8] = x7541;
        host_args[9] = x7542;
        host(ctx, "log", "C%u: pc: %08x Decode: LBU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x7543 = x4181 * x7096;
      if (x7543 != 0) {
        if (x1764 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:67");
        Fp x7544 = x1228 - x4;
        if (x7544 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:67");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x7545 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x7546 = Fp(x7545.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x7546;
            Fp x7547 = x7545 - x7546;
            Fp x7548 = x7547 * x10;
            Fp x7549 = Fp(x7548.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x7549;
            Fp x7550 = x7548 - x7549;
            Fp x7551 = x7550 * x10;
            Fp x7552 = Fp(x7551.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x7552;
            Fp x7553 = x7551 - x7552;
            Fp x7554 = x7553 * x10;
            Fp x7555 = Fp(x7554.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x7555;
            Fp x7556 = x7554 - x7555;
            Fp x7557 = x7556 * x10;
            Fp x7558 = Fp(x7557.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x7558;
            Fp x7559 = x7557 - x7558;
            Fp x7560 = x7559 * x10;
            Fp x7561 = Fp(x7560.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x7561;
            Fp x7562 = x7560 - x7561;
            Fp x7563 = x7562 * x10;
            Fp x7564 = Fp(x7563.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x7564;
            Fp x7565 = x7563 - x7564;
            Fp x7566 = x7565 * x10;
            Fp x7567 = Fp(x7566.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x7567;
          }
          Fp x7568 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x7569 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x7570 = x7569 * x3;
          Fp x7571 = x7568 + x7570;
          Fp x7572 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x7573 = x7572 * x11;
          Fp x7574 = x7571 + x7573;
          Fp x7575 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x7576 = x7575 * x12;
          Fp x7577 = x7574 + x7576;
          Fp x7578 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x7579 = x7578 * x13;
          Fp x7580 = x7577 + x7579;
          Fp x7581 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x7582 = x7581 * x14;
          Fp x7583 = x7580 + x7582;
          Fp x7584 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x7585 = x7584 * x15;
          Fp x7586 = x7583 + x7585;
          Fp x7587 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x7588 = x7587 * x16;
          Fp x7589 = x7586 + x7588;
          Fp x7590 = x7545 - x7589;
          Fp x7591 = x7590 * x33;
          if (x7591 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:67");
          {
            Fp x7592 = Fp(x7572.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x7592;
            Fp x7593 = x7572 - x7592;
            Fp x7594 = x7593 * x26;
            Fp x7595 = Fp(x7594.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x7595;
          }
          Fp x7596 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x7597 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x7598 = x7597 * x1;
          Fp x7599 = x7596 + x7598;
          Fp x7600 = x7572 - x7599;
          Fp x7601 = x7600 * x10;
          if (x7601 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:67");
          Fp x7602 = x7596 * x11;
          Fp x7603 = x7571 + x7602;
          {
            Fp x7604 = (x7603 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x7604;
            Fp x7605 = x7603 - x71;
            Fp x7606 = (x7605 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x7606;
            Fp x7607 = x7603 - x1;
            Fp x7608 = (x7607 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x7608;
            Fp x7609 = x7603 - x2;
            Fp x7610 = (x7609 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x7610;
            Fp x7611 = x7603 - x3;
            Fp x7612 = (x7611 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x7612;
            Fp x7613 = x7603 - x4;
            Fp x7614 = (x7613 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x7614;
            Fp x7615 = x7603 - x5;
            Fp x7616 = (x7615 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x7616;
            Fp x7617 = x7603 - x0;
            Fp x7618 = (x7617 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x7618;
            Fp x7619 = x7603 - x6;
            Fp x7620 = (x7619 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x7620;
            Fp x7621 = x7603 - x7;
            Fp x7622 = (x7621 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x7622;
            Fp x7623 = x7603 - x8;
            Fp x7624 = (x7623 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x7624;
            Fp x7625 = x7603 - x9;
            Fp x7626 = (x7625 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x7626;
            Fp x7627 = x7603 - x38;
            Fp x7628 = (x7627 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x7628;
            Fp x7629 = x7603 - x42;
            Fp x7630 = (x7629 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x7630;
            Fp x7631 = x7603 - x44;
            Fp x7632 = (x7631 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x7632;
            Fp x7633 = x7603 - x45;
            Fp x7634 = (x7633 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x7634;
            Fp x7635 = x7603 - x11;
            Fp x7636 = (x7635 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x7636;
            Fp x7637 = x7603 - x46;
            Fp x7638 = (x7637 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x7638;
            Fp x7639 = x7603 - x47;
            Fp x7640 = (x7639 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x7640;
            Fp x7641 = x7603 - x48;
            Fp x7642 = (x7641 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x7642;
            Fp x7643 = x7603 - x49;
            Fp x7644 = (x7643 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x7644;
            Fp x7645 = x7603 - x50;
            Fp x7646 = (x7645 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x7646;
            Fp x7647 = x7603 - x51;
            Fp x7648 = (x7647 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x7648;
            Fp x7649 = x7603 - x52;
            Fp x7650 = (x7649 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x7650;
            Fp x7651 = x7603 - x39;
            Fp x7652 = (x7651 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x7652;
            Fp x7653 = x7603 - x41;
            Fp x7654 = (x7653 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x7654;
            Fp x7655 = x7603 - x53;
            Fp x7656 = (x7655 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x7656;
            Fp x7657 = x7603 - x40;
            Fp x7658 = (x7657 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x7658;
            Fp x7659 = x7603 - x43;
            Fp x7660 = (x7659 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x7660;
            Fp x7661 = x7603 - x54;
            Fp x7662 = (x7661 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x7662;
            Fp x7663 = x7603 - x55;
            Fp x7664 = (x7663 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x7664;
            Fp x7665 = x7603 - x56;
            Fp x7666 = (x7665 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x7666;
          }
          Fp x7667 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x7668 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x7669 = x7668 * x1;
          Fp x7670 = x7667 + x7669;
          Fp x7671 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x7672 = x7671 * x2;
          Fp x7673 = x7670 + x7672;
          Fp x7674 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x7675 = x7674 * x3;
          Fp x7676 = x7673 + x7675;
          Fp x7677 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x7678 = x7677 * x4;
          Fp x7679 = x7676 + x7678;
          Fp x7680 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x7681 = x7680 * x5;
          Fp x7682 = x7679 + x7681;
          Fp x7683 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x7684 = x7683 * x0;
          Fp x7685 = x7682 + x7684;
          Fp x7686 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x7687 = x7686 * x6;
          Fp x7688 = x7685 + x7687;
          Fp x7689 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x7690 = x7689 * x7;
          Fp x7691 = x7688 + x7690;
          Fp x7692 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x7693 = x7692 * x8;
          Fp x7694 = x7691 + x7693;
          Fp x7695 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x7696 = x7695 * x9;
          Fp x7697 = x7694 + x7696;
          Fp x7698 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x7699 = x7698 * x38;
          Fp x7700 = x7697 + x7699;
          Fp x7701 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x7702 = x7701 * x42;
          Fp x7703 = x7700 + x7702;
          Fp x7704 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x7705 = x7704 * x44;
          Fp x7706 = x7703 + x7705;
          Fp x7707 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x7708 = x7707 * x45;
          Fp x7709 = x7706 + x7708;
          Fp x7710 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x7711 = x7710 * x11;
          Fp x7712 = x7709 + x7711;
          Fp x7713 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x7714 = x7713 * x46;
          Fp x7715 = x7712 + x7714;
          Fp x7716 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x7717 = x7716 * x47;
          Fp x7718 = x7715 + x7717;
          Fp x7719 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x7720 = x7719 * x48;
          Fp x7721 = x7718 + x7720;
          Fp x7722 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x7723 = x7722 * x49;
          Fp x7724 = x7721 + x7723;
          Fp x7725 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x7726 = x7725 * x50;
          Fp x7727 = x7724 + x7726;
          Fp x7728 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x7729 = x7728 * x51;
          Fp x7730 = x7727 + x7729;
          Fp x7731 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x7732 = x7731 * x52;
          Fp x7733 = x7730 + x7732;
          Fp x7734 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x7735 = x7734 * x39;
          Fp x7736 = x7733 + x7735;
          Fp x7737 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x7738 = x7737 * x41;
          Fp x7739 = x7736 + x7738;
          Fp x7740 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x7741 = x7740 * x53;
          Fp x7742 = x7739 + x7741;
          Fp x7743 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x7744 = x7743 * x40;
          Fp x7745 = x7742 + x7744;
          Fp x7746 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x7747 = x7746 * x43;
          Fp x7748 = x7745 + x7747;
          Fp x7749 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x7750 = x7749 * x54;
          Fp x7751 = x7748 + x7750;
          Fp x7752 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x7753 = x7752 * x55;
          Fp x7754 = x7751 + x7753;
          Fp x7755 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x7756 = x7755 * x56;
          Fp x7757 = x7754 + x7756;
          Fp x7758 = x7757 - x7603;
          if (x7758 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x2;
        Fp x7759 = x1005 * x3;
        Fp x7760 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x7761 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x7762 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x7763 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x7764 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x7765 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x7759;
        host_args[2] = x1280;
        host_args[3] = x7760;
        host_args[4] = x7761;
        host_args[5] = x1239;
        host_args[6] = x7762;
        host_args[7] = x7763;
        host_args[8] = x7764;
        host_args[9] = x7765;
        host(ctx, "log", "C%u: pc: %08x Decode: LHU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x7766 = x4406 * x7096;
      if (x7766 != 0) {
        Fp x7767 = x1764 - x6;
        if (x7767 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:68");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:68");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1260;
          args[2][115 * steps + cycle] = x1257;
          Fp x7768 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x7769 = Fp(x7768.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x7769;
            Fp x7770 = x7768 - x7769;
            Fp x7771 = x7770 * x10;
            Fp x7772 = Fp(x7771.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x7772;
            Fp x7773 = x7771 - x7772;
            Fp x7774 = x7773 * x10;
            Fp x7775 = Fp(x7774.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x7775;
            Fp x7776 = x7774 - x7775;
            Fp x7777 = x7776 * x10;
            Fp x7778 = Fp(x7777.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x7778;
            Fp x7779 = x7777 - x7778;
            Fp x7780 = x7779 * x10;
            Fp x7781 = Fp(x7780.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x7781;
            Fp x7782 = x7780 - x7781;
            Fp x7783 = x7782 * x10;
            Fp x7784 = Fp(x7783.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x7784;
            Fp x7785 = x7783 - x7784;
            Fp x7786 = x7785 * x10;
            Fp x7787 = Fp(x7786.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x7787;
            Fp x7788 = x7786 - x7787;
            Fp x7789 = x7788 * x10;
            Fp x7790 = Fp(x7789.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x7790;
          }
          Fp x7791 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x7792 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x7793 = x7792 * x3;
          Fp x7794 = x7791 + x7793;
          Fp x7795 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x7796 = x7795 * x11;
          Fp x7797 = x7794 + x7796;
          Fp x7798 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x7799 = x7798 * x12;
          Fp x7800 = x7797 + x7799;
          Fp x7801 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x7802 = x7801 * x13;
          Fp x7803 = x7800 + x7802;
          Fp x7804 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x7805 = x7804 * x14;
          Fp x7806 = x7803 + x7805;
          Fp x7807 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x7808 = x7807 * x15;
          Fp x7809 = x7806 + x7808;
          Fp x7810 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x7811 = x7810 * x16;
          Fp x7812 = x7809 + x7811;
          Fp x7813 = x7768 - x7812;
          Fp x7814 = x7813 * x33;
          if (x7814 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:68");
          {
            Fp x7815 = Fp(x7795.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x7815;
            Fp x7816 = x7795 - x7815;
            Fp x7817 = x7816 * x26;
            Fp x7818 = Fp(x7817.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x7818;
          }
          Fp x7819 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x7820 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x7821 = x7820 * x1;
          Fp x7822 = x7819 + x7821;
          Fp x7823 = x7795 - x7822;
          Fp x7824 = x7823 * x10;
          if (x7824 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:68");
          Fp x7825 = x7819 * x11;
          Fp x7826 = x7794 + x7825;
          {
            Fp x7827 = (x7826 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x7827;
            Fp x7828 = x7826 - x71;
            Fp x7829 = (x7828 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x7829;
            Fp x7830 = x7826 - x1;
            Fp x7831 = (x7830 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x7831;
            Fp x7832 = x7826 - x2;
            Fp x7833 = (x7832 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x7833;
            Fp x7834 = x7826 - x3;
            Fp x7835 = (x7834 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x7835;
            Fp x7836 = x7826 - x4;
            Fp x7837 = (x7836 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x7837;
            Fp x7838 = x7826 - x5;
            Fp x7839 = (x7838 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x7839;
            Fp x7840 = x7826 - x0;
            Fp x7841 = (x7840 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x7841;
            Fp x7842 = x7826 - x6;
            Fp x7843 = (x7842 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x7843;
            Fp x7844 = x7826 - x7;
            Fp x7845 = (x7844 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x7845;
            Fp x7846 = x7826 - x8;
            Fp x7847 = (x7846 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x7847;
            Fp x7848 = x7826 - x9;
            Fp x7849 = (x7848 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x7849;
            Fp x7850 = x7826 - x38;
            Fp x7851 = (x7850 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x7851;
            Fp x7852 = x7826 - x42;
            Fp x7853 = (x7852 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x7853;
            Fp x7854 = x7826 - x44;
            Fp x7855 = (x7854 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x7855;
            Fp x7856 = x7826 - x45;
            Fp x7857 = (x7856 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x7857;
            Fp x7858 = x7826 - x11;
            Fp x7859 = (x7858 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x7859;
            Fp x7860 = x7826 - x46;
            Fp x7861 = (x7860 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x7861;
            Fp x7862 = x7826 - x47;
            Fp x7863 = (x7862 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x7863;
            Fp x7864 = x7826 - x48;
            Fp x7865 = (x7864 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x7865;
            Fp x7866 = x7826 - x49;
            Fp x7867 = (x7866 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x7867;
            Fp x7868 = x7826 - x50;
            Fp x7869 = (x7868 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x7869;
            Fp x7870 = x7826 - x51;
            Fp x7871 = (x7870 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x7871;
            Fp x7872 = x7826 - x52;
            Fp x7873 = (x7872 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x7873;
            Fp x7874 = x7826 - x39;
            Fp x7875 = (x7874 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x7875;
            Fp x7876 = x7826 - x41;
            Fp x7877 = (x7876 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x7877;
            Fp x7878 = x7826 - x53;
            Fp x7879 = (x7878 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x7879;
            Fp x7880 = x7826 - x40;
            Fp x7881 = (x7880 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x7881;
            Fp x7882 = x7826 - x43;
            Fp x7883 = (x7882 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x7883;
            Fp x7884 = x7826 - x54;
            Fp x7885 = (x7884 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x7885;
            Fp x7886 = x7826 - x55;
            Fp x7887 = (x7886 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x7887;
            Fp x7888 = x7826 - x56;
            Fp x7889 = (x7888 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x7889;
          }
          Fp x7890 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x7891 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x7892 = x7891 * x1;
          Fp x7893 = x7890 + x7892;
          Fp x7894 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x7895 = x7894 * x2;
          Fp x7896 = x7893 + x7895;
          Fp x7897 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x7898 = x7897 * x3;
          Fp x7899 = x7896 + x7898;
          Fp x7900 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x7901 = x7900 * x4;
          Fp x7902 = x7899 + x7901;
          Fp x7903 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x7904 = x7903 * x5;
          Fp x7905 = x7902 + x7904;
          Fp x7906 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x7907 = x7906 * x0;
          Fp x7908 = x7905 + x7907;
          Fp x7909 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x7910 = x7909 * x6;
          Fp x7911 = x7908 + x7910;
          Fp x7912 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x7913 = x7912 * x7;
          Fp x7914 = x7911 + x7913;
          Fp x7915 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x7916 = x7915 * x8;
          Fp x7917 = x7914 + x7916;
          Fp x7918 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x7919 = x7918 * x9;
          Fp x7920 = x7917 + x7919;
          Fp x7921 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x7922 = x7921 * x38;
          Fp x7923 = x7920 + x7922;
          Fp x7924 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x7925 = x7924 * x42;
          Fp x7926 = x7923 + x7925;
          Fp x7927 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x7928 = x7927 * x44;
          Fp x7929 = x7926 + x7928;
          Fp x7930 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x7931 = x7930 * x45;
          Fp x7932 = x7929 + x7931;
          Fp x7933 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x7934 = x7933 * x11;
          Fp x7935 = x7932 + x7934;
          Fp x7936 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x7937 = x7936 * x46;
          Fp x7938 = x7935 + x7937;
          Fp x7939 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x7940 = x7939 * x47;
          Fp x7941 = x7938 + x7940;
          Fp x7942 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x7943 = x7942 * x48;
          Fp x7944 = x7941 + x7943;
          Fp x7945 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x7946 = x7945 * x49;
          Fp x7947 = x7944 + x7946;
          Fp x7948 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x7949 = x7948 * x50;
          Fp x7950 = x7947 + x7949;
          Fp x7951 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x7952 = x7951 * x51;
          Fp x7953 = x7950 + x7952;
          Fp x7954 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x7955 = x7954 * x52;
          Fp x7956 = x7953 + x7955;
          Fp x7957 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x7958 = x7957 * x39;
          Fp x7959 = x7956 + x7958;
          Fp x7960 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x7961 = x7960 * x41;
          Fp x7962 = x7959 + x7961;
          Fp x7963 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x7964 = x7963 * x53;
          Fp x7965 = x7962 + x7964;
          Fp x7966 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x7967 = x7966 * x40;
          Fp x7968 = x7965 + x7967;
          Fp x7969 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x7970 = x7969 * x43;
          Fp x7971 = x7968 + x7970;
          Fp x7972 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x7973 = x7972 * x54;
          Fp x7974 = x7971 + x7973;
          Fp x7975 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x7976 = x7975 * x55;
          Fp x7977 = x7974 + x7976;
          Fp x7978 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x7979 = x7978 * x56;
          Fp x7980 = x7977 + x7979;
          Fp x7981 = x7980 - x7826;
          if (x7981 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x2;
        Fp x7982 = x1005 * x3;
        Fp x7983 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x7984 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x7985 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x7986 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x7987 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x7988 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x7982;
        host_args[2] = x1280;
        host_args[3] = x7983;
        host_args[4] = x7984;
        host_args[5] = x1239;
        host_args[6] = x7985;
        host_args[7] = x7986;
        host_args[8] = x7987;
        host_args[9] = x7988;
        host(ctx, "log", "C%u: pc: %08x Decode: SB r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x7989 = x4631 * x7096;
      if (x7989 != 0) {
        Fp x7990 = x1764 - x6;
        if (x7990 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:69");
        Fp x7991 = x1228 - x71;
        if (x7991 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:69");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1260;
          args[2][115 * steps + cycle] = x1257;
          Fp x7992 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x7993 = Fp(x7992.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x7993;
            Fp x7994 = x7992 - x7993;
            Fp x7995 = x7994 * x10;
            Fp x7996 = Fp(x7995.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x7996;
            Fp x7997 = x7995 - x7996;
            Fp x7998 = x7997 * x10;
            Fp x7999 = Fp(x7998.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x7999;
            Fp x8000 = x7998 - x7999;
            Fp x8001 = x8000 * x10;
            Fp x8002 = Fp(x8001.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x8002;
            Fp x8003 = x8001 - x8002;
            Fp x8004 = x8003 * x10;
            Fp x8005 = Fp(x8004.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x8005;
            Fp x8006 = x8004 - x8005;
            Fp x8007 = x8006 * x10;
            Fp x8008 = Fp(x8007.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x8008;
            Fp x8009 = x8007 - x8008;
            Fp x8010 = x8009 * x10;
            Fp x8011 = Fp(x8010.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x8011;
            Fp x8012 = x8010 - x8011;
            Fp x8013 = x8012 * x10;
            Fp x8014 = Fp(x8013.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x8014;
          }
          Fp x8015 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x8016 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x8017 = x8016 * x3;
          Fp x8018 = x8015 + x8017;
          Fp x8019 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x8020 = x8019 * x11;
          Fp x8021 = x8018 + x8020;
          Fp x8022 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x8023 = x8022 * x12;
          Fp x8024 = x8021 + x8023;
          Fp x8025 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x8026 = x8025 * x13;
          Fp x8027 = x8024 + x8026;
          Fp x8028 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x8029 = x8028 * x14;
          Fp x8030 = x8027 + x8029;
          Fp x8031 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x8032 = x8031 * x15;
          Fp x8033 = x8030 + x8032;
          Fp x8034 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x8035 = x8034 * x16;
          Fp x8036 = x8033 + x8035;
          Fp x8037 = x7992 - x8036;
          Fp x8038 = x8037 * x33;
          if (x8038 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:69");
          {
            Fp x8039 = Fp(x8019.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x8039;
            Fp x8040 = x8019 - x8039;
            Fp x8041 = x8040 * x26;
            Fp x8042 = Fp(x8041.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x8042;
          }
          Fp x8043 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x8044 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x8045 = x8044 * x1;
          Fp x8046 = x8043 + x8045;
          Fp x8047 = x8019 - x8046;
          Fp x8048 = x8047 * x10;
          if (x8048 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:69");
          Fp x8049 = x8043 * x11;
          Fp x8050 = x8018 + x8049;
          {
            Fp x8051 = (x8050 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x8051;
            Fp x8052 = x8050 - x71;
            Fp x8053 = (x8052 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x8053;
            Fp x8054 = x8050 - x1;
            Fp x8055 = (x8054 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x8055;
            Fp x8056 = x8050 - x2;
            Fp x8057 = (x8056 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x8057;
            Fp x8058 = x8050 - x3;
            Fp x8059 = (x8058 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x8059;
            Fp x8060 = x8050 - x4;
            Fp x8061 = (x8060 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x8061;
            Fp x8062 = x8050 - x5;
            Fp x8063 = (x8062 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x8063;
            Fp x8064 = x8050 - x0;
            Fp x8065 = (x8064 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x8065;
            Fp x8066 = x8050 - x6;
            Fp x8067 = (x8066 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x8067;
            Fp x8068 = x8050 - x7;
            Fp x8069 = (x8068 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x8069;
            Fp x8070 = x8050 - x8;
            Fp x8071 = (x8070 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x8071;
            Fp x8072 = x8050 - x9;
            Fp x8073 = (x8072 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x8073;
            Fp x8074 = x8050 - x38;
            Fp x8075 = (x8074 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x8075;
            Fp x8076 = x8050 - x42;
            Fp x8077 = (x8076 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x8077;
            Fp x8078 = x8050 - x44;
            Fp x8079 = (x8078 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x8079;
            Fp x8080 = x8050 - x45;
            Fp x8081 = (x8080 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x8081;
            Fp x8082 = x8050 - x11;
            Fp x8083 = (x8082 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x8083;
            Fp x8084 = x8050 - x46;
            Fp x8085 = (x8084 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x8085;
            Fp x8086 = x8050 - x47;
            Fp x8087 = (x8086 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x8087;
            Fp x8088 = x8050 - x48;
            Fp x8089 = (x8088 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x8089;
            Fp x8090 = x8050 - x49;
            Fp x8091 = (x8090 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x8091;
            Fp x8092 = x8050 - x50;
            Fp x8093 = (x8092 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x8093;
            Fp x8094 = x8050 - x51;
            Fp x8095 = (x8094 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x8095;
            Fp x8096 = x8050 - x52;
            Fp x8097 = (x8096 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x8097;
            Fp x8098 = x8050 - x39;
            Fp x8099 = (x8098 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x8099;
            Fp x8100 = x8050 - x41;
            Fp x8101 = (x8100 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x8101;
            Fp x8102 = x8050 - x53;
            Fp x8103 = (x8102 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x8103;
            Fp x8104 = x8050 - x40;
            Fp x8105 = (x8104 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x8105;
            Fp x8106 = x8050 - x43;
            Fp x8107 = (x8106 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x8107;
            Fp x8108 = x8050 - x54;
            Fp x8109 = (x8108 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x8109;
            Fp x8110 = x8050 - x55;
            Fp x8111 = (x8110 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x8111;
            Fp x8112 = x8050 - x56;
            Fp x8113 = (x8112 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x8113;
          }
          Fp x8114 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x8115 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x8116 = x8115 * x1;
          Fp x8117 = x8114 + x8116;
          Fp x8118 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x8119 = x8118 * x2;
          Fp x8120 = x8117 + x8119;
          Fp x8121 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x8122 = x8121 * x3;
          Fp x8123 = x8120 + x8122;
          Fp x8124 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x8125 = x8124 * x4;
          Fp x8126 = x8123 + x8125;
          Fp x8127 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x8128 = x8127 * x5;
          Fp x8129 = x8126 + x8128;
          Fp x8130 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x8131 = x8130 * x0;
          Fp x8132 = x8129 + x8131;
          Fp x8133 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x8134 = x8133 * x6;
          Fp x8135 = x8132 + x8134;
          Fp x8136 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x8137 = x8136 * x7;
          Fp x8138 = x8135 + x8137;
          Fp x8139 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x8140 = x8139 * x8;
          Fp x8141 = x8138 + x8140;
          Fp x8142 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x8143 = x8142 * x9;
          Fp x8144 = x8141 + x8143;
          Fp x8145 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x8146 = x8145 * x38;
          Fp x8147 = x8144 + x8146;
          Fp x8148 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x8149 = x8148 * x42;
          Fp x8150 = x8147 + x8149;
          Fp x8151 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x8152 = x8151 * x44;
          Fp x8153 = x8150 + x8152;
          Fp x8154 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x8155 = x8154 * x45;
          Fp x8156 = x8153 + x8155;
          Fp x8157 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x8158 = x8157 * x11;
          Fp x8159 = x8156 + x8158;
          Fp x8160 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x8161 = x8160 * x46;
          Fp x8162 = x8159 + x8161;
          Fp x8163 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x8164 = x8163 * x47;
          Fp x8165 = x8162 + x8164;
          Fp x8166 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x8167 = x8166 * x48;
          Fp x8168 = x8165 + x8167;
          Fp x8169 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x8170 = x8169 * x49;
          Fp x8171 = x8168 + x8170;
          Fp x8172 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x8173 = x8172 * x50;
          Fp x8174 = x8171 + x8173;
          Fp x8175 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x8176 = x8175 * x51;
          Fp x8177 = x8174 + x8176;
          Fp x8178 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x8179 = x8178 * x52;
          Fp x8180 = x8177 + x8179;
          Fp x8181 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x8182 = x8181 * x39;
          Fp x8183 = x8180 + x8182;
          Fp x8184 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x8185 = x8184 * x41;
          Fp x8186 = x8183 + x8185;
          Fp x8187 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x8188 = x8187 * x53;
          Fp x8189 = x8186 + x8188;
          Fp x8190 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x8191 = x8190 * x40;
          Fp x8192 = x8189 + x8191;
          Fp x8193 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x8194 = x8193 * x43;
          Fp x8195 = x8192 + x8194;
          Fp x8196 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x8197 = x8196 * x54;
          Fp x8198 = x8195 + x8197;
          Fp x8199 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x8200 = x8199 * x55;
          Fp x8201 = x8198 + x8200;
          Fp x8202 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x8203 = x8202 * x56;
          Fp x8204 = x8201 + x8203;
          Fp x8205 = x8204 - x8050;
          if (x8205 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x2;
        Fp x8206 = x1005 * x3;
        Fp x8207 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x8208 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x8209 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x8210 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x8211 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x8212 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x8206;
        host_args[2] = x1280;
        host_args[3] = x8207;
        host_args[4] = x8208;
        host_args[5] = x1239;
        host_args[6] = x8209;
        host_args[7] = x8210;
        host_args[8] = x8211;
        host_args[9] = x8212;
        host(ctx, "log", "C%u: pc: %08x Decode: SH r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x8213 = x4856 * x7096;
      if (x8213 != 0) {
        Fp x8214 = x1764 - x6;
        if (x8214 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:70");
        Fp x8215 = x1228 - x1;
        if (x8215 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:70");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1260;
          args[2][115 * steps + cycle] = x1257;
          Fp x8216 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x8217 = Fp(x8216.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x8217;
            Fp x8218 = x8216 - x8217;
            Fp x8219 = x8218 * x10;
            Fp x8220 = Fp(x8219.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x8220;
            Fp x8221 = x8219 - x8220;
            Fp x8222 = x8221 * x10;
            Fp x8223 = Fp(x8222.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x8223;
            Fp x8224 = x8222 - x8223;
            Fp x8225 = x8224 * x10;
            Fp x8226 = Fp(x8225.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x8226;
            Fp x8227 = x8225 - x8226;
            Fp x8228 = x8227 * x10;
            Fp x8229 = Fp(x8228.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x8229;
            Fp x8230 = x8228 - x8229;
            Fp x8231 = x8230 * x10;
            Fp x8232 = Fp(x8231.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x8232;
            Fp x8233 = x8231 - x8232;
            Fp x8234 = x8233 * x10;
            Fp x8235 = Fp(x8234.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x8235;
            Fp x8236 = x8234 - x8235;
            Fp x8237 = x8236 * x10;
            Fp x8238 = Fp(x8237.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x8238;
          }
          Fp x8239 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x8240 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x8241 = x8240 * x3;
          Fp x8242 = x8239 + x8241;
          Fp x8243 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x8244 = x8243 * x11;
          Fp x8245 = x8242 + x8244;
          Fp x8246 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x8247 = x8246 * x12;
          Fp x8248 = x8245 + x8247;
          Fp x8249 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x8250 = x8249 * x13;
          Fp x8251 = x8248 + x8250;
          Fp x8252 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x8253 = x8252 * x14;
          Fp x8254 = x8251 + x8253;
          Fp x8255 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x8256 = x8255 * x15;
          Fp x8257 = x8254 + x8256;
          Fp x8258 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x8259 = x8258 * x16;
          Fp x8260 = x8257 + x8259;
          Fp x8261 = x8216 - x8260;
          Fp x8262 = x8261 * x33;
          if (x8262 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:70");
          {
            Fp x8263 = Fp(x8243.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x8263;
            Fp x8264 = x8243 - x8263;
            Fp x8265 = x8264 * x26;
            Fp x8266 = Fp(x8265.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x8266;
          }
          Fp x8267 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x8268 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x8269 = x8268 * x1;
          Fp x8270 = x8267 + x8269;
          Fp x8271 = x8243 - x8270;
          Fp x8272 = x8271 * x10;
          if (x8272 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:70");
          Fp x8273 = x8267 * x11;
          Fp x8274 = x8242 + x8273;
          {
            Fp x8275 = (x8274 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x8275;
            Fp x8276 = x8274 - x71;
            Fp x8277 = (x8276 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x8277;
            Fp x8278 = x8274 - x1;
            Fp x8279 = (x8278 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x8279;
            Fp x8280 = x8274 - x2;
            Fp x8281 = (x8280 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x8281;
            Fp x8282 = x8274 - x3;
            Fp x8283 = (x8282 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x8283;
            Fp x8284 = x8274 - x4;
            Fp x8285 = (x8284 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x8285;
            Fp x8286 = x8274 - x5;
            Fp x8287 = (x8286 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x8287;
            Fp x8288 = x8274 - x0;
            Fp x8289 = (x8288 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x8289;
            Fp x8290 = x8274 - x6;
            Fp x8291 = (x8290 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x8291;
            Fp x8292 = x8274 - x7;
            Fp x8293 = (x8292 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x8293;
            Fp x8294 = x8274 - x8;
            Fp x8295 = (x8294 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x8295;
            Fp x8296 = x8274 - x9;
            Fp x8297 = (x8296 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x8297;
            Fp x8298 = x8274 - x38;
            Fp x8299 = (x8298 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x8299;
            Fp x8300 = x8274 - x42;
            Fp x8301 = (x8300 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x8301;
            Fp x8302 = x8274 - x44;
            Fp x8303 = (x8302 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x8303;
            Fp x8304 = x8274 - x45;
            Fp x8305 = (x8304 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x8305;
            Fp x8306 = x8274 - x11;
            Fp x8307 = (x8306 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x8307;
            Fp x8308 = x8274 - x46;
            Fp x8309 = (x8308 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x8309;
            Fp x8310 = x8274 - x47;
            Fp x8311 = (x8310 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x8311;
            Fp x8312 = x8274 - x48;
            Fp x8313 = (x8312 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x8313;
            Fp x8314 = x8274 - x49;
            Fp x8315 = (x8314 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x8315;
            Fp x8316 = x8274 - x50;
            Fp x8317 = (x8316 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x8317;
            Fp x8318 = x8274 - x51;
            Fp x8319 = (x8318 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x8319;
            Fp x8320 = x8274 - x52;
            Fp x8321 = (x8320 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x8321;
            Fp x8322 = x8274 - x39;
            Fp x8323 = (x8322 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x8323;
            Fp x8324 = x8274 - x41;
            Fp x8325 = (x8324 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x8325;
            Fp x8326 = x8274 - x53;
            Fp x8327 = (x8326 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x8327;
            Fp x8328 = x8274 - x40;
            Fp x8329 = (x8328 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x8329;
            Fp x8330 = x8274 - x43;
            Fp x8331 = (x8330 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x8331;
            Fp x8332 = x8274 - x54;
            Fp x8333 = (x8332 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x8333;
            Fp x8334 = x8274 - x55;
            Fp x8335 = (x8334 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x8335;
            Fp x8336 = x8274 - x56;
            Fp x8337 = (x8336 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x8337;
          }
          Fp x8338 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x8339 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x8340 = x8339 * x1;
          Fp x8341 = x8338 + x8340;
          Fp x8342 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x8343 = x8342 * x2;
          Fp x8344 = x8341 + x8343;
          Fp x8345 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x8346 = x8345 * x3;
          Fp x8347 = x8344 + x8346;
          Fp x8348 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x8349 = x8348 * x4;
          Fp x8350 = x8347 + x8349;
          Fp x8351 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x8352 = x8351 * x5;
          Fp x8353 = x8350 + x8352;
          Fp x8354 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x8355 = x8354 * x0;
          Fp x8356 = x8353 + x8355;
          Fp x8357 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x8358 = x8357 * x6;
          Fp x8359 = x8356 + x8358;
          Fp x8360 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x8361 = x8360 * x7;
          Fp x8362 = x8359 + x8361;
          Fp x8363 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x8364 = x8363 * x8;
          Fp x8365 = x8362 + x8364;
          Fp x8366 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x8367 = x8366 * x9;
          Fp x8368 = x8365 + x8367;
          Fp x8369 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x8370 = x8369 * x38;
          Fp x8371 = x8368 + x8370;
          Fp x8372 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x8373 = x8372 * x42;
          Fp x8374 = x8371 + x8373;
          Fp x8375 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x8376 = x8375 * x44;
          Fp x8377 = x8374 + x8376;
          Fp x8378 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x8379 = x8378 * x45;
          Fp x8380 = x8377 + x8379;
          Fp x8381 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x8382 = x8381 * x11;
          Fp x8383 = x8380 + x8382;
          Fp x8384 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x8385 = x8384 * x46;
          Fp x8386 = x8383 + x8385;
          Fp x8387 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x8388 = x8387 * x47;
          Fp x8389 = x8386 + x8388;
          Fp x8390 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x8391 = x8390 * x48;
          Fp x8392 = x8389 + x8391;
          Fp x8393 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x8394 = x8393 * x49;
          Fp x8395 = x8392 + x8394;
          Fp x8396 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x8397 = x8396 * x50;
          Fp x8398 = x8395 + x8397;
          Fp x8399 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x8400 = x8399 * x51;
          Fp x8401 = x8398 + x8400;
          Fp x8402 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x8403 = x8402 * x52;
          Fp x8404 = x8401 + x8403;
          Fp x8405 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x8406 = x8405 * x39;
          Fp x8407 = x8404 + x8406;
          Fp x8408 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x8409 = x8408 * x41;
          Fp x8410 = x8407 + x8409;
          Fp x8411 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x8412 = x8411 * x53;
          Fp x8413 = x8410 + x8412;
          Fp x8414 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x8415 = x8414 * x40;
          Fp x8416 = x8413 + x8415;
          Fp x8417 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x8418 = x8417 * x43;
          Fp x8419 = x8416 + x8418;
          Fp x8420 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x8421 = x8420 * x54;
          Fp x8422 = x8419 + x8421;
          Fp x8423 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x8424 = x8423 * x55;
          Fp x8425 = x8422 + x8424;
          Fp x8426 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x8427 = x8426 * x56;
          Fp x8428 = x8425 + x8427;
          Fp x8429 = x8428 - x8274;
          if (x8429 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x2;
        Fp x8430 = x1005 * x3;
        Fp x8431 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x8432 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x8433 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x8434 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x8435 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x8436 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x8430;
        host_args[2] = x1280;
        host_args[3] = x8431;
        host_args[4] = x8432;
        host_args[5] = x1239;
        host_args[6] = x8433;
        host_args[7] = x8434;
        host_args[8] = x8435;
        host_args[9] = x8436;
        host(ctx, "log", "C%u: pc: %08x Decode: SW r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x8437 = x5081 * x7096;
      if (x8437 != 0) {
        Fp x8438 = x1764 - x39;
        if (x8438 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:71");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:71");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1264;
          args[2][115 * steps + cycle] = x1257;
          Fp x8439 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x8440 = Fp(x8439.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x8440;
            Fp x8441 = x8439 - x8440;
            Fp x8442 = x8441 * x10;
            Fp x8443 = Fp(x8442.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x8443;
            Fp x8444 = x8442 - x8443;
            Fp x8445 = x8444 * x10;
            Fp x8446 = Fp(x8445.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x8446;
            Fp x8447 = x8445 - x8446;
            Fp x8448 = x8447 * x10;
            Fp x8449 = Fp(x8448.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x8449;
            Fp x8450 = x8448 - x8449;
            Fp x8451 = x8450 * x10;
            Fp x8452 = Fp(x8451.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x8452;
            Fp x8453 = x8451 - x8452;
            Fp x8454 = x8453 * x10;
            Fp x8455 = Fp(x8454.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x8455;
            Fp x8456 = x8454 - x8455;
            Fp x8457 = x8456 * x10;
            Fp x8458 = Fp(x8457.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x8458;
            Fp x8459 = x8457 - x8458;
            Fp x8460 = x8459 * x10;
            Fp x8461 = Fp(x8460.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x8461;
          }
          Fp x8462 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x8463 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x8464 = x8463 * x3;
          Fp x8465 = x8462 + x8464;
          Fp x8466 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x8467 = x8466 * x11;
          Fp x8468 = x8465 + x8467;
          Fp x8469 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x8470 = x8469 * x12;
          Fp x8471 = x8468 + x8470;
          Fp x8472 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x8473 = x8472 * x13;
          Fp x8474 = x8471 + x8473;
          Fp x8475 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x8476 = x8475 * x14;
          Fp x8477 = x8474 + x8476;
          Fp x8478 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x8479 = x8478 * x15;
          Fp x8480 = x8477 + x8479;
          Fp x8481 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x8482 = x8481 * x16;
          Fp x8483 = x8480 + x8482;
          Fp x8484 = x8439 - x8483;
          Fp x8485 = x8484 * x33;
          if (x8485 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:71");
          {
            Fp x8486 = Fp(x8466.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x8486;
            Fp x8487 = x8466 - x8486;
            Fp x8488 = x8487 * x26;
            Fp x8489 = Fp(x8488.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x8489;
          }
          Fp x8490 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x8491 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x8492 = x8491 * x1;
          Fp x8493 = x8490 + x8492;
          Fp x8494 = x8466 - x8493;
          Fp x8495 = x8494 * x10;
          if (x8495 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:71");
          Fp x8496 = x8490 * x11;
          Fp x8497 = x8465 + x8496;
          {
            Fp x8498 = (x8497 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x8498;
            Fp x8499 = x8497 - x71;
            Fp x8500 = (x8499 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x8500;
            Fp x8501 = x8497 - x1;
            Fp x8502 = (x8501 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x8502;
            Fp x8503 = x8497 - x2;
            Fp x8504 = (x8503 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x8504;
            Fp x8505 = x8497 - x3;
            Fp x8506 = (x8505 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x8506;
            Fp x8507 = x8497 - x4;
            Fp x8508 = (x8507 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x8508;
            Fp x8509 = x8497 - x5;
            Fp x8510 = (x8509 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x8510;
            Fp x8511 = x8497 - x0;
            Fp x8512 = (x8511 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x8512;
            Fp x8513 = x8497 - x6;
            Fp x8514 = (x8513 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x8514;
            Fp x8515 = x8497 - x7;
            Fp x8516 = (x8515 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x8516;
            Fp x8517 = x8497 - x8;
            Fp x8518 = (x8517 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x8518;
            Fp x8519 = x8497 - x9;
            Fp x8520 = (x8519 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x8520;
            Fp x8521 = x8497 - x38;
            Fp x8522 = (x8521 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x8522;
            Fp x8523 = x8497 - x42;
            Fp x8524 = (x8523 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x8524;
            Fp x8525 = x8497 - x44;
            Fp x8526 = (x8525 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x8526;
            Fp x8527 = x8497 - x45;
            Fp x8528 = (x8527 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x8528;
            Fp x8529 = x8497 - x11;
            Fp x8530 = (x8529 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x8530;
            Fp x8531 = x8497 - x46;
            Fp x8532 = (x8531 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x8532;
            Fp x8533 = x8497 - x47;
            Fp x8534 = (x8533 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x8534;
            Fp x8535 = x8497 - x48;
            Fp x8536 = (x8535 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x8536;
            Fp x8537 = x8497 - x49;
            Fp x8538 = (x8537 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x8538;
            Fp x8539 = x8497 - x50;
            Fp x8540 = (x8539 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x8540;
            Fp x8541 = x8497 - x51;
            Fp x8542 = (x8541 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x8542;
            Fp x8543 = x8497 - x52;
            Fp x8544 = (x8543 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x8544;
            Fp x8545 = x8497 - x39;
            Fp x8546 = (x8545 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x8546;
            Fp x8547 = x8497 - x41;
            Fp x8548 = (x8547 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x8548;
            Fp x8549 = x8497 - x53;
            Fp x8550 = (x8549 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x8550;
            Fp x8551 = x8497 - x40;
            Fp x8552 = (x8551 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x8552;
            Fp x8553 = x8497 - x43;
            Fp x8554 = (x8553 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x8554;
            Fp x8555 = x8497 - x54;
            Fp x8556 = (x8555 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x8556;
            Fp x8557 = x8497 - x55;
            Fp x8558 = (x8557 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x8558;
            Fp x8559 = x8497 - x56;
            Fp x8560 = (x8559 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x8560;
          }
          Fp x8561 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x8562 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x8563 = x8562 * x1;
          Fp x8564 = x8561 + x8563;
          Fp x8565 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x8566 = x8565 * x2;
          Fp x8567 = x8564 + x8566;
          Fp x8568 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x8569 = x8568 * x3;
          Fp x8570 = x8567 + x8569;
          Fp x8571 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x8572 = x8571 * x4;
          Fp x8573 = x8570 + x8572;
          Fp x8574 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x8575 = x8574 * x5;
          Fp x8576 = x8573 + x8575;
          Fp x8577 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x8578 = x8577 * x0;
          Fp x8579 = x8576 + x8578;
          Fp x8580 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x8581 = x8580 * x6;
          Fp x8582 = x8579 + x8581;
          Fp x8583 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x8584 = x8583 * x7;
          Fp x8585 = x8582 + x8584;
          Fp x8586 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x8587 = x8586 * x8;
          Fp x8588 = x8585 + x8587;
          Fp x8589 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x8590 = x8589 * x9;
          Fp x8591 = x8588 + x8590;
          Fp x8592 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x8593 = x8592 * x38;
          Fp x8594 = x8591 + x8593;
          Fp x8595 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x8596 = x8595 * x42;
          Fp x8597 = x8594 + x8596;
          Fp x8598 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x8599 = x8598 * x44;
          Fp x8600 = x8597 + x8599;
          Fp x8601 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x8602 = x8601 * x45;
          Fp x8603 = x8600 + x8602;
          Fp x8604 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x8605 = x8604 * x11;
          Fp x8606 = x8603 + x8605;
          Fp x8607 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x8608 = x8607 * x46;
          Fp x8609 = x8606 + x8608;
          Fp x8610 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x8611 = x8610 * x47;
          Fp x8612 = x8609 + x8611;
          Fp x8613 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x8614 = x8613 * x48;
          Fp x8615 = x8612 + x8614;
          Fp x8616 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x8617 = x8616 * x49;
          Fp x8618 = x8615 + x8617;
          Fp x8619 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x8620 = x8619 * x50;
          Fp x8621 = x8618 + x8620;
          Fp x8622 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x8623 = x8622 * x51;
          Fp x8624 = x8621 + x8623;
          Fp x8625 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x8626 = x8625 * x52;
          Fp x8627 = x8624 + x8626;
          Fp x8628 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x8629 = x8628 * x39;
          Fp x8630 = x8627 + x8629;
          Fp x8631 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x8632 = x8631 * x41;
          Fp x8633 = x8630 + x8632;
          Fp x8634 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x8635 = x8634 * x53;
          Fp x8636 = x8633 + x8635;
          Fp x8637 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x8638 = x8637 * x40;
          Fp x8639 = x8636 + x8638;
          Fp x8640 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x8641 = x8640 * x43;
          Fp x8642 = x8639 + x8641;
          Fp x8643 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x8644 = x8643 * x54;
          Fp x8645 = x8642 + x8644;
          Fp x8646 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x8647 = x8646 * x55;
          Fp x8648 = x8645 + x8647;
          Fp x8649 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x8650 = x8649 * x56;
          Fp x8651 = x8648 + x8650;
          Fp x8652 = x8651 - x8497;
          if (x8652 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x2;
        Fp x8653 = x1005 * x3;
        Fp x8654 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x8655 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x8656 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x8657 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x8658 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x8659 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x8653;
        host_args[2] = x1280;
        host_args[3] = x8654;
        host_args[4] = x8655;
        host_args[5] = x1239;
        host_args[6] = x8656;
        host_args[7] = x8657;
        host_args[8] = x8658;
        host_args[9] = x8659;
        host(ctx, "log", "C%u: pc: %08x Decode: BEQ r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x8660 = x5306 * x7096;
      if (x8660 != 0) {
        Fp x8661 = x1764 - x39;
        if (x8661 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:72");
        Fp x8662 = x1228 - x71;
        if (x8662 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:72");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1264;
          args[2][115 * steps + cycle] = x1257;
          Fp x8663 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x8664 = Fp(x8663.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x8664;
            Fp x8665 = x8663 - x8664;
            Fp x8666 = x8665 * x10;
            Fp x8667 = Fp(x8666.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x8667;
            Fp x8668 = x8666 - x8667;
            Fp x8669 = x8668 * x10;
            Fp x8670 = Fp(x8669.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x8670;
            Fp x8671 = x8669 - x8670;
            Fp x8672 = x8671 * x10;
            Fp x8673 = Fp(x8672.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x8673;
            Fp x8674 = x8672 - x8673;
            Fp x8675 = x8674 * x10;
            Fp x8676 = Fp(x8675.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x8676;
            Fp x8677 = x8675 - x8676;
            Fp x8678 = x8677 * x10;
            Fp x8679 = Fp(x8678.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x8679;
            Fp x8680 = x8678 - x8679;
            Fp x8681 = x8680 * x10;
            Fp x8682 = Fp(x8681.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x8682;
            Fp x8683 = x8681 - x8682;
            Fp x8684 = x8683 * x10;
            Fp x8685 = Fp(x8684.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x8685;
          }
          Fp x8686 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x8687 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x8688 = x8687 * x3;
          Fp x8689 = x8686 + x8688;
          Fp x8690 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x8691 = x8690 * x11;
          Fp x8692 = x8689 + x8691;
          Fp x8693 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x8694 = x8693 * x12;
          Fp x8695 = x8692 + x8694;
          Fp x8696 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x8697 = x8696 * x13;
          Fp x8698 = x8695 + x8697;
          Fp x8699 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x8700 = x8699 * x14;
          Fp x8701 = x8698 + x8700;
          Fp x8702 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x8703 = x8702 * x15;
          Fp x8704 = x8701 + x8703;
          Fp x8705 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x8706 = x8705 * x16;
          Fp x8707 = x8704 + x8706;
          Fp x8708 = x8663 - x8707;
          Fp x8709 = x8708 * x33;
          if (x8709 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:72");
          {
            Fp x8710 = Fp(x8690.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x8710;
            Fp x8711 = x8690 - x8710;
            Fp x8712 = x8711 * x26;
            Fp x8713 = Fp(x8712.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x8713;
          }
          Fp x8714 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x8715 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x8716 = x8715 * x1;
          Fp x8717 = x8714 + x8716;
          Fp x8718 = x8690 - x8717;
          Fp x8719 = x8718 * x10;
          if (x8719 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:72");
          Fp x8720 = x8714 * x11;
          Fp x8721 = x8689 + x8720;
          {
            Fp x8722 = (x8721 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x8722;
            Fp x8723 = x8721 - x71;
            Fp x8724 = (x8723 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x8724;
            Fp x8725 = x8721 - x1;
            Fp x8726 = (x8725 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x8726;
            Fp x8727 = x8721 - x2;
            Fp x8728 = (x8727 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x8728;
            Fp x8729 = x8721 - x3;
            Fp x8730 = (x8729 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x8730;
            Fp x8731 = x8721 - x4;
            Fp x8732 = (x8731 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x8732;
            Fp x8733 = x8721 - x5;
            Fp x8734 = (x8733 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x8734;
            Fp x8735 = x8721 - x0;
            Fp x8736 = (x8735 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x8736;
            Fp x8737 = x8721 - x6;
            Fp x8738 = (x8737 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x8738;
            Fp x8739 = x8721 - x7;
            Fp x8740 = (x8739 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x8740;
            Fp x8741 = x8721 - x8;
            Fp x8742 = (x8741 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x8742;
            Fp x8743 = x8721 - x9;
            Fp x8744 = (x8743 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x8744;
            Fp x8745 = x8721 - x38;
            Fp x8746 = (x8745 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x8746;
            Fp x8747 = x8721 - x42;
            Fp x8748 = (x8747 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x8748;
            Fp x8749 = x8721 - x44;
            Fp x8750 = (x8749 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x8750;
            Fp x8751 = x8721 - x45;
            Fp x8752 = (x8751 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x8752;
            Fp x8753 = x8721 - x11;
            Fp x8754 = (x8753 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x8754;
            Fp x8755 = x8721 - x46;
            Fp x8756 = (x8755 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x8756;
            Fp x8757 = x8721 - x47;
            Fp x8758 = (x8757 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x8758;
            Fp x8759 = x8721 - x48;
            Fp x8760 = (x8759 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x8760;
            Fp x8761 = x8721 - x49;
            Fp x8762 = (x8761 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x8762;
            Fp x8763 = x8721 - x50;
            Fp x8764 = (x8763 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x8764;
            Fp x8765 = x8721 - x51;
            Fp x8766 = (x8765 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x8766;
            Fp x8767 = x8721 - x52;
            Fp x8768 = (x8767 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x8768;
            Fp x8769 = x8721 - x39;
            Fp x8770 = (x8769 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x8770;
            Fp x8771 = x8721 - x41;
            Fp x8772 = (x8771 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x8772;
            Fp x8773 = x8721 - x53;
            Fp x8774 = (x8773 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x8774;
            Fp x8775 = x8721 - x40;
            Fp x8776 = (x8775 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x8776;
            Fp x8777 = x8721 - x43;
            Fp x8778 = (x8777 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x8778;
            Fp x8779 = x8721 - x54;
            Fp x8780 = (x8779 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x8780;
            Fp x8781 = x8721 - x55;
            Fp x8782 = (x8781 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x8782;
            Fp x8783 = x8721 - x56;
            Fp x8784 = (x8783 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x8784;
          }
          Fp x8785 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x8786 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x8787 = x8786 * x1;
          Fp x8788 = x8785 + x8787;
          Fp x8789 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x8790 = x8789 * x2;
          Fp x8791 = x8788 + x8790;
          Fp x8792 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x8793 = x8792 * x3;
          Fp x8794 = x8791 + x8793;
          Fp x8795 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x8796 = x8795 * x4;
          Fp x8797 = x8794 + x8796;
          Fp x8798 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x8799 = x8798 * x5;
          Fp x8800 = x8797 + x8799;
          Fp x8801 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x8802 = x8801 * x0;
          Fp x8803 = x8800 + x8802;
          Fp x8804 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x8805 = x8804 * x6;
          Fp x8806 = x8803 + x8805;
          Fp x8807 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x8808 = x8807 * x7;
          Fp x8809 = x8806 + x8808;
          Fp x8810 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x8811 = x8810 * x8;
          Fp x8812 = x8809 + x8811;
          Fp x8813 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x8814 = x8813 * x9;
          Fp x8815 = x8812 + x8814;
          Fp x8816 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x8817 = x8816 * x38;
          Fp x8818 = x8815 + x8817;
          Fp x8819 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x8820 = x8819 * x42;
          Fp x8821 = x8818 + x8820;
          Fp x8822 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x8823 = x8822 * x44;
          Fp x8824 = x8821 + x8823;
          Fp x8825 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x8826 = x8825 * x45;
          Fp x8827 = x8824 + x8826;
          Fp x8828 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x8829 = x8828 * x11;
          Fp x8830 = x8827 + x8829;
          Fp x8831 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x8832 = x8831 * x46;
          Fp x8833 = x8830 + x8832;
          Fp x8834 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x8835 = x8834 * x47;
          Fp x8836 = x8833 + x8835;
          Fp x8837 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x8838 = x8837 * x48;
          Fp x8839 = x8836 + x8838;
          Fp x8840 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x8841 = x8840 * x49;
          Fp x8842 = x8839 + x8841;
          Fp x8843 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x8844 = x8843 * x50;
          Fp x8845 = x8842 + x8844;
          Fp x8846 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x8847 = x8846 * x51;
          Fp x8848 = x8845 + x8847;
          Fp x8849 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x8850 = x8849 * x52;
          Fp x8851 = x8848 + x8850;
          Fp x8852 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x8853 = x8852 * x39;
          Fp x8854 = x8851 + x8853;
          Fp x8855 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x8856 = x8855 * x41;
          Fp x8857 = x8854 + x8856;
          Fp x8858 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x8859 = x8858 * x53;
          Fp x8860 = x8857 + x8859;
          Fp x8861 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x8862 = x8861 * x40;
          Fp x8863 = x8860 + x8862;
          Fp x8864 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x8865 = x8864 * x43;
          Fp x8866 = x8863 + x8865;
          Fp x8867 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x8868 = x8867 * x54;
          Fp x8869 = x8866 + x8868;
          Fp x8870 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x8871 = x8870 * x55;
          Fp x8872 = x8869 + x8871;
          Fp x8873 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x8874 = x8873 * x56;
          Fp x8875 = x8872 + x8874;
          Fp x8876 = x8875 - x8721;
          if (x8876 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x2;
        Fp x8877 = x1005 * x3;
        Fp x8878 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x8879 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x8880 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x8881 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x8882 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x8883 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x8877;
        host_args[2] = x1280;
        host_args[3] = x8878;
        host_args[4] = x8879;
        host_args[5] = x1239;
        host_args[6] = x8880;
        host_args[7] = x8881;
        host_args[8] = x8882;
        host_args[9] = x8883;
        host(ctx, "log", "C%u: pc: %08x Decode: BNE r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x8884 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x8885 = x3731 * x8884;
      if (x8885 != 0) {
        Fp x8886 = x1764 - x39;
        if (x8886 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:73");
        Fp x8887 = x1228 - x3;
        if (x8887 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:73");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1264;
          args[2][115 * steps + cycle] = x1257;
          Fp x8888 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x8889 = Fp(x8888.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x8889;
            Fp x8890 = x8888 - x8889;
            Fp x8891 = x8890 * x10;
            Fp x8892 = Fp(x8891.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x8892;
            Fp x8893 = x8891 - x8892;
            Fp x8894 = x8893 * x10;
            Fp x8895 = Fp(x8894.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x8895;
            Fp x8896 = x8894 - x8895;
            Fp x8897 = x8896 * x10;
            Fp x8898 = Fp(x8897.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x8898;
            Fp x8899 = x8897 - x8898;
            Fp x8900 = x8899 * x10;
            Fp x8901 = Fp(x8900.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x8901;
            Fp x8902 = x8900 - x8901;
            Fp x8903 = x8902 * x10;
            Fp x8904 = Fp(x8903.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x8904;
            Fp x8905 = x8903 - x8904;
            Fp x8906 = x8905 * x10;
            Fp x8907 = Fp(x8906.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x8907;
            Fp x8908 = x8906 - x8907;
            Fp x8909 = x8908 * x10;
            Fp x8910 = Fp(x8909.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x8910;
          }
          Fp x8911 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x8912 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x8913 = x8912 * x3;
          Fp x8914 = x8911 + x8913;
          Fp x8915 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x8916 = x8915 * x11;
          Fp x8917 = x8914 + x8916;
          Fp x8918 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x8919 = x8918 * x12;
          Fp x8920 = x8917 + x8919;
          Fp x8921 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x8922 = x8921 * x13;
          Fp x8923 = x8920 + x8922;
          Fp x8924 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x8925 = x8924 * x14;
          Fp x8926 = x8923 + x8925;
          Fp x8927 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x8928 = x8927 * x15;
          Fp x8929 = x8926 + x8928;
          Fp x8930 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x8931 = x8930 * x16;
          Fp x8932 = x8929 + x8931;
          Fp x8933 = x8888 - x8932;
          Fp x8934 = x8933 * x33;
          if (x8934 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:73");
          {
            Fp x8935 = Fp(x8915.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x8935;
            Fp x8936 = x8915 - x8935;
            Fp x8937 = x8936 * x26;
            Fp x8938 = Fp(x8937.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x8938;
          }
          Fp x8939 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x8940 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x8941 = x8940 * x1;
          Fp x8942 = x8939 + x8941;
          Fp x8943 = x8915 - x8942;
          Fp x8944 = x8943 * x10;
          if (x8944 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:73");
          Fp x8945 = x8939 * x11;
          Fp x8946 = x8914 + x8945;
          {
            Fp x8947 = (x8946 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x8947;
            Fp x8948 = x8946 - x71;
            Fp x8949 = (x8948 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x8949;
            Fp x8950 = x8946 - x1;
            Fp x8951 = (x8950 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x8951;
            Fp x8952 = x8946 - x2;
            Fp x8953 = (x8952 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x8953;
            Fp x8954 = x8946 - x3;
            Fp x8955 = (x8954 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x8955;
            Fp x8956 = x8946 - x4;
            Fp x8957 = (x8956 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x8957;
            Fp x8958 = x8946 - x5;
            Fp x8959 = (x8958 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x8959;
            Fp x8960 = x8946 - x0;
            Fp x8961 = (x8960 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x8961;
            Fp x8962 = x8946 - x6;
            Fp x8963 = (x8962 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x8963;
            Fp x8964 = x8946 - x7;
            Fp x8965 = (x8964 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x8965;
            Fp x8966 = x8946 - x8;
            Fp x8967 = (x8966 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x8967;
            Fp x8968 = x8946 - x9;
            Fp x8969 = (x8968 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x8969;
            Fp x8970 = x8946 - x38;
            Fp x8971 = (x8970 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x8971;
            Fp x8972 = x8946 - x42;
            Fp x8973 = (x8972 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x8973;
            Fp x8974 = x8946 - x44;
            Fp x8975 = (x8974 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x8975;
            Fp x8976 = x8946 - x45;
            Fp x8977 = (x8976 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x8977;
            Fp x8978 = x8946 - x11;
            Fp x8979 = (x8978 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x8979;
            Fp x8980 = x8946 - x46;
            Fp x8981 = (x8980 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x8981;
            Fp x8982 = x8946 - x47;
            Fp x8983 = (x8982 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x8983;
            Fp x8984 = x8946 - x48;
            Fp x8985 = (x8984 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x8985;
            Fp x8986 = x8946 - x49;
            Fp x8987 = (x8986 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x8987;
            Fp x8988 = x8946 - x50;
            Fp x8989 = (x8988 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x8989;
            Fp x8990 = x8946 - x51;
            Fp x8991 = (x8990 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x8991;
            Fp x8992 = x8946 - x52;
            Fp x8993 = (x8992 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x8993;
            Fp x8994 = x8946 - x39;
            Fp x8995 = (x8994 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x8995;
            Fp x8996 = x8946 - x41;
            Fp x8997 = (x8996 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x8997;
            Fp x8998 = x8946 - x53;
            Fp x8999 = (x8998 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x8999;
            Fp x9000 = x8946 - x40;
            Fp x9001 = (x9000 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x9001;
            Fp x9002 = x8946 - x43;
            Fp x9003 = (x9002 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x9003;
            Fp x9004 = x8946 - x54;
            Fp x9005 = (x9004 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x9005;
            Fp x9006 = x8946 - x55;
            Fp x9007 = (x9006 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x9007;
            Fp x9008 = x8946 - x56;
            Fp x9009 = (x9008 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x9009;
          }
          Fp x9010 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x9011 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x9012 = x9011 * x1;
          Fp x9013 = x9010 + x9012;
          Fp x9014 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x9015 = x9014 * x2;
          Fp x9016 = x9013 + x9015;
          Fp x9017 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x9018 = x9017 * x3;
          Fp x9019 = x9016 + x9018;
          Fp x9020 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x9021 = x9020 * x4;
          Fp x9022 = x9019 + x9021;
          Fp x9023 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x9024 = x9023 * x5;
          Fp x9025 = x9022 + x9024;
          Fp x9026 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x9027 = x9026 * x0;
          Fp x9028 = x9025 + x9027;
          Fp x9029 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x9030 = x9029 * x6;
          Fp x9031 = x9028 + x9030;
          Fp x9032 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x9033 = x9032 * x7;
          Fp x9034 = x9031 + x9033;
          Fp x9035 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x9036 = x9035 * x8;
          Fp x9037 = x9034 + x9036;
          Fp x9038 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x9039 = x9038 * x9;
          Fp x9040 = x9037 + x9039;
          Fp x9041 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x9042 = x9041 * x38;
          Fp x9043 = x9040 + x9042;
          Fp x9044 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x9045 = x9044 * x42;
          Fp x9046 = x9043 + x9045;
          Fp x9047 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x9048 = x9047 * x44;
          Fp x9049 = x9046 + x9048;
          Fp x9050 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x9051 = x9050 * x45;
          Fp x9052 = x9049 + x9051;
          Fp x9053 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x9054 = x9053 * x11;
          Fp x9055 = x9052 + x9054;
          Fp x9056 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x9057 = x9056 * x46;
          Fp x9058 = x9055 + x9057;
          Fp x9059 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x9060 = x9059 * x47;
          Fp x9061 = x9058 + x9060;
          Fp x9062 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x9063 = x9062 * x48;
          Fp x9064 = x9061 + x9063;
          Fp x9065 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x9066 = x9065 * x49;
          Fp x9067 = x9064 + x9066;
          Fp x9068 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x9069 = x9068 * x50;
          Fp x9070 = x9067 + x9069;
          Fp x9071 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x9072 = x9071 * x51;
          Fp x9073 = x9070 + x9072;
          Fp x9074 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x9075 = x9074 * x52;
          Fp x9076 = x9073 + x9075;
          Fp x9077 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x9078 = x9077 * x39;
          Fp x9079 = x9076 + x9078;
          Fp x9080 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x9081 = x9080 * x41;
          Fp x9082 = x9079 + x9081;
          Fp x9083 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x9084 = x9083 * x53;
          Fp x9085 = x9082 + x9084;
          Fp x9086 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x9087 = x9086 * x40;
          Fp x9088 = x9085 + x9087;
          Fp x9089 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x9090 = x9089 * x43;
          Fp x9091 = x9088 + x9090;
          Fp x9092 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x9093 = x9092 * x54;
          Fp x9094 = x9091 + x9093;
          Fp x9095 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x9096 = x9095 * x55;
          Fp x9097 = x9094 + x9096;
          Fp x9098 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x9099 = x9098 * x56;
          Fp x9100 = x9097 + x9099;
          Fp x9101 = x9100 - x8946;
          if (x9101 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x3;
        Fp x9102 = x1005 * x3;
        Fp x9103 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x9104 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x9105 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x9106 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x9107 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x9108 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x9102;
        host_args[2] = x1280;
        host_args[3] = x9103;
        host_args[4] = x9104;
        host_args[5] = x1239;
        host_args[6] = x9105;
        host_args[7] = x9106;
        host_args[8] = x9107;
        host_args[9] = x9108;
        host(ctx, "log", "C%u: pc: %08x Decode: BLT r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x9109 = x3956 * x8884;
      if (x9109 != 0) {
        Fp x9110 = x1764 - x39;
        if (x9110 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:74");
        Fp x9111 = x1228 - x4;
        if (x9111 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:74");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1264;
          args[2][115 * steps + cycle] = x1257;
          Fp x9112 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x9113 = Fp(x9112.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x9113;
            Fp x9114 = x9112 - x9113;
            Fp x9115 = x9114 * x10;
            Fp x9116 = Fp(x9115.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x9116;
            Fp x9117 = x9115 - x9116;
            Fp x9118 = x9117 * x10;
            Fp x9119 = Fp(x9118.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x9119;
            Fp x9120 = x9118 - x9119;
            Fp x9121 = x9120 * x10;
            Fp x9122 = Fp(x9121.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x9122;
            Fp x9123 = x9121 - x9122;
            Fp x9124 = x9123 * x10;
            Fp x9125 = Fp(x9124.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x9125;
            Fp x9126 = x9124 - x9125;
            Fp x9127 = x9126 * x10;
            Fp x9128 = Fp(x9127.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x9128;
            Fp x9129 = x9127 - x9128;
            Fp x9130 = x9129 * x10;
            Fp x9131 = Fp(x9130.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x9131;
            Fp x9132 = x9130 - x9131;
            Fp x9133 = x9132 * x10;
            Fp x9134 = Fp(x9133.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x9134;
          }
          Fp x9135 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x9136 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x9137 = x9136 * x3;
          Fp x9138 = x9135 + x9137;
          Fp x9139 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x9140 = x9139 * x11;
          Fp x9141 = x9138 + x9140;
          Fp x9142 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x9143 = x9142 * x12;
          Fp x9144 = x9141 + x9143;
          Fp x9145 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x9146 = x9145 * x13;
          Fp x9147 = x9144 + x9146;
          Fp x9148 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x9149 = x9148 * x14;
          Fp x9150 = x9147 + x9149;
          Fp x9151 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x9152 = x9151 * x15;
          Fp x9153 = x9150 + x9152;
          Fp x9154 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x9155 = x9154 * x16;
          Fp x9156 = x9153 + x9155;
          Fp x9157 = x9112 - x9156;
          Fp x9158 = x9157 * x33;
          if (x9158 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:74");
          {
            Fp x9159 = Fp(x9139.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x9159;
            Fp x9160 = x9139 - x9159;
            Fp x9161 = x9160 * x26;
            Fp x9162 = Fp(x9161.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x9162;
          }
          Fp x9163 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x9164 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x9165 = x9164 * x1;
          Fp x9166 = x9163 + x9165;
          Fp x9167 = x9139 - x9166;
          Fp x9168 = x9167 * x10;
          if (x9168 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:74");
          Fp x9169 = x9163 * x11;
          Fp x9170 = x9138 + x9169;
          {
            Fp x9171 = (x9170 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x9171;
            Fp x9172 = x9170 - x71;
            Fp x9173 = (x9172 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x9173;
            Fp x9174 = x9170 - x1;
            Fp x9175 = (x9174 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x9175;
            Fp x9176 = x9170 - x2;
            Fp x9177 = (x9176 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x9177;
            Fp x9178 = x9170 - x3;
            Fp x9179 = (x9178 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x9179;
            Fp x9180 = x9170 - x4;
            Fp x9181 = (x9180 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x9181;
            Fp x9182 = x9170 - x5;
            Fp x9183 = (x9182 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x9183;
            Fp x9184 = x9170 - x0;
            Fp x9185 = (x9184 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x9185;
            Fp x9186 = x9170 - x6;
            Fp x9187 = (x9186 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x9187;
            Fp x9188 = x9170 - x7;
            Fp x9189 = (x9188 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x9189;
            Fp x9190 = x9170 - x8;
            Fp x9191 = (x9190 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x9191;
            Fp x9192 = x9170 - x9;
            Fp x9193 = (x9192 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x9193;
            Fp x9194 = x9170 - x38;
            Fp x9195 = (x9194 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x9195;
            Fp x9196 = x9170 - x42;
            Fp x9197 = (x9196 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x9197;
            Fp x9198 = x9170 - x44;
            Fp x9199 = (x9198 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x9199;
            Fp x9200 = x9170 - x45;
            Fp x9201 = (x9200 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x9201;
            Fp x9202 = x9170 - x11;
            Fp x9203 = (x9202 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x9203;
            Fp x9204 = x9170 - x46;
            Fp x9205 = (x9204 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x9205;
            Fp x9206 = x9170 - x47;
            Fp x9207 = (x9206 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x9207;
            Fp x9208 = x9170 - x48;
            Fp x9209 = (x9208 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x9209;
            Fp x9210 = x9170 - x49;
            Fp x9211 = (x9210 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x9211;
            Fp x9212 = x9170 - x50;
            Fp x9213 = (x9212 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x9213;
            Fp x9214 = x9170 - x51;
            Fp x9215 = (x9214 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x9215;
            Fp x9216 = x9170 - x52;
            Fp x9217 = (x9216 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x9217;
            Fp x9218 = x9170 - x39;
            Fp x9219 = (x9218 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x9219;
            Fp x9220 = x9170 - x41;
            Fp x9221 = (x9220 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x9221;
            Fp x9222 = x9170 - x53;
            Fp x9223 = (x9222 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x9223;
            Fp x9224 = x9170 - x40;
            Fp x9225 = (x9224 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x9225;
            Fp x9226 = x9170 - x43;
            Fp x9227 = (x9226 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x9227;
            Fp x9228 = x9170 - x54;
            Fp x9229 = (x9228 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x9229;
            Fp x9230 = x9170 - x55;
            Fp x9231 = (x9230 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x9231;
            Fp x9232 = x9170 - x56;
            Fp x9233 = (x9232 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x9233;
          }
          Fp x9234 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x9235 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x9236 = x9235 * x1;
          Fp x9237 = x9234 + x9236;
          Fp x9238 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x9239 = x9238 * x2;
          Fp x9240 = x9237 + x9239;
          Fp x9241 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x9242 = x9241 * x3;
          Fp x9243 = x9240 + x9242;
          Fp x9244 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x9245 = x9244 * x4;
          Fp x9246 = x9243 + x9245;
          Fp x9247 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x9248 = x9247 * x5;
          Fp x9249 = x9246 + x9248;
          Fp x9250 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x9251 = x9250 * x0;
          Fp x9252 = x9249 + x9251;
          Fp x9253 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x9254 = x9253 * x6;
          Fp x9255 = x9252 + x9254;
          Fp x9256 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x9257 = x9256 * x7;
          Fp x9258 = x9255 + x9257;
          Fp x9259 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x9260 = x9259 * x8;
          Fp x9261 = x9258 + x9260;
          Fp x9262 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x9263 = x9262 * x9;
          Fp x9264 = x9261 + x9263;
          Fp x9265 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x9266 = x9265 * x38;
          Fp x9267 = x9264 + x9266;
          Fp x9268 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x9269 = x9268 * x42;
          Fp x9270 = x9267 + x9269;
          Fp x9271 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x9272 = x9271 * x44;
          Fp x9273 = x9270 + x9272;
          Fp x9274 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x9275 = x9274 * x45;
          Fp x9276 = x9273 + x9275;
          Fp x9277 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x9278 = x9277 * x11;
          Fp x9279 = x9276 + x9278;
          Fp x9280 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x9281 = x9280 * x46;
          Fp x9282 = x9279 + x9281;
          Fp x9283 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x9284 = x9283 * x47;
          Fp x9285 = x9282 + x9284;
          Fp x9286 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x9287 = x9286 * x48;
          Fp x9288 = x9285 + x9287;
          Fp x9289 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x9290 = x9289 * x49;
          Fp x9291 = x9288 + x9290;
          Fp x9292 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x9293 = x9292 * x50;
          Fp x9294 = x9291 + x9293;
          Fp x9295 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x9296 = x9295 * x51;
          Fp x9297 = x9294 + x9296;
          Fp x9298 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x9299 = x9298 * x52;
          Fp x9300 = x9297 + x9299;
          Fp x9301 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x9302 = x9301 * x39;
          Fp x9303 = x9300 + x9302;
          Fp x9304 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x9305 = x9304 * x41;
          Fp x9306 = x9303 + x9305;
          Fp x9307 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x9308 = x9307 * x53;
          Fp x9309 = x9306 + x9308;
          Fp x9310 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x9311 = x9310 * x40;
          Fp x9312 = x9309 + x9311;
          Fp x9313 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x9314 = x9313 * x43;
          Fp x9315 = x9312 + x9314;
          Fp x9316 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x9317 = x9316 * x54;
          Fp x9318 = x9315 + x9317;
          Fp x9319 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x9320 = x9319 * x55;
          Fp x9321 = x9318 + x9320;
          Fp x9322 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x9323 = x9322 * x56;
          Fp x9324 = x9321 + x9323;
          Fp x9325 = x9324 - x9170;
          if (x9325 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x3;
        Fp x9326 = x1005 * x3;
        Fp x9327 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x9328 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x9329 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x9330 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x9331 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x9332 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x9326;
        host_args[2] = x1280;
        host_args[3] = x9327;
        host_args[4] = x9328;
        host_args[5] = x1239;
        host_args[6] = x9329;
        host_args[7] = x9330;
        host_args[8] = x9331;
        host_args[9] = x9332;
        host(ctx, "log", "C%u: pc: %08x Decode: BGE r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x9333 = x4181 * x8884;
      if (x9333 != 0) {
        Fp x9334 = x1764 - x39;
        if (x9334 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:75");
        Fp x9335 = x1228 - x5;
        if (x9335 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:75");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1264;
          args[2][115 * steps + cycle] = x1257;
          Fp x9336 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x9337 = Fp(x9336.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x9337;
            Fp x9338 = x9336 - x9337;
            Fp x9339 = x9338 * x10;
            Fp x9340 = Fp(x9339.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x9340;
            Fp x9341 = x9339 - x9340;
            Fp x9342 = x9341 * x10;
            Fp x9343 = Fp(x9342.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x9343;
            Fp x9344 = x9342 - x9343;
            Fp x9345 = x9344 * x10;
            Fp x9346 = Fp(x9345.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x9346;
            Fp x9347 = x9345 - x9346;
            Fp x9348 = x9347 * x10;
            Fp x9349 = Fp(x9348.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x9349;
            Fp x9350 = x9348 - x9349;
            Fp x9351 = x9350 * x10;
            Fp x9352 = Fp(x9351.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x9352;
            Fp x9353 = x9351 - x9352;
            Fp x9354 = x9353 * x10;
            Fp x9355 = Fp(x9354.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x9355;
            Fp x9356 = x9354 - x9355;
            Fp x9357 = x9356 * x10;
            Fp x9358 = Fp(x9357.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x9358;
          }
          Fp x9359 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x9360 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x9361 = x9360 * x3;
          Fp x9362 = x9359 + x9361;
          Fp x9363 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x9364 = x9363 * x11;
          Fp x9365 = x9362 + x9364;
          Fp x9366 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x9367 = x9366 * x12;
          Fp x9368 = x9365 + x9367;
          Fp x9369 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x9370 = x9369 * x13;
          Fp x9371 = x9368 + x9370;
          Fp x9372 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x9373 = x9372 * x14;
          Fp x9374 = x9371 + x9373;
          Fp x9375 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x9376 = x9375 * x15;
          Fp x9377 = x9374 + x9376;
          Fp x9378 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x9379 = x9378 * x16;
          Fp x9380 = x9377 + x9379;
          Fp x9381 = x9336 - x9380;
          Fp x9382 = x9381 * x33;
          if (x9382 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:75");
          {
            Fp x9383 = Fp(x9363.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x9383;
            Fp x9384 = x9363 - x9383;
            Fp x9385 = x9384 * x26;
            Fp x9386 = Fp(x9385.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x9386;
          }
          Fp x9387 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x9388 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x9389 = x9388 * x1;
          Fp x9390 = x9387 + x9389;
          Fp x9391 = x9363 - x9390;
          Fp x9392 = x9391 * x10;
          if (x9392 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:75");
          Fp x9393 = x9387 * x11;
          Fp x9394 = x9362 + x9393;
          {
            Fp x9395 = (x9394 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x9395;
            Fp x9396 = x9394 - x71;
            Fp x9397 = (x9396 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x9397;
            Fp x9398 = x9394 - x1;
            Fp x9399 = (x9398 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x9399;
            Fp x9400 = x9394 - x2;
            Fp x9401 = (x9400 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x9401;
            Fp x9402 = x9394 - x3;
            Fp x9403 = (x9402 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x9403;
            Fp x9404 = x9394 - x4;
            Fp x9405 = (x9404 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x9405;
            Fp x9406 = x9394 - x5;
            Fp x9407 = (x9406 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x9407;
            Fp x9408 = x9394 - x0;
            Fp x9409 = (x9408 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x9409;
            Fp x9410 = x9394 - x6;
            Fp x9411 = (x9410 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x9411;
            Fp x9412 = x9394 - x7;
            Fp x9413 = (x9412 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x9413;
            Fp x9414 = x9394 - x8;
            Fp x9415 = (x9414 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x9415;
            Fp x9416 = x9394 - x9;
            Fp x9417 = (x9416 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x9417;
            Fp x9418 = x9394 - x38;
            Fp x9419 = (x9418 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x9419;
            Fp x9420 = x9394 - x42;
            Fp x9421 = (x9420 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x9421;
            Fp x9422 = x9394 - x44;
            Fp x9423 = (x9422 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x9423;
            Fp x9424 = x9394 - x45;
            Fp x9425 = (x9424 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x9425;
            Fp x9426 = x9394 - x11;
            Fp x9427 = (x9426 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x9427;
            Fp x9428 = x9394 - x46;
            Fp x9429 = (x9428 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x9429;
            Fp x9430 = x9394 - x47;
            Fp x9431 = (x9430 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x9431;
            Fp x9432 = x9394 - x48;
            Fp x9433 = (x9432 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x9433;
            Fp x9434 = x9394 - x49;
            Fp x9435 = (x9434 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x9435;
            Fp x9436 = x9394 - x50;
            Fp x9437 = (x9436 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x9437;
            Fp x9438 = x9394 - x51;
            Fp x9439 = (x9438 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x9439;
            Fp x9440 = x9394 - x52;
            Fp x9441 = (x9440 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x9441;
            Fp x9442 = x9394 - x39;
            Fp x9443 = (x9442 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x9443;
            Fp x9444 = x9394 - x41;
            Fp x9445 = (x9444 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x9445;
            Fp x9446 = x9394 - x53;
            Fp x9447 = (x9446 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x9447;
            Fp x9448 = x9394 - x40;
            Fp x9449 = (x9448 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x9449;
            Fp x9450 = x9394 - x43;
            Fp x9451 = (x9450 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x9451;
            Fp x9452 = x9394 - x54;
            Fp x9453 = (x9452 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x9453;
            Fp x9454 = x9394 - x55;
            Fp x9455 = (x9454 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x9455;
            Fp x9456 = x9394 - x56;
            Fp x9457 = (x9456 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x9457;
          }
          Fp x9458 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x9459 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x9460 = x9459 * x1;
          Fp x9461 = x9458 + x9460;
          Fp x9462 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x9463 = x9462 * x2;
          Fp x9464 = x9461 + x9463;
          Fp x9465 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x9466 = x9465 * x3;
          Fp x9467 = x9464 + x9466;
          Fp x9468 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x9469 = x9468 * x4;
          Fp x9470 = x9467 + x9469;
          Fp x9471 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x9472 = x9471 * x5;
          Fp x9473 = x9470 + x9472;
          Fp x9474 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x9475 = x9474 * x0;
          Fp x9476 = x9473 + x9475;
          Fp x9477 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x9478 = x9477 * x6;
          Fp x9479 = x9476 + x9478;
          Fp x9480 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x9481 = x9480 * x7;
          Fp x9482 = x9479 + x9481;
          Fp x9483 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x9484 = x9483 * x8;
          Fp x9485 = x9482 + x9484;
          Fp x9486 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x9487 = x9486 * x9;
          Fp x9488 = x9485 + x9487;
          Fp x9489 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x9490 = x9489 * x38;
          Fp x9491 = x9488 + x9490;
          Fp x9492 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x9493 = x9492 * x42;
          Fp x9494 = x9491 + x9493;
          Fp x9495 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x9496 = x9495 * x44;
          Fp x9497 = x9494 + x9496;
          Fp x9498 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x9499 = x9498 * x45;
          Fp x9500 = x9497 + x9499;
          Fp x9501 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x9502 = x9501 * x11;
          Fp x9503 = x9500 + x9502;
          Fp x9504 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x9505 = x9504 * x46;
          Fp x9506 = x9503 + x9505;
          Fp x9507 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x9508 = x9507 * x47;
          Fp x9509 = x9506 + x9508;
          Fp x9510 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x9511 = x9510 * x48;
          Fp x9512 = x9509 + x9511;
          Fp x9513 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x9514 = x9513 * x49;
          Fp x9515 = x9512 + x9514;
          Fp x9516 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x9517 = x9516 * x50;
          Fp x9518 = x9515 + x9517;
          Fp x9519 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x9520 = x9519 * x51;
          Fp x9521 = x9518 + x9520;
          Fp x9522 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x9523 = x9522 * x52;
          Fp x9524 = x9521 + x9523;
          Fp x9525 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x9526 = x9525 * x39;
          Fp x9527 = x9524 + x9526;
          Fp x9528 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x9529 = x9528 * x41;
          Fp x9530 = x9527 + x9529;
          Fp x9531 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x9532 = x9531 * x53;
          Fp x9533 = x9530 + x9532;
          Fp x9534 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x9535 = x9534 * x40;
          Fp x9536 = x9533 + x9535;
          Fp x9537 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x9538 = x9537 * x43;
          Fp x9539 = x9536 + x9538;
          Fp x9540 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x9541 = x9540 * x54;
          Fp x9542 = x9539 + x9541;
          Fp x9543 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x9544 = x9543 * x55;
          Fp x9545 = x9542 + x9544;
          Fp x9546 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x9547 = x9546 * x56;
          Fp x9548 = x9545 + x9547;
          Fp x9549 = x9548 - x9394;
          if (x9549 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x3;
        Fp x9550 = x1005 * x3;
        Fp x9551 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x9552 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x9553 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x9554 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x9555 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x9556 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x9550;
        host_args[2] = x1280;
        host_args[3] = x9551;
        host_args[4] = x9552;
        host_args[5] = x1239;
        host_args[6] = x9553;
        host_args[7] = x9554;
        host_args[8] = x9555;
        host_args[9] = x9556;
        host(ctx, "log", "C%u: pc: %08x Decode: BLTU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x9557 = x4406 * x8884;
      if (x9557 != 0) {
        Fp x9558 = x1764 - x39;
        if (x9558 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:76");
        Fp x9559 = x1228 - x0;
        if (x9559 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:76");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1264;
          args[2][115 * steps + cycle] = x1257;
          Fp x9560 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x9561 = Fp(x9560.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x9561;
            Fp x9562 = x9560 - x9561;
            Fp x9563 = x9562 * x10;
            Fp x9564 = Fp(x9563.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x9564;
            Fp x9565 = x9563 - x9564;
            Fp x9566 = x9565 * x10;
            Fp x9567 = Fp(x9566.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x9567;
            Fp x9568 = x9566 - x9567;
            Fp x9569 = x9568 * x10;
            Fp x9570 = Fp(x9569.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x9570;
            Fp x9571 = x9569 - x9570;
            Fp x9572 = x9571 * x10;
            Fp x9573 = Fp(x9572.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x9573;
            Fp x9574 = x9572 - x9573;
            Fp x9575 = x9574 * x10;
            Fp x9576 = Fp(x9575.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x9576;
            Fp x9577 = x9575 - x9576;
            Fp x9578 = x9577 * x10;
            Fp x9579 = Fp(x9578.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x9579;
            Fp x9580 = x9578 - x9579;
            Fp x9581 = x9580 * x10;
            Fp x9582 = Fp(x9581.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x9582;
          }
          Fp x9583 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x9584 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x9585 = x9584 * x3;
          Fp x9586 = x9583 + x9585;
          Fp x9587 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x9588 = x9587 * x11;
          Fp x9589 = x9586 + x9588;
          Fp x9590 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x9591 = x9590 * x12;
          Fp x9592 = x9589 + x9591;
          Fp x9593 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x9594 = x9593 * x13;
          Fp x9595 = x9592 + x9594;
          Fp x9596 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x9597 = x9596 * x14;
          Fp x9598 = x9595 + x9597;
          Fp x9599 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x9600 = x9599 * x15;
          Fp x9601 = x9598 + x9600;
          Fp x9602 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x9603 = x9602 * x16;
          Fp x9604 = x9601 + x9603;
          Fp x9605 = x9560 - x9604;
          Fp x9606 = x9605 * x33;
          if (x9606 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:76");
          {
            Fp x9607 = Fp(x9587.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x9607;
            Fp x9608 = x9587 - x9607;
            Fp x9609 = x9608 * x26;
            Fp x9610 = Fp(x9609.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x9610;
          }
          Fp x9611 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x9612 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x9613 = x9612 * x1;
          Fp x9614 = x9611 + x9613;
          Fp x9615 = x9587 - x9614;
          Fp x9616 = x9615 * x10;
          if (x9616 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:76");
          Fp x9617 = x9611 * x11;
          Fp x9618 = x9586 + x9617;
          {
            Fp x9619 = (x9618 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x9619;
            Fp x9620 = x9618 - x71;
            Fp x9621 = (x9620 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x9621;
            Fp x9622 = x9618 - x1;
            Fp x9623 = (x9622 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x9623;
            Fp x9624 = x9618 - x2;
            Fp x9625 = (x9624 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x9625;
            Fp x9626 = x9618 - x3;
            Fp x9627 = (x9626 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x9627;
            Fp x9628 = x9618 - x4;
            Fp x9629 = (x9628 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x9629;
            Fp x9630 = x9618 - x5;
            Fp x9631 = (x9630 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x9631;
            Fp x9632 = x9618 - x0;
            Fp x9633 = (x9632 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x9633;
            Fp x9634 = x9618 - x6;
            Fp x9635 = (x9634 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x9635;
            Fp x9636 = x9618 - x7;
            Fp x9637 = (x9636 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x9637;
            Fp x9638 = x9618 - x8;
            Fp x9639 = (x9638 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x9639;
            Fp x9640 = x9618 - x9;
            Fp x9641 = (x9640 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x9641;
            Fp x9642 = x9618 - x38;
            Fp x9643 = (x9642 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x9643;
            Fp x9644 = x9618 - x42;
            Fp x9645 = (x9644 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x9645;
            Fp x9646 = x9618 - x44;
            Fp x9647 = (x9646 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x9647;
            Fp x9648 = x9618 - x45;
            Fp x9649 = (x9648 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x9649;
            Fp x9650 = x9618 - x11;
            Fp x9651 = (x9650 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x9651;
            Fp x9652 = x9618 - x46;
            Fp x9653 = (x9652 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x9653;
            Fp x9654 = x9618 - x47;
            Fp x9655 = (x9654 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x9655;
            Fp x9656 = x9618 - x48;
            Fp x9657 = (x9656 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x9657;
            Fp x9658 = x9618 - x49;
            Fp x9659 = (x9658 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x9659;
            Fp x9660 = x9618 - x50;
            Fp x9661 = (x9660 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x9661;
            Fp x9662 = x9618 - x51;
            Fp x9663 = (x9662 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x9663;
            Fp x9664 = x9618 - x52;
            Fp x9665 = (x9664 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x9665;
            Fp x9666 = x9618 - x39;
            Fp x9667 = (x9666 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x9667;
            Fp x9668 = x9618 - x41;
            Fp x9669 = (x9668 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x9669;
            Fp x9670 = x9618 - x53;
            Fp x9671 = (x9670 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x9671;
            Fp x9672 = x9618 - x40;
            Fp x9673 = (x9672 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x9673;
            Fp x9674 = x9618 - x43;
            Fp x9675 = (x9674 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x9675;
            Fp x9676 = x9618 - x54;
            Fp x9677 = (x9676 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x9677;
            Fp x9678 = x9618 - x55;
            Fp x9679 = (x9678 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x9679;
            Fp x9680 = x9618 - x56;
            Fp x9681 = (x9680 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x9681;
          }
          Fp x9682 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x9683 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x9684 = x9683 * x1;
          Fp x9685 = x9682 + x9684;
          Fp x9686 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x9687 = x9686 * x2;
          Fp x9688 = x9685 + x9687;
          Fp x9689 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x9690 = x9689 * x3;
          Fp x9691 = x9688 + x9690;
          Fp x9692 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x9693 = x9692 * x4;
          Fp x9694 = x9691 + x9693;
          Fp x9695 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x9696 = x9695 * x5;
          Fp x9697 = x9694 + x9696;
          Fp x9698 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x9699 = x9698 * x0;
          Fp x9700 = x9697 + x9699;
          Fp x9701 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x9702 = x9701 * x6;
          Fp x9703 = x9700 + x9702;
          Fp x9704 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x9705 = x9704 * x7;
          Fp x9706 = x9703 + x9705;
          Fp x9707 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x9708 = x9707 * x8;
          Fp x9709 = x9706 + x9708;
          Fp x9710 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x9711 = x9710 * x9;
          Fp x9712 = x9709 + x9711;
          Fp x9713 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x9714 = x9713 * x38;
          Fp x9715 = x9712 + x9714;
          Fp x9716 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x9717 = x9716 * x42;
          Fp x9718 = x9715 + x9717;
          Fp x9719 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x9720 = x9719 * x44;
          Fp x9721 = x9718 + x9720;
          Fp x9722 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x9723 = x9722 * x45;
          Fp x9724 = x9721 + x9723;
          Fp x9725 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x9726 = x9725 * x11;
          Fp x9727 = x9724 + x9726;
          Fp x9728 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x9729 = x9728 * x46;
          Fp x9730 = x9727 + x9729;
          Fp x9731 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x9732 = x9731 * x47;
          Fp x9733 = x9730 + x9732;
          Fp x9734 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x9735 = x9734 * x48;
          Fp x9736 = x9733 + x9735;
          Fp x9737 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x9738 = x9737 * x49;
          Fp x9739 = x9736 + x9738;
          Fp x9740 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x9741 = x9740 * x50;
          Fp x9742 = x9739 + x9741;
          Fp x9743 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x9744 = x9743 * x51;
          Fp x9745 = x9742 + x9744;
          Fp x9746 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x9747 = x9746 * x52;
          Fp x9748 = x9745 + x9747;
          Fp x9749 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x9750 = x9749 * x39;
          Fp x9751 = x9748 + x9750;
          Fp x9752 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x9753 = x9752 * x41;
          Fp x9754 = x9751 + x9753;
          Fp x9755 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x9756 = x9755 * x53;
          Fp x9757 = x9754 + x9756;
          Fp x9758 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x9759 = x9758 * x40;
          Fp x9760 = x9757 + x9759;
          Fp x9761 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x9762 = x9761 * x43;
          Fp x9763 = x9760 + x9762;
          Fp x9764 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x9765 = x9764 * x54;
          Fp x9766 = x9763 + x9765;
          Fp x9767 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x9768 = x9767 * x55;
          Fp x9769 = x9766 + x9768;
          Fp x9770 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x9771 = x9770 * x56;
          Fp x9772 = x9769 + x9771;
          Fp x9773 = x9772 - x9618;
          if (x9773 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x3;
        Fp x9774 = x1005 * x3;
        Fp x9775 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x9776 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x9777 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x9778 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x9779 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x9780 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x9774;
        host_args[2] = x1280;
        host_args[3] = x9775;
        host_args[4] = x9776;
        host_args[5] = x1239;
        host_args[6] = x9777;
        host_args[7] = x9778;
        host_args[8] = x9779;
        host_args[9] = x9780;
        host(ctx, "log", "C%u: pc: %08x Decode: BGEU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x9781 = x4631 * x8884;
      if (x9781 != 0) {
        Fp x9782 = x1764 - x40;
        if (x9782 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:77");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1270;
          args[2][115 * steps + cycle] = x1272;
          Fp x9783 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x9784 = Fp(x9783.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x9784;
            Fp x9785 = x9783 - x9784;
            Fp x9786 = x9785 * x10;
            Fp x9787 = Fp(x9786.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x9787;
            Fp x9788 = x9786 - x9787;
            Fp x9789 = x9788 * x10;
            Fp x9790 = Fp(x9789.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x9790;
            Fp x9791 = x9789 - x9790;
            Fp x9792 = x9791 * x10;
            Fp x9793 = Fp(x9792.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x9793;
            Fp x9794 = x9792 - x9793;
            Fp x9795 = x9794 * x10;
            Fp x9796 = Fp(x9795.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x9796;
            Fp x9797 = x9795 - x9796;
            Fp x9798 = x9797 * x10;
            Fp x9799 = Fp(x9798.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x9799;
            Fp x9800 = x9798 - x9799;
            Fp x9801 = x9800 * x10;
            Fp x9802 = Fp(x9801.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x9802;
            Fp x9803 = x9801 - x9802;
            Fp x9804 = x9803 * x10;
            Fp x9805 = Fp(x9804.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x9805;
          }
          Fp x9806 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x9807 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x9808 = x9807 * x3;
          Fp x9809 = x9806 + x9808;
          Fp x9810 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x9811 = x9810 * x11;
          Fp x9812 = x9809 + x9811;
          Fp x9813 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x9814 = x9813 * x12;
          Fp x9815 = x9812 + x9814;
          Fp x9816 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x9817 = x9816 * x13;
          Fp x9818 = x9815 + x9817;
          Fp x9819 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x9820 = x9819 * x14;
          Fp x9821 = x9818 + x9820;
          Fp x9822 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x9823 = x9822 * x15;
          Fp x9824 = x9821 + x9823;
          Fp x9825 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x9826 = x9825 * x16;
          Fp x9827 = x9824 + x9826;
          Fp x9828 = x9783 - x9827;
          Fp x9829 = x9828 * x33;
          if (x9829 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:77");
          {
            Fp x9830 = Fp(x9810.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x9830;
            Fp x9831 = x9810 - x9830;
            Fp x9832 = x9831 * x26;
            Fp x9833 = Fp(x9832.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x9833;
          }
          Fp x9834 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x9835 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x9836 = x9835 * x1;
          Fp x9837 = x9834 + x9836;
          Fp x9838 = x9810 - x9837;
          Fp x9839 = x9838 * x10;
          if (x9839 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:77");
          Fp x9840 = x9834 * x11;
          Fp x9841 = x9809 + x9840;
          {
            Fp x9842 = (x9841 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x9842;
            Fp x9843 = x9841 - x71;
            Fp x9844 = (x9843 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x9844;
            Fp x9845 = x9841 - x1;
            Fp x9846 = (x9845 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x9846;
            Fp x9847 = x9841 - x2;
            Fp x9848 = (x9847 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x9848;
            Fp x9849 = x9841 - x3;
            Fp x9850 = (x9849 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x9850;
            Fp x9851 = x9841 - x4;
            Fp x9852 = (x9851 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x9852;
            Fp x9853 = x9841 - x5;
            Fp x9854 = (x9853 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x9854;
            Fp x9855 = x9841 - x0;
            Fp x9856 = (x9855 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x9856;
            Fp x9857 = x9841 - x6;
            Fp x9858 = (x9857 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x9858;
            Fp x9859 = x9841 - x7;
            Fp x9860 = (x9859 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x9860;
            Fp x9861 = x9841 - x8;
            Fp x9862 = (x9861 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x9862;
            Fp x9863 = x9841 - x9;
            Fp x9864 = (x9863 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x9864;
            Fp x9865 = x9841 - x38;
            Fp x9866 = (x9865 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x9866;
            Fp x9867 = x9841 - x42;
            Fp x9868 = (x9867 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x9868;
            Fp x9869 = x9841 - x44;
            Fp x9870 = (x9869 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x9870;
            Fp x9871 = x9841 - x45;
            Fp x9872 = (x9871 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x9872;
            Fp x9873 = x9841 - x11;
            Fp x9874 = (x9873 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x9874;
            Fp x9875 = x9841 - x46;
            Fp x9876 = (x9875 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x9876;
            Fp x9877 = x9841 - x47;
            Fp x9878 = (x9877 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x9878;
            Fp x9879 = x9841 - x48;
            Fp x9880 = (x9879 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x9880;
            Fp x9881 = x9841 - x49;
            Fp x9882 = (x9881 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x9882;
            Fp x9883 = x9841 - x50;
            Fp x9884 = (x9883 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x9884;
            Fp x9885 = x9841 - x51;
            Fp x9886 = (x9885 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x9886;
            Fp x9887 = x9841 - x52;
            Fp x9888 = (x9887 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x9888;
            Fp x9889 = x9841 - x39;
            Fp x9890 = (x9889 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x9890;
            Fp x9891 = x9841 - x41;
            Fp x9892 = (x9891 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x9892;
            Fp x9893 = x9841 - x53;
            Fp x9894 = (x9893 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x9894;
            Fp x9895 = x9841 - x40;
            Fp x9896 = (x9895 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x9896;
            Fp x9897 = x9841 - x43;
            Fp x9898 = (x9897 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x9898;
            Fp x9899 = x9841 - x54;
            Fp x9900 = (x9899 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x9900;
            Fp x9901 = x9841 - x55;
            Fp x9902 = (x9901 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x9902;
            Fp x9903 = x9841 - x56;
            Fp x9904 = (x9903 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x9904;
          }
          Fp x9905 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x9906 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x9907 = x9906 * x1;
          Fp x9908 = x9905 + x9907;
          Fp x9909 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x9910 = x9909 * x2;
          Fp x9911 = x9908 + x9910;
          Fp x9912 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x9913 = x9912 * x3;
          Fp x9914 = x9911 + x9913;
          Fp x9915 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x9916 = x9915 * x4;
          Fp x9917 = x9914 + x9916;
          Fp x9918 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x9919 = x9918 * x5;
          Fp x9920 = x9917 + x9919;
          Fp x9921 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x9922 = x9921 * x0;
          Fp x9923 = x9920 + x9922;
          Fp x9924 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x9925 = x9924 * x6;
          Fp x9926 = x9923 + x9925;
          Fp x9927 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x9928 = x9927 * x7;
          Fp x9929 = x9926 + x9928;
          Fp x9930 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x9931 = x9930 * x8;
          Fp x9932 = x9929 + x9931;
          Fp x9933 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x9934 = x9933 * x9;
          Fp x9935 = x9932 + x9934;
          Fp x9936 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x9937 = x9936 * x38;
          Fp x9938 = x9935 + x9937;
          Fp x9939 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x9940 = x9939 * x42;
          Fp x9941 = x9938 + x9940;
          Fp x9942 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x9943 = x9942 * x44;
          Fp x9944 = x9941 + x9943;
          Fp x9945 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x9946 = x9945 * x45;
          Fp x9947 = x9944 + x9946;
          Fp x9948 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x9949 = x9948 * x11;
          Fp x9950 = x9947 + x9949;
          Fp x9951 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x9952 = x9951 * x46;
          Fp x9953 = x9950 + x9952;
          Fp x9954 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x9955 = x9954 * x47;
          Fp x9956 = x9953 + x9955;
          Fp x9957 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x9958 = x9957 * x48;
          Fp x9959 = x9956 + x9958;
          Fp x9960 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x9961 = x9960 * x49;
          Fp x9962 = x9959 + x9961;
          Fp x9963 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x9964 = x9963 * x50;
          Fp x9965 = x9962 + x9964;
          Fp x9966 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x9967 = x9966 * x51;
          Fp x9968 = x9965 + x9967;
          Fp x9969 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x9970 = x9969 * x52;
          Fp x9971 = x9968 + x9970;
          Fp x9972 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x9973 = x9972 * x39;
          Fp x9974 = x9971 + x9973;
          Fp x9975 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x9976 = x9975 * x41;
          Fp x9977 = x9974 + x9976;
          Fp x9978 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x9979 = x9978 * x53;
          Fp x9980 = x9977 + x9979;
          Fp x9981 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x9982 = x9981 * x40;
          Fp x9983 = x9980 + x9982;
          Fp x9984 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x9985 = x9984 * x43;
          Fp x9986 = x9983 + x9985;
          Fp x9987 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x9988 = x9987 * x54;
          Fp x9989 = x9986 + x9988;
          Fp x9990 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x9991 = x9990 * x55;
          Fp x9992 = x9989 + x9991;
          Fp x9993 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x9994 = x9993 * x56;
          Fp x9995 = x9992 + x9994;
          Fp x9996 = x9995 - x9841;
          if (x9996 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x3;
        Fp x9997 = x1005 * x3;
        Fp x9998 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x9999 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x10000 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x10001 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x10002 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x10003 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x9997;
        host_args[2] = x1280;
        host_args[3] = x9998;
        host_args[4] = x9999;
        host_args[5] = x1239;
        host_args[6] = x10000;
        host_args[7] = x10001;
        host_args[8] = x10002;
        host_args[9] = x10003;
        host(ctx, "log", "C%u: pc: %08x Decode: JAL r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x10004 = x4856 * x8884;
      if (x10004 != 0) {
        Fp x10005 = x1764 - x41;
        if (x10005 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:78");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:78");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x10006 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x10007 = Fp(x10006.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x10007;
            Fp x10008 = x10006 - x10007;
            Fp x10009 = x10008 * x10;
            Fp x10010 = Fp(x10009.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x10010;
            Fp x10011 = x10009 - x10010;
            Fp x10012 = x10011 * x10;
            Fp x10013 = Fp(x10012.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x10013;
            Fp x10014 = x10012 - x10013;
            Fp x10015 = x10014 * x10;
            Fp x10016 = Fp(x10015.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x10016;
            Fp x10017 = x10015 - x10016;
            Fp x10018 = x10017 * x10;
            Fp x10019 = Fp(x10018.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x10019;
            Fp x10020 = x10018 - x10019;
            Fp x10021 = x10020 * x10;
            Fp x10022 = Fp(x10021.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x10022;
            Fp x10023 = x10021 - x10022;
            Fp x10024 = x10023 * x10;
            Fp x10025 = Fp(x10024.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x10025;
            Fp x10026 = x10024 - x10025;
            Fp x10027 = x10026 * x10;
            Fp x10028 = Fp(x10027.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x10028;
          }
          Fp x10029 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x10030 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x10031 = x10030 * x3;
          Fp x10032 = x10029 + x10031;
          Fp x10033 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x10034 = x10033 * x11;
          Fp x10035 = x10032 + x10034;
          Fp x10036 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x10037 = x10036 * x12;
          Fp x10038 = x10035 + x10037;
          Fp x10039 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x10040 = x10039 * x13;
          Fp x10041 = x10038 + x10040;
          Fp x10042 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x10043 = x10042 * x14;
          Fp x10044 = x10041 + x10043;
          Fp x10045 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x10046 = x10045 * x15;
          Fp x10047 = x10044 + x10046;
          Fp x10048 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x10049 = x10048 * x16;
          Fp x10050 = x10047 + x10049;
          Fp x10051 = x10006 - x10050;
          Fp x10052 = x10051 * x33;
          if (x10052 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:78");
          {
            Fp x10053 = Fp(x10033.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x10053;
            Fp x10054 = x10033 - x10053;
            Fp x10055 = x10054 * x26;
            Fp x10056 = Fp(x10055.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x10056;
          }
          Fp x10057 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x10058 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x10059 = x10058 * x1;
          Fp x10060 = x10057 + x10059;
          Fp x10061 = x10033 - x10060;
          Fp x10062 = x10061 * x10;
          if (x10062 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:78");
          Fp x10063 = x10057 * x11;
          Fp x10064 = x10032 + x10063;
          {
            Fp x10065 = (x10064 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x10065;
            Fp x10066 = x10064 - x71;
            Fp x10067 = (x10066 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x10067;
            Fp x10068 = x10064 - x1;
            Fp x10069 = (x10068 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x10069;
            Fp x10070 = x10064 - x2;
            Fp x10071 = (x10070 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x10071;
            Fp x10072 = x10064 - x3;
            Fp x10073 = (x10072 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x10073;
            Fp x10074 = x10064 - x4;
            Fp x10075 = (x10074 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x10075;
            Fp x10076 = x10064 - x5;
            Fp x10077 = (x10076 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x10077;
            Fp x10078 = x10064 - x0;
            Fp x10079 = (x10078 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x10079;
            Fp x10080 = x10064 - x6;
            Fp x10081 = (x10080 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x10081;
            Fp x10082 = x10064 - x7;
            Fp x10083 = (x10082 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x10083;
            Fp x10084 = x10064 - x8;
            Fp x10085 = (x10084 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x10085;
            Fp x10086 = x10064 - x9;
            Fp x10087 = (x10086 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x10087;
            Fp x10088 = x10064 - x38;
            Fp x10089 = (x10088 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x10089;
            Fp x10090 = x10064 - x42;
            Fp x10091 = (x10090 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x10091;
            Fp x10092 = x10064 - x44;
            Fp x10093 = (x10092 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x10093;
            Fp x10094 = x10064 - x45;
            Fp x10095 = (x10094 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x10095;
            Fp x10096 = x10064 - x11;
            Fp x10097 = (x10096 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x10097;
            Fp x10098 = x10064 - x46;
            Fp x10099 = (x10098 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x10099;
            Fp x10100 = x10064 - x47;
            Fp x10101 = (x10100 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x10101;
            Fp x10102 = x10064 - x48;
            Fp x10103 = (x10102 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x10103;
            Fp x10104 = x10064 - x49;
            Fp x10105 = (x10104 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x10105;
            Fp x10106 = x10064 - x50;
            Fp x10107 = (x10106 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x10107;
            Fp x10108 = x10064 - x51;
            Fp x10109 = (x10108 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x10109;
            Fp x10110 = x10064 - x52;
            Fp x10111 = (x10110 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x10111;
            Fp x10112 = x10064 - x39;
            Fp x10113 = (x10112 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x10113;
            Fp x10114 = x10064 - x41;
            Fp x10115 = (x10114 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x10115;
            Fp x10116 = x10064 - x53;
            Fp x10117 = (x10116 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x10117;
            Fp x10118 = x10064 - x40;
            Fp x10119 = (x10118 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x10119;
            Fp x10120 = x10064 - x43;
            Fp x10121 = (x10120 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x10121;
            Fp x10122 = x10064 - x54;
            Fp x10123 = (x10122 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x10123;
            Fp x10124 = x10064 - x55;
            Fp x10125 = (x10124 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x10125;
            Fp x10126 = x10064 - x56;
            Fp x10127 = (x10126 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x10127;
          }
          Fp x10128 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x10129 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x10130 = x10129 * x1;
          Fp x10131 = x10128 + x10130;
          Fp x10132 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x10133 = x10132 * x2;
          Fp x10134 = x10131 + x10133;
          Fp x10135 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x10136 = x10135 * x3;
          Fp x10137 = x10134 + x10136;
          Fp x10138 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x10139 = x10138 * x4;
          Fp x10140 = x10137 + x10139;
          Fp x10141 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x10142 = x10141 * x5;
          Fp x10143 = x10140 + x10142;
          Fp x10144 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x10145 = x10144 * x0;
          Fp x10146 = x10143 + x10145;
          Fp x10147 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x10148 = x10147 * x6;
          Fp x10149 = x10146 + x10148;
          Fp x10150 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x10151 = x10150 * x7;
          Fp x10152 = x10149 + x10151;
          Fp x10153 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x10154 = x10153 * x8;
          Fp x10155 = x10152 + x10154;
          Fp x10156 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x10157 = x10156 * x9;
          Fp x10158 = x10155 + x10157;
          Fp x10159 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x10160 = x10159 * x38;
          Fp x10161 = x10158 + x10160;
          Fp x10162 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x10163 = x10162 * x42;
          Fp x10164 = x10161 + x10163;
          Fp x10165 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x10166 = x10165 * x44;
          Fp x10167 = x10164 + x10166;
          Fp x10168 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x10169 = x10168 * x45;
          Fp x10170 = x10167 + x10169;
          Fp x10171 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x10172 = x10171 * x11;
          Fp x10173 = x10170 + x10172;
          Fp x10174 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x10175 = x10174 * x46;
          Fp x10176 = x10173 + x10175;
          Fp x10177 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x10178 = x10177 * x47;
          Fp x10179 = x10176 + x10178;
          Fp x10180 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x10181 = x10180 * x48;
          Fp x10182 = x10179 + x10181;
          Fp x10183 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x10184 = x10183 * x49;
          Fp x10185 = x10182 + x10184;
          Fp x10186 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x10187 = x10186 * x50;
          Fp x10188 = x10185 + x10187;
          Fp x10189 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x10190 = x10189 * x51;
          Fp x10191 = x10188 + x10190;
          Fp x10192 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x10193 = x10192 * x52;
          Fp x10194 = x10191 + x10193;
          Fp x10195 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x10196 = x10195 * x39;
          Fp x10197 = x10194 + x10196;
          Fp x10198 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x10199 = x10198 * x41;
          Fp x10200 = x10197 + x10199;
          Fp x10201 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x10202 = x10201 * x53;
          Fp x10203 = x10200 + x10202;
          Fp x10204 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x10205 = x10204 * x40;
          Fp x10206 = x10203 + x10205;
          Fp x10207 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x10208 = x10207 * x43;
          Fp x10209 = x10206 + x10208;
          Fp x10210 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x10211 = x10210 * x54;
          Fp x10212 = x10209 + x10211;
          Fp x10213 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x10214 = x10213 * x55;
          Fp x10215 = x10212 + x10214;
          Fp x10216 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x10217 = x10216 * x56;
          Fp x10218 = x10215 + x10217;
          Fp x10219 = x10218 - x10064;
          if (x10219 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x3;
        Fp x10220 = x1005 * x3;
        Fp x10221 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x10222 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x10223 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x10224 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x10225 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x10226 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x10220;
        host_args[2] = x1280;
        host_args[3] = x10221;
        host_args[4] = x10222;
        host_args[5] = x1239;
        host_args[6] = x10223;
        host_args[7] = x10224;
        host_args[8] = x10225;
        host_args[9] = x10226;
        host(ctx, "log", "C%u: pc: %08x Decode: JALR r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x10227 = x5081 * x8884;
      if (x10227 != 0) {
        Fp x10228 = x1764 - x42;
        if (x10228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:79");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1231;
          args[2][115 * steps + cycle] = x1266;
          Fp x10229 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x10230 = Fp(x10229.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x10230;
            Fp x10231 = x10229 - x10230;
            Fp x10232 = x10231 * x10;
            Fp x10233 = Fp(x10232.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x10233;
            Fp x10234 = x10232 - x10233;
            Fp x10235 = x10234 * x10;
            Fp x10236 = Fp(x10235.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x10236;
            Fp x10237 = x10235 - x10236;
            Fp x10238 = x10237 * x10;
            Fp x10239 = Fp(x10238.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x10239;
            Fp x10240 = x10238 - x10239;
            Fp x10241 = x10240 * x10;
            Fp x10242 = Fp(x10241.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x10242;
            Fp x10243 = x10241 - x10242;
            Fp x10244 = x10243 * x10;
            Fp x10245 = Fp(x10244.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x10245;
            Fp x10246 = x10244 - x10245;
            Fp x10247 = x10246 * x10;
            Fp x10248 = Fp(x10247.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x10248;
            Fp x10249 = x10247 - x10248;
            Fp x10250 = x10249 * x10;
            Fp x10251 = Fp(x10250.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x10251;
          }
          Fp x10252 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x10253 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x10254 = x10253 * x3;
          Fp x10255 = x10252 + x10254;
          Fp x10256 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x10257 = x10256 * x11;
          Fp x10258 = x10255 + x10257;
          Fp x10259 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x10260 = x10259 * x12;
          Fp x10261 = x10258 + x10260;
          Fp x10262 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x10263 = x10262 * x13;
          Fp x10264 = x10261 + x10263;
          Fp x10265 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x10266 = x10265 * x14;
          Fp x10267 = x10264 + x10266;
          Fp x10268 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x10269 = x10268 * x15;
          Fp x10270 = x10267 + x10269;
          Fp x10271 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x10272 = x10271 * x16;
          Fp x10273 = x10270 + x10272;
          Fp x10274 = x10229 - x10273;
          Fp x10275 = x10274 * x33;
          if (x10275 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:79");
          {
            Fp x10276 = Fp(x10256.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x10276;
            Fp x10277 = x10256 - x10276;
            Fp x10278 = x10277 * x26;
            Fp x10279 = Fp(x10278.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x10279;
          }
          Fp x10280 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x10281 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x10282 = x10281 * x1;
          Fp x10283 = x10280 + x10282;
          Fp x10284 = x10256 - x10283;
          Fp x10285 = x10284 * x10;
          if (x10285 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:79");
          Fp x10286 = x10280 * x11;
          Fp x10287 = x10255 + x10286;
          {
            Fp x10288 = (x10287 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x10288;
            Fp x10289 = x10287 - x71;
            Fp x10290 = (x10289 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x10290;
            Fp x10291 = x10287 - x1;
            Fp x10292 = (x10291 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x10292;
            Fp x10293 = x10287 - x2;
            Fp x10294 = (x10293 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x10294;
            Fp x10295 = x10287 - x3;
            Fp x10296 = (x10295 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x10296;
            Fp x10297 = x10287 - x4;
            Fp x10298 = (x10297 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x10298;
            Fp x10299 = x10287 - x5;
            Fp x10300 = (x10299 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x10300;
            Fp x10301 = x10287 - x0;
            Fp x10302 = (x10301 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x10302;
            Fp x10303 = x10287 - x6;
            Fp x10304 = (x10303 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x10304;
            Fp x10305 = x10287 - x7;
            Fp x10306 = (x10305 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x10306;
            Fp x10307 = x10287 - x8;
            Fp x10308 = (x10307 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x10308;
            Fp x10309 = x10287 - x9;
            Fp x10310 = (x10309 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x10310;
            Fp x10311 = x10287 - x38;
            Fp x10312 = (x10311 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x10312;
            Fp x10313 = x10287 - x42;
            Fp x10314 = (x10313 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x10314;
            Fp x10315 = x10287 - x44;
            Fp x10316 = (x10315 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x10316;
            Fp x10317 = x10287 - x45;
            Fp x10318 = (x10317 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x10318;
            Fp x10319 = x10287 - x11;
            Fp x10320 = (x10319 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x10320;
            Fp x10321 = x10287 - x46;
            Fp x10322 = (x10321 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x10322;
            Fp x10323 = x10287 - x47;
            Fp x10324 = (x10323 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x10324;
            Fp x10325 = x10287 - x48;
            Fp x10326 = (x10325 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x10326;
            Fp x10327 = x10287 - x49;
            Fp x10328 = (x10327 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x10328;
            Fp x10329 = x10287 - x50;
            Fp x10330 = (x10329 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x10330;
            Fp x10331 = x10287 - x51;
            Fp x10332 = (x10331 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x10332;
            Fp x10333 = x10287 - x52;
            Fp x10334 = (x10333 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x10334;
            Fp x10335 = x10287 - x39;
            Fp x10336 = (x10335 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x10336;
            Fp x10337 = x10287 - x41;
            Fp x10338 = (x10337 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x10338;
            Fp x10339 = x10287 - x53;
            Fp x10340 = (x10339 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x10340;
            Fp x10341 = x10287 - x40;
            Fp x10342 = (x10341 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x10342;
            Fp x10343 = x10287 - x43;
            Fp x10344 = (x10343 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x10344;
            Fp x10345 = x10287 - x54;
            Fp x10346 = (x10345 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x10346;
            Fp x10347 = x10287 - x55;
            Fp x10348 = (x10347 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x10348;
            Fp x10349 = x10287 - x56;
            Fp x10350 = (x10349 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x10350;
          }
          Fp x10351 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x10352 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x10353 = x10352 * x1;
          Fp x10354 = x10351 + x10353;
          Fp x10355 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x10356 = x10355 * x2;
          Fp x10357 = x10354 + x10356;
          Fp x10358 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x10359 = x10358 * x3;
          Fp x10360 = x10357 + x10359;
          Fp x10361 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x10362 = x10361 * x4;
          Fp x10363 = x10360 + x10362;
          Fp x10364 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x10365 = x10364 * x5;
          Fp x10366 = x10363 + x10365;
          Fp x10367 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x10368 = x10367 * x0;
          Fp x10369 = x10366 + x10368;
          Fp x10370 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x10371 = x10370 * x6;
          Fp x10372 = x10369 + x10371;
          Fp x10373 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x10374 = x10373 * x7;
          Fp x10375 = x10372 + x10374;
          Fp x10376 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x10377 = x10376 * x8;
          Fp x10378 = x10375 + x10377;
          Fp x10379 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x10380 = x10379 * x9;
          Fp x10381 = x10378 + x10380;
          Fp x10382 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x10383 = x10382 * x38;
          Fp x10384 = x10381 + x10383;
          Fp x10385 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x10386 = x10385 * x42;
          Fp x10387 = x10384 + x10386;
          Fp x10388 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x10389 = x10388 * x44;
          Fp x10390 = x10387 + x10389;
          Fp x10391 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x10392 = x10391 * x45;
          Fp x10393 = x10390 + x10392;
          Fp x10394 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x10395 = x10394 * x11;
          Fp x10396 = x10393 + x10395;
          Fp x10397 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x10398 = x10397 * x46;
          Fp x10399 = x10396 + x10398;
          Fp x10400 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x10401 = x10400 * x47;
          Fp x10402 = x10399 + x10401;
          Fp x10403 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x10404 = x10403 * x48;
          Fp x10405 = x10402 + x10404;
          Fp x10406 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x10407 = x10406 * x49;
          Fp x10408 = x10405 + x10407;
          Fp x10409 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x10410 = x10409 * x50;
          Fp x10411 = x10408 + x10410;
          Fp x10412 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x10413 = x10412 * x51;
          Fp x10414 = x10411 + x10413;
          Fp x10415 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x10416 = x10415 * x52;
          Fp x10417 = x10414 + x10416;
          Fp x10418 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x10419 = x10418 * x39;
          Fp x10420 = x10417 + x10419;
          Fp x10421 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x10422 = x10421 * x41;
          Fp x10423 = x10420 + x10422;
          Fp x10424 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x10425 = x10424 * x53;
          Fp x10426 = x10423 + x10425;
          Fp x10427 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x10428 = x10427 * x40;
          Fp x10429 = x10426 + x10428;
          Fp x10430 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x10431 = x10430 * x43;
          Fp x10432 = x10429 + x10431;
          Fp x10433 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x10434 = x10433 * x54;
          Fp x10435 = x10432 + x10434;
          Fp x10436 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x10437 = x10436 * x55;
          Fp x10438 = x10435 + x10437;
          Fp x10439 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x10440 = x10439 * x56;
          Fp x10441 = x10438 + x10440;
          Fp x10442 = x10441 - x10287;
          if (x10442 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x3;
        Fp x10443 = x1005 * x3;
        Fp x10444 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x10445 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x10446 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x10447 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x10448 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x10449 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x10443;
        host_args[2] = x1280;
        host_args[3] = x10444;
        host_args[4] = x10445;
        host_args[5] = x1239;
        host_args[6] = x10446;
        host_args[7] = x10447;
        host_args[8] = x10448;
        host_args[9] = x10449;
        host(ctx, "log", "C%u: pc: %08x Decode: LUI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x10450 = x5306 * x8884;
      if (x10450 != 0) {
        Fp x10451 = x1764 - x4;
        if (x10451 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:80");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1231;
          args[2][115 * steps + cycle] = x1266;
          Fp x10452 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x10453 = Fp(x10452.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x10453;
            Fp x10454 = x10452 - x10453;
            Fp x10455 = x10454 * x10;
            Fp x10456 = Fp(x10455.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x10456;
            Fp x10457 = x10455 - x10456;
            Fp x10458 = x10457 * x10;
            Fp x10459 = Fp(x10458.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x10459;
            Fp x10460 = x10458 - x10459;
            Fp x10461 = x10460 * x10;
            Fp x10462 = Fp(x10461.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x10462;
            Fp x10463 = x10461 - x10462;
            Fp x10464 = x10463 * x10;
            Fp x10465 = Fp(x10464.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x10465;
            Fp x10466 = x10464 - x10465;
            Fp x10467 = x10466 * x10;
            Fp x10468 = Fp(x10467.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x10468;
            Fp x10469 = x10467 - x10468;
            Fp x10470 = x10469 * x10;
            Fp x10471 = Fp(x10470.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x10471;
            Fp x10472 = x10470 - x10471;
            Fp x10473 = x10472 * x10;
            Fp x10474 = Fp(x10473.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x10474;
          }
          Fp x10475 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x10476 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x10477 = x10476 * x3;
          Fp x10478 = x10475 + x10477;
          Fp x10479 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x10480 = x10479 * x11;
          Fp x10481 = x10478 + x10480;
          Fp x10482 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x10483 = x10482 * x12;
          Fp x10484 = x10481 + x10483;
          Fp x10485 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x10486 = x10485 * x13;
          Fp x10487 = x10484 + x10486;
          Fp x10488 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x10489 = x10488 * x14;
          Fp x10490 = x10487 + x10489;
          Fp x10491 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x10492 = x10491 * x15;
          Fp x10493 = x10490 + x10492;
          Fp x10494 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x10495 = x10494 * x16;
          Fp x10496 = x10493 + x10495;
          Fp x10497 = x10452 - x10496;
          Fp x10498 = x10497 * x33;
          if (x10498 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:80");
          {
            Fp x10499 = Fp(x10479.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x10499;
            Fp x10500 = x10479 - x10499;
            Fp x10501 = x10500 * x26;
            Fp x10502 = Fp(x10501.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x10502;
          }
          Fp x10503 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x10504 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x10505 = x10504 * x1;
          Fp x10506 = x10503 + x10505;
          Fp x10507 = x10479 - x10506;
          Fp x10508 = x10507 * x10;
          if (x10508 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:80");
          Fp x10509 = x10503 * x11;
          Fp x10510 = x10478 + x10509;
          {
            Fp x10511 = (x10510 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x10511;
            Fp x10512 = x10510 - x71;
            Fp x10513 = (x10512 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x10513;
            Fp x10514 = x10510 - x1;
            Fp x10515 = (x10514 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x10515;
            Fp x10516 = x10510 - x2;
            Fp x10517 = (x10516 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x10517;
            Fp x10518 = x10510 - x3;
            Fp x10519 = (x10518 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x10519;
            Fp x10520 = x10510 - x4;
            Fp x10521 = (x10520 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x10521;
            Fp x10522 = x10510 - x5;
            Fp x10523 = (x10522 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x10523;
            Fp x10524 = x10510 - x0;
            Fp x10525 = (x10524 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x10525;
            Fp x10526 = x10510 - x6;
            Fp x10527 = (x10526 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x10527;
            Fp x10528 = x10510 - x7;
            Fp x10529 = (x10528 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x10529;
            Fp x10530 = x10510 - x8;
            Fp x10531 = (x10530 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x10531;
            Fp x10532 = x10510 - x9;
            Fp x10533 = (x10532 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x10533;
            Fp x10534 = x10510 - x38;
            Fp x10535 = (x10534 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x10535;
            Fp x10536 = x10510 - x42;
            Fp x10537 = (x10536 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x10537;
            Fp x10538 = x10510 - x44;
            Fp x10539 = (x10538 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x10539;
            Fp x10540 = x10510 - x45;
            Fp x10541 = (x10540 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x10541;
            Fp x10542 = x10510 - x11;
            Fp x10543 = (x10542 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x10543;
            Fp x10544 = x10510 - x46;
            Fp x10545 = (x10544 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x10545;
            Fp x10546 = x10510 - x47;
            Fp x10547 = (x10546 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x10547;
            Fp x10548 = x10510 - x48;
            Fp x10549 = (x10548 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x10549;
            Fp x10550 = x10510 - x49;
            Fp x10551 = (x10550 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x10551;
            Fp x10552 = x10510 - x50;
            Fp x10553 = (x10552 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x10553;
            Fp x10554 = x10510 - x51;
            Fp x10555 = (x10554 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x10555;
            Fp x10556 = x10510 - x52;
            Fp x10557 = (x10556 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x10557;
            Fp x10558 = x10510 - x39;
            Fp x10559 = (x10558 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x10559;
            Fp x10560 = x10510 - x41;
            Fp x10561 = (x10560 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x10561;
            Fp x10562 = x10510 - x53;
            Fp x10563 = (x10562 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x10563;
            Fp x10564 = x10510 - x40;
            Fp x10565 = (x10564 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x10565;
            Fp x10566 = x10510 - x43;
            Fp x10567 = (x10566 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x10567;
            Fp x10568 = x10510 - x54;
            Fp x10569 = (x10568 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x10569;
            Fp x10570 = x10510 - x55;
            Fp x10571 = (x10570 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x10571;
            Fp x10572 = x10510 - x56;
            Fp x10573 = (x10572 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x10573;
          }
          Fp x10574 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x10575 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x10576 = x10575 * x1;
          Fp x10577 = x10574 + x10576;
          Fp x10578 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x10579 = x10578 * x2;
          Fp x10580 = x10577 + x10579;
          Fp x10581 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x10582 = x10581 * x3;
          Fp x10583 = x10580 + x10582;
          Fp x10584 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x10585 = x10584 * x4;
          Fp x10586 = x10583 + x10585;
          Fp x10587 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x10588 = x10587 * x5;
          Fp x10589 = x10586 + x10588;
          Fp x10590 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x10591 = x10590 * x0;
          Fp x10592 = x10589 + x10591;
          Fp x10593 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x10594 = x10593 * x6;
          Fp x10595 = x10592 + x10594;
          Fp x10596 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x10597 = x10596 * x7;
          Fp x10598 = x10595 + x10597;
          Fp x10599 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x10600 = x10599 * x8;
          Fp x10601 = x10598 + x10600;
          Fp x10602 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x10603 = x10602 * x9;
          Fp x10604 = x10601 + x10603;
          Fp x10605 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x10606 = x10605 * x38;
          Fp x10607 = x10604 + x10606;
          Fp x10608 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x10609 = x10608 * x42;
          Fp x10610 = x10607 + x10609;
          Fp x10611 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x10612 = x10611 * x44;
          Fp x10613 = x10610 + x10612;
          Fp x10614 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x10615 = x10614 * x45;
          Fp x10616 = x10613 + x10615;
          Fp x10617 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x10618 = x10617 * x11;
          Fp x10619 = x10616 + x10618;
          Fp x10620 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x10621 = x10620 * x46;
          Fp x10622 = x10619 + x10621;
          Fp x10623 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x10624 = x10623 * x47;
          Fp x10625 = x10622 + x10624;
          Fp x10626 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x10627 = x10626 * x48;
          Fp x10628 = x10625 + x10627;
          Fp x10629 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x10630 = x10629 * x49;
          Fp x10631 = x10628 + x10630;
          Fp x10632 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x10633 = x10632 * x50;
          Fp x10634 = x10631 + x10633;
          Fp x10635 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x10636 = x10635 * x51;
          Fp x10637 = x10634 + x10636;
          Fp x10638 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x10639 = x10638 * x52;
          Fp x10640 = x10637 + x10639;
          Fp x10641 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x10642 = x10641 * x39;
          Fp x10643 = x10640 + x10642;
          Fp x10644 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x10645 = x10644 * x41;
          Fp x10646 = x10643 + x10645;
          Fp x10647 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x10648 = x10647 * x53;
          Fp x10649 = x10646 + x10648;
          Fp x10650 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x10651 = x10650 * x40;
          Fp x10652 = x10649 + x10651;
          Fp x10653 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x10654 = x10653 * x43;
          Fp x10655 = x10652 + x10654;
          Fp x10656 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x10657 = x10656 * x54;
          Fp x10658 = x10655 + x10657;
          Fp x10659 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x10660 = x10659 * x55;
          Fp x10661 = x10658 + x10660;
          Fp x10662 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x10663 = x10662 * x56;
          Fp x10664 = x10661 + x10663;
          Fp x10665 = x10664 - x10510;
          if (x10665 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x3;
        Fp x10666 = x1005 * x3;
        Fp x10667 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x10668 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x10669 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x10670 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x10671 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x10672 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x10666;
        host_args[2] = x1280;
        host_args[3] = x10667;
        host_args[4] = x10668;
        host_args[5] = x1239;
        host_args[6] = x10669;
        host_args[7] = x10670;
        host_args[8] = x10671;
        host_args[9] = x10672;
        host(ctx, "log", "C%u: pc: %08x Decode: AUIPC r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x10673 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x10674 = x3731 * x10673;
      if (x10674 != 0) {
        Fp x10675 = x1764 - x38;
        if (x10675 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
        Fp x10676 = x1766 - x71;
        if (x10676 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x10677 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x10678 = Fp(x10677.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x10678;
            Fp x10679 = x10677 - x10678;
            Fp x10680 = x10679 * x10;
            Fp x10681 = Fp(x10680.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x10681;
            Fp x10682 = x10680 - x10681;
            Fp x10683 = x10682 * x10;
            Fp x10684 = Fp(x10683.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x10684;
            Fp x10685 = x10683 - x10684;
            Fp x10686 = x10685 * x10;
            Fp x10687 = Fp(x10686.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x10687;
            Fp x10688 = x10686 - x10687;
            Fp x10689 = x10688 * x10;
            Fp x10690 = Fp(x10689.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x10690;
            Fp x10691 = x10689 - x10690;
            Fp x10692 = x10691 * x10;
            Fp x10693 = Fp(x10692.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x10693;
            Fp x10694 = x10692 - x10693;
            Fp x10695 = x10694 * x10;
            Fp x10696 = Fp(x10695.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x10696;
            Fp x10697 = x10695 - x10696;
            Fp x10698 = x10697 * x10;
            Fp x10699 = Fp(x10698.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x10699;
          }
          Fp x10700 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x10701 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x10702 = x10701 * x3;
          Fp x10703 = x10700 + x10702;
          Fp x10704 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x10705 = x10704 * x11;
          Fp x10706 = x10703 + x10705;
          Fp x10707 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x10708 = x10707 * x12;
          Fp x10709 = x10706 + x10708;
          Fp x10710 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x10711 = x10710 * x13;
          Fp x10712 = x10709 + x10711;
          Fp x10713 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x10714 = x10713 * x14;
          Fp x10715 = x10712 + x10714;
          Fp x10716 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x10717 = x10716 * x15;
          Fp x10718 = x10715 + x10717;
          Fp x10719 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x10720 = x10719 * x16;
          Fp x10721 = x10718 + x10720;
          Fp x10722 = x10677 - x10721;
          Fp x10723 = x10722 * x33;
          if (x10723 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
          {
            Fp x10724 = Fp(x10704.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x10724;
            Fp x10725 = x10704 - x10724;
            Fp x10726 = x10725 * x26;
            Fp x10727 = Fp(x10726.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x10727;
          }
          Fp x10728 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x10729 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x10730 = x10729 * x1;
          Fp x10731 = x10728 + x10730;
          Fp x10732 = x10704 - x10731;
          Fp x10733 = x10732 * x10;
          if (x10733 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
          Fp x10734 = x10728 * x11;
          Fp x10735 = x10703 + x10734;
          {
            Fp x10736 = (x10735 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x10736;
            Fp x10737 = x10735 - x71;
            Fp x10738 = (x10737 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x10738;
            Fp x10739 = x10735 - x1;
            Fp x10740 = (x10739 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x10740;
            Fp x10741 = x10735 - x2;
            Fp x10742 = (x10741 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x10742;
            Fp x10743 = x10735 - x3;
            Fp x10744 = (x10743 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x10744;
            Fp x10745 = x10735 - x4;
            Fp x10746 = (x10745 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x10746;
            Fp x10747 = x10735 - x5;
            Fp x10748 = (x10747 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x10748;
            Fp x10749 = x10735 - x0;
            Fp x10750 = (x10749 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x10750;
            Fp x10751 = x10735 - x6;
            Fp x10752 = (x10751 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x10752;
            Fp x10753 = x10735 - x7;
            Fp x10754 = (x10753 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x10754;
            Fp x10755 = x10735 - x8;
            Fp x10756 = (x10755 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x10756;
            Fp x10757 = x10735 - x9;
            Fp x10758 = (x10757 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x10758;
            Fp x10759 = x10735 - x38;
            Fp x10760 = (x10759 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x10760;
            Fp x10761 = x10735 - x42;
            Fp x10762 = (x10761 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x10762;
            Fp x10763 = x10735 - x44;
            Fp x10764 = (x10763 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x10764;
            Fp x10765 = x10735 - x45;
            Fp x10766 = (x10765 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x10766;
            Fp x10767 = x10735 - x11;
            Fp x10768 = (x10767 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x10768;
            Fp x10769 = x10735 - x46;
            Fp x10770 = (x10769 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x10770;
            Fp x10771 = x10735 - x47;
            Fp x10772 = (x10771 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x10772;
            Fp x10773 = x10735 - x48;
            Fp x10774 = (x10773 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x10774;
            Fp x10775 = x10735 - x49;
            Fp x10776 = (x10775 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x10776;
            Fp x10777 = x10735 - x50;
            Fp x10778 = (x10777 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x10778;
            Fp x10779 = x10735 - x51;
            Fp x10780 = (x10779 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x10780;
            Fp x10781 = x10735 - x52;
            Fp x10782 = (x10781 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x10782;
            Fp x10783 = x10735 - x39;
            Fp x10784 = (x10783 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x10784;
            Fp x10785 = x10735 - x41;
            Fp x10786 = (x10785 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x10786;
            Fp x10787 = x10735 - x53;
            Fp x10788 = (x10787 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x10788;
            Fp x10789 = x10735 - x40;
            Fp x10790 = (x10789 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x10790;
            Fp x10791 = x10735 - x43;
            Fp x10792 = (x10791 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x10792;
            Fp x10793 = x10735 - x54;
            Fp x10794 = (x10793 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x10794;
            Fp x10795 = x10735 - x55;
            Fp x10796 = (x10795 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x10796;
            Fp x10797 = x10735 - x56;
            Fp x10798 = (x10797 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x10798;
          }
          Fp x10799 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x10800 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x10801 = x10800 * x1;
          Fp x10802 = x10799 + x10801;
          Fp x10803 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x10804 = x10803 * x2;
          Fp x10805 = x10802 + x10804;
          Fp x10806 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x10807 = x10806 * x3;
          Fp x10808 = x10805 + x10807;
          Fp x10809 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x10810 = x10809 * x4;
          Fp x10811 = x10808 + x10810;
          Fp x10812 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x10813 = x10812 * x5;
          Fp x10814 = x10811 + x10813;
          Fp x10815 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x10816 = x10815 * x0;
          Fp x10817 = x10814 + x10816;
          Fp x10818 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x10819 = x10818 * x6;
          Fp x10820 = x10817 + x10819;
          Fp x10821 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x10822 = x10821 * x7;
          Fp x10823 = x10820 + x10822;
          Fp x10824 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x10825 = x10824 * x8;
          Fp x10826 = x10823 + x10825;
          Fp x10827 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x10828 = x10827 * x9;
          Fp x10829 = x10826 + x10828;
          Fp x10830 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x10831 = x10830 * x38;
          Fp x10832 = x10829 + x10831;
          Fp x10833 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x10834 = x10833 * x42;
          Fp x10835 = x10832 + x10834;
          Fp x10836 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x10837 = x10836 * x44;
          Fp x10838 = x10835 + x10837;
          Fp x10839 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x10840 = x10839 * x45;
          Fp x10841 = x10838 + x10840;
          Fp x10842 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x10843 = x10842 * x11;
          Fp x10844 = x10841 + x10843;
          Fp x10845 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x10846 = x10845 * x46;
          Fp x10847 = x10844 + x10846;
          Fp x10848 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x10849 = x10848 * x47;
          Fp x10850 = x10847 + x10849;
          Fp x10851 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x10852 = x10851 * x48;
          Fp x10853 = x10850 + x10852;
          Fp x10854 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x10855 = x10854 * x49;
          Fp x10856 = x10853 + x10855;
          Fp x10857 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x10858 = x10857 * x50;
          Fp x10859 = x10856 + x10858;
          Fp x10860 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x10861 = x10860 * x51;
          Fp x10862 = x10859 + x10861;
          Fp x10863 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x10864 = x10863 * x52;
          Fp x10865 = x10862 + x10864;
          Fp x10866 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x10867 = x10866 * x39;
          Fp x10868 = x10865 + x10867;
          Fp x10869 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x10870 = x10869 * x41;
          Fp x10871 = x10868 + x10870;
          Fp x10872 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x10873 = x10872 * x53;
          Fp x10874 = x10871 + x10873;
          Fp x10875 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x10876 = x10875 * x40;
          Fp x10877 = x10874 + x10876;
          Fp x10878 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x10879 = x10878 * x43;
          Fp x10880 = x10877 + x10879;
          Fp x10881 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x10882 = x10881 * x54;
          Fp x10883 = x10880 + x10882;
          Fp x10884 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x10885 = x10884 * x55;
          Fp x10886 = x10883 + x10885;
          Fp x10887 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x10888 = x10887 * x56;
          Fp x10889 = x10886 + x10888;
          Fp x10890 = x10889 - x10735;
          if (x10890 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x4;
        Fp x10891 = x1005 * x3;
        Fp x10892 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x10893 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x10894 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x10895 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x10896 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x10897 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x10891;
        host_args[2] = x1280;
        host_args[3] = x10892;
        host_args[4] = x10893;
        host_args[5] = x1239;
        host_args[6] = x10894;
        host_args[7] = x10895;
        host_args[8] = x10896;
        host_args[9] = x10897;
        host(ctx, "log", "C%u: pc: %08x Decode: MUL r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x10898 = x3956 * x10673;
      if (x10898 != 0) {
        Fp x10899 = x1764 - x38;
        if (x10899 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
        Fp x10900 = x1228 - x71;
        if (x10900 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
        Fp x10901 = x1766 - x71;
        if (x10901 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x10902 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x10903 = Fp(x10902.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x10903;
            Fp x10904 = x10902 - x10903;
            Fp x10905 = x10904 * x10;
            Fp x10906 = Fp(x10905.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x10906;
            Fp x10907 = x10905 - x10906;
            Fp x10908 = x10907 * x10;
            Fp x10909 = Fp(x10908.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x10909;
            Fp x10910 = x10908 - x10909;
            Fp x10911 = x10910 * x10;
            Fp x10912 = Fp(x10911.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x10912;
            Fp x10913 = x10911 - x10912;
            Fp x10914 = x10913 * x10;
            Fp x10915 = Fp(x10914.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x10915;
            Fp x10916 = x10914 - x10915;
            Fp x10917 = x10916 * x10;
            Fp x10918 = Fp(x10917.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x10918;
            Fp x10919 = x10917 - x10918;
            Fp x10920 = x10919 * x10;
            Fp x10921 = Fp(x10920.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x10921;
            Fp x10922 = x10920 - x10921;
            Fp x10923 = x10922 * x10;
            Fp x10924 = Fp(x10923.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x10924;
          }
          Fp x10925 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x10926 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x10927 = x10926 * x3;
          Fp x10928 = x10925 + x10927;
          Fp x10929 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x10930 = x10929 * x11;
          Fp x10931 = x10928 + x10930;
          Fp x10932 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x10933 = x10932 * x12;
          Fp x10934 = x10931 + x10933;
          Fp x10935 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x10936 = x10935 * x13;
          Fp x10937 = x10934 + x10936;
          Fp x10938 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x10939 = x10938 * x14;
          Fp x10940 = x10937 + x10939;
          Fp x10941 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x10942 = x10941 * x15;
          Fp x10943 = x10940 + x10942;
          Fp x10944 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x10945 = x10944 * x16;
          Fp x10946 = x10943 + x10945;
          Fp x10947 = x10902 - x10946;
          Fp x10948 = x10947 * x33;
          if (x10948 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
          {
            Fp x10949 = Fp(x10929.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x10949;
            Fp x10950 = x10929 - x10949;
            Fp x10951 = x10950 * x26;
            Fp x10952 = Fp(x10951.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x10952;
          }
          Fp x10953 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x10954 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x10955 = x10954 * x1;
          Fp x10956 = x10953 + x10955;
          Fp x10957 = x10929 - x10956;
          Fp x10958 = x10957 * x10;
          if (x10958 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
          Fp x10959 = x10953 * x11;
          Fp x10960 = x10928 + x10959;
          {
            Fp x10961 = (x10960 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x10961;
            Fp x10962 = x10960 - x71;
            Fp x10963 = (x10962 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x10963;
            Fp x10964 = x10960 - x1;
            Fp x10965 = (x10964 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x10965;
            Fp x10966 = x10960 - x2;
            Fp x10967 = (x10966 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x10967;
            Fp x10968 = x10960 - x3;
            Fp x10969 = (x10968 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x10969;
            Fp x10970 = x10960 - x4;
            Fp x10971 = (x10970 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x10971;
            Fp x10972 = x10960 - x5;
            Fp x10973 = (x10972 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x10973;
            Fp x10974 = x10960 - x0;
            Fp x10975 = (x10974 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x10975;
            Fp x10976 = x10960 - x6;
            Fp x10977 = (x10976 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x10977;
            Fp x10978 = x10960 - x7;
            Fp x10979 = (x10978 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x10979;
            Fp x10980 = x10960 - x8;
            Fp x10981 = (x10980 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x10981;
            Fp x10982 = x10960 - x9;
            Fp x10983 = (x10982 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x10983;
            Fp x10984 = x10960 - x38;
            Fp x10985 = (x10984 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x10985;
            Fp x10986 = x10960 - x42;
            Fp x10987 = (x10986 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x10987;
            Fp x10988 = x10960 - x44;
            Fp x10989 = (x10988 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x10989;
            Fp x10990 = x10960 - x45;
            Fp x10991 = (x10990 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x10991;
            Fp x10992 = x10960 - x11;
            Fp x10993 = (x10992 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x10993;
            Fp x10994 = x10960 - x46;
            Fp x10995 = (x10994 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x10995;
            Fp x10996 = x10960 - x47;
            Fp x10997 = (x10996 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x10997;
            Fp x10998 = x10960 - x48;
            Fp x10999 = (x10998 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x10999;
            Fp x11000 = x10960 - x49;
            Fp x11001 = (x11000 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x11001;
            Fp x11002 = x10960 - x50;
            Fp x11003 = (x11002 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x11003;
            Fp x11004 = x10960 - x51;
            Fp x11005 = (x11004 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x11005;
            Fp x11006 = x10960 - x52;
            Fp x11007 = (x11006 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x11007;
            Fp x11008 = x10960 - x39;
            Fp x11009 = (x11008 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x11009;
            Fp x11010 = x10960 - x41;
            Fp x11011 = (x11010 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x11011;
            Fp x11012 = x10960 - x53;
            Fp x11013 = (x11012 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x11013;
            Fp x11014 = x10960 - x40;
            Fp x11015 = (x11014 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x11015;
            Fp x11016 = x10960 - x43;
            Fp x11017 = (x11016 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x11017;
            Fp x11018 = x10960 - x54;
            Fp x11019 = (x11018 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x11019;
            Fp x11020 = x10960 - x55;
            Fp x11021 = (x11020 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x11021;
            Fp x11022 = x10960 - x56;
            Fp x11023 = (x11022 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x11023;
          }
          Fp x11024 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x11025 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x11026 = x11025 * x1;
          Fp x11027 = x11024 + x11026;
          Fp x11028 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x11029 = x11028 * x2;
          Fp x11030 = x11027 + x11029;
          Fp x11031 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x11032 = x11031 * x3;
          Fp x11033 = x11030 + x11032;
          Fp x11034 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x11035 = x11034 * x4;
          Fp x11036 = x11033 + x11035;
          Fp x11037 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x11038 = x11037 * x5;
          Fp x11039 = x11036 + x11038;
          Fp x11040 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x11041 = x11040 * x0;
          Fp x11042 = x11039 + x11041;
          Fp x11043 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x11044 = x11043 * x6;
          Fp x11045 = x11042 + x11044;
          Fp x11046 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x11047 = x11046 * x7;
          Fp x11048 = x11045 + x11047;
          Fp x11049 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x11050 = x11049 * x8;
          Fp x11051 = x11048 + x11050;
          Fp x11052 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x11053 = x11052 * x9;
          Fp x11054 = x11051 + x11053;
          Fp x11055 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x11056 = x11055 * x38;
          Fp x11057 = x11054 + x11056;
          Fp x11058 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x11059 = x11058 * x42;
          Fp x11060 = x11057 + x11059;
          Fp x11061 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x11062 = x11061 * x44;
          Fp x11063 = x11060 + x11062;
          Fp x11064 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x11065 = x11064 * x45;
          Fp x11066 = x11063 + x11065;
          Fp x11067 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x11068 = x11067 * x11;
          Fp x11069 = x11066 + x11068;
          Fp x11070 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x11071 = x11070 * x46;
          Fp x11072 = x11069 + x11071;
          Fp x11073 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x11074 = x11073 * x47;
          Fp x11075 = x11072 + x11074;
          Fp x11076 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x11077 = x11076 * x48;
          Fp x11078 = x11075 + x11077;
          Fp x11079 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x11080 = x11079 * x49;
          Fp x11081 = x11078 + x11080;
          Fp x11082 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x11083 = x11082 * x50;
          Fp x11084 = x11081 + x11083;
          Fp x11085 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x11086 = x11085 * x51;
          Fp x11087 = x11084 + x11086;
          Fp x11088 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x11089 = x11088 * x52;
          Fp x11090 = x11087 + x11089;
          Fp x11091 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x11092 = x11091 * x39;
          Fp x11093 = x11090 + x11092;
          Fp x11094 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x11095 = x11094 * x41;
          Fp x11096 = x11093 + x11095;
          Fp x11097 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x11098 = x11097 * x53;
          Fp x11099 = x11096 + x11098;
          Fp x11100 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x11101 = x11100 * x40;
          Fp x11102 = x11099 + x11101;
          Fp x11103 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x11104 = x11103 * x43;
          Fp x11105 = x11102 + x11104;
          Fp x11106 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x11107 = x11106 * x54;
          Fp x11108 = x11105 + x11107;
          Fp x11109 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x11110 = x11109 * x55;
          Fp x11111 = x11108 + x11110;
          Fp x11112 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x11113 = x11112 * x56;
          Fp x11114 = x11111 + x11113;
          Fp x11115 = x11114 - x10960;
          if (x11115 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x4;
        Fp x11116 = x1005 * x3;
        Fp x11117 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x11118 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x11119 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x11120 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x11121 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x11122 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x11116;
        host_args[2] = x1280;
        host_args[3] = x11117;
        host_args[4] = x11118;
        host_args[5] = x1239;
        host_args[6] = x11119;
        host_args[7] = x11120;
        host_args[8] = x11121;
        host_args[9] = x11122;
        host(ctx, "log", "C%u: pc: %08x Decode: MULH r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x11123 = x4181 * x10673;
      if (x11123 != 0) {
        Fp x11124 = x1764 - x38;
        if (x11124 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
        Fp x11125 = x1228 - x1;
        if (x11125 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
        Fp x11126 = x1766 - x71;
        if (x11126 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x11127 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x11128 = Fp(x11127.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x11128;
            Fp x11129 = x11127 - x11128;
            Fp x11130 = x11129 * x10;
            Fp x11131 = Fp(x11130.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x11131;
            Fp x11132 = x11130 - x11131;
            Fp x11133 = x11132 * x10;
            Fp x11134 = Fp(x11133.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x11134;
            Fp x11135 = x11133 - x11134;
            Fp x11136 = x11135 * x10;
            Fp x11137 = Fp(x11136.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x11137;
            Fp x11138 = x11136 - x11137;
            Fp x11139 = x11138 * x10;
            Fp x11140 = Fp(x11139.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x11140;
            Fp x11141 = x11139 - x11140;
            Fp x11142 = x11141 * x10;
            Fp x11143 = Fp(x11142.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x11143;
            Fp x11144 = x11142 - x11143;
            Fp x11145 = x11144 * x10;
            Fp x11146 = Fp(x11145.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x11146;
            Fp x11147 = x11145 - x11146;
            Fp x11148 = x11147 * x10;
            Fp x11149 = Fp(x11148.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x11149;
          }
          Fp x11150 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x11151 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x11152 = x11151 * x3;
          Fp x11153 = x11150 + x11152;
          Fp x11154 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x11155 = x11154 * x11;
          Fp x11156 = x11153 + x11155;
          Fp x11157 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x11158 = x11157 * x12;
          Fp x11159 = x11156 + x11158;
          Fp x11160 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x11161 = x11160 * x13;
          Fp x11162 = x11159 + x11161;
          Fp x11163 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x11164 = x11163 * x14;
          Fp x11165 = x11162 + x11164;
          Fp x11166 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x11167 = x11166 * x15;
          Fp x11168 = x11165 + x11167;
          Fp x11169 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x11170 = x11169 * x16;
          Fp x11171 = x11168 + x11170;
          Fp x11172 = x11127 - x11171;
          Fp x11173 = x11172 * x33;
          if (x11173 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
          {
            Fp x11174 = Fp(x11154.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x11174;
            Fp x11175 = x11154 - x11174;
            Fp x11176 = x11175 * x26;
            Fp x11177 = Fp(x11176.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x11177;
          }
          Fp x11178 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x11179 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x11180 = x11179 * x1;
          Fp x11181 = x11178 + x11180;
          Fp x11182 = x11154 - x11181;
          Fp x11183 = x11182 * x10;
          if (x11183 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
          Fp x11184 = x11178 * x11;
          Fp x11185 = x11153 + x11184;
          {
            Fp x11186 = (x11185 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x11186;
            Fp x11187 = x11185 - x71;
            Fp x11188 = (x11187 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x11188;
            Fp x11189 = x11185 - x1;
            Fp x11190 = (x11189 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x11190;
            Fp x11191 = x11185 - x2;
            Fp x11192 = (x11191 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x11192;
            Fp x11193 = x11185 - x3;
            Fp x11194 = (x11193 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x11194;
            Fp x11195 = x11185 - x4;
            Fp x11196 = (x11195 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x11196;
            Fp x11197 = x11185 - x5;
            Fp x11198 = (x11197 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x11198;
            Fp x11199 = x11185 - x0;
            Fp x11200 = (x11199 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x11200;
            Fp x11201 = x11185 - x6;
            Fp x11202 = (x11201 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x11202;
            Fp x11203 = x11185 - x7;
            Fp x11204 = (x11203 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x11204;
            Fp x11205 = x11185 - x8;
            Fp x11206 = (x11205 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x11206;
            Fp x11207 = x11185 - x9;
            Fp x11208 = (x11207 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x11208;
            Fp x11209 = x11185 - x38;
            Fp x11210 = (x11209 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x11210;
            Fp x11211 = x11185 - x42;
            Fp x11212 = (x11211 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x11212;
            Fp x11213 = x11185 - x44;
            Fp x11214 = (x11213 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x11214;
            Fp x11215 = x11185 - x45;
            Fp x11216 = (x11215 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x11216;
            Fp x11217 = x11185 - x11;
            Fp x11218 = (x11217 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x11218;
            Fp x11219 = x11185 - x46;
            Fp x11220 = (x11219 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x11220;
            Fp x11221 = x11185 - x47;
            Fp x11222 = (x11221 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x11222;
            Fp x11223 = x11185 - x48;
            Fp x11224 = (x11223 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x11224;
            Fp x11225 = x11185 - x49;
            Fp x11226 = (x11225 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x11226;
            Fp x11227 = x11185 - x50;
            Fp x11228 = (x11227 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x11228;
            Fp x11229 = x11185 - x51;
            Fp x11230 = (x11229 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x11230;
            Fp x11231 = x11185 - x52;
            Fp x11232 = (x11231 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x11232;
            Fp x11233 = x11185 - x39;
            Fp x11234 = (x11233 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x11234;
            Fp x11235 = x11185 - x41;
            Fp x11236 = (x11235 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x11236;
            Fp x11237 = x11185 - x53;
            Fp x11238 = (x11237 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x11238;
            Fp x11239 = x11185 - x40;
            Fp x11240 = (x11239 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x11240;
            Fp x11241 = x11185 - x43;
            Fp x11242 = (x11241 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x11242;
            Fp x11243 = x11185 - x54;
            Fp x11244 = (x11243 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x11244;
            Fp x11245 = x11185 - x55;
            Fp x11246 = (x11245 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x11246;
            Fp x11247 = x11185 - x56;
            Fp x11248 = (x11247 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x11248;
          }
          Fp x11249 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x11250 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x11251 = x11250 * x1;
          Fp x11252 = x11249 + x11251;
          Fp x11253 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x11254 = x11253 * x2;
          Fp x11255 = x11252 + x11254;
          Fp x11256 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x11257 = x11256 * x3;
          Fp x11258 = x11255 + x11257;
          Fp x11259 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x11260 = x11259 * x4;
          Fp x11261 = x11258 + x11260;
          Fp x11262 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x11263 = x11262 * x5;
          Fp x11264 = x11261 + x11263;
          Fp x11265 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x11266 = x11265 * x0;
          Fp x11267 = x11264 + x11266;
          Fp x11268 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x11269 = x11268 * x6;
          Fp x11270 = x11267 + x11269;
          Fp x11271 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x11272 = x11271 * x7;
          Fp x11273 = x11270 + x11272;
          Fp x11274 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x11275 = x11274 * x8;
          Fp x11276 = x11273 + x11275;
          Fp x11277 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x11278 = x11277 * x9;
          Fp x11279 = x11276 + x11278;
          Fp x11280 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x11281 = x11280 * x38;
          Fp x11282 = x11279 + x11281;
          Fp x11283 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x11284 = x11283 * x42;
          Fp x11285 = x11282 + x11284;
          Fp x11286 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x11287 = x11286 * x44;
          Fp x11288 = x11285 + x11287;
          Fp x11289 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x11290 = x11289 * x45;
          Fp x11291 = x11288 + x11290;
          Fp x11292 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x11293 = x11292 * x11;
          Fp x11294 = x11291 + x11293;
          Fp x11295 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x11296 = x11295 * x46;
          Fp x11297 = x11294 + x11296;
          Fp x11298 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x11299 = x11298 * x47;
          Fp x11300 = x11297 + x11299;
          Fp x11301 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x11302 = x11301 * x48;
          Fp x11303 = x11300 + x11302;
          Fp x11304 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x11305 = x11304 * x49;
          Fp x11306 = x11303 + x11305;
          Fp x11307 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x11308 = x11307 * x50;
          Fp x11309 = x11306 + x11308;
          Fp x11310 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x11311 = x11310 * x51;
          Fp x11312 = x11309 + x11311;
          Fp x11313 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x11314 = x11313 * x52;
          Fp x11315 = x11312 + x11314;
          Fp x11316 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x11317 = x11316 * x39;
          Fp x11318 = x11315 + x11317;
          Fp x11319 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x11320 = x11319 * x41;
          Fp x11321 = x11318 + x11320;
          Fp x11322 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x11323 = x11322 * x53;
          Fp x11324 = x11321 + x11323;
          Fp x11325 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x11326 = x11325 * x40;
          Fp x11327 = x11324 + x11326;
          Fp x11328 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x11329 = x11328 * x43;
          Fp x11330 = x11327 + x11329;
          Fp x11331 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x11332 = x11331 * x54;
          Fp x11333 = x11330 + x11332;
          Fp x11334 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x11335 = x11334 * x55;
          Fp x11336 = x11333 + x11335;
          Fp x11337 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x11338 = x11337 * x56;
          Fp x11339 = x11336 + x11338;
          Fp x11340 = x11339 - x11185;
          if (x11340 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x4;
        Fp x11341 = x1005 * x3;
        Fp x11342 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x11343 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x11344 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x11345 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x11346 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x11347 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x11341;
        host_args[2] = x1280;
        host_args[3] = x11342;
        host_args[4] = x11343;
        host_args[5] = x1239;
        host_args[6] = x11344;
        host_args[7] = x11345;
        host_args[8] = x11346;
        host_args[9] = x11347;
        host(ctx, "log", "C%u: pc: %08x Decode: MULSU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x11348 = x4406 * x10673;
      if (x11348 != 0) {
        Fp x11349 = x1764 - x38;
        if (x11349 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
        Fp x11350 = x1228 - x2;
        if (x11350 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
        Fp x11351 = x1766 - x71;
        if (x11351 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x11352 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x11353 = Fp(x11352.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x11353;
            Fp x11354 = x11352 - x11353;
            Fp x11355 = x11354 * x10;
            Fp x11356 = Fp(x11355.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x11356;
            Fp x11357 = x11355 - x11356;
            Fp x11358 = x11357 * x10;
            Fp x11359 = Fp(x11358.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x11359;
            Fp x11360 = x11358 - x11359;
            Fp x11361 = x11360 * x10;
            Fp x11362 = Fp(x11361.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x11362;
            Fp x11363 = x11361 - x11362;
            Fp x11364 = x11363 * x10;
            Fp x11365 = Fp(x11364.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x11365;
            Fp x11366 = x11364 - x11365;
            Fp x11367 = x11366 * x10;
            Fp x11368 = Fp(x11367.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x11368;
            Fp x11369 = x11367 - x11368;
            Fp x11370 = x11369 * x10;
            Fp x11371 = Fp(x11370.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x11371;
            Fp x11372 = x11370 - x11371;
            Fp x11373 = x11372 * x10;
            Fp x11374 = Fp(x11373.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x11374;
          }
          Fp x11375 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x11376 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x11377 = x11376 * x3;
          Fp x11378 = x11375 + x11377;
          Fp x11379 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x11380 = x11379 * x11;
          Fp x11381 = x11378 + x11380;
          Fp x11382 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x11383 = x11382 * x12;
          Fp x11384 = x11381 + x11383;
          Fp x11385 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x11386 = x11385 * x13;
          Fp x11387 = x11384 + x11386;
          Fp x11388 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x11389 = x11388 * x14;
          Fp x11390 = x11387 + x11389;
          Fp x11391 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x11392 = x11391 * x15;
          Fp x11393 = x11390 + x11392;
          Fp x11394 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x11395 = x11394 * x16;
          Fp x11396 = x11393 + x11395;
          Fp x11397 = x11352 - x11396;
          Fp x11398 = x11397 * x33;
          if (x11398 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
          {
            Fp x11399 = Fp(x11379.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x11399;
            Fp x11400 = x11379 - x11399;
            Fp x11401 = x11400 * x26;
            Fp x11402 = Fp(x11401.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x11402;
          }
          Fp x11403 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x11404 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x11405 = x11404 * x1;
          Fp x11406 = x11403 + x11405;
          Fp x11407 = x11379 - x11406;
          Fp x11408 = x11407 * x10;
          if (x11408 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
          Fp x11409 = x11403 * x11;
          Fp x11410 = x11378 + x11409;
          {
            Fp x11411 = (x11410 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x11411;
            Fp x11412 = x11410 - x71;
            Fp x11413 = (x11412 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x11413;
            Fp x11414 = x11410 - x1;
            Fp x11415 = (x11414 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x11415;
            Fp x11416 = x11410 - x2;
            Fp x11417 = (x11416 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x11417;
            Fp x11418 = x11410 - x3;
            Fp x11419 = (x11418 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x11419;
            Fp x11420 = x11410 - x4;
            Fp x11421 = (x11420 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x11421;
            Fp x11422 = x11410 - x5;
            Fp x11423 = (x11422 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x11423;
            Fp x11424 = x11410 - x0;
            Fp x11425 = (x11424 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x11425;
            Fp x11426 = x11410 - x6;
            Fp x11427 = (x11426 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x11427;
            Fp x11428 = x11410 - x7;
            Fp x11429 = (x11428 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x11429;
            Fp x11430 = x11410 - x8;
            Fp x11431 = (x11430 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x11431;
            Fp x11432 = x11410 - x9;
            Fp x11433 = (x11432 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x11433;
            Fp x11434 = x11410 - x38;
            Fp x11435 = (x11434 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x11435;
            Fp x11436 = x11410 - x42;
            Fp x11437 = (x11436 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x11437;
            Fp x11438 = x11410 - x44;
            Fp x11439 = (x11438 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x11439;
            Fp x11440 = x11410 - x45;
            Fp x11441 = (x11440 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x11441;
            Fp x11442 = x11410 - x11;
            Fp x11443 = (x11442 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x11443;
            Fp x11444 = x11410 - x46;
            Fp x11445 = (x11444 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x11445;
            Fp x11446 = x11410 - x47;
            Fp x11447 = (x11446 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x11447;
            Fp x11448 = x11410 - x48;
            Fp x11449 = (x11448 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x11449;
            Fp x11450 = x11410 - x49;
            Fp x11451 = (x11450 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x11451;
            Fp x11452 = x11410 - x50;
            Fp x11453 = (x11452 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x11453;
            Fp x11454 = x11410 - x51;
            Fp x11455 = (x11454 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x11455;
            Fp x11456 = x11410 - x52;
            Fp x11457 = (x11456 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x11457;
            Fp x11458 = x11410 - x39;
            Fp x11459 = (x11458 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x11459;
            Fp x11460 = x11410 - x41;
            Fp x11461 = (x11460 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x11461;
            Fp x11462 = x11410 - x53;
            Fp x11463 = (x11462 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x11463;
            Fp x11464 = x11410 - x40;
            Fp x11465 = (x11464 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x11465;
            Fp x11466 = x11410 - x43;
            Fp x11467 = (x11466 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x11467;
            Fp x11468 = x11410 - x54;
            Fp x11469 = (x11468 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x11469;
            Fp x11470 = x11410 - x55;
            Fp x11471 = (x11470 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x11471;
            Fp x11472 = x11410 - x56;
            Fp x11473 = (x11472 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x11473;
          }
          Fp x11474 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x11475 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x11476 = x11475 * x1;
          Fp x11477 = x11474 + x11476;
          Fp x11478 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x11479 = x11478 * x2;
          Fp x11480 = x11477 + x11479;
          Fp x11481 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x11482 = x11481 * x3;
          Fp x11483 = x11480 + x11482;
          Fp x11484 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x11485 = x11484 * x4;
          Fp x11486 = x11483 + x11485;
          Fp x11487 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x11488 = x11487 * x5;
          Fp x11489 = x11486 + x11488;
          Fp x11490 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x11491 = x11490 * x0;
          Fp x11492 = x11489 + x11491;
          Fp x11493 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x11494 = x11493 * x6;
          Fp x11495 = x11492 + x11494;
          Fp x11496 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x11497 = x11496 * x7;
          Fp x11498 = x11495 + x11497;
          Fp x11499 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x11500 = x11499 * x8;
          Fp x11501 = x11498 + x11500;
          Fp x11502 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x11503 = x11502 * x9;
          Fp x11504 = x11501 + x11503;
          Fp x11505 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x11506 = x11505 * x38;
          Fp x11507 = x11504 + x11506;
          Fp x11508 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x11509 = x11508 * x42;
          Fp x11510 = x11507 + x11509;
          Fp x11511 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x11512 = x11511 * x44;
          Fp x11513 = x11510 + x11512;
          Fp x11514 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x11515 = x11514 * x45;
          Fp x11516 = x11513 + x11515;
          Fp x11517 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x11518 = x11517 * x11;
          Fp x11519 = x11516 + x11518;
          Fp x11520 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x11521 = x11520 * x46;
          Fp x11522 = x11519 + x11521;
          Fp x11523 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x11524 = x11523 * x47;
          Fp x11525 = x11522 + x11524;
          Fp x11526 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x11527 = x11526 * x48;
          Fp x11528 = x11525 + x11527;
          Fp x11529 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x11530 = x11529 * x49;
          Fp x11531 = x11528 + x11530;
          Fp x11532 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x11533 = x11532 * x50;
          Fp x11534 = x11531 + x11533;
          Fp x11535 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x11536 = x11535 * x51;
          Fp x11537 = x11534 + x11536;
          Fp x11538 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x11539 = x11538 * x52;
          Fp x11540 = x11537 + x11539;
          Fp x11541 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x11542 = x11541 * x39;
          Fp x11543 = x11540 + x11542;
          Fp x11544 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x11545 = x11544 * x41;
          Fp x11546 = x11543 + x11545;
          Fp x11547 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x11548 = x11547 * x53;
          Fp x11549 = x11546 + x11548;
          Fp x11550 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x11551 = x11550 * x40;
          Fp x11552 = x11549 + x11551;
          Fp x11553 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x11554 = x11553 * x43;
          Fp x11555 = x11552 + x11554;
          Fp x11556 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x11557 = x11556 * x54;
          Fp x11558 = x11555 + x11557;
          Fp x11559 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x11560 = x11559 * x55;
          Fp x11561 = x11558 + x11560;
          Fp x11562 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x11563 = x11562 * x56;
          Fp x11564 = x11561 + x11563;
          Fp x11565 = x11564 - x11410;
          if (x11565 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x4;
        Fp x11566 = x1005 * x3;
        Fp x11567 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x11568 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x11569 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x11570 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x11571 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x11572 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x11566;
        host_args[2] = x1280;
        host_args[3] = x11567;
        host_args[4] = x11568;
        host_args[5] = x1239;
        host_args[6] = x11569;
        host_args[7] = x11570;
        host_args[8] = x11571;
        host_args[9] = x11572;
        host(ctx, "log", "C%u: pc: %08x Decode: MULU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x11573 = x4631 * x10673;
      if (x11573 != 0) {
        Fp x11574 = x1764 - x38;
        if (x11574 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
        Fp x11575 = x1228 - x71;
        if (x11575 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x11576 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x11577 = Fp(x11576.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x11577;
            Fp x11578 = x11576 - x11577;
            Fp x11579 = x11578 * x10;
            Fp x11580 = Fp(x11579.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x11580;
            Fp x11581 = x11579 - x11580;
            Fp x11582 = x11581 * x10;
            Fp x11583 = Fp(x11582.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x11583;
            Fp x11584 = x11582 - x11583;
            Fp x11585 = x11584 * x10;
            Fp x11586 = Fp(x11585.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x11586;
            Fp x11587 = x11585 - x11586;
            Fp x11588 = x11587 * x10;
            Fp x11589 = Fp(x11588.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x11589;
            Fp x11590 = x11588 - x11589;
            Fp x11591 = x11590 * x10;
            Fp x11592 = Fp(x11591.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x11592;
            Fp x11593 = x11591 - x11592;
            Fp x11594 = x11593 * x10;
            Fp x11595 = Fp(x11594.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x11595;
            Fp x11596 = x11594 - x11595;
            Fp x11597 = x11596 * x10;
            Fp x11598 = Fp(x11597.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x11598;
          }
          Fp x11599 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x11600 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x11601 = x11600 * x3;
          Fp x11602 = x11599 + x11601;
          Fp x11603 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x11604 = x11603 * x11;
          Fp x11605 = x11602 + x11604;
          Fp x11606 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x11607 = x11606 * x12;
          Fp x11608 = x11605 + x11607;
          Fp x11609 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x11610 = x11609 * x13;
          Fp x11611 = x11608 + x11610;
          Fp x11612 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x11613 = x11612 * x14;
          Fp x11614 = x11611 + x11613;
          Fp x11615 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x11616 = x11615 * x15;
          Fp x11617 = x11614 + x11616;
          Fp x11618 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x11619 = x11618 * x16;
          Fp x11620 = x11617 + x11619;
          Fp x11621 = x11576 - x11620;
          Fp x11622 = x11621 * x33;
          if (x11622 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
          {
            Fp x11623 = Fp(x11603.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x11623;
            Fp x11624 = x11603 - x11623;
            Fp x11625 = x11624 * x26;
            Fp x11626 = Fp(x11625.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x11626;
          }
          Fp x11627 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x11628 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x11629 = x11628 * x1;
          Fp x11630 = x11627 + x11629;
          Fp x11631 = x11603 - x11630;
          Fp x11632 = x11631 * x10;
          if (x11632 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
          Fp x11633 = x11627 * x11;
          Fp x11634 = x11602 + x11633;
          {
            Fp x11635 = (x11634 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x11635;
            Fp x11636 = x11634 - x71;
            Fp x11637 = (x11636 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x11637;
            Fp x11638 = x11634 - x1;
            Fp x11639 = (x11638 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x11639;
            Fp x11640 = x11634 - x2;
            Fp x11641 = (x11640 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x11641;
            Fp x11642 = x11634 - x3;
            Fp x11643 = (x11642 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x11643;
            Fp x11644 = x11634 - x4;
            Fp x11645 = (x11644 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x11645;
            Fp x11646 = x11634 - x5;
            Fp x11647 = (x11646 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x11647;
            Fp x11648 = x11634 - x0;
            Fp x11649 = (x11648 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x11649;
            Fp x11650 = x11634 - x6;
            Fp x11651 = (x11650 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x11651;
            Fp x11652 = x11634 - x7;
            Fp x11653 = (x11652 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x11653;
            Fp x11654 = x11634 - x8;
            Fp x11655 = (x11654 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x11655;
            Fp x11656 = x11634 - x9;
            Fp x11657 = (x11656 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x11657;
            Fp x11658 = x11634 - x38;
            Fp x11659 = (x11658 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x11659;
            Fp x11660 = x11634 - x42;
            Fp x11661 = (x11660 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x11661;
            Fp x11662 = x11634 - x44;
            Fp x11663 = (x11662 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x11663;
            Fp x11664 = x11634 - x45;
            Fp x11665 = (x11664 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x11665;
            Fp x11666 = x11634 - x11;
            Fp x11667 = (x11666 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x11667;
            Fp x11668 = x11634 - x46;
            Fp x11669 = (x11668 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x11669;
            Fp x11670 = x11634 - x47;
            Fp x11671 = (x11670 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x11671;
            Fp x11672 = x11634 - x48;
            Fp x11673 = (x11672 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x11673;
            Fp x11674 = x11634 - x49;
            Fp x11675 = (x11674 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x11675;
            Fp x11676 = x11634 - x50;
            Fp x11677 = (x11676 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x11677;
            Fp x11678 = x11634 - x51;
            Fp x11679 = (x11678 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x11679;
            Fp x11680 = x11634 - x52;
            Fp x11681 = (x11680 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x11681;
            Fp x11682 = x11634 - x39;
            Fp x11683 = (x11682 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x11683;
            Fp x11684 = x11634 - x41;
            Fp x11685 = (x11684 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x11685;
            Fp x11686 = x11634 - x53;
            Fp x11687 = (x11686 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x11687;
            Fp x11688 = x11634 - x40;
            Fp x11689 = (x11688 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x11689;
            Fp x11690 = x11634 - x43;
            Fp x11691 = (x11690 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x11691;
            Fp x11692 = x11634 - x54;
            Fp x11693 = (x11692 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x11693;
            Fp x11694 = x11634 - x55;
            Fp x11695 = (x11694 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x11695;
            Fp x11696 = x11634 - x56;
            Fp x11697 = (x11696 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x11697;
          }
          Fp x11698 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x11699 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x11700 = x11699 * x1;
          Fp x11701 = x11698 + x11700;
          Fp x11702 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x11703 = x11702 * x2;
          Fp x11704 = x11701 + x11703;
          Fp x11705 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x11706 = x11705 * x3;
          Fp x11707 = x11704 + x11706;
          Fp x11708 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x11709 = x11708 * x4;
          Fp x11710 = x11707 + x11709;
          Fp x11711 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x11712 = x11711 * x5;
          Fp x11713 = x11710 + x11712;
          Fp x11714 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x11715 = x11714 * x0;
          Fp x11716 = x11713 + x11715;
          Fp x11717 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x11718 = x11717 * x6;
          Fp x11719 = x11716 + x11718;
          Fp x11720 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x11721 = x11720 * x7;
          Fp x11722 = x11719 + x11721;
          Fp x11723 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x11724 = x11723 * x8;
          Fp x11725 = x11722 + x11724;
          Fp x11726 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x11727 = x11726 * x9;
          Fp x11728 = x11725 + x11727;
          Fp x11729 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x11730 = x11729 * x38;
          Fp x11731 = x11728 + x11730;
          Fp x11732 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x11733 = x11732 * x42;
          Fp x11734 = x11731 + x11733;
          Fp x11735 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x11736 = x11735 * x44;
          Fp x11737 = x11734 + x11736;
          Fp x11738 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x11739 = x11738 * x45;
          Fp x11740 = x11737 + x11739;
          Fp x11741 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x11742 = x11741 * x11;
          Fp x11743 = x11740 + x11742;
          Fp x11744 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x11745 = x11744 * x46;
          Fp x11746 = x11743 + x11745;
          Fp x11747 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x11748 = x11747 * x47;
          Fp x11749 = x11746 + x11748;
          Fp x11750 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x11751 = x11750 * x48;
          Fp x11752 = x11749 + x11751;
          Fp x11753 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x11754 = x11753 * x49;
          Fp x11755 = x11752 + x11754;
          Fp x11756 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x11757 = x11756 * x50;
          Fp x11758 = x11755 + x11757;
          Fp x11759 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x11760 = x11759 * x51;
          Fp x11761 = x11758 + x11760;
          Fp x11762 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x11763 = x11762 * x52;
          Fp x11764 = x11761 + x11763;
          Fp x11765 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x11766 = x11765 * x39;
          Fp x11767 = x11764 + x11766;
          Fp x11768 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x11769 = x11768 * x41;
          Fp x11770 = x11767 + x11769;
          Fp x11771 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x11772 = x11771 * x53;
          Fp x11773 = x11770 + x11772;
          Fp x11774 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x11775 = x11774 * x40;
          Fp x11776 = x11773 + x11775;
          Fp x11777 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x11778 = x11777 * x43;
          Fp x11779 = x11776 + x11778;
          Fp x11780 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x11781 = x11780 * x54;
          Fp x11782 = x11779 + x11781;
          Fp x11783 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x11784 = x11783 * x55;
          Fp x11785 = x11782 + x11784;
          Fp x11786 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x11787 = x11786 * x56;
          Fp x11788 = x11785 + x11787;
          Fp x11789 = x11788 - x11634;
          if (x11789 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x4;
        Fp x11790 = x1005 * x3;
        Fp x11791 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x11792 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x11793 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x11794 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x11795 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x11796 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x11790;
        host_args[2] = x1280;
        host_args[3] = x11791;
        host_args[4] = x11792;
        host_args[5] = x1239;
        host_args[6] = x11793;
        host_args[7] = x11794;
        host_args[8] = x11795;
        host_args[9] = x11796;
        host(ctx, "log", "C%u: pc: %08x Decode: SLL r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x11797 = x4856 * x10673;
      if (x11797 != 0) {
        Fp x11798 = x1764 - x3;
        if (x11798 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
        Fp x11799 = x1228 - x71;
        if (x11799 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x11800 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x11801 = Fp(x11800.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x11801;
            Fp x11802 = x11800 - x11801;
            Fp x11803 = x11802 * x10;
            Fp x11804 = Fp(x11803.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x11804;
            Fp x11805 = x11803 - x11804;
            Fp x11806 = x11805 * x10;
            Fp x11807 = Fp(x11806.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x11807;
            Fp x11808 = x11806 - x11807;
            Fp x11809 = x11808 * x10;
            Fp x11810 = Fp(x11809.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x11810;
            Fp x11811 = x11809 - x11810;
            Fp x11812 = x11811 * x10;
            Fp x11813 = Fp(x11812.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x11813;
            Fp x11814 = x11812 - x11813;
            Fp x11815 = x11814 * x10;
            Fp x11816 = Fp(x11815.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x11816;
            Fp x11817 = x11815 - x11816;
            Fp x11818 = x11817 * x10;
            Fp x11819 = Fp(x11818.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x11819;
            Fp x11820 = x11818 - x11819;
            Fp x11821 = x11820 * x10;
            Fp x11822 = Fp(x11821.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x11822;
          }
          Fp x11823 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x11824 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x11825 = x11824 * x3;
          Fp x11826 = x11823 + x11825;
          Fp x11827 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x11828 = x11827 * x11;
          Fp x11829 = x11826 + x11828;
          Fp x11830 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x11831 = x11830 * x12;
          Fp x11832 = x11829 + x11831;
          Fp x11833 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x11834 = x11833 * x13;
          Fp x11835 = x11832 + x11834;
          Fp x11836 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x11837 = x11836 * x14;
          Fp x11838 = x11835 + x11837;
          Fp x11839 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x11840 = x11839 * x15;
          Fp x11841 = x11838 + x11840;
          Fp x11842 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x11843 = x11842 * x16;
          Fp x11844 = x11841 + x11843;
          Fp x11845 = x11800 - x11844;
          Fp x11846 = x11845 * x33;
          if (x11846 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
          {
            Fp x11847 = Fp(x11827.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x11847;
            Fp x11848 = x11827 - x11847;
            Fp x11849 = x11848 * x26;
            Fp x11850 = Fp(x11849.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x11850;
          }
          Fp x11851 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x11852 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x11853 = x11852 * x1;
          Fp x11854 = x11851 + x11853;
          Fp x11855 = x11827 - x11854;
          Fp x11856 = x11855 * x10;
          if (x11856 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
          Fp x11857 = x11851 * x11;
          Fp x11858 = x11826 + x11857;
          {
            Fp x11859 = (x11858 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x11859;
            Fp x11860 = x11858 - x71;
            Fp x11861 = (x11860 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x11861;
            Fp x11862 = x11858 - x1;
            Fp x11863 = (x11862 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x11863;
            Fp x11864 = x11858 - x2;
            Fp x11865 = (x11864 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x11865;
            Fp x11866 = x11858 - x3;
            Fp x11867 = (x11866 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x11867;
            Fp x11868 = x11858 - x4;
            Fp x11869 = (x11868 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x11869;
            Fp x11870 = x11858 - x5;
            Fp x11871 = (x11870 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x11871;
            Fp x11872 = x11858 - x0;
            Fp x11873 = (x11872 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x11873;
            Fp x11874 = x11858 - x6;
            Fp x11875 = (x11874 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x11875;
            Fp x11876 = x11858 - x7;
            Fp x11877 = (x11876 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x11877;
            Fp x11878 = x11858 - x8;
            Fp x11879 = (x11878 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x11879;
            Fp x11880 = x11858 - x9;
            Fp x11881 = (x11880 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x11881;
            Fp x11882 = x11858 - x38;
            Fp x11883 = (x11882 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x11883;
            Fp x11884 = x11858 - x42;
            Fp x11885 = (x11884 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x11885;
            Fp x11886 = x11858 - x44;
            Fp x11887 = (x11886 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x11887;
            Fp x11888 = x11858 - x45;
            Fp x11889 = (x11888 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x11889;
            Fp x11890 = x11858 - x11;
            Fp x11891 = (x11890 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x11891;
            Fp x11892 = x11858 - x46;
            Fp x11893 = (x11892 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x11893;
            Fp x11894 = x11858 - x47;
            Fp x11895 = (x11894 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x11895;
            Fp x11896 = x11858 - x48;
            Fp x11897 = (x11896 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x11897;
            Fp x11898 = x11858 - x49;
            Fp x11899 = (x11898 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x11899;
            Fp x11900 = x11858 - x50;
            Fp x11901 = (x11900 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x11901;
            Fp x11902 = x11858 - x51;
            Fp x11903 = (x11902 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x11903;
            Fp x11904 = x11858 - x52;
            Fp x11905 = (x11904 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x11905;
            Fp x11906 = x11858 - x39;
            Fp x11907 = (x11906 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x11907;
            Fp x11908 = x11858 - x41;
            Fp x11909 = (x11908 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x11909;
            Fp x11910 = x11858 - x53;
            Fp x11911 = (x11910 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x11911;
            Fp x11912 = x11858 - x40;
            Fp x11913 = (x11912 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x11913;
            Fp x11914 = x11858 - x43;
            Fp x11915 = (x11914 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x11915;
            Fp x11916 = x11858 - x54;
            Fp x11917 = (x11916 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x11917;
            Fp x11918 = x11858 - x55;
            Fp x11919 = (x11918 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x11919;
            Fp x11920 = x11858 - x56;
            Fp x11921 = (x11920 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x11921;
          }
          Fp x11922 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x11923 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x11924 = x11923 * x1;
          Fp x11925 = x11922 + x11924;
          Fp x11926 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x11927 = x11926 * x2;
          Fp x11928 = x11925 + x11927;
          Fp x11929 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x11930 = x11929 * x3;
          Fp x11931 = x11928 + x11930;
          Fp x11932 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x11933 = x11932 * x4;
          Fp x11934 = x11931 + x11933;
          Fp x11935 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x11936 = x11935 * x5;
          Fp x11937 = x11934 + x11936;
          Fp x11938 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x11939 = x11938 * x0;
          Fp x11940 = x11937 + x11939;
          Fp x11941 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x11942 = x11941 * x6;
          Fp x11943 = x11940 + x11942;
          Fp x11944 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x11945 = x11944 * x7;
          Fp x11946 = x11943 + x11945;
          Fp x11947 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x11948 = x11947 * x8;
          Fp x11949 = x11946 + x11948;
          Fp x11950 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x11951 = x11950 * x9;
          Fp x11952 = x11949 + x11951;
          Fp x11953 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x11954 = x11953 * x38;
          Fp x11955 = x11952 + x11954;
          Fp x11956 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x11957 = x11956 * x42;
          Fp x11958 = x11955 + x11957;
          Fp x11959 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x11960 = x11959 * x44;
          Fp x11961 = x11958 + x11960;
          Fp x11962 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x11963 = x11962 * x45;
          Fp x11964 = x11961 + x11963;
          Fp x11965 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x11966 = x11965 * x11;
          Fp x11967 = x11964 + x11966;
          Fp x11968 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x11969 = x11968 * x46;
          Fp x11970 = x11967 + x11969;
          Fp x11971 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x11972 = x11971 * x47;
          Fp x11973 = x11970 + x11972;
          Fp x11974 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x11975 = x11974 * x48;
          Fp x11976 = x11973 + x11975;
          Fp x11977 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x11978 = x11977 * x49;
          Fp x11979 = x11976 + x11978;
          Fp x11980 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x11981 = x11980 * x50;
          Fp x11982 = x11979 + x11981;
          Fp x11983 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x11984 = x11983 * x51;
          Fp x11985 = x11982 + x11984;
          Fp x11986 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x11987 = x11986 * x52;
          Fp x11988 = x11985 + x11987;
          Fp x11989 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x11990 = x11989 * x39;
          Fp x11991 = x11988 + x11990;
          Fp x11992 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x11993 = x11992 * x41;
          Fp x11994 = x11991 + x11993;
          Fp x11995 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x11996 = x11995 * x53;
          Fp x11997 = x11994 + x11996;
          Fp x11998 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x11999 = x11998 * x40;
          Fp x12000 = x11997 + x11999;
          Fp x12001 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x12002 = x12001 * x43;
          Fp x12003 = x12000 + x12002;
          Fp x12004 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x12005 = x12004 * x54;
          Fp x12006 = x12003 + x12005;
          Fp x12007 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x12008 = x12007 * x55;
          Fp x12009 = x12006 + x12008;
          Fp x12010 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x12011 = x12010 * x56;
          Fp x12012 = x12009 + x12011;
          Fp x12013 = x12012 - x11858;
          if (x12013 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x4;
        Fp x12014 = x1005 * x3;
        Fp x12015 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x12016 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x12017 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x12018 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x12019 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x12020 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x12014;
        host_args[2] = x1280;
        host_args[3] = x12015;
        host_args[4] = x12016;
        host_args[5] = x1239;
        host_args[6] = x12017;
        host_args[7] = x12018;
        host_args[8] = x12019;
        host_args[9] = x12020;
        host(ctx, "log", "C%u: pc: %08x Decode: SLLI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x12021 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x12022 = x4181 * x12021;
      if (x12022 != 0) {
        Fp x12023 = x1764 - x38;
        if (x12023 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:118");
        Fp x12024 = x1228 - x3;
        if (x12024 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:118");
        Fp x12025 = x1766 - x71;
        if (x12025 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:118");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x12026 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x12027 = Fp(x12026.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x12027;
            Fp x12028 = x12026 - x12027;
            Fp x12029 = x12028 * x10;
            Fp x12030 = Fp(x12029.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x12030;
            Fp x12031 = x12029 - x12030;
            Fp x12032 = x12031 * x10;
            Fp x12033 = Fp(x12032.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x12033;
            Fp x12034 = x12032 - x12033;
            Fp x12035 = x12034 * x10;
            Fp x12036 = Fp(x12035.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x12036;
            Fp x12037 = x12035 - x12036;
            Fp x12038 = x12037 * x10;
            Fp x12039 = Fp(x12038.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x12039;
            Fp x12040 = x12038 - x12039;
            Fp x12041 = x12040 * x10;
            Fp x12042 = Fp(x12041.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x12042;
            Fp x12043 = x12041 - x12042;
            Fp x12044 = x12043 * x10;
            Fp x12045 = Fp(x12044.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x12045;
            Fp x12046 = x12044 - x12045;
            Fp x12047 = x12046 * x10;
            Fp x12048 = Fp(x12047.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x12048;
          }
          Fp x12049 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x12050 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x12051 = x12050 * x3;
          Fp x12052 = x12049 + x12051;
          Fp x12053 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x12054 = x12053 * x11;
          Fp x12055 = x12052 + x12054;
          Fp x12056 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x12057 = x12056 * x12;
          Fp x12058 = x12055 + x12057;
          Fp x12059 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x12060 = x12059 * x13;
          Fp x12061 = x12058 + x12060;
          Fp x12062 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x12063 = x12062 * x14;
          Fp x12064 = x12061 + x12063;
          Fp x12065 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x12066 = x12065 * x15;
          Fp x12067 = x12064 + x12066;
          Fp x12068 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x12069 = x12068 * x16;
          Fp x12070 = x12067 + x12069;
          Fp x12071 = x12026 - x12070;
          Fp x12072 = x12071 * x33;
          if (x12072 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:118");
          {
            Fp x12073 = Fp(x12053.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x12073;
            Fp x12074 = x12053 - x12073;
            Fp x12075 = x12074 * x26;
            Fp x12076 = Fp(x12075.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x12076;
          }
          Fp x12077 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x12078 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x12079 = x12078 * x1;
          Fp x12080 = x12077 + x12079;
          Fp x12081 = x12053 - x12080;
          Fp x12082 = x12081 * x10;
          if (x12082 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:118");
          Fp x12083 = x12077 * x11;
          Fp x12084 = x12052 + x12083;
          {
            Fp x12085 = (x12084 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x12085;
            Fp x12086 = x12084 - x71;
            Fp x12087 = (x12086 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x12087;
            Fp x12088 = x12084 - x1;
            Fp x12089 = (x12088 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x12089;
            Fp x12090 = x12084 - x2;
            Fp x12091 = (x12090 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x12091;
            Fp x12092 = x12084 - x3;
            Fp x12093 = (x12092 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x12093;
            Fp x12094 = x12084 - x4;
            Fp x12095 = (x12094 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x12095;
            Fp x12096 = x12084 - x5;
            Fp x12097 = (x12096 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x12097;
            Fp x12098 = x12084 - x0;
            Fp x12099 = (x12098 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x12099;
            Fp x12100 = x12084 - x6;
            Fp x12101 = (x12100 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x12101;
            Fp x12102 = x12084 - x7;
            Fp x12103 = (x12102 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x12103;
            Fp x12104 = x12084 - x8;
            Fp x12105 = (x12104 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x12105;
            Fp x12106 = x12084 - x9;
            Fp x12107 = (x12106 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x12107;
            Fp x12108 = x12084 - x38;
            Fp x12109 = (x12108 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x12109;
            Fp x12110 = x12084 - x42;
            Fp x12111 = (x12110 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x12111;
            Fp x12112 = x12084 - x44;
            Fp x12113 = (x12112 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x12113;
            Fp x12114 = x12084 - x45;
            Fp x12115 = (x12114 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x12115;
            Fp x12116 = x12084 - x11;
            Fp x12117 = (x12116 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x12117;
            Fp x12118 = x12084 - x46;
            Fp x12119 = (x12118 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x12119;
            Fp x12120 = x12084 - x47;
            Fp x12121 = (x12120 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x12121;
            Fp x12122 = x12084 - x48;
            Fp x12123 = (x12122 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x12123;
            Fp x12124 = x12084 - x49;
            Fp x12125 = (x12124 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x12125;
            Fp x12126 = x12084 - x50;
            Fp x12127 = (x12126 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x12127;
            Fp x12128 = x12084 - x51;
            Fp x12129 = (x12128 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x12129;
            Fp x12130 = x12084 - x52;
            Fp x12131 = (x12130 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x12131;
            Fp x12132 = x12084 - x39;
            Fp x12133 = (x12132 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x12133;
            Fp x12134 = x12084 - x41;
            Fp x12135 = (x12134 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x12135;
            Fp x12136 = x12084 - x53;
            Fp x12137 = (x12136 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x12137;
            Fp x12138 = x12084 - x40;
            Fp x12139 = (x12138 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x12139;
            Fp x12140 = x12084 - x43;
            Fp x12141 = (x12140 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x12141;
            Fp x12142 = x12084 - x54;
            Fp x12143 = (x12142 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x12143;
            Fp x12144 = x12084 - x55;
            Fp x12145 = (x12144 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x12145;
            Fp x12146 = x12084 - x56;
            Fp x12147 = (x12146 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x12147;
          }
          Fp x12148 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x12149 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x12150 = x12149 * x1;
          Fp x12151 = x12148 + x12150;
          Fp x12152 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x12153 = x12152 * x2;
          Fp x12154 = x12151 + x12153;
          Fp x12155 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x12156 = x12155 * x3;
          Fp x12157 = x12154 + x12156;
          Fp x12158 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x12159 = x12158 * x4;
          Fp x12160 = x12157 + x12159;
          Fp x12161 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x12162 = x12161 * x5;
          Fp x12163 = x12160 + x12162;
          Fp x12164 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x12165 = x12164 * x0;
          Fp x12166 = x12163 + x12165;
          Fp x12167 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x12168 = x12167 * x6;
          Fp x12169 = x12166 + x12168;
          Fp x12170 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x12171 = x12170 * x7;
          Fp x12172 = x12169 + x12171;
          Fp x12173 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x12174 = x12173 * x8;
          Fp x12175 = x12172 + x12174;
          Fp x12176 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x12177 = x12176 * x9;
          Fp x12178 = x12175 + x12177;
          Fp x12179 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x12180 = x12179 * x38;
          Fp x12181 = x12178 + x12180;
          Fp x12182 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x12183 = x12182 * x42;
          Fp x12184 = x12181 + x12183;
          Fp x12185 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x12186 = x12185 * x44;
          Fp x12187 = x12184 + x12186;
          Fp x12188 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x12189 = x12188 * x45;
          Fp x12190 = x12187 + x12189;
          Fp x12191 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x12192 = x12191 * x11;
          Fp x12193 = x12190 + x12192;
          Fp x12194 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x12195 = x12194 * x46;
          Fp x12196 = x12193 + x12195;
          Fp x12197 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x12198 = x12197 * x47;
          Fp x12199 = x12196 + x12198;
          Fp x12200 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x12201 = x12200 * x48;
          Fp x12202 = x12199 + x12201;
          Fp x12203 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x12204 = x12203 * x49;
          Fp x12205 = x12202 + x12204;
          Fp x12206 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x12207 = x12206 * x50;
          Fp x12208 = x12205 + x12207;
          Fp x12209 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x12210 = x12209 * x51;
          Fp x12211 = x12208 + x12210;
          Fp x12212 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x12213 = x12212 * x52;
          Fp x12214 = x12211 + x12213;
          Fp x12215 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x12216 = x12215 * x39;
          Fp x12217 = x12214 + x12216;
          Fp x12218 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x12219 = x12218 * x41;
          Fp x12220 = x12217 + x12219;
          Fp x12221 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x12222 = x12221 * x53;
          Fp x12223 = x12220 + x12222;
          Fp x12224 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x12225 = x12224 * x40;
          Fp x12226 = x12223 + x12225;
          Fp x12227 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x12228 = x12227 * x43;
          Fp x12229 = x12226 + x12228;
          Fp x12230 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x12231 = x12230 * x54;
          Fp x12232 = x12229 + x12231;
          Fp x12233 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x12234 = x12233 * x55;
          Fp x12235 = x12232 + x12234;
          Fp x12236 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x12237 = x12236 * x56;
          Fp x12238 = x12235 + x12237;
          Fp x12239 = x12238 - x12084;
          if (x12239 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x5;
        Fp x12240 = x1005 * x3;
        Fp x12241 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x12242 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x12243 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x12244 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x12245 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x12246 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x12240;
        host_args[2] = x1280;
        host_args[3] = x12241;
        host_args[4] = x12242;
        host_args[5] = x1239;
        host_args[6] = x12243;
        host_args[7] = x12244;
        host_args[8] = x12245;
        host_args[9] = x12246;
        host(ctx, "log", "C%u: pc: %08x Decode: DIV r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x12247 = x4406 * x12021;
      if (x12247 != 0) {
        Fp x12248 = x1764 - x38;
        if (x12248 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:119");
        Fp x12249 = x1228 - x4;
        if (x12249 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:119");
        Fp x12250 = x1766 - x71;
        if (x12250 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:119");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x12251 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x12252 = Fp(x12251.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x12252;
            Fp x12253 = x12251 - x12252;
            Fp x12254 = x12253 * x10;
            Fp x12255 = Fp(x12254.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x12255;
            Fp x12256 = x12254 - x12255;
            Fp x12257 = x12256 * x10;
            Fp x12258 = Fp(x12257.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x12258;
            Fp x12259 = x12257 - x12258;
            Fp x12260 = x12259 * x10;
            Fp x12261 = Fp(x12260.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x12261;
            Fp x12262 = x12260 - x12261;
            Fp x12263 = x12262 * x10;
            Fp x12264 = Fp(x12263.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x12264;
            Fp x12265 = x12263 - x12264;
            Fp x12266 = x12265 * x10;
            Fp x12267 = Fp(x12266.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x12267;
            Fp x12268 = x12266 - x12267;
            Fp x12269 = x12268 * x10;
            Fp x12270 = Fp(x12269.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x12270;
            Fp x12271 = x12269 - x12270;
            Fp x12272 = x12271 * x10;
            Fp x12273 = Fp(x12272.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x12273;
          }
          Fp x12274 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x12275 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x12276 = x12275 * x3;
          Fp x12277 = x12274 + x12276;
          Fp x12278 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x12279 = x12278 * x11;
          Fp x12280 = x12277 + x12279;
          Fp x12281 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x12282 = x12281 * x12;
          Fp x12283 = x12280 + x12282;
          Fp x12284 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x12285 = x12284 * x13;
          Fp x12286 = x12283 + x12285;
          Fp x12287 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x12288 = x12287 * x14;
          Fp x12289 = x12286 + x12288;
          Fp x12290 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x12291 = x12290 * x15;
          Fp x12292 = x12289 + x12291;
          Fp x12293 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x12294 = x12293 * x16;
          Fp x12295 = x12292 + x12294;
          Fp x12296 = x12251 - x12295;
          Fp x12297 = x12296 * x33;
          if (x12297 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:119");
          {
            Fp x12298 = Fp(x12278.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x12298;
            Fp x12299 = x12278 - x12298;
            Fp x12300 = x12299 * x26;
            Fp x12301 = Fp(x12300.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x12301;
          }
          Fp x12302 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x12303 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x12304 = x12303 * x1;
          Fp x12305 = x12302 + x12304;
          Fp x12306 = x12278 - x12305;
          Fp x12307 = x12306 * x10;
          if (x12307 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:119");
          Fp x12308 = x12302 * x11;
          Fp x12309 = x12277 + x12308;
          {
            Fp x12310 = (x12309 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x12310;
            Fp x12311 = x12309 - x71;
            Fp x12312 = (x12311 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x12312;
            Fp x12313 = x12309 - x1;
            Fp x12314 = (x12313 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x12314;
            Fp x12315 = x12309 - x2;
            Fp x12316 = (x12315 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x12316;
            Fp x12317 = x12309 - x3;
            Fp x12318 = (x12317 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x12318;
            Fp x12319 = x12309 - x4;
            Fp x12320 = (x12319 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x12320;
            Fp x12321 = x12309 - x5;
            Fp x12322 = (x12321 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x12322;
            Fp x12323 = x12309 - x0;
            Fp x12324 = (x12323 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x12324;
            Fp x12325 = x12309 - x6;
            Fp x12326 = (x12325 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x12326;
            Fp x12327 = x12309 - x7;
            Fp x12328 = (x12327 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x12328;
            Fp x12329 = x12309 - x8;
            Fp x12330 = (x12329 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x12330;
            Fp x12331 = x12309 - x9;
            Fp x12332 = (x12331 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x12332;
            Fp x12333 = x12309 - x38;
            Fp x12334 = (x12333 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x12334;
            Fp x12335 = x12309 - x42;
            Fp x12336 = (x12335 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x12336;
            Fp x12337 = x12309 - x44;
            Fp x12338 = (x12337 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x12338;
            Fp x12339 = x12309 - x45;
            Fp x12340 = (x12339 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x12340;
            Fp x12341 = x12309 - x11;
            Fp x12342 = (x12341 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x12342;
            Fp x12343 = x12309 - x46;
            Fp x12344 = (x12343 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x12344;
            Fp x12345 = x12309 - x47;
            Fp x12346 = (x12345 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x12346;
            Fp x12347 = x12309 - x48;
            Fp x12348 = (x12347 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x12348;
            Fp x12349 = x12309 - x49;
            Fp x12350 = (x12349 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x12350;
            Fp x12351 = x12309 - x50;
            Fp x12352 = (x12351 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x12352;
            Fp x12353 = x12309 - x51;
            Fp x12354 = (x12353 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x12354;
            Fp x12355 = x12309 - x52;
            Fp x12356 = (x12355 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x12356;
            Fp x12357 = x12309 - x39;
            Fp x12358 = (x12357 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x12358;
            Fp x12359 = x12309 - x41;
            Fp x12360 = (x12359 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x12360;
            Fp x12361 = x12309 - x53;
            Fp x12362 = (x12361 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x12362;
            Fp x12363 = x12309 - x40;
            Fp x12364 = (x12363 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x12364;
            Fp x12365 = x12309 - x43;
            Fp x12366 = (x12365 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x12366;
            Fp x12367 = x12309 - x54;
            Fp x12368 = (x12367 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x12368;
            Fp x12369 = x12309 - x55;
            Fp x12370 = (x12369 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x12370;
            Fp x12371 = x12309 - x56;
            Fp x12372 = (x12371 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x12372;
          }
          Fp x12373 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x12374 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x12375 = x12374 * x1;
          Fp x12376 = x12373 + x12375;
          Fp x12377 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x12378 = x12377 * x2;
          Fp x12379 = x12376 + x12378;
          Fp x12380 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x12381 = x12380 * x3;
          Fp x12382 = x12379 + x12381;
          Fp x12383 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x12384 = x12383 * x4;
          Fp x12385 = x12382 + x12384;
          Fp x12386 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x12387 = x12386 * x5;
          Fp x12388 = x12385 + x12387;
          Fp x12389 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x12390 = x12389 * x0;
          Fp x12391 = x12388 + x12390;
          Fp x12392 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x12393 = x12392 * x6;
          Fp x12394 = x12391 + x12393;
          Fp x12395 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x12396 = x12395 * x7;
          Fp x12397 = x12394 + x12396;
          Fp x12398 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x12399 = x12398 * x8;
          Fp x12400 = x12397 + x12399;
          Fp x12401 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x12402 = x12401 * x9;
          Fp x12403 = x12400 + x12402;
          Fp x12404 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x12405 = x12404 * x38;
          Fp x12406 = x12403 + x12405;
          Fp x12407 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x12408 = x12407 * x42;
          Fp x12409 = x12406 + x12408;
          Fp x12410 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x12411 = x12410 * x44;
          Fp x12412 = x12409 + x12411;
          Fp x12413 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x12414 = x12413 * x45;
          Fp x12415 = x12412 + x12414;
          Fp x12416 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x12417 = x12416 * x11;
          Fp x12418 = x12415 + x12417;
          Fp x12419 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x12420 = x12419 * x46;
          Fp x12421 = x12418 + x12420;
          Fp x12422 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x12423 = x12422 * x47;
          Fp x12424 = x12421 + x12423;
          Fp x12425 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x12426 = x12425 * x48;
          Fp x12427 = x12424 + x12426;
          Fp x12428 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x12429 = x12428 * x49;
          Fp x12430 = x12427 + x12429;
          Fp x12431 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x12432 = x12431 * x50;
          Fp x12433 = x12430 + x12432;
          Fp x12434 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x12435 = x12434 * x51;
          Fp x12436 = x12433 + x12435;
          Fp x12437 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x12438 = x12437 * x52;
          Fp x12439 = x12436 + x12438;
          Fp x12440 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x12441 = x12440 * x39;
          Fp x12442 = x12439 + x12441;
          Fp x12443 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x12444 = x12443 * x41;
          Fp x12445 = x12442 + x12444;
          Fp x12446 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x12447 = x12446 * x53;
          Fp x12448 = x12445 + x12447;
          Fp x12449 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x12450 = x12449 * x40;
          Fp x12451 = x12448 + x12450;
          Fp x12452 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x12453 = x12452 * x43;
          Fp x12454 = x12451 + x12453;
          Fp x12455 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x12456 = x12455 * x54;
          Fp x12457 = x12454 + x12456;
          Fp x12458 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x12459 = x12458 * x55;
          Fp x12460 = x12457 + x12459;
          Fp x12461 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x12462 = x12461 * x56;
          Fp x12463 = x12460 + x12462;
          Fp x12464 = x12463 - x12309;
          if (x12464 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x5;
        Fp x12465 = x1005 * x3;
        Fp x12466 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x12467 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x12468 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x12469 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x12470 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x12471 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x12465;
        host_args[2] = x1280;
        host_args[3] = x12466;
        host_args[4] = x12467;
        host_args[5] = x1239;
        host_args[6] = x12468;
        host_args[7] = x12469;
        host_args[8] = x12470;
        host_args[9] = x12471;
        host(ctx, "log", "C%u: pc: %08x Decode: DIVU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x12472 = x4631 * x12021;
      if (x12472 != 0) {
        Fp x12473 = x1764 - x38;
        if (x12473 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:120");
        Fp x12474 = x1228 - x5;
        if (x12474 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:120");
        Fp x12475 = x1766 - x71;
        if (x12475 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:120");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x12476 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x12477 = Fp(x12476.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x12477;
            Fp x12478 = x12476 - x12477;
            Fp x12479 = x12478 * x10;
            Fp x12480 = Fp(x12479.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x12480;
            Fp x12481 = x12479 - x12480;
            Fp x12482 = x12481 * x10;
            Fp x12483 = Fp(x12482.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x12483;
            Fp x12484 = x12482 - x12483;
            Fp x12485 = x12484 * x10;
            Fp x12486 = Fp(x12485.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x12486;
            Fp x12487 = x12485 - x12486;
            Fp x12488 = x12487 * x10;
            Fp x12489 = Fp(x12488.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x12489;
            Fp x12490 = x12488 - x12489;
            Fp x12491 = x12490 * x10;
            Fp x12492 = Fp(x12491.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x12492;
            Fp x12493 = x12491 - x12492;
            Fp x12494 = x12493 * x10;
            Fp x12495 = Fp(x12494.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x12495;
            Fp x12496 = x12494 - x12495;
            Fp x12497 = x12496 * x10;
            Fp x12498 = Fp(x12497.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x12498;
          }
          Fp x12499 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x12500 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x12501 = x12500 * x3;
          Fp x12502 = x12499 + x12501;
          Fp x12503 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x12504 = x12503 * x11;
          Fp x12505 = x12502 + x12504;
          Fp x12506 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x12507 = x12506 * x12;
          Fp x12508 = x12505 + x12507;
          Fp x12509 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x12510 = x12509 * x13;
          Fp x12511 = x12508 + x12510;
          Fp x12512 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x12513 = x12512 * x14;
          Fp x12514 = x12511 + x12513;
          Fp x12515 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x12516 = x12515 * x15;
          Fp x12517 = x12514 + x12516;
          Fp x12518 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x12519 = x12518 * x16;
          Fp x12520 = x12517 + x12519;
          Fp x12521 = x12476 - x12520;
          Fp x12522 = x12521 * x33;
          if (x12522 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:120");
          {
            Fp x12523 = Fp(x12503.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x12523;
            Fp x12524 = x12503 - x12523;
            Fp x12525 = x12524 * x26;
            Fp x12526 = Fp(x12525.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x12526;
          }
          Fp x12527 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x12528 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x12529 = x12528 * x1;
          Fp x12530 = x12527 + x12529;
          Fp x12531 = x12503 - x12530;
          Fp x12532 = x12531 * x10;
          if (x12532 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:120");
          Fp x12533 = x12527 * x11;
          Fp x12534 = x12502 + x12533;
          {
            Fp x12535 = (x12534 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x12535;
            Fp x12536 = x12534 - x71;
            Fp x12537 = (x12536 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x12537;
            Fp x12538 = x12534 - x1;
            Fp x12539 = (x12538 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x12539;
            Fp x12540 = x12534 - x2;
            Fp x12541 = (x12540 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x12541;
            Fp x12542 = x12534 - x3;
            Fp x12543 = (x12542 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x12543;
            Fp x12544 = x12534 - x4;
            Fp x12545 = (x12544 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x12545;
            Fp x12546 = x12534 - x5;
            Fp x12547 = (x12546 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x12547;
            Fp x12548 = x12534 - x0;
            Fp x12549 = (x12548 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x12549;
            Fp x12550 = x12534 - x6;
            Fp x12551 = (x12550 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x12551;
            Fp x12552 = x12534 - x7;
            Fp x12553 = (x12552 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x12553;
            Fp x12554 = x12534 - x8;
            Fp x12555 = (x12554 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x12555;
            Fp x12556 = x12534 - x9;
            Fp x12557 = (x12556 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x12557;
            Fp x12558 = x12534 - x38;
            Fp x12559 = (x12558 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x12559;
            Fp x12560 = x12534 - x42;
            Fp x12561 = (x12560 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x12561;
            Fp x12562 = x12534 - x44;
            Fp x12563 = (x12562 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x12563;
            Fp x12564 = x12534 - x45;
            Fp x12565 = (x12564 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x12565;
            Fp x12566 = x12534 - x11;
            Fp x12567 = (x12566 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x12567;
            Fp x12568 = x12534 - x46;
            Fp x12569 = (x12568 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x12569;
            Fp x12570 = x12534 - x47;
            Fp x12571 = (x12570 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x12571;
            Fp x12572 = x12534 - x48;
            Fp x12573 = (x12572 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x12573;
            Fp x12574 = x12534 - x49;
            Fp x12575 = (x12574 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x12575;
            Fp x12576 = x12534 - x50;
            Fp x12577 = (x12576 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x12577;
            Fp x12578 = x12534 - x51;
            Fp x12579 = (x12578 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x12579;
            Fp x12580 = x12534 - x52;
            Fp x12581 = (x12580 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x12581;
            Fp x12582 = x12534 - x39;
            Fp x12583 = (x12582 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x12583;
            Fp x12584 = x12534 - x41;
            Fp x12585 = (x12584 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x12585;
            Fp x12586 = x12534 - x53;
            Fp x12587 = (x12586 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x12587;
            Fp x12588 = x12534 - x40;
            Fp x12589 = (x12588 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x12589;
            Fp x12590 = x12534 - x43;
            Fp x12591 = (x12590 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x12591;
            Fp x12592 = x12534 - x54;
            Fp x12593 = (x12592 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x12593;
            Fp x12594 = x12534 - x55;
            Fp x12595 = (x12594 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x12595;
            Fp x12596 = x12534 - x56;
            Fp x12597 = (x12596 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x12597;
          }
          Fp x12598 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x12599 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x12600 = x12599 * x1;
          Fp x12601 = x12598 + x12600;
          Fp x12602 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x12603 = x12602 * x2;
          Fp x12604 = x12601 + x12603;
          Fp x12605 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x12606 = x12605 * x3;
          Fp x12607 = x12604 + x12606;
          Fp x12608 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x12609 = x12608 * x4;
          Fp x12610 = x12607 + x12609;
          Fp x12611 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x12612 = x12611 * x5;
          Fp x12613 = x12610 + x12612;
          Fp x12614 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x12615 = x12614 * x0;
          Fp x12616 = x12613 + x12615;
          Fp x12617 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x12618 = x12617 * x6;
          Fp x12619 = x12616 + x12618;
          Fp x12620 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x12621 = x12620 * x7;
          Fp x12622 = x12619 + x12621;
          Fp x12623 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x12624 = x12623 * x8;
          Fp x12625 = x12622 + x12624;
          Fp x12626 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x12627 = x12626 * x9;
          Fp x12628 = x12625 + x12627;
          Fp x12629 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x12630 = x12629 * x38;
          Fp x12631 = x12628 + x12630;
          Fp x12632 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x12633 = x12632 * x42;
          Fp x12634 = x12631 + x12633;
          Fp x12635 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x12636 = x12635 * x44;
          Fp x12637 = x12634 + x12636;
          Fp x12638 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x12639 = x12638 * x45;
          Fp x12640 = x12637 + x12639;
          Fp x12641 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x12642 = x12641 * x11;
          Fp x12643 = x12640 + x12642;
          Fp x12644 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x12645 = x12644 * x46;
          Fp x12646 = x12643 + x12645;
          Fp x12647 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x12648 = x12647 * x47;
          Fp x12649 = x12646 + x12648;
          Fp x12650 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x12651 = x12650 * x48;
          Fp x12652 = x12649 + x12651;
          Fp x12653 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x12654 = x12653 * x49;
          Fp x12655 = x12652 + x12654;
          Fp x12656 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x12657 = x12656 * x50;
          Fp x12658 = x12655 + x12657;
          Fp x12659 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x12660 = x12659 * x51;
          Fp x12661 = x12658 + x12660;
          Fp x12662 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x12663 = x12662 * x52;
          Fp x12664 = x12661 + x12663;
          Fp x12665 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x12666 = x12665 * x39;
          Fp x12667 = x12664 + x12666;
          Fp x12668 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x12669 = x12668 * x41;
          Fp x12670 = x12667 + x12669;
          Fp x12671 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x12672 = x12671 * x53;
          Fp x12673 = x12670 + x12672;
          Fp x12674 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x12675 = x12674 * x40;
          Fp x12676 = x12673 + x12675;
          Fp x12677 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x12678 = x12677 * x43;
          Fp x12679 = x12676 + x12678;
          Fp x12680 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x12681 = x12680 * x54;
          Fp x12682 = x12679 + x12681;
          Fp x12683 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x12684 = x12683 * x55;
          Fp x12685 = x12682 + x12684;
          Fp x12686 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x12687 = x12686 * x56;
          Fp x12688 = x12685 + x12687;
          Fp x12689 = x12688 - x12534;
          if (x12689 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x5;
        Fp x12690 = x1005 * x3;
        Fp x12691 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x12692 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x12693 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x12694 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x12695 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x12696 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x12690;
        host_args[2] = x1280;
        host_args[3] = x12691;
        host_args[4] = x12692;
        host_args[5] = x1239;
        host_args[6] = x12693;
        host_args[7] = x12694;
        host_args[8] = x12695;
        host_args[9] = x12696;
        host(ctx, "log", "C%u: pc: %08x Decode: REM r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x12697 = x4856 * x12021;
      if (x12697 != 0) {
        Fp x12698 = x1764 - x38;
        if (x12698 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:121");
        Fp x12699 = x1228 - x0;
        if (x12699 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:121");
        Fp x12700 = x1766 - x71;
        if (x12700 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:121");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x12701 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x12702 = Fp(x12701.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x12702;
            Fp x12703 = x12701 - x12702;
            Fp x12704 = x12703 * x10;
            Fp x12705 = Fp(x12704.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x12705;
            Fp x12706 = x12704 - x12705;
            Fp x12707 = x12706 * x10;
            Fp x12708 = Fp(x12707.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x12708;
            Fp x12709 = x12707 - x12708;
            Fp x12710 = x12709 * x10;
            Fp x12711 = Fp(x12710.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x12711;
            Fp x12712 = x12710 - x12711;
            Fp x12713 = x12712 * x10;
            Fp x12714 = Fp(x12713.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x12714;
            Fp x12715 = x12713 - x12714;
            Fp x12716 = x12715 * x10;
            Fp x12717 = Fp(x12716.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x12717;
            Fp x12718 = x12716 - x12717;
            Fp x12719 = x12718 * x10;
            Fp x12720 = Fp(x12719.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x12720;
            Fp x12721 = x12719 - x12720;
            Fp x12722 = x12721 * x10;
            Fp x12723 = Fp(x12722.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x12723;
          }
          Fp x12724 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x12725 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x12726 = x12725 * x3;
          Fp x12727 = x12724 + x12726;
          Fp x12728 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x12729 = x12728 * x11;
          Fp x12730 = x12727 + x12729;
          Fp x12731 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x12732 = x12731 * x12;
          Fp x12733 = x12730 + x12732;
          Fp x12734 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x12735 = x12734 * x13;
          Fp x12736 = x12733 + x12735;
          Fp x12737 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x12738 = x12737 * x14;
          Fp x12739 = x12736 + x12738;
          Fp x12740 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x12741 = x12740 * x15;
          Fp x12742 = x12739 + x12741;
          Fp x12743 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x12744 = x12743 * x16;
          Fp x12745 = x12742 + x12744;
          Fp x12746 = x12701 - x12745;
          Fp x12747 = x12746 * x33;
          if (x12747 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:121");
          {
            Fp x12748 = Fp(x12728.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x12748;
            Fp x12749 = x12728 - x12748;
            Fp x12750 = x12749 * x26;
            Fp x12751 = Fp(x12750.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x12751;
          }
          Fp x12752 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x12753 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x12754 = x12753 * x1;
          Fp x12755 = x12752 + x12754;
          Fp x12756 = x12728 - x12755;
          Fp x12757 = x12756 * x10;
          if (x12757 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:121");
          Fp x12758 = x12752 * x11;
          Fp x12759 = x12727 + x12758;
          {
            Fp x12760 = (x12759 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x12760;
            Fp x12761 = x12759 - x71;
            Fp x12762 = (x12761 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x12762;
            Fp x12763 = x12759 - x1;
            Fp x12764 = (x12763 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x12764;
            Fp x12765 = x12759 - x2;
            Fp x12766 = (x12765 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x12766;
            Fp x12767 = x12759 - x3;
            Fp x12768 = (x12767 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x12768;
            Fp x12769 = x12759 - x4;
            Fp x12770 = (x12769 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x12770;
            Fp x12771 = x12759 - x5;
            Fp x12772 = (x12771 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x12772;
            Fp x12773 = x12759 - x0;
            Fp x12774 = (x12773 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x12774;
            Fp x12775 = x12759 - x6;
            Fp x12776 = (x12775 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x12776;
            Fp x12777 = x12759 - x7;
            Fp x12778 = (x12777 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x12778;
            Fp x12779 = x12759 - x8;
            Fp x12780 = (x12779 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x12780;
            Fp x12781 = x12759 - x9;
            Fp x12782 = (x12781 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x12782;
            Fp x12783 = x12759 - x38;
            Fp x12784 = (x12783 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x12784;
            Fp x12785 = x12759 - x42;
            Fp x12786 = (x12785 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x12786;
            Fp x12787 = x12759 - x44;
            Fp x12788 = (x12787 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x12788;
            Fp x12789 = x12759 - x45;
            Fp x12790 = (x12789 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x12790;
            Fp x12791 = x12759 - x11;
            Fp x12792 = (x12791 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x12792;
            Fp x12793 = x12759 - x46;
            Fp x12794 = (x12793 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x12794;
            Fp x12795 = x12759 - x47;
            Fp x12796 = (x12795 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x12796;
            Fp x12797 = x12759 - x48;
            Fp x12798 = (x12797 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x12798;
            Fp x12799 = x12759 - x49;
            Fp x12800 = (x12799 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x12800;
            Fp x12801 = x12759 - x50;
            Fp x12802 = (x12801 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x12802;
            Fp x12803 = x12759 - x51;
            Fp x12804 = (x12803 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x12804;
            Fp x12805 = x12759 - x52;
            Fp x12806 = (x12805 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x12806;
            Fp x12807 = x12759 - x39;
            Fp x12808 = (x12807 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x12808;
            Fp x12809 = x12759 - x41;
            Fp x12810 = (x12809 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x12810;
            Fp x12811 = x12759 - x53;
            Fp x12812 = (x12811 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x12812;
            Fp x12813 = x12759 - x40;
            Fp x12814 = (x12813 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x12814;
            Fp x12815 = x12759 - x43;
            Fp x12816 = (x12815 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x12816;
            Fp x12817 = x12759 - x54;
            Fp x12818 = (x12817 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x12818;
            Fp x12819 = x12759 - x55;
            Fp x12820 = (x12819 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x12820;
            Fp x12821 = x12759 - x56;
            Fp x12822 = (x12821 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x12822;
          }
          Fp x12823 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x12824 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x12825 = x12824 * x1;
          Fp x12826 = x12823 + x12825;
          Fp x12827 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x12828 = x12827 * x2;
          Fp x12829 = x12826 + x12828;
          Fp x12830 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x12831 = x12830 * x3;
          Fp x12832 = x12829 + x12831;
          Fp x12833 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x12834 = x12833 * x4;
          Fp x12835 = x12832 + x12834;
          Fp x12836 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x12837 = x12836 * x5;
          Fp x12838 = x12835 + x12837;
          Fp x12839 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x12840 = x12839 * x0;
          Fp x12841 = x12838 + x12840;
          Fp x12842 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x12843 = x12842 * x6;
          Fp x12844 = x12841 + x12843;
          Fp x12845 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x12846 = x12845 * x7;
          Fp x12847 = x12844 + x12846;
          Fp x12848 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x12849 = x12848 * x8;
          Fp x12850 = x12847 + x12849;
          Fp x12851 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x12852 = x12851 * x9;
          Fp x12853 = x12850 + x12852;
          Fp x12854 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x12855 = x12854 * x38;
          Fp x12856 = x12853 + x12855;
          Fp x12857 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x12858 = x12857 * x42;
          Fp x12859 = x12856 + x12858;
          Fp x12860 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x12861 = x12860 * x44;
          Fp x12862 = x12859 + x12861;
          Fp x12863 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x12864 = x12863 * x45;
          Fp x12865 = x12862 + x12864;
          Fp x12866 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x12867 = x12866 * x11;
          Fp x12868 = x12865 + x12867;
          Fp x12869 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x12870 = x12869 * x46;
          Fp x12871 = x12868 + x12870;
          Fp x12872 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x12873 = x12872 * x47;
          Fp x12874 = x12871 + x12873;
          Fp x12875 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x12876 = x12875 * x48;
          Fp x12877 = x12874 + x12876;
          Fp x12878 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x12879 = x12878 * x49;
          Fp x12880 = x12877 + x12879;
          Fp x12881 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x12882 = x12881 * x50;
          Fp x12883 = x12880 + x12882;
          Fp x12884 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x12885 = x12884 * x51;
          Fp x12886 = x12883 + x12885;
          Fp x12887 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x12888 = x12887 * x52;
          Fp x12889 = x12886 + x12888;
          Fp x12890 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x12891 = x12890 * x39;
          Fp x12892 = x12889 + x12891;
          Fp x12893 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x12894 = x12893 * x41;
          Fp x12895 = x12892 + x12894;
          Fp x12896 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x12897 = x12896 * x53;
          Fp x12898 = x12895 + x12897;
          Fp x12899 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x12900 = x12899 * x40;
          Fp x12901 = x12898 + x12900;
          Fp x12902 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x12903 = x12902 * x43;
          Fp x12904 = x12901 + x12903;
          Fp x12905 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x12906 = x12905 * x54;
          Fp x12907 = x12904 + x12906;
          Fp x12908 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x12909 = x12908 * x55;
          Fp x12910 = x12907 + x12909;
          Fp x12911 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x12912 = x12911 * x56;
          Fp x12913 = x12910 + x12912;
          Fp x12914 = x12913 - x12759;
          if (x12914 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x5;
        Fp x12915 = x1005 * x3;
        Fp x12916 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x12917 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x12918 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x12919 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x12920 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x12921 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x12915;
        host_args[2] = x1280;
        host_args[3] = x12916;
        host_args[4] = x12917;
        host_args[5] = x1239;
        host_args[6] = x12918;
        host_args[7] = x12919;
        host_args[8] = x12920;
        host_args[9] = x12921;
        host(ctx, "log", "C%u: pc: %08x Decode: REMU r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x12922 = x5081 * x12021;
      if (x12922 != 0) {
        Fp x12923 = x1764 - x38;
        if (x12923 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:122");
        Fp x12924 = x1228 - x4;
        if (x12924 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:122");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:122");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x12925 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x12926 = Fp(x12925.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x12926;
            Fp x12927 = x12925 - x12926;
            Fp x12928 = x12927 * x10;
            Fp x12929 = Fp(x12928.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x12929;
            Fp x12930 = x12928 - x12929;
            Fp x12931 = x12930 * x10;
            Fp x12932 = Fp(x12931.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x12932;
            Fp x12933 = x12931 - x12932;
            Fp x12934 = x12933 * x10;
            Fp x12935 = Fp(x12934.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x12935;
            Fp x12936 = x12934 - x12935;
            Fp x12937 = x12936 * x10;
            Fp x12938 = Fp(x12937.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x12938;
            Fp x12939 = x12937 - x12938;
            Fp x12940 = x12939 * x10;
            Fp x12941 = Fp(x12940.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x12941;
            Fp x12942 = x12940 - x12941;
            Fp x12943 = x12942 * x10;
            Fp x12944 = Fp(x12943.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x12944;
            Fp x12945 = x12943 - x12944;
            Fp x12946 = x12945 * x10;
            Fp x12947 = Fp(x12946.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x12947;
          }
          Fp x12948 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x12949 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x12950 = x12949 * x3;
          Fp x12951 = x12948 + x12950;
          Fp x12952 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x12953 = x12952 * x11;
          Fp x12954 = x12951 + x12953;
          Fp x12955 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x12956 = x12955 * x12;
          Fp x12957 = x12954 + x12956;
          Fp x12958 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x12959 = x12958 * x13;
          Fp x12960 = x12957 + x12959;
          Fp x12961 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x12962 = x12961 * x14;
          Fp x12963 = x12960 + x12962;
          Fp x12964 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x12965 = x12964 * x15;
          Fp x12966 = x12963 + x12965;
          Fp x12967 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x12968 = x12967 * x16;
          Fp x12969 = x12966 + x12968;
          Fp x12970 = x12925 - x12969;
          Fp x12971 = x12970 * x33;
          if (x12971 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:122");
          {
            Fp x12972 = Fp(x12952.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x12972;
            Fp x12973 = x12952 - x12972;
            Fp x12974 = x12973 * x26;
            Fp x12975 = Fp(x12974.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x12975;
          }
          Fp x12976 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x12977 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x12978 = x12977 * x1;
          Fp x12979 = x12976 + x12978;
          Fp x12980 = x12952 - x12979;
          Fp x12981 = x12980 * x10;
          if (x12981 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:122");
          Fp x12982 = x12976 * x11;
          Fp x12983 = x12951 + x12982;
          {
            Fp x12984 = (x12983 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x12984;
            Fp x12985 = x12983 - x71;
            Fp x12986 = (x12985 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x12986;
            Fp x12987 = x12983 - x1;
            Fp x12988 = (x12987 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x12988;
            Fp x12989 = x12983 - x2;
            Fp x12990 = (x12989 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x12990;
            Fp x12991 = x12983 - x3;
            Fp x12992 = (x12991 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x12992;
            Fp x12993 = x12983 - x4;
            Fp x12994 = (x12993 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x12994;
            Fp x12995 = x12983 - x5;
            Fp x12996 = (x12995 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x12996;
            Fp x12997 = x12983 - x0;
            Fp x12998 = (x12997 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x12998;
            Fp x12999 = x12983 - x6;
            Fp x13000 = (x12999 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x13000;
            Fp x13001 = x12983 - x7;
            Fp x13002 = (x13001 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x13002;
            Fp x13003 = x12983 - x8;
            Fp x13004 = (x13003 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x13004;
            Fp x13005 = x12983 - x9;
            Fp x13006 = (x13005 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x13006;
            Fp x13007 = x12983 - x38;
            Fp x13008 = (x13007 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x13008;
            Fp x13009 = x12983 - x42;
            Fp x13010 = (x13009 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x13010;
            Fp x13011 = x12983 - x44;
            Fp x13012 = (x13011 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x13012;
            Fp x13013 = x12983 - x45;
            Fp x13014 = (x13013 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x13014;
            Fp x13015 = x12983 - x11;
            Fp x13016 = (x13015 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x13016;
            Fp x13017 = x12983 - x46;
            Fp x13018 = (x13017 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x13018;
            Fp x13019 = x12983 - x47;
            Fp x13020 = (x13019 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x13020;
            Fp x13021 = x12983 - x48;
            Fp x13022 = (x13021 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x13022;
            Fp x13023 = x12983 - x49;
            Fp x13024 = (x13023 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x13024;
            Fp x13025 = x12983 - x50;
            Fp x13026 = (x13025 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x13026;
            Fp x13027 = x12983 - x51;
            Fp x13028 = (x13027 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x13028;
            Fp x13029 = x12983 - x52;
            Fp x13030 = (x13029 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x13030;
            Fp x13031 = x12983 - x39;
            Fp x13032 = (x13031 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x13032;
            Fp x13033 = x12983 - x41;
            Fp x13034 = (x13033 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x13034;
            Fp x13035 = x12983 - x53;
            Fp x13036 = (x13035 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x13036;
            Fp x13037 = x12983 - x40;
            Fp x13038 = (x13037 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x13038;
            Fp x13039 = x12983 - x43;
            Fp x13040 = (x13039 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x13040;
            Fp x13041 = x12983 - x54;
            Fp x13042 = (x13041 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x13042;
            Fp x13043 = x12983 - x55;
            Fp x13044 = (x13043 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x13044;
            Fp x13045 = x12983 - x56;
            Fp x13046 = (x13045 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x13046;
          }
          Fp x13047 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x13048 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x13049 = x13048 * x1;
          Fp x13050 = x13047 + x13049;
          Fp x13051 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x13052 = x13051 * x2;
          Fp x13053 = x13050 + x13052;
          Fp x13054 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x13055 = x13054 * x3;
          Fp x13056 = x13053 + x13055;
          Fp x13057 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x13058 = x13057 * x4;
          Fp x13059 = x13056 + x13058;
          Fp x13060 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x13061 = x13060 * x5;
          Fp x13062 = x13059 + x13061;
          Fp x13063 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x13064 = x13063 * x0;
          Fp x13065 = x13062 + x13064;
          Fp x13066 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x13067 = x13066 * x6;
          Fp x13068 = x13065 + x13067;
          Fp x13069 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x13070 = x13069 * x7;
          Fp x13071 = x13068 + x13070;
          Fp x13072 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x13073 = x13072 * x8;
          Fp x13074 = x13071 + x13073;
          Fp x13075 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x13076 = x13075 * x9;
          Fp x13077 = x13074 + x13076;
          Fp x13078 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x13079 = x13078 * x38;
          Fp x13080 = x13077 + x13079;
          Fp x13081 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x13082 = x13081 * x42;
          Fp x13083 = x13080 + x13082;
          Fp x13084 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x13085 = x13084 * x44;
          Fp x13086 = x13083 + x13085;
          Fp x13087 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x13088 = x13087 * x45;
          Fp x13089 = x13086 + x13088;
          Fp x13090 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x13091 = x13090 * x11;
          Fp x13092 = x13089 + x13091;
          Fp x13093 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x13094 = x13093 * x46;
          Fp x13095 = x13092 + x13094;
          Fp x13096 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x13097 = x13096 * x47;
          Fp x13098 = x13095 + x13097;
          Fp x13099 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x13100 = x13099 * x48;
          Fp x13101 = x13098 + x13100;
          Fp x13102 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x13103 = x13102 * x49;
          Fp x13104 = x13101 + x13103;
          Fp x13105 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x13106 = x13105 * x50;
          Fp x13107 = x13104 + x13106;
          Fp x13108 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x13109 = x13108 * x51;
          Fp x13110 = x13107 + x13109;
          Fp x13111 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x13112 = x13111 * x52;
          Fp x13113 = x13110 + x13112;
          Fp x13114 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x13115 = x13114 * x39;
          Fp x13116 = x13113 + x13115;
          Fp x13117 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x13118 = x13117 * x41;
          Fp x13119 = x13116 + x13118;
          Fp x13120 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x13121 = x13120 * x53;
          Fp x13122 = x13119 + x13121;
          Fp x13123 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x13124 = x13123 * x40;
          Fp x13125 = x13122 + x13124;
          Fp x13126 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x13127 = x13126 * x43;
          Fp x13128 = x13125 + x13127;
          Fp x13129 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x13130 = x13129 * x54;
          Fp x13131 = x13128 + x13130;
          Fp x13132 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x13133 = x13132 * x55;
          Fp x13134 = x13131 + x13133;
          Fp x13135 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x13136 = x13135 * x56;
          Fp x13137 = x13134 + x13136;
          Fp x13138 = x13137 - x12983;
          if (x13138 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x5;
        Fp x13139 = x1005 * x3;
        Fp x13140 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x13141 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x13142 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x13143 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x13144 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x13145 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x13139;
        host_args[2] = x1280;
        host_args[3] = x13140;
        host_args[4] = x13141;
        host_args[5] = x1239;
        host_args[6] = x13142;
        host_args[7] = x13143;
        host_args[8] = x13144;
        host_args[9] = x13145;
        host(ctx, "log", "C%u: pc: %08x Decode: SRL r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x13146 = x5306 * x12021;
      if (x13146 != 0) {
        Fp x13147 = x1764 - x38;
        if (x13147 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:123");
        Fp x13148 = x1228 - x4;
        if (x13148 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:123");
        Fp x13149 = x1766 - x27;
        if (x13149 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:123");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x13150 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x13151 = Fp(x13150.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x13151;
            Fp x13152 = x13150 - x13151;
            Fp x13153 = x13152 * x10;
            Fp x13154 = Fp(x13153.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x13154;
            Fp x13155 = x13153 - x13154;
            Fp x13156 = x13155 * x10;
            Fp x13157 = Fp(x13156.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x13157;
            Fp x13158 = x13156 - x13157;
            Fp x13159 = x13158 * x10;
            Fp x13160 = Fp(x13159.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x13160;
            Fp x13161 = x13159 - x13160;
            Fp x13162 = x13161 * x10;
            Fp x13163 = Fp(x13162.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x13163;
            Fp x13164 = x13162 - x13163;
            Fp x13165 = x13164 * x10;
            Fp x13166 = Fp(x13165.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x13166;
            Fp x13167 = x13165 - x13166;
            Fp x13168 = x13167 * x10;
            Fp x13169 = Fp(x13168.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x13169;
            Fp x13170 = x13168 - x13169;
            Fp x13171 = x13170 * x10;
            Fp x13172 = Fp(x13171.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x13172;
          }
          Fp x13173 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x13174 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x13175 = x13174 * x3;
          Fp x13176 = x13173 + x13175;
          Fp x13177 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x13178 = x13177 * x11;
          Fp x13179 = x13176 + x13178;
          Fp x13180 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x13181 = x13180 * x12;
          Fp x13182 = x13179 + x13181;
          Fp x13183 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x13184 = x13183 * x13;
          Fp x13185 = x13182 + x13184;
          Fp x13186 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x13187 = x13186 * x14;
          Fp x13188 = x13185 + x13187;
          Fp x13189 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x13190 = x13189 * x15;
          Fp x13191 = x13188 + x13190;
          Fp x13192 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x13193 = x13192 * x16;
          Fp x13194 = x13191 + x13193;
          Fp x13195 = x13150 - x13194;
          Fp x13196 = x13195 * x33;
          if (x13196 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:123");
          {
            Fp x13197 = Fp(x13177.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x13197;
            Fp x13198 = x13177 - x13197;
            Fp x13199 = x13198 * x26;
            Fp x13200 = Fp(x13199.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x13200;
          }
          Fp x13201 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x13202 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x13203 = x13202 * x1;
          Fp x13204 = x13201 + x13203;
          Fp x13205 = x13177 - x13204;
          Fp x13206 = x13205 * x10;
          if (x13206 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:123");
          Fp x13207 = x13201 * x11;
          Fp x13208 = x13176 + x13207;
          {
            Fp x13209 = (x13208 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x13209;
            Fp x13210 = x13208 - x71;
            Fp x13211 = (x13210 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x13211;
            Fp x13212 = x13208 - x1;
            Fp x13213 = (x13212 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x13213;
            Fp x13214 = x13208 - x2;
            Fp x13215 = (x13214 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x13215;
            Fp x13216 = x13208 - x3;
            Fp x13217 = (x13216 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x13217;
            Fp x13218 = x13208 - x4;
            Fp x13219 = (x13218 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x13219;
            Fp x13220 = x13208 - x5;
            Fp x13221 = (x13220 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x13221;
            Fp x13222 = x13208 - x0;
            Fp x13223 = (x13222 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x13223;
            Fp x13224 = x13208 - x6;
            Fp x13225 = (x13224 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x13225;
            Fp x13226 = x13208 - x7;
            Fp x13227 = (x13226 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x13227;
            Fp x13228 = x13208 - x8;
            Fp x13229 = (x13228 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x13229;
            Fp x13230 = x13208 - x9;
            Fp x13231 = (x13230 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x13231;
            Fp x13232 = x13208 - x38;
            Fp x13233 = (x13232 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x13233;
            Fp x13234 = x13208 - x42;
            Fp x13235 = (x13234 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x13235;
            Fp x13236 = x13208 - x44;
            Fp x13237 = (x13236 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x13237;
            Fp x13238 = x13208 - x45;
            Fp x13239 = (x13238 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x13239;
            Fp x13240 = x13208 - x11;
            Fp x13241 = (x13240 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x13241;
            Fp x13242 = x13208 - x46;
            Fp x13243 = (x13242 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x13243;
            Fp x13244 = x13208 - x47;
            Fp x13245 = (x13244 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x13245;
            Fp x13246 = x13208 - x48;
            Fp x13247 = (x13246 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x13247;
            Fp x13248 = x13208 - x49;
            Fp x13249 = (x13248 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x13249;
            Fp x13250 = x13208 - x50;
            Fp x13251 = (x13250 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x13251;
            Fp x13252 = x13208 - x51;
            Fp x13253 = (x13252 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x13253;
            Fp x13254 = x13208 - x52;
            Fp x13255 = (x13254 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x13255;
            Fp x13256 = x13208 - x39;
            Fp x13257 = (x13256 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x13257;
            Fp x13258 = x13208 - x41;
            Fp x13259 = (x13258 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x13259;
            Fp x13260 = x13208 - x53;
            Fp x13261 = (x13260 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x13261;
            Fp x13262 = x13208 - x40;
            Fp x13263 = (x13262 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x13263;
            Fp x13264 = x13208 - x43;
            Fp x13265 = (x13264 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x13265;
            Fp x13266 = x13208 - x54;
            Fp x13267 = (x13266 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x13267;
            Fp x13268 = x13208 - x55;
            Fp x13269 = (x13268 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x13269;
            Fp x13270 = x13208 - x56;
            Fp x13271 = (x13270 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x13271;
          }
          Fp x13272 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x13273 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x13274 = x13273 * x1;
          Fp x13275 = x13272 + x13274;
          Fp x13276 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x13277 = x13276 * x2;
          Fp x13278 = x13275 + x13277;
          Fp x13279 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x13280 = x13279 * x3;
          Fp x13281 = x13278 + x13280;
          Fp x13282 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x13283 = x13282 * x4;
          Fp x13284 = x13281 + x13283;
          Fp x13285 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x13286 = x13285 * x5;
          Fp x13287 = x13284 + x13286;
          Fp x13288 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x13289 = x13288 * x0;
          Fp x13290 = x13287 + x13289;
          Fp x13291 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x13292 = x13291 * x6;
          Fp x13293 = x13290 + x13292;
          Fp x13294 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x13295 = x13294 * x7;
          Fp x13296 = x13293 + x13295;
          Fp x13297 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x13298 = x13297 * x8;
          Fp x13299 = x13296 + x13298;
          Fp x13300 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x13301 = x13300 * x9;
          Fp x13302 = x13299 + x13301;
          Fp x13303 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x13304 = x13303 * x38;
          Fp x13305 = x13302 + x13304;
          Fp x13306 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x13307 = x13306 * x42;
          Fp x13308 = x13305 + x13307;
          Fp x13309 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x13310 = x13309 * x44;
          Fp x13311 = x13308 + x13310;
          Fp x13312 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x13313 = x13312 * x45;
          Fp x13314 = x13311 + x13313;
          Fp x13315 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x13316 = x13315 * x11;
          Fp x13317 = x13314 + x13316;
          Fp x13318 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x13319 = x13318 * x46;
          Fp x13320 = x13317 + x13319;
          Fp x13321 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x13322 = x13321 * x47;
          Fp x13323 = x13320 + x13322;
          Fp x13324 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x13325 = x13324 * x48;
          Fp x13326 = x13323 + x13325;
          Fp x13327 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x13328 = x13327 * x49;
          Fp x13329 = x13326 + x13328;
          Fp x13330 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x13331 = x13330 * x50;
          Fp x13332 = x13329 + x13331;
          Fp x13333 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x13334 = x13333 * x51;
          Fp x13335 = x13332 + x13334;
          Fp x13336 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x13337 = x13336 * x52;
          Fp x13338 = x13335 + x13337;
          Fp x13339 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x13340 = x13339 * x39;
          Fp x13341 = x13338 + x13340;
          Fp x13342 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x13343 = x13342 * x41;
          Fp x13344 = x13341 + x13343;
          Fp x13345 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x13346 = x13345 * x53;
          Fp x13347 = x13344 + x13346;
          Fp x13348 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x13349 = x13348 * x40;
          Fp x13350 = x13347 + x13349;
          Fp x13351 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x13352 = x13351 * x43;
          Fp x13353 = x13350 + x13352;
          Fp x13354 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x13355 = x13354 * x54;
          Fp x13356 = x13353 + x13355;
          Fp x13357 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x13358 = x13357 * x55;
          Fp x13359 = x13356 + x13358;
          Fp x13360 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x13361 = x13360 * x56;
          Fp x13362 = x13359 + x13361;
          Fp x13363 = x13362 - x13208;
          if (x13363 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x5;
        Fp x13364 = x1005 * x3;
        Fp x13365 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x13366 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x13367 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x13368 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x13369 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x13370 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x13364;
        host_args[2] = x1280;
        host_args[3] = x13365;
        host_args[4] = x13366;
        host_args[5] = x1239;
        host_args[6] = x13367;
        host_args[7] = x13368;
        host_args[8] = x13369;
        host_args[9] = x13370;
        host(ctx, "log", "C%u: pc: %08x Decode: SRA r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x13371 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x13372 = x3731 * x13371;
      if (x13372 != 0) {
        Fp x13373 = x1764 - x3;
        if (x13373 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:124");
        Fp x13374 = x1228 - x4;
        if (x13374 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:124");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:124");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x13375 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x13376 = Fp(x13375.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x13376;
            Fp x13377 = x13375 - x13376;
            Fp x13378 = x13377 * x10;
            Fp x13379 = Fp(x13378.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x13379;
            Fp x13380 = x13378 - x13379;
            Fp x13381 = x13380 * x10;
            Fp x13382 = Fp(x13381.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x13382;
            Fp x13383 = x13381 - x13382;
            Fp x13384 = x13383 * x10;
            Fp x13385 = Fp(x13384.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x13385;
            Fp x13386 = x13384 - x13385;
            Fp x13387 = x13386 * x10;
            Fp x13388 = Fp(x13387.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x13388;
            Fp x13389 = x13387 - x13388;
            Fp x13390 = x13389 * x10;
            Fp x13391 = Fp(x13390.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x13391;
            Fp x13392 = x13390 - x13391;
            Fp x13393 = x13392 * x10;
            Fp x13394 = Fp(x13393.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x13394;
            Fp x13395 = x13393 - x13394;
            Fp x13396 = x13395 * x10;
            Fp x13397 = Fp(x13396.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x13397;
          }
          Fp x13398 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x13399 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x13400 = x13399 * x3;
          Fp x13401 = x13398 + x13400;
          Fp x13402 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x13403 = x13402 * x11;
          Fp x13404 = x13401 + x13403;
          Fp x13405 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x13406 = x13405 * x12;
          Fp x13407 = x13404 + x13406;
          Fp x13408 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x13409 = x13408 * x13;
          Fp x13410 = x13407 + x13409;
          Fp x13411 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x13412 = x13411 * x14;
          Fp x13413 = x13410 + x13412;
          Fp x13414 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x13415 = x13414 * x15;
          Fp x13416 = x13413 + x13415;
          Fp x13417 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x13418 = x13417 * x16;
          Fp x13419 = x13416 + x13418;
          Fp x13420 = x13375 - x13419;
          Fp x13421 = x13420 * x33;
          if (x13421 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:124");
          {
            Fp x13422 = Fp(x13402.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x13422;
            Fp x13423 = x13402 - x13422;
            Fp x13424 = x13423 * x26;
            Fp x13425 = Fp(x13424.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x13425;
          }
          Fp x13426 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x13427 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x13428 = x13427 * x1;
          Fp x13429 = x13426 + x13428;
          Fp x13430 = x13402 - x13429;
          Fp x13431 = x13430 * x10;
          if (x13431 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:124");
          Fp x13432 = x13426 * x11;
          Fp x13433 = x13401 + x13432;
          {
            Fp x13434 = (x13433 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x13434;
            Fp x13435 = x13433 - x71;
            Fp x13436 = (x13435 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x13436;
            Fp x13437 = x13433 - x1;
            Fp x13438 = (x13437 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x13438;
            Fp x13439 = x13433 - x2;
            Fp x13440 = (x13439 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x13440;
            Fp x13441 = x13433 - x3;
            Fp x13442 = (x13441 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x13442;
            Fp x13443 = x13433 - x4;
            Fp x13444 = (x13443 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x13444;
            Fp x13445 = x13433 - x5;
            Fp x13446 = (x13445 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x13446;
            Fp x13447 = x13433 - x0;
            Fp x13448 = (x13447 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x13448;
            Fp x13449 = x13433 - x6;
            Fp x13450 = (x13449 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x13450;
            Fp x13451 = x13433 - x7;
            Fp x13452 = (x13451 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x13452;
            Fp x13453 = x13433 - x8;
            Fp x13454 = (x13453 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x13454;
            Fp x13455 = x13433 - x9;
            Fp x13456 = (x13455 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x13456;
            Fp x13457 = x13433 - x38;
            Fp x13458 = (x13457 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x13458;
            Fp x13459 = x13433 - x42;
            Fp x13460 = (x13459 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x13460;
            Fp x13461 = x13433 - x44;
            Fp x13462 = (x13461 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x13462;
            Fp x13463 = x13433 - x45;
            Fp x13464 = (x13463 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x13464;
            Fp x13465 = x13433 - x11;
            Fp x13466 = (x13465 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x13466;
            Fp x13467 = x13433 - x46;
            Fp x13468 = (x13467 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x13468;
            Fp x13469 = x13433 - x47;
            Fp x13470 = (x13469 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x13470;
            Fp x13471 = x13433 - x48;
            Fp x13472 = (x13471 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x13472;
            Fp x13473 = x13433 - x49;
            Fp x13474 = (x13473 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x13474;
            Fp x13475 = x13433 - x50;
            Fp x13476 = (x13475 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x13476;
            Fp x13477 = x13433 - x51;
            Fp x13478 = (x13477 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x13478;
            Fp x13479 = x13433 - x52;
            Fp x13480 = (x13479 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x13480;
            Fp x13481 = x13433 - x39;
            Fp x13482 = (x13481 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x13482;
            Fp x13483 = x13433 - x41;
            Fp x13484 = (x13483 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x13484;
            Fp x13485 = x13433 - x53;
            Fp x13486 = (x13485 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x13486;
            Fp x13487 = x13433 - x40;
            Fp x13488 = (x13487 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x13488;
            Fp x13489 = x13433 - x43;
            Fp x13490 = (x13489 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x13490;
            Fp x13491 = x13433 - x54;
            Fp x13492 = (x13491 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x13492;
            Fp x13493 = x13433 - x55;
            Fp x13494 = (x13493 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x13494;
            Fp x13495 = x13433 - x56;
            Fp x13496 = (x13495 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x13496;
          }
          Fp x13497 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x13498 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x13499 = x13498 * x1;
          Fp x13500 = x13497 + x13499;
          Fp x13501 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x13502 = x13501 * x2;
          Fp x13503 = x13500 + x13502;
          Fp x13504 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x13505 = x13504 * x3;
          Fp x13506 = x13503 + x13505;
          Fp x13507 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x13508 = x13507 * x4;
          Fp x13509 = x13506 + x13508;
          Fp x13510 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x13511 = x13510 * x5;
          Fp x13512 = x13509 + x13511;
          Fp x13513 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x13514 = x13513 * x0;
          Fp x13515 = x13512 + x13514;
          Fp x13516 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x13517 = x13516 * x6;
          Fp x13518 = x13515 + x13517;
          Fp x13519 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x13520 = x13519 * x7;
          Fp x13521 = x13518 + x13520;
          Fp x13522 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x13523 = x13522 * x8;
          Fp x13524 = x13521 + x13523;
          Fp x13525 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x13526 = x13525 * x9;
          Fp x13527 = x13524 + x13526;
          Fp x13528 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x13529 = x13528 * x38;
          Fp x13530 = x13527 + x13529;
          Fp x13531 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x13532 = x13531 * x42;
          Fp x13533 = x13530 + x13532;
          Fp x13534 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x13535 = x13534 * x44;
          Fp x13536 = x13533 + x13535;
          Fp x13537 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x13538 = x13537 * x45;
          Fp x13539 = x13536 + x13538;
          Fp x13540 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x13541 = x13540 * x11;
          Fp x13542 = x13539 + x13541;
          Fp x13543 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x13544 = x13543 * x46;
          Fp x13545 = x13542 + x13544;
          Fp x13546 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x13547 = x13546 * x47;
          Fp x13548 = x13545 + x13547;
          Fp x13549 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x13550 = x13549 * x48;
          Fp x13551 = x13548 + x13550;
          Fp x13552 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x13553 = x13552 * x49;
          Fp x13554 = x13551 + x13553;
          Fp x13555 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x13556 = x13555 * x50;
          Fp x13557 = x13554 + x13556;
          Fp x13558 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x13559 = x13558 * x51;
          Fp x13560 = x13557 + x13559;
          Fp x13561 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x13562 = x13561 * x52;
          Fp x13563 = x13560 + x13562;
          Fp x13564 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x13565 = x13564 * x39;
          Fp x13566 = x13563 + x13565;
          Fp x13567 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x13568 = x13567 * x41;
          Fp x13569 = x13566 + x13568;
          Fp x13570 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x13571 = x13570 * x53;
          Fp x13572 = x13569 + x13571;
          Fp x13573 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x13574 = x13573 * x40;
          Fp x13575 = x13572 + x13574;
          Fp x13576 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x13577 = x13576 * x43;
          Fp x13578 = x13575 + x13577;
          Fp x13579 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x13580 = x13579 * x54;
          Fp x13581 = x13578 + x13580;
          Fp x13582 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x13583 = x13582 * x55;
          Fp x13584 = x13581 + x13583;
          Fp x13585 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x13586 = x13585 * x56;
          Fp x13587 = x13584 + x13586;
          Fp x13588 = x13587 - x13433;
          if (x13588 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x5;
        Fp x13589 = x1005 * x3;
        Fp x13590 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x13591 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x13592 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x13593 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x13594 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x13595 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x13589;
        host_args[2] = x1280;
        host_args[3] = x13590;
        host_args[4] = x13591;
        host_args[5] = x1239;
        host_args[6] = x13592;
        host_args[7] = x13593;
        host_args[8] = x13594;
        host_args[9] = x13595;
        host(ctx, "log", "C%u: pc: %08x Decode: SRLI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x13596 = x3956 * x13371;
      if (x13596 != 0) {
        Fp x13597 = x1764 - x3;
        if (x13597 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:125");
        Fp x13598 = x1228 - x4;
        if (x13598 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:125");
        Fp x13599 = x1766 - x27;
        if (x13599 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:125");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x1256;
          args[2][115 * steps + cycle] = x1257;
          Fp x13600 = args[2][114 * steps + ((cycle - 0) & mask)];
          {
            Fp x13601 = Fp(x13600.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x13601;
            Fp x13602 = x13600 - x13601;
            Fp x13603 = x13602 * x10;
            Fp x13604 = Fp(x13603.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x13604;
            Fp x13605 = x13603 - x13604;
            Fp x13606 = x13605 * x10;
            Fp x13607 = Fp(x13606.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x13607;
            Fp x13608 = x13606 - x13607;
            Fp x13609 = x13608 * x10;
            Fp x13610 = Fp(x13609.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x13610;
            Fp x13611 = x13609 - x13610;
            Fp x13612 = x13611 * x10;
            Fp x13613 = Fp(x13612.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x13613;
            Fp x13614 = x13612 - x13613;
            Fp x13615 = x13614 * x10;
            Fp x13616 = Fp(x13615.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x13616;
            Fp x13617 = x13615 - x13616;
            Fp x13618 = x13617 * x10;
            Fp x13619 = Fp(x13618.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x13619;
            Fp x13620 = x13618 - x13619;
            Fp x13621 = x13620 * x10;
            Fp x13622 = Fp(x13621.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x13622;
          }
          Fp x13623 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x13624 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x13625 = x13624 * x3;
          Fp x13626 = x13623 + x13625;
          Fp x13627 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x13628 = x13627 * x11;
          Fp x13629 = x13626 + x13628;
          Fp x13630 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x13631 = x13630 * x12;
          Fp x13632 = x13629 + x13631;
          Fp x13633 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x13634 = x13633 * x13;
          Fp x13635 = x13632 + x13634;
          Fp x13636 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x13637 = x13636 * x14;
          Fp x13638 = x13635 + x13637;
          Fp x13639 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x13640 = x13639 * x15;
          Fp x13641 = x13638 + x13640;
          Fp x13642 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x13643 = x13642 * x16;
          Fp x13644 = x13641 + x13643;
          Fp x13645 = x13600 - x13644;
          Fp x13646 = x13645 * x33;
          if (x13646 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:125");
          {
            Fp x13647 = Fp(x13627.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x13647;
            Fp x13648 = x13627 - x13647;
            Fp x13649 = x13648 * x26;
            Fp x13650 = Fp(x13649.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x13650;
          }
          Fp x13651 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x13652 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x13653 = x13652 * x1;
          Fp x13654 = x13651 + x13653;
          Fp x13655 = x13627 - x13654;
          Fp x13656 = x13655 * x10;
          if (x13656 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:125");
          Fp x13657 = x13651 * x11;
          Fp x13658 = x13626 + x13657;
          {
            Fp x13659 = (x13658 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x13659;
            Fp x13660 = x13658 - x71;
            Fp x13661 = (x13660 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x13661;
            Fp x13662 = x13658 - x1;
            Fp x13663 = (x13662 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x13663;
            Fp x13664 = x13658 - x2;
            Fp x13665 = (x13664 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x13665;
            Fp x13666 = x13658 - x3;
            Fp x13667 = (x13666 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x13667;
            Fp x13668 = x13658 - x4;
            Fp x13669 = (x13668 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x13669;
            Fp x13670 = x13658 - x5;
            Fp x13671 = (x13670 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x13671;
            Fp x13672 = x13658 - x0;
            Fp x13673 = (x13672 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x13673;
            Fp x13674 = x13658 - x6;
            Fp x13675 = (x13674 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x13675;
            Fp x13676 = x13658 - x7;
            Fp x13677 = (x13676 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x13677;
            Fp x13678 = x13658 - x8;
            Fp x13679 = (x13678 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x13679;
            Fp x13680 = x13658 - x9;
            Fp x13681 = (x13680 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x13681;
            Fp x13682 = x13658 - x38;
            Fp x13683 = (x13682 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x13683;
            Fp x13684 = x13658 - x42;
            Fp x13685 = (x13684 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x13685;
            Fp x13686 = x13658 - x44;
            Fp x13687 = (x13686 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x13687;
            Fp x13688 = x13658 - x45;
            Fp x13689 = (x13688 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x13689;
            Fp x13690 = x13658 - x11;
            Fp x13691 = (x13690 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x13691;
            Fp x13692 = x13658 - x46;
            Fp x13693 = (x13692 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x13693;
            Fp x13694 = x13658 - x47;
            Fp x13695 = (x13694 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x13695;
            Fp x13696 = x13658 - x48;
            Fp x13697 = (x13696 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x13697;
            Fp x13698 = x13658 - x49;
            Fp x13699 = (x13698 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x13699;
            Fp x13700 = x13658 - x50;
            Fp x13701 = (x13700 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x13701;
            Fp x13702 = x13658 - x51;
            Fp x13703 = (x13702 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x13703;
            Fp x13704 = x13658 - x52;
            Fp x13705 = (x13704 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x13705;
            Fp x13706 = x13658 - x39;
            Fp x13707 = (x13706 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x13707;
            Fp x13708 = x13658 - x41;
            Fp x13709 = (x13708 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x13709;
            Fp x13710 = x13658 - x53;
            Fp x13711 = (x13710 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x13711;
            Fp x13712 = x13658 - x40;
            Fp x13713 = (x13712 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x13713;
            Fp x13714 = x13658 - x43;
            Fp x13715 = (x13714 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x13715;
            Fp x13716 = x13658 - x54;
            Fp x13717 = (x13716 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x13717;
            Fp x13718 = x13658 - x55;
            Fp x13719 = (x13718 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x13719;
            Fp x13720 = x13658 - x56;
            Fp x13721 = (x13720 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x13721;
          }
          Fp x13722 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x13723 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x13724 = x13723 * x1;
          Fp x13725 = x13722 + x13724;
          Fp x13726 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x13727 = x13726 * x2;
          Fp x13728 = x13725 + x13727;
          Fp x13729 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x13730 = x13729 * x3;
          Fp x13731 = x13728 + x13730;
          Fp x13732 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x13733 = x13732 * x4;
          Fp x13734 = x13731 + x13733;
          Fp x13735 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x13736 = x13735 * x5;
          Fp x13737 = x13734 + x13736;
          Fp x13738 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x13739 = x13738 * x0;
          Fp x13740 = x13737 + x13739;
          Fp x13741 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x13742 = x13741 * x6;
          Fp x13743 = x13740 + x13742;
          Fp x13744 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x13745 = x13744 * x7;
          Fp x13746 = x13743 + x13745;
          Fp x13747 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x13748 = x13747 * x8;
          Fp x13749 = x13746 + x13748;
          Fp x13750 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x13751 = x13750 * x9;
          Fp x13752 = x13749 + x13751;
          Fp x13753 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x13754 = x13753 * x38;
          Fp x13755 = x13752 + x13754;
          Fp x13756 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x13757 = x13756 * x42;
          Fp x13758 = x13755 + x13757;
          Fp x13759 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x13760 = x13759 * x44;
          Fp x13761 = x13758 + x13760;
          Fp x13762 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x13763 = x13762 * x45;
          Fp x13764 = x13761 + x13763;
          Fp x13765 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x13766 = x13765 * x11;
          Fp x13767 = x13764 + x13766;
          Fp x13768 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x13769 = x13768 * x46;
          Fp x13770 = x13767 + x13769;
          Fp x13771 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x13772 = x13771 * x47;
          Fp x13773 = x13770 + x13772;
          Fp x13774 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x13775 = x13774 * x48;
          Fp x13776 = x13773 + x13775;
          Fp x13777 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x13778 = x13777 * x49;
          Fp x13779 = x13776 + x13778;
          Fp x13780 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x13781 = x13780 * x50;
          Fp x13782 = x13779 + x13781;
          Fp x13783 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x13784 = x13783 * x51;
          Fp x13785 = x13782 + x13784;
          Fp x13786 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x13787 = x13786 * x52;
          Fp x13788 = x13785 + x13787;
          Fp x13789 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x13790 = x13789 * x39;
          Fp x13791 = x13788 + x13790;
          Fp x13792 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x13793 = x13792 * x41;
          Fp x13794 = x13791 + x13793;
          Fp x13795 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x13796 = x13795 * x53;
          Fp x13797 = x13794 + x13796;
          Fp x13798 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x13799 = x13798 * x40;
          Fp x13800 = x13797 + x13799;
          Fp x13801 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x13802 = x13801 * x43;
          Fp x13803 = x13800 + x13802;
          Fp x13804 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x13805 = x13804 * x54;
          Fp x13806 = x13803 + x13805;
          Fp x13807 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x13808 = x13807 * x55;
          Fp x13809 = x13806 + x13808;
          Fp x13810 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x13811 = x13810 * x56;
          Fp x13812 = x13809 + x13811;
          Fp x13813 = x13812 - x13658;
          if (x13813 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x5;
        Fp x13814 = x1005 * x3;
        Fp x13815 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x13816 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x13817 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x13818 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x13819 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x13820 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x13814;
        host_args[2] = x1280;
        host_args[3] = x13815;
        host_args[4] = x13816;
        host_args[5] = x1239;
        host_args[6] = x13817;
        host_args[7] = x13818;
        host_args[8] = x13819;
        host_args[9] = x13820;
        host(ctx, "log", "C%u: pc: %08x Decode: SRAI r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x13821 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x13822 = x5306 * x13821;
      if (x13822 != 0) {
        Fp x13823 = x1764 - x43;
        if (x13823 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:157");
        if (x1228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:157");
        if (x1766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:157");
        if (x71 != 0) {
          args[2][114 * steps + cycle] = x70;
          args[2][115 * steps + cycle] = x70;
          Fp x13824 = args[2][118 * steps + ((cycle - 0) & mask)];
          {
            Fp x13825 = Fp(x13824.asUInt32() & x2.asUInt32());
            args[2][64 * steps + cycle] = x13825;
            Fp x13826 = x13824 - x13825;
            Fp x13827 = x13826 * x10;
            Fp x13828 = Fp(x13827.asUInt32() & x2.asUInt32());
            args[2][65 * steps + cycle] = x13828;
            Fp x13829 = x13827 - x13828;
            Fp x13830 = x13829 * x10;
            Fp x13831 = Fp(x13830.asUInt32() & x2.asUInt32());
            args[2][66 * steps + cycle] = x13831;
            Fp x13832 = x13830 - x13831;
            Fp x13833 = x13832 * x10;
            Fp x13834 = Fp(x13833.asUInt32() & x2.asUInt32());
            args[2][67 * steps + cycle] = x13834;
            Fp x13835 = x13833 - x13834;
            Fp x13836 = x13835 * x10;
            Fp x13837 = Fp(x13836.asUInt32() & x2.asUInt32());
            args[2][68 * steps + cycle] = x13837;
            Fp x13838 = x13836 - x13837;
            Fp x13839 = x13838 * x10;
            Fp x13840 = Fp(x13839.asUInt32() & x2.asUInt32());
            args[2][69 * steps + cycle] = x13840;
            Fp x13841 = x13839 - x13840;
            Fp x13842 = x13841 * x10;
            Fp x13843 = Fp(x13842.asUInt32() & x2.asUInt32());
            args[2][70 * steps + cycle] = x13843;
            Fp x13844 = x13842 - x13843;
            Fp x13845 = x13844 * x10;
            Fp x13846 = Fp(x13845.asUInt32() & x2.asUInt32());
            args[2][71 * steps + cycle] = x13846;
          }
          Fp x13847 = args[2][64 * steps + ((cycle - 0) & mask)];
          Fp x13848 = args[2][65 * steps + ((cycle - 0) & mask)];
          Fp x13849 = x13848 * x3;
          Fp x13850 = x13847 + x13849;
          Fp x13851 = args[2][66 * steps + ((cycle - 0) & mask)];
          Fp x13852 = x13851 * x11;
          Fp x13853 = x13850 + x13852;
          Fp x13854 = args[2][67 * steps + ((cycle - 0) & mask)];
          Fp x13855 = x13854 * x12;
          Fp x13856 = x13853 + x13855;
          Fp x13857 = args[2][68 * steps + ((cycle - 0) & mask)];
          Fp x13858 = x13857 * x13;
          Fp x13859 = x13856 + x13858;
          Fp x13860 = args[2][69 * steps + ((cycle - 0) & mask)];
          Fp x13861 = x13860 * x14;
          Fp x13862 = x13859 + x13861;
          Fp x13863 = args[2][70 * steps + ((cycle - 0) & mask)];
          Fp x13864 = x13863 * x15;
          Fp x13865 = x13862 + x13864;
          Fp x13866 = args[2][71 * steps + ((cycle - 0) & mask)];
          Fp x13867 = x13866 * x16;
          Fp x13868 = x13865 + x13867;
          Fp x13869 = x13824 - x13868;
          Fp x13870 = x13869 * x33;
          if (x13870 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:157");
          {
            Fp x13871 = Fp(x13851.asUInt32() & x71.asUInt32());
            args[2][112 * steps + cycle] = x13871;
            Fp x13872 = x13851 - x13871;
            Fp x13873 = x13872 * x26;
            Fp x13874 = Fp(x13873.asUInt32() & x71.asUInt32());
            args[2][113 * steps + cycle] = x13874;
          }
          Fp x13875 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x13876 = args[2][113 * steps + ((cycle - 0) & mask)];
          Fp x13877 = x13876 * x1;
          Fp x13878 = x13875 + x13877;
          Fp x13879 = x13851 - x13878;
          Fp x13880 = x13879 * x10;
          if (x13880 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.cpp:157");
          Fp x13881 = x13875 * x11;
          Fp x13882 = x13850 + x13881;
          {
            Fp x13883 = (x13882 == 0) ? Fp(1) : Fp(0);
            args[2][32 * steps + cycle] = x13883;
            Fp x13884 = x13882 - x71;
            Fp x13885 = (x13884 == 0) ? Fp(1) : Fp(0);
            args[2][33 * steps + cycle] = x13885;
            Fp x13886 = x13882 - x1;
            Fp x13887 = (x13886 == 0) ? Fp(1) : Fp(0);
            args[2][34 * steps + cycle] = x13887;
            Fp x13888 = x13882 - x2;
            Fp x13889 = (x13888 == 0) ? Fp(1) : Fp(0);
            args[2][35 * steps + cycle] = x13889;
            Fp x13890 = x13882 - x3;
            Fp x13891 = (x13890 == 0) ? Fp(1) : Fp(0);
            args[2][36 * steps + cycle] = x13891;
            Fp x13892 = x13882 - x4;
            Fp x13893 = (x13892 == 0) ? Fp(1) : Fp(0);
            args[2][37 * steps + cycle] = x13893;
            Fp x13894 = x13882 - x5;
            Fp x13895 = (x13894 == 0) ? Fp(1) : Fp(0);
            args[2][38 * steps + cycle] = x13895;
            Fp x13896 = x13882 - x0;
            Fp x13897 = (x13896 == 0) ? Fp(1) : Fp(0);
            args[2][39 * steps + cycle] = x13897;
            Fp x13898 = x13882 - x6;
            Fp x13899 = (x13898 == 0) ? Fp(1) : Fp(0);
            args[2][40 * steps + cycle] = x13899;
            Fp x13900 = x13882 - x7;
            Fp x13901 = (x13900 == 0) ? Fp(1) : Fp(0);
            args[2][41 * steps + cycle] = x13901;
            Fp x13902 = x13882 - x8;
            Fp x13903 = (x13902 == 0) ? Fp(1) : Fp(0);
            args[2][42 * steps + cycle] = x13903;
            Fp x13904 = x13882 - x9;
            Fp x13905 = (x13904 == 0) ? Fp(1) : Fp(0);
            args[2][43 * steps + cycle] = x13905;
            Fp x13906 = x13882 - x38;
            Fp x13907 = (x13906 == 0) ? Fp(1) : Fp(0);
            args[2][44 * steps + cycle] = x13907;
            Fp x13908 = x13882 - x42;
            Fp x13909 = (x13908 == 0) ? Fp(1) : Fp(0);
            args[2][45 * steps + cycle] = x13909;
            Fp x13910 = x13882 - x44;
            Fp x13911 = (x13910 == 0) ? Fp(1) : Fp(0);
            args[2][46 * steps + cycle] = x13911;
            Fp x13912 = x13882 - x45;
            Fp x13913 = (x13912 == 0) ? Fp(1) : Fp(0);
            args[2][47 * steps + cycle] = x13913;
            Fp x13914 = x13882 - x11;
            Fp x13915 = (x13914 == 0) ? Fp(1) : Fp(0);
            args[2][48 * steps + cycle] = x13915;
            Fp x13916 = x13882 - x46;
            Fp x13917 = (x13916 == 0) ? Fp(1) : Fp(0);
            args[2][49 * steps + cycle] = x13917;
            Fp x13918 = x13882 - x47;
            Fp x13919 = (x13918 == 0) ? Fp(1) : Fp(0);
            args[2][50 * steps + cycle] = x13919;
            Fp x13920 = x13882 - x48;
            Fp x13921 = (x13920 == 0) ? Fp(1) : Fp(0);
            args[2][51 * steps + cycle] = x13921;
            Fp x13922 = x13882 - x49;
            Fp x13923 = (x13922 == 0) ? Fp(1) : Fp(0);
            args[2][52 * steps + cycle] = x13923;
            Fp x13924 = x13882 - x50;
            Fp x13925 = (x13924 == 0) ? Fp(1) : Fp(0);
            args[2][53 * steps + cycle] = x13925;
            Fp x13926 = x13882 - x51;
            Fp x13927 = (x13926 == 0) ? Fp(1) : Fp(0);
            args[2][54 * steps + cycle] = x13927;
            Fp x13928 = x13882 - x52;
            Fp x13929 = (x13928 == 0) ? Fp(1) : Fp(0);
            args[2][55 * steps + cycle] = x13929;
            Fp x13930 = x13882 - x39;
            Fp x13931 = (x13930 == 0) ? Fp(1) : Fp(0);
            args[2][56 * steps + cycle] = x13931;
            Fp x13932 = x13882 - x41;
            Fp x13933 = (x13932 == 0) ? Fp(1) : Fp(0);
            args[2][57 * steps + cycle] = x13933;
            Fp x13934 = x13882 - x53;
            Fp x13935 = (x13934 == 0) ? Fp(1) : Fp(0);
            args[2][58 * steps + cycle] = x13935;
            Fp x13936 = x13882 - x40;
            Fp x13937 = (x13936 == 0) ? Fp(1) : Fp(0);
            args[2][59 * steps + cycle] = x13937;
            Fp x13938 = x13882 - x43;
            Fp x13939 = (x13938 == 0) ? Fp(1) : Fp(0);
            args[2][60 * steps + cycle] = x13939;
            Fp x13940 = x13882 - x54;
            Fp x13941 = (x13940 == 0) ? Fp(1) : Fp(0);
            args[2][61 * steps + cycle] = x13941;
            Fp x13942 = x13882 - x55;
            Fp x13943 = (x13942 == 0) ? Fp(1) : Fp(0);
            args[2][62 * steps + cycle] = x13943;
            Fp x13944 = x13882 - x56;
            Fp x13945 = (x13944 == 0) ? Fp(1) : Fp(0);
            args[2][63 * steps + cycle] = x13945;
          }
          Fp x13946 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x13947 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x13948 = x13947 * x1;
          Fp x13949 = x13946 + x13948;
          Fp x13950 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x13951 = x13950 * x2;
          Fp x13952 = x13949 + x13951;
          Fp x13953 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x13954 = x13953 * x3;
          Fp x13955 = x13952 + x13954;
          Fp x13956 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x13957 = x13956 * x4;
          Fp x13958 = x13955 + x13957;
          Fp x13959 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x13960 = x13959 * x5;
          Fp x13961 = x13958 + x13960;
          Fp x13962 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x13963 = x13962 * x0;
          Fp x13964 = x13961 + x13963;
          Fp x13965 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x13966 = x13965 * x6;
          Fp x13967 = x13964 + x13966;
          Fp x13968 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x13969 = x13968 * x7;
          Fp x13970 = x13967 + x13969;
          Fp x13971 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x13972 = x13971 * x8;
          Fp x13973 = x13970 + x13972;
          Fp x13974 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x13975 = x13974 * x9;
          Fp x13976 = x13973 + x13975;
          Fp x13977 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x13978 = x13977 * x38;
          Fp x13979 = x13976 + x13978;
          Fp x13980 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x13981 = x13980 * x42;
          Fp x13982 = x13979 + x13981;
          Fp x13983 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x13984 = x13983 * x44;
          Fp x13985 = x13982 + x13984;
          Fp x13986 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x13987 = x13986 * x45;
          Fp x13988 = x13985 + x13987;
          Fp x13989 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x13990 = x13989 * x11;
          Fp x13991 = x13988 + x13990;
          Fp x13992 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x13993 = x13992 * x46;
          Fp x13994 = x13991 + x13993;
          Fp x13995 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x13996 = x13995 * x47;
          Fp x13997 = x13994 + x13996;
          Fp x13998 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x13999 = x13998 * x48;
          Fp x14000 = x13997 + x13999;
          Fp x14001 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x14002 = x14001 * x49;
          Fp x14003 = x14000 + x14002;
          Fp x14004 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x14005 = x14004 * x50;
          Fp x14006 = x14003 + x14005;
          Fp x14007 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x14008 = x14007 * x51;
          Fp x14009 = x14006 + x14008;
          Fp x14010 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x14011 = x14010 * x52;
          Fp x14012 = x14009 + x14011;
          Fp x14013 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x14014 = x14013 * x39;
          Fp x14015 = x14012 + x14014;
          Fp x14016 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x14017 = x14016 * x41;
          Fp x14018 = x14015 + x14017;
          Fp x14019 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x14020 = x14019 * x53;
          Fp x14021 = x14018 + x14020;
          Fp x14022 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x14023 = x14022 * x40;
          Fp x14024 = x14021 + x14023;
          Fp x14025 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x14026 = x14025 * x43;
          Fp x14027 = x14024 + x14026;
          Fp x14028 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x14029 = x14028 * x54;
          Fp x14030 = x14027 + x14029;
          Fp x14031 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x14032 = x14031 * x55;
          Fp x14033 = x14030 + x14032;
          Fp x14034 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x14035 = x14034 * x56;
          Fp x14036 = x14033 + x14035;
          Fp x14037 = x14036 - x13882;
          if (x14037 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        }
        args[2][120 * steps + cycle] = x6;
        Fp x14038 = x1005 * x3;
        Fp x14039 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x14040 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x14041 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x14042 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x14043 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x14044 = args[2][114 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14038;
        host_args[2] = x1280;
        host_args[3] = x14039;
        host_args[4] = x14040;
        host_args[5] = x1239;
        host_args[6] = x14041;
        host_args[7] = x14042;
        host_args[8] = x14043;
        host_args[9] = x14044;
        host(ctx, "log", "C%u: pc: %08x Decode: HALT r%u=0x%04x%04x, r%u=0x%04x%04x, imm=0x%04x%04x", host_args.data(), 10, host_outs.data(), 0);
      }
      Fp x14045 = x1056 * x1198;
      if (x14045 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14046 = x1057 * x1199;
      if (x14046 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14047 = x1060 - x71;
      Fp x14048 = x1060 * x14047;
      if (x14048 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14049 = x1063 - x71;
      Fp x14050 = x1063 * x14049;
      if (x14050 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14051 = x1066 - x71;
      Fp x14052 = x1066 * x14051;
      if (x14052 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14053 = x1069 - x71;
      Fp x14054 = x1069 * x14053;
      if (x14054 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14055 = x1072 - x71;
      Fp x14056 = x1072 * x14055;
      if (x14056 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14057 = x1075 - x71;
      Fp x14058 = x1075 * x14057;
      if (x14058 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14059 = x1078 - x71;
      Fp x14060 = x1078 * x14059;
      if (x14060 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14061 = x1081 - x71;
      Fp x14062 = x1081 * x14061;
      if (x14062 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14063 = x1084 - x71;
      Fp x14064 = x1084 * x14063;
      if (x14064 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14065 = x1087 - x71;
      Fp x14066 = x1087 * x14065;
      if (x14066 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14067 = x1090 - x71;
      Fp x14068 = x1090 * x14067;
      if (x14068 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14069 = x1093 - x71;
      Fp x14070 = x1093 * x14069;
      if (x14070 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14071 = x1096 - x71;
      Fp x14072 = x1096 * x14071;
      if (x14072 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14073 = x1099 - x71;
      Fp x14074 = x1099 * x14073;
      if (x14074 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14075 = x1150 - x71;
      Fp x14076 = x1150 * x14075;
      if (x14076 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14077 = x1151 - x71;
      Fp x14078 = x1151 * x14077;
      if (x14078 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14079 = x1154 - x71;
      Fp x14080 = x1154 * x14079;
      if (x14080 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14081 = x1157 - x71;
      Fp x14082 = x1157 * x14081;
      if (x14082 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14083 = x1160 - x71;
      Fp x14084 = x1160 * x14083;
      if (x14084 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14085 = x1163 - x71;
      Fp x14086 = x1163 * x14085;
      if (x14086 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14087 = x1166 - x71;
      Fp x14088 = x1166 * x14087;
      if (x14088 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14089 = x1169 - x71;
      Fp x14090 = x1169 * x14089;
      if (x14090 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14091 = x1172 - x71;
      Fp x14092 = x1172 * x14091;
      if (x14092 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14093 = x1175 - x71;
      Fp x14094 = x1175 * x14093;
      if (x14094 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14095 = x1178 - x71;
      Fp x14096 = x1178 * x14095;
      if (x14096 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14097 = x1181 - x71;
      Fp x14098 = x1181 * x14097;
      if (x14098 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14099 = x1184 - x71;
      Fp x14100 = x1184 * x14099;
      if (x14100 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14101 = x1187 - x71;
      Fp x14102 = x1187 * x14101;
      if (x14102 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14103 = x1190 - x71;
      Fp x14104 = x1190 * x14103;
      if (x14104 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14105 = x1193 - x71;
      Fp x14106 = x1193 * x14105;
      if (x14106 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:23");
      Fp x14107 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x14108 = x14107 - x71;
      Fp x14109 = x14107 * x14108;
      if (x14109 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14110 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x14111 = x14110 - x71;
      Fp x14112 = x14110 * x14111;
      if (x14112 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14113 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x14114 = x14113 - x71;
      Fp x14115 = x14113 * x14114;
      if (x14115 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14116 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x14117 = x14116 - x71;
      Fp x14118 = x14116 * x14117;
      if (x14118 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14119 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x14120 = x14119 - x71;
      Fp x14121 = x14119 * x14120;
      if (x14121 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14122 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x14123 = x14122 - x71;
      Fp x14124 = x14122 * x14123;
      if (x14124 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14125 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x14126 = x14125 - x71;
      Fp x14127 = x14125 * x14126;
      if (x14127 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14128 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x14129 = x14128 - x71;
      Fp x14130 = x14128 * x14129;
      if (x14130 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14131 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x14132 = x14131 - x71;
      Fp x14133 = x14131 * x14132;
      if (x14133 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14134 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x14135 = x14134 - x71;
      Fp x14136 = x14134 * x14135;
      if (x14136 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14137 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x14138 = x14137 - x71;
      Fp x14139 = x14137 * x14138;
      if (x14139 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14140 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x14141 = x14140 - x71;
      Fp x14142 = x14140 * x14141;
      if (x14142 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14143 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x14144 = x14143 - x71;
      Fp x14145 = x14143 * x14144;
      if (x14145 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14146 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x14147 = x14146 - x71;
      Fp x14148 = x14146 * x14147;
      if (x14148 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14149 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x14150 = x14149 - x71;
      Fp x14151 = x14149 * x14150;
      if (x14151 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14152 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x14153 = x14152 - x71;
      Fp x14154 = x14152 * x14153;
      if (x14154 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14155 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x14156 = x14155 - x71;
      Fp x14157 = x14155 * x14156;
      if (x14157 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14158 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x14159 = x14158 - x71;
      Fp x14160 = x14158 * x14159;
      if (x14160 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14161 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x14162 = x14161 - x71;
      Fp x14163 = x14161 * x14162;
      if (x14163 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14164 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x14165 = x14164 - x71;
      Fp x14166 = x14164 * x14165;
      if (x14166 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14167 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x14168 = x14167 - x71;
      Fp x14169 = x14167 * x14168;
      if (x14169 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14170 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x14171 = x14170 - x71;
      Fp x14172 = x14170 * x14171;
      if (x14172 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14173 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x14174 = x14173 - x71;
      Fp x14175 = x14173 * x14174;
      if (x14175 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14176 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x14177 = x14176 - x71;
      Fp x14178 = x14176 * x14177;
      if (x14178 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14179 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x14180 = x14179 - x71;
      Fp x14181 = x14179 * x14180;
      if (x14181 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14182 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x14183 = x14182 - x71;
      Fp x14184 = x14182 * x14183;
      if (x14184 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14185 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x14186 = x14185 - x71;
      Fp x14187 = x14185 * x14186;
      if (x14187 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14188 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x14189 = x14188 - x71;
      Fp x14190 = x14188 * x14189;
      if (x14190 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14191 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x14192 = x14191 - x71;
      Fp x14193 = x14191 * x14192;
      if (x14193 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14194 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x14195 = x14194 - x71;
      Fp x14196 = x14194 * x14195;
      if (x14196 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14197 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x14198 = x14197 - x71;
      Fp x14199 = x14197 * x14198;
      if (x14199 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14200 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x14201 = x14200 - x71;
      Fp x14202 = x14200 * x14201;
      if (x14202 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14203 = x14107 + x14110;
      Fp x14204 = x14203 + x14113;
      Fp x14205 = x14204 + x14116;
      Fp x14206 = x14205 + x14119;
      Fp x14207 = x14206 + x14122;
      Fp x14208 = x14207 + x14125;
      Fp x14209 = x14208 + x14128;
      Fp x14210 = x14209 + x14131;
      Fp x14211 = x14210 + x14134;
      Fp x14212 = x14211 + x14137;
      Fp x14213 = x14212 + x14140;
      Fp x14214 = x14213 + x14143;
      Fp x14215 = x14214 + x14146;
      Fp x14216 = x14215 + x14149;
      Fp x14217 = x14216 + x14152;
      Fp x14218 = x14217 + x14155;
      Fp x14219 = x14218 + x14158;
      Fp x14220 = x14219 + x14161;
      Fp x14221 = x14220 + x14164;
      Fp x14222 = x14221 + x14167;
      Fp x14223 = x14222 + x14170;
      Fp x14224 = x14223 + x14173;
      Fp x14225 = x14224 + x14176;
      Fp x14226 = x14225 + x14179;
      Fp x14227 = x14226 + x14182;
      Fp x14228 = x14227 + x14185;
      Fp x14229 = x14228 + x14188;
      Fp x14230 = x14229 + x14191;
      Fp x14231 = x14230 + x14194;
      Fp x14232 = x14231 + x14197;
      Fp x14233 = x14232 + x14200;
      Fp x14234 = x14233 - x71;
      if (x14234 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:24");
      Fp x14235 = x3731 - x71;
      Fp x14236 = x3731 * x14235;
      if (x14236 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14237 = x3956 - x71;
      Fp x14238 = x3956 * x14237;
      if (x14238 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14239 = x4181 - x71;
      Fp x14240 = x4181 * x14239;
      if (x14240 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14241 = x4406 - x71;
      Fp x14242 = x4406 * x14241;
      if (x14242 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14243 = x4631 - x71;
      Fp x14244 = x4631 * x14243;
      if (x14244 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14245 = x4856 - x71;
      Fp x14246 = x4856 * x14245;
      if (x14246 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14247 = x5081 - x71;
      Fp x14248 = x5081 * x14247;
      if (x14248 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14249 = x5306 - x71;
      Fp x14250 = x5306 * x14249;
      if (x14250 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14251 = x3731 + x3956;
      Fp x14252 = x14251 + x4181;
      Fp x14253 = x14252 + x4406;
      Fp x14254 = x14253 + x4631;
      Fp x14255 = x14254 + x4856;
      Fp x14256 = x14255 + x5081;
      Fp x14257 = x14256 + x5306;
      Fp x14258 = x14257 - x71;
      if (x14258 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:26");
      Fp x14259 = x3732 - x71;
      Fp x14260 = x3732 * x14259;
      if (x14260 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14261 = x5530 - x71;
      Fp x14262 = x5530 * x14261;
      if (x14262 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14263 = x7096 - x71;
      Fp x14264 = x7096 * x14263;
      if (x14264 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14265 = x8884 - x71;
      Fp x14266 = x8884 * x14265;
      if (x14266 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14267 = x10673 - x71;
      Fp x14268 = x10673 * x14267;
      if (x14268 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14269 = x12021 - x71;
      Fp x14270 = x12021 * x14269;
      if (x14270 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14271 = x13371 - x71;
      Fp x14272 = x13371 * x14271;
      if (x14272 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14273 = x13821 - x71;
      Fp x14274 = x13821 * x14273;
      if (x14274 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14275 = x3732 + x5530;
      Fp x14276 = x14275 + x7096;
      Fp x14277 = x14276 + x8884;
      Fp x14278 = x14277 + x10673;
      Fp x14279 = x14278 + x12021;
      Fp x14280 = x14279 + x13371;
      Fp x14281 = x14280 + x13821;
      Fp x14282 = x14281 - x71;
      if (x14282 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:27");
      Fp x14283 = x1467 - x71;
      Fp x14284 = x1467 * x14283;
      if (x14284 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14285 = x1296 - x71;
      Fp x14286 = x1296 * x14285;
      if (x14286 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14287 = x1297 - x71;
      Fp x14288 = x1297 * x14287;
      if (x14288 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14289 = x1300 - x71;
      Fp x14290 = x1300 * x14289;
      if (x14290 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14291 = x1303 - x71;
      Fp x14292 = x1303 * x14291;
      if (x14292 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14293 = x1306 - x71;
      Fp x14294 = x1306 * x14293;
      if (x14294 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14295 = x1309 - x71;
      Fp x14296 = x1309 * x14295;
      if (x14296 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14297 = x1312 - x71;
      Fp x14298 = x1312 * x14297;
      if (x14298 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14299 = x1467 + x1296;
      Fp x14300 = x14299 + x1297;
      Fp x14301 = x14300 + x1300;
      Fp x14302 = x14301 + x1303;
      Fp x14303 = x14302 + x1306;
      Fp x14304 = x14303 + x1309;
      Fp x14305 = x14304 + x1312;
      Fp x14306 = x14305 - x71;
      if (x14306 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:28");
      Fp x14307 = x1469 - x71;
      Fp x14308 = x1469 * x14307;
      if (x14308 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14309 = x1331 - x71;
      Fp x14310 = x1331 * x14309;
      if (x14310 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14311 = x1332 - x71;
      Fp x14312 = x1332 * x14311;
      if (x14312 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14313 = x1335 - x71;
      Fp x14314 = x1335 * x14313;
      if (x14314 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14315 = x1338 - x71;
      Fp x14316 = x1338 * x14315;
      if (x14316 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14317 = x1341 - x71;
      Fp x14318 = x1341 * x14317;
      if (x14318 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14319 = x1344 - x71;
      Fp x14320 = x1344 * x14319;
      if (x14320 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14321 = x1347 - x71;
      Fp x14322 = x1347 * x14321;
      if (x14322 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14323 = x1469 + x1331;
      Fp x14324 = x14323 + x1332;
      Fp x14325 = x14324 + x1335;
      Fp x14326 = x14325 + x1338;
      Fp x14327 = x14326 + x1341;
      Fp x14328 = x14327 + x1344;
      Fp x14329 = x14328 + x1347;
      Fp x14330 = x14329 - x71;
      if (x14330 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:29");
      Fp x14331 = x1385 - x71;
      Fp x14332 = x1385 * x14331;
      if (x14332 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:30");
      Fp x14333 = x1360 - x71;
      Fp x14334 = x1360 * x14333;
      if (x14334 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:30");
      Fp x14335 = x1361 - x71;
      Fp x14336 = x1361 * x14335;
      if (x14336 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:30");
      Fp x14337 = x1364 - x71;
      Fp x14338 = x1364 * x14337;
      if (x14338 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:30");
      Fp x14339 = x1385 + x1360;
      Fp x14340 = x14339 + x1361;
      Fp x14341 = x14340 + x1364;
      Fp x14342 = x14341 - x71;
      if (x14342 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:30");
      Fp x14343 = x1387 - x71;
      Fp x14344 = x1387 * x14343;
      if (x14344 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:31");
      Fp x14345 = x1377 - x71;
      Fp x14346 = x1377 * x14345;
      if (x14346 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:31");
      Fp x14347 = x1378 - x71;
      Fp x14348 = x1378 * x14347;
      if (x14348 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:31");
      Fp x14349 = x1381 - x71;
      Fp x14350 = x1381 * x14349;
      if (x14350 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:31");
      Fp x14351 = x1387 + x1377;
      Fp x14352 = x14351 + x1378;
      Fp x14353 = x14352 + x1381;
      Fp x14354 = x14353 - x71;
      if (x14354 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:31");
      Fp x14355 = args[2][112 * steps + ((cycle - 0) & mask)];
      Fp x14356 = x14355 - x71;
      Fp x14357 = x14355 * x14356;
      if (x14357 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:32");
      Fp x14358 = args[2][113 * steps + ((cycle - 0) & mask)];
      Fp x14359 = x14358 - x71;
      Fp x14360 = x14358 * x14359;
      if (x14360 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/decode_cycle.h:32");
    }
    Fp x14361 = args[2][133 * steps + ((cycle - 0) & mask)];
    if (x14361 != 0) {
      Fp x14362 = args[2][116 * steps + ((cycle - 1) & mask)];
      Fp x14363 = args[2][117 * steps + ((cycle - 1) & mask)];
      Fp x14364 = args[2][114 * steps + ((cycle - 1) & mask)];
      Fp x14365 = args[2][115 * steps + ((cycle - 1) & mask)];
      Fp x14366 = args[2][0 * steps + ((cycle - 2) & mask)];
      Fp x14367 = args[2][1 * steps + ((cycle - 2) & mask)];
      Fp x14368 = x14367 * x3;
      Fp x14369 = x14366 + x14368;
      Fp x14370 = args[2][2 * steps + ((cycle - 2) & mask)];
      Fp x14371 = x14370 * x11;
      Fp x14372 = x14369 + x14371;
      Fp x14373 = args[2][3 * steps + ((cycle - 2) & mask)];
      Fp x14374 = x14373 * x12;
      Fp x14375 = x14372 + x14374;
      Fp x14376 = args[2][4 * steps + ((cycle - 2) & mask)];
      Fp x14377 = x14376 * x13;
      Fp x14378 = x14375 + x14377;
      Fp x14379 = args[2][5 * steps + ((cycle - 2) & mask)];
      Fp x14380 = x14379 * x14;
      Fp x14381 = x14378 + x14380;
      Fp x14382 = args[2][6 * steps + ((cycle - 2) & mask)];
      Fp x14383 = x14382 * x15;
      Fp x14384 = x14381 + x14383;
      Fp x14385 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x14386 = x14385 * x16;
      Fp x14387 = x14384 + x14386;
      Fp x14388 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x14389 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x14390 = x14389 * x3;
      Fp x14391 = x14388 + x14390;
      Fp x14392 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x14393 = x14392 * x11;
      Fp x14394 = x14391 + x14393;
      Fp x14395 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x14396 = x14395 * x12;
      Fp x14397 = x14394 + x14396;
      Fp x14398 = args[2][12 * steps + ((cycle - 2) & mask)];
      Fp x14399 = x14398 * x13;
      Fp x14400 = x14397 + x14399;
      Fp x14401 = args[2][13 * steps + ((cycle - 2) & mask)];
      Fp x14402 = x14401 * x14;
      Fp x14403 = x14400 + x14402;
      Fp x14404 = args[2][14 * steps + ((cycle - 2) & mask)];
      Fp x14405 = x14404 * x15;
      Fp x14406 = x14403 + x14405;
      Fp x14407 = args[2][15 * steps + ((cycle - 2) & mask)];
      Fp x14408 = x14407 * x16;
      Fp x14409 = x14406 + x14408;
      Fp x14410 = args[2][72 * steps + ((cycle - 1) & mask)];
      if (x14410 != 0) {
        {
          Fp x14411 = Fp(x14362.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x14411;
          Fp x14412 = x14362 - x14411;
          Fp x14413 = x14412 * x26;
          Fp x14414 = Fp(x14413.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x14414;
          Fp x14415 = x14413 - x14414;
          Fp x14416 = x14415 * x26;
          Fp x14417 = Fp(x14416.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x14417;
          Fp x14418 = x14416 - x14417;
          Fp x14419 = x14418 * x26;
          Fp x14420 = Fp(x14419.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x14420;
          Fp x14421 = x14419 - x14420;
          Fp x14422 = x14421 * x26;
          Fp x14423 = Fp(x14422.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x14423;
          Fp x14424 = x14422 - x14423;
          Fp x14425 = x14424 * x26;
          Fp x14426 = Fp(x14425.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x14426;
          Fp x14427 = x14425 - x14426;
          Fp x14428 = x14427 * x26;
          Fp x14429 = Fp(x14428.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x14429;
          Fp x14430 = x14428 - x14429;
          Fp x14431 = x14430 * x26;
          Fp x14432 = Fp(x14431.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x14432;
          Fp x14433 = x14431 - x14432;
          Fp x14434 = x14433 * x26;
          Fp x14435 = Fp(x14434.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x14435;
          Fp x14436 = x14434 - x14435;
          Fp x14437 = x14436 * x26;
          Fp x14438 = Fp(x14437.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x14438;
          Fp x14439 = x14437 - x14438;
          Fp x14440 = x14439 * x26;
          Fp x14441 = Fp(x14440.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x14441;
          Fp x14442 = x14440 - x14441;
          Fp x14443 = x14442 * x26;
          Fp x14444 = Fp(x14443.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x14444;
          Fp x14445 = x14443 - x14444;
          Fp x14446 = x14445 * x26;
          Fp x14447 = Fp(x14446.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x14447;
          Fp x14448 = x14446 - x14447;
          Fp x14449 = x14448 * x26;
          Fp x14450 = Fp(x14449.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x14450;
          Fp x14451 = x14449 - x14450;
          Fp x14452 = x14451 * x26;
          Fp x14453 = Fp(x14452.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x14453;
          Fp x14454 = x14452 - x14453;
          Fp x14455 = x14454 * x26;
          Fp x14456 = Fp(x14455.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x14456;
        }
        Fp x14457 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x14458 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x14459 = x14458 * x1;
        Fp x14460 = x14457 + x14459;
        Fp x14461 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x14462 = x14461 * x3;
        Fp x14463 = x14460 + x14462;
        Fp x14464 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x14465 = x14464 * x6;
        Fp x14466 = x14463 + x14465;
        Fp x14467 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x14468 = x14467 * x11;
        Fp x14469 = x14466 + x14468;
        Fp x14470 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x14471 = x14470 * x27;
        Fp x14472 = x14469 + x14471;
        Fp x14473 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x14474 = x14473 * x12;
        Fp x14475 = x14472 + x14474;
        Fp x14476 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x14477 = x14476 * x28;
        Fp x14478 = x14475 + x14477;
        Fp x14479 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x14480 = x14479 * x13;
        Fp x14481 = x14478 + x14480;
        Fp x14482 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x14483 = x14482 * x29;
        Fp x14484 = x14481 + x14483;
        Fp x14485 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x14486 = x14485 * x14;
        Fp x14487 = x14484 + x14486;
        Fp x14488 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x14489 = x14488 * x30;
        Fp x14490 = x14487 + x14489;
        Fp x14491 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x14492 = x14491 * x15;
        Fp x14493 = x14490 + x14492;
        Fp x14494 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x14495 = x14494 * x31;
        Fp x14496 = x14493 + x14495;
        Fp x14497 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x14498 = x14497 * x16;
        Fp x14499 = x14496 + x14498;
        Fp x14500 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x14501 = x14500 * x32;
        Fp x14502 = x14499 + x14501;
        Fp x14503 = x14362 - x14502;
        Fp x14504 = x14503 * x33;
        args[2][106 * steps + cycle] = x14504;
        Fp x14505 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x14506 = x14363 + x14505;
        {
          Fp x14507 = Fp(x14506.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x14507;
          Fp x14508 = x14506 - x14507;
          Fp x14509 = x14508 * x26;
          Fp x14510 = Fp(x14509.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x14510;
          Fp x14511 = x14509 - x14510;
          Fp x14512 = x14511 * x26;
          Fp x14513 = Fp(x14512.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x14513;
          Fp x14514 = x14512 - x14513;
          Fp x14515 = x14514 * x26;
          Fp x14516 = Fp(x14515.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x14516;
          Fp x14517 = x14515 - x14516;
          Fp x14518 = x14517 * x26;
          Fp x14519 = Fp(x14518.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x14519;
          Fp x14520 = x14518 - x14519;
          Fp x14521 = x14520 * x26;
          Fp x14522 = Fp(x14521.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x14522;
          Fp x14523 = x14521 - x14522;
          Fp x14524 = x14523 * x26;
          Fp x14525 = Fp(x14524.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x14525;
          Fp x14526 = x14524 - x14525;
          Fp x14527 = x14526 * x26;
          Fp x14528 = Fp(x14527.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x14528;
          Fp x14529 = x14527 - x14528;
          Fp x14530 = x14529 * x26;
          Fp x14531 = Fp(x14530.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x14531;
          Fp x14532 = x14530 - x14531;
          Fp x14533 = x14532 * x26;
          Fp x14534 = Fp(x14533.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x14534;
          Fp x14535 = x14533 - x14534;
          Fp x14536 = x14535 * x26;
          Fp x14537 = Fp(x14536.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x14537;
          Fp x14538 = x14536 - x14537;
          Fp x14539 = x14538 * x26;
          Fp x14540 = Fp(x14539.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x14540;
          Fp x14541 = x14539 - x14540;
          Fp x14542 = x14541 * x26;
          Fp x14543 = Fp(x14542.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x14543;
          Fp x14544 = x14542 - x14543;
          Fp x14545 = x14544 * x26;
          Fp x14546 = Fp(x14545.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x14546;
          Fp x14547 = x14545 - x14546;
          Fp x14548 = x14547 * x26;
          Fp x14549 = Fp(x14548.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x14549;
          Fp x14550 = x14548 - x14549;
          Fp x14551 = x14550 * x26;
          Fp x14552 = Fp(x14551.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x14552;
        }
        Fp x14553 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x14554 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x14555 = x14554 * x1;
        Fp x14556 = x14553 + x14555;
        Fp x14557 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x14558 = x14557 * x3;
        Fp x14559 = x14556 + x14558;
        Fp x14560 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x14561 = x14560 * x6;
        Fp x14562 = x14559 + x14561;
        Fp x14563 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x14564 = x14563 * x11;
        Fp x14565 = x14562 + x14564;
        Fp x14566 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x14567 = x14566 * x27;
        Fp x14568 = x14565 + x14567;
        Fp x14569 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x14570 = x14569 * x12;
        Fp x14571 = x14568 + x14570;
        Fp x14572 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x14573 = x14572 * x28;
        Fp x14574 = x14571 + x14573;
        Fp x14575 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x14576 = x14575 * x13;
        Fp x14577 = x14574 + x14576;
        Fp x14578 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x14579 = x14578 * x29;
        Fp x14580 = x14577 + x14579;
        Fp x14581 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x14582 = x14581 * x14;
        Fp x14583 = x14580 + x14582;
        Fp x14584 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x14585 = x14584 * x30;
        Fp x14586 = x14583 + x14585;
        Fp x14587 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x14588 = x14587 * x15;
        Fp x14589 = x14586 + x14588;
        Fp x14590 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x14591 = x14590 * x31;
        Fp x14592 = x14589 + x14591;
        Fp x14593 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x14594 = x14593 * x16;
        Fp x14595 = x14592 + x14594;
        Fp x14596 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x14597 = x14596 * x32;
        Fp x14598 = x14595 + x14597;
        Fp x14599 = x14506 - x14598;
        Fp x14600 = x14599 * x33;
        args[2][107 * steps + cycle] = x14600;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x14601 = host_outs[0];
          Fp x14602 = host_outs[1];
          args[2][129 * steps + cycle] = x14601;
          args[2][130 * steps + cycle] = x14602;
        }
        Fp x14603 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x14604 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x14605 = Fp(x14603.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x14605;
          Fp x14606 = x14603 - x14605;
          Fp x14607 = x14606 * x26;
          Fp x14608 = Fp(x14607.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x14608;
          Fp x14609 = x14607 - x14608;
          Fp x14610 = x14609 * x26;
          Fp x14611 = Fp(x14610.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x14611;
          Fp x14612 = x14610 - x14611;
          Fp x14613 = x14612 * x26;
          Fp x14614 = Fp(x14613.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x14614;
          Fp x14615 = x14613 - x14614;
          Fp x14616 = x14615 * x26;
          Fp x14617 = Fp(x14616.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x14617;
          Fp x14618 = x14616 - x14617;
          Fp x14619 = x14618 * x26;
          Fp x14620 = Fp(x14619.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x14620;
          Fp x14621 = x14619 - x14620;
          Fp x14622 = x14621 * x26;
          Fp x14623 = Fp(x14622.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x14623;
          Fp x14624 = x14622 - x14623;
          Fp x14625 = x14624 * x26;
          Fp x14626 = Fp(x14625.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x14626;
          Fp x14627 = x14625 - x14626;
          Fp x14628 = x14627 * x26;
          Fp x14629 = Fp(x14628.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x14629;
          Fp x14630 = x14628 - x14629;
          Fp x14631 = x14630 * x26;
          Fp x14632 = Fp(x14631.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x14632;
          Fp x14633 = x14631 - x14632;
          Fp x14634 = x14633 * x26;
          Fp x14635 = Fp(x14634.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x14635;
          Fp x14636 = x14634 - x14635;
          Fp x14637 = x14636 * x26;
          Fp x14638 = Fp(x14637.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x14638;
          Fp x14639 = x14637 - x14638;
          Fp x14640 = x14639 * x26;
          Fp x14641 = Fp(x14640.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x14641;
          Fp x14642 = x14640 - x14641;
          Fp x14643 = x14642 * x26;
          Fp x14644 = Fp(x14643.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x14644;
          Fp x14645 = x14643 - x14644;
          Fp x14646 = x14645 * x26;
          Fp x14647 = Fp(x14646.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x14647;
          Fp x14648 = x14646 - x14647;
          Fp x14649 = x14648 * x26;
          Fp x14650 = Fp(x14649.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x14650;
        }
        Fp x14651 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x14652 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x14653 = x14652 * x1;
        Fp x14654 = x14651 + x14653;
        Fp x14655 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x14656 = x14655 * x3;
        Fp x14657 = x14654 + x14656;
        Fp x14658 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x14659 = x14658 * x6;
        Fp x14660 = x14657 + x14659;
        Fp x14661 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x14662 = x14661 * x11;
        Fp x14663 = x14660 + x14662;
        Fp x14664 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x14665 = x14664 * x27;
        Fp x14666 = x14663 + x14665;
        Fp x14667 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x14668 = x14667 * x12;
        Fp x14669 = x14666 + x14668;
        Fp x14670 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x14671 = x14670 * x28;
        Fp x14672 = x14669 + x14671;
        Fp x14673 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x14674 = x14673 * x13;
        Fp x14675 = x14672 + x14674;
        Fp x14676 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x14677 = x14676 * x29;
        Fp x14678 = x14675 + x14677;
        Fp x14679 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x14680 = x14679 * x14;
        Fp x14681 = x14678 + x14680;
        Fp x14682 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x14683 = x14682 * x30;
        Fp x14684 = x14681 + x14683;
        Fp x14685 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x14686 = x14685 * x15;
        Fp x14687 = x14684 + x14686;
        Fp x14688 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x14689 = x14688 * x31;
        Fp x14690 = x14687 + x14689;
        Fp x14691 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x14692 = x14691 * x16;
        Fp x14693 = x14690 + x14692;
        Fp x14694 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x14695 = x14694 * x32;
        Fp x14696 = x14693 + x14695;
        Fp x14697 = x14603 - x14696;
        Fp x14698 = x14697 * x33;
        if (x14698 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:50");
        {
          Fp x14699 = Fp(x14604.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x14699;
          Fp x14700 = x14604 - x14699;
          Fp x14701 = x14700 * x26;
          Fp x14702 = Fp(x14701.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x14702;
          Fp x14703 = x14701 - x14702;
          Fp x14704 = x14703 * x26;
          Fp x14705 = Fp(x14704.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x14705;
          Fp x14706 = x14704 - x14705;
          Fp x14707 = x14706 * x26;
          Fp x14708 = Fp(x14707.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x14708;
          Fp x14709 = x14707 - x14708;
          Fp x14710 = x14709 * x26;
          Fp x14711 = Fp(x14710.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x14711;
          Fp x14712 = x14710 - x14711;
          Fp x14713 = x14712 * x26;
          Fp x14714 = Fp(x14713.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x14714;
          Fp x14715 = x14713 - x14714;
          Fp x14716 = x14715 * x26;
          Fp x14717 = Fp(x14716.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x14717;
          Fp x14718 = x14716 - x14717;
          Fp x14719 = x14718 * x26;
          Fp x14720 = Fp(x14719.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x14720;
          Fp x14721 = x14719 - x14720;
          Fp x14722 = x14721 * x26;
          Fp x14723 = Fp(x14722.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x14723;
          Fp x14724 = x14722 - x14723;
          Fp x14725 = x14724 * x26;
          Fp x14726 = Fp(x14725.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x14726;
          Fp x14727 = x14725 - x14726;
          Fp x14728 = x14727 * x26;
          Fp x14729 = Fp(x14728.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x14729;
          Fp x14730 = x14728 - x14729;
          Fp x14731 = x14730 * x26;
          Fp x14732 = Fp(x14731.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x14732;
          Fp x14733 = x14731 - x14732;
          Fp x14734 = x14733 * x26;
          Fp x14735 = Fp(x14734.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x14735;
          Fp x14736 = x14734 - x14735;
          Fp x14737 = x14736 * x26;
          Fp x14738 = Fp(x14737.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x14738;
          Fp x14739 = x14737 - x14738;
          Fp x14740 = x14739 * x26;
          Fp x14741 = Fp(x14740.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x14741;
          Fp x14742 = x14740 - x14741;
          Fp x14743 = x14742 * x26;
          Fp x14744 = Fp(x14743.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x14744;
        }
        Fp x14745 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x14746 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x14747 = x14746 * x1;
        Fp x14748 = x14745 + x14747;
        Fp x14749 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x14750 = x14749 * x3;
        Fp x14751 = x14748 + x14750;
        Fp x14752 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x14753 = x14752 * x6;
        Fp x14754 = x14751 + x14753;
        Fp x14755 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x14756 = x14755 * x11;
        Fp x14757 = x14754 + x14756;
        Fp x14758 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x14759 = x14758 * x27;
        Fp x14760 = x14757 + x14759;
        Fp x14761 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x14762 = x14761 * x12;
        Fp x14763 = x14760 + x14762;
        Fp x14764 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x14765 = x14764 * x28;
        Fp x14766 = x14763 + x14765;
        Fp x14767 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x14768 = x14767 * x13;
        Fp x14769 = x14766 + x14768;
        Fp x14770 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x14771 = x14770 * x29;
        Fp x14772 = x14769 + x14771;
        Fp x14773 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x14774 = x14773 * x14;
        Fp x14775 = x14772 + x14774;
        Fp x14776 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x14777 = x14776 * x30;
        Fp x14778 = x14775 + x14777;
        Fp x14779 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x14780 = x14779 * x15;
        Fp x14781 = x14778 + x14780;
        Fp x14782 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x14783 = x14782 * x31;
        Fp x14784 = x14781 + x14783;
        Fp x14785 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x14786 = x14785 * x16;
        Fp x14787 = x14784 + x14786;
        Fp x14788 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x14789 = x14788 * x32;
        Fp x14790 = x14787 + x14789;
        Fp x14791 = x14604 - x14790;
        Fp x14792 = x14791 * x33;
        if (x14792 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:50");
        {
          Fp x14793 = (x14460 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x14793;
          Fp x14794 = x14460 - x71;
          Fp x14795 = (x14794 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x14795;
          Fp x14796 = x14460 - x1;
          Fp x14797 = (x14796 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x14797;
          Fp x14798 = x14460 - x2;
          Fp x14799 = (x14798 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x14799;
        }
        Fp x14800 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x14801 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x14802 = x14801 * x1;
        Fp x14803 = x14800 + x14802;
        Fp x14804 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x14805 = x14804 * x2;
        Fp x14806 = x14803 + x14805;
        Fp x14807 = x14806 - x14460;
        if (x14807 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x14808 = x14502 + x14696;
        Fp x14809 = x14598 + x14790;
        {
          Fp x14810 = Fp(x14808.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x14810;
          Fp x14811 = x14808 - x14810;
          Fp x14812 = x14811 * x26;
          Fp x14813 = Fp(x14812.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x14813;
          Fp x14814 = x14812 - x14813;
          Fp x14815 = x14814 * x26;
          Fp x14816 = Fp(x14815.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x14816;
          Fp x14817 = x14815 - x14816;
          Fp x14818 = x14817 * x26;
          Fp x14819 = Fp(x14818.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x14819;
          Fp x14820 = x14818 - x14819;
          Fp x14821 = x14820 * x26;
          Fp x14822 = Fp(x14821.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x14822;
          Fp x14823 = x14821 - x14822;
          Fp x14824 = x14823 * x26;
          Fp x14825 = Fp(x14824.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x14825;
          Fp x14826 = x14824 - x14825;
          Fp x14827 = x14826 * x26;
          Fp x14828 = Fp(x14827.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x14828;
          Fp x14829 = x14827 - x14828;
          Fp x14830 = x14829 * x26;
          Fp x14831 = Fp(x14830.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x14831;
          Fp x14832 = x14830 - x14831;
          Fp x14833 = x14832 * x26;
          Fp x14834 = Fp(x14833.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x14834;
          Fp x14835 = x14833 - x14834;
          Fp x14836 = x14835 * x26;
          Fp x14837 = Fp(x14836.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x14837;
          Fp x14838 = x14836 - x14837;
          Fp x14839 = x14838 * x26;
          Fp x14840 = Fp(x14839.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x14840;
          Fp x14841 = x14839 - x14840;
          Fp x14842 = x14841 * x26;
          Fp x14843 = Fp(x14842.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x14843;
          Fp x14844 = x14842 - x14843;
          Fp x14845 = x14844 * x26;
          Fp x14846 = Fp(x14845.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x14846;
          Fp x14847 = x14845 - x14846;
          Fp x14848 = x14847 * x26;
          Fp x14849 = Fp(x14848.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x14849;
          Fp x14850 = x14848 - x14849;
          Fp x14851 = x14850 * x26;
          Fp x14852 = Fp(x14851.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x14852;
          Fp x14853 = x14851 - x14852;
          Fp x14854 = x14853 * x26;
          Fp x14855 = Fp(x14854.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x14855;
        }
        Fp x14856 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x14857 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x14858 = x14857 * x1;
        Fp x14859 = x14856 + x14858;
        Fp x14860 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x14861 = x14860 * x3;
        Fp x14862 = x14859 + x14861;
        Fp x14863 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x14864 = x14863 * x6;
        Fp x14865 = x14862 + x14864;
        Fp x14866 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x14867 = x14866 * x11;
        Fp x14868 = x14865 + x14867;
        Fp x14869 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x14870 = x14869 * x27;
        Fp x14871 = x14868 + x14870;
        Fp x14872 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x14873 = x14872 * x12;
        Fp x14874 = x14871 + x14873;
        Fp x14875 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x14876 = x14875 * x28;
        Fp x14877 = x14874 + x14876;
        Fp x14878 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x14879 = x14878 * x13;
        Fp x14880 = x14877 + x14879;
        Fp x14881 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x14882 = x14881 * x29;
        Fp x14883 = x14880 + x14882;
        Fp x14884 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x14885 = x14884 * x14;
        Fp x14886 = x14883 + x14885;
        Fp x14887 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x14888 = x14887 * x30;
        Fp x14889 = x14886 + x14888;
        Fp x14890 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x14891 = x14890 * x15;
        Fp x14892 = x14889 + x14891;
        Fp x14893 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x14894 = x14893 * x31;
        Fp x14895 = x14892 + x14894;
        Fp x14896 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x14897 = x14896 * x16;
        Fp x14898 = x14895 + x14897;
        Fp x14899 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x14900 = x14899 * x32;
        Fp x14901 = x14898 + x14900;
        Fp x14902 = x14808 - x14901;
        Fp x14903 = x14902 * x33;
        args[2][108 * steps + cycle] = x14903;
        Fp x14904 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x14905 = x14809 + x14904;
        {
          Fp x14906 = Fp(x14905.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x14906;
          Fp x14907 = x14905 - x14906;
          Fp x14908 = x14907 * x26;
          Fp x14909 = Fp(x14908.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x14909;
          Fp x14910 = x14908 - x14909;
          Fp x14911 = x14910 * x26;
          Fp x14912 = Fp(x14911.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x14912;
          Fp x14913 = x14911 - x14912;
          Fp x14914 = x14913 * x26;
          Fp x14915 = Fp(x14914.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x14915;
          Fp x14916 = x14914 - x14915;
          Fp x14917 = x14916 * x26;
          Fp x14918 = Fp(x14917.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x14918;
          Fp x14919 = x14917 - x14918;
          Fp x14920 = x14919 * x26;
          Fp x14921 = Fp(x14920.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x14921;
          Fp x14922 = x14920 - x14921;
          Fp x14923 = x14922 * x26;
          Fp x14924 = Fp(x14923.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x14924;
          Fp x14925 = x14923 - x14924;
          Fp x14926 = x14925 * x26;
          Fp x14927 = Fp(x14926.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x14927;
          Fp x14928 = x14926 - x14927;
          Fp x14929 = x14928 * x26;
          Fp x14930 = Fp(x14929.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x14930;
          Fp x14931 = x14929 - x14930;
          Fp x14932 = x14931 * x26;
          Fp x14933 = Fp(x14932.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x14933;
          Fp x14934 = x14932 - x14933;
          Fp x14935 = x14934 * x26;
          Fp x14936 = Fp(x14935.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x14936;
          Fp x14937 = x14935 - x14936;
          Fp x14938 = x14937 * x26;
          Fp x14939 = Fp(x14938.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x14939;
          Fp x14940 = x14938 - x14939;
          Fp x14941 = x14940 * x26;
          Fp x14942 = Fp(x14941.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x14942;
          Fp x14943 = x14941 - x14942;
          Fp x14944 = x14943 * x26;
          Fp x14945 = Fp(x14944.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x14945;
          Fp x14946 = x14944 - x14945;
          Fp x14947 = x14946 * x26;
          Fp x14948 = Fp(x14947.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x14948;
          Fp x14949 = x14947 - x14948;
          Fp x14950 = x14949 * x26;
          Fp x14951 = Fp(x14950.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x14951;
        }
        Fp x14952 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x14953 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x14954 = x14953 * x1;
        Fp x14955 = x14952 + x14954;
        Fp x14956 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x14957 = x14956 * x3;
        Fp x14958 = x14955 + x14957;
        Fp x14959 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x14960 = x14959 * x6;
        Fp x14961 = x14958 + x14960;
        Fp x14962 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x14963 = x14962 * x11;
        Fp x14964 = x14961 + x14963;
        Fp x14965 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x14966 = x14965 * x27;
        Fp x14967 = x14964 + x14966;
        Fp x14968 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x14969 = x14968 * x12;
        Fp x14970 = x14967 + x14969;
        Fp x14971 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x14972 = x14971 * x28;
        Fp x14973 = x14970 + x14972;
        Fp x14974 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x14975 = x14974 * x13;
        Fp x14976 = x14973 + x14975;
        Fp x14977 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x14978 = x14977 * x29;
        Fp x14979 = x14976 + x14978;
        Fp x14980 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x14981 = x14980 * x14;
        Fp x14982 = x14979 + x14981;
        Fp x14983 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x14984 = x14983 * x30;
        Fp x14985 = x14982 + x14984;
        Fp x14986 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x14987 = x14986 * x15;
        Fp x14988 = x14985 + x14987;
        Fp x14989 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x14990 = x14989 * x31;
        Fp x14991 = x14988 + x14990;
        Fp x14992 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x14993 = x14992 * x16;
        Fp x14994 = x14991 + x14993;
        Fp x14995 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x14996 = x14995 * x32;
        Fp x14997 = x14994 + x14996;
        Fp x14998 = x14905 - x14997;
        Fp x14999 = x14998 * x33;
        args[2][109 * steps + cycle] = x14999;
        {
          {
            Fp x15000 = (x14901 == 0) ? Fp(1) : Fp(0);
            Fp x15001 = x71 - x15000;
            args[2][114 * steps + cycle] = x15001;
            Fp x15002 = inv(x14901);
            args[2][115 * steps + cycle] = x15002;
          }
          Fp x15003 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x15004 = x14901 * x15003;
          Fp x15005 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x15006 = x15004 - x15005;
          if (x15006 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x15007 = x71 - x15005;
          Fp x15008 = x15007 * x14901;
          if (x15008 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x15009 = (x14997 == 0) ? Fp(1) : Fp(0);
            Fp x15010 = x71 - x15009;
            args[2][116 * steps + cycle] = x15010;
            Fp x15011 = inv(x14997);
            args[2][117 * steps + cycle] = x15011;
          }
          Fp x15012 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x15013 = x14997 * x15012;
          Fp x15014 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x15015 = x15013 - x15014;
          if (x15015 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x15016 = x71 - x15014;
          Fp x15017 = x15016 * x14997;
          if (x15017 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x15018 = x15007 * x15016;
          Fp x15019 = x71 - x15018;
          args[2][111 * steps + cycle] = x15019;
          Fp x15020 = x71 - x14788;
          Fp x15021 = x14596 * x15020;
          Fp x15022 = x71 - x14995;
          Fp x15023 = x15021 * x15022;
          Fp x15024 = x71 - x14596;
          Fp x15025 = x15024 * x14788;
          Fp x15026 = x15025 * x14995;
          Fp x15027 = x15023 + x15026;
          args[2][112 * steps + cycle] = x15027;
          Fp x15028 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x15029 = x15028 + x14995;
          Fp x15030 = x15028 * x1;
          Fp x15031 = x15030 * x14995;
          Fp x15032 = x15029 - x15031;
          args[2][113 * steps + cycle] = x15032;
        }
        args[2][100 * steps + cycle] = x14901;
        args[2][101 * steps + cycle] = x14997;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x15033 = x14387 + x3;
        args[2][104 * steps + cycle] = x15033;
        args[2][105 * steps + cycle] = x14409;
        Fp x15034 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x15035 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x15036 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x15037 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x15038 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x15039 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14409;
        host_args[2] = x14387;
        host_args[3] = x14598;
        host_args[4] = x14502;
        host_args[5] = x14790;
        host_args[6] = x14696;
        host_args[7] = x14997;
        host_args[8] = x14901;
        host_args[9] = x15034;
        host_args[10] = x15035;
        host_args[11] = x15036;
        host_args[12] = x15037;
        host_args[13] = x15038;
        host_args[14] = x15039;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x15040 = args[2][73 * steps + ((cycle - 1) & mask)];
      if (x15040 != 0) {
        {
          Fp x15041 = Fp(x14362.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x15041;
          Fp x15042 = x14362 - x15041;
          Fp x15043 = x15042 * x26;
          Fp x15044 = Fp(x15043.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x15044;
          Fp x15045 = x15043 - x15044;
          Fp x15046 = x15045 * x26;
          Fp x15047 = Fp(x15046.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x15047;
          Fp x15048 = x15046 - x15047;
          Fp x15049 = x15048 * x26;
          Fp x15050 = Fp(x15049.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x15050;
          Fp x15051 = x15049 - x15050;
          Fp x15052 = x15051 * x26;
          Fp x15053 = Fp(x15052.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x15053;
          Fp x15054 = x15052 - x15053;
          Fp x15055 = x15054 * x26;
          Fp x15056 = Fp(x15055.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x15056;
          Fp x15057 = x15055 - x15056;
          Fp x15058 = x15057 * x26;
          Fp x15059 = Fp(x15058.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x15059;
          Fp x15060 = x15058 - x15059;
          Fp x15061 = x15060 * x26;
          Fp x15062 = Fp(x15061.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x15062;
          Fp x15063 = x15061 - x15062;
          Fp x15064 = x15063 * x26;
          Fp x15065 = Fp(x15064.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x15065;
          Fp x15066 = x15064 - x15065;
          Fp x15067 = x15066 * x26;
          Fp x15068 = Fp(x15067.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x15068;
          Fp x15069 = x15067 - x15068;
          Fp x15070 = x15069 * x26;
          Fp x15071 = Fp(x15070.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x15071;
          Fp x15072 = x15070 - x15071;
          Fp x15073 = x15072 * x26;
          Fp x15074 = Fp(x15073.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x15074;
          Fp x15075 = x15073 - x15074;
          Fp x15076 = x15075 * x26;
          Fp x15077 = Fp(x15076.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x15077;
          Fp x15078 = x15076 - x15077;
          Fp x15079 = x15078 * x26;
          Fp x15080 = Fp(x15079.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x15080;
          Fp x15081 = x15079 - x15080;
          Fp x15082 = x15081 * x26;
          Fp x15083 = Fp(x15082.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x15083;
          Fp x15084 = x15082 - x15083;
          Fp x15085 = x15084 * x26;
          Fp x15086 = Fp(x15085.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x15086;
        }
        Fp x15087 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x15088 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x15089 = x15088 * x1;
        Fp x15090 = x15087 + x15089;
        Fp x15091 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x15092 = x15091 * x3;
        Fp x15093 = x15090 + x15092;
        Fp x15094 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x15095 = x15094 * x6;
        Fp x15096 = x15093 + x15095;
        Fp x15097 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x15098 = x15097 * x11;
        Fp x15099 = x15096 + x15098;
        Fp x15100 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x15101 = x15100 * x27;
        Fp x15102 = x15099 + x15101;
        Fp x15103 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x15104 = x15103 * x12;
        Fp x15105 = x15102 + x15104;
        Fp x15106 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x15107 = x15106 * x28;
        Fp x15108 = x15105 + x15107;
        Fp x15109 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x15110 = x15109 * x13;
        Fp x15111 = x15108 + x15110;
        Fp x15112 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x15113 = x15112 * x29;
        Fp x15114 = x15111 + x15113;
        Fp x15115 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x15116 = x15115 * x14;
        Fp x15117 = x15114 + x15116;
        Fp x15118 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x15119 = x15118 * x30;
        Fp x15120 = x15117 + x15119;
        Fp x15121 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x15122 = x15121 * x15;
        Fp x15123 = x15120 + x15122;
        Fp x15124 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x15125 = x15124 * x31;
        Fp x15126 = x15123 + x15125;
        Fp x15127 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x15128 = x15127 * x16;
        Fp x15129 = x15126 + x15128;
        Fp x15130 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x15131 = x15130 * x32;
        Fp x15132 = x15129 + x15131;
        Fp x15133 = x14362 - x15132;
        Fp x15134 = x15133 * x33;
        args[2][106 * steps + cycle] = x15134;
        Fp x15135 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x15136 = x14363 + x15135;
        {
          Fp x15137 = Fp(x15136.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x15137;
          Fp x15138 = x15136 - x15137;
          Fp x15139 = x15138 * x26;
          Fp x15140 = Fp(x15139.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x15140;
          Fp x15141 = x15139 - x15140;
          Fp x15142 = x15141 * x26;
          Fp x15143 = Fp(x15142.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x15143;
          Fp x15144 = x15142 - x15143;
          Fp x15145 = x15144 * x26;
          Fp x15146 = Fp(x15145.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x15146;
          Fp x15147 = x15145 - x15146;
          Fp x15148 = x15147 * x26;
          Fp x15149 = Fp(x15148.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x15149;
          Fp x15150 = x15148 - x15149;
          Fp x15151 = x15150 * x26;
          Fp x15152 = Fp(x15151.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x15152;
          Fp x15153 = x15151 - x15152;
          Fp x15154 = x15153 * x26;
          Fp x15155 = Fp(x15154.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x15155;
          Fp x15156 = x15154 - x15155;
          Fp x15157 = x15156 * x26;
          Fp x15158 = Fp(x15157.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x15158;
          Fp x15159 = x15157 - x15158;
          Fp x15160 = x15159 * x26;
          Fp x15161 = Fp(x15160.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x15161;
          Fp x15162 = x15160 - x15161;
          Fp x15163 = x15162 * x26;
          Fp x15164 = Fp(x15163.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x15164;
          Fp x15165 = x15163 - x15164;
          Fp x15166 = x15165 * x26;
          Fp x15167 = Fp(x15166.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x15167;
          Fp x15168 = x15166 - x15167;
          Fp x15169 = x15168 * x26;
          Fp x15170 = Fp(x15169.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x15170;
          Fp x15171 = x15169 - x15170;
          Fp x15172 = x15171 * x26;
          Fp x15173 = Fp(x15172.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x15173;
          Fp x15174 = x15172 - x15173;
          Fp x15175 = x15174 * x26;
          Fp x15176 = Fp(x15175.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x15176;
          Fp x15177 = x15175 - x15176;
          Fp x15178 = x15177 * x26;
          Fp x15179 = Fp(x15178.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x15179;
          Fp x15180 = x15178 - x15179;
          Fp x15181 = x15180 * x26;
          Fp x15182 = Fp(x15181.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x15182;
        }
        Fp x15183 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x15184 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x15185 = x15184 * x1;
        Fp x15186 = x15183 + x15185;
        Fp x15187 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x15188 = x15187 * x3;
        Fp x15189 = x15186 + x15188;
        Fp x15190 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x15191 = x15190 * x6;
        Fp x15192 = x15189 + x15191;
        Fp x15193 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x15194 = x15193 * x11;
        Fp x15195 = x15192 + x15194;
        Fp x15196 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x15197 = x15196 * x27;
        Fp x15198 = x15195 + x15197;
        Fp x15199 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x15200 = x15199 * x12;
        Fp x15201 = x15198 + x15200;
        Fp x15202 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x15203 = x15202 * x28;
        Fp x15204 = x15201 + x15203;
        Fp x15205 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x15206 = x15205 * x13;
        Fp x15207 = x15204 + x15206;
        Fp x15208 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x15209 = x15208 * x29;
        Fp x15210 = x15207 + x15209;
        Fp x15211 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x15212 = x15211 * x14;
        Fp x15213 = x15210 + x15212;
        Fp x15214 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x15215 = x15214 * x30;
        Fp x15216 = x15213 + x15215;
        Fp x15217 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x15218 = x15217 * x15;
        Fp x15219 = x15216 + x15218;
        Fp x15220 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x15221 = x15220 * x31;
        Fp x15222 = x15219 + x15221;
        Fp x15223 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x15224 = x15223 * x16;
        Fp x15225 = x15222 + x15224;
        Fp x15226 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x15227 = x15226 * x32;
        Fp x15228 = x15225 + x15227;
        Fp x15229 = x15136 - x15228;
        Fp x15230 = x15229 * x33;
        args[2][107 * steps + cycle] = x15230;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x15231 = host_outs[0];
          Fp x15232 = host_outs[1];
          args[2][129 * steps + cycle] = x15231;
          args[2][130 * steps + cycle] = x15232;
        }
        Fp x15233 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x15234 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x15235 = Fp(x15233.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x15235;
          Fp x15236 = x15233 - x15235;
          Fp x15237 = x15236 * x26;
          Fp x15238 = Fp(x15237.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x15238;
          Fp x15239 = x15237 - x15238;
          Fp x15240 = x15239 * x26;
          Fp x15241 = Fp(x15240.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x15241;
          Fp x15242 = x15240 - x15241;
          Fp x15243 = x15242 * x26;
          Fp x15244 = Fp(x15243.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x15244;
          Fp x15245 = x15243 - x15244;
          Fp x15246 = x15245 * x26;
          Fp x15247 = Fp(x15246.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x15247;
          Fp x15248 = x15246 - x15247;
          Fp x15249 = x15248 * x26;
          Fp x15250 = Fp(x15249.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x15250;
          Fp x15251 = x15249 - x15250;
          Fp x15252 = x15251 * x26;
          Fp x15253 = Fp(x15252.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x15253;
          Fp x15254 = x15252 - x15253;
          Fp x15255 = x15254 * x26;
          Fp x15256 = Fp(x15255.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x15256;
          Fp x15257 = x15255 - x15256;
          Fp x15258 = x15257 * x26;
          Fp x15259 = Fp(x15258.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x15259;
          Fp x15260 = x15258 - x15259;
          Fp x15261 = x15260 * x26;
          Fp x15262 = Fp(x15261.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x15262;
          Fp x15263 = x15261 - x15262;
          Fp x15264 = x15263 * x26;
          Fp x15265 = Fp(x15264.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x15265;
          Fp x15266 = x15264 - x15265;
          Fp x15267 = x15266 * x26;
          Fp x15268 = Fp(x15267.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x15268;
          Fp x15269 = x15267 - x15268;
          Fp x15270 = x15269 * x26;
          Fp x15271 = Fp(x15270.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x15271;
          Fp x15272 = x15270 - x15271;
          Fp x15273 = x15272 * x26;
          Fp x15274 = Fp(x15273.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x15274;
          Fp x15275 = x15273 - x15274;
          Fp x15276 = x15275 * x26;
          Fp x15277 = Fp(x15276.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x15277;
          Fp x15278 = x15276 - x15277;
          Fp x15279 = x15278 * x26;
          Fp x15280 = Fp(x15279.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x15280;
        }
        Fp x15281 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x15282 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x15283 = x15282 * x1;
        Fp x15284 = x15281 + x15283;
        Fp x15285 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x15286 = x15285 * x3;
        Fp x15287 = x15284 + x15286;
        Fp x15288 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x15289 = x15288 * x6;
        Fp x15290 = x15287 + x15289;
        Fp x15291 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x15292 = x15291 * x11;
        Fp x15293 = x15290 + x15292;
        Fp x15294 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x15295 = x15294 * x27;
        Fp x15296 = x15293 + x15295;
        Fp x15297 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x15298 = x15297 * x12;
        Fp x15299 = x15296 + x15298;
        Fp x15300 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x15301 = x15300 * x28;
        Fp x15302 = x15299 + x15301;
        Fp x15303 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x15304 = x15303 * x13;
        Fp x15305 = x15302 + x15304;
        Fp x15306 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x15307 = x15306 * x29;
        Fp x15308 = x15305 + x15307;
        Fp x15309 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x15310 = x15309 * x14;
        Fp x15311 = x15308 + x15310;
        Fp x15312 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x15313 = x15312 * x30;
        Fp x15314 = x15311 + x15313;
        Fp x15315 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x15316 = x15315 * x15;
        Fp x15317 = x15314 + x15316;
        Fp x15318 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x15319 = x15318 * x31;
        Fp x15320 = x15317 + x15319;
        Fp x15321 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x15322 = x15321 * x16;
        Fp x15323 = x15320 + x15322;
        Fp x15324 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x15325 = x15324 * x32;
        Fp x15326 = x15323 + x15325;
        Fp x15327 = x15233 - x15326;
        Fp x15328 = x15327 * x33;
        if (x15328 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:51");
        {
          Fp x15329 = Fp(x15234.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x15329;
          Fp x15330 = x15234 - x15329;
          Fp x15331 = x15330 * x26;
          Fp x15332 = Fp(x15331.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x15332;
          Fp x15333 = x15331 - x15332;
          Fp x15334 = x15333 * x26;
          Fp x15335 = Fp(x15334.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x15335;
          Fp x15336 = x15334 - x15335;
          Fp x15337 = x15336 * x26;
          Fp x15338 = Fp(x15337.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x15338;
          Fp x15339 = x15337 - x15338;
          Fp x15340 = x15339 * x26;
          Fp x15341 = Fp(x15340.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x15341;
          Fp x15342 = x15340 - x15341;
          Fp x15343 = x15342 * x26;
          Fp x15344 = Fp(x15343.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x15344;
          Fp x15345 = x15343 - x15344;
          Fp x15346 = x15345 * x26;
          Fp x15347 = Fp(x15346.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x15347;
          Fp x15348 = x15346 - x15347;
          Fp x15349 = x15348 * x26;
          Fp x15350 = Fp(x15349.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x15350;
          Fp x15351 = x15349 - x15350;
          Fp x15352 = x15351 * x26;
          Fp x15353 = Fp(x15352.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x15353;
          Fp x15354 = x15352 - x15353;
          Fp x15355 = x15354 * x26;
          Fp x15356 = Fp(x15355.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x15356;
          Fp x15357 = x15355 - x15356;
          Fp x15358 = x15357 * x26;
          Fp x15359 = Fp(x15358.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x15359;
          Fp x15360 = x15358 - x15359;
          Fp x15361 = x15360 * x26;
          Fp x15362 = Fp(x15361.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x15362;
          Fp x15363 = x15361 - x15362;
          Fp x15364 = x15363 * x26;
          Fp x15365 = Fp(x15364.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x15365;
          Fp x15366 = x15364 - x15365;
          Fp x15367 = x15366 * x26;
          Fp x15368 = Fp(x15367.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x15368;
          Fp x15369 = x15367 - x15368;
          Fp x15370 = x15369 * x26;
          Fp x15371 = Fp(x15370.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x15371;
          Fp x15372 = x15370 - x15371;
          Fp x15373 = x15372 * x26;
          Fp x15374 = Fp(x15373.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x15374;
        }
        Fp x15375 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x15376 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x15377 = x15376 * x1;
        Fp x15378 = x15375 + x15377;
        Fp x15379 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x15380 = x15379 * x3;
        Fp x15381 = x15378 + x15380;
        Fp x15382 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x15383 = x15382 * x6;
        Fp x15384 = x15381 + x15383;
        Fp x15385 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x15386 = x15385 * x11;
        Fp x15387 = x15384 + x15386;
        Fp x15388 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x15389 = x15388 * x27;
        Fp x15390 = x15387 + x15389;
        Fp x15391 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x15392 = x15391 * x12;
        Fp x15393 = x15390 + x15392;
        Fp x15394 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x15395 = x15394 * x28;
        Fp x15396 = x15393 + x15395;
        Fp x15397 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x15398 = x15397 * x13;
        Fp x15399 = x15396 + x15398;
        Fp x15400 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x15401 = x15400 * x29;
        Fp x15402 = x15399 + x15401;
        Fp x15403 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x15404 = x15403 * x14;
        Fp x15405 = x15402 + x15404;
        Fp x15406 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x15407 = x15406 * x30;
        Fp x15408 = x15405 + x15407;
        Fp x15409 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x15410 = x15409 * x15;
        Fp x15411 = x15408 + x15410;
        Fp x15412 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x15413 = x15412 * x31;
        Fp x15414 = x15411 + x15413;
        Fp x15415 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x15416 = x15415 * x16;
        Fp x15417 = x15414 + x15416;
        Fp x15418 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x15419 = x15418 * x32;
        Fp x15420 = x15417 + x15419;
        Fp x15421 = x15234 - x15420;
        Fp x15422 = x15421 * x33;
        if (x15422 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:51");
        {
          Fp x15423 = (x15090 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x15423;
          Fp x15424 = x15090 - x71;
          Fp x15425 = (x15424 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x15425;
          Fp x15426 = x15090 - x1;
          Fp x15427 = (x15426 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x15427;
          Fp x15428 = x15090 - x2;
          Fp x15429 = (x15428 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x15429;
        }
        Fp x15430 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x15431 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x15432 = x15431 * x1;
        Fp x15433 = x15430 + x15432;
        Fp x15434 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x15435 = x15434 * x2;
        Fp x15436 = x15433 + x15435;
        Fp x15437 = x15436 - x15090;
        if (x15437 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x15438 = x15132 + x17;
        Fp x15439 = x15438 - x15326;
        Fp x15440 = x15228 + x35;
        Fp x15441 = x15440 - x15420;
        {
          Fp x15442 = Fp(x15439.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x15442;
          Fp x15443 = x15439 - x15442;
          Fp x15444 = x15443 * x26;
          Fp x15445 = Fp(x15444.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x15445;
          Fp x15446 = x15444 - x15445;
          Fp x15447 = x15446 * x26;
          Fp x15448 = Fp(x15447.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x15448;
          Fp x15449 = x15447 - x15448;
          Fp x15450 = x15449 * x26;
          Fp x15451 = Fp(x15450.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x15451;
          Fp x15452 = x15450 - x15451;
          Fp x15453 = x15452 * x26;
          Fp x15454 = Fp(x15453.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x15454;
          Fp x15455 = x15453 - x15454;
          Fp x15456 = x15455 * x26;
          Fp x15457 = Fp(x15456.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x15457;
          Fp x15458 = x15456 - x15457;
          Fp x15459 = x15458 * x26;
          Fp x15460 = Fp(x15459.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x15460;
          Fp x15461 = x15459 - x15460;
          Fp x15462 = x15461 * x26;
          Fp x15463 = Fp(x15462.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x15463;
          Fp x15464 = x15462 - x15463;
          Fp x15465 = x15464 * x26;
          Fp x15466 = Fp(x15465.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x15466;
          Fp x15467 = x15465 - x15466;
          Fp x15468 = x15467 * x26;
          Fp x15469 = Fp(x15468.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x15469;
          Fp x15470 = x15468 - x15469;
          Fp x15471 = x15470 * x26;
          Fp x15472 = Fp(x15471.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x15472;
          Fp x15473 = x15471 - x15472;
          Fp x15474 = x15473 * x26;
          Fp x15475 = Fp(x15474.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x15475;
          Fp x15476 = x15474 - x15475;
          Fp x15477 = x15476 * x26;
          Fp x15478 = Fp(x15477.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x15478;
          Fp x15479 = x15477 - x15478;
          Fp x15480 = x15479 * x26;
          Fp x15481 = Fp(x15480.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x15481;
          Fp x15482 = x15480 - x15481;
          Fp x15483 = x15482 * x26;
          Fp x15484 = Fp(x15483.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x15484;
          Fp x15485 = x15483 - x15484;
          Fp x15486 = x15485 * x26;
          Fp x15487 = Fp(x15486.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x15487;
        }
        Fp x15488 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x15489 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x15490 = x15489 * x1;
        Fp x15491 = x15488 + x15490;
        Fp x15492 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x15493 = x15492 * x3;
        Fp x15494 = x15491 + x15493;
        Fp x15495 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x15496 = x15495 * x6;
        Fp x15497 = x15494 + x15496;
        Fp x15498 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x15499 = x15498 * x11;
        Fp x15500 = x15497 + x15499;
        Fp x15501 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x15502 = x15501 * x27;
        Fp x15503 = x15500 + x15502;
        Fp x15504 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x15505 = x15504 * x12;
        Fp x15506 = x15503 + x15505;
        Fp x15507 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x15508 = x15507 * x28;
        Fp x15509 = x15506 + x15508;
        Fp x15510 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x15511 = x15510 * x13;
        Fp x15512 = x15509 + x15511;
        Fp x15513 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x15514 = x15513 * x29;
        Fp x15515 = x15512 + x15514;
        Fp x15516 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x15517 = x15516 * x14;
        Fp x15518 = x15515 + x15517;
        Fp x15519 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x15520 = x15519 * x30;
        Fp x15521 = x15518 + x15520;
        Fp x15522 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x15523 = x15522 * x15;
        Fp x15524 = x15521 + x15523;
        Fp x15525 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x15526 = x15525 * x31;
        Fp x15527 = x15524 + x15526;
        Fp x15528 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x15529 = x15528 * x16;
        Fp x15530 = x15527 + x15529;
        Fp x15531 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x15532 = x15531 * x32;
        Fp x15533 = x15530 + x15532;
        Fp x15534 = x15439 - x15533;
        Fp x15535 = x15534 * x33;
        args[2][108 * steps + cycle] = x15535;
        Fp x15536 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x15537 = x15441 + x15536;
        {
          Fp x15538 = Fp(x15537.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x15538;
          Fp x15539 = x15537 - x15538;
          Fp x15540 = x15539 * x26;
          Fp x15541 = Fp(x15540.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x15541;
          Fp x15542 = x15540 - x15541;
          Fp x15543 = x15542 * x26;
          Fp x15544 = Fp(x15543.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x15544;
          Fp x15545 = x15543 - x15544;
          Fp x15546 = x15545 * x26;
          Fp x15547 = Fp(x15546.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x15547;
          Fp x15548 = x15546 - x15547;
          Fp x15549 = x15548 * x26;
          Fp x15550 = Fp(x15549.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x15550;
          Fp x15551 = x15549 - x15550;
          Fp x15552 = x15551 * x26;
          Fp x15553 = Fp(x15552.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x15553;
          Fp x15554 = x15552 - x15553;
          Fp x15555 = x15554 * x26;
          Fp x15556 = Fp(x15555.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x15556;
          Fp x15557 = x15555 - x15556;
          Fp x15558 = x15557 * x26;
          Fp x15559 = Fp(x15558.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x15559;
          Fp x15560 = x15558 - x15559;
          Fp x15561 = x15560 * x26;
          Fp x15562 = Fp(x15561.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x15562;
          Fp x15563 = x15561 - x15562;
          Fp x15564 = x15563 * x26;
          Fp x15565 = Fp(x15564.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x15565;
          Fp x15566 = x15564 - x15565;
          Fp x15567 = x15566 * x26;
          Fp x15568 = Fp(x15567.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x15568;
          Fp x15569 = x15567 - x15568;
          Fp x15570 = x15569 * x26;
          Fp x15571 = Fp(x15570.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x15571;
          Fp x15572 = x15570 - x15571;
          Fp x15573 = x15572 * x26;
          Fp x15574 = Fp(x15573.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x15574;
          Fp x15575 = x15573 - x15574;
          Fp x15576 = x15575 * x26;
          Fp x15577 = Fp(x15576.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x15577;
          Fp x15578 = x15576 - x15577;
          Fp x15579 = x15578 * x26;
          Fp x15580 = Fp(x15579.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x15580;
          Fp x15581 = x15579 - x15580;
          Fp x15582 = x15581 * x26;
          Fp x15583 = Fp(x15582.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x15583;
        }
        Fp x15584 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x15585 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x15586 = x15585 * x1;
        Fp x15587 = x15584 + x15586;
        Fp x15588 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x15589 = x15588 * x3;
        Fp x15590 = x15587 + x15589;
        Fp x15591 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x15592 = x15591 * x6;
        Fp x15593 = x15590 + x15592;
        Fp x15594 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x15595 = x15594 * x11;
        Fp x15596 = x15593 + x15595;
        Fp x15597 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x15598 = x15597 * x27;
        Fp x15599 = x15596 + x15598;
        Fp x15600 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x15601 = x15600 * x12;
        Fp x15602 = x15599 + x15601;
        Fp x15603 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x15604 = x15603 * x28;
        Fp x15605 = x15602 + x15604;
        Fp x15606 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x15607 = x15606 * x13;
        Fp x15608 = x15605 + x15607;
        Fp x15609 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x15610 = x15609 * x29;
        Fp x15611 = x15608 + x15610;
        Fp x15612 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x15613 = x15612 * x14;
        Fp x15614 = x15611 + x15613;
        Fp x15615 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x15616 = x15615 * x30;
        Fp x15617 = x15614 + x15616;
        Fp x15618 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x15619 = x15618 * x15;
        Fp x15620 = x15617 + x15619;
        Fp x15621 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x15622 = x15621 * x31;
        Fp x15623 = x15620 + x15622;
        Fp x15624 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x15625 = x15624 * x16;
        Fp x15626 = x15623 + x15625;
        Fp x15627 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x15628 = x15627 * x32;
        Fp x15629 = x15626 + x15628;
        Fp x15630 = x15537 - x15629;
        Fp x15631 = x15630 * x33;
        args[2][109 * steps + cycle] = x15631;
        {
          {
            Fp x15632 = (x15533 == 0) ? Fp(1) : Fp(0);
            Fp x15633 = x71 - x15632;
            args[2][114 * steps + cycle] = x15633;
            Fp x15634 = inv(x15533);
            args[2][115 * steps + cycle] = x15634;
          }
          Fp x15635 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x15636 = x15533 * x15635;
          Fp x15637 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x15638 = x15636 - x15637;
          if (x15638 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x15639 = x71 - x15637;
          Fp x15640 = x15639 * x15533;
          if (x15640 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x15641 = (x15629 == 0) ? Fp(1) : Fp(0);
            Fp x15642 = x71 - x15641;
            args[2][116 * steps + cycle] = x15642;
            Fp x15643 = inv(x15629);
            args[2][117 * steps + cycle] = x15643;
          }
          Fp x15644 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x15645 = x15629 * x15644;
          Fp x15646 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x15647 = x15645 - x15646;
          if (x15647 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x15648 = x71 - x15646;
          Fp x15649 = x15648 * x15629;
          if (x15649 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x15650 = x15639 * x15648;
          Fp x15651 = x71 - x15650;
          args[2][111 * steps + cycle] = x15651;
          Fp x15652 = x71 - x15418;
          Fp x15653 = x15226 * x15652;
          Fp x15654 = x71 - x15627;
          Fp x15655 = x15653 * x15654;
          Fp x15656 = x71 - x15226;
          Fp x15657 = x15656 * x15418;
          Fp x15658 = x15657 * x15627;
          Fp x15659 = x15655 + x15658;
          args[2][112 * steps + cycle] = x15659;
          Fp x15660 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x15661 = x15660 + x15627;
          Fp x15662 = x15660 * x1;
          Fp x15663 = x15662 * x15627;
          Fp x15664 = x15661 - x15663;
          args[2][113 * steps + cycle] = x15664;
        }
        args[2][100 * steps + cycle] = x15533;
        args[2][101 * steps + cycle] = x15629;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x15665 = x14387 + x3;
        args[2][104 * steps + cycle] = x15665;
        args[2][105 * steps + cycle] = x14409;
        Fp x15666 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x15667 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x15668 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x15669 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x15670 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x15671 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14409;
        host_args[2] = x14387;
        host_args[3] = x15228;
        host_args[4] = x15132;
        host_args[5] = x15420;
        host_args[6] = x15326;
        host_args[7] = x15629;
        host_args[8] = x15533;
        host_args[9] = x15666;
        host_args[10] = x15667;
        host_args[11] = x15668;
        host_args[12] = x15669;
        host_args[13] = x15670;
        host_args[14] = x15671;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x15672 = args[2][74 * steps + ((cycle - 1) & mask)];
      if (x15672 != 0) {
        {
          Fp x15673 = Fp(x14362.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x15673;
          Fp x15674 = x14362 - x15673;
          Fp x15675 = x15674 * x26;
          Fp x15676 = Fp(x15675.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x15676;
          Fp x15677 = x15675 - x15676;
          Fp x15678 = x15677 * x26;
          Fp x15679 = Fp(x15678.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x15679;
          Fp x15680 = x15678 - x15679;
          Fp x15681 = x15680 * x26;
          Fp x15682 = Fp(x15681.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x15682;
          Fp x15683 = x15681 - x15682;
          Fp x15684 = x15683 * x26;
          Fp x15685 = Fp(x15684.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x15685;
          Fp x15686 = x15684 - x15685;
          Fp x15687 = x15686 * x26;
          Fp x15688 = Fp(x15687.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x15688;
          Fp x15689 = x15687 - x15688;
          Fp x15690 = x15689 * x26;
          Fp x15691 = Fp(x15690.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x15691;
          Fp x15692 = x15690 - x15691;
          Fp x15693 = x15692 * x26;
          Fp x15694 = Fp(x15693.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x15694;
          Fp x15695 = x15693 - x15694;
          Fp x15696 = x15695 * x26;
          Fp x15697 = Fp(x15696.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x15697;
          Fp x15698 = x15696 - x15697;
          Fp x15699 = x15698 * x26;
          Fp x15700 = Fp(x15699.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x15700;
          Fp x15701 = x15699 - x15700;
          Fp x15702 = x15701 * x26;
          Fp x15703 = Fp(x15702.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x15703;
          Fp x15704 = x15702 - x15703;
          Fp x15705 = x15704 * x26;
          Fp x15706 = Fp(x15705.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x15706;
          Fp x15707 = x15705 - x15706;
          Fp x15708 = x15707 * x26;
          Fp x15709 = Fp(x15708.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x15709;
          Fp x15710 = x15708 - x15709;
          Fp x15711 = x15710 * x26;
          Fp x15712 = Fp(x15711.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x15712;
          Fp x15713 = x15711 - x15712;
          Fp x15714 = x15713 * x26;
          Fp x15715 = Fp(x15714.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x15715;
          Fp x15716 = x15714 - x15715;
          Fp x15717 = x15716 * x26;
          Fp x15718 = Fp(x15717.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x15718;
        }
        Fp x15719 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x15720 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x15721 = x15720 * x1;
        Fp x15722 = x15719 + x15721;
        Fp x15723 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x15724 = x15723 * x3;
        Fp x15725 = x15722 + x15724;
        Fp x15726 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x15727 = x15726 * x6;
        Fp x15728 = x15725 + x15727;
        Fp x15729 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x15730 = x15729 * x11;
        Fp x15731 = x15728 + x15730;
        Fp x15732 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x15733 = x15732 * x27;
        Fp x15734 = x15731 + x15733;
        Fp x15735 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x15736 = x15735 * x12;
        Fp x15737 = x15734 + x15736;
        Fp x15738 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x15739 = x15738 * x28;
        Fp x15740 = x15737 + x15739;
        Fp x15741 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x15742 = x15741 * x13;
        Fp x15743 = x15740 + x15742;
        Fp x15744 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x15745 = x15744 * x29;
        Fp x15746 = x15743 + x15745;
        Fp x15747 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x15748 = x15747 * x14;
        Fp x15749 = x15746 + x15748;
        Fp x15750 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x15751 = x15750 * x30;
        Fp x15752 = x15749 + x15751;
        Fp x15753 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x15754 = x15753 * x15;
        Fp x15755 = x15752 + x15754;
        Fp x15756 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x15757 = x15756 * x31;
        Fp x15758 = x15755 + x15757;
        Fp x15759 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x15760 = x15759 * x16;
        Fp x15761 = x15758 + x15760;
        Fp x15762 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x15763 = x15762 * x32;
        Fp x15764 = x15761 + x15763;
        Fp x15765 = x14362 - x15764;
        Fp x15766 = x15765 * x33;
        args[2][106 * steps + cycle] = x15766;
        Fp x15767 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x15768 = x14363 + x15767;
        {
          Fp x15769 = Fp(x15768.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x15769;
          Fp x15770 = x15768 - x15769;
          Fp x15771 = x15770 * x26;
          Fp x15772 = Fp(x15771.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x15772;
          Fp x15773 = x15771 - x15772;
          Fp x15774 = x15773 * x26;
          Fp x15775 = Fp(x15774.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x15775;
          Fp x15776 = x15774 - x15775;
          Fp x15777 = x15776 * x26;
          Fp x15778 = Fp(x15777.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x15778;
          Fp x15779 = x15777 - x15778;
          Fp x15780 = x15779 * x26;
          Fp x15781 = Fp(x15780.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x15781;
          Fp x15782 = x15780 - x15781;
          Fp x15783 = x15782 * x26;
          Fp x15784 = Fp(x15783.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x15784;
          Fp x15785 = x15783 - x15784;
          Fp x15786 = x15785 * x26;
          Fp x15787 = Fp(x15786.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x15787;
          Fp x15788 = x15786 - x15787;
          Fp x15789 = x15788 * x26;
          Fp x15790 = Fp(x15789.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x15790;
          Fp x15791 = x15789 - x15790;
          Fp x15792 = x15791 * x26;
          Fp x15793 = Fp(x15792.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x15793;
          Fp x15794 = x15792 - x15793;
          Fp x15795 = x15794 * x26;
          Fp x15796 = Fp(x15795.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x15796;
          Fp x15797 = x15795 - x15796;
          Fp x15798 = x15797 * x26;
          Fp x15799 = Fp(x15798.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x15799;
          Fp x15800 = x15798 - x15799;
          Fp x15801 = x15800 * x26;
          Fp x15802 = Fp(x15801.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x15802;
          Fp x15803 = x15801 - x15802;
          Fp x15804 = x15803 * x26;
          Fp x15805 = Fp(x15804.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x15805;
          Fp x15806 = x15804 - x15805;
          Fp x15807 = x15806 * x26;
          Fp x15808 = Fp(x15807.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x15808;
          Fp x15809 = x15807 - x15808;
          Fp x15810 = x15809 * x26;
          Fp x15811 = Fp(x15810.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x15811;
          Fp x15812 = x15810 - x15811;
          Fp x15813 = x15812 * x26;
          Fp x15814 = Fp(x15813.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x15814;
        }
        Fp x15815 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x15816 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x15817 = x15816 * x1;
        Fp x15818 = x15815 + x15817;
        Fp x15819 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x15820 = x15819 * x3;
        Fp x15821 = x15818 + x15820;
        Fp x15822 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x15823 = x15822 * x6;
        Fp x15824 = x15821 + x15823;
        Fp x15825 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x15826 = x15825 * x11;
        Fp x15827 = x15824 + x15826;
        Fp x15828 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x15829 = x15828 * x27;
        Fp x15830 = x15827 + x15829;
        Fp x15831 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x15832 = x15831 * x12;
        Fp x15833 = x15830 + x15832;
        Fp x15834 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x15835 = x15834 * x28;
        Fp x15836 = x15833 + x15835;
        Fp x15837 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x15838 = x15837 * x13;
        Fp x15839 = x15836 + x15838;
        Fp x15840 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x15841 = x15840 * x29;
        Fp x15842 = x15839 + x15841;
        Fp x15843 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x15844 = x15843 * x14;
        Fp x15845 = x15842 + x15844;
        Fp x15846 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x15847 = x15846 * x30;
        Fp x15848 = x15845 + x15847;
        Fp x15849 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x15850 = x15849 * x15;
        Fp x15851 = x15848 + x15850;
        Fp x15852 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x15853 = x15852 * x31;
        Fp x15854 = x15851 + x15853;
        Fp x15855 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x15856 = x15855 * x16;
        Fp x15857 = x15854 + x15856;
        Fp x15858 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x15859 = x15858 * x32;
        Fp x15860 = x15857 + x15859;
        Fp x15861 = x15768 - x15860;
        Fp x15862 = x15861 * x33;
        args[2][107 * steps + cycle] = x15862;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x15863 = host_outs[0];
          Fp x15864 = host_outs[1];
          args[2][129 * steps + cycle] = x15863;
          args[2][130 * steps + cycle] = x15864;
        }
        Fp x15865 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x15866 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x15867 = Fp(x15865.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x15867;
          Fp x15868 = x15865 - x15867;
          Fp x15869 = x15868 * x26;
          Fp x15870 = Fp(x15869.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x15870;
          Fp x15871 = x15869 - x15870;
          Fp x15872 = x15871 * x26;
          Fp x15873 = Fp(x15872.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x15873;
          Fp x15874 = x15872 - x15873;
          Fp x15875 = x15874 * x26;
          Fp x15876 = Fp(x15875.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x15876;
          Fp x15877 = x15875 - x15876;
          Fp x15878 = x15877 * x26;
          Fp x15879 = Fp(x15878.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x15879;
          Fp x15880 = x15878 - x15879;
          Fp x15881 = x15880 * x26;
          Fp x15882 = Fp(x15881.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x15882;
          Fp x15883 = x15881 - x15882;
          Fp x15884 = x15883 * x26;
          Fp x15885 = Fp(x15884.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x15885;
          Fp x15886 = x15884 - x15885;
          Fp x15887 = x15886 * x26;
          Fp x15888 = Fp(x15887.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x15888;
          Fp x15889 = x15887 - x15888;
          Fp x15890 = x15889 * x26;
          Fp x15891 = Fp(x15890.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x15891;
          Fp x15892 = x15890 - x15891;
          Fp x15893 = x15892 * x26;
          Fp x15894 = Fp(x15893.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x15894;
          Fp x15895 = x15893 - x15894;
          Fp x15896 = x15895 * x26;
          Fp x15897 = Fp(x15896.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x15897;
          Fp x15898 = x15896 - x15897;
          Fp x15899 = x15898 * x26;
          Fp x15900 = Fp(x15899.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x15900;
          Fp x15901 = x15899 - x15900;
          Fp x15902 = x15901 * x26;
          Fp x15903 = Fp(x15902.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x15903;
          Fp x15904 = x15902 - x15903;
          Fp x15905 = x15904 * x26;
          Fp x15906 = Fp(x15905.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x15906;
          Fp x15907 = x15905 - x15906;
          Fp x15908 = x15907 * x26;
          Fp x15909 = Fp(x15908.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x15909;
          Fp x15910 = x15908 - x15909;
          Fp x15911 = x15910 * x26;
          Fp x15912 = Fp(x15911.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x15912;
        }
        Fp x15913 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x15914 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x15915 = x15914 * x1;
        Fp x15916 = x15913 + x15915;
        Fp x15917 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x15918 = x15917 * x3;
        Fp x15919 = x15916 + x15918;
        Fp x15920 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x15921 = x15920 * x6;
        Fp x15922 = x15919 + x15921;
        Fp x15923 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x15924 = x15923 * x11;
        Fp x15925 = x15922 + x15924;
        Fp x15926 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x15927 = x15926 * x27;
        Fp x15928 = x15925 + x15927;
        Fp x15929 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x15930 = x15929 * x12;
        Fp x15931 = x15928 + x15930;
        Fp x15932 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x15933 = x15932 * x28;
        Fp x15934 = x15931 + x15933;
        Fp x15935 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x15936 = x15935 * x13;
        Fp x15937 = x15934 + x15936;
        Fp x15938 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x15939 = x15938 * x29;
        Fp x15940 = x15937 + x15939;
        Fp x15941 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x15942 = x15941 * x14;
        Fp x15943 = x15940 + x15942;
        Fp x15944 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x15945 = x15944 * x30;
        Fp x15946 = x15943 + x15945;
        Fp x15947 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x15948 = x15947 * x15;
        Fp x15949 = x15946 + x15948;
        Fp x15950 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x15951 = x15950 * x31;
        Fp x15952 = x15949 + x15951;
        Fp x15953 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x15954 = x15953 * x16;
        Fp x15955 = x15952 + x15954;
        Fp x15956 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x15957 = x15956 * x32;
        Fp x15958 = x15955 + x15957;
        Fp x15959 = x15865 - x15958;
        Fp x15960 = x15959 * x33;
        if (x15960 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:52");
        {
          Fp x15961 = Fp(x15866.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x15961;
          Fp x15962 = x15866 - x15961;
          Fp x15963 = x15962 * x26;
          Fp x15964 = Fp(x15963.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x15964;
          Fp x15965 = x15963 - x15964;
          Fp x15966 = x15965 * x26;
          Fp x15967 = Fp(x15966.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x15967;
          Fp x15968 = x15966 - x15967;
          Fp x15969 = x15968 * x26;
          Fp x15970 = Fp(x15969.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x15970;
          Fp x15971 = x15969 - x15970;
          Fp x15972 = x15971 * x26;
          Fp x15973 = Fp(x15972.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x15973;
          Fp x15974 = x15972 - x15973;
          Fp x15975 = x15974 * x26;
          Fp x15976 = Fp(x15975.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x15976;
          Fp x15977 = x15975 - x15976;
          Fp x15978 = x15977 * x26;
          Fp x15979 = Fp(x15978.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x15979;
          Fp x15980 = x15978 - x15979;
          Fp x15981 = x15980 * x26;
          Fp x15982 = Fp(x15981.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x15982;
          Fp x15983 = x15981 - x15982;
          Fp x15984 = x15983 * x26;
          Fp x15985 = Fp(x15984.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x15985;
          Fp x15986 = x15984 - x15985;
          Fp x15987 = x15986 * x26;
          Fp x15988 = Fp(x15987.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x15988;
          Fp x15989 = x15987 - x15988;
          Fp x15990 = x15989 * x26;
          Fp x15991 = Fp(x15990.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x15991;
          Fp x15992 = x15990 - x15991;
          Fp x15993 = x15992 * x26;
          Fp x15994 = Fp(x15993.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x15994;
          Fp x15995 = x15993 - x15994;
          Fp x15996 = x15995 * x26;
          Fp x15997 = Fp(x15996.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x15997;
          Fp x15998 = x15996 - x15997;
          Fp x15999 = x15998 * x26;
          Fp x16000 = Fp(x15999.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x16000;
          Fp x16001 = x15999 - x16000;
          Fp x16002 = x16001 * x26;
          Fp x16003 = Fp(x16002.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x16003;
          Fp x16004 = x16002 - x16003;
          Fp x16005 = x16004 * x26;
          Fp x16006 = Fp(x16005.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x16006;
        }
        Fp x16007 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x16008 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x16009 = x16008 * x1;
        Fp x16010 = x16007 + x16009;
        Fp x16011 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x16012 = x16011 * x3;
        Fp x16013 = x16010 + x16012;
        Fp x16014 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x16015 = x16014 * x6;
        Fp x16016 = x16013 + x16015;
        Fp x16017 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x16018 = x16017 * x11;
        Fp x16019 = x16016 + x16018;
        Fp x16020 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x16021 = x16020 * x27;
        Fp x16022 = x16019 + x16021;
        Fp x16023 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x16024 = x16023 * x12;
        Fp x16025 = x16022 + x16024;
        Fp x16026 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x16027 = x16026 * x28;
        Fp x16028 = x16025 + x16027;
        Fp x16029 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x16030 = x16029 * x13;
        Fp x16031 = x16028 + x16030;
        Fp x16032 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x16033 = x16032 * x29;
        Fp x16034 = x16031 + x16033;
        Fp x16035 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x16036 = x16035 * x14;
        Fp x16037 = x16034 + x16036;
        Fp x16038 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x16039 = x16038 * x30;
        Fp x16040 = x16037 + x16039;
        Fp x16041 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x16042 = x16041 * x15;
        Fp x16043 = x16040 + x16042;
        Fp x16044 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x16045 = x16044 * x31;
        Fp x16046 = x16043 + x16045;
        Fp x16047 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x16048 = x16047 * x16;
        Fp x16049 = x16046 + x16048;
        Fp x16050 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x16051 = x16050 * x32;
        Fp x16052 = x16049 + x16051;
        Fp x16053 = x15866 - x16052;
        Fp x16054 = x16053 * x33;
        if (x16054 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:52");
        {
          Fp x16055 = (x15722 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x16055;
          Fp x16056 = x15722 - x71;
          Fp x16057 = (x16056 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x16057;
          Fp x16058 = x15722 - x1;
          Fp x16059 = (x16058 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x16059;
          Fp x16060 = x15722 - x2;
          Fp x16061 = (x16060 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x16061;
        }
        Fp x16062 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x16063 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x16064 = x16063 * x1;
        Fp x16065 = x16062 + x16064;
        Fp x16066 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x16067 = x16066 * x2;
        Fp x16068 = x16065 + x16067;
        Fp x16069 = x16068 - x15722;
        if (x16069 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x16070 = x15719 + x15913;
        Fp x16071 = x15719 * x1;
        Fp x16072 = x16071 * x15913;
        Fp x16073 = x16070 - x16072;
        Fp x16074 = x15720 + x15914;
        Fp x16075 = x15721 * x15914;
        Fp x16076 = x16074 - x16075;
        Fp x16077 = x16076 * x1;
        Fp x16078 = x16073 + x16077;
        Fp x16079 = x15723 + x15917;
        Fp x16080 = x15723 * x1;
        Fp x16081 = x16080 * x15917;
        Fp x16082 = x16079 - x16081;
        Fp x16083 = x16082 * x3;
        Fp x16084 = x16078 + x16083;
        Fp x16085 = x15726 + x15920;
        Fp x16086 = x15726 * x1;
        Fp x16087 = x16086 * x15920;
        Fp x16088 = x16085 - x16087;
        Fp x16089 = x16088 * x6;
        Fp x16090 = x16084 + x16089;
        Fp x16091 = x15729 + x15923;
        Fp x16092 = x15729 * x1;
        Fp x16093 = x16092 * x15923;
        Fp x16094 = x16091 - x16093;
        Fp x16095 = x16094 * x11;
        Fp x16096 = x16090 + x16095;
        Fp x16097 = x15732 + x15926;
        Fp x16098 = x15732 * x1;
        Fp x16099 = x16098 * x15926;
        Fp x16100 = x16097 - x16099;
        Fp x16101 = x16100 * x27;
        Fp x16102 = x16096 + x16101;
        Fp x16103 = x15735 + x15929;
        Fp x16104 = x15735 * x1;
        Fp x16105 = x16104 * x15929;
        Fp x16106 = x16103 - x16105;
        Fp x16107 = x16106 * x12;
        Fp x16108 = x16102 + x16107;
        Fp x16109 = x15738 + x15932;
        Fp x16110 = x15738 * x1;
        Fp x16111 = x16110 * x15932;
        Fp x16112 = x16109 - x16111;
        Fp x16113 = x16112 * x28;
        Fp x16114 = x16108 + x16113;
        Fp x16115 = x15741 + x15935;
        Fp x16116 = x15741 * x1;
        Fp x16117 = x16116 * x15935;
        Fp x16118 = x16115 - x16117;
        Fp x16119 = x16118 * x13;
        Fp x16120 = x16114 + x16119;
        Fp x16121 = x15744 + x15938;
        Fp x16122 = x15744 * x1;
        Fp x16123 = x16122 * x15938;
        Fp x16124 = x16121 - x16123;
        Fp x16125 = x16124 * x29;
        Fp x16126 = x16120 + x16125;
        Fp x16127 = x15747 + x15941;
        Fp x16128 = x15747 * x1;
        Fp x16129 = x16128 * x15941;
        Fp x16130 = x16127 - x16129;
        Fp x16131 = x16130 * x14;
        Fp x16132 = x16126 + x16131;
        Fp x16133 = x15750 + x15944;
        Fp x16134 = x15750 * x1;
        Fp x16135 = x16134 * x15944;
        Fp x16136 = x16133 - x16135;
        Fp x16137 = x16136 * x30;
        Fp x16138 = x16132 + x16137;
        Fp x16139 = x15753 + x15947;
        Fp x16140 = x15753 * x1;
        Fp x16141 = x16140 * x15947;
        Fp x16142 = x16139 - x16141;
        Fp x16143 = x16142 * x15;
        Fp x16144 = x16138 + x16143;
        Fp x16145 = x15756 + x15950;
        Fp x16146 = x15756 * x1;
        Fp x16147 = x16146 * x15950;
        Fp x16148 = x16145 - x16147;
        Fp x16149 = x16148 * x31;
        Fp x16150 = x16144 + x16149;
        Fp x16151 = x15759 + x15953;
        Fp x16152 = x15759 * x1;
        Fp x16153 = x16152 * x15953;
        Fp x16154 = x16151 - x16153;
        Fp x16155 = x16154 * x16;
        Fp x16156 = x16150 + x16155;
        Fp x16157 = x15762 + x15956;
        Fp x16158 = x15762 * x1;
        Fp x16159 = x16158 * x15956;
        Fp x16160 = x16157 - x16159;
        Fp x16161 = x16160 * x32;
        Fp x16162 = x16156 + x16161;
        Fp x16163 = x15815 + x16007;
        Fp x16164 = x15815 * x1;
        Fp x16165 = x16164 * x16007;
        Fp x16166 = x16163 - x16165;
        Fp x16167 = x15816 + x16008;
        Fp x16168 = x15817 * x16008;
        Fp x16169 = x16167 - x16168;
        Fp x16170 = x16169 * x1;
        Fp x16171 = x16166 + x16170;
        Fp x16172 = x15819 + x16011;
        Fp x16173 = x15819 * x1;
        Fp x16174 = x16173 * x16011;
        Fp x16175 = x16172 - x16174;
        Fp x16176 = x16175 * x3;
        Fp x16177 = x16171 + x16176;
        Fp x16178 = x15822 + x16014;
        Fp x16179 = x15822 * x1;
        Fp x16180 = x16179 * x16014;
        Fp x16181 = x16178 - x16180;
        Fp x16182 = x16181 * x6;
        Fp x16183 = x16177 + x16182;
        Fp x16184 = x15825 + x16017;
        Fp x16185 = x15825 * x1;
        Fp x16186 = x16185 * x16017;
        Fp x16187 = x16184 - x16186;
        Fp x16188 = x16187 * x11;
        Fp x16189 = x16183 + x16188;
        Fp x16190 = x15828 + x16020;
        Fp x16191 = x15828 * x1;
        Fp x16192 = x16191 * x16020;
        Fp x16193 = x16190 - x16192;
        Fp x16194 = x16193 * x27;
        Fp x16195 = x16189 + x16194;
        Fp x16196 = x15831 + x16023;
        Fp x16197 = x15831 * x1;
        Fp x16198 = x16197 * x16023;
        Fp x16199 = x16196 - x16198;
        Fp x16200 = x16199 * x12;
        Fp x16201 = x16195 + x16200;
        Fp x16202 = x15834 + x16026;
        Fp x16203 = x15834 * x1;
        Fp x16204 = x16203 * x16026;
        Fp x16205 = x16202 - x16204;
        Fp x16206 = x16205 * x28;
        Fp x16207 = x16201 + x16206;
        Fp x16208 = x15837 + x16029;
        Fp x16209 = x15837 * x1;
        Fp x16210 = x16209 * x16029;
        Fp x16211 = x16208 - x16210;
        Fp x16212 = x16211 * x13;
        Fp x16213 = x16207 + x16212;
        Fp x16214 = x15840 + x16032;
        Fp x16215 = x15840 * x1;
        Fp x16216 = x16215 * x16032;
        Fp x16217 = x16214 - x16216;
        Fp x16218 = x16217 * x29;
        Fp x16219 = x16213 + x16218;
        Fp x16220 = x15843 + x16035;
        Fp x16221 = x15843 * x1;
        Fp x16222 = x16221 * x16035;
        Fp x16223 = x16220 - x16222;
        Fp x16224 = x16223 * x14;
        Fp x16225 = x16219 + x16224;
        Fp x16226 = x15846 + x16038;
        Fp x16227 = x15846 * x1;
        Fp x16228 = x16227 * x16038;
        Fp x16229 = x16226 - x16228;
        Fp x16230 = x16229 * x30;
        Fp x16231 = x16225 + x16230;
        Fp x16232 = x15849 + x16041;
        Fp x16233 = x15849 * x1;
        Fp x16234 = x16233 * x16041;
        Fp x16235 = x16232 - x16234;
        Fp x16236 = x16235 * x15;
        Fp x16237 = x16231 + x16236;
        Fp x16238 = x15852 + x16044;
        Fp x16239 = x15852 * x1;
        Fp x16240 = x16239 * x16044;
        Fp x16241 = x16238 - x16240;
        Fp x16242 = x16241 * x31;
        Fp x16243 = x16237 + x16242;
        Fp x16244 = x15855 + x16047;
        Fp x16245 = x15855 * x1;
        Fp x16246 = x16245 * x16047;
        Fp x16247 = x16244 - x16246;
        Fp x16248 = x16247 * x16;
        Fp x16249 = x16243 + x16248;
        Fp x16250 = x15858 + x16050;
        Fp x16251 = x15858 * x1;
        Fp x16252 = x16251 * x16050;
        Fp x16253 = x16250 - x16252;
        Fp x16254 = x16253 * x32;
        Fp x16255 = x16249 + x16254;
        {
          Fp x16256 = Fp(x16162.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x16256;
          Fp x16257 = x16162 - x16256;
          Fp x16258 = x16257 * x26;
          Fp x16259 = Fp(x16258.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x16259;
          Fp x16260 = x16258 - x16259;
          Fp x16261 = x16260 * x26;
          Fp x16262 = Fp(x16261.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x16262;
          Fp x16263 = x16261 - x16262;
          Fp x16264 = x16263 * x26;
          Fp x16265 = Fp(x16264.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x16265;
          Fp x16266 = x16264 - x16265;
          Fp x16267 = x16266 * x26;
          Fp x16268 = Fp(x16267.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x16268;
          Fp x16269 = x16267 - x16268;
          Fp x16270 = x16269 * x26;
          Fp x16271 = Fp(x16270.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x16271;
          Fp x16272 = x16270 - x16271;
          Fp x16273 = x16272 * x26;
          Fp x16274 = Fp(x16273.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x16274;
          Fp x16275 = x16273 - x16274;
          Fp x16276 = x16275 * x26;
          Fp x16277 = Fp(x16276.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x16277;
          Fp x16278 = x16276 - x16277;
          Fp x16279 = x16278 * x26;
          Fp x16280 = Fp(x16279.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x16280;
          Fp x16281 = x16279 - x16280;
          Fp x16282 = x16281 * x26;
          Fp x16283 = Fp(x16282.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x16283;
          Fp x16284 = x16282 - x16283;
          Fp x16285 = x16284 * x26;
          Fp x16286 = Fp(x16285.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x16286;
          Fp x16287 = x16285 - x16286;
          Fp x16288 = x16287 * x26;
          Fp x16289 = Fp(x16288.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x16289;
          Fp x16290 = x16288 - x16289;
          Fp x16291 = x16290 * x26;
          Fp x16292 = Fp(x16291.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x16292;
          Fp x16293 = x16291 - x16292;
          Fp x16294 = x16293 * x26;
          Fp x16295 = Fp(x16294.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x16295;
          Fp x16296 = x16294 - x16295;
          Fp x16297 = x16296 * x26;
          Fp x16298 = Fp(x16297.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x16298;
          Fp x16299 = x16297 - x16298;
          Fp x16300 = x16299 * x26;
          Fp x16301 = Fp(x16300.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x16301;
        }
        Fp x16302 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x16303 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x16304 = x16303 * x1;
        Fp x16305 = x16302 + x16304;
        Fp x16306 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x16307 = x16306 * x3;
        Fp x16308 = x16305 + x16307;
        Fp x16309 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x16310 = x16309 * x6;
        Fp x16311 = x16308 + x16310;
        Fp x16312 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x16313 = x16312 * x11;
        Fp x16314 = x16311 + x16313;
        Fp x16315 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x16316 = x16315 * x27;
        Fp x16317 = x16314 + x16316;
        Fp x16318 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x16319 = x16318 * x12;
        Fp x16320 = x16317 + x16319;
        Fp x16321 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x16322 = x16321 * x28;
        Fp x16323 = x16320 + x16322;
        Fp x16324 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x16325 = x16324 * x13;
        Fp x16326 = x16323 + x16325;
        Fp x16327 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x16328 = x16327 * x29;
        Fp x16329 = x16326 + x16328;
        Fp x16330 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x16331 = x16330 * x14;
        Fp x16332 = x16329 + x16331;
        Fp x16333 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x16334 = x16333 * x30;
        Fp x16335 = x16332 + x16334;
        Fp x16336 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x16337 = x16336 * x15;
        Fp x16338 = x16335 + x16337;
        Fp x16339 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x16340 = x16339 * x31;
        Fp x16341 = x16338 + x16340;
        Fp x16342 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x16343 = x16342 * x16;
        Fp x16344 = x16341 + x16343;
        Fp x16345 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x16346 = x16345 * x32;
        Fp x16347 = x16344 + x16346;
        Fp x16348 = x16162 - x16347;
        Fp x16349 = x16348 * x33;
        args[2][108 * steps + cycle] = x16349;
        Fp x16350 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x16351 = x16255 + x16350;
        {
          Fp x16352 = Fp(x16351.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x16352;
          Fp x16353 = x16351 - x16352;
          Fp x16354 = x16353 * x26;
          Fp x16355 = Fp(x16354.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x16355;
          Fp x16356 = x16354 - x16355;
          Fp x16357 = x16356 * x26;
          Fp x16358 = Fp(x16357.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x16358;
          Fp x16359 = x16357 - x16358;
          Fp x16360 = x16359 * x26;
          Fp x16361 = Fp(x16360.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x16361;
          Fp x16362 = x16360 - x16361;
          Fp x16363 = x16362 * x26;
          Fp x16364 = Fp(x16363.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x16364;
          Fp x16365 = x16363 - x16364;
          Fp x16366 = x16365 * x26;
          Fp x16367 = Fp(x16366.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x16367;
          Fp x16368 = x16366 - x16367;
          Fp x16369 = x16368 * x26;
          Fp x16370 = Fp(x16369.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x16370;
          Fp x16371 = x16369 - x16370;
          Fp x16372 = x16371 * x26;
          Fp x16373 = Fp(x16372.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x16373;
          Fp x16374 = x16372 - x16373;
          Fp x16375 = x16374 * x26;
          Fp x16376 = Fp(x16375.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x16376;
          Fp x16377 = x16375 - x16376;
          Fp x16378 = x16377 * x26;
          Fp x16379 = Fp(x16378.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x16379;
          Fp x16380 = x16378 - x16379;
          Fp x16381 = x16380 * x26;
          Fp x16382 = Fp(x16381.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x16382;
          Fp x16383 = x16381 - x16382;
          Fp x16384 = x16383 * x26;
          Fp x16385 = Fp(x16384.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x16385;
          Fp x16386 = x16384 - x16385;
          Fp x16387 = x16386 * x26;
          Fp x16388 = Fp(x16387.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x16388;
          Fp x16389 = x16387 - x16388;
          Fp x16390 = x16389 * x26;
          Fp x16391 = Fp(x16390.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x16391;
          Fp x16392 = x16390 - x16391;
          Fp x16393 = x16392 * x26;
          Fp x16394 = Fp(x16393.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x16394;
          Fp x16395 = x16393 - x16394;
          Fp x16396 = x16395 * x26;
          Fp x16397 = Fp(x16396.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x16397;
        }
        Fp x16398 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x16399 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x16400 = x16399 * x1;
        Fp x16401 = x16398 + x16400;
        Fp x16402 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x16403 = x16402 * x3;
        Fp x16404 = x16401 + x16403;
        Fp x16405 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x16406 = x16405 * x6;
        Fp x16407 = x16404 + x16406;
        Fp x16408 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x16409 = x16408 * x11;
        Fp x16410 = x16407 + x16409;
        Fp x16411 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x16412 = x16411 * x27;
        Fp x16413 = x16410 + x16412;
        Fp x16414 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x16415 = x16414 * x12;
        Fp x16416 = x16413 + x16415;
        Fp x16417 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x16418 = x16417 * x28;
        Fp x16419 = x16416 + x16418;
        Fp x16420 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x16421 = x16420 * x13;
        Fp x16422 = x16419 + x16421;
        Fp x16423 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x16424 = x16423 * x29;
        Fp x16425 = x16422 + x16424;
        Fp x16426 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x16427 = x16426 * x14;
        Fp x16428 = x16425 + x16427;
        Fp x16429 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x16430 = x16429 * x30;
        Fp x16431 = x16428 + x16430;
        Fp x16432 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x16433 = x16432 * x15;
        Fp x16434 = x16431 + x16433;
        Fp x16435 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x16436 = x16435 * x31;
        Fp x16437 = x16434 + x16436;
        Fp x16438 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x16439 = x16438 * x16;
        Fp x16440 = x16437 + x16439;
        Fp x16441 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x16442 = x16441 * x32;
        Fp x16443 = x16440 + x16442;
        Fp x16444 = x16351 - x16443;
        Fp x16445 = x16444 * x33;
        args[2][109 * steps + cycle] = x16445;
        {
          {
            Fp x16446 = (x16347 == 0) ? Fp(1) : Fp(0);
            Fp x16447 = x71 - x16446;
            args[2][114 * steps + cycle] = x16447;
            Fp x16448 = inv(x16347);
            args[2][115 * steps + cycle] = x16448;
          }
          Fp x16449 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x16450 = x16347 * x16449;
          Fp x16451 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x16452 = x16450 - x16451;
          if (x16452 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x16453 = x71 - x16451;
          Fp x16454 = x16453 * x16347;
          if (x16454 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x16455 = (x16443 == 0) ? Fp(1) : Fp(0);
            Fp x16456 = x71 - x16455;
            args[2][116 * steps + cycle] = x16456;
            Fp x16457 = inv(x16443);
            args[2][117 * steps + cycle] = x16457;
          }
          Fp x16458 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x16459 = x16443 * x16458;
          Fp x16460 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x16461 = x16459 - x16460;
          if (x16461 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x16462 = x71 - x16460;
          Fp x16463 = x16462 * x16443;
          if (x16463 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x16464 = x16453 * x16462;
          Fp x16465 = x71 - x16464;
          args[2][111 * steps + cycle] = x16465;
          Fp x16466 = x71 - x16050;
          Fp x16467 = x15858 * x16466;
          Fp x16468 = x71 - x16441;
          Fp x16469 = x16467 * x16468;
          Fp x16470 = x71 - x15858;
          Fp x16471 = x16470 * x16050;
          Fp x16472 = x16471 * x16441;
          Fp x16473 = x16469 + x16472;
          args[2][112 * steps + cycle] = x16473;
          Fp x16474 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x16475 = x16474 + x16441;
          Fp x16476 = x16474 * x1;
          Fp x16477 = x16476 * x16441;
          Fp x16478 = x16475 - x16477;
          args[2][113 * steps + cycle] = x16478;
        }
        args[2][100 * steps + cycle] = x16347;
        args[2][101 * steps + cycle] = x16443;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x16479 = x14387 + x3;
        args[2][104 * steps + cycle] = x16479;
        args[2][105 * steps + cycle] = x14409;
        Fp x16480 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x16481 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x16482 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x16483 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x16484 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x16485 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14409;
        host_args[2] = x14387;
        host_args[3] = x15860;
        host_args[4] = x15764;
        host_args[5] = x16052;
        host_args[6] = x15958;
        host_args[7] = x16443;
        host_args[8] = x16347;
        host_args[9] = x16480;
        host_args[10] = x16481;
        host_args[11] = x16482;
        host_args[12] = x16483;
        host_args[13] = x16484;
        host_args[14] = x16485;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x16486 = args[2][75 * steps + ((cycle - 1) & mask)];
      if (x16486 != 0) {
        {
          Fp x16487 = Fp(x14362.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x16487;
          Fp x16488 = x14362 - x16487;
          Fp x16489 = x16488 * x26;
          Fp x16490 = Fp(x16489.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x16490;
          Fp x16491 = x16489 - x16490;
          Fp x16492 = x16491 * x26;
          Fp x16493 = Fp(x16492.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x16493;
          Fp x16494 = x16492 - x16493;
          Fp x16495 = x16494 * x26;
          Fp x16496 = Fp(x16495.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x16496;
          Fp x16497 = x16495 - x16496;
          Fp x16498 = x16497 * x26;
          Fp x16499 = Fp(x16498.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x16499;
          Fp x16500 = x16498 - x16499;
          Fp x16501 = x16500 * x26;
          Fp x16502 = Fp(x16501.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x16502;
          Fp x16503 = x16501 - x16502;
          Fp x16504 = x16503 * x26;
          Fp x16505 = Fp(x16504.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x16505;
          Fp x16506 = x16504 - x16505;
          Fp x16507 = x16506 * x26;
          Fp x16508 = Fp(x16507.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x16508;
          Fp x16509 = x16507 - x16508;
          Fp x16510 = x16509 * x26;
          Fp x16511 = Fp(x16510.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x16511;
          Fp x16512 = x16510 - x16511;
          Fp x16513 = x16512 * x26;
          Fp x16514 = Fp(x16513.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x16514;
          Fp x16515 = x16513 - x16514;
          Fp x16516 = x16515 * x26;
          Fp x16517 = Fp(x16516.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x16517;
          Fp x16518 = x16516 - x16517;
          Fp x16519 = x16518 * x26;
          Fp x16520 = Fp(x16519.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x16520;
          Fp x16521 = x16519 - x16520;
          Fp x16522 = x16521 * x26;
          Fp x16523 = Fp(x16522.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x16523;
          Fp x16524 = x16522 - x16523;
          Fp x16525 = x16524 * x26;
          Fp x16526 = Fp(x16525.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x16526;
          Fp x16527 = x16525 - x16526;
          Fp x16528 = x16527 * x26;
          Fp x16529 = Fp(x16528.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x16529;
          Fp x16530 = x16528 - x16529;
          Fp x16531 = x16530 * x26;
          Fp x16532 = Fp(x16531.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x16532;
        }
        Fp x16533 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x16534 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x16535 = x16534 * x1;
        Fp x16536 = x16533 + x16535;
        Fp x16537 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x16538 = x16537 * x3;
        Fp x16539 = x16536 + x16538;
        Fp x16540 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x16541 = x16540 * x6;
        Fp x16542 = x16539 + x16541;
        Fp x16543 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x16544 = x16543 * x11;
        Fp x16545 = x16542 + x16544;
        Fp x16546 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x16547 = x16546 * x27;
        Fp x16548 = x16545 + x16547;
        Fp x16549 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x16550 = x16549 * x12;
        Fp x16551 = x16548 + x16550;
        Fp x16552 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x16553 = x16552 * x28;
        Fp x16554 = x16551 + x16553;
        Fp x16555 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x16556 = x16555 * x13;
        Fp x16557 = x16554 + x16556;
        Fp x16558 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x16559 = x16558 * x29;
        Fp x16560 = x16557 + x16559;
        Fp x16561 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x16562 = x16561 * x14;
        Fp x16563 = x16560 + x16562;
        Fp x16564 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x16565 = x16564 * x30;
        Fp x16566 = x16563 + x16565;
        Fp x16567 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x16568 = x16567 * x15;
        Fp x16569 = x16566 + x16568;
        Fp x16570 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x16571 = x16570 * x31;
        Fp x16572 = x16569 + x16571;
        Fp x16573 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x16574 = x16573 * x16;
        Fp x16575 = x16572 + x16574;
        Fp x16576 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x16577 = x16576 * x32;
        Fp x16578 = x16575 + x16577;
        Fp x16579 = x14362 - x16578;
        Fp x16580 = x16579 * x33;
        args[2][106 * steps + cycle] = x16580;
        Fp x16581 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x16582 = x14363 + x16581;
        {
          Fp x16583 = Fp(x16582.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x16583;
          Fp x16584 = x16582 - x16583;
          Fp x16585 = x16584 * x26;
          Fp x16586 = Fp(x16585.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x16586;
          Fp x16587 = x16585 - x16586;
          Fp x16588 = x16587 * x26;
          Fp x16589 = Fp(x16588.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x16589;
          Fp x16590 = x16588 - x16589;
          Fp x16591 = x16590 * x26;
          Fp x16592 = Fp(x16591.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x16592;
          Fp x16593 = x16591 - x16592;
          Fp x16594 = x16593 * x26;
          Fp x16595 = Fp(x16594.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x16595;
          Fp x16596 = x16594 - x16595;
          Fp x16597 = x16596 * x26;
          Fp x16598 = Fp(x16597.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x16598;
          Fp x16599 = x16597 - x16598;
          Fp x16600 = x16599 * x26;
          Fp x16601 = Fp(x16600.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x16601;
          Fp x16602 = x16600 - x16601;
          Fp x16603 = x16602 * x26;
          Fp x16604 = Fp(x16603.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x16604;
          Fp x16605 = x16603 - x16604;
          Fp x16606 = x16605 * x26;
          Fp x16607 = Fp(x16606.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x16607;
          Fp x16608 = x16606 - x16607;
          Fp x16609 = x16608 * x26;
          Fp x16610 = Fp(x16609.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x16610;
          Fp x16611 = x16609 - x16610;
          Fp x16612 = x16611 * x26;
          Fp x16613 = Fp(x16612.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x16613;
          Fp x16614 = x16612 - x16613;
          Fp x16615 = x16614 * x26;
          Fp x16616 = Fp(x16615.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x16616;
          Fp x16617 = x16615 - x16616;
          Fp x16618 = x16617 * x26;
          Fp x16619 = Fp(x16618.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x16619;
          Fp x16620 = x16618 - x16619;
          Fp x16621 = x16620 * x26;
          Fp x16622 = Fp(x16621.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x16622;
          Fp x16623 = x16621 - x16622;
          Fp x16624 = x16623 * x26;
          Fp x16625 = Fp(x16624.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x16625;
          Fp x16626 = x16624 - x16625;
          Fp x16627 = x16626 * x26;
          Fp x16628 = Fp(x16627.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x16628;
        }
        Fp x16629 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x16630 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x16631 = x16630 * x1;
        Fp x16632 = x16629 + x16631;
        Fp x16633 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x16634 = x16633 * x3;
        Fp x16635 = x16632 + x16634;
        Fp x16636 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x16637 = x16636 * x6;
        Fp x16638 = x16635 + x16637;
        Fp x16639 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x16640 = x16639 * x11;
        Fp x16641 = x16638 + x16640;
        Fp x16642 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x16643 = x16642 * x27;
        Fp x16644 = x16641 + x16643;
        Fp x16645 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x16646 = x16645 * x12;
        Fp x16647 = x16644 + x16646;
        Fp x16648 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x16649 = x16648 * x28;
        Fp x16650 = x16647 + x16649;
        Fp x16651 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x16652 = x16651 * x13;
        Fp x16653 = x16650 + x16652;
        Fp x16654 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x16655 = x16654 * x29;
        Fp x16656 = x16653 + x16655;
        Fp x16657 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x16658 = x16657 * x14;
        Fp x16659 = x16656 + x16658;
        Fp x16660 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x16661 = x16660 * x30;
        Fp x16662 = x16659 + x16661;
        Fp x16663 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x16664 = x16663 * x15;
        Fp x16665 = x16662 + x16664;
        Fp x16666 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x16667 = x16666 * x31;
        Fp x16668 = x16665 + x16667;
        Fp x16669 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x16670 = x16669 * x16;
        Fp x16671 = x16668 + x16670;
        Fp x16672 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x16673 = x16672 * x32;
        Fp x16674 = x16671 + x16673;
        Fp x16675 = x16582 - x16674;
        Fp x16676 = x16675 * x33;
        args[2][107 * steps + cycle] = x16676;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x16677 = host_outs[0];
          Fp x16678 = host_outs[1];
          args[2][129 * steps + cycle] = x16677;
          args[2][130 * steps + cycle] = x16678;
        }
        Fp x16679 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x16680 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x16681 = Fp(x16679.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x16681;
          Fp x16682 = x16679 - x16681;
          Fp x16683 = x16682 * x26;
          Fp x16684 = Fp(x16683.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x16684;
          Fp x16685 = x16683 - x16684;
          Fp x16686 = x16685 * x26;
          Fp x16687 = Fp(x16686.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x16687;
          Fp x16688 = x16686 - x16687;
          Fp x16689 = x16688 * x26;
          Fp x16690 = Fp(x16689.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x16690;
          Fp x16691 = x16689 - x16690;
          Fp x16692 = x16691 * x26;
          Fp x16693 = Fp(x16692.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x16693;
          Fp x16694 = x16692 - x16693;
          Fp x16695 = x16694 * x26;
          Fp x16696 = Fp(x16695.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x16696;
          Fp x16697 = x16695 - x16696;
          Fp x16698 = x16697 * x26;
          Fp x16699 = Fp(x16698.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x16699;
          Fp x16700 = x16698 - x16699;
          Fp x16701 = x16700 * x26;
          Fp x16702 = Fp(x16701.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x16702;
          Fp x16703 = x16701 - x16702;
          Fp x16704 = x16703 * x26;
          Fp x16705 = Fp(x16704.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x16705;
          Fp x16706 = x16704 - x16705;
          Fp x16707 = x16706 * x26;
          Fp x16708 = Fp(x16707.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x16708;
          Fp x16709 = x16707 - x16708;
          Fp x16710 = x16709 * x26;
          Fp x16711 = Fp(x16710.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x16711;
          Fp x16712 = x16710 - x16711;
          Fp x16713 = x16712 * x26;
          Fp x16714 = Fp(x16713.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x16714;
          Fp x16715 = x16713 - x16714;
          Fp x16716 = x16715 * x26;
          Fp x16717 = Fp(x16716.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x16717;
          Fp x16718 = x16716 - x16717;
          Fp x16719 = x16718 * x26;
          Fp x16720 = Fp(x16719.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x16720;
          Fp x16721 = x16719 - x16720;
          Fp x16722 = x16721 * x26;
          Fp x16723 = Fp(x16722.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x16723;
          Fp x16724 = x16722 - x16723;
          Fp x16725 = x16724 * x26;
          Fp x16726 = Fp(x16725.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x16726;
        }
        Fp x16727 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x16728 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x16729 = x16728 * x1;
        Fp x16730 = x16727 + x16729;
        Fp x16731 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x16732 = x16731 * x3;
        Fp x16733 = x16730 + x16732;
        Fp x16734 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x16735 = x16734 * x6;
        Fp x16736 = x16733 + x16735;
        Fp x16737 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x16738 = x16737 * x11;
        Fp x16739 = x16736 + x16738;
        Fp x16740 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x16741 = x16740 * x27;
        Fp x16742 = x16739 + x16741;
        Fp x16743 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x16744 = x16743 * x12;
        Fp x16745 = x16742 + x16744;
        Fp x16746 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x16747 = x16746 * x28;
        Fp x16748 = x16745 + x16747;
        Fp x16749 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x16750 = x16749 * x13;
        Fp x16751 = x16748 + x16750;
        Fp x16752 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x16753 = x16752 * x29;
        Fp x16754 = x16751 + x16753;
        Fp x16755 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x16756 = x16755 * x14;
        Fp x16757 = x16754 + x16756;
        Fp x16758 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x16759 = x16758 * x30;
        Fp x16760 = x16757 + x16759;
        Fp x16761 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x16762 = x16761 * x15;
        Fp x16763 = x16760 + x16762;
        Fp x16764 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x16765 = x16764 * x31;
        Fp x16766 = x16763 + x16765;
        Fp x16767 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x16768 = x16767 * x16;
        Fp x16769 = x16766 + x16768;
        Fp x16770 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x16771 = x16770 * x32;
        Fp x16772 = x16769 + x16771;
        Fp x16773 = x16679 - x16772;
        Fp x16774 = x16773 * x33;
        if (x16774 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:53");
        {
          Fp x16775 = Fp(x16680.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x16775;
          Fp x16776 = x16680 - x16775;
          Fp x16777 = x16776 * x26;
          Fp x16778 = Fp(x16777.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x16778;
          Fp x16779 = x16777 - x16778;
          Fp x16780 = x16779 * x26;
          Fp x16781 = Fp(x16780.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x16781;
          Fp x16782 = x16780 - x16781;
          Fp x16783 = x16782 * x26;
          Fp x16784 = Fp(x16783.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x16784;
          Fp x16785 = x16783 - x16784;
          Fp x16786 = x16785 * x26;
          Fp x16787 = Fp(x16786.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x16787;
          Fp x16788 = x16786 - x16787;
          Fp x16789 = x16788 * x26;
          Fp x16790 = Fp(x16789.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x16790;
          Fp x16791 = x16789 - x16790;
          Fp x16792 = x16791 * x26;
          Fp x16793 = Fp(x16792.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x16793;
          Fp x16794 = x16792 - x16793;
          Fp x16795 = x16794 * x26;
          Fp x16796 = Fp(x16795.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x16796;
          Fp x16797 = x16795 - x16796;
          Fp x16798 = x16797 * x26;
          Fp x16799 = Fp(x16798.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x16799;
          Fp x16800 = x16798 - x16799;
          Fp x16801 = x16800 * x26;
          Fp x16802 = Fp(x16801.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x16802;
          Fp x16803 = x16801 - x16802;
          Fp x16804 = x16803 * x26;
          Fp x16805 = Fp(x16804.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x16805;
          Fp x16806 = x16804 - x16805;
          Fp x16807 = x16806 * x26;
          Fp x16808 = Fp(x16807.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x16808;
          Fp x16809 = x16807 - x16808;
          Fp x16810 = x16809 * x26;
          Fp x16811 = Fp(x16810.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x16811;
          Fp x16812 = x16810 - x16811;
          Fp x16813 = x16812 * x26;
          Fp x16814 = Fp(x16813.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x16814;
          Fp x16815 = x16813 - x16814;
          Fp x16816 = x16815 * x26;
          Fp x16817 = Fp(x16816.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x16817;
          Fp x16818 = x16816 - x16817;
          Fp x16819 = x16818 * x26;
          Fp x16820 = Fp(x16819.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x16820;
        }
        Fp x16821 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x16822 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x16823 = x16822 * x1;
        Fp x16824 = x16821 + x16823;
        Fp x16825 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x16826 = x16825 * x3;
        Fp x16827 = x16824 + x16826;
        Fp x16828 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x16829 = x16828 * x6;
        Fp x16830 = x16827 + x16829;
        Fp x16831 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x16832 = x16831 * x11;
        Fp x16833 = x16830 + x16832;
        Fp x16834 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x16835 = x16834 * x27;
        Fp x16836 = x16833 + x16835;
        Fp x16837 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x16838 = x16837 * x12;
        Fp x16839 = x16836 + x16838;
        Fp x16840 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x16841 = x16840 * x28;
        Fp x16842 = x16839 + x16841;
        Fp x16843 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x16844 = x16843 * x13;
        Fp x16845 = x16842 + x16844;
        Fp x16846 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x16847 = x16846 * x29;
        Fp x16848 = x16845 + x16847;
        Fp x16849 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x16850 = x16849 * x14;
        Fp x16851 = x16848 + x16850;
        Fp x16852 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x16853 = x16852 * x30;
        Fp x16854 = x16851 + x16853;
        Fp x16855 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x16856 = x16855 * x15;
        Fp x16857 = x16854 + x16856;
        Fp x16858 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x16859 = x16858 * x31;
        Fp x16860 = x16857 + x16859;
        Fp x16861 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x16862 = x16861 * x16;
        Fp x16863 = x16860 + x16862;
        Fp x16864 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x16865 = x16864 * x32;
        Fp x16866 = x16863 + x16865;
        Fp x16867 = x16680 - x16866;
        Fp x16868 = x16867 * x33;
        if (x16868 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:53");
        {
          Fp x16869 = (x16536 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x16869;
          Fp x16870 = x16536 - x71;
          Fp x16871 = (x16870 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x16871;
          Fp x16872 = x16536 - x1;
          Fp x16873 = (x16872 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x16873;
          Fp x16874 = x16536 - x2;
          Fp x16875 = (x16874 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x16875;
        }
        Fp x16876 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x16877 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x16878 = x16877 * x1;
        Fp x16879 = x16876 + x16878;
        Fp x16880 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x16881 = x16880 * x2;
        Fp x16882 = x16879 + x16881;
        Fp x16883 = x16882 - x16536;
        if (x16883 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x16884 = x16533 + x16727;
        Fp x16885 = x16533 * x16727;
        Fp x16886 = x16884 - x16885;
        Fp x16887 = x16534 + x16728;
        Fp x16888 = x16534 * x16728;
        Fp x16889 = x16887 - x16888;
        Fp x16890 = x16889 * x1;
        Fp x16891 = x16886 + x16890;
        Fp x16892 = x16537 + x16731;
        Fp x16893 = x16537 * x16731;
        Fp x16894 = x16892 - x16893;
        Fp x16895 = x16894 * x3;
        Fp x16896 = x16891 + x16895;
        Fp x16897 = x16540 + x16734;
        Fp x16898 = x16540 * x16734;
        Fp x16899 = x16897 - x16898;
        Fp x16900 = x16899 * x6;
        Fp x16901 = x16896 + x16900;
        Fp x16902 = x16543 + x16737;
        Fp x16903 = x16543 * x16737;
        Fp x16904 = x16902 - x16903;
        Fp x16905 = x16904 * x11;
        Fp x16906 = x16901 + x16905;
        Fp x16907 = x16546 + x16740;
        Fp x16908 = x16546 * x16740;
        Fp x16909 = x16907 - x16908;
        Fp x16910 = x16909 * x27;
        Fp x16911 = x16906 + x16910;
        Fp x16912 = x16549 + x16743;
        Fp x16913 = x16549 * x16743;
        Fp x16914 = x16912 - x16913;
        Fp x16915 = x16914 * x12;
        Fp x16916 = x16911 + x16915;
        Fp x16917 = x16552 + x16746;
        Fp x16918 = x16552 * x16746;
        Fp x16919 = x16917 - x16918;
        Fp x16920 = x16919 * x28;
        Fp x16921 = x16916 + x16920;
        Fp x16922 = x16555 + x16749;
        Fp x16923 = x16555 * x16749;
        Fp x16924 = x16922 - x16923;
        Fp x16925 = x16924 * x13;
        Fp x16926 = x16921 + x16925;
        Fp x16927 = x16558 + x16752;
        Fp x16928 = x16558 * x16752;
        Fp x16929 = x16927 - x16928;
        Fp x16930 = x16929 * x29;
        Fp x16931 = x16926 + x16930;
        Fp x16932 = x16561 + x16755;
        Fp x16933 = x16561 * x16755;
        Fp x16934 = x16932 - x16933;
        Fp x16935 = x16934 * x14;
        Fp x16936 = x16931 + x16935;
        Fp x16937 = x16564 + x16758;
        Fp x16938 = x16564 * x16758;
        Fp x16939 = x16937 - x16938;
        Fp x16940 = x16939 * x30;
        Fp x16941 = x16936 + x16940;
        Fp x16942 = x16567 + x16761;
        Fp x16943 = x16567 * x16761;
        Fp x16944 = x16942 - x16943;
        Fp x16945 = x16944 * x15;
        Fp x16946 = x16941 + x16945;
        Fp x16947 = x16570 + x16764;
        Fp x16948 = x16570 * x16764;
        Fp x16949 = x16947 - x16948;
        Fp x16950 = x16949 * x31;
        Fp x16951 = x16946 + x16950;
        Fp x16952 = x16573 + x16767;
        Fp x16953 = x16573 * x16767;
        Fp x16954 = x16952 - x16953;
        Fp x16955 = x16954 * x16;
        Fp x16956 = x16951 + x16955;
        Fp x16957 = x16576 + x16770;
        Fp x16958 = x16576 * x16770;
        Fp x16959 = x16957 - x16958;
        Fp x16960 = x16959 * x32;
        Fp x16961 = x16956 + x16960;
        Fp x16962 = x16629 + x16821;
        Fp x16963 = x16629 * x16821;
        Fp x16964 = x16962 - x16963;
        Fp x16965 = x16630 + x16822;
        Fp x16966 = x16630 * x16822;
        Fp x16967 = x16965 - x16966;
        Fp x16968 = x16967 * x1;
        Fp x16969 = x16964 + x16968;
        Fp x16970 = x16633 + x16825;
        Fp x16971 = x16633 * x16825;
        Fp x16972 = x16970 - x16971;
        Fp x16973 = x16972 * x3;
        Fp x16974 = x16969 + x16973;
        Fp x16975 = x16636 + x16828;
        Fp x16976 = x16636 * x16828;
        Fp x16977 = x16975 - x16976;
        Fp x16978 = x16977 * x6;
        Fp x16979 = x16974 + x16978;
        Fp x16980 = x16639 + x16831;
        Fp x16981 = x16639 * x16831;
        Fp x16982 = x16980 - x16981;
        Fp x16983 = x16982 * x11;
        Fp x16984 = x16979 + x16983;
        Fp x16985 = x16642 + x16834;
        Fp x16986 = x16642 * x16834;
        Fp x16987 = x16985 - x16986;
        Fp x16988 = x16987 * x27;
        Fp x16989 = x16984 + x16988;
        Fp x16990 = x16645 + x16837;
        Fp x16991 = x16645 * x16837;
        Fp x16992 = x16990 - x16991;
        Fp x16993 = x16992 * x12;
        Fp x16994 = x16989 + x16993;
        Fp x16995 = x16648 + x16840;
        Fp x16996 = x16648 * x16840;
        Fp x16997 = x16995 - x16996;
        Fp x16998 = x16997 * x28;
        Fp x16999 = x16994 + x16998;
        Fp x17000 = x16651 + x16843;
        Fp x17001 = x16651 * x16843;
        Fp x17002 = x17000 - x17001;
        Fp x17003 = x17002 * x13;
        Fp x17004 = x16999 + x17003;
        Fp x17005 = x16654 + x16846;
        Fp x17006 = x16654 * x16846;
        Fp x17007 = x17005 - x17006;
        Fp x17008 = x17007 * x29;
        Fp x17009 = x17004 + x17008;
        Fp x17010 = x16657 + x16849;
        Fp x17011 = x16657 * x16849;
        Fp x17012 = x17010 - x17011;
        Fp x17013 = x17012 * x14;
        Fp x17014 = x17009 + x17013;
        Fp x17015 = x16660 + x16852;
        Fp x17016 = x16660 * x16852;
        Fp x17017 = x17015 - x17016;
        Fp x17018 = x17017 * x30;
        Fp x17019 = x17014 + x17018;
        Fp x17020 = x16663 + x16855;
        Fp x17021 = x16663 * x16855;
        Fp x17022 = x17020 - x17021;
        Fp x17023 = x17022 * x15;
        Fp x17024 = x17019 + x17023;
        Fp x17025 = x16666 + x16858;
        Fp x17026 = x16666 * x16858;
        Fp x17027 = x17025 - x17026;
        Fp x17028 = x17027 * x31;
        Fp x17029 = x17024 + x17028;
        Fp x17030 = x16669 + x16861;
        Fp x17031 = x16669 * x16861;
        Fp x17032 = x17030 - x17031;
        Fp x17033 = x17032 * x16;
        Fp x17034 = x17029 + x17033;
        Fp x17035 = x16672 + x16864;
        Fp x17036 = x16672 * x16864;
        Fp x17037 = x17035 - x17036;
        Fp x17038 = x17037 * x32;
        Fp x17039 = x17034 + x17038;
        {
          Fp x17040 = Fp(x16961.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x17040;
          Fp x17041 = x16961 - x17040;
          Fp x17042 = x17041 * x26;
          Fp x17043 = Fp(x17042.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x17043;
          Fp x17044 = x17042 - x17043;
          Fp x17045 = x17044 * x26;
          Fp x17046 = Fp(x17045.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x17046;
          Fp x17047 = x17045 - x17046;
          Fp x17048 = x17047 * x26;
          Fp x17049 = Fp(x17048.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x17049;
          Fp x17050 = x17048 - x17049;
          Fp x17051 = x17050 * x26;
          Fp x17052 = Fp(x17051.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x17052;
          Fp x17053 = x17051 - x17052;
          Fp x17054 = x17053 * x26;
          Fp x17055 = Fp(x17054.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x17055;
          Fp x17056 = x17054 - x17055;
          Fp x17057 = x17056 * x26;
          Fp x17058 = Fp(x17057.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x17058;
          Fp x17059 = x17057 - x17058;
          Fp x17060 = x17059 * x26;
          Fp x17061 = Fp(x17060.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x17061;
          Fp x17062 = x17060 - x17061;
          Fp x17063 = x17062 * x26;
          Fp x17064 = Fp(x17063.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x17064;
          Fp x17065 = x17063 - x17064;
          Fp x17066 = x17065 * x26;
          Fp x17067 = Fp(x17066.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x17067;
          Fp x17068 = x17066 - x17067;
          Fp x17069 = x17068 * x26;
          Fp x17070 = Fp(x17069.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x17070;
          Fp x17071 = x17069 - x17070;
          Fp x17072 = x17071 * x26;
          Fp x17073 = Fp(x17072.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x17073;
          Fp x17074 = x17072 - x17073;
          Fp x17075 = x17074 * x26;
          Fp x17076 = Fp(x17075.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x17076;
          Fp x17077 = x17075 - x17076;
          Fp x17078 = x17077 * x26;
          Fp x17079 = Fp(x17078.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x17079;
          Fp x17080 = x17078 - x17079;
          Fp x17081 = x17080 * x26;
          Fp x17082 = Fp(x17081.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x17082;
          Fp x17083 = x17081 - x17082;
          Fp x17084 = x17083 * x26;
          Fp x17085 = Fp(x17084.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x17085;
        }
        Fp x17086 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x17087 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x17088 = x17087 * x1;
        Fp x17089 = x17086 + x17088;
        Fp x17090 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x17091 = x17090 * x3;
        Fp x17092 = x17089 + x17091;
        Fp x17093 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x17094 = x17093 * x6;
        Fp x17095 = x17092 + x17094;
        Fp x17096 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x17097 = x17096 * x11;
        Fp x17098 = x17095 + x17097;
        Fp x17099 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x17100 = x17099 * x27;
        Fp x17101 = x17098 + x17100;
        Fp x17102 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x17103 = x17102 * x12;
        Fp x17104 = x17101 + x17103;
        Fp x17105 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x17106 = x17105 * x28;
        Fp x17107 = x17104 + x17106;
        Fp x17108 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x17109 = x17108 * x13;
        Fp x17110 = x17107 + x17109;
        Fp x17111 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x17112 = x17111 * x29;
        Fp x17113 = x17110 + x17112;
        Fp x17114 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x17115 = x17114 * x14;
        Fp x17116 = x17113 + x17115;
        Fp x17117 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x17118 = x17117 * x30;
        Fp x17119 = x17116 + x17118;
        Fp x17120 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x17121 = x17120 * x15;
        Fp x17122 = x17119 + x17121;
        Fp x17123 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x17124 = x17123 * x31;
        Fp x17125 = x17122 + x17124;
        Fp x17126 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x17127 = x17126 * x16;
        Fp x17128 = x17125 + x17127;
        Fp x17129 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x17130 = x17129 * x32;
        Fp x17131 = x17128 + x17130;
        Fp x17132 = x16961 - x17131;
        Fp x17133 = x17132 * x33;
        args[2][108 * steps + cycle] = x17133;
        Fp x17134 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x17135 = x17039 + x17134;
        {
          Fp x17136 = Fp(x17135.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x17136;
          Fp x17137 = x17135 - x17136;
          Fp x17138 = x17137 * x26;
          Fp x17139 = Fp(x17138.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x17139;
          Fp x17140 = x17138 - x17139;
          Fp x17141 = x17140 * x26;
          Fp x17142 = Fp(x17141.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x17142;
          Fp x17143 = x17141 - x17142;
          Fp x17144 = x17143 * x26;
          Fp x17145 = Fp(x17144.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x17145;
          Fp x17146 = x17144 - x17145;
          Fp x17147 = x17146 * x26;
          Fp x17148 = Fp(x17147.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x17148;
          Fp x17149 = x17147 - x17148;
          Fp x17150 = x17149 * x26;
          Fp x17151 = Fp(x17150.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x17151;
          Fp x17152 = x17150 - x17151;
          Fp x17153 = x17152 * x26;
          Fp x17154 = Fp(x17153.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x17154;
          Fp x17155 = x17153 - x17154;
          Fp x17156 = x17155 * x26;
          Fp x17157 = Fp(x17156.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x17157;
          Fp x17158 = x17156 - x17157;
          Fp x17159 = x17158 * x26;
          Fp x17160 = Fp(x17159.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x17160;
          Fp x17161 = x17159 - x17160;
          Fp x17162 = x17161 * x26;
          Fp x17163 = Fp(x17162.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x17163;
          Fp x17164 = x17162 - x17163;
          Fp x17165 = x17164 * x26;
          Fp x17166 = Fp(x17165.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x17166;
          Fp x17167 = x17165 - x17166;
          Fp x17168 = x17167 * x26;
          Fp x17169 = Fp(x17168.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x17169;
          Fp x17170 = x17168 - x17169;
          Fp x17171 = x17170 * x26;
          Fp x17172 = Fp(x17171.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x17172;
          Fp x17173 = x17171 - x17172;
          Fp x17174 = x17173 * x26;
          Fp x17175 = Fp(x17174.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x17175;
          Fp x17176 = x17174 - x17175;
          Fp x17177 = x17176 * x26;
          Fp x17178 = Fp(x17177.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x17178;
          Fp x17179 = x17177 - x17178;
          Fp x17180 = x17179 * x26;
          Fp x17181 = Fp(x17180.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x17181;
        }
        Fp x17182 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x17183 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x17184 = x17183 * x1;
        Fp x17185 = x17182 + x17184;
        Fp x17186 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x17187 = x17186 * x3;
        Fp x17188 = x17185 + x17187;
        Fp x17189 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x17190 = x17189 * x6;
        Fp x17191 = x17188 + x17190;
        Fp x17192 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x17193 = x17192 * x11;
        Fp x17194 = x17191 + x17193;
        Fp x17195 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x17196 = x17195 * x27;
        Fp x17197 = x17194 + x17196;
        Fp x17198 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x17199 = x17198 * x12;
        Fp x17200 = x17197 + x17199;
        Fp x17201 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x17202 = x17201 * x28;
        Fp x17203 = x17200 + x17202;
        Fp x17204 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x17205 = x17204 * x13;
        Fp x17206 = x17203 + x17205;
        Fp x17207 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x17208 = x17207 * x29;
        Fp x17209 = x17206 + x17208;
        Fp x17210 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x17211 = x17210 * x14;
        Fp x17212 = x17209 + x17211;
        Fp x17213 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x17214 = x17213 * x30;
        Fp x17215 = x17212 + x17214;
        Fp x17216 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x17217 = x17216 * x15;
        Fp x17218 = x17215 + x17217;
        Fp x17219 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x17220 = x17219 * x31;
        Fp x17221 = x17218 + x17220;
        Fp x17222 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x17223 = x17222 * x16;
        Fp x17224 = x17221 + x17223;
        Fp x17225 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x17226 = x17225 * x32;
        Fp x17227 = x17224 + x17226;
        Fp x17228 = x17135 - x17227;
        Fp x17229 = x17228 * x33;
        args[2][109 * steps + cycle] = x17229;
        {
          {
            Fp x17230 = (x17131 == 0) ? Fp(1) : Fp(0);
            Fp x17231 = x71 - x17230;
            args[2][114 * steps + cycle] = x17231;
            Fp x17232 = inv(x17131);
            args[2][115 * steps + cycle] = x17232;
          }
          Fp x17233 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x17234 = x17131 * x17233;
          Fp x17235 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x17236 = x17234 - x17235;
          if (x17236 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x17237 = x71 - x17235;
          Fp x17238 = x17237 * x17131;
          if (x17238 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x17239 = (x17227 == 0) ? Fp(1) : Fp(0);
            Fp x17240 = x71 - x17239;
            args[2][116 * steps + cycle] = x17240;
            Fp x17241 = inv(x17227);
            args[2][117 * steps + cycle] = x17241;
          }
          Fp x17242 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x17243 = x17227 * x17242;
          Fp x17244 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x17245 = x17243 - x17244;
          if (x17245 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x17246 = x71 - x17244;
          Fp x17247 = x17246 * x17227;
          if (x17247 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x17248 = x17237 * x17246;
          Fp x17249 = x71 - x17248;
          args[2][111 * steps + cycle] = x17249;
          Fp x17250 = x71 - x16864;
          Fp x17251 = x16672 * x17250;
          Fp x17252 = x71 - x17225;
          Fp x17253 = x17251 * x17252;
          Fp x17254 = x71 - x16672;
          Fp x17255 = x17254 * x16864;
          Fp x17256 = x17255 * x17225;
          Fp x17257 = x17253 + x17256;
          args[2][112 * steps + cycle] = x17257;
          Fp x17258 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x17259 = x17258 + x17225;
          Fp x17260 = x17258 * x1;
          Fp x17261 = x17260 * x17225;
          Fp x17262 = x17259 - x17261;
          args[2][113 * steps + cycle] = x17262;
        }
        args[2][100 * steps + cycle] = x17131;
        args[2][101 * steps + cycle] = x17227;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x17263 = x14387 + x3;
        args[2][104 * steps + cycle] = x17263;
        args[2][105 * steps + cycle] = x14409;
        Fp x17264 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x17265 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x17266 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x17267 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x17268 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x17269 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14409;
        host_args[2] = x14387;
        host_args[3] = x16674;
        host_args[4] = x16578;
        host_args[5] = x16866;
        host_args[6] = x16772;
        host_args[7] = x17227;
        host_args[8] = x17131;
        host_args[9] = x17264;
        host_args[10] = x17265;
        host_args[11] = x17266;
        host_args[12] = x17267;
        host_args[13] = x17268;
        host_args[14] = x17269;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x17270 = args[2][76 * steps + ((cycle - 1) & mask)];
      if (x17270 != 0) {
        {
          Fp x17271 = Fp(x14362.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x17271;
          Fp x17272 = x14362 - x17271;
          Fp x17273 = x17272 * x26;
          Fp x17274 = Fp(x17273.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x17274;
          Fp x17275 = x17273 - x17274;
          Fp x17276 = x17275 * x26;
          Fp x17277 = Fp(x17276.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x17277;
          Fp x17278 = x17276 - x17277;
          Fp x17279 = x17278 * x26;
          Fp x17280 = Fp(x17279.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x17280;
          Fp x17281 = x17279 - x17280;
          Fp x17282 = x17281 * x26;
          Fp x17283 = Fp(x17282.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x17283;
          Fp x17284 = x17282 - x17283;
          Fp x17285 = x17284 * x26;
          Fp x17286 = Fp(x17285.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x17286;
          Fp x17287 = x17285 - x17286;
          Fp x17288 = x17287 * x26;
          Fp x17289 = Fp(x17288.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x17289;
          Fp x17290 = x17288 - x17289;
          Fp x17291 = x17290 * x26;
          Fp x17292 = Fp(x17291.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x17292;
          Fp x17293 = x17291 - x17292;
          Fp x17294 = x17293 * x26;
          Fp x17295 = Fp(x17294.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x17295;
          Fp x17296 = x17294 - x17295;
          Fp x17297 = x17296 * x26;
          Fp x17298 = Fp(x17297.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x17298;
          Fp x17299 = x17297 - x17298;
          Fp x17300 = x17299 * x26;
          Fp x17301 = Fp(x17300.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x17301;
          Fp x17302 = x17300 - x17301;
          Fp x17303 = x17302 * x26;
          Fp x17304 = Fp(x17303.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x17304;
          Fp x17305 = x17303 - x17304;
          Fp x17306 = x17305 * x26;
          Fp x17307 = Fp(x17306.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x17307;
          Fp x17308 = x17306 - x17307;
          Fp x17309 = x17308 * x26;
          Fp x17310 = Fp(x17309.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x17310;
          Fp x17311 = x17309 - x17310;
          Fp x17312 = x17311 * x26;
          Fp x17313 = Fp(x17312.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x17313;
          Fp x17314 = x17312 - x17313;
          Fp x17315 = x17314 * x26;
          Fp x17316 = Fp(x17315.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x17316;
        }
        Fp x17317 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x17318 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x17319 = x17318 * x1;
        Fp x17320 = x17317 + x17319;
        Fp x17321 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x17322 = x17321 * x3;
        Fp x17323 = x17320 + x17322;
        Fp x17324 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x17325 = x17324 * x6;
        Fp x17326 = x17323 + x17325;
        Fp x17327 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x17328 = x17327 * x11;
        Fp x17329 = x17326 + x17328;
        Fp x17330 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x17331 = x17330 * x27;
        Fp x17332 = x17329 + x17331;
        Fp x17333 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x17334 = x17333 * x12;
        Fp x17335 = x17332 + x17334;
        Fp x17336 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x17337 = x17336 * x28;
        Fp x17338 = x17335 + x17337;
        Fp x17339 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x17340 = x17339 * x13;
        Fp x17341 = x17338 + x17340;
        Fp x17342 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x17343 = x17342 * x29;
        Fp x17344 = x17341 + x17343;
        Fp x17345 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x17346 = x17345 * x14;
        Fp x17347 = x17344 + x17346;
        Fp x17348 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x17349 = x17348 * x30;
        Fp x17350 = x17347 + x17349;
        Fp x17351 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x17352 = x17351 * x15;
        Fp x17353 = x17350 + x17352;
        Fp x17354 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x17355 = x17354 * x31;
        Fp x17356 = x17353 + x17355;
        Fp x17357 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x17358 = x17357 * x16;
        Fp x17359 = x17356 + x17358;
        Fp x17360 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x17361 = x17360 * x32;
        Fp x17362 = x17359 + x17361;
        Fp x17363 = x14362 - x17362;
        Fp x17364 = x17363 * x33;
        args[2][106 * steps + cycle] = x17364;
        Fp x17365 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x17366 = x14363 + x17365;
        {
          Fp x17367 = Fp(x17366.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x17367;
          Fp x17368 = x17366 - x17367;
          Fp x17369 = x17368 * x26;
          Fp x17370 = Fp(x17369.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x17370;
          Fp x17371 = x17369 - x17370;
          Fp x17372 = x17371 * x26;
          Fp x17373 = Fp(x17372.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x17373;
          Fp x17374 = x17372 - x17373;
          Fp x17375 = x17374 * x26;
          Fp x17376 = Fp(x17375.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x17376;
          Fp x17377 = x17375 - x17376;
          Fp x17378 = x17377 * x26;
          Fp x17379 = Fp(x17378.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x17379;
          Fp x17380 = x17378 - x17379;
          Fp x17381 = x17380 * x26;
          Fp x17382 = Fp(x17381.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x17382;
          Fp x17383 = x17381 - x17382;
          Fp x17384 = x17383 * x26;
          Fp x17385 = Fp(x17384.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x17385;
          Fp x17386 = x17384 - x17385;
          Fp x17387 = x17386 * x26;
          Fp x17388 = Fp(x17387.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x17388;
          Fp x17389 = x17387 - x17388;
          Fp x17390 = x17389 * x26;
          Fp x17391 = Fp(x17390.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x17391;
          Fp x17392 = x17390 - x17391;
          Fp x17393 = x17392 * x26;
          Fp x17394 = Fp(x17393.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x17394;
          Fp x17395 = x17393 - x17394;
          Fp x17396 = x17395 * x26;
          Fp x17397 = Fp(x17396.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x17397;
          Fp x17398 = x17396 - x17397;
          Fp x17399 = x17398 * x26;
          Fp x17400 = Fp(x17399.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x17400;
          Fp x17401 = x17399 - x17400;
          Fp x17402 = x17401 * x26;
          Fp x17403 = Fp(x17402.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x17403;
          Fp x17404 = x17402 - x17403;
          Fp x17405 = x17404 * x26;
          Fp x17406 = Fp(x17405.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x17406;
          Fp x17407 = x17405 - x17406;
          Fp x17408 = x17407 * x26;
          Fp x17409 = Fp(x17408.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x17409;
          Fp x17410 = x17408 - x17409;
          Fp x17411 = x17410 * x26;
          Fp x17412 = Fp(x17411.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x17412;
        }
        Fp x17413 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x17414 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x17415 = x17414 * x1;
        Fp x17416 = x17413 + x17415;
        Fp x17417 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x17418 = x17417 * x3;
        Fp x17419 = x17416 + x17418;
        Fp x17420 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x17421 = x17420 * x6;
        Fp x17422 = x17419 + x17421;
        Fp x17423 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x17424 = x17423 * x11;
        Fp x17425 = x17422 + x17424;
        Fp x17426 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x17427 = x17426 * x27;
        Fp x17428 = x17425 + x17427;
        Fp x17429 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x17430 = x17429 * x12;
        Fp x17431 = x17428 + x17430;
        Fp x17432 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x17433 = x17432 * x28;
        Fp x17434 = x17431 + x17433;
        Fp x17435 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x17436 = x17435 * x13;
        Fp x17437 = x17434 + x17436;
        Fp x17438 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x17439 = x17438 * x29;
        Fp x17440 = x17437 + x17439;
        Fp x17441 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x17442 = x17441 * x14;
        Fp x17443 = x17440 + x17442;
        Fp x17444 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x17445 = x17444 * x30;
        Fp x17446 = x17443 + x17445;
        Fp x17447 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x17448 = x17447 * x15;
        Fp x17449 = x17446 + x17448;
        Fp x17450 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x17451 = x17450 * x31;
        Fp x17452 = x17449 + x17451;
        Fp x17453 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x17454 = x17453 * x16;
        Fp x17455 = x17452 + x17454;
        Fp x17456 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x17457 = x17456 * x32;
        Fp x17458 = x17455 + x17457;
        Fp x17459 = x17366 - x17458;
        Fp x17460 = x17459 * x33;
        args[2][107 * steps + cycle] = x17460;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x17461 = host_outs[0];
          Fp x17462 = host_outs[1];
          args[2][129 * steps + cycle] = x17461;
          args[2][130 * steps + cycle] = x17462;
        }
        Fp x17463 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x17464 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x17465 = Fp(x17463.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x17465;
          Fp x17466 = x17463 - x17465;
          Fp x17467 = x17466 * x26;
          Fp x17468 = Fp(x17467.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x17468;
          Fp x17469 = x17467 - x17468;
          Fp x17470 = x17469 * x26;
          Fp x17471 = Fp(x17470.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x17471;
          Fp x17472 = x17470 - x17471;
          Fp x17473 = x17472 * x26;
          Fp x17474 = Fp(x17473.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x17474;
          Fp x17475 = x17473 - x17474;
          Fp x17476 = x17475 * x26;
          Fp x17477 = Fp(x17476.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x17477;
          Fp x17478 = x17476 - x17477;
          Fp x17479 = x17478 * x26;
          Fp x17480 = Fp(x17479.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x17480;
          Fp x17481 = x17479 - x17480;
          Fp x17482 = x17481 * x26;
          Fp x17483 = Fp(x17482.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x17483;
          Fp x17484 = x17482 - x17483;
          Fp x17485 = x17484 * x26;
          Fp x17486 = Fp(x17485.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x17486;
          Fp x17487 = x17485 - x17486;
          Fp x17488 = x17487 * x26;
          Fp x17489 = Fp(x17488.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x17489;
          Fp x17490 = x17488 - x17489;
          Fp x17491 = x17490 * x26;
          Fp x17492 = Fp(x17491.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x17492;
          Fp x17493 = x17491 - x17492;
          Fp x17494 = x17493 * x26;
          Fp x17495 = Fp(x17494.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x17495;
          Fp x17496 = x17494 - x17495;
          Fp x17497 = x17496 * x26;
          Fp x17498 = Fp(x17497.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x17498;
          Fp x17499 = x17497 - x17498;
          Fp x17500 = x17499 * x26;
          Fp x17501 = Fp(x17500.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x17501;
          Fp x17502 = x17500 - x17501;
          Fp x17503 = x17502 * x26;
          Fp x17504 = Fp(x17503.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x17504;
          Fp x17505 = x17503 - x17504;
          Fp x17506 = x17505 * x26;
          Fp x17507 = Fp(x17506.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x17507;
          Fp x17508 = x17506 - x17507;
          Fp x17509 = x17508 * x26;
          Fp x17510 = Fp(x17509.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x17510;
        }
        Fp x17511 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x17512 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x17513 = x17512 * x1;
        Fp x17514 = x17511 + x17513;
        Fp x17515 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x17516 = x17515 * x3;
        Fp x17517 = x17514 + x17516;
        Fp x17518 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x17519 = x17518 * x6;
        Fp x17520 = x17517 + x17519;
        Fp x17521 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x17522 = x17521 * x11;
        Fp x17523 = x17520 + x17522;
        Fp x17524 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x17525 = x17524 * x27;
        Fp x17526 = x17523 + x17525;
        Fp x17527 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x17528 = x17527 * x12;
        Fp x17529 = x17526 + x17528;
        Fp x17530 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x17531 = x17530 * x28;
        Fp x17532 = x17529 + x17531;
        Fp x17533 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x17534 = x17533 * x13;
        Fp x17535 = x17532 + x17534;
        Fp x17536 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x17537 = x17536 * x29;
        Fp x17538 = x17535 + x17537;
        Fp x17539 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x17540 = x17539 * x14;
        Fp x17541 = x17538 + x17540;
        Fp x17542 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x17543 = x17542 * x30;
        Fp x17544 = x17541 + x17543;
        Fp x17545 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x17546 = x17545 * x15;
        Fp x17547 = x17544 + x17546;
        Fp x17548 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x17549 = x17548 * x31;
        Fp x17550 = x17547 + x17549;
        Fp x17551 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x17552 = x17551 * x16;
        Fp x17553 = x17550 + x17552;
        Fp x17554 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x17555 = x17554 * x32;
        Fp x17556 = x17553 + x17555;
        Fp x17557 = x17463 - x17556;
        Fp x17558 = x17557 * x33;
        if (x17558 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:54");
        {
          Fp x17559 = Fp(x17464.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x17559;
          Fp x17560 = x17464 - x17559;
          Fp x17561 = x17560 * x26;
          Fp x17562 = Fp(x17561.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x17562;
          Fp x17563 = x17561 - x17562;
          Fp x17564 = x17563 * x26;
          Fp x17565 = Fp(x17564.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x17565;
          Fp x17566 = x17564 - x17565;
          Fp x17567 = x17566 * x26;
          Fp x17568 = Fp(x17567.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x17568;
          Fp x17569 = x17567 - x17568;
          Fp x17570 = x17569 * x26;
          Fp x17571 = Fp(x17570.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x17571;
          Fp x17572 = x17570 - x17571;
          Fp x17573 = x17572 * x26;
          Fp x17574 = Fp(x17573.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x17574;
          Fp x17575 = x17573 - x17574;
          Fp x17576 = x17575 * x26;
          Fp x17577 = Fp(x17576.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x17577;
          Fp x17578 = x17576 - x17577;
          Fp x17579 = x17578 * x26;
          Fp x17580 = Fp(x17579.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x17580;
          Fp x17581 = x17579 - x17580;
          Fp x17582 = x17581 * x26;
          Fp x17583 = Fp(x17582.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x17583;
          Fp x17584 = x17582 - x17583;
          Fp x17585 = x17584 * x26;
          Fp x17586 = Fp(x17585.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x17586;
          Fp x17587 = x17585 - x17586;
          Fp x17588 = x17587 * x26;
          Fp x17589 = Fp(x17588.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x17589;
          Fp x17590 = x17588 - x17589;
          Fp x17591 = x17590 * x26;
          Fp x17592 = Fp(x17591.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x17592;
          Fp x17593 = x17591 - x17592;
          Fp x17594 = x17593 * x26;
          Fp x17595 = Fp(x17594.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x17595;
          Fp x17596 = x17594 - x17595;
          Fp x17597 = x17596 * x26;
          Fp x17598 = Fp(x17597.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x17598;
          Fp x17599 = x17597 - x17598;
          Fp x17600 = x17599 * x26;
          Fp x17601 = Fp(x17600.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x17601;
          Fp x17602 = x17600 - x17601;
          Fp x17603 = x17602 * x26;
          Fp x17604 = Fp(x17603.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x17604;
        }
        Fp x17605 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x17606 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x17607 = x17606 * x1;
        Fp x17608 = x17605 + x17607;
        Fp x17609 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x17610 = x17609 * x3;
        Fp x17611 = x17608 + x17610;
        Fp x17612 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x17613 = x17612 * x6;
        Fp x17614 = x17611 + x17613;
        Fp x17615 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x17616 = x17615 * x11;
        Fp x17617 = x17614 + x17616;
        Fp x17618 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x17619 = x17618 * x27;
        Fp x17620 = x17617 + x17619;
        Fp x17621 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x17622 = x17621 * x12;
        Fp x17623 = x17620 + x17622;
        Fp x17624 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x17625 = x17624 * x28;
        Fp x17626 = x17623 + x17625;
        Fp x17627 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x17628 = x17627 * x13;
        Fp x17629 = x17626 + x17628;
        Fp x17630 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x17631 = x17630 * x29;
        Fp x17632 = x17629 + x17631;
        Fp x17633 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x17634 = x17633 * x14;
        Fp x17635 = x17632 + x17634;
        Fp x17636 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x17637 = x17636 * x30;
        Fp x17638 = x17635 + x17637;
        Fp x17639 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x17640 = x17639 * x15;
        Fp x17641 = x17638 + x17640;
        Fp x17642 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x17643 = x17642 * x31;
        Fp x17644 = x17641 + x17643;
        Fp x17645 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x17646 = x17645 * x16;
        Fp x17647 = x17644 + x17646;
        Fp x17648 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x17649 = x17648 * x32;
        Fp x17650 = x17647 + x17649;
        Fp x17651 = x17464 - x17650;
        Fp x17652 = x17651 * x33;
        if (x17652 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:54");
        {
          Fp x17653 = (x17320 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x17653;
          Fp x17654 = x17320 - x71;
          Fp x17655 = (x17654 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x17655;
          Fp x17656 = x17320 - x1;
          Fp x17657 = (x17656 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x17657;
          Fp x17658 = x17320 - x2;
          Fp x17659 = (x17658 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x17659;
        }
        Fp x17660 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x17661 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x17662 = x17661 * x1;
        Fp x17663 = x17660 + x17662;
        Fp x17664 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x17665 = x17664 * x2;
        Fp x17666 = x17663 + x17665;
        Fp x17667 = x17666 - x17320;
        if (x17667 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x17668 = x17317 * x17511;
        Fp x17669 = x17318 * x17512;
        Fp x17670 = x17669 * x1;
        Fp x17671 = x17668 + x17670;
        Fp x17672 = x17321 * x17515;
        Fp x17673 = x17672 * x3;
        Fp x17674 = x17671 + x17673;
        Fp x17675 = x17324 * x17518;
        Fp x17676 = x17675 * x6;
        Fp x17677 = x17674 + x17676;
        Fp x17678 = x17327 * x17521;
        Fp x17679 = x17678 * x11;
        Fp x17680 = x17677 + x17679;
        Fp x17681 = x17330 * x17524;
        Fp x17682 = x17681 * x27;
        Fp x17683 = x17680 + x17682;
        Fp x17684 = x17333 * x17527;
        Fp x17685 = x17684 * x12;
        Fp x17686 = x17683 + x17685;
        Fp x17687 = x17336 * x17530;
        Fp x17688 = x17687 * x28;
        Fp x17689 = x17686 + x17688;
        Fp x17690 = x17339 * x17533;
        Fp x17691 = x17690 * x13;
        Fp x17692 = x17689 + x17691;
        Fp x17693 = x17342 * x17536;
        Fp x17694 = x17693 * x29;
        Fp x17695 = x17692 + x17694;
        Fp x17696 = x17345 * x17539;
        Fp x17697 = x17696 * x14;
        Fp x17698 = x17695 + x17697;
        Fp x17699 = x17348 * x17542;
        Fp x17700 = x17699 * x30;
        Fp x17701 = x17698 + x17700;
        Fp x17702 = x17351 * x17545;
        Fp x17703 = x17702 * x15;
        Fp x17704 = x17701 + x17703;
        Fp x17705 = x17354 * x17548;
        Fp x17706 = x17705 * x31;
        Fp x17707 = x17704 + x17706;
        Fp x17708 = x17357 * x17551;
        Fp x17709 = x17708 * x16;
        Fp x17710 = x17707 + x17709;
        Fp x17711 = x17360 * x17554;
        Fp x17712 = x17711 * x32;
        Fp x17713 = x17710 + x17712;
        Fp x17714 = x17413 * x17605;
        Fp x17715 = x17414 * x17606;
        Fp x17716 = x17715 * x1;
        Fp x17717 = x17714 + x17716;
        Fp x17718 = x17417 * x17609;
        Fp x17719 = x17718 * x3;
        Fp x17720 = x17717 + x17719;
        Fp x17721 = x17420 * x17612;
        Fp x17722 = x17721 * x6;
        Fp x17723 = x17720 + x17722;
        Fp x17724 = x17423 * x17615;
        Fp x17725 = x17724 * x11;
        Fp x17726 = x17723 + x17725;
        Fp x17727 = x17426 * x17618;
        Fp x17728 = x17727 * x27;
        Fp x17729 = x17726 + x17728;
        Fp x17730 = x17429 * x17621;
        Fp x17731 = x17730 * x12;
        Fp x17732 = x17729 + x17731;
        Fp x17733 = x17432 * x17624;
        Fp x17734 = x17733 * x28;
        Fp x17735 = x17732 + x17734;
        Fp x17736 = x17435 * x17627;
        Fp x17737 = x17736 * x13;
        Fp x17738 = x17735 + x17737;
        Fp x17739 = x17438 * x17630;
        Fp x17740 = x17739 * x29;
        Fp x17741 = x17738 + x17740;
        Fp x17742 = x17441 * x17633;
        Fp x17743 = x17742 * x14;
        Fp x17744 = x17741 + x17743;
        Fp x17745 = x17444 * x17636;
        Fp x17746 = x17745 * x30;
        Fp x17747 = x17744 + x17746;
        Fp x17748 = x17447 * x17639;
        Fp x17749 = x17748 * x15;
        Fp x17750 = x17747 + x17749;
        Fp x17751 = x17450 * x17642;
        Fp x17752 = x17751 * x31;
        Fp x17753 = x17750 + x17752;
        Fp x17754 = x17453 * x17645;
        Fp x17755 = x17754 * x16;
        Fp x17756 = x17753 + x17755;
        Fp x17757 = x17456 * x17648;
        Fp x17758 = x17757 * x32;
        Fp x17759 = x17756 + x17758;
        {
          Fp x17760 = Fp(x17713.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x17760;
          Fp x17761 = x17713 - x17760;
          Fp x17762 = x17761 * x26;
          Fp x17763 = Fp(x17762.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x17763;
          Fp x17764 = x17762 - x17763;
          Fp x17765 = x17764 * x26;
          Fp x17766 = Fp(x17765.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x17766;
          Fp x17767 = x17765 - x17766;
          Fp x17768 = x17767 * x26;
          Fp x17769 = Fp(x17768.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x17769;
          Fp x17770 = x17768 - x17769;
          Fp x17771 = x17770 * x26;
          Fp x17772 = Fp(x17771.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x17772;
          Fp x17773 = x17771 - x17772;
          Fp x17774 = x17773 * x26;
          Fp x17775 = Fp(x17774.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x17775;
          Fp x17776 = x17774 - x17775;
          Fp x17777 = x17776 * x26;
          Fp x17778 = Fp(x17777.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x17778;
          Fp x17779 = x17777 - x17778;
          Fp x17780 = x17779 * x26;
          Fp x17781 = Fp(x17780.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x17781;
          Fp x17782 = x17780 - x17781;
          Fp x17783 = x17782 * x26;
          Fp x17784 = Fp(x17783.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x17784;
          Fp x17785 = x17783 - x17784;
          Fp x17786 = x17785 * x26;
          Fp x17787 = Fp(x17786.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x17787;
          Fp x17788 = x17786 - x17787;
          Fp x17789 = x17788 * x26;
          Fp x17790 = Fp(x17789.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x17790;
          Fp x17791 = x17789 - x17790;
          Fp x17792 = x17791 * x26;
          Fp x17793 = Fp(x17792.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x17793;
          Fp x17794 = x17792 - x17793;
          Fp x17795 = x17794 * x26;
          Fp x17796 = Fp(x17795.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x17796;
          Fp x17797 = x17795 - x17796;
          Fp x17798 = x17797 * x26;
          Fp x17799 = Fp(x17798.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x17799;
          Fp x17800 = x17798 - x17799;
          Fp x17801 = x17800 * x26;
          Fp x17802 = Fp(x17801.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x17802;
          Fp x17803 = x17801 - x17802;
          Fp x17804 = x17803 * x26;
          Fp x17805 = Fp(x17804.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x17805;
        }
        Fp x17806 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x17807 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x17808 = x17807 * x1;
        Fp x17809 = x17806 + x17808;
        Fp x17810 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x17811 = x17810 * x3;
        Fp x17812 = x17809 + x17811;
        Fp x17813 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x17814 = x17813 * x6;
        Fp x17815 = x17812 + x17814;
        Fp x17816 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x17817 = x17816 * x11;
        Fp x17818 = x17815 + x17817;
        Fp x17819 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x17820 = x17819 * x27;
        Fp x17821 = x17818 + x17820;
        Fp x17822 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x17823 = x17822 * x12;
        Fp x17824 = x17821 + x17823;
        Fp x17825 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x17826 = x17825 * x28;
        Fp x17827 = x17824 + x17826;
        Fp x17828 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x17829 = x17828 * x13;
        Fp x17830 = x17827 + x17829;
        Fp x17831 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x17832 = x17831 * x29;
        Fp x17833 = x17830 + x17832;
        Fp x17834 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x17835 = x17834 * x14;
        Fp x17836 = x17833 + x17835;
        Fp x17837 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x17838 = x17837 * x30;
        Fp x17839 = x17836 + x17838;
        Fp x17840 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x17841 = x17840 * x15;
        Fp x17842 = x17839 + x17841;
        Fp x17843 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x17844 = x17843 * x31;
        Fp x17845 = x17842 + x17844;
        Fp x17846 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x17847 = x17846 * x16;
        Fp x17848 = x17845 + x17847;
        Fp x17849 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x17850 = x17849 * x32;
        Fp x17851 = x17848 + x17850;
        Fp x17852 = x17713 - x17851;
        Fp x17853 = x17852 * x33;
        args[2][108 * steps + cycle] = x17853;
        Fp x17854 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x17855 = x17759 + x17854;
        {
          Fp x17856 = Fp(x17855.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x17856;
          Fp x17857 = x17855 - x17856;
          Fp x17858 = x17857 * x26;
          Fp x17859 = Fp(x17858.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x17859;
          Fp x17860 = x17858 - x17859;
          Fp x17861 = x17860 * x26;
          Fp x17862 = Fp(x17861.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x17862;
          Fp x17863 = x17861 - x17862;
          Fp x17864 = x17863 * x26;
          Fp x17865 = Fp(x17864.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x17865;
          Fp x17866 = x17864 - x17865;
          Fp x17867 = x17866 * x26;
          Fp x17868 = Fp(x17867.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x17868;
          Fp x17869 = x17867 - x17868;
          Fp x17870 = x17869 * x26;
          Fp x17871 = Fp(x17870.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x17871;
          Fp x17872 = x17870 - x17871;
          Fp x17873 = x17872 * x26;
          Fp x17874 = Fp(x17873.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x17874;
          Fp x17875 = x17873 - x17874;
          Fp x17876 = x17875 * x26;
          Fp x17877 = Fp(x17876.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x17877;
          Fp x17878 = x17876 - x17877;
          Fp x17879 = x17878 * x26;
          Fp x17880 = Fp(x17879.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x17880;
          Fp x17881 = x17879 - x17880;
          Fp x17882 = x17881 * x26;
          Fp x17883 = Fp(x17882.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x17883;
          Fp x17884 = x17882 - x17883;
          Fp x17885 = x17884 * x26;
          Fp x17886 = Fp(x17885.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x17886;
          Fp x17887 = x17885 - x17886;
          Fp x17888 = x17887 * x26;
          Fp x17889 = Fp(x17888.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x17889;
          Fp x17890 = x17888 - x17889;
          Fp x17891 = x17890 * x26;
          Fp x17892 = Fp(x17891.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x17892;
          Fp x17893 = x17891 - x17892;
          Fp x17894 = x17893 * x26;
          Fp x17895 = Fp(x17894.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x17895;
          Fp x17896 = x17894 - x17895;
          Fp x17897 = x17896 * x26;
          Fp x17898 = Fp(x17897.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x17898;
          Fp x17899 = x17897 - x17898;
          Fp x17900 = x17899 * x26;
          Fp x17901 = Fp(x17900.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x17901;
        }
        Fp x17902 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x17903 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x17904 = x17903 * x1;
        Fp x17905 = x17902 + x17904;
        Fp x17906 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x17907 = x17906 * x3;
        Fp x17908 = x17905 + x17907;
        Fp x17909 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x17910 = x17909 * x6;
        Fp x17911 = x17908 + x17910;
        Fp x17912 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x17913 = x17912 * x11;
        Fp x17914 = x17911 + x17913;
        Fp x17915 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x17916 = x17915 * x27;
        Fp x17917 = x17914 + x17916;
        Fp x17918 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x17919 = x17918 * x12;
        Fp x17920 = x17917 + x17919;
        Fp x17921 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x17922 = x17921 * x28;
        Fp x17923 = x17920 + x17922;
        Fp x17924 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x17925 = x17924 * x13;
        Fp x17926 = x17923 + x17925;
        Fp x17927 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x17928 = x17927 * x29;
        Fp x17929 = x17926 + x17928;
        Fp x17930 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x17931 = x17930 * x14;
        Fp x17932 = x17929 + x17931;
        Fp x17933 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x17934 = x17933 * x30;
        Fp x17935 = x17932 + x17934;
        Fp x17936 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x17937 = x17936 * x15;
        Fp x17938 = x17935 + x17937;
        Fp x17939 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x17940 = x17939 * x31;
        Fp x17941 = x17938 + x17940;
        Fp x17942 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x17943 = x17942 * x16;
        Fp x17944 = x17941 + x17943;
        Fp x17945 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x17946 = x17945 * x32;
        Fp x17947 = x17944 + x17946;
        Fp x17948 = x17855 - x17947;
        Fp x17949 = x17948 * x33;
        args[2][109 * steps + cycle] = x17949;
        {
          {
            Fp x17950 = (x17851 == 0) ? Fp(1) : Fp(0);
            Fp x17951 = x71 - x17950;
            args[2][114 * steps + cycle] = x17951;
            Fp x17952 = inv(x17851);
            args[2][115 * steps + cycle] = x17952;
          }
          Fp x17953 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x17954 = x17851 * x17953;
          Fp x17955 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x17956 = x17954 - x17955;
          if (x17956 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x17957 = x71 - x17955;
          Fp x17958 = x17957 * x17851;
          if (x17958 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x17959 = (x17947 == 0) ? Fp(1) : Fp(0);
            Fp x17960 = x71 - x17959;
            args[2][116 * steps + cycle] = x17960;
            Fp x17961 = inv(x17947);
            args[2][117 * steps + cycle] = x17961;
          }
          Fp x17962 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x17963 = x17947 * x17962;
          Fp x17964 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x17965 = x17963 - x17964;
          if (x17965 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x17966 = x71 - x17964;
          Fp x17967 = x17966 * x17947;
          if (x17967 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x17968 = x17957 * x17966;
          Fp x17969 = x71 - x17968;
          args[2][111 * steps + cycle] = x17969;
          Fp x17970 = x71 - x17648;
          Fp x17971 = x17456 * x17970;
          Fp x17972 = x71 - x17945;
          Fp x17973 = x17971 * x17972;
          Fp x17974 = x71 - x17456;
          Fp x17975 = x17974 * x17648;
          Fp x17976 = x17975 * x17945;
          Fp x17977 = x17973 + x17976;
          args[2][112 * steps + cycle] = x17977;
          Fp x17978 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x17979 = x17978 + x17945;
          Fp x17980 = x17978 * x1;
          Fp x17981 = x17980 * x17945;
          Fp x17982 = x17979 - x17981;
          args[2][113 * steps + cycle] = x17982;
        }
        args[2][100 * steps + cycle] = x17851;
        args[2][101 * steps + cycle] = x17947;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x17983 = x14387 + x3;
        args[2][104 * steps + cycle] = x17983;
        args[2][105 * steps + cycle] = x14409;
        Fp x17984 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x17985 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x17986 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x17987 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x17988 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x17989 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14409;
        host_args[2] = x14387;
        host_args[3] = x17458;
        host_args[4] = x17362;
        host_args[5] = x17650;
        host_args[6] = x17556;
        host_args[7] = x17947;
        host_args[8] = x17851;
        host_args[9] = x17984;
        host_args[10] = x17985;
        host_args[11] = x17986;
        host_args[12] = x17987;
        host_args[13] = x17988;
        host_args[14] = x17989;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x17990 = args[2][77 * steps + ((cycle - 1) & mask)];
      if (x17990 != 0) {
        {
          Fp x17991 = Fp(x14362.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x17991;
          Fp x17992 = x14362 - x17991;
          Fp x17993 = x17992 * x26;
          Fp x17994 = Fp(x17993.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x17994;
          Fp x17995 = x17993 - x17994;
          Fp x17996 = x17995 * x26;
          Fp x17997 = Fp(x17996.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x17997;
          Fp x17998 = x17996 - x17997;
          Fp x17999 = x17998 * x26;
          Fp x18000 = Fp(x17999.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x18000;
          Fp x18001 = x17999 - x18000;
          Fp x18002 = x18001 * x26;
          Fp x18003 = Fp(x18002.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x18003;
          Fp x18004 = x18002 - x18003;
          Fp x18005 = x18004 * x26;
          Fp x18006 = Fp(x18005.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x18006;
          Fp x18007 = x18005 - x18006;
          Fp x18008 = x18007 * x26;
          Fp x18009 = Fp(x18008.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x18009;
          Fp x18010 = x18008 - x18009;
          Fp x18011 = x18010 * x26;
          Fp x18012 = Fp(x18011.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x18012;
          Fp x18013 = x18011 - x18012;
          Fp x18014 = x18013 * x26;
          Fp x18015 = Fp(x18014.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x18015;
          Fp x18016 = x18014 - x18015;
          Fp x18017 = x18016 * x26;
          Fp x18018 = Fp(x18017.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x18018;
          Fp x18019 = x18017 - x18018;
          Fp x18020 = x18019 * x26;
          Fp x18021 = Fp(x18020.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x18021;
          Fp x18022 = x18020 - x18021;
          Fp x18023 = x18022 * x26;
          Fp x18024 = Fp(x18023.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x18024;
          Fp x18025 = x18023 - x18024;
          Fp x18026 = x18025 * x26;
          Fp x18027 = Fp(x18026.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x18027;
          Fp x18028 = x18026 - x18027;
          Fp x18029 = x18028 * x26;
          Fp x18030 = Fp(x18029.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x18030;
          Fp x18031 = x18029 - x18030;
          Fp x18032 = x18031 * x26;
          Fp x18033 = Fp(x18032.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x18033;
          Fp x18034 = x18032 - x18033;
          Fp x18035 = x18034 * x26;
          Fp x18036 = Fp(x18035.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x18036;
        }
        Fp x18037 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x18038 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x18039 = x18038 * x1;
        Fp x18040 = x18037 + x18039;
        Fp x18041 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x18042 = x18041 * x3;
        Fp x18043 = x18040 + x18042;
        Fp x18044 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x18045 = x18044 * x6;
        Fp x18046 = x18043 + x18045;
        Fp x18047 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x18048 = x18047 * x11;
        Fp x18049 = x18046 + x18048;
        Fp x18050 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x18051 = x18050 * x27;
        Fp x18052 = x18049 + x18051;
        Fp x18053 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x18054 = x18053 * x12;
        Fp x18055 = x18052 + x18054;
        Fp x18056 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x18057 = x18056 * x28;
        Fp x18058 = x18055 + x18057;
        Fp x18059 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x18060 = x18059 * x13;
        Fp x18061 = x18058 + x18060;
        Fp x18062 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x18063 = x18062 * x29;
        Fp x18064 = x18061 + x18063;
        Fp x18065 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x18066 = x18065 * x14;
        Fp x18067 = x18064 + x18066;
        Fp x18068 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x18069 = x18068 * x30;
        Fp x18070 = x18067 + x18069;
        Fp x18071 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x18072 = x18071 * x15;
        Fp x18073 = x18070 + x18072;
        Fp x18074 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x18075 = x18074 * x31;
        Fp x18076 = x18073 + x18075;
        Fp x18077 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x18078 = x18077 * x16;
        Fp x18079 = x18076 + x18078;
        Fp x18080 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x18081 = x18080 * x32;
        Fp x18082 = x18079 + x18081;
        Fp x18083 = x14362 - x18082;
        Fp x18084 = x18083 * x33;
        args[2][106 * steps + cycle] = x18084;
        Fp x18085 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x18086 = x14363 + x18085;
        {
          Fp x18087 = Fp(x18086.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x18087;
          Fp x18088 = x18086 - x18087;
          Fp x18089 = x18088 * x26;
          Fp x18090 = Fp(x18089.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x18090;
          Fp x18091 = x18089 - x18090;
          Fp x18092 = x18091 * x26;
          Fp x18093 = Fp(x18092.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x18093;
          Fp x18094 = x18092 - x18093;
          Fp x18095 = x18094 * x26;
          Fp x18096 = Fp(x18095.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x18096;
          Fp x18097 = x18095 - x18096;
          Fp x18098 = x18097 * x26;
          Fp x18099 = Fp(x18098.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x18099;
          Fp x18100 = x18098 - x18099;
          Fp x18101 = x18100 * x26;
          Fp x18102 = Fp(x18101.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x18102;
          Fp x18103 = x18101 - x18102;
          Fp x18104 = x18103 * x26;
          Fp x18105 = Fp(x18104.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x18105;
          Fp x18106 = x18104 - x18105;
          Fp x18107 = x18106 * x26;
          Fp x18108 = Fp(x18107.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x18108;
          Fp x18109 = x18107 - x18108;
          Fp x18110 = x18109 * x26;
          Fp x18111 = Fp(x18110.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x18111;
          Fp x18112 = x18110 - x18111;
          Fp x18113 = x18112 * x26;
          Fp x18114 = Fp(x18113.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x18114;
          Fp x18115 = x18113 - x18114;
          Fp x18116 = x18115 * x26;
          Fp x18117 = Fp(x18116.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x18117;
          Fp x18118 = x18116 - x18117;
          Fp x18119 = x18118 * x26;
          Fp x18120 = Fp(x18119.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x18120;
          Fp x18121 = x18119 - x18120;
          Fp x18122 = x18121 * x26;
          Fp x18123 = Fp(x18122.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x18123;
          Fp x18124 = x18122 - x18123;
          Fp x18125 = x18124 * x26;
          Fp x18126 = Fp(x18125.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x18126;
          Fp x18127 = x18125 - x18126;
          Fp x18128 = x18127 * x26;
          Fp x18129 = Fp(x18128.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x18129;
          Fp x18130 = x18128 - x18129;
          Fp x18131 = x18130 * x26;
          Fp x18132 = Fp(x18131.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x18132;
        }
        Fp x18133 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x18134 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x18135 = x18134 * x1;
        Fp x18136 = x18133 + x18135;
        Fp x18137 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x18138 = x18137 * x3;
        Fp x18139 = x18136 + x18138;
        Fp x18140 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x18141 = x18140 * x6;
        Fp x18142 = x18139 + x18141;
        Fp x18143 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x18144 = x18143 * x11;
        Fp x18145 = x18142 + x18144;
        Fp x18146 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x18147 = x18146 * x27;
        Fp x18148 = x18145 + x18147;
        Fp x18149 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x18150 = x18149 * x12;
        Fp x18151 = x18148 + x18150;
        Fp x18152 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x18153 = x18152 * x28;
        Fp x18154 = x18151 + x18153;
        Fp x18155 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x18156 = x18155 * x13;
        Fp x18157 = x18154 + x18156;
        Fp x18158 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x18159 = x18158 * x29;
        Fp x18160 = x18157 + x18159;
        Fp x18161 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x18162 = x18161 * x14;
        Fp x18163 = x18160 + x18162;
        Fp x18164 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x18165 = x18164 * x30;
        Fp x18166 = x18163 + x18165;
        Fp x18167 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x18168 = x18167 * x15;
        Fp x18169 = x18166 + x18168;
        Fp x18170 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x18171 = x18170 * x31;
        Fp x18172 = x18169 + x18171;
        Fp x18173 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x18174 = x18173 * x16;
        Fp x18175 = x18172 + x18174;
        Fp x18176 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x18177 = x18176 * x32;
        Fp x18178 = x18175 + x18177;
        Fp x18179 = x18086 - x18178;
        Fp x18180 = x18179 * x33;
        args[2][107 * steps + cycle] = x18180;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x18181 = host_outs[0];
          Fp x18182 = host_outs[1];
          args[2][129 * steps + cycle] = x18181;
          args[2][130 * steps + cycle] = x18182;
        }
        Fp x18183 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x18184 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x18185 = Fp(x18183.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x18185;
          Fp x18186 = x18183 - x18185;
          Fp x18187 = x18186 * x26;
          Fp x18188 = Fp(x18187.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x18188;
          Fp x18189 = x18187 - x18188;
          Fp x18190 = x18189 * x26;
          Fp x18191 = Fp(x18190.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x18191;
          Fp x18192 = x18190 - x18191;
          Fp x18193 = x18192 * x26;
          Fp x18194 = Fp(x18193.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x18194;
          Fp x18195 = x18193 - x18194;
          Fp x18196 = x18195 * x26;
          Fp x18197 = Fp(x18196.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x18197;
          Fp x18198 = x18196 - x18197;
          Fp x18199 = x18198 * x26;
          Fp x18200 = Fp(x18199.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x18200;
          Fp x18201 = x18199 - x18200;
          Fp x18202 = x18201 * x26;
          Fp x18203 = Fp(x18202.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x18203;
          Fp x18204 = x18202 - x18203;
          Fp x18205 = x18204 * x26;
          Fp x18206 = Fp(x18205.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x18206;
          Fp x18207 = x18205 - x18206;
          Fp x18208 = x18207 * x26;
          Fp x18209 = Fp(x18208.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x18209;
          Fp x18210 = x18208 - x18209;
          Fp x18211 = x18210 * x26;
          Fp x18212 = Fp(x18211.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x18212;
          Fp x18213 = x18211 - x18212;
          Fp x18214 = x18213 * x26;
          Fp x18215 = Fp(x18214.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x18215;
          Fp x18216 = x18214 - x18215;
          Fp x18217 = x18216 * x26;
          Fp x18218 = Fp(x18217.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x18218;
          Fp x18219 = x18217 - x18218;
          Fp x18220 = x18219 * x26;
          Fp x18221 = Fp(x18220.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x18221;
          Fp x18222 = x18220 - x18221;
          Fp x18223 = x18222 * x26;
          Fp x18224 = Fp(x18223.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x18224;
          Fp x18225 = x18223 - x18224;
          Fp x18226 = x18225 * x26;
          Fp x18227 = Fp(x18226.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x18227;
          Fp x18228 = x18226 - x18227;
          Fp x18229 = x18228 * x26;
          Fp x18230 = Fp(x18229.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x18230;
        }
        Fp x18231 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x18232 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x18233 = x18232 * x1;
        Fp x18234 = x18231 + x18233;
        Fp x18235 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x18236 = x18235 * x3;
        Fp x18237 = x18234 + x18236;
        Fp x18238 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x18239 = x18238 * x6;
        Fp x18240 = x18237 + x18239;
        Fp x18241 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x18242 = x18241 * x11;
        Fp x18243 = x18240 + x18242;
        Fp x18244 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x18245 = x18244 * x27;
        Fp x18246 = x18243 + x18245;
        Fp x18247 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x18248 = x18247 * x12;
        Fp x18249 = x18246 + x18248;
        Fp x18250 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x18251 = x18250 * x28;
        Fp x18252 = x18249 + x18251;
        Fp x18253 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x18254 = x18253 * x13;
        Fp x18255 = x18252 + x18254;
        Fp x18256 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x18257 = x18256 * x29;
        Fp x18258 = x18255 + x18257;
        Fp x18259 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x18260 = x18259 * x14;
        Fp x18261 = x18258 + x18260;
        Fp x18262 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x18263 = x18262 * x30;
        Fp x18264 = x18261 + x18263;
        Fp x18265 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x18266 = x18265 * x15;
        Fp x18267 = x18264 + x18266;
        Fp x18268 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x18269 = x18268 * x31;
        Fp x18270 = x18267 + x18269;
        Fp x18271 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x18272 = x18271 * x16;
        Fp x18273 = x18270 + x18272;
        Fp x18274 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x18275 = x18274 * x32;
        Fp x18276 = x18273 + x18275;
        Fp x18277 = x18183 - x18276;
        Fp x18278 = x18277 * x33;
        if (x18278 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:55");
        {
          Fp x18279 = Fp(x18184.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x18279;
          Fp x18280 = x18184 - x18279;
          Fp x18281 = x18280 * x26;
          Fp x18282 = Fp(x18281.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x18282;
          Fp x18283 = x18281 - x18282;
          Fp x18284 = x18283 * x26;
          Fp x18285 = Fp(x18284.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x18285;
          Fp x18286 = x18284 - x18285;
          Fp x18287 = x18286 * x26;
          Fp x18288 = Fp(x18287.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x18288;
          Fp x18289 = x18287 - x18288;
          Fp x18290 = x18289 * x26;
          Fp x18291 = Fp(x18290.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x18291;
          Fp x18292 = x18290 - x18291;
          Fp x18293 = x18292 * x26;
          Fp x18294 = Fp(x18293.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x18294;
          Fp x18295 = x18293 - x18294;
          Fp x18296 = x18295 * x26;
          Fp x18297 = Fp(x18296.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x18297;
          Fp x18298 = x18296 - x18297;
          Fp x18299 = x18298 * x26;
          Fp x18300 = Fp(x18299.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x18300;
          Fp x18301 = x18299 - x18300;
          Fp x18302 = x18301 * x26;
          Fp x18303 = Fp(x18302.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x18303;
          Fp x18304 = x18302 - x18303;
          Fp x18305 = x18304 * x26;
          Fp x18306 = Fp(x18305.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x18306;
          Fp x18307 = x18305 - x18306;
          Fp x18308 = x18307 * x26;
          Fp x18309 = Fp(x18308.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x18309;
          Fp x18310 = x18308 - x18309;
          Fp x18311 = x18310 * x26;
          Fp x18312 = Fp(x18311.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x18312;
          Fp x18313 = x18311 - x18312;
          Fp x18314 = x18313 * x26;
          Fp x18315 = Fp(x18314.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x18315;
          Fp x18316 = x18314 - x18315;
          Fp x18317 = x18316 * x26;
          Fp x18318 = Fp(x18317.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x18318;
          Fp x18319 = x18317 - x18318;
          Fp x18320 = x18319 * x26;
          Fp x18321 = Fp(x18320.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x18321;
          Fp x18322 = x18320 - x18321;
          Fp x18323 = x18322 * x26;
          Fp x18324 = Fp(x18323.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x18324;
        }
        Fp x18325 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x18326 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x18327 = x18326 * x1;
        Fp x18328 = x18325 + x18327;
        Fp x18329 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x18330 = x18329 * x3;
        Fp x18331 = x18328 + x18330;
        Fp x18332 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x18333 = x18332 * x6;
        Fp x18334 = x18331 + x18333;
        Fp x18335 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x18336 = x18335 * x11;
        Fp x18337 = x18334 + x18336;
        Fp x18338 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x18339 = x18338 * x27;
        Fp x18340 = x18337 + x18339;
        Fp x18341 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x18342 = x18341 * x12;
        Fp x18343 = x18340 + x18342;
        Fp x18344 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x18345 = x18344 * x28;
        Fp x18346 = x18343 + x18345;
        Fp x18347 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x18348 = x18347 * x13;
        Fp x18349 = x18346 + x18348;
        Fp x18350 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x18351 = x18350 * x29;
        Fp x18352 = x18349 + x18351;
        Fp x18353 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x18354 = x18353 * x14;
        Fp x18355 = x18352 + x18354;
        Fp x18356 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x18357 = x18356 * x30;
        Fp x18358 = x18355 + x18357;
        Fp x18359 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x18360 = x18359 * x15;
        Fp x18361 = x18358 + x18360;
        Fp x18362 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x18363 = x18362 * x31;
        Fp x18364 = x18361 + x18363;
        Fp x18365 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x18366 = x18365 * x16;
        Fp x18367 = x18364 + x18366;
        Fp x18368 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x18369 = x18368 * x32;
        Fp x18370 = x18367 + x18369;
        Fp x18371 = x18184 - x18370;
        Fp x18372 = x18371 * x33;
        if (x18372 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:55");
        {
          Fp x18373 = (x18040 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x18373;
          Fp x18374 = x18040 - x71;
          Fp x18375 = (x18374 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x18375;
          Fp x18376 = x18040 - x1;
          Fp x18377 = (x18376 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x18377;
          Fp x18378 = x18040 - x2;
          Fp x18379 = (x18378 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x18379;
        }
        Fp x18380 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x18381 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x18382 = x18381 * x1;
        Fp x18383 = x18380 + x18382;
        Fp x18384 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x18385 = x18384 * x2;
        Fp x18386 = x18383 + x18385;
        Fp x18387 = x18386 - x18040;
        if (x18387 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x18388 = x18082 + x17;
        Fp x18389 = x18388 - x18276;
        Fp x18390 = x18178 + x35;
        Fp x18391 = x18390 - x18370;
        {
          Fp x18392 = Fp(x18389.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x18392;
          Fp x18393 = x18389 - x18392;
          Fp x18394 = x18393 * x26;
          Fp x18395 = Fp(x18394.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x18395;
          Fp x18396 = x18394 - x18395;
          Fp x18397 = x18396 * x26;
          Fp x18398 = Fp(x18397.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x18398;
          Fp x18399 = x18397 - x18398;
          Fp x18400 = x18399 * x26;
          Fp x18401 = Fp(x18400.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x18401;
          Fp x18402 = x18400 - x18401;
          Fp x18403 = x18402 * x26;
          Fp x18404 = Fp(x18403.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x18404;
          Fp x18405 = x18403 - x18404;
          Fp x18406 = x18405 * x26;
          Fp x18407 = Fp(x18406.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x18407;
          Fp x18408 = x18406 - x18407;
          Fp x18409 = x18408 * x26;
          Fp x18410 = Fp(x18409.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x18410;
          Fp x18411 = x18409 - x18410;
          Fp x18412 = x18411 * x26;
          Fp x18413 = Fp(x18412.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x18413;
          Fp x18414 = x18412 - x18413;
          Fp x18415 = x18414 * x26;
          Fp x18416 = Fp(x18415.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x18416;
          Fp x18417 = x18415 - x18416;
          Fp x18418 = x18417 * x26;
          Fp x18419 = Fp(x18418.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x18419;
          Fp x18420 = x18418 - x18419;
          Fp x18421 = x18420 * x26;
          Fp x18422 = Fp(x18421.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x18422;
          Fp x18423 = x18421 - x18422;
          Fp x18424 = x18423 * x26;
          Fp x18425 = Fp(x18424.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x18425;
          Fp x18426 = x18424 - x18425;
          Fp x18427 = x18426 * x26;
          Fp x18428 = Fp(x18427.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x18428;
          Fp x18429 = x18427 - x18428;
          Fp x18430 = x18429 * x26;
          Fp x18431 = Fp(x18430.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x18431;
          Fp x18432 = x18430 - x18431;
          Fp x18433 = x18432 * x26;
          Fp x18434 = Fp(x18433.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x18434;
          Fp x18435 = x18433 - x18434;
          Fp x18436 = x18435 * x26;
          Fp x18437 = Fp(x18436.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x18437;
        }
        Fp x18438 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x18439 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x18440 = x18439 * x1;
        Fp x18441 = x18438 + x18440;
        Fp x18442 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x18443 = x18442 * x3;
        Fp x18444 = x18441 + x18443;
        Fp x18445 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x18446 = x18445 * x6;
        Fp x18447 = x18444 + x18446;
        Fp x18448 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x18449 = x18448 * x11;
        Fp x18450 = x18447 + x18449;
        Fp x18451 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x18452 = x18451 * x27;
        Fp x18453 = x18450 + x18452;
        Fp x18454 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x18455 = x18454 * x12;
        Fp x18456 = x18453 + x18455;
        Fp x18457 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x18458 = x18457 * x28;
        Fp x18459 = x18456 + x18458;
        Fp x18460 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x18461 = x18460 * x13;
        Fp x18462 = x18459 + x18461;
        Fp x18463 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x18464 = x18463 * x29;
        Fp x18465 = x18462 + x18464;
        Fp x18466 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x18467 = x18466 * x14;
        Fp x18468 = x18465 + x18467;
        Fp x18469 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x18470 = x18469 * x30;
        Fp x18471 = x18468 + x18470;
        Fp x18472 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x18473 = x18472 * x15;
        Fp x18474 = x18471 + x18473;
        Fp x18475 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x18476 = x18475 * x31;
        Fp x18477 = x18474 + x18476;
        Fp x18478 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x18479 = x18478 * x16;
        Fp x18480 = x18477 + x18479;
        Fp x18481 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x18482 = x18481 * x32;
        Fp x18483 = x18480 + x18482;
        Fp x18484 = x18389 - x18483;
        Fp x18485 = x18484 * x33;
        args[2][108 * steps + cycle] = x18485;
        Fp x18486 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x18487 = x18391 + x18486;
        {
          Fp x18488 = Fp(x18487.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x18488;
          Fp x18489 = x18487 - x18488;
          Fp x18490 = x18489 * x26;
          Fp x18491 = Fp(x18490.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x18491;
          Fp x18492 = x18490 - x18491;
          Fp x18493 = x18492 * x26;
          Fp x18494 = Fp(x18493.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x18494;
          Fp x18495 = x18493 - x18494;
          Fp x18496 = x18495 * x26;
          Fp x18497 = Fp(x18496.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x18497;
          Fp x18498 = x18496 - x18497;
          Fp x18499 = x18498 * x26;
          Fp x18500 = Fp(x18499.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x18500;
          Fp x18501 = x18499 - x18500;
          Fp x18502 = x18501 * x26;
          Fp x18503 = Fp(x18502.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x18503;
          Fp x18504 = x18502 - x18503;
          Fp x18505 = x18504 * x26;
          Fp x18506 = Fp(x18505.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x18506;
          Fp x18507 = x18505 - x18506;
          Fp x18508 = x18507 * x26;
          Fp x18509 = Fp(x18508.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x18509;
          Fp x18510 = x18508 - x18509;
          Fp x18511 = x18510 * x26;
          Fp x18512 = Fp(x18511.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x18512;
          Fp x18513 = x18511 - x18512;
          Fp x18514 = x18513 * x26;
          Fp x18515 = Fp(x18514.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x18515;
          Fp x18516 = x18514 - x18515;
          Fp x18517 = x18516 * x26;
          Fp x18518 = Fp(x18517.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x18518;
          Fp x18519 = x18517 - x18518;
          Fp x18520 = x18519 * x26;
          Fp x18521 = Fp(x18520.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x18521;
          Fp x18522 = x18520 - x18521;
          Fp x18523 = x18522 * x26;
          Fp x18524 = Fp(x18523.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x18524;
          Fp x18525 = x18523 - x18524;
          Fp x18526 = x18525 * x26;
          Fp x18527 = Fp(x18526.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x18527;
          Fp x18528 = x18526 - x18527;
          Fp x18529 = x18528 * x26;
          Fp x18530 = Fp(x18529.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x18530;
          Fp x18531 = x18529 - x18530;
          Fp x18532 = x18531 * x26;
          Fp x18533 = Fp(x18532.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x18533;
        }
        Fp x18534 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x18535 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x18536 = x18535 * x1;
        Fp x18537 = x18534 + x18536;
        Fp x18538 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x18539 = x18538 * x3;
        Fp x18540 = x18537 + x18539;
        Fp x18541 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x18542 = x18541 * x6;
        Fp x18543 = x18540 + x18542;
        Fp x18544 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x18545 = x18544 * x11;
        Fp x18546 = x18543 + x18545;
        Fp x18547 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x18548 = x18547 * x27;
        Fp x18549 = x18546 + x18548;
        Fp x18550 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x18551 = x18550 * x12;
        Fp x18552 = x18549 + x18551;
        Fp x18553 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x18554 = x18553 * x28;
        Fp x18555 = x18552 + x18554;
        Fp x18556 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x18557 = x18556 * x13;
        Fp x18558 = x18555 + x18557;
        Fp x18559 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x18560 = x18559 * x29;
        Fp x18561 = x18558 + x18560;
        Fp x18562 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x18563 = x18562 * x14;
        Fp x18564 = x18561 + x18563;
        Fp x18565 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x18566 = x18565 * x30;
        Fp x18567 = x18564 + x18566;
        Fp x18568 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x18569 = x18568 * x15;
        Fp x18570 = x18567 + x18569;
        Fp x18571 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x18572 = x18571 * x31;
        Fp x18573 = x18570 + x18572;
        Fp x18574 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x18575 = x18574 * x16;
        Fp x18576 = x18573 + x18575;
        Fp x18577 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x18578 = x18577 * x32;
        Fp x18579 = x18576 + x18578;
        Fp x18580 = x18487 - x18579;
        Fp x18581 = x18580 * x33;
        args[2][109 * steps + cycle] = x18581;
        {
          {
            Fp x18582 = (x18483 == 0) ? Fp(1) : Fp(0);
            Fp x18583 = x71 - x18582;
            args[2][114 * steps + cycle] = x18583;
            Fp x18584 = inv(x18483);
            args[2][115 * steps + cycle] = x18584;
          }
          Fp x18585 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x18586 = x18483 * x18585;
          Fp x18587 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x18588 = x18586 - x18587;
          if (x18588 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x18589 = x71 - x18587;
          Fp x18590 = x18589 * x18483;
          if (x18590 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x18591 = (x18579 == 0) ? Fp(1) : Fp(0);
            Fp x18592 = x71 - x18591;
            args[2][116 * steps + cycle] = x18592;
            Fp x18593 = inv(x18579);
            args[2][117 * steps + cycle] = x18593;
          }
          Fp x18594 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x18595 = x18579 * x18594;
          Fp x18596 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x18597 = x18595 - x18596;
          if (x18597 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x18598 = x71 - x18596;
          Fp x18599 = x18598 * x18579;
          if (x18599 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x18600 = x18589 * x18598;
          Fp x18601 = x71 - x18600;
          args[2][111 * steps + cycle] = x18601;
          Fp x18602 = x71 - x18368;
          Fp x18603 = x18176 * x18602;
          Fp x18604 = x71 - x18577;
          Fp x18605 = x18603 * x18604;
          Fp x18606 = x71 - x18176;
          Fp x18607 = x18606 * x18368;
          Fp x18608 = x18607 * x18577;
          Fp x18609 = x18605 + x18608;
          args[2][112 * steps + cycle] = x18609;
          Fp x18610 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x18611 = x18610 + x18577;
          Fp x18612 = x18610 * x1;
          Fp x18613 = x18612 * x18577;
          Fp x18614 = x18611 - x18613;
          args[2][113 * steps + cycle] = x18614;
        }
        Fp x18615 = args[2][113 * steps + ((cycle - 0) & mask)];
        args[2][100 * steps + cycle] = x18615;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x18616 = x14387 + x3;
        args[2][104 * steps + cycle] = x18616;
        args[2][105 * steps + cycle] = x14409;
        Fp x18617 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x18618 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x18619 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x18620 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x18621 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14409;
        host_args[2] = x14387;
        host_args[3] = x18178;
        host_args[4] = x18082;
        host_args[5] = x18370;
        host_args[6] = x18276;
        host_args[7] = x18579;
        host_args[8] = x18483;
        host_args[9] = x18617;
        host_args[10] = x18618;
        host_args[11] = x18619;
        host_args[12] = x18615;
        host_args[13] = x18620;
        host_args[14] = x18621;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x18622 = args[2][78 * steps + ((cycle - 1) & mask)];
      if (x18622 != 0) {
        {
          Fp x18623 = Fp(x14362.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x18623;
          Fp x18624 = x14362 - x18623;
          Fp x18625 = x18624 * x26;
          Fp x18626 = Fp(x18625.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x18626;
          Fp x18627 = x18625 - x18626;
          Fp x18628 = x18627 * x26;
          Fp x18629 = Fp(x18628.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x18629;
          Fp x18630 = x18628 - x18629;
          Fp x18631 = x18630 * x26;
          Fp x18632 = Fp(x18631.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x18632;
          Fp x18633 = x18631 - x18632;
          Fp x18634 = x18633 * x26;
          Fp x18635 = Fp(x18634.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x18635;
          Fp x18636 = x18634 - x18635;
          Fp x18637 = x18636 * x26;
          Fp x18638 = Fp(x18637.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x18638;
          Fp x18639 = x18637 - x18638;
          Fp x18640 = x18639 * x26;
          Fp x18641 = Fp(x18640.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x18641;
          Fp x18642 = x18640 - x18641;
          Fp x18643 = x18642 * x26;
          Fp x18644 = Fp(x18643.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x18644;
          Fp x18645 = x18643 - x18644;
          Fp x18646 = x18645 * x26;
          Fp x18647 = Fp(x18646.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x18647;
          Fp x18648 = x18646 - x18647;
          Fp x18649 = x18648 * x26;
          Fp x18650 = Fp(x18649.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x18650;
          Fp x18651 = x18649 - x18650;
          Fp x18652 = x18651 * x26;
          Fp x18653 = Fp(x18652.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x18653;
          Fp x18654 = x18652 - x18653;
          Fp x18655 = x18654 * x26;
          Fp x18656 = Fp(x18655.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x18656;
          Fp x18657 = x18655 - x18656;
          Fp x18658 = x18657 * x26;
          Fp x18659 = Fp(x18658.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x18659;
          Fp x18660 = x18658 - x18659;
          Fp x18661 = x18660 * x26;
          Fp x18662 = Fp(x18661.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x18662;
          Fp x18663 = x18661 - x18662;
          Fp x18664 = x18663 * x26;
          Fp x18665 = Fp(x18664.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x18665;
          Fp x18666 = x18664 - x18665;
          Fp x18667 = x18666 * x26;
          Fp x18668 = Fp(x18667.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x18668;
        }
        Fp x18669 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x18670 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x18671 = x18670 * x1;
        Fp x18672 = x18669 + x18671;
        Fp x18673 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x18674 = x18673 * x3;
        Fp x18675 = x18672 + x18674;
        Fp x18676 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x18677 = x18676 * x6;
        Fp x18678 = x18675 + x18677;
        Fp x18679 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x18680 = x18679 * x11;
        Fp x18681 = x18678 + x18680;
        Fp x18682 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x18683 = x18682 * x27;
        Fp x18684 = x18681 + x18683;
        Fp x18685 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x18686 = x18685 * x12;
        Fp x18687 = x18684 + x18686;
        Fp x18688 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x18689 = x18688 * x28;
        Fp x18690 = x18687 + x18689;
        Fp x18691 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x18692 = x18691 * x13;
        Fp x18693 = x18690 + x18692;
        Fp x18694 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x18695 = x18694 * x29;
        Fp x18696 = x18693 + x18695;
        Fp x18697 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x18698 = x18697 * x14;
        Fp x18699 = x18696 + x18698;
        Fp x18700 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x18701 = x18700 * x30;
        Fp x18702 = x18699 + x18701;
        Fp x18703 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x18704 = x18703 * x15;
        Fp x18705 = x18702 + x18704;
        Fp x18706 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x18707 = x18706 * x31;
        Fp x18708 = x18705 + x18707;
        Fp x18709 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x18710 = x18709 * x16;
        Fp x18711 = x18708 + x18710;
        Fp x18712 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x18713 = x18712 * x32;
        Fp x18714 = x18711 + x18713;
        Fp x18715 = x14362 - x18714;
        Fp x18716 = x18715 * x33;
        args[2][106 * steps + cycle] = x18716;
        Fp x18717 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x18718 = x14363 + x18717;
        {
          Fp x18719 = Fp(x18718.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x18719;
          Fp x18720 = x18718 - x18719;
          Fp x18721 = x18720 * x26;
          Fp x18722 = Fp(x18721.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x18722;
          Fp x18723 = x18721 - x18722;
          Fp x18724 = x18723 * x26;
          Fp x18725 = Fp(x18724.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x18725;
          Fp x18726 = x18724 - x18725;
          Fp x18727 = x18726 * x26;
          Fp x18728 = Fp(x18727.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x18728;
          Fp x18729 = x18727 - x18728;
          Fp x18730 = x18729 * x26;
          Fp x18731 = Fp(x18730.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x18731;
          Fp x18732 = x18730 - x18731;
          Fp x18733 = x18732 * x26;
          Fp x18734 = Fp(x18733.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x18734;
          Fp x18735 = x18733 - x18734;
          Fp x18736 = x18735 * x26;
          Fp x18737 = Fp(x18736.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x18737;
          Fp x18738 = x18736 - x18737;
          Fp x18739 = x18738 * x26;
          Fp x18740 = Fp(x18739.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x18740;
          Fp x18741 = x18739 - x18740;
          Fp x18742 = x18741 * x26;
          Fp x18743 = Fp(x18742.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x18743;
          Fp x18744 = x18742 - x18743;
          Fp x18745 = x18744 * x26;
          Fp x18746 = Fp(x18745.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x18746;
          Fp x18747 = x18745 - x18746;
          Fp x18748 = x18747 * x26;
          Fp x18749 = Fp(x18748.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x18749;
          Fp x18750 = x18748 - x18749;
          Fp x18751 = x18750 * x26;
          Fp x18752 = Fp(x18751.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x18752;
          Fp x18753 = x18751 - x18752;
          Fp x18754 = x18753 * x26;
          Fp x18755 = Fp(x18754.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x18755;
          Fp x18756 = x18754 - x18755;
          Fp x18757 = x18756 * x26;
          Fp x18758 = Fp(x18757.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x18758;
          Fp x18759 = x18757 - x18758;
          Fp x18760 = x18759 * x26;
          Fp x18761 = Fp(x18760.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x18761;
          Fp x18762 = x18760 - x18761;
          Fp x18763 = x18762 * x26;
          Fp x18764 = Fp(x18763.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x18764;
        }
        Fp x18765 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x18766 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x18767 = x18766 * x1;
        Fp x18768 = x18765 + x18767;
        Fp x18769 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x18770 = x18769 * x3;
        Fp x18771 = x18768 + x18770;
        Fp x18772 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x18773 = x18772 * x6;
        Fp x18774 = x18771 + x18773;
        Fp x18775 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x18776 = x18775 * x11;
        Fp x18777 = x18774 + x18776;
        Fp x18778 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x18779 = x18778 * x27;
        Fp x18780 = x18777 + x18779;
        Fp x18781 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x18782 = x18781 * x12;
        Fp x18783 = x18780 + x18782;
        Fp x18784 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x18785 = x18784 * x28;
        Fp x18786 = x18783 + x18785;
        Fp x18787 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x18788 = x18787 * x13;
        Fp x18789 = x18786 + x18788;
        Fp x18790 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x18791 = x18790 * x29;
        Fp x18792 = x18789 + x18791;
        Fp x18793 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x18794 = x18793 * x14;
        Fp x18795 = x18792 + x18794;
        Fp x18796 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x18797 = x18796 * x30;
        Fp x18798 = x18795 + x18797;
        Fp x18799 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x18800 = x18799 * x15;
        Fp x18801 = x18798 + x18800;
        Fp x18802 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x18803 = x18802 * x31;
        Fp x18804 = x18801 + x18803;
        Fp x18805 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x18806 = x18805 * x16;
        Fp x18807 = x18804 + x18806;
        Fp x18808 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x18809 = x18808 * x32;
        Fp x18810 = x18807 + x18809;
        Fp x18811 = x18718 - x18810;
        Fp x18812 = x18811 * x33;
        args[2][107 * steps + cycle] = x18812;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x18813 = host_outs[0];
          Fp x18814 = host_outs[1];
          args[2][129 * steps + cycle] = x18813;
          args[2][130 * steps + cycle] = x18814;
        }
        Fp x18815 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x18816 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x18817 = Fp(x18815.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x18817;
          Fp x18818 = x18815 - x18817;
          Fp x18819 = x18818 * x26;
          Fp x18820 = Fp(x18819.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x18820;
          Fp x18821 = x18819 - x18820;
          Fp x18822 = x18821 * x26;
          Fp x18823 = Fp(x18822.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x18823;
          Fp x18824 = x18822 - x18823;
          Fp x18825 = x18824 * x26;
          Fp x18826 = Fp(x18825.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x18826;
          Fp x18827 = x18825 - x18826;
          Fp x18828 = x18827 * x26;
          Fp x18829 = Fp(x18828.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x18829;
          Fp x18830 = x18828 - x18829;
          Fp x18831 = x18830 * x26;
          Fp x18832 = Fp(x18831.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x18832;
          Fp x18833 = x18831 - x18832;
          Fp x18834 = x18833 * x26;
          Fp x18835 = Fp(x18834.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x18835;
          Fp x18836 = x18834 - x18835;
          Fp x18837 = x18836 * x26;
          Fp x18838 = Fp(x18837.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x18838;
          Fp x18839 = x18837 - x18838;
          Fp x18840 = x18839 * x26;
          Fp x18841 = Fp(x18840.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x18841;
          Fp x18842 = x18840 - x18841;
          Fp x18843 = x18842 * x26;
          Fp x18844 = Fp(x18843.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x18844;
          Fp x18845 = x18843 - x18844;
          Fp x18846 = x18845 * x26;
          Fp x18847 = Fp(x18846.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x18847;
          Fp x18848 = x18846 - x18847;
          Fp x18849 = x18848 * x26;
          Fp x18850 = Fp(x18849.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x18850;
          Fp x18851 = x18849 - x18850;
          Fp x18852 = x18851 * x26;
          Fp x18853 = Fp(x18852.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x18853;
          Fp x18854 = x18852 - x18853;
          Fp x18855 = x18854 * x26;
          Fp x18856 = Fp(x18855.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x18856;
          Fp x18857 = x18855 - x18856;
          Fp x18858 = x18857 * x26;
          Fp x18859 = Fp(x18858.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x18859;
          Fp x18860 = x18858 - x18859;
          Fp x18861 = x18860 * x26;
          Fp x18862 = Fp(x18861.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x18862;
        }
        Fp x18863 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x18864 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x18865 = x18864 * x1;
        Fp x18866 = x18863 + x18865;
        Fp x18867 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x18868 = x18867 * x3;
        Fp x18869 = x18866 + x18868;
        Fp x18870 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x18871 = x18870 * x6;
        Fp x18872 = x18869 + x18871;
        Fp x18873 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x18874 = x18873 * x11;
        Fp x18875 = x18872 + x18874;
        Fp x18876 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x18877 = x18876 * x27;
        Fp x18878 = x18875 + x18877;
        Fp x18879 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x18880 = x18879 * x12;
        Fp x18881 = x18878 + x18880;
        Fp x18882 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x18883 = x18882 * x28;
        Fp x18884 = x18881 + x18883;
        Fp x18885 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x18886 = x18885 * x13;
        Fp x18887 = x18884 + x18886;
        Fp x18888 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x18889 = x18888 * x29;
        Fp x18890 = x18887 + x18889;
        Fp x18891 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x18892 = x18891 * x14;
        Fp x18893 = x18890 + x18892;
        Fp x18894 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x18895 = x18894 * x30;
        Fp x18896 = x18893 + x18895;
        Fp x18897 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x18898 = x18897 * x15;
        Fp x18899 = x18896 + x18898;
        Fp x18900 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x18901 = x18900 * x31;
        Fp x18902 = x18899 + x18901;
        Fp x18903 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x18904 = x18903 * x16;
        Fp x18905 = x18902 + x18904;
        Fp x18906 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x18907 = x18906 * x32;
        Fp x18908 = x18905 + x18907;
        Fp x18909 = x18815 - x18908;
        Fp x18910 = x18909 * x33;
        if (x18910 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:56");
        {
          Fp x18911 = Fp(x18816.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x18911;
          Fp x18912 = x18816 - x18911;
          Fp x18913 = x18912 * x26;
          Fp x18914 = Fp(x18913.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x18914;
          Fp x18915 = x18913 - x18914;
          Fp x18916 = x18915 * x26;
          Fp x18917 = Fp(x18916.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x18917;
          Fp x18918 = x18916 - x18917;
          Fp x18919 = x18918 * x26;
          Fp x18920 = Fp(x18919.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x18920;
          Fp x18921 = x18919 - x18920;
          Fp x18922 = x18921 * x26;
          Fp x18923 = Fp(x18922.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x18923;
          Fp x18924 = x18922 - x18923;
          Fp x18925 = x18924 * x26;
          Fp x18926 = Fp(x18925.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x18926;
          Fp x18927 = x18925 - x18926;
          Fp x18928 = x18927 * x26;
          Fp x18929 = Fp(x18928.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x18929;
          Fp x18930 = x18928 - x18929;
          Fp x18931 = x18930 * x26;
          Fp x18932 = Fp(x18931.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x18932;
          Fp x18933 = x18931 - x18932;
          Fp x18934 = x18933 * x26;
          Fp x18935 = Fp(x18934.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x18935;
          Fp x18936 = x18934 - x18935;
          Fp x18937 = x18936 * x26;
          Fp x18938 = Fp(x18937.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x18938;
          Fp x18939 = x18937 - x18938;
          Fp x18940 = x18939 * x26;
          Fp x18941 = Fp(x18940.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x18941;
          Fp x18942 = x18940 - x18941;
          Fp x18943 = x18942 * x26;
          Fp x18944 = Fp(x18943.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x18944;
          Fp x18945 = x18943 - x18944;
          Fp x18946 = x18945 * x26;
          Fp x18947 = Fp(x18946.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x18947;
          Fp x18948 = x18946 - x18947;
          Fp x18949 = x18948 * x26;
          Fp x18950 = Fp(x18949.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x18950;
          Fp x18951 = x18949 - x18950;
          Fp x18952 = x18951 * x26;
          Fp x18953 = Fp(x18952.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x18953;
          Fp x18954 = x18952 - x18953;
          Fp x18955 = x18954 * x26;
          Fp x18956 = Fp(x18955.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x18956;
        }
        Fp x18957 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x18958 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x18959 = x18958 * x1;
        Fp x18960 = x18957 + x18959;
        Fp x18961 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x18962 = x18961 * x3;
        Fp x18963 = x18960 + x18962;
        Fp x18964 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x18965 = x18964 * x6;
        Fp x18966 = x18963 + x18965;
        Fp x18967 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x18968 = x18967 * x11;
        Fp x18969 = x18966 + x18968;
        Fp x18970 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x18971 = x18970 * x27;
        Fp x18972 = x18969 + x18971;
        Fp x18973 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x18974 = x18973 * x12;
        Fp x18975 = x18972 + x18974;
        Fp x18976 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x18977 = x18976 * x28;
        Fp x18978 = x18975 + x18977;
        Fp x18979 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x18980 = x18979 * x13;
        Fp x18981 = x18978 + x18980;
        Fp x18982 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x18983 = x18982 * x29;
        Fp x18984 = x18981 + x18983;
        Fp x18985 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x18986 = x18985 * x14;
        Fp x18987 = x18984 + x18986;
        Fp x18988 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x18989 = x18988 * x30;
        Fp x18990 = x18987 + x18989;
        Fp x18991 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x18992 = x18991 * x15;
        Fp x18993 = x18990 + x18992;
        Fp x18994 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x18995 = x18994 * x31;
        Fp x18996 = x18993 + x18995;
        Fp x18997 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x18998 = x18997 * x16;
        Fp x18999 = x18996 + x18998;
        Fp x19000 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x19001 = x19000 * x32;
        Fp x19002 = x18999 + x19001;
        Fp x19003 = x18816 - x19002;
        Fp x19004 = x19003 * x33;
        if (x19004 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:56");
        {
          Fp x19005 = (x18672 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x19005;
          Fp x19006 = x18672 - x71;
          Fp x19007 = (x19006 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x19007;
          Fp x19008 = x18672 - x1;
          Fp x19009 = (x19008 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x19009;
          Fp x19010 = x18672 - x2;
          Fp x19011 = (x19010 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x19011;
        }
        Fp x19012 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x19013 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x19014 = x19013 * x1;
        Fp x19015 = x19012 + x19014;
        Fp x19016 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x19017 = x19016 * x2;
        Fp x19018 = x19015 + x19017;
        Fp x19019 = x19018 - x18672;
        if (x19019 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x19020 = x18714 + x17;
        Fp x19021 = x19020 - x18908;
        Fp x19022 = x18810 + x35;
        Fp x19023 = x19022 - x19002;
        {
          Fp x19024 = Fp(x19021.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x19024;
          Fp x19025 = x19021 - x19024;
          Fp x19026 = x19025 * x26;
          Fp x19027 = Fp(x19026.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x19027;
          Fp x19028 = x19026 - x19027;
          Fp x19029 = x19028 * x26;
          Fp x19030 = Fp(x19029.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x19030;
          Fp x19031 = x19029 - x19030;
          Fp x19032 = x19031 * x26;
          Fp x19033 = Fp(x19032.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x19033;
          Fp x19034 = x19032 - x19033;
          Fp x19035 = x19034 * x26;
          Fp x19036 = Fp(x19035.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x19036;
          Fp x19037 = x19035 - x19036;
          Fp x19038 = x19037 * x26;
          Fp x19039 = Fp(x19038.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x19039;
          Fp x19040 = x19038 - x19039;
          Fp x19041 = x19040 * x26;
          Fp x19042 = Fp(x19041.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x19042;
          Fp x19043 = x19041 - x19042;
          Fp x19044 = x19043 * x26;
          Fp x19045 = Fp(x19044.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x19045;
          Fp x19046 = x19044 - x19045;
          Fp x19047 = x19046 * x26;
          Fp x19048 = Fp(x19047.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x19048;
          Fp x19049 = x19047 - x19048;
          Fp x19050 = x19049 * x26;
          Fp x19051 = Fp(x19050.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x19051;
          Fp x19052 = x19050 - x19051;
          Fp x19053 = x19052 * x26;
          Fp x19054 = Fp(x19053.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x19054;
          Fp x19055 = x19053 - x19054;
          Fp x19056 = x19055 * x26;
          Fp x19057 = Fp(x19056.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x19057;
          Fp x19058 = x19056 - x19057;
          Fp x19059 = x19058 * x26;
          Fp x19060 = Fp(x19059.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x19060;
          Fp x19061 = x19059 - x19060;
          Fp x19062 = x19061 * x26;
          Fp x19063 = Fp(x19062.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x19063;
          Fp x19064 = x19062 - x19063;
          Fp x19065 = x19064 * x26;
          Fp x19066 = Fp(x19065.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x19066;
          Fp x19067 = x19065 - x19066;
          Fp x19068 = x19067 * x26;
          Fp x19069 = Fp(x19068.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x19069;
        }
        Fp x19070 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x19071 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x19072 = x19071 * x1;
        Fp x19073 = x19070 + x19072;
        Fp x19074 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x19075 = x19074 * x3;
        Fp x19076 = x19073 + x19075;
        Fp x19077 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x19078 = x19077 * x6;
        Fp x19079 = x19076 + x19078;
        Fp x19080 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x19081 = x19080 * x11;
        Fp x19082 = x19079 + x19081;
        Fp x19083 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x19084 = x19083 * x27;
        Fp x19085 = x19082 + x19084;
        Fp x19086 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x19087 = x19086 * x12;
        Fp x19088 = x19085 + x19087;
        Fp x19089 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x19090 = x19089 * x28;
        Fp x19091 = x19088 + x19090;
        Fp x19092 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x19093 = x19092 * x13;
        Fp x19094 = x19091 + x19093;
        Fp x19095 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x19096 = x19095 * x29;
        Fp x19097 = x19094 + x19096;
        Fp x19098 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x19099 = x19098 * x14;
        Fp x19100 = x19097 + x19099;
        Fp x19101 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x19102 = x19101 * x30;
        Fp x19103 = x19100 + x19102;
        Fp x19104 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x19105 = x19104 * x15;
        Fp x19106 = x19103 + x19105;
        Fp x19107 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x19108 = x19107 * x31;
        Fp x19109 = x19106 + x19108;
        Fp x19110 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x19111 = x19110 * x16;
        Fp x19112 = x19109 + x19111;
        Fp x19113 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x19114 = x19113 * x32;
        Fp x19115 = x19112 + x19114;
        Fp x19116 = x19021 - x19115;
        Fp x19117 = x19116 * x33;
        args[2][108 * steps + cycle] = x19117;
        Fp x19118 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x19119 = x19023 + x19118;
        {
          Fp x19120 = Fp(x19119.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x19120;
          Fp x19121 = x19119 - x19120;
          Fp x19122 = x19121 * x26;
          Fp x19123 = Fp(x19122.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x19123;
          Fp x19124 = x19122 - x19123;
          Fp x19125 = x19124 * x26;
          Fp x19126 = Fp(x19125.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x19126;
          Fp x19127 = x19125 - x19126;
          Fp x19128 = x19127 * x26;
          Fp x19129 = Fp(x19128.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x19129;
          Fp x19130 = x19128 - x19129;
          Fp x19131 = x19130 * x26;
          Fp x19132 = Fp(x19131.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x19132;
          Fp x19133 = x19131 - x19132;
          Fp x19134 = x19133 * x26;
          Fp x19135 = Fp(x19134.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x19135;
          Fp x19136 = x19134 - x19135;
          Fp x19137 = x19136 * x26;
          Fp x19138 = Fp(x19137.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x19138;
          Fp x19139 = x19137 - x19138;
          Fp x19140 = x19139 * x26;
          Fp x19141 = Fp(x19140.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x19141;
          Fp x19142 = x19140 - x19141;
          Fp x19143 = x19142 * x26;
          Fp x19144 = Fp(x19143.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x19144;
          Fp x19145 = x19143 - x19144;
          Fp x19146 = x19145 * x26;
          Fp x19147 = Fp(x19146.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x19147;
          Fp x19148 = x19146 - x19147;
          Fp x19149 = x19148 * x26;
          Fp x19150 = Fp(x19149.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x19150;
          Fp x19151 = x19149 - x19150;
          Fp x19152 = x19151 * x26;
          Fp x19153 = Fp(x19152.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x19153;
          Fp x19154 = x19152 - x19153;
          Fp x19155 = x19154 * x26;
          Fp x19156 = Fp(x19155.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x19156;
          Fp x19157 = x19155 - x19156;
          Fp x19158 = x19157 * x26;
          Fp x19159 = Fp(x19158.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x19159;
          Fp x19160 = x19158 - x19159;
          Fp x19161 = x19160 * x26;
          Fp x19162 = Fp(x19161.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x19162;
          Fp x19163 = x19161 - x19162;
          Fp x19164 = x19163 * x26;
          Fp x19165 = Fp(x19164.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x19165;
        }
        Fp x19166 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x19167 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x19168 = x19167 * x1;
        Fp x19169 = x19166 + x19168;
        Fp x19170 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x19171 = x19170 * x3;
        Fp x19172 = x19169 + x19171;
        Fp x19173 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x19174 = x19173 * x6;
        Fp x19175 = x19172 + x19174;
        Fp x19176 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x19177 = x19176 * x11;
        Fp x19178 = x19175 + x19177;
        Fp x19179 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x19180 = x19179 * x27;
        Fp x19181 = x19178 + x19180;
        Fp x19182 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x19183 = x19182 * x12;
        Fp x19184 = x19181 + x19183;
        Fp x19185 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x19186 = x19185 * x28;
        Fp x19187 = x19184 + x19186;
        Fp x19188 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x19189 = x19188 * x13;
        Fp x19190 = x19187 + x19189;
        Fp x19191 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x19192 = x19191 * x29;
        Fp x19193 = x19190 + x19192;
        Fp x19194 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x19195 = x19194 * x14;
        Fp x19196 = x19193 + x19195;
        Fp x19197 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x19198 = x19197 * x30;
        Fp x19199 = x19196 + x19198;
        Fp x19200 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x19201 = x19200 * x15;
        Fp x19202 = x19199 + x19201;
        Fp x19203 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x19204 = x19203 * x31;
        Fp x19205 = x19202 + x19204;
        Fp x19206 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x19207 = x19206 * x16;
        Fp x19208 = x19205 + x19207;
        Fp x19209 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x19210 = x19209 * x32;
        Fp x19211 = x19208 + x19210;
        Fp x19212 = x19119 - x19211;
        Fp x19213 = x19212 * x33;
        args[2][109 * steps + cycle] = x19213;
        {
          {
            Fp x19214 = (x19115 == 0) ? Fp(1) : Fp(0);
            Fp x19215 = x71 - x19214;
            args[2][114 * steps + cycle] = x19215;
            Fp x19216 = inv(x19115);
            args[2][115 * steps + cycle] = x19216;
          }
          Fp x19217 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x19218 = x19115 * x19217;
          Fp x19219 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x19220 = x19218 - x19219;
          if (x19220 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x19221 = x71 - x19219;
          Fp x19222 = x19221 * x19115;
          if (x19222 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x19223 = (x19211 == 0) ? Fp(1) : Fp(0);
            Fp x19224 = x71 - x19223;
            args[2][116 * steps + cycle] = x19224;
            Fp x19225 = inv(x19211);
            args[2][117 * steps + cycle] = x19225;
          }
          Fp x19226 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x19227 = x19211 * x19226;
          Fp x19228 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x19229 = x19227 - x19228;
          if (x19229 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x19230 = x71 - x19228;
          Fp x19231 = x19230 * x19211;
          if (x19231 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x19232 = x19221 * x19230;
          Fp x19233 = x71 - x19232;
          args[2][111 * steps + cycle] = x19233;
          Fp x19234 = x71 - x19000;
          Fp x19235 = x18808 * x19234;
          Fp x19236 = x71 - x19209;
          Fp x19237 = x19235 * x19236;
          Fp x19238 = x71 - x18808;
          Fp x19239 = x19238 * x19000;
          Fp x19240 = x19239 * x19209;
          Fp x19241 = x19237 + x19240;
          args[2][112 * steps + cycle] = x19241;
          Fp x19242 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x19243 = x19242 + x19209;
          Fp x19244 = x19242 * x1;
          Fp x19245 = x19244 * x19209;
          Fp x19246 = x19243 - x19245;
          args[2][113 * steps + cycle] = x19246;
        }
        Fp x19247 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x19248 = x71 - x19247;
        args[2][100 * steps + cycle] = x19248;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x19249 = x14387 + x3;
        args[2][104 * steps + cycle] = x19249;
        args[2][105 * steps + cycle] = x14409;
        Fp x19250 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x19251 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x19252 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x19253 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x19254 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14409;
        host_args[2] = x14387;
        host_args[3] = x18810;
        host_args[4] = x18714;
        host_args[5] = x19002;
        host_args[6] = x18908;
        host_args[7] = x19211;
        host_args[8] = x19115;
        host_args[9] = x19250;
        host_args[10] = x19247;
        host_args[11] = x19251;
        host_args[12] = x19252;
        host_args[13] = x19253;
        host_args[14] = x19254;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x19255 = args[2][79 * steps + ((cycle - 1) & mask)];
      if (x19255 != 0) {
        {
          Fp x19256 = Fp(x14362.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x19256;
          Fp x19257 = x14362 - x19256;
          Fp x19258 = x19257 * x26;
          Fp x19259 = Fp(x19258.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x19259;
          Fp x19260 = x19258 - x19259;
          Fp x19261 = x19260 * x26;
          Fp x19262 = Fp(x19261.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x19262;
          Fp x19263 = x19261 - x19262;
          Fp x19264 = x19263 * x26;
          Fp x19265 = Fp(x19264.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x19265;
          Fp x19266 = x19264 - x19265;
          Fp x19267 = x19266 * x26;
          Fp x19268 = Fp(x19267.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x19268;
          Fp x19269 = x19267 - x19268;
          Fp x19270 = x19269 * x26;
          Fp x19271 = Fp(x19270.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x19271;
          Fp x19272 = x19270 - x19271;
          Fp x19273 = x19272 * x26;
          Fp x19274 = Fp(x19273.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x19274;
          Fp x19275 = x19273 - x19274;
          Fp x19276 = x19275 * x26;
          Fp x19277 = Fp(x19276.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x19277;
          Fp x19278 = x19276 - x19277;
          Fp x19279 = x19278 * x26;
          Fp x19280 = Fp(x19279.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x19280;
          Fp x19281 = x19279 - x19280;
          Fp x19282 = x19281 * x26;
          Fp x19283 = Fp(x19282.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x19283;
          Fp x19284 = x19282 - x19283;
          Fp x19285 = x19284 * x26;
          Fp x19286 = Fp(x19285.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x19286;
          Fp x19287 = x19285 - x19286;
          Fp x19288 = x19287 * x26;
          Fp x19289 = Fp(x19288.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x19289;
          Fp x19290 = x19288 - x19289;
          Fp x19291 = x19290 * x26;
          Fp x19292 = Fp(x19291.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x19292;
          Fp x19293 = x19291 - x19292;
          Fp x19294 = x19293 * x26;
          Fp x19295 = Fp(x19294.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x19295;
          Fp x19296 = x19294 - x19295;
          Fp x19297 = x19296 * x26;
          Fp x19298 = Fp(x19297.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x19298;
          Fp x19299 = x19297 - x19298;
          Fp x19300 = x19299 * x26;
          Fp x19301 = Fp(x19300.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x19301;
        }
        Fp x19302 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x19303 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x19304 = x19303 * x1;
        Fp x19305 = x19302 + x19304;
        Fp x19306 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x19307 = x19306 * x3;
        Fp x19308 = x19305 + x19307;
        Fp x19309 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x19310 = x19309 * x6;
        Fp x19311 = x19308 + x19310;
        Fp x19312 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x19313 = x19312 * x11;
        Fp x19314 = x19311 + x19313;
        Fp x19315 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x19316 = x19315 * x27;
        Fp x19317 = x19314 + x19316;
        Fp x19318 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x19319 = x19318 * x12;
        Fp x19320 = x19317 + x19319;
        Fp x19321 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x19322 = x19321 * x28;
        Fp x19323 = x19320 + x19322;
        Fp x19324 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x19325 = x19324 * x13;
        Fp x19326 = x19323 + x19325;
        Fp x19327 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x19328 = x19327 * x29;
        Fp x19329 = x19326 + x19328;
        Fp x19330 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x19331 = x19330 * x14;
        Fp x19332 = x19329 + x19331;
        Fp x19333 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x19334 = x19333 * x30;
        Fp x19335 = x19332 + x19334;
        Fp x19336 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x19337 = x19336 * x15;
        Fp x19338 = x19335 + x19337;
        Fp x19339 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x19340 = x19339 * x31;
        Fp x19341 = x19338 + x19340;
        Fp x19342 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x19343 = x19342 * x16;
        Fp x19344 = x19341 + x19343;
        Fp x19345 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x19346 = x19345 * x32;
        Fp x19347 = x19344 + x19346;
        Fp x19348 = x14362 - x19347;
        Fp x19349 = x19348 * x33;
        args[2][106 * steps + cycle] = x19349;
        Fp x19350 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x19351 = x14363 + x19350;
        {
          Fp x19352 = Fp(x19351.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x19352;
          Fp x19353 = x19351 - x19352;
          Fp x19354 = x19353 * x26;
          Fp x19355 = Fp(x19354.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x19355;
          Fp x19356 = x19354 - x19355;
          Fp x19357 = x19356 * x26;
          Fp x19358 = Fp(x19357.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x19358;
          Fp x19359 = x19357 - x19358;
          Fp x19360 = x19359 * x26;
          Fp x19361 = Fp(x19360.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x19361;
          Fp x19362 = x19360 - x19361;
          Fp x19363 = x19362 * x26;
          Fp x19364 = Fp(x19363.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x19364;
          Fp x19365 = x19363 - x19364;
          Fp x19366 = x19365 * x26;
          Fp x19367 = Fp(x19366.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x19367;
          Fp x19368 = x19366 - x19367;
          Fp x19369 = x19368 * x26;
          Fp x19370 = Fp(x19369.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x19370;
          Fp x19371 = x19369 - x19370;
          Fp x19372 = x19371 * x26;
          Fp x19373 = Fp(x19372.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x19373;
          Fp x19374 = x19372 - x19373;
          Fp x19375 = x19374 * x26;
          Fp x19376 = Fp(x19375.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x19376;
          Fp x19377 = x19375 - x19376;
          Fp x19378 = x19377 * x26;
          Fp x19379 = Fp(x19378.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x19379;
          Fp x19380 = x19378 - x19379;
          Fp x19381 = x19380 * x26;
          Fp x19382 = Fp(x19381.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x19382;
          Fp x19383 = x19381 - x19382;
          Fp x19384 = x19383 * x26;
          Fp x19385 = Fp(x19384.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x19385;
          Fp x19386 = x19384 - x19385;
          Fp x19387 = x19386 * x26;
          Fp x19388 = Fp(x19387.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x19388;
          Fp x19389 = x19387 - x19388;
          Fp x19390 = x19389 * x26;
          Fp x19391 = Fp(x19390.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x19391;
          Fp x19392 = x19390 - x19391;
          Fp x19393 = x19392 * x26;
          Fp x19394 = Fp(x19393.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x19394;
          Fp x19395 = x19393 - x19394;
          Fp x19396 = x19395 * x26;
          Fp x19397 = Fp(x19396.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x19397;
        }
        Fp x19398 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x19399 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x19400 = x19399 * x1;
        Fp x19401 = x19398 + x19400;
        Fp x19402 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x19403 = x19402 * x3;
        Fp x19404 = x19401 + x19403;
        Fp x19405 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x19406 = x19405 * x6;
        Fp x19407 = x19404 + x19406;
        Fp x19408 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x19409 = x19408 * x11;
        Fp x19410 = x19407 + x19409;
        Fp x19411 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x19412 = x19411 * x27;
        Fp x19413 = x19410 + x19412;
        Fp x19414 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x19415 = x19414 * x12;
        Fp x19416 = x19413 + x19415;
        Fp x19417 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x19418 = x19417 * x28;
        Fp x19419 = x19416 + x19418;
        Fp x19420 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x19421 = x19420 * x13;
        Fp x19422 = x19419 + x19421;
        Fp x19423 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x19424 = x19423 * x29;
        Fp x19425 = x19422 + x19424;
        Fp x19426 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x19427 = x19426 * x14;
        Fp x19428 = x19425 + x19427;
        Fp x19429 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x19430 = x19429 * x30;
        Fp x19431 = x19428 + x19430;
        Fp x19432 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x19433 = x19432 * x15;
        Fp x19434 = x19431 + x19433;
        Fp x19435 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x19436 = x19435 * x31;
        Fp x19437 = x19434 + x19436;
        Fp x19438 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x19439 = x19438 * x16;
        Fp x19440 = x19437 + x19439;
        Fp x19441 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x19442 = x19441 * x32;
        Fp x19443 = x19440 + x19442;
        Fp x19444 = x19351 - x19443;
        Fp x19445 = x19444 * x33;
        args[2][107 * steps + cycle] = x19445;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x19446 = host_outs[0];
          Fp x19447 = host_outs[1];
          args[2][129 * steps + cycle] = x19446;
          args[2][130 * steps + cycle] = x19447;
        }
        {
          Fp x19448 = Fp(x14364.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x19448;
          Fp x19449 = x14364 - x19448;
          Fp x19450 = x19449 * x26;
          Fp x19451 = Fp(x19450.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x19451;
          Fp x19452 = x19450 - x19451;
          Fp x19453 = x19452 * x26;
          Fp x19454 = Fp(x19453.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x19454;
          Fp x19455 = x19453 - x19454;
          Fp x19456 = x19455 * x26;
          Fp x19457 = Fp(x19456.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x19457;
          Fp x19458 = x19456 - x19457;
          Fp x19459 = x19458 * x26;
          Fp x19460 = Fp(x19459.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x19460;
          Fp x19461 = x19459 - x19460;
          Fp x19462 = x19461 * x26;
          Fp x19463 = Fp(x19462.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x19463;
          Fp x19464 = x19462 - x19463;
          Fp x19465 = x19464 * x26;
          Fp x19466 = Fp(x19465.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x19466;
          Fp x19467 = x19465 - x19466;
          Fp x19468 = x19467 * x26;
          Fp x19469 = Fp(x19468.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x19469;
          Fp x19470 = x19468 - x19469;
          Fp x19471 = x19470 * x26;
          Fp x19472 = Fp(x19471.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x19472;
          Fp x19473 = x19471 - x19472;
          Fp x19474 = x19473 * x26;
          Fp x19475 = Fp(x19474.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x19475;
          Fp x19476 = x19474 - x19475;
          Fp x19477 = x19476 * x26;
          Fp x19478 = Fp(x19477.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x19478;
          Fp x19479 = x19477 - x19478;
          Fp x19480 = x19479 * x26;
          Fp x19481 = Fp(x19480.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x19481;
          Fp x19482 = x19480 - x19481;
          Fp x19483 = x19482 * x26;
          Fp x19484 = Fp(x19483.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x19484;
          Fp x19485 = x19483 - x19484;
          Fp x19486 = x19485 * x26;
          Fp x19487 = Fp(x19486.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x19487;
          Fp x19488 = x19486 - x19487;
          Fp x19489 = x19488 * x26;
          Fp x19490 = Fp(x19489.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x19490;
          Fp x19491 = x19489 - x19490;
          Fp x19492 = x19491 * x26;
          Fp x19493 = Fp(x19492.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x19493;
        }
        Fp x19494 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x19495 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x19496 = x19495 * x1;
        Fp x19497 = x19494 + x19496;
        Fp x19498 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x19499 = x19498 * x3;
        Fp x19500 = x19497 + x19499;
        Fp x19501 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x19502 = x19501 * x6;
        Fp x19503 = x19500 + x19502;
        Fp x19504 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x19505 = x19504 * x11;
        Fp x19506 = x19503 + x19505;
        Fp x19507 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x19508 = x19507 * x27;
        Fp x19509 = x19506 + x19508;
        Fp x19510 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x19511 = x19510 * x12;
        Fp x19512 = x19509 + x19511;
        Fp x19513 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x19514 = x19513 * x28;
        Fp x19515 = x19512 + x19514;
        Fp x19516 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x19517 = x19516 * x13;
        Fp x19518 = x19515 + x19517;
        Fp x19519 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x19520 = x19519 * x29;
        Fp x19521 = x19518 + x19520;
        Fp x19522 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x19523 = x19522 * x14;
        Fp x19524 = x19521 + x19523;
        Fp x19525 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x19526 = x19525 * x30;
        Fp x19527 = x19524 + x19526;
        Fp x19528 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x19529 = x19528 * x15;
        Fp x19530 = x19527 + x19529;
        Fp x19531 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x19532 = x19531 * x31;
        Fp x19533 = x19530 + x19532;
        Fp x19534 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x19535 = x19534 * x16;
        Fp x19536 = x19533 + x19535;
        Fp x19537 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x19538 = x19537 * x32;
        Fp x19539 = x19536 + x19538;
        Fp x19540 = x14364 - x19539;
        Fp x19541 = x19540 * x33;
        if (x19541 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:57");
        {
          Fp x19542 = Fp(x14365.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x19542;
          Fp x19543 = x14365 - x19542;
          Fp x19544 = x19543 * x26;
          Fp x19545 = Fp(x19544.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x19545;
          Fp x19546 = x19544 - x19545;
          Fp x19547 = x19546 * x26;
          Fp x19548 = Fp(x19547.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x19548;
          Fp x19549 = x19547 - x19548;
          Fp x19550 = x19549 * x26;
          Fp x19551 = Fp(x19550.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x19551;
          Fp x19552 = x19550 - x19551;
          Fp x19553 = x19552 * x26;
          Fp x19554 = Fp(x19553.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x19554;
          Fp x19555 = x19553 - x19554;
          Fp x19556 = x19555 * x26;
          Fp x19557 = Fp(x19556.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x19557;
          Fp x19558 = x19556 - x19557;
          Fp x19559 = x19558 * x26;
          Fp x19560 = Fp(x19559.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x19560;
          Fp x19561 = x19559 - x19560;
          Fp x19562 = x19561 * x26;
          Fp x19563 = Fp(x19562.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x19563;
          Fp x19564 = x19562 - x19563;
          Fp x19565 = x19564 * x26;
          Fp x19566 = Fp(x19565.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x19566;
          Fp x19567 = x19565 - x19566;
          Fp x19568 = x19567 * x26;
          Fp x19569 = Fp(x19568.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x19569;
          Fp x19570 = x19568 - x19569;
          Fp x19571 = x19570 * x26;
          Fp x19572 = Fp(x19571.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x19572;
          Fp x19573 = x19571 - x19572;
          Fp x19574 = x19573 * x26;
          Fp x19575 = Fp(x19574.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x19575;
          Fp x19576 = x19574 - x19575;
          Fp x19577 = x19576 * x26;
          Fp x19578 = Fp(x19577.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x19578;
          Fp x19579 = x19577 - x19578;
          Fp x19580 = x19579 * x26;
          Fp x19581 = Fp(x19580.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x19581;
          Fp x19582 = x19580 - x19581;
          Fp x19583 = x19582 * x26;
          Fp x19584 = Fp(x19583.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x19584;
          Fp x19585 = x19583 - x19584;
          Fp x19586 = x19585 * x26;
          Fp x19587 = Fp(x19586.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x19587;
        }
        Fp x19588 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x19589 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x19590 = x19589 * x1;
        Fp x19591 = x19588 + x19590;
        Fp x19592 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x19593 = x19592 * x3;
        Fp x19594 = x19591 + x19593;
        Fp x19595 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x19596 = x19595 * x6;
        Fp x19597 = x19594 + x19596;
        Fp x19598 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x19599 = x19598 * x11;
        Fp x19600 = x19597 + x19599;
        Fp x19601 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x19602 = x19601 * x27;
        Fp x19603 = x19600 + x19602;
        Fp x19604 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x19605 = x19604 * x12;
        Fp x19606 = x19603 + x19605;
        Fp x19607 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x19608 = x19607 * x28;
        Fp x19609 = x19606 + x19608;
        Fp x19610 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x19611 = x19610 * x13;
        Fp x19612 = x19609 + x19611;
        Fp x19613 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x19614 = x19613 * x29;
        Fp x19615 = x19612 + x19614;
        Fp x19616 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x19617 = x19616 * x14;
        Fp x19618 = x19615 + x19617;
        Fp x19619 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x19620 = x19619 * x30;
        Fp x19621 = x19618 + x19620;
        Fp x19622 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x19623 = x19622 * x15;
        Fp x19624 = x19621 + x19623;
        Fp x19625 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x19626 = x19625 * x31;
        Fp x19627 = x19624 + x19626;
        Fp x19628 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x19629 = x19628 * x16;
        Fp x19630 = x19627 + x19629;
        Fp x19631 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x19632 = x19631 * x32;
        Fp x19633 = x19630 + x19632;
        Fp x19634 = x14365 - x19633;
        Fp x19635 = x19634 * x33;
        if (x19635 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:57");
        {
          Fp x19636 = (x19305 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x19636;
          Fp x19637 = x19305 - x71;
          Fp x19638 = (x19637 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x19638;
          Fp x19639 = x19305 - x1;
          Fp x19640 = (x19639 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x19640;
          Fp x19641 = x19305 - x2;
          Fp x19642 = (x19641 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x19642;
        }
        Fp x19643 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x19644 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x19645 = x19644 * x1;
        Fp x19646 = x19643 + x19645;
        Fp x19647 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x19648 = x19647 * x2;
        Fp x19649 = x19646 + x19648;
        Fp x19650 = x19649 - x19305;
        if (x19650 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x19651 = x19347 + x19539;
        Fp x19652 = x19443 + x19633;
        {
          Fp x19653 = Fp(x19651.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x19653;
          Fp x19654 = x19651 - x19653;
          Fp x19655 = x19654 * x26;
          Fp x19656 = Fp(x19655.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x19656;
          Fp x19657 = x19655 - x19656;
          Fp x19658 = x19657 * x26;
          Fp x19659 = Fp(x19658.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x19659;
          Fp x19660 = x19658 - x19659;
          Fp x19661 = x19660 * x26;
          Fp x19662 = Fp(x19661.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x19662;
          Fp x19663 = x19661 - x19662;
          Fp x19664 = x19663 * x26;
          Fp x19665 = Fp(x19664.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x19665;
          Fp x19666 = x19664 - x19665;
          Fp x19667 = x19666 * x26;
          Fp x19668 = Fp(x19667.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x19668;
          Fp x19669 = x19667 - x19668;
          Fp x19670 = x19669 * x26;
          Fp x19671 = Fp(x19670.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x19671;
          Fp x19672 = x19670 - x19671;
          Fp x19673 = x19672 * x26;
          Fp x19674 = Fp(x19673.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x19674;
          Fp x19675 = x19673 - x19674;
          Fp x19676 = x19675 * x26;
          Fp x19677 = Fp(x19676.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x19677;
          Fp x19678 = x19676 - x19677;
          Fp x19679 = x19678 * x26;
          Fp x19680 = Fp(x19679.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x19680;
          Fp x19681 = x19679 - x19680;
          Fp x19682 = x19681 * x26;
          Fp x19683 = Fp(x19682.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x19683;
          Fp x19684 = x19682 - x19683;
          Fp x19685 = x19684 * x26;
          Fp x19686 = Fp(x19685.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x19686;
          Fp x19687 = x19685 - x19686;
          Fp x19688 = x19687 * x26;
          Fp x19689 = Fp(x19688.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x19689;
          Fp x19690 = x19688 - x19689;
          Fp x19691 = x19690 * x26;
          Fp x19692 = Fp(x19691.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x19692;
          Fp x19693 = x19691 - x19692;
          Fp x19694 = x19693 * x26;
          Fp x19695 = Fp(x19694.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x19695;
          Fp x19696 = x19694 - x19695;
          Fp x19697 = x19696 * x26;
          Fp x19698 = Fp(x19697.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x19698;
        }
        Fp x19699 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x19700 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x19701 = x19700 * x1;
        Fp x19702 = x19699 + x19701;
        Fp x19703 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x19704 = x19703 * x3;
        Fp x19705 = x19702 + x19704;
        Fp x19706 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x19707 = x19706 * x6;
        Fp x19708 = x19705 + x19707;
        Fp x19709 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x19710 = x19709 * x11;
        Fp x19711 = x19708 + x19710;
        Fp x19712 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x19713 = x19712 * x27;
        Fp x19714 = x19711 + x19713;
        Fp x19715 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x19716 = x19715 * x12;
        Fp x19717 = x19714 + x19716;
        Fp x19718 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x19719 = x19718 * x28;
        Fp x19720 = x19717 + x19719;
        Fp x19721 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x19722 = x19721 * x13;
        Fp x19723 = x19720 + x19722;
        Fp x19724 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x19725 = x19724 * x29;
        Fp x19726 = x19723 + x19725;
        Fp x19727 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x19728 = x19727 * x14;
        Fp x19729 = x19726 + x19728;
        Fp x19730 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x19731 = x19730 * x30;
        Fp x19732 = x19729 + x19731;
        Fp x19733 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x19734 = x19733 * x15;
        Fp x19735 = x19732 + x19734;
        Fp x19736 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x19737 = x19736 * x31;
        Fp x19738 = x19735 + x19737;
        Fp x19739 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x19740 = x19739 * x16;
        Fp x19741 = x19738 + x19740;
        Fp x19742 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x19743 = x19742 * x32;
        Fp x19744 = x19741 + x19743;
        Fp x19745 = x19651 - x19744;
        Fp x19746 = x19745 * x33;
        args[2][108 * steps + cycle] = x19746;
        Fp x19747 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x19748 = x19652 + x19747;
        {
          Fp x19749 = Fp(x19748.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x19749;
          Fp x19750 = x19748 - x19749;
          Fp x19751 = x19750 * x26;
          Fp x19752 = Fp(x19751.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x19752;
          Fp x19753 = x19751 - x19752;
          Fp x19754 = x19753 * x26;
          Fp x19755 = Fp(x19754.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x19755;
          Fp x19756 = x19754 - x19755;
          Fp x19757 = x19756 * x26;
          Fp x19758 = Fp(x19757.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x19758;
          Fp x19759 = x19757 - x19758;
          Fp x19760 = x19759 * x26;
          Fp x19761 = Fp(x19760.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x19761;
          Fp x19762 = x19760 - x19761;
          Fp x19763 = x19762 * x26;
          Fp x19764 = Fp(x19763.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x19764;
          Fp x19765 = x19763 - x19764;
          Fp x19766 = x19765 * x26;
          Fp x19767 = Fp(x19766.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x19767;
          Fp x19768 = x19766 - x19767;
          Fp x19769 = x19768 * x26;
          Fp x19770 = Fp(x19769.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x19770;
          Fp x19771 = x19769 - x19770;
          Fp x19772 = x19771 * x26;
          Fp x19773 = Fp(x19772.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x19773;
          Fp x19774 = x19772 - x19773;
          Fp x19775 = x19774 * x26;
          Fp x19776 = Fp(x19775.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x19776;
          Fp x19777 = x19775 - x19776;
          Fp x19778 = x19777 * x26;
          Fp x19779 = Fp(x19778.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x19779;
          Fp x19780 = x19778 - x19779;
          Fp x19781 = x19780 * x26;
          Fp x19782 = Fp(x19781.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x19782;
          Fp x19783 = x19781 - x19782;
          Fp x19784 = x19783 * x26;
          Fp x19785 = Fp(x19784.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x19785;
          Fp x19786 = x19784 - x19785;
          Fp x19787 = x19786 * x26;
          Fp x19788 = Fp(x19787.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x19788;
          Fp x19789 = x19787 - x19788;
          Fp x19790 = x19789 * x26;
          Fp x19791 = Fp(x19790.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x19791;
          Fp x19792 = x19790 - x19791;
          Fp x19793 = x19792 * x26;
          Fp x19794 = Fp(x19793.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x19794;
        }
        Fp x19795 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x19796 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x19797 = x19796 * x1;
        Fp x19798 = x19795 + x19797;
        Fp x19799 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x19800 = x19799 * x3;
        Fp x19801 = x19798 + x19800;
        Fp x19802 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x19803 = x19802 * x6;
        Fp x19804 = x19801 + x19803;
        Fp x19805 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x19806 = x19805 * x11;
        Fp x19807 = x19804 + x19806;
        Fp x19808 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x19809 = x19808 * x27;
        Fp x19810 = x19807 + x19809;
        Fp x19811 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x19812 = x19811 * x12;
        Fp x19813 = x19810 + x19812;
        Fp x19814 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x19815 = x19814 * x28;
        Fp x19816 = x19813 + x19815;
        Fp x19817 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x19818 = x19817 * x13;
        Fp x19819 = x19816 + x19818;
        Fp x19820 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x19821 = x19820 * x29;
        Fp x19822 = x19819 + x19821;
        Fp x19823 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x19824 = x19823 * x14;
        Fp x19825 = x19822 + x19824;
        Fp x19826 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x19827 = x19826 * x30;
        Fp x19828 = x19825 + x19827;
        Fp x19829 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x19830 = x19829 * x15;
        Fp x19831 = x19828 + x19830;
        Fp x19832 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x19833 = x19832 * x31;
        Fp x19834 = x19831 + x19833;
        Fp x19835 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x19836 = x19835 * x16;
        Fp x19837 = x19834 + x19836;
        Fp x19838 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x19839 = x19838 * x32;
        Fp x19840 = x19837 + x19839;
        Fp x19841 = x19748 - x19840;
        Fp x19842 = x19841 * x33;
        args[2][109 * steps + cycle] = x19842;
        {
          {
            Fp x19843 = (x19744 == 0) ? Fp(1) : Fp(0);
            Fp x19844 = x71 - x19843;
            args[2][114 * steps + cycle] = x19844;
            Fp x19845 = inv(x19744);
            args[2][115 * steps + cycle] = x19845;
          }
          Fp x19846 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x19847 = x19744 * x19846;
          Fp x19848 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x19849 = x19847 - x19848;
          if (x19849 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x19850 = x71 - x19848;
          Fp x19851 = x19850 * x19744;
          if (x19851 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x19852 = (x19840 == 0) ? Fp(1) : Fp(0);
            Fp x19853 = x71 - x19852;
            args[2][116 * steps + cycle] = x19853;
            Fp x19854 = inv(x19840);
            args[2][117 * steps + cycle] = x19854;
          }
          Fp x19855 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x19856 = x19840 * x19855;
          Fp x19857 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x19858 = x19856 - x19857;
          if (x19858 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x19859 = x71 - x19857;
          Fp x19860 = x19859 * x19840;
          if (x19860 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x19861 = x19850 * x19859;
          Fp x19862 = x71 - x19861;
          args[2][111 * steps + cycle] = x19862;
          Fp x19863 = x71 - x19631;
          Fp x19864 = x19441 * x19863;
          Fp x19865 = x71 - x19838;
          Fp x19866 = x19864 * x19865;
          Fp x19867 = x71 - x19441;
          Fp x19868 = x19867 * x19631;
          Fp x19869 = x19868 * x19838;
          Fp x19870 = x19866 + x19869;
          args[2][112 * steps + cycle] = x19870;
          Fp x19871 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x19872 = x19871 + x19838;
          Fp x19873 = x19871 * x1;
          Fp x19874 = x19873 * x19838;
          Fp x19875 = x19872 - x19874;
          args[2][113 * steps + cycle] = x19875;
        }
        args[2][100 * steps + cycle] = x19744;
        args[2][101 * steps + cycle] = x19840;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x19876 = x14387 + x3;
        args[2][104 * steps + cycle] = x19876;
        args[2][105 * steps + cycle] = x14409;
        Fp x19877 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x19878 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x19879 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x19880 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x19881 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x19882 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x14409;
        host_args[2] = x14387;
        host_args[3] = x19443;
        host_args[4] = x19347;
        host_args[5] = x19633;
        host_args[6] = x19539;
        host_args[7] = x19840;
        host_args[8] = x19744;
        host_args[9] = x19877;
        host_args[10] = x19878;
        host_args[11] = x19879;
        host_args[12] = x19880;
        host_args[13] = x19881;
        host_args[14] = x19882;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x19883 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x19884 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x19885 = x19884 * x1;
      Fp x19886 = x19883 + x19885;
      Fp x19887 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x19888 = x19887 * x3;
      Fp x19889 = x19886 + x19888;
      Fp x19890 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x19891 = x19890 * x6;
      Fp x19892 = x19889 + x19891;
      Fp x19893 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x19894 = x19893 * x11;
      Fp x19895 = x19892 + x19894;
      Fp x19896 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x19897 = x19896 * x27;
      Fp x19898 = x19895 + x19897;
      Fp x19899 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x19900 = x19899 * x12;
      Fp x19901 = x19898 + x19900;
      Fp x19902 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x19903 = x19902 * x28;
      Fp x19904 = x19901 + x19903;
      Fp x19905 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x19906 = x19905 * x13;
      Fp x19907 = x19904 + x19906;
      Fp x19908 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x19909 = x19908 * x29;
      Fp x19910 = x19907 + x19909;
      Fp x19911 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x19912 = x19911 * x14;
      Fp x19913 = x19910 + x19912;
      Fp x19914 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x19915 = x19914 * x30;
      Fp x19916 = x19913 + x19915;
      Fp x19917 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x19918 = x19917 * x15;
      Fp x19919 = x19916 + x19918;
      Fp x19920 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x19921 = x19920 * x31;
      Fp x19922 = x19919 + x19921;
      Fp x19923 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x19924 = x19923 * x16;
      Fp x19925 = x19922 + x19924;
      Fp x19926 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x19927 = x19926 * x32;
      Fp x19928 = x19925 + x19927;
      {
        Fp x19929 = (x19928 == 0) ? Fp(1) : Fp(0);
        Fp x19930 = x71 - x19929;
        args[2][114 * steps + cycle] = x19930;
        Fp x19931 = inv(x19928);
        args[2][115 * steps + cycle] = x19931;
      }
      Fp x19932 = args[2][115 * steps + ((cycle - 0) & mask)];
      Fp x19933 = x19928 * x19932;
      Fp x19934 = args[2][114 * steps + ((cycle - 0) & mask)];
      Fp x19935 = x19933 - x19934;
      if (x19935 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
      Fp x19936 = x71 - x19934;
      Fp x19937 = x19936 * x19928;
      if (x19937 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
      Fp x19938 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x19939 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x19940 = x19939 * x1;
      Fp x19941 = x19938 + x19940;
      Fp x19942 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x19943 = x19942 * x3;
      Fp x19944 = x19941 + x19943;
      Fp x19945 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x19946 = x19945 * x6;
      Fp x19947 = x19944 + x19946;
      Fp x19948 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x19949 = x19948 * x11;
      Fp x19950 = x19947 + x19949;
      Fp x19951 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x19952 = x19951 * x27;
      Fp x19953 = x19950 + x19952;
      Fp x19954 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x19955 = x19954 * x12;
      Fp x19956 = x19953 + x19955;
      Fp x19957 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x19958 = x19957 * x28;
      Fp x19959 = x19956 + x19958;
      Fp x19960 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x19961 = x19960 * x13;
      Fp x19962 = x19959 + x19961;
      Fp x19963 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x19964 = x19963 * x29;
      Fp x19965 = x19962 + x19964;
      Fp x19966 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x19967 = x19966 * x14;
      Fp x19968 = x19965 + x19967;
      Fp x19969 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x19970 = x19969 * x30;
      Fp x19971 = x19968 + x19970;
      Fp x19972 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x19973 = x19972 * x15;
      Fp x19974 = x19971 + x19973;
      Fp x19975 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x19976 = x19975 * x31;
      Fp x19977 = x19974 + x19976;
      Fp x19978 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x19979 = x19978 * x16;
      Fp x19980 = x19977 + x19979;
      Fp x19981 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x19982 = x19981 * x32;
      Fp x19983 = x19980 + x19982;
      {
        Fp x19984 = (x19983 == 0) ? Fp(1) : Fp(0);
        Fp x19985 = x71 - x19984;
        args[2][116 * steps + cycle] = x19985;
        Fp x19986 = inv(x19983);
        args[2][117 * steps + cycle] = x19986;
      }
      Fp x19987 = args[2][117 * steps + ((cycle - 0) & mask)];
      Fp x19988 = x19983 * x19987;
      Fp x19989 = args[2][116 * steps + ((cycle - 0) & mask)];
      Fp x19990 = x19988 - x19989;
      if (x19990 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
      Fp x19991 = x71 - x19989;
      Fp x19992 = x19991 * x19983;
      if (x19992 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
      Fp x19993 = x19936 * x19991;
      Fp x19994 = x71 - x19993;
      args[2][111 * steps + cycle] = x19994;
      Fp x19995 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x19996 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x19997 = x71 - x19996;
      Fp x19998 = x19995 * x19997;
      Fp x19999 = x71 - x19981;
      Fp x20000 = x19998 * x19999;
      Fp x20001 = x71 - x19995;
      Fp x20002 = x20001 * x19996;
      Fp x20003 = x20002 * x19981;
      Fp x20004 = x20000 + x20003;
      args[2][112 * steps + cycle] = x20004;
      Fp x20005 = args[2][112 * steps + ((cycle - 0) & mask)];
      Fp x20006 = x20005 + x19981;
      Fp x20007 = x20005 * x1;
      Fp x20008 = x20007 * x19981;
      Fp x20009 = x20006 - x20008;
      args[2][113 * steps + cycle] = x20009;
      Fp x20010 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x20011 = x20010 - x71;
      Fp x20012 = x20010 * x20011;
      if (x20012 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20013 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x20014 = x20013 - x71;
      Fp x20015 = x20013 * x20014;
      if (x20015 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20016 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x20017 = x20016 - x71;
      Fp x20018 = x20016 * x20017;
      if (x20018 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20019 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x20020 = x20019 - x71;
      Fp x20021 = x20019 * x20020;
      if (x20021 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20022 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x20023 = x20022 - x71;
      Fp x20024 = x20022 * x20023;
      if (x20024 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20025 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x20026 = x20025 - x71;
      Fp x20027 = x20025 * x20026;
      if (x20027 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20028 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x20029 = x20028 - x71;
      Fp x20030 = x20028 * x20029;
      if (x20030 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20031 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x20032 = x20031 - x71;
      Fp x20033 = x20031 * x20032;
      if (x20033 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20034 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x20035 = x20034 - x71;
      Fp x20036 = x20034 * x20035;
      if (x20036 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20037 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x20038 = x20037 - x71;
      Fp x20039 = x20037 * x20038;
      if (x20039 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20040 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x20041 = x20040 - x71;
      Fp x20042 = x20040 * x20041;
      if (x20042 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20043 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x20044 = x20043 - x71;
      Fp x20045 = x20043 * x20044;
      if (x20045 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20046 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x20047 = x20046 - x71;
      Fp x20048 = x20046 * x20047;
      if (x20048 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20049 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x20050 = x20049 - x71;
      Fp x20051 = x20049 * x20050;
      if (x20051 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20052 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x20053 = x20052 - x71;
      Fp x20054 = x20052 * x20053;
      if (x20054 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20055 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x20056 = x20055 - x71;
      Fp x20057 = x20055 * x20056;
      if (x20057 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20058 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x20059 = x20058 - x71;
      Fp x20060 = x20058 * x20059;
      if (x20060 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20061 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x20062 = x20061 - x71;
      Fp x20063 = x20061 * x20062;
      if (x20063 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20064 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x20065 = x20064 - x71;
      Fp x20066 = x20064 * x20065;
      if (x20066 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20067 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x20068 = x20067 - x71;
      Fp x20069 = x20067 * x20068;
      if (x20069 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20070 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x20071 = x20070 - x71;
      Fp x20072 = x20070 * x20071;
      if (x20072 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20073 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x20074 = x20073 - x71;
      Fp x20075 = x20073 * x20074;
      if (x20075 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20076 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x20077 = x20076 - x71;
      Fp x20078 = x20076 * x20077;
      if (x20078 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20079 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x20080 = x20079 - x71;
      Fp x20081 = x20079 * x20080;
      if (x20081 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20082 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x20083 = x20082 - x71;
      Fp x20084 = x20082 * x20083;
      if (x20084 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20085 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x20086 = x20085 - x71;
      Fp x20087 = x20085 * x20086;
      if (x20087 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20088 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x20089 = x20088 - x71;
      Fp x20090 = x20088 * x20089;
      if (x20090 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20091 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x20092 = x20091 - x71;
      Fp x20093 = x20091 * x20092;
      if (x20093 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20094 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x20095 = x20094 - x71;
      Fp x20096 = x20094 * x20095;
      if (x20096 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20097 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x20098 = x20097 - x71;
      Fp x20099 = x20097 * x20098;
      if (x20099 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20100 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x20101 = x20100 - x71;
      Fp x20102 = x20100 * x20101;
      if (x20102 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20103 = x19995 - x71;
      Fp x20104 = x19995 * x20103;
      if (x20104 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x20105 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x20106 = x20105 - x71;
      Fp x20107 = x20105 * x20106;
      if (x20107 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20108 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x20109 = x20108 - x71;
      Fp x20110 = x20108 * x20109;
      if (x20110 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20111 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x20112 = x20111 - x71;
      Fp x20113 = x20111 * x20112;
      if (x20113 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20114 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x20115 = x20114 - x71;
      Fp x20116 = x20114 * x20115;
      if (x20116 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20117 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x20118 = x20117 - x71;
      Fp x20119 = x20117 * x20118;
      if (x20119 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20120 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x20121 = x20120 - x71;
      Fp x20122 = x20120 * x20121;
      if (x20122 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20123 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x20124 = x20123 - x71;
      Fp x20125 = x20123 * x20124;
      if (x20125 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20126 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x20127 = x20126 - x71;
      Fp x20128 = x20126 * x20127;
      if (x20128 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20129 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x20130 = x20129 - x71;
      Fp x20131 = x20129 * x20130;
      if (x20131 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20132 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x20133 = x20132 - x71;
      Fp x20134 = x20132 * x20133;
      if (x20134 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20135 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x20136 = x20135 - x71;
      Fp x20137 = x20135 * x20136;
      if (x20137 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20138 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x20139 = x20138 - x71;
      Fp x20140 = x20138 * x20139;
      if (x20140 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20141 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x20142 = x20141 - x71;
      Fp x20143 = x20141 * x20142;
      if (x20143 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20144 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x20145 = x20144 - x71;
      Fp x20146 = x20144 * x20145;
      if (x20146 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20147 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x20148 = x20147 - x71;
      Fp x20149 = x20147 * x20148;
      if (x20149 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20150 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x20151 = x20150 - x71;
      Fp x20152 = x20150 * x20151;
      if (x20152 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20153 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x20154 = x20153 - x71;
      Fp x20155 = x20153 * x20154;
      if (x20155 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20156 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x20157 = x20156 - x71;
      Fp x20158 = x20156 * x20157;
      if (x20158 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20159 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x20160 = x20159 - x71;
      Fp x20161 = x20159 * x20160;
      if (x20161 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20162 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x20163 = x20162 - x71;
      Fp x20164 = x20162 * x20163;
      if (x20164 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20165 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x20166 = x20165 - x71;
      Fp x20167 = x20165 * x20166;
      if (x20167 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20168 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x20169 = x20168 - x71;
      Fp x20170 = x20168 * x20169;
      if (x20170 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20171 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x20172 = x20171 - x71;
      Fp x20173 = x20171 * x20172;
      if (x20173 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20174 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x20175 = x20174 - x71;
      Fp x20176 = x20174 * x20175;
      if (x20176 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20177 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x20178 = x20177 - x71;
      Fp x20179 = x20177 * x20178;
      if (x20179 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20180 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x20181 = x20180 - x71;
      Fp x20182 = x20180 * x20181;
      if (x20182 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20183 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x20184 = x20183 - x71;
      Fp x20185 = x20183 * x20184;
      if (x20185 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20186 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x20187 = x20186 - x71;
      Fp x20188 = x20186 * x20187;
      if (x20188 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20189 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x20190 = x20189 - x71;
      Fp x20191 = x20189 * x20190;
      if (x20191 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20192 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x20193 = x20192 - x71;
      Fp x20194 = x20192 * x20193;
      if (x20194 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20195 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x20196 = x20195 - x71;
      Fp x20197 = x20195 * x20196;
      if (x20197 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20198 = x19996 - x71;
      Fp x20199 = x19996 * x20198;
      if (x20199 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x20200 = x19883 - x71;
      Fp x20201 = x19883 * x20200;
      if (x20201 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20202 = x19884 - x71;
      Fp x20203 = x19884 * x20202;
      if (x20203 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20204 = x19887 - x71;
      Fp x20205 = x19887 * x20204;
      if (x20205 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20206 = x19890 - x71;
      Fp x20207 = x19890 * x20206;
      if (x20207 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20208 = x19893 - x71;
      Fp x20209 = x19893 * x20208;
      if (x20209 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20210 = x19896 - x71;
      Fp x20211 = x19896 * x20210;
      if (x20211 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20212 = x19899 - x71;
      Fp x20213 = x19899 * x20212;
      if (x20213 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20214 = x19902 - x71;
      Fp x20215 = x19902 * x20214;
      if (x20215 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20216 = x19905 - x71;
      Fp x20217 = x19905 * x20216;
      if (x20217 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20218 = x19908 - x71;
      Fp x20219 = x19908 * x20218;
      if (x20219 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20220 = x19911 - x71;
      Fp x20221 = x19911 * x20220;
      if (x20221 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20222 = x19914 - x71;
      Fp x20223 = x19914 * x20222;
      if (x20223 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20224 = x19917 - x71;
      Fp x20225 = x19917 * x20224;
      if (x20225 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20226 = x19920 - x71;
      Fp x20227 = x19920 * x20226;
      if (x20227 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20228 = x19923 - x71;
      Fp x20229 = x19923 * x20228;
      if (x20229 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20230 = x19926 - x71;
      Fp x20231 = x19926 * x20230;
      if (x20231 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20232 = x19938 - x71;
      Fp x20233 = x19938 * x20232;
      if (x20233 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20234 = x19939 - x71;
      Fp x20235 = x19939 * x20234;
      if (x20235 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20236 = x19942 - x71;
      Fp x20237 = x19942 * x20236;
      if (x20237 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20238 = x19945 - x71;
      Fp x20239 = x19945 * x20238;
      if (x20239 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20240 = x19948 - x71;
      Fp x20241 = x19948 * x20240;
      if (x20241 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20242 = x19951 - x71;
      Fp x20243 = x19951 * x20242;
      if (x20243 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20244 = x19954 - x71;
      Fp x20245 = x19954 * x20244;
      if (x20245 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20246 = x19957 - x71;
      Fp x20247 = x19957 * x20246;
      if (x20247 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20248 = x19960 - x71;
      Fp x20249 = x19960 * x20248;
      if (x20249 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20250 = x19963 - x71;
      Fp x20251 = x19963 * x20250;
      if (x20251 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20252 = x19966 - x71;
      Fp x20253 = x19966 * x20252;
      if (x20253 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20254 = x19969 - x71;
      Fp x20255 = x19969 * x20254;
      if (x20255 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20256 = x19972 - x71;
      Fp x20257 = x19972 * x20256;
      if (x20257 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20258 = x19975 - x71;
      Fp x20259 = x19975 * x20258;
      if (x20259 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20260 = x19978 - x71;
      Fp x20261 = x19978 * x20260;
      if (x20261 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20262 = x19981 - x71;
      Fp x20263 = x19981 * x20262;
      if (x20263 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x20264 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x20265 = x20264 - x71;
      Fp x20266 = x20264 * x20265;
      if (x20266 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x20267 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x20268 = x20267 - x71;
      Fp x20269 = x20267 * x20268;
      if (x20269 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x20270 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x20271 = x20270 - x71;
      Fp x20272 = x20270 * x20271;
      if (x20272 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x20273 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x20274 = x20273 - x71;
      Fp x20275 = x20273 * x20274;
      if (x20275 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x20276 = x20264 + x20267;
      Fp x20277 = x20276 + x20270;
      Fp x20278 = x20277 + x20273;
      Fp x20279 = x20278 - x71;
      if (x20279 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x20280 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x20281 = x20280 - x71;
      Fp x20282 = x20280 * x20281;
      if (x20282 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:28");
      Fp x20283 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x20284 = x20283 - x71;
      Fp x20285 = x20283 * x20284;
      if (x20285 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:29");
      Fp x20286 = args[2][108 * steps + ((cycle - 0) & mask)];
      Fp x20287 = x20286 - x71;
      Fp x20288 = x20286 * x20287;
      if (x20288 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:30");
      Fp x20289 = args[2][109 * steps + ((cycle - 0) & mask)];
      Fp x20290 = x20289 - x71;
      Fp x20291 = x20289 * x20290;
      if (x20291 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:31");
      Fp x20292 = x19934 - x71;
      Fp x20293 = x19934 * x20292;
      if (x20293 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:36");
      Fp x20294 = x19989 - x71;
      Fp x20295 = x19989 * x20294;
      if (x20295 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:37");
    }
    Fp x20296 = args[2][134 * steps + ((cycle - 0) & mask)];
    if (x20296 != 0) {
      Fp x20297 = args[2][116 * steps + ((cycle - 1) & mask)];
      Fp x20298 = args[2][117 * steps + ((cycle - 1) & mask)];
      Fp x20299 = args[2][114 * steps + ((cycle - 1) & mask)];
      Fp x20300 = args[2][115 * steps + ((cycle - 1) & mask)];
      Fp x20301 = args[2][0 * steps + ((cycle - 2) & mask)];
      Fp x20302 = args[2][1 * steps + ((cycle - 2) & mask)];
      Fp x20303 = x20302 * x3;
      Fp x20304 = x20301 + x20303;
      Fp x20305 = args[2][2 * steps + ((cycle - 2) & mask)];
      Fp x20306 = x20305 * x11;
      Fp x20307 = x20304 + x20306;
      Fp x20308 = args[2][3 * steps + ((cycle - 2) & mask)];
      Fp x20309 = x20308 * x12;
      Fp x20310 = x20307 + x20309;
      Fp x20311 = args[2][4 * steps + ((cycle - 2) & mask)];
      Fp x20312 = x20311 * x13;
      Fp x20313 = x20310 + x20312;
      Fp x20314 = args[2][5 * steps + ((cycle - 2) & mask)];
      Fp x20315 = x20314 * x14;
      Fp x20316 = x20313 + x20315;
      Fp x20317 = args[2][6 * steps + ((cycle - 2) & mask)];
      Fp x20318 = x20317 * x15;
      Fp x20319 = x20316 + x20318;
      Fp x20320 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x20321 = x20320 * x16;
      Fp x20322 = x20319 + x20321;
      Fp x20323 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x20324 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x20325 = x20324 * x3;
      Fp x20326 = x20323 + x20325;
      Fp x20327 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x20328 = x20327 * x11;
      Fp x20329 = x20326 + x20328;
      Fp x20330 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x20331 = x20330 * x12;
      Fp x20332 = x20329 + x20331;
      Fp x20333 = args[2][12 * steps + ((cycle - 2) & mask)];
      Fp x20334 = x20333 * x13;
      Fp x20335 = x20332 + x20334;
      Fp x20336 = args[2][13 * steps + ((cycle - 2) & mask)];
      Fp x20337 = x20336 * x14;
      Fp x20338 = x20335 + x20337;
      Fp x20339 = args[2][14 * steps + ((cycle - 2) & mask)];
      Fp x20340 = x20339 * x15;
      Fp x20341 = x20338 + x20340;
      Fp x20342 = args[2][15 * steps + ((cycle - 2) & mask)];
      Fp x20343 = x20342 * x16;
      Fp x20344 = x20341 + x20343;
      Fp x20345 = args[2][72 * steps + ((cycle - 1) & mask)];
      if (x20345 != 0) {
        {
          Fp x20346 = Fp(x20297.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x20346;
          Fp x20347 = x20297 - x20346;
          Fp x20348 = x20347 * x26;
          Fp x20349 = Fp(x20348.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x20349;
          Fp x20350 = x20348 - x20349;
          Fp x20351 = x20350 * x26;
          Fp x20352 = Fp(x20351.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x20352;
          Fp x20353 = x20351 - x20352;
          Fp x20354 = x20353 * x26;
          Fp x20355 = Fp(x20354.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x20355;
          Fp x20356 = x20354 - x20355;
          Fp x20357 = x20356 * x26;
          Fp x20358 = Fp(x20357.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x20358;
          Fp x20359 = x20357 - x20358;
          Fp x20360 = x20359 * x26;
          Fp x20361 = Fp(x20360.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x20361;
          Fp x20362 = x20360 - x20361;
          Fp x20363 = x20362 * x26;
          Fp x20364 = Fp(x20363.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x20364;
          Fp x20365 = x20363 - x20364;
          Fp x20366 = x20365 * x26;
          Fp x20367 = Fp(x20366.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x20367;
          Fp x20368 = x20366 - x20367;
          Fp x20369 = x20368 * x26;
          Fp x20370 = Fp(x20369.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x20370;
          Fp x20371 = x20369 - x20370;
          Fp x20372 = x20371 * x26;
          Fp x20373 = Fp(x20372.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x20373;
          Fp x20374 = x20372 - x20373;
          Fp x20375 = x20374 * x26;
          Fp x20376 = Fp(x20375.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x20376;
          Fp x20377 = x20375 - x20376;
          Fp x20378 = x20377 * x26;
          Fp x20379 = Fp(x20378.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x20379;
          Fp x20380 = x20378 - x20379;
          Fp x20381 = x20380 * x26;
          Fp x20382 = Fp(x20381.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x20382;
          Fp x20383 = x20381 - x20382;
          Fp x20384 = x20383 * x26;
          Fp x20385 = Fp(x20384.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x20385;
          Fp x20386 = x20384 - x20385;
          Fp x20387 = x20386 * x26;
          Fp x20388 = Fp(x20387.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x20388;
          Fp x20389 = x20387 - x20388;
          Fp x20390 = x20389 * x26;
          Fp x20391 = Fp(x20390.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x20391;
        }
        Fp x20392 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x20393 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x20394 = x20393 * x1;
        Fp x20395 = x20392 + x20394;
        Fp x20396 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x20397 = x20396 * x3;
        Fp x20398 = x20395 + x20397;
        Fp x20399 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x20400 = x20399 * x6;
        Fp x20401 = x20398 + x20400;
        Fp x20402 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x20403 = x20402 * x11;
        Fp x20404 = x20401 + x20403;
        Fp x20405 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x20406 = x20405 * x27;
        Fp x20407 = x20404 + x20406;
        Fp x20408 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x20409 = x20408 * x12;
        Fp x20410 = x20407 + x20409;
        Fp x20411 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x20412 = x20411 * x28;
        Fp x20413 = x20410 + x20412;
        Fp x20414 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x20415 = x20414 * x13;
        Fp x20416 = x20413 + x20415;
        Fp x20417 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x20418 = x20417 * x29;
        Fp x20419 = x20416 + x20418;
        Fp x20420 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x20421 = x20420 * x14;
        Fp x20422 = x20419 + x20421;
        Fp x20423 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x20424 = x20423 * x30;
        Fp x20425 = x20422 + x20424;
        Fp x20426 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x20427 = x20426 * x15;
        Fp x20428 = x20425 + x20427;
        Fp x20429 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x20430 = x20429 * x31;
        Fp x20431 = x20428 + x20430;
        Fp x20432 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x20433 = x20432 * x16;
        Fp x20434 = x20431 + x20433;
        Fp x20435 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x20436 = x20435 * x32;
        Fp x20437 = x20434 + x20436;
        Fp x20438 = x20297 - x20437;
        Fp x20439 = x20438 * x33;
        args[2][106 * steps + cycle] = x20439;
        Fp x20440 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x20441 = x20298 + x20440;
        {
          Fp x20442 = Fp(x20441.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x20442;
          Fp x20443 = x20441 - x20442;
          Fp x20444 = x20443 * x26;
          Fp x20445 = Fp(x20444.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x20445;
          Fp x20446 = x20444 - x20445;
          Fp x20447 = x20446 * x26;
          Fp x20448 = Fp(x20447.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x20448;
          Fp x20449 = x20447 - x20448;
          Fp x20450 = x20449 * x26;
          Fp x20451 = Fp(x20450.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x20451;
          Fp x20452 = x20450 - x20451;
          Fp x20453 = x20452 * x26;
          Fp x20454 = Fp(x20453.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x20454;
          Fp x20455 = x20453 - x20454;
          Fp x20456 = x20455 * x26;
          Fp x20457 = Fp(x20456.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x20457;
          Fp x20458 = x20456 - x20457;
          Fp x20459 = x20458 * x26;
          Fp x20460 = Fp(x20459.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x20460;
          Fp x20461 = x20459 - x20460;
          Fp x20462 = x20461 * x26;
          Fp x20463 = Fp(x20462.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x20463;
          Fp x20464 = x20462 - x20463;
          Fp x20465 = x20464 * x26;
          Fp x20466 = Fp(x20465.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x20466;
          Fp x20467 = x20465 - x20466;
          Fp x20468 = x20467 * x26;
          Fp x20469 = Fp(x20468.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x20469;
          Fp x20470 = x20468 - x20469;
          Fp x20471 = x20470 * x26;
          Fp x20472 = Fp(x20471.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x20472;
          Fp x20473 = x20471 - x20472;
          Fp x20474 = x20473 * x26;
          Fp x20475 = Fp(x20474.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x20475;
          Fp x20476 = x20474 - x20475;
          Fp x20477 = x20476 * x26;
          Fp x20478 = Fp(x20477.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x20478;
          Fp x20479 = x20477 - x20478;
          Fp x20480 = x20479 * x26;
          Fp x20481 = Fp(x20480.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x20481;
          Fp x20482 = x20480 - x20481;
          Fp x20483 = x20482 * x26;
          Fp x20484 = Fp(x20483.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x20484;
          Fp x20485 = x20483 - x20484;
          Fp x20486 = x20485 * x26;
          Fp x20487 = Fp(x20486.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x20487;
        }
        Fp x20488 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x20489 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x20490 = x20489 * x1;
        Fp x20491 = x20488 + x20490;
        Fp x20492 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x20493 = x20492 * x3;
        Fp x20494 = x20491 + x20493;
        Fp x20495 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x20496 = x20495 * x6;
        Fp x20497 = x20494 + x20496;
        Fp x20498 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x20499 = x20498 * x11;
        Fp x20500 = x20497 + x20499;
        Fp x20501 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x20502 = x20501 * x27;
        Fp x20503 = x20500 + x20502;
        Fp x20504 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x20505 = x20504 * x12;
        Fp x20506 = x20503 + x20505;
        Fp x20507 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x20508 = x20507 * x28;
        Fp x20509 = x20506 + x20508;
        Fp x20510 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x20511 = x20510 * x13;
        Fp x20512 = x20509 + x20511;
        Fp x20513 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x20514 = x20513 * x29;
        Fp x20515 = x20512 + x20514;
        Fp x20516 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x20517 = x20516 * x14;
        Fp x20518 = x20515 + x20517;
        Fp x20519 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x20520 = x20519 * x30;
        Fp x20521 = x20518 + x20520;
        Fp x20522 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x20523 = x20522 * x15;
        Fp x20524 = x20521 + x20523;
        Fp x20525 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x20526 = x20525 * x31;
        Fp x20527 = x20524 + x20526;
        Fp x20528 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x20529 = x20528 * x16;
        Fp x20530 = x20527 + x20529;
        Fp x20531 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x20532 = x20531 * x32;
        Fp x20533 = x20530 + x20532;
        Fp x20534 = x20441 - x20533;
        Fp x20535 = x20534 * x33;
        args[2][107 * steps + cycle] = x20535;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x20536 = host_outs[0];
          Fp x20537 = host_outs[1];
          args[2][129 * steps + cycle] = x20536;
          args[2][130 * steps + cycle] = x20537;
        }
        {
          Fp x20538 = Fp(x20299.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x20538;
          Fp x20539 = x20299 - x20538;
          Fp x20540 = x20539 * x26;
          Fp x20541 = Fp(x20540.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x20541;
          Fp x20542 = x20540 - x20541;
          Fp x20543 = x20542 * x26;
          Fp x20544 = Fp(x20543.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x20544;
          Fp x20545 = x20543 - x20544;
          Fp x20546 = x20545 * x26;
          Fp x20547 = Fp(x20546.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x20547;
          Fp x20548 = x20546 - x20547;
          Fp x20549 = x20548 * x26;
          Fp x20550 = Fp(x20549.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x20550;
          Fp x20551 = x20549 - x20550;
          Fp x20552 = x20551 * x26;
          Fp x20553 = Fp(x20552.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x20553;
          Fp x20554 = x20552 - x20553;
          Fp x20555 = x20554 * x26;
          Fp x20556 = Fp(x20555.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x20556;
          Fp x20557 = x20555 - x20556;
          Fp x20558 = x20557 * x26;
          Fp x20559 = Fp(x20558.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x20559;
          Fp x20560 = x20558 - x20559;
          Fp x20561 = x20560 * x26;
          Fp x20562 = Fp(x20561.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x20562;
          Fp x20563 = x20561 - x20562;
          Fp x20564 = x20563 * x26;
          Fp x20565 = Fp(x20564.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x20565;
          Fp x20566 = x20564 - x20565;
          Fp x20567 = x20566 * x26;
          Fp x20568 = Fp(x20567.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x20568;
          Fp x20569 = x20567 - x20568;
          Fp x20570 = x20569 * x26;
          Fp x20571 = Fp(x20570.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x20571;
          Fp x20572 = x20570 - x20571;
          Fp x20573 = x20572 * x26;
          Fp x20574 = Fp(x20573.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x20574;
          Fp x20575 = x20573 - x20574;
          Fp x20576 = x20575 * x26;
          Fp x20577 = Fp(x20576.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x20577;
          Fp x20578 = x20576 - x20577;
          Fp x20579 = x20578 * x26;
          Fp x20580 = Fp(x20579.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x20580;
          Fp x20581 = x20579 - x20580;
          Fp x20582 = x20581 * x26;
          Fp x20583 = Fp(x20582.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x20583;
        }
        Fp x20584 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x20585 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x20586 = x20585 * x1;
        Fp x20587 = x20584 + x20586;
        Fp x20588 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x20589 = x20588 * x3;
        Fp x20590 = x20587 + x20589;
        Fp x20591 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x20592 = x20591 * x6;
        Fp x20593 = x20590 + x20592;
        Fp x20594 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x20595 = x20594 * x11;
        Fp x20596 = x20593 + x20595;
        Fp x20597 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x20598 = x20597 * x27;
        Fp x20599 = x20596 + x20598;
        Fp x20600 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x20601 = x20600 * x12;
        Fp x20602 = x20599 + x20601;
        Fp x20603 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x20604 = x20603 * x28;
        Fp x20605 = x20602 + x20604;
        Fp x20606 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x20607 = x20606 * x13;
        Fp x20608 = x20605 + x20607;
        Fp x20609 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x20610 = x20609 * x29;
        Fp x20611 = x20608 + x20610;
        Fp x20612 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x20613 = x20612 * x14;
        Fp x20614 = x20611 + x20613;
        Fp x20615 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x20616 = x20615 * x30;
        Fp x20617 = x20614 + x20616;
        Fp x20618 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x20619 = x20618 * x15;
        Fp x20620 = x20617 + x20619;
        Fp x20621 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x20622 = x20621 * x31;
        Fp x20623 = x20620 + x20622;
        Fp x20624 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x20625 = x20624 * x16;
        Fp x20626 = x20623 + x20625;
        Fp x20627 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x20628 = x20627 * x32;
        Fp x20629 = x20626 + x20628;
        Fp x20630 = x20299 - x20629;
        Fp x20631 = x20630 * x33;
        if (x20631 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:58");
        {
          Fp x20632 = Fp(x20300.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x20632;
          Fp x20633 = x20300 - x20632;
          Fp x20634 = x20633 * x26;
          Fp x20635 = Fp(x20634.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x20635;
          Fp x20636 = x20634 - x20635;
          Fp x20637 = x20636 * x26;
          Fp x20638 = Fp(x20637.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x20638;
          Fp x20639 = x20637 - x20638;
          Fp x20640 = x20639 * x26;
          Fp x20641 = Fp(x20640.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x20641;
          Fp x20642 = x20640 - x20641;
          Fp x20643 = x20642 * x26;
          Fp x20644 = Fp(x20643.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x20644;
          Fp x20645 = x20643 - x20644;
          Fp x20646 = x20645 * x26;
          Fp x20647 = Fp(x20646.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x20647;
          Fp x20648 = x20646 - x20647;
          Fp x20649 = x20648 * x26;
          Fp x20650 = Fp(x20649.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x20650;
          Fp x20651 = x20649 - x20650;
          Fp x20652 = x20651 * x26;
          Fp x20653 = Fp(x20652.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x20653;
          Fp x20654 = x20652 - x20653;
          Fp x20655 = x20654 * x26;
          Fp x20656 = Fp(x20655.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x20656;
          Fp x20657 = x20655 - x20656;
          Fp x20658 = x20657 * x26;
          Fp x20659 = Fp(x20658.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x20659;
          Fp x20660 = x20658 - x20659;
          Fp x20661 = x20660 * x26;
          Fp x20662 = Fp(x20661.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x20662;
          Fp x20663 = x20661 - x20662;
          Fp x20664 = x20663 * x26;
          Fp x20665 = Fp(x20664.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x20665;
          Fp x20666 = x20664 - x20665;
          Fp x20667 = x20666 * x26;
          Fp x20668 = Fp(x20667.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x20668;
          Fp x20669 = x20667 - x20668;
          Fp x20670 = x20669 * x26;
          Fp x20671 = Fp(x20670.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x20671;
          Fp x20672 = x20670 - x20671;
          Fp x20673 = x20672 * x26;
          Fp x20674 = Fp(x20673.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x20674;
          Fp x20675 = x20673 - x20674;
          Fp x20676 = x20675 * x26;
          Fp x20677 = Fp(x20676.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x20677;
        }
        Fp x20678 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x20679 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x20680 = x20679 * x1;
        Fp x20681 = x20678 + x20680;
        Fp x20682 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x20683 = x20682 * x3;
        Fp x20684 = x20681 + x20683;
        Fp x20685 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x20686 = x20685 * x6;
        Fp x20687 = x20684 + x20686;
        Fp x20688 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x20689 = x20688 * x11;
        Fp x20690 = x20687 + x20689;
        Fp x20691 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x20692 = x20691 * x27;
        Fp x20693 = x20690 + x20692;
        Fp x20694 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x20695 = x20694 * x12;
        Fp x20696 = x20693 + x20695;
        Fp x20697 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x20698 = x20697 * x28;
        Fp x20699 = x20696 + x20698;
        Fp x20700 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x20701 = x20700 * x13;
        Fp x20702 = x20699 + x20701;
        Fp x20703 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x20704 = x20703 * x29;
        Fp x20705 = x20702 + x20704;
        Fp x20706 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x20707 = x20706 * x14;
        Fp x20708 = x20705 + x20707;
        Fp x20709 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x20710 = x20709 * x30;
        Fp x20711 = x20708 + x20710;
        Fp x20712 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x20713 = x20712 * x15;
        Fp x20714 = x20711 + x20713;
        Fp x20715 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x20716 = x20715 * x31;
        Fp x20717 = x20714 + x20716;
        Fp x20718 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x20719 = x20718 * x16;
        Fp x20720 = x20717 + x20719;
        Fp x20721 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x20722 = x20721 * x32;
        Fp x20723 = x20720 + x20722;
        Fp x20724 = x20300 - x20723;
        Fp x20725 = x20724 * x33;
        if (x20725 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:58");
        {
          Fp x20726 = (x20395 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x20726;
          Fp x20727 = x20395 - x71;
          Fp x20728 = (x20727 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x20728;
          Fp x20729 = x20395 - x1;
          Fp x20730 = (x20729 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x20730;
          Fp x20731 = x20395 - x2;
          Fp x20732 = (x20731 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x20732;
        }
        Fp x20733 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x20734 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x20735 = x20734 * x1;
        Fp x20736 = x20733 + x20735;
        Fp x20737 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x20738 = x20737 * x2;
        Fp x20739 = x20736 + x20738;
        Fp x20740 = x20739 - x20395;
        if (x20740 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x20741 = x20392 + x20584;
        Fp x20742 = x20392 * x1;
        Fp x20743 = x20742 * x20584;
        Fp x20744 = x20741 - x20743;
        Fp x20745 = x20393 + x20585;
        Fp x20746 = x20394 * x20585;
        Fp x20747 = x20745 - x20746;
        Fp x20748 = x20747 * x1;
        Fp x20749 = x20744 + x20748;
        Fp x20750 = x20396 + x20588;
        Fp x20751 = x20396 * x1;
        Fp x20752 = x20751 * x20588;
        Fp x20753 = x20750 - x20752;
        Fp x20754 = x20753 * x3;
        Fp x20755 = x20749 + x20754;
        Fp x20756 = x20399 + x20591;
        Fp x20757 = x20399 * x1;
        Fp x20758 = x20757 * x20591;
        Fp x20759 = x20756 - x20758;
        Fp x20760 = x20759 * x6;
        Fp x20761 = x20755 + x20760;
        Fp x20762 = x20402 + x20594;
        Fp x20763 = x20402 * x1;
        Fp x20764 = x20763 * x20594;
        Fp x20765 = x20762 - x20764;
        Fp x20766 = x20765 * x11;
        Fp x20767 = x20761 + x20766;
        Fp x20768 = x20405 + x20597;
        Fp x20769 = x20405 * x1;
        Fp x20770 = x20769 * x20597;
        Fp x20771 = x20768 - x20770;
        Fp x20772 = x20771 * x27;
        Fp x20773 = x20767 + x20772;
        Fp x20774 = x20408 + x20600;
        Fp x20775 = x20408 * x1;
        Fp x20776 = x20775 * x20600;
        Fp x20777 = x20774 - x20776;
        Fp x20778 = x20777 * x12;
        Fp x20779 = x20773 + x20778;
        Fp x20780 = x20411 + x20603;
        Fp x20781 = x20411 * x1;
        Fp x20782 = x20781 * x20603;
        Fp x20783 = x20780 - x20782;
        Fp x20784 = x20783 * x28;
        Fp x20785 = x20779 + x20784;
        Fp x20786 = x20414 + x20606;
        Fp x20787 = x20414 * x1;
        Fp x20788 = x20787 * x20606;
        Fp x20789 = x20786 - x20788;
        Fp x20790 = x20789 * x13;
        Fp x20791 = x20785 + x20790;
        Fp x20792 = x20417 + x20609;
        Fp x20793 = x20417 * x1;
        Fp x20794 = x20793 * x20609;
        Fp x20795 = x20792 - x20794;
        Fp x20796 = x20795 * x29;
        Fp x20797 = x20791 + x20796;
        Fp x20798 = x20420 + x20612;
        Fp x20799 = x20420 * x1;
        Fp x20800 = x20799 * x20612;
        Fp x20801 = x20798 - x20800;
        Fp x20802 = x20801 * x14;
        Fp x20803 = x20797 + x20802;
        Fp x20804 = x20423 + x20615;
        Fp x20805 = x20423 * x1;
        Fp x20806 = x20805 * x20615;
        Fp x20807 = x20804 - x20806;
        Fp x20808 = x20807 * x30;
        Fp x20809 = x20803 + x20808;
        Fp x20810 = x20426 + x20618;
        Fp x20811 = x20426 * x1;
        Fp x20812 = x20811 * x20618;
        Fp x20813 = x20810 - x20812;
        Fp x20814 = x20813 * x15;
        Fp x20815 = x20809 + x20814;
        Fp x20816 = x20429 + x20621;
        Fp x20817 = x20429 * x1;
        Fp x20818 = x20817 * x20621;
        Fp x20819 = x20816 - x20818;
        Fp x20820 = x20819 * x31;
        Fp x20821 = x20815 + x20820;
        Fp x20822 = x20432 + x20624;
        Fp x20823 = x20432 * x1;
        Fp x20824 = x20823 * x20624;
        Fp x20825 = x20822 - x20824;
        Fp x20826 = x20825 * x16;
        Fp x20827 = x20821 + x20826;
        Fp x20828 = x20435 + x20627;
        Fp x20829 = x20435 * x1;
        Fp x20830 = x20829 * x20627;
        Fp x20831 = x20828 - x20830;
        Fp x20832 = x20831 * x32;
        Fp x20833 = x20827 + x20832;
        Fp x20834 = x20488 + x20678;
        Fp x20835 = x20488 * x1;
        Fp x20836 = x20835 * x20678;
        Fp x20837 = x20834 - x20836;
        Fp x20838 = x20489 + x20679;
        Fp x20839 = x20490 * x20679;
        Fp x20840 = x20838 - x20839;
        Fp x20841 = x20840 * x1;
        Fp x20842 = x20837 + x20841;
        Fp x20843 = x20492 + x20682;
        Fp x20844 = x20492 * x1;
        Fp x20845 = x20844 * x20682;
        Fp x20846 = x20843 - x20845;
        Fp x20847 = x20846 * x3;
        Fp x20848 = x20842 + x20847;
        Fp x20849 = x20495 + x20685;
        Fp x20850 = x20495 * x1;
        Fp x20851 = x20850 * x20685;
        Fp x20852 = x20849 - x20851;
        Fp x20853 = x20852 * x6;
        Fp x20854 = x20848 + x20853;
        Fp x20855 = x20498 + x20688;
        Fp x20856 = x20498 * x1;
        Fp x20857 = x20856 * x20688;
        Fp x20858 = x20855 - x20857;
        Fp x20859 = x20858 * x11;
        Fp x20860 = x20854 + x20859;
        Fp x20861 = x20501 + x20691;
        Fp x20862 = x20501 * x1;
        Fp x20863 = x20862 * x20691;
        Fp x20864 = x20861 - x20863;
        Fp x20865 = x20864 * x27;
        Fp x20866 = x20860 + x20865;
        Fp x20867 = x20504 + x20694;
        Fp x20868 = x20504 * x1;
        Fp x20869 = x20868 * x20694;
        Fp x20870 = x20867 - x20869;
        Fp x20871 = x20870 * x12;
        Fp x20872 = x20866 + x20871;
        Fp x20873 = x20507 + x20697;
        Fp x20874 = x20507 * x1;
        Fp x20875 = x20874 * x20697;
        Fp x20876 = x20873 - x20875;
        Fp x20877 = x20876 * x28;
        Fp x20878 = x20872 + x20877;
        Fp x20879 = x20510 + x20700;
        Fp x20880 = x20510 * x1;
        Fp x20881 = x20880 * x20700;
        Fp x20882 = x20879 - x20881;
        Fp x20883 = x20882 * x13;
        Fp x20884 = x20878 + x20883;
        Fp x20885 = x20513 + x20703;
        Fp x20886 = x20513 * x1;
        Fp x20887 = x20886 * x20703;
        Fp x20888 = x20885 - x20887;
        Fp x20889 = x20888 * x29;
        Fp x20890 = x20884 + x20889;
        Fp x20891 = x20516 + x20706;
        Fp x20892 = x20516 * x1;
        Fp x20893 = x20892 * x20706;
        Fp x20894 = x20891 - x20893;
        Fp x20895 = x20894 * x14;
        Fp x20896 = x20890 + x20895;
        Fp x20897 = x20519 + x20709;
        Fp x20898 = x20519 * x1;
        Fp x20899 = x20898 * x20709;
        Fp x20900 = x20897 - x20899;
        Fp x20901 = x20900 * x30;
        Fp x20902 = x20896 + x20901;
        Fp x20903 = x20522 + x20712;
        Fp x20904 = x20522 * x1;
        Fp x20905 = x20904 * x20712;
        Fp x20906 = x20903 - x20905;
        Fp x20907 = x20906 * x15;
        Fp x20908 = x20902 + x20907;
        Fp x20909 = x20525 + x20715;
        Fp x20910 = x20525 * x1;
        Fp x20911 = x20910 * x20715;
        Fp x20912 = x20909 - x20911;
        Fp x20913 = x20912 * x31;
        Fp x20914 = x20908 + x20913;
        Fp x20915 = x20528 + x20718;
        Fp x20916 = x20528 * x1;
        Fp x20917 = x20916 * x20718;
        Fp x20918 = x20915 - x20917;
        Fp x20919 = x20918 * x16;
        Fp x20920 = x20914 + x20919;
        Fp x20921 = x20531 + x20721;
        Fp x20922 = x20531 * x1;
        Fp x20923 = x20922 * x20721;
        Fp x20924 = x20921 - x20923;
        Fp x20925 = x20924 * x32;
        Fp x20926 = x20920 + x20925;
        {
          Fp x20927 = Fp(x20833.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x20927;
          Fp x20928 = x20833 - x20927;
          Fp x20929 = x20928 * x26;
          Fp x20930 = Fp(x20929.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x20930;
          Fp x20931 = x20929 - x20930;
          Fp x20932 = x20931 * x26;
          Fp x20933 = Fp(x20932.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x20933;
          Fp x20934 = x20932 - x20933;
          Fp x20935 = x20934 * x26;
          Fp x20936 = Fp(x20935.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x20936;
          Fp x20937 = x20935 - x20936;
          Fp x20938 = x20937 * x26;
          Fp x20939 = Fp(x20938.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x20939;
          Fp x20940 = x20938 - x20939;
          Fp x20941 = x20940 * x26;
          Fp x20942 = Fp(x20941.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x20942;
          Fp x20943 = x20941 - x20942;
          Fp x20944 = x20943 * x26;
          Fp x20945 = Fp(x20944.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x20945;
          Fp x20946 = x20944 - x20945;
          Fp x20947 = x20946 * x26;
          Fp x20948 = Fp(x20947.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x20948;
          Fp x20949 = x20947 - x20948;
          Fp x20950 = x20949 * x26;
          Fp x20951 = Fp(x20950.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x20951;
          Fp x20952 = x20950 - x20951;
          Fp x20953 = x20952 * x26;
          Fp x20954 = Fp(x20953.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x20954;
          Fp x20955 = x20953 - x20954;
          Fp x20956 = x20955 * x26;
          Fp x20957 = Fp(x20956.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x20957;
          Fp x20958 = x20956 - x20957;
          Fp x20959 = x20958 * x26;
          Fp x20960 = Fp(x20959.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x20960;
          Fp x20961 = x20959 - x20960;
          Fp x20962 = x20961 * x26;
          Fp x20963 = Fp(x20962.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x20963;
          Fp x20964 = x20962 - x20963;
          Fp x20965 = x20964 * x26;
          Fp x20966 = Fp(x20965.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x20966;
          Fp x20967 = x20965 - x20966;
          Fp x20968 = x20967 * x26;
          Fp x20969 = Fp(x20968.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x20969;
          Fp x20970 = x20968 - x20969;
          Fp x20971 = x20970 * x26;
          Fp x20972 = Fp(x20971.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x20972;
        }
        Fp x20973 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x20974 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x20975 = x20974 * x1;
        Fp x20976 = x20973 + x20975;
        Fp x20977 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x20978 = x20977 * x3;
        Fp x20979 = x20976 + x20978;
        Fp x20980 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x20981 = x20980 * x6;
        Fp x20982 = x20979 + x20981;
        Fp x20983 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x20984 = x20983 * x11;
        Fp x20985 = x20982 + x20984;
        Fp x20986 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x20987 = x20986 * x27;
        Fp x20988 = x20985 + x20987;
        Fp x20989 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x20990 = x20989 * x12;
        Fp x20991 = x20988 + x20990;
        Fp x20992 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x20993 = x20992 * x28;
        Fp x20994 = x20991 + x20993;
        Fp x20995 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x20996 = x20995 * x13;
        Fp x20997 = x20994 + x20996;
        Fp x20998 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x20999 = x20998 * x29;
        Fp x21000 = x20997 + x20999;
        Fp x21001 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x21002 = x21001 * x14;
        Fp x21003 = x21000 + x21002;
        Fp x21004 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x21005 = x21004 * x30;
        Fp x21006 = x21003 + x21005;
        Fp x21007 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x21008 = x21007 * x15;
        Fp x21009 = x21006 + x21008;
        Fp x21010 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x21011 = x21010 * x31;
        Fp x21012 = x21009 + x21011;
        Fp x21013 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x21014 = x21013 * x16;
        Fp x21015 = x21012 + x21014;
        Fp x21016 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x21017 = x21016 * x32;
        Fp x21018 = x21015 + x21017;
        Fp x21019 = x20833 - x21018;
        Fp x21020 = x21019 * x33;
        args[2][108 * steps + cycle] = x21020;
        Fp x21021 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x21022 = x20926 + x21021;
        {
          Fp x21023 = Fp(x21022.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x21023;
          Fp x21024 = x21022 - x21023;
          Fp x21025 = x21024 * x26;
          Fp x21026 = Fp(x21025.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x21026;
          Fp x21027 = x21025 - x21026;
          Fp x21028 = x21027 * x26;
          Fp x21029 = Fp(x21028.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x21029;
          Fp x21030 = x21028 - x21029;
          Fp x21031 = x21030 * x26;
          Fp x21032 = Fp(x21031.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x21032;
          Fp x21033 = x21031 - x21032;
          Fp x21034 = x21033 * x26;
          Fp x21035 = Fp(x21034.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x21035;
          Fp x21036 = x21034 - x21035;
          Fp x21037 = x21036 * x26;
          Fp x21038 = Fp(x21037.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x21038;
          Fp x21039 = x21037 - x21038;
          Fp x21040 = x21039 * x26;
          Fp x21041 = Fp(x21040.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x21041;
          Fp x21042 = x21040 - x21041;
          Fp x21043 = x21042 * x26;
          Fp x21044 = Fp(x21043.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x21044;
          Fp x21045 = x21043 - x21044;
          Fp x21046 = x21045 * x26;
          Fp x21047 = Fp(x21046.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x21047;
          Fp x21048 = x21046 - x21047;
          Fp x21049 = x21048 * x26;
          Fp x21050 = Fp(x21049.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x21050;
          Fp x21051 = x21049 - x21050;
          Fp x21052 = x21051 * x26;
          Fp x21053 = Fp(x21052.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x21053;
          Fp x21054 = x21052 - x21053;
          Fp x21055 = x21054 * x26;
          Fp x21056 = Fp(x21055.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x21056;
          Fp x21057 = x21055 - x21056;
          Fp x21058 = x21057 * x26;
          Fp x21059 = Fp(x21058.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x21059;
          Fp x21060 = x21058 - x21059;
          Fp x21061 = x21060 * x26;
          Fp x21062 = Fp(x21061.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x21062;
          Fp x21063 = x21061 - x21062;
          Fp x21064 = x21063 * x26;
          Fp x21065 = Fp(x21064.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x21065;
          Fp x21066 = x21064 - x21065;
          Fp x21067 = x21066 * x26;
          Fp x21068 = Fp(x21067.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x21068;
        }
        Fp x21069 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x21070 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x21071 = x21070 * x1;
        Fp x21072 = x21069 + x21071;
        Fp x21073 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x21074 = x21073 * x3;
        Fp x21075 = x21072 + x21074;
        Fp x21076 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x21077 = x21076 * x6;
        Fp x21078 = x21075 + x21077;
        Fp x21079 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x21080 = x21079 * x11;
        Fp x21081 = x21078 + x21080;
        Fp x21082 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x21083 = x21082 * x27;
        Fp x21084 = x21081 + x21083;
        Fp x21085 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x21086 = x21085 * x12;
        Fp x21087 = x21084 + x21086;
        Fp x21088 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x21089 = x21088 * x28;
        Fp x21090 = x21087 + x21089;
        Fp x21091 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x21092 = x21091 * x13;
        Fp x21093 = x21090 + x21092;
        Fp x21094 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x21095 = x21094 * x29;
        Fp x21096 = x21093 + x21095;
        Fp x21097 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x21098 = x21097 * x14;
        Fp x21099 = x21096 + x21098;
        Fp x21100 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x21101 = x21100 * x30;
        Fp x21102 = x21099 + x21101;
        Fp x21103 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x21104 = x21103 * x15;
        Fp x21105 = x21102 + x21104;
        Fp x21106 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x21107 = x21106 * x31;
        Fp x21108 = x21105 + x21107;
        Fp x21109 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x21110 = x21109 * x16;
        Fp x21111 = x21108 + x21110;
        Fp x21112 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x21113 = x21112 * x32;
        Fp x21114 = x21111 + x21113;
        Fp x21115 = x21022 - x21114;
        Fp x21116 = x21115 * x33;
        args[2][109 * steps + cycle] = x21116;
        {
          {
            Fp x21117 = (x21018 == 0) ? Fp(1) : Fp(0);
            Fp x21118 = x71 - x21117;
            args[2][114 * steps + cycle] = x21118;
            Fp x21119 = inv(x21018);
            args[2][115 * steps + cycle] = x21119;
          }
          Fp x21120 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x21121 = x21018 * x21120;
          Fp x21122 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x21123 = x21121 - x21122;
          if (x21123 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x21124 = x71 - x21122;
          Fp x21125 = x21124 * x21018;
          if (x21125 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x21126 = (x21114 == 0) ? Fp(1) : Fp(0);
            Fp x21127 = x71 - x21126;
            args[2][116 * steps + cycle] = x21127;
            Fp x21128 = inv(x21114);
            args[2][117 * steps + cycle] = x21128;
          }
          Fp x21129 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x21130 = x21114 * x21129;
          Fp x21131 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x21132 = x21130 - x21131;
          if (x21132 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x21133 = x71 - x21131;
          Fp x21134 = x21133 * x21114;
          if (x21134 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x21135 = x21124 * x21133;
          Fp x21136 = x71 - x21135;
          args[2][111 * steps + cycle] = x21136;
          Fp x21137 = x71 - x20721;
          Fp x21138 = x20531 * x21137;
          Fp x21139 = x71 - x21112;
          Fp x21140 = x21138 * x21139;
          Fp x21141 = x71 - x20531;
          Fp x21142 = x21141 * x20721;
          Fp x21143 = x21142 * x21112;
          Fp x21144 = x21140 + x21143;
          args[2][112 * steps + cycle] = x21144;
          Fp x21145 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x21146 = x21145 + x21112;
          Fp x21147 = x21145 * x1;
          Fp x21148 = x21147 * x21112;
          Fp x21149 = x21146 - x21148;
          args[2][113 * steps + cycle] = x21149;
        }
        args[2][100 * steps + cycle] = x21018;
        args[2][101 * steps + cycle] = x21114;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x21150 = x20322 + x3;
        args[2][104 * steps + cycle] = x21150;
        args[2][105 * steps + cycle] = x20344;
        Fp x21151 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x21152 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x21153 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x21154 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x21155 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x21156 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x20344;
        host_args[2] = x20322;
        host_args[3] = x20533;
        host_args[4] = x20437;
        host_args[5] = x20723;
        host_args[6] = x20629;
        host_args[7] = x21114;
        host_args[8] = x21018;
        host_args[9] = x21151;
        host_args[10] = x21152;
        host_args[11] = x21153;
        host_args[12] = x21154;
        host_args[13] = x21155;
        host_args[14] = x21156;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x21157 = args[2][73 * steps + ((cycle - 1) & mask)];
      if (x21157 != 0) {
        {
          Fp x21158 = Fp(x20297.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x21158;
          Fp x21159 = x20297 - x21158;
          Fp x21160 = x21159 * x26;
          Fp x21161 = Fp(x21160.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x21161;
          Fp x21162 = x21160 - x21161;
          Fp x21163 = x21162 * x26;
          Fp x21164 = Fp(x21163.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x21164;
          Fp x21165 = x21163 - x21164;
          Fp x21166 = x21165 * x26;
          Fp x21167 = Fp(x21166.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x21167;
          Fp x21168 = x21166 - x21167;
          Fp x21169 = x21168 * x26;
          Fp x21170 = Fp(x21169.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x21170;
          Fp x21171 = x21169 - x21170;
          Fp x21172 = x21171 * x26;
          Fp x21173 = Fp(x21172.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x21173;
          Fp x21174 = x21172 - x21173;
          Fp x21175 = x21174 * x26;
          Fp x21176 = Fp(x21175.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x21176;
          Fp x21177 = x21175 - x21176;
          Fp x21178 = x21177 * x26;
          Fp x21179 = Fp(x21178.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x21179;
          Fp x21180 = x21178 - x21179;
          Fp x21181 = x21180 * x26;
          Fp x21182 = Fp(x21181.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x21182;
          Fp x21183 = x21181 - x21182;
          Fp x21184 = x21183 * x26;
          Fp x21185 = Fp(x21184.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x21185;
          Fp x21186 = x21184 - x21185;
          Fp x21187 = x21186 * x26;
          Fp x21188 = Fp(x21187.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x21188;
          Fp x21189 = x21187 - x21188;
          Fp x21190 = x21189 * x26;
          Fp x21191 = Fp(x21190.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x21191;
          Fp x21192 = x21190 - x21191;
          Fp x21193 = x21192 * x26;
          Fp x21194 = Fp(x21193.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x21194;
          Fp x21195 = x21193 - x21194;
          Fp x21196 = x21195 * x26;
          Fp x21197 = Fp(x21196.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x21197;
          Fp x21198 = x21196 - x21197;
          Fp x21199 = x21198 * x26;
          Fp x21200 = Fp(x21199.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x21200;
          Fp x21201 = x21199 - x21200;
          Fp x21202 = x21201 * x26;
          Fp x21203 = Fp(x21202.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x21203;
        }
        Fp x21204 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x21205 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x21206 = x21205 * x1;
        Fp x21207 = x21204 + x21206;
        Fp x21208 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x21209 = x21208 * x3;
        Fp x21210 = x21207 + x21209;
        Fp x21211 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x21212 = x21211 * x6;
        Fp x21213 = x21210 + x21212;
        Fp x21214 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x21215 = x21214 * x11;
        Fp x21216 = x21213 + x21215;
        Fp x21217 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x21218 = x21217 * x27;
        Fp x21219 = x21216 + x21218;
        Fp x21220 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x21221 = x21220 * x12;
        Fp x21222 = x21219 + x21221;
        Fp x21223 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x21224 = x21223 * x28;
        Fp x21225 = x21222 + x21224;
        Fp x21226 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x21227 = x21226 * x13;
        Fp x21228 = x21225 + x21227;
        Fp x21229 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x21230 = x21229 * x29;
        Fp x21231 = x21228 + x21230;
        Fp x21232 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x21233 = x21232 * x14;
        Fp x21234 = x21231 + x21233;
        Fp x21235 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x21236 = x21235 * x30;
        Fp x21237 = x21234 + x21236;
        Fp x21238 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x21239 = x21238 * x15;
        Fp x21240 = x21237 + x21239;
        Fp x21241 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x21242 = x21241 * x31;
        Fp x21243 = x21240 + x21242;
        Fp x21244 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x21245 = x21244 * x16;
        Fp x21246 = x21243 + x21245;
        Fp x21247 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x21248 = x21247 * x32;
        Fp x21249 = x21246 + x21248;
        Fp x21250 = x20297 - x21249;
        Fp x21251 = x21250 * x33;
        args[2][106 * steps + cycle] = x21251;
        Fp x21252 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x21253 = x20298 + x21252;
        {
          Fp x21254 = Fp(x21253.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x21254;
          Fp x21255 = x21253 - x21254;
          Fp x21256 = x21255 * x26;
          Fp x21257 = Fp(x21256.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x21257;
          Fp x21258 = x21256 - x21257;
          Fp x21259 = x21258 * x26;
          Fp x21260 = Fp(x21259.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x21260;
          Fp x21261 = x21259 - x21260;
          Fp x21262 = x21261 * x26;
          Fp x21263 = Fp(x21262.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x21263;
          Fp x21264 = x21262 - x21263;
          Fp x21265 = x21264 * x26;
          Fp x21266 = Fp(x21265.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x21266;
          Fp x21267 = x21265 - x21266;
          Fp x21268 = x21267 * x26;
          Fp x21269 = Fp(x21268.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x21269;
          Fp x21270 = x21268 - x21269;
          Fp x21271 = x21270 * x26;
          Fp x21272 = Fp(x21271.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x21272;
          Fp x21273 = x21271 - x21272;
          Fp x21274 = x21273 * x26;
          Fp x21275 = Fp(x21274.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x21275;
          Fp x21276 = x21274 - x21275;
          Fp x21277 = x21276 * x26;
          Fp x21278 = Fp(x21277.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x21278;
          Fp x21279 = x21277 - x21278;
          Fp x21280 = x21279 * x26;
          Fp x21281 = Fp(x21280.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x21281;
          Fp x21282 = x21280 - x21281;
          Fp x21283 = x21282 * x26;
          Fp x21284 = Fp(x21283.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x21284;
          Fp x21285 = x21283 - x21284;
          Fp x21286 = x21285 * x26;
          Fp x21287 = Fp(x21286.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x21287;
          Fp x21288 = x21286 - x21287;
          Fp x21289 = x21288 * x26;
          Fp x21290 = Fp(x21289.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x21290;
          Fp x21291 = x21289 - x21290;
          Fp x21292 = x21291 * x26;
          Fp x21293 = Fp(x21292.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x21293;
          Fp x21294 = x21292 - x21293;
          Fp x21295 = x21294 * x26;
          Fp x21296 = Fp(x21295.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x21296;
          Fp x21297 = x21295 - x21296;
          Fp x21298 = x21297 * x26;
          Fp x21299 = Fp(x21298.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x21299;
        }
        Fp x21300 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x21301 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x21302 = x21301 * x1;
        Fp x21303 = x21300 + x21302;
        Fp x21304 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x21305 = x21304 * x3;
        Fp x21306 = x21303 + x21305;
        Fp x21307 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x21308 = x21307 * x6;
        Fp x21309 = x21306 + x21308;
        Fp x21310 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x21311 = x21310 * x11;
        Fp x21312 = x21309 + x21311;
        Fp x21313 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x21314 = x21313 * x27;
        Fp x21315 = x21312 + x21314;
        Fp x21316 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x21317 = x21316 * x12;
        Fp x21318 = x21315 + x21317;
        Fp x21319 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x21320 = x21319 * x28;
        Fp x21321 = x21318 + x21320;
        Fp x21322 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x21323 = x21322 * x13;
        Fp x21324 = x21321 + x21323;
        Fp x21325 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x21326 = x21325 * x29;
        Fp x21327 = x21324 + x21326;
        Fp x21328 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x21329 = x21328 * x14;
        Fp x21330 = x21327 + x21329;
        Fp x21331 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x21332 = x21331 * x30;
        Fp x21333 = x21330 + x21332;
        Fp x21334 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x21335 = x21334 * x15;
        Fp x21336 = x21333 + x21335;
        Fp x21337 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x21338 = x21337 * x31;
        Fp x21339 = x21336 + x21338;
        Fp x21340 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x21341 = x21340 * x16;
        Fp x21342 = x21339 + x21341;
        Fp x21343 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x21344 = x21343 * x32;
        Fp x21345 = x21342 + x21344;
        Fp x21346 = x21253 - x21345;
        Fp x21347 = x21346 * x33;
        args[2][107 * steps + cycle] = x21347;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x21348 = host_outs[0];
          Fp x21349 = host_outs[1];
          args[2][129 * steps + cycle] = x21348;
          args[2][130 * steps + cycle] = x21349;
        }
        {
          Fp x21350 = Fp(x20299.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x21350;
          Fp x21351 = x20299 - x21350;
          Fp x21352 = x21351 * x26;
          Fp x21353 = Fp(x21352.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x21353;
          Fp x21354 = x21352 - x21353;
          Fp x21355 = x21354 * x26;
          Fp x21356 = Fp(x21355.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x21356;
          Fp x21357 = x21355 - x21356;
          Fp x21358 = x21357 * x26;
          Fp x21359 = Fp(x21358.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x21359;
          Fp x21360 = x21358 - x21359;
          Fp x21361 = x21360 * x26;
          Fp x21362 = Fp(x21361.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x21362;
          Fp x21363 = x21361 - x21362;
          Fp x21364 = x21363 * x26;
          Fp x21365 = Fp(x21364.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x21365;
          Fp x21366 = x21364 - x21365;
          Fp x21367 = x21366 * x26;
          Fp x21368 = Fp(x21367.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x21368;
          Fp x21369 = x21367 - x21368;
          Fp x21370 = x21369 * x26;
          Fp x21371 = Fp(x21370.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x21371;
          Fp x21372 = x21370 - x21371;
          Fp x21373 = x21372 * x26;
          Fp x21374 = Fp(x21373.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x21374;
          Fp x21375 = x21373 - x21374;
          Fp x21376 = x21375 * x26;
          Fp x21377 = Fp(x21376.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x21377;
          Fp x21378 = x21376 - x21377;
          Fp x21379 = x21378 * x26;
          Fp x21380 = Fp(x21379.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x21380;
          Fp x21381 = x21379 - x21380;
          Fp x21382 = x21381 * x26;
          Fp x21383 = Fp(x21382.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x21383;
          Fp x21384 = x21382 - x21383;
          Fp x21385 = x21384 * x26;
          Fp x21386 = Fp(x21385.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x21386;
          Fp x21387 = x21385 - x21386;
          Fp x21388 = x21387 * x26;
          Fp x21389 = Fp(x21388.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x21389;
          Fp x21390 = x21388 - x21389;
          Fp x21391 = x21390 * x26;
          Fp x21392 = Fp(x21391.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x21392;
          Fp x21393 = x21391 - x21392;
          Fp x21394 = x21393 * x26;
          Fp x21395 = Fp(x21394.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x21395;
        }
        Fp x21396 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x21397 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x21398 = x21397 * x1;
        Fp x21399 = x21396 + x21398;
        Fp x21400 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x21401 = x21400 * x3;
        Fp x21402 = x21399 + x21401;
        Fp x21403 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x21404 = x21403 * x6;
        Fp x21405 = x21402 + x21404;
        Fp x21406 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x21407 = x21406 * x11;
        Fp x21408 = x21405 + x21407;
        Fp x21409 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x21410 = x21409 * x27;
        Fp x21411 = x21408 + x21410;
        Fp x21412 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x21413 = x21412 * x12;
        Fp x21414 = x21411 + x21413;
        Fp x21415 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x21416 = x21415 * x28;
        Fp x21417 = x21414 + x21416;
        Fp x21418 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x21419 = x21418 * x13;
        Fp x21420 = x21417 + x21419;
        Fp x21421 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x21422 = x21421 * x29;
        Fp x21423 = x21420 + x21422;
        Fp x21424 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x21425 = x21424 * x14;
        Fp x21426 = x21423 + x21425;
        Fp x21427 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x21428 = x21427 * x30;
        Fp x21429 = x21426 + x21428;
        Fp x21430 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x21431 = x21430 * x15;
        Fp x21432 = x21429 + x21431;
        Fp x21433 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x21434 = x21433 * x31;
        Fp x21435 = x21432 + x21434;
        Fp x21436 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x21437 = x21436 * x16;
        Fp x21438 = x21435 + x21437;
        Fp x21439 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x21440 = x21439 * x32;
        Fp x21441 = x21438 + x21440;
        Fp x21442 = x20299 - x21441;
        Fp x21443 = x21442 * x33;
        if (x21443 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:59");
        {
          Fp x21444 = Fp(x20300.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x21444;
          Fp x21445 = x20300 - x21444;
          Fp x21446 = x21445 * x26;
          Fp x21447 = Fp(x21446.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x21447;
          Fp x21448 = x21446 - x21447;
          Fp x21449 = x21448 * x26;
          Fp x21450 = Fp(x21449.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x21450;
          Fp x21451 = x21449 - x21450;
          Fp x21452 = x21451 * x26;
          Fp x21453 = Fp(x21452.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x21453;
          Fp x21454 = x21452 - x21453;
          Fp x21455 = x21454 * x26;
          Fp x21456 = Fp(x21455.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x21456;
          Fp x21457 = x21455 - x21456;
          Fp x21458 = x21457 * x26;
          Fp x21459 = Fp(x21458.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x21459;
          Fp x21460 = x21458 - x21459;
          Fp x21461 = x21460 * x26;
          Fp x21462 = Fp(x21461.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x21462;
          Fp x21463 = x21461 - x21462;
          Fp x21464 = x21463 * x26;
          Fp x21465 = Fp(x21464.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x21465;
          Fp x21466 = x21464 - x21465;
          Fp x21467 = x21466 * x26;
          Fp x21468 = Fp(x21467.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x21468;
          Fp x21469 = x21467 - x21468;
          Fp x21470 = x21469 * x26;
          Fp x21471 = Fp(x21470.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x21471;
          Fp x21472 = x21470 - x21471;
          Fp x21473 = x21472 * x26;
          Fp x21474 = Fp(x21473.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x21474;
          Fp x21475 = x21473 - x21474;
          Fp x21476 = x21475 * x26;
          Fp x21477 = Fp(x21476.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x21477;
          Fp x21478 = x21476 - x21477;
          Fp x21479 = x21478 * x26;
          Fp x21480 = Fp(x21479.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x21480;
          Fp x21481 = x21479 - x21480;
          Fp x21482 = x21481 * x26;
          Fp x21483 = Fp(x21482.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x21483;
          Fp x21484 = x21482 - x21483;
          Fp x21485 = x21484 * x26;
          Fp x21486 = Fp(x21485.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x21486;
          Fp x21487 = x21485 - x21486;
          Fp x21488 = x21487 * x26;
          Fp x21489 = Fp(x21488.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x21489;
        }
        Fp x21490 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x21491 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x21492 = x21491 * x1;
        Fp x21493 = x21490 + x21492;
        Fp x21494 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x21495 = x21494 * x3;
        Fp x21496 = x21493 + x21495;
        Fp x21497 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x21498 = x21497 * x6;
        Fp x21499 = x21496 + x21498;
        Fp x21500 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x21501 = x21500 * x11;
        Fp x21502 = x21499 + x21501;
        Fp x21503 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x21504 = x21503 * x27;
        Fp x21505 = x21502 + x21504;
        Fp x21506 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x21507 = x21506 * x12;
        Fp x21508 = x21505 + x21507;
        Fp x21509 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x21510 = x21509 * x28;
        Fp x21511 = x21508 + x21510;
        Fp x21512 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x21513 = x21512 * x13;
        Fp x21514 = x21511 + x21513;
        Fp x21515 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x21516 = x21515 * x29;
        Fp x21517 = x21514 + x21516;
        Fp x21518 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x21519 = x21518 * x14;
        Fp x21520 = x21517 + x21519;
        Fp x21521 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x21522 = x21521 * x30;
        Fp x21523 = x21520 + x21522;
        Fp x21524 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x21525 = x21524 * x15;
        Fp x21526 = x21523 + x21525;
        Fp x21527 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x21528 = x21527 * x31;
        Fp x21529 = x21526 + x21528;
        Fp x21530 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x21531 = x21530 * x16;
        Fp x21532 = x21529 + x21531;
        Fp x21533 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x21534 = x21533 * x32;
        Fp x21535 = x21532 + x21534;
        Fp x21536 = x20300 - x21535;
        Fp x21537 = x21536 * x33;
        if (x21537 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:59");
        {
          Fp x21538 = (x21207 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x21538;
          Fp x21539 = x21207 - x71;
          Fp x21540 = (x21539 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x21540;
          Fp x21541 = x21207 - x1;
          Fp x21542 = (x21541 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x21542;
          Fp x21543 = x21207 - x2;
          Fp x21544 = (x21543 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x21544;
        }
        Fp x21545 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x21546 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x21547 = x21546 * x1;
        Fp x21548 = x21545 + x21547;
        Fp x21549 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x21550 = x21549 * x2;
        Fp x21551 = x21548 + x21550;
        Fp x21552 = x21551 - x21207;
        if (x21552 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x21553 = x21204 + x21396;
        Fp x21554 = x21204 * x21396;
        Fp x21555 = x21553 - x21554;
        Fp x21556 = x21205 + x21397;
        Fp x21557 = x21205 * x21397;
        Fp x21558 = x21556 - x21557;
        Fp x21559 = x21558 * x1;
        Fp x21560 = x21555 + x21559;
        Fp x21561 = x21208 + x21400;
        Fp x21562 = x21208 * x21400;
        Fp x21563 = x21561 - x21562;
        Fp x21564 = x21563 * x3;
        Fp x21565 = x21560 + x21564;
        Fp x21566 = x21211 + x21403;
        Fp x21567 = x21211 * x21403;
        Fp x21568 = x21566 - x21567;
        Fp x21569 = x21568 * x6;
        Fp x21570 = x21565 + x21569;
        Fp x21571 = x21214 + x21406;
        Fp x21572 = x21214 * x21406;
        Fp x21573 = x21571 - x21572;
        Fp x21574 = x21573 * x11;
        Fp x21575 = x21570 + x21574;
        Fp x21576 = x21217 + x21409;
        Fp x21577 = x21217 * x21409;
        Fp x21578 = x21576 - x21577;
        Fp x21579 = x21578 * x27;
        Fp x21580 = x21575 + x21579;
        Fp x21581 = x21220 + x21412;
        Fp x21582 = x21220 * x21412;
        Fp x21583 = x21581 - x21582;
        Fp x21584 = x21583 * x12;
        Fp x21585 = x21580 + x21584;
        Fp x21586 = x21223 + x21415;
        Fp x21587 = x21223 * x21415;
        Fp x21588 = x21586 - x21587;
        Fp x21589 = x21588 * x28;
        Fp x21590 = x21585 + x21589;
        Fp x21591 = x21226 + x21418;
        Fp x21592 = x21226 * x21418;
        Fp x21593 = x21591 - x21592;
        Fp x21594 = x21593 * x13;
        Fp x21595 = x21590 + x21594;
        Fp x21596 = x21229 + x21421;
        Fp x21597 = x21229 * x21421;
        Fp x21598 = x21596 - x21597;
        Fp x21599 = x21598 * x29;
        Fp x21600 = x21595 + x21599;
        Fp x21601 = x21232 + x21424;
        Fp x21602 = x21232 * x21424;
        Fp x21603 = x21601 - x21602;
        Fp x21604 = x21603 * x14;
        Fp x21605 = x21600 + x21604;
        Fp x21606 = x21235 + x21427;
        Fp x21607 = x21235 * x21427;
        Fp x21608 = x21606 - x21607;
        Fp x21609 = x21608 * x30;
        Fp x21610 = x21605 + x21609;
        Fp x21611 = x21238 + x21430;
        Fp x21612 = x21238 * x21430;
        Fp x21613 = x21611 - x21612;
        Fp x21614 = x21613 * x15;
        Fp x21615 = x21610 + x21614;
        Fp x21616 = x21241 + x21433;
        Fp x21617 = x21241 * x21433;
        Fp x21618 = x21616 - x21617;
        Fp x21619 = x21618 * x31;
        Fp x21620 = x21615 + x21619;
        Fp x21621 = x21244 + x21436;
        Fp x21622 = x21244 * x21436;
        Fp x21623 = x21621 - x21622;
        Fp x21624 = x21623 * x16;
        Fp x21625 = x21620 + x21624;
        Fp x21626 = x21247 + x21439;
        Fp x21627 = x21247 * x21439;
        Fp x21628 = x21626 - x21627;
        Fp x21629 = x21628 * x32;
        Fp x21630 = x21625 + x21629;
        Fp x21631 = x21300 + x21490;
        Fp x21632 = x21300 * x21490;
        Fp x21633 = x21631 - x21632;
        Fp x21634 = x21301 + x21491;
        Fp x21635 = x21301 * x21491;
        Fp x21636 = x21634 - x21635;
        Fp x21637 = x21636 * x1;
        Fp x21638 = x21633 + x21637;
        Fp x21639 = x21304 + x21494;
        Fp x21640 = x21304 * x21494;
        Fp x21641 = x21639 - x21640;
        Fp x21642 = x21641 * x3;
        Fp x21643 = x21638 + x21642;
        Fp x21644 = x21307 + x21497;
        Fp x21645 = x21307 * x21497;
        Fp x21646 = x21644 - x21645;
        Fp x21647 = x21646 * x6;
        Fp x21648 = x21643 + x21647;
        Fp x21649 = x21310 + x21500;
        Fp x21650 = x21310 * x21500;
        Fp x21651 = x21649 - x21650;
        Fp x21652 = x21651 * x11;
        Fp x21653 = x21648 + x21652;
        Fp x21654 = x21313 + x21503;
        Fp x21655 = x21313 * x21503;
        Fp x21656 = x21654 - x21655;
        Fp x21657 = x21656 * x27;
        Fp x21658 = x21653 + x21657;
        Fp x21659 = x21316 + x21506;
        Fp x21660 = x21316 * x21506;
        Fp x21661 = x21659 - x21660;
        Fp x21662 = x21661 * x12;
        Fp x21663 = x21658 + x21662;
        Fp x21664 = x21319 + x21509;
        Fp x21665 = x21319 * x21509;
        Fp x21666 = x21664 - x21665;
        Fp x21667 = x21666 * x28;
        Fp x21668 = x21663 + x21667;
        Fp x21669 = x21322 + x21512;
        Fp x21670 = x21322 * x21512;
        Fp x21671 = x21669 - x21670;
        Fp x21672 = x21671 * x13;
        Fp x21673 = x21668 + x21672;
        Fp x21674 = x21325 + x21515;
        Fp x21675 = x21325 * x21515;
        Fp x21676 = x21674 - x21675;
        Fp x21677 = x21676 * x29;
        Fp x21678 = x21673 + x21677;
        Fp x21679 = x21328 + x21518;
        Fp x21680 = x21328 * x21518;
        Fp x21681 = x21679 - x21680;
        Fp x21682 = x21681 * x14;
        Fp x21683 = x21678 + x21682;
        Fp x21684 = x21331 + x21521;
        Fp x21685 = x21331 * x21521;
        Fp x21686 = x21684 - x21685;
        Fp x21687 = x21686 * x30;
        Fp x21688 = x21683 + x21687;
        Fp x21689 = x21334 + x21524;
        Fp x21690 = x21334 * x21524;
        Fp x21691 = x21689 - x21690;
        Fp x21692 = x21691 * x15;
        Fp x21693 = x21688 + x21692;
        Fp x21694 = x21337 + x21527;
        Fp x21695 = x21337 * x21527;
        Fp x21696 = x21694 - x21695;
        Fp x21697 = x21696 * x31;
        Fp x21698 = x21693 + x21697;
        Fp x21699 = x21340 + x21530;
        Fp x21700 = x21340 * x21530;
        Fp x21701 = x21699 - x21700;
        Fp x21702 = x21701 * x16;
        Fp x21703 = x21698 + x21702;
        Fp x21704 = x21343 + x21533;
        Fp x21705 = x21343 * x21533;
        Fp x21706 = x21704 - x21705;
        Fp x21707 = x21706 * x32;
        Fp x21708 = x21703 + x21707;
        {
          Fp x21709 = Fp(x21630.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x21709;
          Fp x21710 = x21630 - x21709;
          Fp x21711 = x21710 * x26;
          Fp x21712 = Fp(x21711.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x21712;
          Fp x21713 = x21711 - x21712;
          Fp x21714 = x21713 * x26;
          Fp x21715 = Fp(x21714.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x21715;
          Fp x21716 = x21714 - x21715;
          Fp x21717 = x21716 * x26;
          Fp x21718 = Fp(x21717.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x21718;
          Fp x21719 = x21717 - x21718;
          Fp x21720 = x21719 * x26;
          Fp x21721 = Fp(x21720.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x21721;
          Fp x21722 = x21720 - x21721;
          Fp x21723 = x21722 * x26;
          Fp x21724 = Fp(x21723.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x21724;
          Fp x21725 = x21723 - x21724;
          Fp x21726 = x21725 * x26;
          Fp x21727 = Fp(x21726.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x21727;
          Fp x21728 = x21726 - x21727;
          Fp x21729 = x21728 * x26;
          Fp x21730 = Fp(x21729.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x21730;
          Fp x21731 = x21729 - x21730;
          Fp x21732 = x21731 * x26;
          Fp x21733 = Fp(x21732.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x21733;
          Fp x21734 = x21732 - x21733;
          Fp x21735 = x21734 * x26;
          Fp x21736 = Fp(x21735.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x21736;
          Fp x21737 = x21735 - x21736;
          Fp x21738 = x21737 * x26;
          Fp x21739 = Fp(x21738.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x21739;
          Fp x21740 = x21738 - x21739;
          Fp x21741 = x21740 * x26;
          Fp x21742 = Fp(x21741.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x21742;
          Fp x21743 = x21741 - x21742;
          Fp x21744 = x21743 * x26;
          Fp x21745 = Fp(x21744.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x21745;
          Fp x21746 = x21744 - x21745;
          Fp x21747 = x21746 * x26;
          Fp x21748 = Fp(x21747.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x21748;
          Fp x21749 = x21747 - x21748;
          Fp x21750 = x21749 * x26;
          Fp x21751 = Fp(x21750.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x21751;
          Fp x21752 = x21750 - x21751;
          Fp x21753 = x21752 * x26;
          Fp x21754 = Fp(x21753.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x21754;
        }
        Fp x21755 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x21756 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x21757 = x21756 * x1;
        Fp x21758 = x21755 + x21757;
        Fp x21759 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x21760 = x21759 * x3;
        Fp x21761 = x21758 + x21760;
        Fp x21762 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x21763 = x21762 * x6;
        Fp x21764 = x21761 + x21763;
        Fp x21765 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x21766 = x21765 * x11;
        Fp x21767 = x21764 + x21766;
        Fp x21768 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x21769 = x21768 * x27;
        Fp x21770 = x21767 + x21769;
        Fp x21771 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x21772 = x21771 * x12;
        Fp x21773 = x21770 + x21772;
        Fp x21774 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x21775 = x21774 * x28;
        Fp x21776 = x21773 + x21775;
        Fp x21777 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x21778 = x21777 * x13;
        Fp x21779 = x21776 + x21778;
        Fp x21780 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x21781 = x21780 * x29;
        Fp x21782 = x21779 + x21781;
        Fp x21783 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x21784 = x21783 * x14;
        Fp x21785 = x21782 + x21784;
        Fp x21786 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x21787 = x21786 * x30;
        Fp x21788 = x21785 + x21787;
        Fp x21789 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x21790 = x21789 * x15;
        Fp x21791 = x21788 + x21790;
        Fp x21792 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x21793 = x21792 * x31;
        Fp x21794 = x21791 + x21793;
        Fp x21795 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x21796 = x21795 * x16;
        Fp x21797 = x21794 + x21796;
        Fp x21798 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x21799 = x21798 * x32;
        Fp x21800 = x21797 + x21799;
        Fp x21801 = x21630 - x21800;
        Fp x21802 = x21801 * x33;
        args[2][108 * steps + cycle] = x21802;
        Fp x21803 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x21804 = x21708 + x21803;
        {
          Fp x21805 = Fp(x21804.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x21805;
          Fp x21806 = x21804 - x21805;
          Fp x21807 = x21806 * x26;
          Fp x21808 = Fp(x21807.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x21808;
          Fp x21809 = x21807 - x21808;
          Fp x21810 = x21809 * x26;
          Fp x21811 = Fp(x21810.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x21811;
          Fp x21812 = x21810 - x21811;
          Fp x21813 = x21812 * x26;
          Fp x21814 = Fp(x21813.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x21814;
          Fp x21815 = x21813 - x21814;
          Fp x21816 = x21815 * x26;
          Fp x21817 = Fp(x21816.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x21817;
          Fp x21818 = x21816 - x21817;
          Fp x21819 = x21818 * x26;
          Fp x21820 = Fp(x21819.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x21820;
          Fp x21821 = x21819 - x21820;
          Fp x21822 = x21821 * x26;
          Fp x21823 = Fp(x21822.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x21823;
          Fp x21824 = x21822 - x21823;
          Fp x21825 = x21824 * x26;
          Fp x21826 = Fp(x21825.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x21826;
          Fp x21827 = x21825 - x21826;
          Fp x21828 = x21827 * x26;
          Fp x21829 = Fp(x21828.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x21829;
          Fp x21830 = x21828 - x21829;
          Fp x21831 = x21830 * x26;
          Fp x21832 = Fp(x21831.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x21832;
          Fp x21833 = x21831 - x21832;
          Fp x21834 = x21833 * x26;
          Fp x21835 = Fp(x21834.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x21835;
          Fp x21836 = x21834 - x21835;
          Fp x21837 = x21836 * x26;
          Fp x21838 = Fp(x21837.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x21838;
          Fp x21839 = x21837 - x21838;
          Fp x21840 = x21839 * x26;
          Fp x21841 = Fp(x21840.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x21841;
          Fp x21842 = x21840 - x21841;
          Fp x21843 = x21842 * x26;
          Fp x21844 = Fp(x21843.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x21844;
          Fp x21845 = x21843 - x21844;
          Fp x21846 = x21845 * x26;
          Fp x21847 = Fp(x21846.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x21847;
          Fp x21848 = x21846 - x21847;
          Fp x21849 = x21848 * x26;
          Fp x21850 = Fp(x21849.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x21850;
        }
        Fp x21851 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x21852 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x21853 = x21852 * x1;
        Fp x21854 = x21851 + x21853;
        Fp x21855 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x21856 = x21855 * x3;
        Fp x21857 = x21854 + x21856;
        Fp x21858 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x21859 = x21858 * x6;
        Fp x21860 = x21857 + x21859;
        Fp x21861 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x21862 = x21861 * x11;
        Fp x21863 = x21860 + x21862;
        Fp x21864 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x21865 = x21864 * x27;
        Fp x21866 = x21863 + x21865;
        Fp x21867 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x21868 = x21867 * x12;
        Fp x21869 = x21866 + x21868;
        Fp x21870 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x21871 = x21870 * x28;
        Fp x21872 = x21869 + x21871;
        Fp x21873 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x21874 = x21873 * x13;
        Fp x21875 = x21872 + x21874;
        Fp x21876 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x21877 = x21876 * x29;
        Fp x21878 = x21875 + x21877;
        Fp x21879 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x21880 = x21879 * x14;
        Fp x21881 = x21878 + x21880;
        Fp x21882 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x21883 = x21882 * x30;
        Fp x21884 = x21881 + x21883;
        Fp x21885 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x21886 = x21885 * x15;
        Fp x21887 = x21884 + x21886;
        Fp x21888 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x21889 = x21888 * x31;
        Fp x21890 = x21887 + x21889;
        Fp x21891 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x21892 = x21891 * x16;
        Fp x21893 = x21890 + x21892;
        Fp x21894 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x21895 = x21894 * x32;
        Fp x21896 = x21893 + x21895;
        Fp x21897 = x21804 - x21896;
        Fp x21898 = x21897 * x33;
        args[2][109 * steps + cycle] = x21898;
        {
          {
            Fp x21899 = (x21800 == 0) ? Fp(1) : Fp(0);
            Fp x21900 = x71 - x21899;
            args[2][114 * steps + cycle] = x21900;
            Fp x21901 = inv(x21800);
            args[2][115 * steps + cycle] = x21901;
          }
          Fp x21902 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x21903 = x21800 * x21902;
          Fp x21904 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x21905 = x21903 - x21904;
          if (x21905 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x21906 = x71 - x21904;
          Fp x21907 = x21906 * x21800;
          if (x21907 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x21908 = (x21896 == 0) ? Fp(1) : Fp(0);
            Fp x21909 = x71 - x21908;
            args[2][116 * steps + cycle] = x21909;
            Fp x21910 = inv(x21896);
            args[2][117 * steps + cycle] = x21910;
          }
          Fp x21911 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x21912 = x21896 * x21911;
          Fp x21913 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x21914 = x21912 - x21913;
          if (x21914 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x21915 = x71 - x21913;
          Fp x21916 = x21915 * x21896;
          if (x21916 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x21917 = x21906 * x21915;
          Fp x21918 = x71 - x21917;
          args[2][111 * steps + cycle] = x21918;
          Fp x21919 = x71 - x21533;
          Fp x21920 = x21343 * x21919;
          Fp x21921 = x71 - x21894;
          Fp x21922 = x21920 * x21921;
          Fp x21923 = x71 - x21343;
          Fp x21924 = x21923 * x21533;
          Fp x21925 = x21924 * x21894;
          Fp x21926 = x21922 + x21925;
          args[2][112 * steps + cycle] = x21926;
          Fp x21927 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x21928 = x21927 + x21894;
          Fp x21929 = x21927 * x1;
          Fp x21930 = x21929 * x21894;
          Fp x21931 = x21928 - x21930;
          args[2][113 * steps + cycle] = x21931;
        }
        args[2][100 * steps + cycle] = x21800;
        args[2][101 * steps + cycle] = x21896;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x21932 = x20322 + x3;
        args[2][104 * steps + cycle] = x21932;
        args[2][105 * steps + cycle] = x20344;
        Fp x21933 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x21934 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x21935 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x21936 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x21937 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x21938 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x20344;
        host_args[2] = x20322;
        host_args[3] = x21345;
        host_args[4] = x21249;
        host_args[5] = x21535;
        host_args[6] = x21441;
        host_args[7] = x21896;
        host_args[8] = x21800;
        host_args[9] = x21933;
        host_args[10] = x21934;
        host_args[11] = x21935;
        host_args[12] = x21936;
        host_args[13] = x21937;
        host_args[14] = x21938;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x21939 = args[2][74 * steps + ((cycle - 1) & mask)];
      if (x21939 != 0) {
        {
          Fp x21940 = Fp(x20297.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x21940;
          Fp x21941 = x20297 - x21940;
          Fp x21942 = x21941 * x26;
          Fp x21943 = Fp(x21942.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x21943;
          Fp x21944 = x21942 - x21943;
          Fp x21945 = x21944 * x26;
          Fp x21946 = Fp(x21945.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x21946;
          Fp x21947 = x21945 - x21946;
          Fp x21948 = x21947 * x26;
          Fp x21949 = Fp(x21948.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x21949;
          Fp x21950 = x21948 - x21949;
          Fp x21951 = x21950 * x26;
          Fp x21952 = Fp(x21951.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x21952;
          Fp x21953 = x21951 - x21952;
          Fp x21954 = x21953 * x26;
          Fp x21955 = Fp(x21954.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x21955;
          Fp x21956 = x21954 - x21955;
          Fp x21957 = x21956 * x26;
          Fp x21958 = Fp(x21957.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x21958;
          Fp x21959 = x21957 - x21958;
          Fp x21960 = x21959 * x26;
          Fp x21961 = Fp(x21960.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x21961;
          Fp x21962 = x21960 - x21961;
          Fp x21963 = x21962 * x26;
          Fp x21964 = Fp(x21963.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x21964;
          Fp x21965 = x21963 - x21964;
          Fp x21966 = x21965 * x26;
          Fp x21967 = Fp(x21966.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x21967;
          Fp x21968 = x21966 - x21967;
          Fp x21969 = x21968 * x26;
          Fp x21970 = Fp(x21969.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x21970;
          Fp x21971 = x21969 - x21970;
          Fp x21972 = x21971 * x26;
          Fp x21973 = Fp(x21972.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x21973;
          Fp x21974 = x21972 - x21973;
          Fp x21975 = x21974 * x26;
          Fp x21976 = Fp(x21975.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x21976;
          Fp x21977 = x21975 - x21976;
          Fp x21978 = x21977 * x26;
          Fp x21979 = Fp(x21978.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x21979;
          Fp x21980 = x21978 - x21979;
          Fp x21981 = x21980 * x26;
          Fp x21982 = Fp(x21981.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x21982;
          Fp x21983 = x21981 - x21982;
          Fp x21984 = x21983 * x26;
          Fp x21985 = Fp(x21984.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x21985;
        }
        Fp x21986 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x21987 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x21988 = x21987 * x1;
        Fp x21989 = x21986 + x21988;
        Fp x21990 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x21991 = x21990 * x3;
        Fp x21992 = x21989 + x21991;
        Fp x21993 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x21994 = x21993 * x6;
        Fp x21995 = x21992 + x21994;
        Fp x21996 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x21997 = x21996 * x11;
        Fp x21998 = x21995 + x21997;
        Fp x21999 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x22000 = x21999 * x27;
        Fp x22001 = x21998 + x22000;
        Fp x22002 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x22003 = x22002 * x12;
        Fp x22004 = x22001 + x22003;
        Fp x22005 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x22006 = x22005 * x28;
        Fp x22007 = x22004 + x22006;
        Fp x22008 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x22009 = x22008 * x13;
        Fp x22010 = x22007 + x22009;
        Fp x22011 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x22012 = x22011 * x29;
        Fp x22013 = x22010 + x22012;
        Fp x22014 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x22015 = x22014 * x14;
        Fp x22016 = x22013 + x22015;
        Fp x22017 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x22018 = x22017 * x30;
        Fp x22019 = x22016 + x22018;
        Fp x22020 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x22021 = x22020 * x15;
        Fp x22022 = x22019 + x22021;
        Fp x22023 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x22024 = x22023 * x31;
        Fp x22025 = x22022 + x22024;
        Fp x22026 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x22027 = x22026 * x16;
        Fp x22028 = x22025 + x22027;
        Fp x22029 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x22030 = x22029 * x32;
        Fp x22031 = x22028 + x22030;
        Fp x22032 = x20297 - x22031;
        Fp x22033 = x22032 * x33;
        args[2][106 * steps + cycle] = x22033;
        Fp x22034 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x22035 = x20298 + x22034;
        {
          Fp x22036 = Fp(x22035.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x22036;
          Fp x22037 = x22035 - x22036;
          Fp x22038 = x22037 * x26;
          Fp x22039 = Fp(x22038.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x22039;
          Fp x22040 = x22038 - x22039;
          Fp x22041 = x22040 * x26;
          Fp x22042 = Fp(x22041.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x22042;
          Fp x22043 = x22041 - x22042;
          Fp x22044 = x22043 * x26;
          Fp x22045 = Fp(x22044.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x22045;
          Fp x22046 = x22044 - x22045;
          Fp x22047 = x22046 * x26;
          Fp x22048 = Fp(x22047.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x22048;
          Fp x22049 = x22047 - x22048;
          Fp x22050 = x22049 * x26;
          Fp x22051 = Fp(x22050.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x22051;
          Fp x22052 = x22050 - x22051;
          Fp x22053 = x22052 * x26;
          Fp x22054 = Fp(x22053.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x22054;
          Fp x22055 = x22053 - x22054;
          Fp x22056 = x22055 * x26;
          Fp x22057 = Fp(x22056.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x22057;
          Fp x22058 = x22056 - x22057;
          Fp x22059 = x22058 * x26;
          Fp x22060 = Fp(x22059.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x22060;
          Fp x22061 = x22059 - x22060;
          Fp x22062 = x22061 * x26;
          Fp x22063 = Fp(x22062.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x22063;
          Fp x22064 = x22062 - x22063;
          Fp x22065 = x22064 * x26;
          Fp x22066 = Fp(x22065.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x22066;
          Fp x22067 = x22065 - x22066;
          Fp x22068 = x22067 * x26;
          Fp x22069 = Fp(x22068.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x22069;
          Fp x22070 = x22068 - x22069;
          Fp x22071 = x22070 * x26;
          Fp x22072 = Fp(x22071.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x22072;
          Fp x22073 = x22071 - x22072;
          Fp x22074 = x22073 * x26;
          Fp x22075 = Fp(x22074.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x22075;
          Fp x22076 = x22074 - x22075;
          Fp x22077 = x22076 * x26;
          Fp x22078 = Fp(x22077.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x22078;
          Fp x22079 = x22077 - x22078;
          Fp x22080 = x22079 * x26;
          Fp x22081 = Fp(x22080.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x22081;
        }
        Fp x22082 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x22083 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x22084 = x22083 * x1;
        Fp x22085 = x22082 + x22084;
        Fp x22086 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x22087 = x22086 * x3;
        Fp x22088 = x22085 + x22087;
        Fp x22089 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x22090 = x22089 * x6;
        Fp x22091 = x22088 + x22090;
        Fp x22092 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x22093 = x22092 * x11;
        Fp x22094 = x22091 + x22093;
        Fp x22095 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x22096 = x22095 * x27;
        Fp x22097 = x22094 + x22096;
        Fp x22098 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x22099 = x22098 * x12;
        Fp x22100 = x22097 + x22099;
        Fp x22101 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x22102 = x22101 * x28;
        Fp x22103 = x22100 + x22102;
        Fp x22104 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x22105 = x22104 * x13;
        Fp x22106 = x22103 + x22105;
        Fp x22107 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x22108 = x22107 * x29;
        Fp x22109 = x22106 + x22108;
        Fp x22110 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x22111 = x22110 * x14;
        Fp x22112 = x22109 + x22111;
        Fp x22113 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x22114 = x22113 * x30;
        Fp x22115 = x22112 + x22114;
        Fp x22116 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x22117 = x22116 * x15;
        Fp x22118 = x22115 + x22117;
        Fp x22119 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x22120 = x22119 * x31;
        Fp x22121 = x22118 + x22120;
        Fp x22122 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x22123 = x22122 * x16;
        Fp x22124 = x22121 + x22123;
        Fp x22125 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x22126 = x22125 * x32;
        Fp x22127 = x22124 + x22126;
        Fp x22128 = x22035 - x22127;
        Fp x22129 = x22128 * x33;
        args[2][107 * steps + cycle] = x22129;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x22130 = host_outs[0];
          Fp x22131 = host_outs[1];
          args[2][129 * steps + cycle] = x22130;
          args[2][130 * steps + cycle] = x22131;
        }
        {
          Fp x22132 = Fp(x20299.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x22132;
          Fp x22133 = x20299 - x22132;
          Fp x22134 = x22133 * x26;
          Fp x22135 = Fp(x22134.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x22135;
          Fp x22136 = x22134 - x22135;
          Fp x22137 = x22136 * x26;
          Fp x22138 = Fp(x22137.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x22138;
          Fp x22139 = x22137 - x22138;
          Fp x22140 = x22139 * x26;
          Fp x22141 = Fp(x22140.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x22141;
          Fp x22142 = x22140 - x22141;
          Fp x22143 = x22142 * x26;
          Fp x22144 = Fp(x22143.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x22144;
          Fp x22145 = x22143 - x22144;
          Fp x22146 = x22145 * x26;
          Fp x22147 = Fp(x22146.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x22147;
          Fp x22148 = x22146 - x22147;
          Fp x22149 = x22148 * x26;
          Fp x22150 = Fp(x22149.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x22150;
          Fp x22151 = x22149 - x22150;
          Fp x22152 = x22151 * x26;
          Fp x22153 = Fp(x22152.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x22153;
          Fp x22154 = x22152 - x22153;
          Fp x22155 = x22154 * x26;
          Fp x22156 = Fp(x22155.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x22156;
          Fp x22157 = x22155 - x22156;
          Fp x22158 = x22157 * x26;
          Fp x22159 = Fp(x22158.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x22159;
          Fp x22160 = x22158 - x22159;
          Fp x22161 = x22160 * x26;
          Fp x22162 = Fp(x22161.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x22162;
          Fp x22163 = x22161 - x22162;
          Fp x22164 = x22163 * x26;
          Fp x22165 = Fp(x22164.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x22165;
          Fp x22166 = x22164 - x22165;
          Fp x22167 = x22166 * x26;
          Fp x22168 = Fp(x22167.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x22168;
          Fp x22169 = x22167 - x22168;
          Fp x22170 = x22169 * x26;
          Fp x22171 = Fp(x22170.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x22171;
          Fp x22172 = x22170 - x22171;
          Fp x22173 = x22172 * x26;
          Fp x22174 = Fp(x22173.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x22174;
          Fp x22175 = x22173 - x22174;
          Fp x22176 = x22175 * x26;
          Fp x22177 = Fp(x22176.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x22177;
        }
        Fp x22178 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x22179 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x22180 = x22179 * x1;
        Fp x22181 = x22178 + x22180;
        Fp x22182 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x22183 = x22182 * x3;
        Fp x22184 = x22181 + x22183;
        Fp x22185 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x22186 = x22185 * x6;
        Fp x22187 = x22184 + x22186;
        Fp x22188 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x22189 = x22188 * x11;
        Fp x22190 = x22187 + x22189;
        Fp x22191 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x22192 = x22191 * x27;
        Fp x22193 = x22190 + x22192;
        Fp x22194 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x22195 = x22194 * x12;
        Fp x22196 = x22193 + x22195;
        Fp x22197 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x22198 = x22197 * x28;
        Fp x22199 = x22196 + x22198;
        Fp x22200 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x22201 = x22200 * x13;
        Fp x22202 = x22199 + x22201;
        Fp x22203 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x22204 = x22203 * x29;
        Fp x22205 = x22202 + x22204;
        Fp x22206 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x22207 = x22206 * x14;
        Fp x22208 = x22205 + x22207;
        Fp x22209 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x22210 = x22209 * x30;
        Fp x22211 = x22208 + x22210;
        Fp x22212 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x22213 = x22212 * x15;
        Fp x22214 = x22211 + x22213;
        Fp x22215 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x22216 = x22215 * x31;
        Fp x22217 = x22214 + x22216;
        Fp x22218 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x22219 = x22218 * x16;
        Fp x22220 = x22217 + x22219;
        Fp x22221 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x22222 = x22221 * x32;
        Fp x22223 = x22220 + x22222;
        Fp x22224 = x20299 - x22223;
        Fp x22225 = x22224 * x33;
        if (x22225 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:60");
        {
          Fp x22226 = Fp(x20300.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x22226;
          Fp x22227 = x20300 - x22226;
          Fp x22228 = x22227 * x26;
          Fp x22229 = Fp(x22228.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x22229;
          Fp x22230 = x22228 - x22229;
          Fp x22231 = x22230 * x26;
          Fp x22232 = Fp(x22231.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x22232;
          Fp x22233 = x22231 - x22232;
          Fp x22234 = x22233 * x26;
          Fp x22235 = Fp(x22234.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x22235;
          Fp x22236 = x22234 - x22235;
          Fp x22237 = x22236 * x26;
          Fp x22238 = Fp(x22237.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x22238;
          Fp x22239 = x22237 - x22238;
          Fp x22240 = x22239 * x26;
          Fp x22241 = Fp(x22240.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x22241;
          Fp x22242 = x22240 - x22241;
          Fp x22243 = x22242 * x26;
          Fp x22244 = Fp(x22243.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x22244;
          Fp x22245 = x22243 - x22244;
          Fp x22246 = x22245 * x26;
          Fp x22247 = Fp(x22246.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x22247;
          Fp x22248 = x22246 - x22247;
          Fp x22249 = x22248 * x26;
          Fp x22250 = Fp(x22249.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x22250;
          Fp x22251 = x22249 - x22250;
          Fp x22252 = x22251 * x26;
          Fp x22253 = Fp(x22252.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x22253;
          Fp x22254 = x22252 - x22253;
          Fp x22255 = x22254 * x26;
          Fp x22256 = Fp(x22255.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x22256;
          Fp x22257 = x22255 - x22256;
          Fp x22258 = x22257 * x26;
          Fp x22259 = Fp(x22258.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x22259;
          Fp x22260 = x22258 - x22259;
          Fp x22261 = x22260 * x26;
          Fp x22262 = Fp(x22261.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x22262;
          Fp x22263 = x22261 - x22262;
          Fp x22264 = x22263 * x26;
          Fp x22265 = Fp(x22264.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x22265;
          Fp x22266 = x22264 - x22265;
          Fp x22267 = x22266 * x26;
          Fp x22268 = Fp(x22267.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x22268;
          Fp x22269 = x22267 - x22268;
          Fp x22270 = x22269 * x26;
          Fp x22271 = Fp(x22270.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x22271;
        }
        Fp x22272 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x22273 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x22274 = x22273 * x1;
        Fp x22275 = x22272 + x22274;
        Fp x22276 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x22277 = x22276 * x3;
        Fp x22278 = x22275 + x22277;
        Fp x22279 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x22280 = x22279 * x6;
        Fp x22281 = x22278 + x22280;
        Fp x22282 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x22283 = x22282 * x11;
        Fp x22284 = x22281 + x22283;
        Fp x22285 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x22286 = x22285 * x27;
        Fp x22287 = x22284 + x22286;
        Fp x22288 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x22289 = x22288 * x12;
        Fp x22290 = x22287 + x22289;
        Fp x22291 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x22292 = x22291 * x28;
        Fp x22293 = x22290 + x22292;
        Fp x22294 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x22295 = x22294 * x13;
        Fp x22296 = x22293 + x22295;
        Fp x22297 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x22298 = x22297 * x29;
        Fp x22299 = x22296 + x22298;
        Fp x22300 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x22301 = x22300 * x14;
        Fp x22302 = x22299 + x22301;
        Fp x22303 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x22304 = x22303 * x30;
        Fp x22305 = x22302 + x22304;
        Fp x22306 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x22307 = x22306 * x15;
        Fp x22308 = x22305 + x22307;
        Fp x22309 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x22310 = x22309 * x31;
        Fp x22311 = x22308 + x22310;
        Fp x22312 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x22313 = x22312 * x16;
        Fp x22314 = x22311 + x22313;
        Fp x22315 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x22316 = x22315 * x32;
        Fp x22317 = x22314 + x22316;
        Fp x22318 = x20300 - x22317;
        Fp x22319 = x22318 * x33;
        if (x22319 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:60");
        {
          Fp x22320 = (x21989 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x22320;
          Fp x22321 = x21989 - x71;
          Fp x22322 = (x22321 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x22322;
          Fp x22323 = x21989 - x1;
          Fp x22324 = (x22323 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x22324;
          Fp x22325 = x21989 - x2;
          Fp x22326 = (x22325 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x22326;
        }
        Fp x22327 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x22328 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x22329 = x22328 * x1;
        Fp x22330 = x22327 + x22329;
        Fp x22331 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x22332 = x22331 * x2;
        Fp x22333 = x22330 + x22332;
        Fp x22334 = x22333 - x21989;
        if (x22334 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x22335 = x21986 * x22178;
        Fp x22336 = x21987 * x22179;
        Fp x22337 = x22336 * x1;
        Fp x22338 = x22335 + x22337;
        Fp x22339 = x21990 * x22182;
        Fp x22340 = x22339 * x3;
        Fp x22341 = x22338 + x22340;
        Fp x22342 = x21993 * x22185;
        Fp x22343 = x22342 * x6;
        Fp x22344 = x22341 + x22343;
        Fp x22345 = x21996 * x22188;
        Fp x22346 = x22345 * x11;
        Fp x22347 = x22344 + x22346;
        Fp x22348 = x21999 * x22191;
        Fp x22349 = x22348 * x27;
        Fp x22350 = x22347 + x22349;
        Fp x22351 = x22002 * x22194;
        Fp x22352 = x22351 * x12;
        Fp x22353 = x22350 + x22352;
        Fp x22354 = x22005 * x22197;
        Fp x22355 = x22354 * x28;
        Fp x22356 = x22353 + x22355;
        Fp x22357 = x22008 * x22200;
        Fp x22358 = x22357 * x13;
        Fp x22359 = x22356 + x22358;
        Fp x22360 = x22011 * x22203;
        Fp x22361 = x22360 * x29;
        Fp x22362 = x22359 + x22361;
        Fp x22363 = x22014 * x22206;
        Fp x22364 = x22363 * x14;
        Fp x22365 = x22362 + x22364;
        Fp x22366 = x22017 * x22209;
        Fp x22367 = x22366 * x30;
        Fp x22368 = x22365 + x22367;
        Fp x22369 = x22020 * x22212;
        Fp x22370 = x22369 * x15;
        Fp x22371 = x22368 + x22370;
        Fp x22372 = x22023 * x22215;
        Fp x22373 = x22372 * x31;
        Fp x22374 = x22371 + x22373;
        Fp x22375 = x22026 * x22218;
        Fp x22376 = x22375 * x16;
        Fp x22377 = x22374 + x22376;
        Fp x22378 = x22029 * x22221;
        Fp x22379 = x22378 * x32;
        Fp x22380 = x22377 + x22379;
        Fp x22381 = x22082 * x22272;
        Fp x22382 = x22083 * x22273;
        Fp x22383 = x22382 * x1;
        Fp x22384 = x22381 + x22383;
        Fp x22385 = x22086 * x22276;
        Fp x22386 = x22385 * x3;
        Fp x22387 = x22384 + x22386;
        Fp x22388 = x22089 * x22279;
        Fp x22389 = x22388 * x6;
        Fp x22390 = x22387 + x22389;
        Fp x22391 = x22092 * x22282;
        Fp x22392 = x22391 * x11;
        Fp x22393 = x22390 + x22392;
        Fp x22394 = x22095 * x22285;
        Fp x22395 = x22394 * x27;
        Fp x22396 = x22393 + x22395;
        Fp x22397 = x22098 * x22288;
        Fp x22398 = x22397 * x12;
        Fp x22399 = x22396 + x22398;
        Fp x22400 = x22101 * x22291;
        Fp x22401 = x22400 * x28;
        Fp x22402 = x22399 + x22401;
        Fp x22403 = x22104 * x22294;
        Fp x22404 = x22403 * x13;
        Fp x22405 = x22402 + x22404;
        Fp x22406 = x22107 * x22297;
        Fp x22407 = x22406 * x29;
        Fp x22408 = x22405 + x22407;
        Fp x22409 = x22110 * x22300;
        Fp x22410 = x22409 * x14;
        Fp x22411 = x22408 + x22410;
        Fp x22412 = x22113 * x22303;
        Fp x22413 = x22412 * x30;
        Fp x22414 = x22411 + x22413;
        Fp x22415 = x22116 * x22306;
        Fp x22416 = x22415 * x15;
        Fp x22417 = x22414 + x22416;
        Fp x22418 = x22119 * x22309;
        Fp x22419 = x22418 * x31;
        Fp x22420 = x22417 + x22419;
        Fp x22421 = x22122 * x22312;
        Fp x22422 = x22421 * x16;
        Fp x22423 = x22420 + x22422;
        Fp x22424 = x22125 * x22315;
        Fp x22425 = x22424 * x32;
        Fp x22426 = x22423 + x22425;
        {
          Fp x22427 = Fp(x22380.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x22427;
          Fp x22428 = x22380 - x22427;
          Fp x22429 = x22428 * x26;
          Fp x22430 = Fp(x22429.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x22430;
          Fp x22431 = x22429 - x22430;
          Fp x22432 = x22431 * x26;
          Fp x22433 = Fp(x22432.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x22433;
          Fp x22434 = x22432 - x22433;
          Fp x22435 = x22434 * x26;
          Fp x22436 = Fp(x22435.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x22436;
          Fp x22437 = x22435 - x22436;
          Fp x22438 = x22437 * x26;
          Fp x22439 = Fp(x22438.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x22439;
          Fp x22440 = x22438 - x22439;
          Fp x22441 = x22440 * x26;
          Fp x22442 = Fp(x22441.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x22442;
          Fp x22443 = x22441 - x22442;
          Fp x22444 = x22443 * x26;
          Fp x22445 = Fp(x22444.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x22445;
          Fp x22446 = x22444 - x22445;
          Fp x22447 = x22446 * x26;
          Fp x22448 = Fp(x22447.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x22448;
          Fp x22449 = x22447 - x22448;
          Fp x22450 = x22449 * x26;
          Fp x22451 = Fp(x22450.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x22451;
          Fp x22452 = x22450 - x22451;
          Fp x22453 = x22452 * x26;
          Fp x22454 = Fp(x22453.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x22454;
          Fp x22455 = x22453 - x22454;
          Fp x22456 = x22455 * x26;
          Fp x22457 = Fp(x22456.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x22457;
          Fp x22458 = x22456 - x22457;
          Fp x22459 = x22458 * x26;
          Fp x22460 = Fp(x22459.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x22460;
          Fp x22461 = x22459 - x22460;
          Fp x22462 = x22461 * x26;
          Fp x22463 = Fp(x22462.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x22463;
          Fp x22464 = x22462 - x22463;
          Fp x22465 = x22464 * x26;
          Fp x22466 = Fp(x22465.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x22466;
          Fp x22467 = x22465 - x22466;
          Fp x22468 = x22467 * x26;
          Fp x22469 = Fp(x22468.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x22469;
          Fp x22470 = x22468 - x22469;
          Fp x22471 = x22470 * x26;
          Fp x22472 = Fp(x22471.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x22472;
        }
        Fp x22473 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x22474 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x22475 = x22474 * x1;
        Fp x22476 = x22473 + x22475;
        Fp x22477 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x22478 = x22477 * x3;
        Fp x22479 = x22476 + x22478;
        Fp x22480 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x22481 = x22480 * x6;
        Fp x22482 = x22479 + x22481;
        Fp x22483 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x22484 = x22483 * x11;
        Fp x22485 = x22482 + x22484;
        Fp x22486 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x22487 = x22486 * x27;
        Fp x22488 = x22485 + x22487;
        Fp x22489 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x22490 = x22489 * x12;
        Fp x22491 = x22488 + x22490;
        Fp x22492 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x22493 = x22492 * x28;
        Fp x22494 = x22491 + x22493;
        Fp x22495 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x22496 = x22495 * x13;
        Fp x22497 = x22494 + x22496;
        Fp x22498 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x22499 = x22498 * x29;
        Fp x22500 = x22497 + x22499;
        Fp x22501 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x22502 = x22501 * x14;
        Fp x22503 = x22500 + x22502;
        Fp x22504 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x22505 = x22504 * x30;
        Fp x22506 = x22503 + x22505;
        Fp x22507 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x22508 = x22507 * x15;
        Fp x22509 = x22506 + x22508;
        Fp x22510 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x22511 = x22510 * x31;
        Fp x22512 = x22509 + x22511;
        Fp x22513 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x22514 = x22513 * x16;
        Fp x22515 = x22512 + x22514;
        Fp x22516 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x22517 = x22516 * x32;
        Fp x22518 = x22515 + x22517;
        Fp x22519 = x22380 - x22518;
        Fp x22520 = x22519 * x33;
        args[2][108 * steps + cycle] = x22520;
        Fp x22521 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x22522 = x22426 + x22521;
        {
          Fp x22523 = Fp(x22522.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x22523;
          Fp x22524 = x22522 - x22523;
          Fp x22525 = x22524 * x26;
          Fp x22526 = Fp(x22525.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x22526;
          Fp x22527 = x22525 - x22526;
          Fp x22528 = x22527 * x26;
          Fp x22529 = Fp(x22528.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x22529;
          Fp x22530 = x22528 - x22529;
          Fp x22531 = x22530 * x26;
          Fp x22532 = Fp(x22531.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x22532;
          Fp x22533 = x22531 - x22532;
          Fp x22534 = x22533 * x26;
          Fp x22535 = Fp(x22534.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x22535;
          Fp x22536 = x22534 - x22535;
          Fp x22537 = x22536 * x26;
          Fp x22538 = Fp(x22537.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x22538;
          Fp x22539 = x22537 - x22538;
          Fp x22540 = x22539 * x26;
          Fp x22541 = Fp(x22540.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x22541;
          Fp x22542 = x22540 - x22541;
          Fp x22543 = x22542 * x26;
          Fp x22544 = Fp(x22543.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x22544;
          Fp x22545 = x22543 - x22544;
          Fp x22546 = x22545 * x26;
          Fp x22547 = Fp(x22546.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x22547;
          Fp x22548 = x22546 - x22547;
          Fp x22549 = x22548 * x26;
          Fp x22550 = Fp(x22549.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x22550;
          Fp x22551 = x22549 - x22550;
          Fp x22552 = x22551 * x26;
          Fp x22553 = Fp(x22552.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x22553;
          Fp x22554 = x22552 - x22553;
          Fp x22555 = x22554 * x26;
          Fp x22556 = Fp(x22555.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x22556;
          Fp x22557 = x22555 - x22556;
          Fp x22558 = x22557 * x26;
          Fp x22559 = Fp(x22558.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x22559;
          Fp x22560 = x22558 - x22559;
          Fp x22561 = x22560 * x26;
          Fp x22562 = Fp(x22561.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x22562;
          Fp x22563 = x22561 - x22562;
          Fp x22564 = x22563 * x26;
          Fp x22565 = Fp(x22564.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x22565;
          Fp x22566 = x22564 - x22565;
          Fp x22567 = x22566 * x26;
          Fp x22568 = Fp(x22567.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x22568;
        }
        Fp x22569 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x22570 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x22571 = x22570 * x1;
        Fp x22572 = x22569 + x22571;
        Fp x22573 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x22574 = x22573 * x3;
        Fp x22575 = x22572 + x22574;
        Fp x22576 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x22577 = x22576 * x6;
        Fp x22578 = x22575 + x22577;
        Fp x22579 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x22580 = x22579 * x11;
        Fp x22581 = x22578 + x22580;
        Fp x22582 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x22583 = x22582 * x27;
        Fp x22584 = x22581 + x22583;
        Fp x22585 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x22586 = x22585 * x12;
        Fp x22587 = x22584 + x22586;
        Fp x22588 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x22589 = x22588 * x28;
        Fp x22590 = x22587 + x22589;
        Fp x22591 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x22592 = x22591 * x13;
        Fp x22593 = x22590 + x22592;
        Fp x22594 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x22595 = x22594 * x29;
        Fp x22596 = x22593 + x22595;
        Fp x22597 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x22598 = x22597 * x14;
        Fp x22599 = x22596 + x22598;
        Fp x22600 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x22601 = x22600 * x30;
        Fp x22602 = x22599 + x22601;
        Fp x22603 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x22604 = x22603 * x15;
        Fp x22605 = x22602 + x22604;
        Fp x22606 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x22607 = x22606 * x31;
        Fp x22608 = x22605 + x22607;
        Fp x22609 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x22610 = x22609 * x16;
        Fp x22611 = x22608 + x22610;
        Fp x22612 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x22613 = x22612 * x32;
        Fp x22614 = x22611 + x22613;
        Fp x22615 = x22522 - x22614;
        Fp x22616 = x22615 * x33;
        args[2][109 * steps + cycle] = x22616;
        {
          {
            Fp x22617 = (x22518 == 0) ? Fp(1) : Fp(0);
            Fp x22618 = x71 - x22617;
            args[2][114 * steps + cycle] = x22618;
            Fp x22619 = inv(x22518);
            args[2][115 * steps + cycle] = x22619;
          }
          Fp x22620 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x22621 = x22518 * x22620;
          Fp x22622 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x22623 = x22621 - x22622;
          if (x22623 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x22624 = x71 - x22622;
          Fp x22625 = x22624 * x22518;
          if (x22625 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x22626 = (x22614 == 0) ? Fp(1) : Fp(0);
            Fp x22627 = x71 - x22626;
            args[2][116 * steps + cycle] = x22627;
            Fp x22628 = inv(x22614);
            args[2][117 * steps + cycle] = x22628;
          }
          Fp x22629 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x22630 = x22614 * x22629;
          Fp x22631 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x22632 = x22630 - x22631;
          if (x22632 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x22633 = x71 - x22631;
          Fp x22634 = x22633 * x22614;
          if (x22634 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x22635 = x22624 * x22633;
          Fp x22636 = x71 - x22635;
          args[2][111 * steps + cycle] = x22636;
          Fp x22637 = x71 - x22315;
          Fp x22638 = x22125 * x22637;
          Fp x22639 = x71 - x22612;
          Fp x22640 = x22638 * x22639;
          Fp x22641 = x71 - x22125;
          Fp x22642 = x22641 * x22315;
          Fp x22643 = x22642 * x22612;
          Fp x22644 = x22640 + x22643;
          args[2][112 * steps + cycle] = x22644;
          Fp x22645 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x22646 = x22645 + x22612;
          Fp x22647 = x22645 * x1;
          Fp x22648 = x22647 * x22612;
          Fp x22649 = x22646 - x22648;
          args[2][113 * steps + cycle] = x22649;
        }
        args[2][100 * steps + cycle] = x22518;
        args[2][101 * steps + cycle] = x22614;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x22650 = x20322 + x3;
        args[2][104 * steps + cycle] = x22650;
        args[2][105 * steps + cycle] = x20344;
        Fp x22651 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x22652 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x22653 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x22654 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x22655 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x22656 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x20344;
        host_args[2] = x20322;
        host_args[3] = x22127;
        host_args[4] = x22031;
        host_args[5] = x22317;
        host_args[6] = x22223;
        host_args[7] = x22614;
        host_args[8] = x22518;
        host_args[9] = x22651;
        host_args[10] = x22652;
        host_args[11] = x22653;
        host_args[12] = x22654;
        host_args[13] = x22655;
        host_args[14] = x22656;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x22657 = args[2][75 * steps + ((cycle - 1) & mask)];
      if (x22657 != 0) {
        {
          Fp x22658 = Fp(x20297.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x22658;
          Fp x22659 = x20297 - x22658;
          Fp x22660 = x22659 * x26;
          Fp x22661 = Fp(x22660.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x22661;
          Fp x22662 = x22660 - x22661;
          Fp x22663 = x22662 * x26;
          Fp x22664 = Fp(x22663.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x22664;
          Fp x22665 = x22663 - x22664;
          Fp x22666 = x22665 * x26;
          Fp x22667 = Fp(x22666.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x22667;
          Fp x22668 = x22666 - x22667;
          Fp x22669 = x22668 * x26;
          Fp x22670 = Fp(x22669.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x22670;
          Fp x22671 = x22669 - x22670;
          Fp x22672 = x22671 * x26;
          Fp x22673 = Fp(x22672.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x22673;
          Fp x22674 = x22672 - x22673;
          Fp x22675 = x22674 * x26;
          Fp x22676 = Fp(x22675.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x22676;
          Fp x22677 = x22675 - x22676;
          Fp x22678 = x22677 * x26;
          Fp x22679 = Fp(x22678.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x22679;
          Fp x22680 = x22678 - x22679;
          Fp x22681 = x22680 * x26;
          Fp x22682 = Fp(x22681.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x22682;
          Fp x22683 = x22681 - x22682;
          Fp x22684 = x22683 * x26;
          Fp x22685 = Fp(x22684.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x22685;
          Fp x22686 = x22684 - x22685;
          Fp x22687 = x22686 * x26;
          Fp x22688 = Fp(x22687.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x22688;
          Fp x22689 = x22687 - x22688;
          Fp x22690 = x22689 * x26;
          Fp x22691 = Fp(x22690.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x22691;
          Fp x22692 = x22690 - x22691;
          Fp x22693 = x22692 * x26;
          Fp x22694 = Fp(x22693.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x22694;
          Fp x22695 = x22693 - x22694;
          Fp x22696 = x22695 * x26;
          Fp x22697 = Fp(x22696.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x22697;
          Fp x22698 = x22696 - x22697;
          Fp x22699 = x22698 * x26;
          Fp x22700 = Fp(x22699.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x22700;
          Fp x22701 = x22699 - x22700;
          Fp x22702 = x22701 * x26;
          Fp x22703 = Fp(x22702.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x22703;
        }
        Fp x22704 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x22705 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x22706 = x22705 * x1;
        Fp x22707 = x22704 + x22706;
        Fp x22708 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x22709 = x22708 * x3;
        Fp x22710 = x22707 + x22709;
        Fp x22711 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x22712 = x22711 * x6;
        Fp x22713 = x22710 + x22712;
        Fp x22714 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x22715 = x22714 * x11;
        Fp x22716 = x22713 + x22715;
        Fp x22717 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x22718 = x22717 * x27;
        Fp x22719 = x22716 + x22718;
        Fp x22720 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x22721 = x22720 * x12;
        Fp x22722 = x22719 + x22721;
        Fp x22723 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x22724 = x22723 * x28;
        Fp x22725 = x22722 + x22724;
        Fp x22726 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x22727 = x22726 * x13;
        Fp x22728 = x22725 + x22727;
        Fp x22729 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x22730 = x22729 * x29;
        Fp x22731 = x22728 + x22730;
        Fp x22732 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x22733 = x22732 * x14;
        Fp x22734 = x22731 + x22733;
        Fp x22735 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x22736 = x22735 * x30;
        Fp x22737 = x22734 + x22736;
        Fp x22738 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x22739 = x22738 * x15;
        Fp x22740 = x22737 + x22739;
        Fp x22741 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x22742 = x22741 * x31;
        Fp x22743 = x22740 + x22742;
        Fp x22744 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x22745 = x22744 * x16;
        Fp x22746 = x22743 + x22745;
        Fp x22747 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x22748 = x22747 * x32;
        Fp x22749 = x22746 + x22748;
        Fp x22750 = x20297 - x22749;
        Fp x22751 = x22750 * x33;
        args[2][106 * steps + cycle] = x22751;
        Fp x22752 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x22753 = x20298 + x22752;
        {
          Fp x22754 = Fp(x22753.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x22754;
          Fp x22755 = x22753 - x22754;
          Fp x22756 = x22755 * x26;
          Fp x22757 = Fp(x22756.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x22757;
          Fp x22758 = x22756 - x22757;
          Fp x22759 = x22758 * x26;
          Fp x22760 = Fp(x22759.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x22760;
          Fp x22761 = x22759 - x22760;
          Fp x22762 = x22761 * x26;
          Fp x22763 = Fp(x22762.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x22763;
          Fp x22764 = x22762 - x22763;
          Fp x22765 = x22764 * x26;
          Fp x22766 = Fp(x22765.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x22766;
          Fp x22767 = x22765 - x22766;
          Fp x22768 = x22767 * x26;
          Fp x22769 = Fp(x22768.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x22769;
          Fp x22770 = x22768 - x22769;
          Fp x22771 = x22770 * x26;
          Fp x22772 = Fp(x22771.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x22772;
          Fp x22773 = x22771 - x22772;
          Fp x22774 = x22773 * x26;
          Fp x22775 = Fp(x22774.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x22775;
          Fp x22776 = x22774 - x22775;
          Fp x22777 = x22776 * x26;
          Fp x22778 = Fp(x22777.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x22778;
          Fp x22779 = x22777 - x22778;
          Fp x22780 = x22779 * x26;
          Fp x22781 = Fp(x22780.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x22781;
          Fp x22782 = x22780 - x22781;
          Fp x22783 = x22782 * x26;
          Fp x22784 = Fp(x22783.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x22784;
          Fp x22785 = x22783 - x22784;
          Fp x22786 = x22785 * x26;
          Fp x22787 = Fp(x22786.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x22787;
          Fp x22788 = x22786 - x22787;
          Fp x22789 = x22788 * x26;
          Fp x22790 = Fp(x22789.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x22790;
          Fp x22791 = x22789 - x22790;
          Fp x22792 = x22791 * x26;
          Fp x22793 = Fp(x22792.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x22793;
          Fp x22794 = x22792 - x22793;
          Fp x22795 = x22794 * x26;
          Fp x22796 = Fp(x22795.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x22796;
          Fp x22797 = x22795 - x22796;
          Fp x22798 = x22797 * x26;
          Fp x22799 = Fp(x22798.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x22799;
        }
        Fp x22800 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x22801 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x22802 = x22801 * x1;
        Fp x22803 = x22800 + x22802;
        Fp x22804 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x22805 = x22804 * x3;
        Fp x22806 = x22803 + x22805;
        Fp x22807 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x22808 = x22807 * x6;
        Fp x22809 = x22806 + x22808;
        Fp x22810 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x22811 = x22810 * x11;
        Fp x22812 = x22809 + x22811;
        Fp x22813 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x22814 = x22813 * x27;
        Fp x22815 = x22812 + x22814;
        Fp x22816 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x22817 = x22816 * x12;
        Fp x22818 = x22815 + x22817;
        Fp x22819 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x22820 = x22819 * x28;
        Fp x22821 = x22818 + x22820;
        Fp x22822 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x22823 = x22822 * x13;
        Fp x22824 = x22821 + x22823;
        Fp x22825 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x22826 = x22825 * x29;
        Fp x22827 = x22824 + x22826;
        Fp x22828 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x22829 = x22828 * x14;
        Fp x22830 = x22827 + x22829;
        Fp x22831 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x22832 = x22831 * x30;
        Fp x22833 = x22830 + x22832;
        Fp x22834 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x22835 = x22834 * x15;
        Fp x22836 = x22833 + x22835;
        Fp x22837 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x22838 = x22837 * x31;
        Fp x22839 = x22836 + x22838;
        Fp x22840 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x22841 = x22840 * x16;
        Fp x22842 = x22839 + x22841;
        Fp x22843 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x22844 = x22843 * x32;
        Fp x22845 = x22842 + x22844;
        Fp x22846 = x22753 - x22845;
        Fp x22847 = x22846 * x33;
        args[2][107 * steps + cycle] = x22847;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x22848 = host_outs[0];
          Fp x22849 = host_outs[1];
          args[2][129 * steps + cycle] = x22848;
          args[2][130 * steps + cycle] = x22849;
        }
        {
          Fp x22850 = Fp(x20299.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x22850;
          Fp x22851 = x20299 - x22850;
          Fp x22852 = x22851 * x26;
          Fp x22853 = Fp(x22852.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x22853;
          Fp x22854 = x22852 - x22853;
          Fp x22855 = x22854 * x26;
          Fp x22856 = Fp(x22855.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x22856;
          Fp x22857 = x22855 - x22856;
          Fp x22858 = x22857 * x26;
          Fp x22859 = Fp(x22858.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x22859;
          Fp x22860 = x22858 - x22859;
          Fp x22861 = x22860 * x26;
          Fp x22862 = Fp(x22861.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x22862;
          Fp x22863 = x22861 - x22862;
          Fp x22864 = x22863 * x26;
          Fp x22865 = Fp(x22864.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x22865;
          Fp x22866 = x22864 - x22865;
          Fp x22867 = x22866 * x26;
          Fp x22868 = Fp(x22867.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x22868;
          Fp x22869 = x22867 - x22868;
          Fp x22870 = x22869 * x26;
          Fp x22871 = Fp(x22870.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x22871;
          Fp x22872 = x22870 - x22871;
          Fp x22873 = x22872 * x26;
          Fp x22874 = Fp(x22873.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x22874;
          Fp x22875 = x22873 - x22874;
          Fp x22876 = x22875 * x26;
          Fp x22877 = Fp(x22876.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x22877;
          Fp x22878 = x22876 - x22877;
          Fp x22879 = x22878 * x26;
          Fp x22880 = Fp(x22879.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x22880;
          Fp x22881 = x22879 - x22880;
          Fp x22882 = x22881 * x26;
          Fp x22883 = Fp(x22882.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x22883;
          Fp x22884 = x22882 - x22883;
          Fp x22885 = x22884 * x26;
          Fp x22886 = Fp(x22885.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x22886;
          Fp x22887 = x22885 - x22886;
          Fp x22888 = x22887 * x26;
          Fp x22889 = Fp(x22888.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x22889;
          Fp x22890 = x22888 - x22889;
          Fp x22891 = x22890 * x26;
          Fp x22892 = Fp(x22891.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x22892;
          Fp x22893 = x22891 - x22892;
          Fp x22894 = x22893 * x26;
          Fp x22895 = Fp(x22894.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x22895;
        }
        Fp x22896 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x22897 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x22898 = x22897 * x1;
        Fp x22899 = x22896 + x22898;
        Fp x22900 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x22901 = x22900 * x3;
        Fp x22902 = x22899 + x22901;
        Fp x22903 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x22904 = x22903 * x6;
        Fp x22905 = x22902 + x22904;
        Fp x22906 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x22907 = x22906 * x11;
        Fp x22908 = x22905 + x22907;
        Fp x22909 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x22910 = x22909 * x27;
        Fp x22911 = x22908 + x22910;
        Fp x22912 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x22913 = x22912 * x12;
        Fp x22914 = x22911 + x22913;
        Fp x22915 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x22916 = x22915 * x28;
        Fp x22917 = x22914 + x22916;
        Fp x22918 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x22919 = x22918 * x13;
        Fp x22920 = x22917 + x22919;
        Fp x22921 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x22922 = x22921 * x29;
        Fp x22923 = x22920 + x22922;
        Fp x22924 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x22925 = x22924 * x14;
        Fp x22926 = x22923 + x22925;
        Fp x22927 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x22928 = x22927 * x30;
        Fp x22929 = x22926 + x22928;
        Fp x22930 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x22931 = x22930 * x15;
        Fp x22932 = x22929 + x22931;
        Fp x22933 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x22934 = x22933 * x31;
        Fp x22935 = x22932 + x22934;
        Fp x22936 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x22937 = x22936 * x16;
        Fp x22938 = x22935 + x22937;
        Fp x22939 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x22940 = x22939 * x32;
        Fp x22941 = x22938 + x22940;
        Fp x22942 = x20299 - x22941;
        Fp x22943 = x22942 * x33;
        if (x22943 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:61");
        {
          Fp x22944 = Fp(x20300.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x22944;
          Fp x22945 = x20300 - x22944;
          Fp x22946 = x22945 * x26;
          Fp x22947 = Fp(x22946.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x22947;
          Fp x22948 = x22946 - x22947;
          Fp x22949 = x22948 * x26;
          Fp x22950 = Fp(x22949.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x22950;
          Fp x22951 = x22949 - x22950;
          Fp x22952 = x22951 * x26;
          Fp x22953 = Fp(x22952.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x22953;
          Fp x22954 = x22952 - x22953;
          Fp x22955 = x22954 * x26;
          Fp x22956 = Fp(x22955.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x22956;
          Fp x22957 = x22955 - x22956;
          Fp x22958 = x22957 * x26;
          Fp x22959 = Fp(x22958.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x22959;
          Fp x22960 = x22958 - x22959;
          Fp x22961 = x22960 * x26;
          Fp x22962 = Fp(x22961.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x22962;
          Fp x22963 = x22961 - x22962;
          Fp x22964 = x22963 * x26;
          Fp x22965 = Fp(x22964.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x22965;
          Fp x22966 = x22964 - x22965;
          Fp x22967 = x22966 * x26;
          Fp x22968 = Fp(x22967.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x22968;
          Fp x22969 = x22967 - x22968;
          Fp x22970 = x22969 * x26;
          Fp x22971 = Fp(x22970.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x22971;
          Fp x22972 = x22970 - x22971;
          Fp x22973 = x22972 * x26;
          Fp x22974 = Fp(x22973.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x22974;
          Fp x22975 = x22973 - x22974;
          Fp x22976 = x22975 * x26;
          Fp x22977 = Fp(x22976.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x22977;
          Fp x22978 = x22976 - x22977;
          Fp x22979 = x22978 * x26;
          Fp x22980 = Fp(x22979.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x22980;
          Fp x22981 = x22979 - x22980;
          Fp x22982 = x22981 * x26;
          Fp x22983 = Fp(x22982.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x22983;
          Fp x22984 = x22982 - x22983;
          Fp x22985 = x22984 * x26;
          Fp x22986 = Fp(x22985.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x22986;
          Fp x22987 = x22985 - x22986;
          Fp x22988 = x22987 * x26;
          Fp x22989 = Fp(x22988.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x22989;
        }
        Fp x22990 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x22991 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x22992 = x22991 * x1;
        Fp x22993 = x22990 + x22992;
        Fp x22994 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x22995 = x22994 * x3;
        Fp x22996 = x22993 + x22995;
        Fp x22997 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x22998 = x22997 * x6;
        Fp x22999 = x22996 + x22998;
        Fp x23000 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x23001 = x23000 * x11;
        Fp x23002 = x22999 + x23001;
        Fp x23003 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x23004 = x23003 * x27;
        Fp x23005 = x23002 + x23004;
        Fp x23006 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x23007 = x23006 * x12;
        Fp x23008 = x23005 + x23007;
        Fp x23009 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x23010 = x23009 * x28;
        Fp x23011 = x23008 + x23010;
        Fp x23012 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x23013 = x23012 * x13;
        Fp x23014 = x23011 + x23013;
        Fp x23015 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x23016 = x23015 * x29;
        Fp x23017 = x23014 + x23016;
        Fp x23018 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x23019 = x23018 * x14;
        Fp x23020 = x23017 + x23019;
        Fp x23021 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x23022 = x23021 * x30;
        Fp x23023 = x23020 + x23022;
        Fp x23024 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x23025 = x23024 * x15;
        Fp x23026 = x23023 + x23025;
        Fp x23027 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x23028 = x23027 * x31;
        Fp x23029 = x23026 + x23028;
        Fp x23030 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x23031 = x23030 * x16;
        Fp x23032 = x23029 + x23031;
        Fp x23033 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x23034 = x23033 * x32;
        Fp x23035 = x23032 + x23034;
        Fp x23036 = x20300 - x23035;
        Fp x23037 = x23036 * x33;
        if (x23037 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:61");
        {
          Fp x23038 = (x22707 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x23038;
          Fp x23039 = x22707 - x71;
          Fp x23040 = (x23039 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x23040;
          Fp x23041 = x22707 - x1;
          Fp x23042 = (x23041 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x23042;
          Fp x23043 = x22707 - x2;
          Fp x23044 = (x23043 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x23044;
        }
        Fp x23045 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x23046 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x23047 = x23046 * x1;
        Fp x23048 = x23045 + x23047;
        Fp x23049 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x23050 = x23049 * x2;
        Fp x23051 = x23048 + x23050;
        Fp x23052 = x23051 - x22707;
        if (x23052 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x23053 = x22749 + x17;
        Fp x23054 = x23053 - x22941;
        Fp x23055 = x22845 + x35;
        Fp x23056 = x23055 - x23035;
        {
          Fp x23057 = Fp(x23054.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x23057;
          Fp x23058 = x23054 - x23057;
          Fp x23059 = x23058 * x26;
          Fp x23060 = Fp(x23059.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x23060;
          Fp x23061 = x23059 - x23060;
          Fp x23062 = x23061 * x26;
          Fp x23063 = Fp(x23062.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x23063;
          Fp x23064 = x23062 - x23063;
          Fp x23065 = x23064 * x26;
          Fp x23066 = Fp(x23065.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x23066;
          Fp x23067 = x23065 - x23066;
          Fp x23068 = x23067 * x26;
          Fp x23069 = Fp(x23068.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x23069;
          Fp x23070 = x23068 - x23069;
          Fp x23071 = x23070 * x26;
          Fp x23072 = Fp(x23071.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x23072;
          Fp x23073 = x23071 - x23072;
          Fp x23074 = x23073 * x26;
          Fp x23075 = Fp(x23074.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x23075;
          Fp x23076 = x23074 - x23075;
          Fp x23077 = x23076 * x26;
          Fp x23078 = Fp(x23077.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x23078;
          Fp x23079 = x23077 - x23078;
          Fp x23080 = x23079 * x26;
          Fp x23081 = Fp(x23080.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x23081;
          Fp x23082 = x23080 - x23081;
          Fp x23083 = x23082 * x26;
          Fp x23084 = Fp(x23083.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x23084;
          Fp x23085 = x23083 - x23084;
          Fp x23086 = x23085 * x26;
          Fp x23087 = Fp(x23086.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x23087;
          Fp x23088 = x23086 - x23087;
          Fp x23089 = x23088 * x26;
          Fp x23090 = Fp(x23089.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x23090;
          Fp x23091 = x23089 - x23090;
          Fp x23092 = x23091 * x26;
          Fp x23093 = Fp(x23092.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x23093;
          Fp x23094 = x23092 - x23093;
          Fp x23095 = x23094 * x26;
          Fp x23096 = Fp(x23095.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x23096;
          Fp x23097 = x23095 - x23096;
          Fp x23098 = x23097 * x26;
          Fp x23099 = Fp(x23098.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x23099;
          Fp x23100 = x23098 - x23099;
          Fp x23101 = x23100 * x26;
          Fp x23102 = Fp(x23101.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x23102;
        }
        Fp x23103 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x23104 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x23105 = x23104 * x1;
        Fp x23106 = x23103 + x23105;
        Fp x23107 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x23108 = x23107 * x3;
        Fp x23109 = x23106 + x23108;
        Fp x23110 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x23111 = x23110 * x6;
        Fp x23112 = x23109 + x23111;
        Fp x23113 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x23114 = x23113 * x11;
        Fp x23115 = x23112 + x23114;
        Fp x23116 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x23117 = x23116 * x27;
        Fp x23118 = x23115 + x23117;
        Fp x23119 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x23120 = x23119 * x12;
        Fp x23121 = x23118 + x23120;
        Fp x23122 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x23123 = x23122 * x28;
        Fp x23124 = x23121 + x23123;
        Fp x23125 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x23126 = x23125 * x13;
        Fp x23127 = x23124 + x23126;
        Fp x23128 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x23129 = x23128 * x29;
        Fp x23130 = x23127 + x23129;
        Fp x23131 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x23132 = x23131 * x14;
        Fp x23133 = x23130 + x23132;
        Fp x23134 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x23135 = x23134 * x30;
        Fp x23136 = x23133 + x23135;
        Fp x23137 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x23138 = x23137 * x15;
        Fp x23139 = x23136 + x23138;
        Fp x23140 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x23141 = x23140 * x31;
        Fp x23142 = x23139 + x23141;
        Fp x23143 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x23144 = x23143 * x16;
        Fp x23145 = x23142 + x23144;
        Fp x23146 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x23147 = x23146 * x32;
        Fp x23148 = x23145 + x23147;
        Fp x23149 = x23054 - x23148;
        Fp x23150 = x23149 * x33;
        args[2][108 * steps + cycle] = x23150;
        Fp x23151 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x23152 = x23056 + x23151;
        {
          Fp x23153 = Fp(x23152.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x23153;
          Fp x23154 = x23152 - x23153;
          Fp x23155 = x23154 * x26;
          Fp x23156 = Fp(x23155.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x23156;
          Fp x23157 = x23155 - x23156;
          Fp x23158 = x23157 * x26;
          Fp x23159 = Fp(x23158.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x23159;
          Fp x23160 = x23158 - x23159;
          Fp x23161 = x23160 * x26;
          Fp x23162 = Fp(x23161.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x23162;
          Fp x23163 = x23161 - x23162;
          Fp x23164 = x23163 * x26;
          Fp x23165 = Fp(x23164.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x23165;
          Fp x23166 = x23164 - x23165;
          Fp x23167 = x23166 * x26;
          Fp x23168 = Fp(x23167.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x23168;
          Fp x23169 = x23167 - x23168;
          Fp x23170 = x23169 * x26;
          Fp x23171 = Fp(x23170.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x23171;
          Fp x23172 = x23170 - x23171;
          Fp x23173 = x23172 * x26;
          Fp x23174 = Fp(x23173.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x23174;
          Fp x23175 = x23173 - x23174;
          Fp x23176 = x23175 * x26;
          Fp x23177 = Fp(x23176.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x23177;
          Fp x23178 = x23176 - x23177;
          Fp x23179 = x23178 * x26;
          Fp x23180 = Fp(x23179.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x23180;
          Fp x23181 = x23179 - x23180;
          Fp x23182 = x23181 * x26;
          Fp x23183 = Fp(x23182.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x23183;
          Fp x23184 = x23182 - x23183;
          Fp x23185 = x23184 * x26;
          Fp x23186 = Fp(x23185.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x23186;
          Fp x23187 = x23185 - x23186;
          Fp x23188 = x23187 * x26;
          Fp x23189 = Fp(x23188.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x23189;
          Fp x23190 = x23188 - x23189;
          Fp x23191 = x23190 * x26;
          Fp x23192 = Fp(x23191.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x23192;
          Fp x23193 = x23191 - x23192;
          Fp x23194 = x23193 * x26;
          Fp x23195 = Fp(x23194.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x23195;
          Fp x23196 = x23194 - x23195;
          Fp x23197 = x23196 * x26;
          Fp x23198 = Fp(x23197.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x23198;
        }
        Fp x23199 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x23200 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x23201 = x23200 * x1;
        Fp x23202 = x23199 + x23201;
        Fp x23203 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x23204 = x23203 * x3;
        Fp x23205 = x23202 + x23204;
        Fp x23206 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x23207 = x23206 * x6;
        Fp x23208 = x23205 + x23207;
        Fp x23209 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x23210 = x23209 * x11;
        Fp x23211 = x23208 + x23210;
        Fp x23212 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x23213 = x23212 * x27;
        Fp x23214 = x23211 + x23213;
        Fp x23215 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x23216 = x23215 * x12;
        Fp x23217 = x23214 + x23216;
        Fp x23218 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x23219 = x23218 * x28;
        Fp x23220 = x23217 + x23219;
        Fp x23221 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x23222 = x23221 * x13;
        Fp x23223 = x23220 + x23222;
        Fp x23224 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x23225 = x23224 * x29;
        Fp x23226 = x23223 + x23225;
        Fp x23227 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x23228 = x23227 * x14;
        Fp x23229 = x23226 + x23228;
        Fp x23230 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x23231 = x23230 * x30;
        Fp x23232 = x23229 + x23231;
        Fp x23233 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x23234 = x23233 * x15;
        Fp x23235 = x23232 + x23234;
        Fp x23236 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x23237 = x23236 * x31;
        Fp x23238 = x23235 + x23237;
        Fp x23239 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x23240 = x23239 * x16;
        Fp x23241 = x23238 + x23240;
        Fp x23242 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x23243 = x23242 * x32;
        Fp x23244 = x23241 + x23243;
        Fp x23245 = x23152 - x23244;
        Fp x23246 = x23245 * x33;
        args[2][109 * steps + cycle] = x23246;
        {
          {
            Fp x23247 = (x23148 == 0) ? Fp(1) : Fp(0);
            Fp x23248 = x71 - x23247;
            args[2][114 * steps + cycle] = x23248;
            Fp x23249 = inv(x23148);
            args[2][115 * steps + cycle] = x23249;
          }
          Fp x23250 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x23251 = x23148 * x23250;
          Fp x23252 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x23253 = x23251 - x23252;
          if (x23253 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x23254 = x71 - x23252;
          Fp x23255 = x23254 * x23148;
          if (x23255 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x23256 = (x23244 == 0) ? Fp(1) : Fp(0);
            Fp x23257 = x71 - x23256;
            args[2][116 * steps + cycle] = x23257;
            Fp x23258 = inv(x23244);
            args[2][117 * steps + cycle] = x23258;
          }
          Fp x23259 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x23260 = x23244 * x23259;
          Fp x23261 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x23262 = x23260 - x23261;
          if (x23262 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x23263 = x71 - x23261;
          Fp x23264 = x23263 * x23244;
          if (x23264 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x23265 = x23254 * x23263;
          Fp x23266 = x71 - x23265;
          args[2][111 * steps + cycle] = x23266;
          Fp x23267 = x71 - x23033;
          Fp x23268 = x22843 * x23267;
          Fp x23269 = x71 - x23242;
          Fp x23270 = x23268 * x23269;
          Fp x23271 = x71 - x22843;
          Fp x23272 = x23271 * x23033;
          Fp x23273 = x23272 * x23242;
          Fp x23274 = x23270 + x23273;
          args[2][112 * steps + cycle] = x23274;
          Fp x23275 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x23276 = x23275 + x23242;
          Fp x23277 = x23275 * x1;
          Fp x23278 = x23277 * x23242;
          Fp x23279 = x23276 - x23278;
          args[2][113 * steps + cycle] = x23279;
        }
        Fp x23280 = args[2][113 * steps + ((cycle - 0) & mask)];
        args[2][100 * steps + cycle] = x23280;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x23281 = x20322 + x3;
        args[2][104 * steps + cycle] = x23281;
        args[2][105 * steps + cycle] = x20344;
        Fp x23282 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x23283 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x23284 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x23285 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x23286 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x20344;
        host_args[2] = x20322;
        host_args[3] = x22845;
        host_args[4] = x22749;
        host_args[5] = x23035;
        host_args[6] = x22941;
        host_args[7] = x23244;
        host_args[8] = x23148;
        host_args[9] = x23282;
        host_args[10] = x23283;
        host_args[11] = x23284;
        host_args[12] = x23280;
        host_args[13] = x23285;
        host_args[14] = x23286;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x23287 = args[2][77 * steps + ((cycle - 1) & mask)];
      if (x23287 != 0) {
        {
          Fp x23288 = Fp(x20297.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x23288;
          Fp x23289 = x20297 - x23288;
          Fp x23290 = x23289 * x26;
          Fp x23291 = Fp(x23290.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x23291;
          Fp x23292 = x23290 - x23291;
          Fp x23293 = x23292 * x26;
          Fp x23294 = Fp(x23293.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x23294;
          Fp x23295 = x23293 - x23294;
          Fp x23296 = x23295 * x26;
          Fp x23297 = Fp(x23296.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x23297;
          Fp x23298 = x23296 - x23297;
          Fp x23299 = x23298 * x26;
          Fp x23300 = Fp(x23299.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x23300;
          Fp x23301 = x23299 - x23300;
          Fp x23302 = x23301 * x26;
          Fp x23303 = Fp(x23302.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x23303;
          Fp x23304 = x23302 - x23303;
          Fp x23305 = x23304 * x26;
          Fp x23306 = Fp(x23305.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x23306;
          Fp x23307 = x23305 - x23306;
          Fp x23308 = x23307 * x26;
          Fp x23309 = Fp(x23308.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x23309;
          Fp x23310 = x23308 - x23309;
          Fp x23311 = x23310 * x26;
          Fp x23312 = Fp(x23311.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x23312;
          Fp x23313 = x23311 - x23312;
          Fp x23314 = x23313 * x26;
          Fp x23315 = Fp(x23314.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x23315;
          Fp x23316 = x23314 - x23315;
          Fp x23317 = x23316 * x26;
          Fp x23318 = Fp(x23317.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x23318;
          Fp x23319 = x23317 - x23318;
          Fp x23320 = x23319 * x26;
          Fp x23321 = Fp(x23320.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x23321;
          Fp x23322 = x23320 - x23321;
          Fp x23323 = x23322 * x26;
          Fp x23324 = Fp(x23323.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x23324;
          Fp x23325 = x23323 - x23324;
          Fp x23326 = x23325 * x26;
          Fp x23327 = Fp(x23326.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x23327;
          Fp x23328 = x23326 - x23327;
          Fp x23329 = x23328 * x26;
          Fp x23330 = Fp(x23329.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x23330;
          Fp x23331 = x23329 - x23330;
          Fp x23332 = x23331 * x26;
          Fp x23333 = Fp(x23332.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x23333;
        }
        Fp x23334 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x23335 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x23336 = x23335 * x1;
        Fp x23337 = x23334 + x23336;
        Fp x23338 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x23339 = x23338 * x3;
        Fp x23340 = x23337 + x23339;
        Fp x23341 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x23342 = x23341 * x6;
        Fp x23343 = x23340 + x23342;
        Fp x23344 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x23345 = x23344 * x11;
        Fp x23346 = x23343 + x23345;
        Fp x23347 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x23348 = x23347 * x27;
        Fp x23349 = x23346 + x23348;
        Fp x23350 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x23351 = x23350 * x12;
        Fp x23352 = x23349 + x23351;
        Fp x23353 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x23354 = x23353 * x28;
        Fp x23355 = x23352 + x23354;
        Fp x23356 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x23357 = x23356 * x13;
        Fp x23358 = x23355 + x23357;
        Fp x23359 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x23360 = x23359 * x29;
        Fp x23361 = x23358 + x23360;
        Fp x23362 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x23363 = x23362 * x14;
        Fp x23364 = x23361 + x23363;
        Fp x23365 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x23366 = x23365 * x30;
        Fp x23367 = x23364 + x23366;
        Fp x23368 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x23369 = x23368 * x15;
        Fp x23370 = x23367 + x23369;
        Fp x23371 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x23372 = x23371 * x31;
        Fp x23373 = x23370 + x23372;
        Fp x23374 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x23375 = x23374 * x16;
        Fp x23376 = x23373 + x23375;
        Fp x23377 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x23378 = x23377 * x32;
        Fp x23379 = x23376 + x23378;
        Fp x23380 = x20297 - x23379;
        Fp x23381 = x23380 * x33;
        args[2][106 * steps + cycle] = x23381;
        Fp x23382 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x23383 = x20298 + x23382;
        {
          Fp x23384 = Fp(x23383.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x23384;
          Fp x23385 = x23383 - x23384;
          Fp x23386 = x23385 * x26;
          Fp x23387 = Fp(x23386.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x23387;
          Fp x23388 = x23386 - x23387;
          Fp x23389 = x23388 * x26;
          Fp x23390 = Fp(x23389.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x23390;
          Fp x23391 = x23389 - x23390;
          Fp x23392 = x23391 * x26;
          Fp x23393 = Fp(x23392.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x23393;
          Fp x23394 = x23392 - x23393;
          Fp x23395 = x23394 * x26;
          Fp x23396 = Fp(x23395.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x23396;
          Fp x23397 = x23395 - x23396;
          Fp x23398 = x23397 * x26;
          Fp x23399 = Fp(x23398.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x23399;
          Fp x23400 = x23398 - x23399;
          Fp x23401 = x23400 * x26;
          Fp x23402 = Fp(x23401.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x23402;
          Fp x23403 = x23401 - x23402;
          Fp x23404 = x23403 * x26;
          Fp x23405 = Fp(x23404.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x23405;
          Fp x23406 = x23404 - x23405;
          Fp x23407 = x23406 * x26;
          Fp x23408 = Fp(x23407.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x23408;
          Fp x23409 = x23407 - x23408;
          Fp x23410 = x23409 * x26;
          Fp x23411 = Fp(x23410.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x23411;
          Fp x23412 = x23410 - x23411;
          Fp x23413 = x23412 * x26;
          Fp x23414 = Fp(x23413.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x23414;
          Fp x23415 = x23413 - x23414;
          Fp x23416 = x23415 * x26;
          Fp x23417 = Fp(x23416.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x23417;
          Fp x23418 = x23416 - x23417;
          Fp x23419 = x23418 * x26;
          Fp x23420 = Fp(x23419.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x23420;
          Fp x23421 = x23419 - x23420;
          Fp x23422 = x23421 * x26;
          Fp x23423 = Fp(x23422.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x23423;
          Fp x23424 = x23422 - x23423;
          Fp x23425 = x23424 * x26;
          Fp x23426 = Fp(x23425.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x23426;
          Fp x23427 = x23425 - x23426;
          Fp x23428 = x23427 * x26;
          Fp x23429 = Fp(x23428.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x23429;
        }
        Fp x23430 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x23431 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x23432 = x23431 * x1;
        Fp x23433 = x23430 + x23432;
        Fp x23434 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x23435 = x23434 * x3;
        Fp x23436 = x23433 + x23435;
        Fp x23437 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x23438 = x23437 * x6;
        Fp x23439 = x23436 + x23438;
        Fp x23440 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x23441 = x23440 * x11;
        Fp x23442 = x23439 + x23441;
        Fp x23443 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x23444 = x23443 * x27;
        Fp x23445 = x23442 + x23444;
        Fp x23446 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x23447 = x23446 * x12;
        Fp x23448 = x23445 + x23447;
        Fp x23449 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x23450 = x23449 * x28;
        Fp x23451 = x23448 + x23450;
        Fp x23452 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x23453 = x23452 * x13;
        Fp x23454 = x23451 + x23453;
        Fp x23455 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x23456 = x23455 * x29;
        Fp x23457 = x23454 + x23456;
        Fp x23458 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x23459 = x23458 * x14;
        Fp x23460 = x23457 + x23459;
        Fp x23461 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x23462 = x23461 * x30;
        Fp x23463 = x23460 + x23462;
        Fp x23464 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x23465 = x23464 * x15;
        Fp x23466 = x23463 + x23465;
        Fp x23467 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x23468 = x23467 * x31;
        Fp x23469 = x23466 + x23468;
        Fp x23470 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x23471 = x23470 * x16;
        Fp x23472 = x23469 + x23471;
        Fp x23473 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x23474 = x23473 * x32;
        Fp x23475 = x23472 + x23474;
        Fp x23476 = x23383 - x23475;
        Fp x23477 = x23476 * x33;
        args[2][107 * steps + cycle] = x23477;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x23478 = host_outs[0];
          Fp x23479 = host_outs[1];
          args[2][129 * steps + cycle] = x23478;
          args[2][130 * steps + cycle] = x23479;
        }
        {
          Fp x23480 = Fp(x20299.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x23480;
          Fp x23481 = x20299 - x23480;
          Fp x23482 = x23481 * x26;
          Fp x23483 = Fp(x23482.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x23483;
          Fp x23484 = x23482 - x23483;
          Fp x23485 = x23484 * x26;
          Fp x23486 = Fp(x23485.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x23486;
          Fp x23487 = x23485 - x23486;
          Fp x23488 = x23487 * x26;
          Fp x23489 = Fp(x23488.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x23489;
          Fp x23490 = x23488 - x23489;
          Fp x23491 = x23490 * x26;
          Fp x23492 = Fp(x23491.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x23492;
          Fp x23493 = x23491 - x23492;
          Fp x23494 = x23493 * x26;
          Fp x23495 = Fp(x23494.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x23495;
          Fp x23496 = x23494 - x23495;
          Fp x23497 = x23496 * x26;
          Fp x23498 = Fp(x23497.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x23498;
          Fp x23499 = x23497 - x23498;
          Fp x23500 = x23499 * x26;
          Fp x23501 = Fp(x23500.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x23501;
          Fp x23502 = x23500 - x23501;
          Fp x23503 = x23502 * x26;
          Fp x23504 = Fp(x23503.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x23504;
          Fp x23505 = x23503 - x23504;
          Fp x23506 = x23505 * x26;
          Fp x23507 = Fp(x23506.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x23507;
          Fp x23508 = x23506 - x23507;
          Fp x23509 = x23508 * x26;
          Fp x23510 = Fp(x23509.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x23510;
          Fp x23511 = x23509 - x23510;
          Fp x23512 = x23511 * x26;
          Fp x23513 = Fp(x23512.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x23513;
          Fp x23514 = x23512 - x23513;
          Fp x23515 = x23514 * x26;
          Fp x23516 = Fp(x23515.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x23516;
          Fp x23517 = x23515 - x23516;
          Fp x23518 = x23517 * x26;
          Fp x23519 = Fp(x23518.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x23519;
          Fp x23520 = x23518 - x23519;
          Fp x23521 = x23520 * x26;
          Fp x23522 = Fp(x23521.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x23522;
          Fp x23523 = x23521 - x23522;
          Fp x23524 = x23523 * x26;
          Fp x23525 = Fp(x23524.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x23525;
        }
        Fp x23526 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x23527 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x23528 = x23527 * x1;
        Fp x23529 = x23526 + x23528;
        Fp x23530 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x23531 = x23530 * x3;
        Fp x23532 = x23529 + x23531;
        Fp x23533 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x23534 = x23533 * x6;
        Fp x23535 = x23532 + x23534;
        Fp x23536 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x23537 = x23536 * x11;
        Fp x23538 = x23535 + x23537;
        Fp x23539 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x23540 = x23539 * x27;
        Fp x23541 = x23538 + x23540;
        Fp x23542 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x23543 = x23542 * x12;
        Fp x23544 = x23541 + x23543;
        Fp x23545 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x23546 = x23545 * x28;
        Fp x23547 = x23544 + x23546;
        Fp x23548 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x23549 = x23548 * x13;
        Fp x23550 = x23547 + x23549;
        Fp x23551 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x23552 = x23551 * x29;
        Fp x23553 = x23550 + x23552;
        Fp x23554 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x23555 = x23554 * x14;
        Fp x23556 = x23553 + x23555;
        Fp x23557 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x23558 = x23557 * x30;
        Fp x23559 = x23556 + x23558;
        Fp x23560 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x23561 = x23560 * x15;
        Fp x23562 = x23559 + x23561;
        Fp x23563 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x23564 = x23563 * x31;
        Fp x23565 = x23562 + x23564;
        Fp x23566 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x23567 = x23566 * x16;
        Fp x23568 = x23565 + x23567;
        Fp x23569 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x23570 = x23569 * x32;
        Fp x23571 = x23568 + x23570;
        Fp x23572 = x20299 - x23571;
        Fp x23573 = x23572 * x33;
        if (x23573 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:62");
        {
          Fp x23574 = Fp(x20300.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x23574;
          Fp x23575 = x20300 - x23574;
          Fp x23576 = x23575 * x26;
          Fp x23577 = Fp(x23576.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x23577;
          Fp x23578 = x23576 - x23577;
          Fp x23579 = x23578 * x26;
          Fp x23580 = Fp(x23579.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x23580;
          Fp x23581 = x23579 - x23580;
          Fp x23582 = x23581 * x26;
          Fp x23583 = Fp(x23582.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x23583;
          Fp x23584 = x23582 - x23583;
          Fp x23585 = x23584 * x26;
          Fp x23586 = Fp(x23585.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x23586;
          Fp x23587 = x23585 - x23586;
          Fp x23588 = x23587 * x26;
          Fp x23589 = Fp(x23588.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x23589;
          Fp x23590 = x23588 - x23589;
          Fp x23591 = x23590 * x26;
          Fp x23592 = Fp(x23591.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x23592;
          Fp x23593 = x23591 - x23592;
          Fp x23594 = x23593 * x26;
          Fp x23595 = Fp(x23594.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x23595;
          Fp x23596 = x23594 - x23595;
          Fp x23597 = x23596 * x26;
          Fp x23598 = Fp(x23597.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x23598;
          Fp x23599 = x23597 - x23598;
          Fp x23600 = x23599 * x26;
          Fp x23601 = Fp(x23600.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x23601;
          Fp x23602 = x23600 - x23601;
          Fp x23603 = x23602 * x26;
          Fp x23604 = Fp(x23603.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x23604;
          Fp x23605 = x23603 - x23604;
          Fp x23606 = x23605 * x26;
          Fp x23607 = Fp(x23606.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x23607;
          Fp x23608 = x23606 - x23607;
          Fp x23609 = x23608 * x26;
          Fp x23610 = Fp(x23609.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x23610;
          Fp x23611 = x23609 - x23610;
          Fp x23612 = x23611 * x26;
          Fp x23613 = Fp(x23612.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x23613;
          Fp x23614 = x23612 - x23613;
          Fp x23615 = x23614 * x26;
          Fp x23616 = Fp(x23615.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x23616;
          Fp x23617 = x23615 - x23616;
          Fp x23618 = x23617 * x26;
          Fp x23619 = Fp(x23618.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x23619;
        }
        Fp x23620 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x23621 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x23622 = x23621 * x1;
        Fp x23623 = x23620 + x23622;
        Fp x23624 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x23625 = x23624 * x3;
        Fp x23626 = x23623 + x23625;
        Fp x23627 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x23628 = x23627 * x6;
        Fp x23629 = x23626 + x23628;
        Fp x23630 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x23631 = x23630 * x11;
        Fp x23632 = x23629 + x23631;
        Fp x23633 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x23634 = x23633 * x27;
        Fp x23635 = x23632 + x23634;
        Fp x23636 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x23637 = x23636 * x12;
        Fp x23638 = x23635 + x23637;
        Fp x23639 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x23640 = x23639 * x28;
        Fp x23641 = x23638 + x23640;
        Fp x23642 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x23643 = x23642 * x13;
        Fp x23644 = x23641 + x23643;
        Fp x23645 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x23646 = x23645 * x29;
        Fp x23647 = x23644 + x23646;
        Fp x23648 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x23649 = x23648 * x14;
        Fp x23650 = x23647 + x23649;
        Fp x23651 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x23652 = x23651 * x30;
        Fp x23653 = x23650 + x23652;
        Fp x23654 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x23655 = x23654 * x15;
        Fp x23656 = x23653 + x23655;
        Fp x23657 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x23658 = x23657 * x31;
        Fp x23659 = x23656 + x23658;
        Fp x23660 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x23661 = x23660 * x16;
        Fp x23662 = x23659 + x23661;
        Fp x23663 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x23664 = x23663 * x32;
        Fp x23665 = x23662 + x23664;
        Fp x23666 = x20300 - x23665;
        Fp x23667 = x23666 * x33;
        if (x23667 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:62");
        {
          Fp x23668 = (x23337 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x23668;
          Fp x23669 = x23337 - x71;
          Fp x23670 = (x23669 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x23670;
          Fp x23671 = x23337 - x1;
          Fp x23672 = (x23671 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x23672;
          Fp x23673 = x23337 - x2;
          Fp x23674 = (x23673 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x23674;
        }
        Fp x23675 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x23676 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x23677 = x23676 * x1;
        Fp x23678 = x23675 + x23677;
        Fp x23679 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x23680 = x23679 * x2;
        Fp x23681 = x23678 + x23680;
        Fp x23682 = x23681 - x23337;
        if (x23682 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x23683 = x23379 + x17;
        Fp x23684 = x23683 - x23571;
        Fp x23685 = x23475 + x35;
        Fp x23686 = x23685 - x23665;
        {
          Fp x23687 = Fp(x23684.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x23687;
          Fp x23688 = x23684 - x23687;
          Fp x23689 = x23688 * x26;
          Fp x23690 = Fp(x23689.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x23690;
          Fp x23691 = x23689 - x23690;
          Fp x23692 = x23691 * x26;
          Fp x23693 = Fp(x23692.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x23693;
          Fp x23694 = x23692 - x23693;
          Fp x23695 = x23694 * x26;
          Fp x23696 = Fp(x23695.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x23696;
          Fp x23697 = x23695 - x23696;
          Fp x23698 = x23697 * x26;
          Fp x23699 = Fp(x23698.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x23699;
          Fp x23700 = x23698 - x23699;
          Fp x23701 = x23700 * x26;
          Fp x23702 = Fp(x23701.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x23702;
          Fp x23703 = x23701 - x23702;
          Fp x23704 = x23703 * x26;
          Fp x23705 = Fp(x23704.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x23705;
          Fp x23706 = x23704 - x23705;
          Fp x23707 = x23706 * x26;
          Fp x23708 = Fp(x23707.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x23708;
          Fp x23709 = x23707 - x23708;
          Fp x23710 = x23709 * x26;
          Fp x23711 = Fp(x23710.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x23711;
          Fp x23712 = x23710 - x23711;
          Fp x23713 = x23712 * x26;
          Fp x23714 = Fp(x23713.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x23714;
          Fp x23715 = x23713 - x23714;
          Fp x23716 = x23715 * x26;
          Fp x23717 = Fp(x23716.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x23717;
          Fp x23718 = x23716 - x23717;
          Fp x23719 = x23718 * x26;
          Fp x23720 = Fp(x23719.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x23720;
          Fp x23721 = x23719 - x23720;
          Fp x23722 = x23721 * x26;
          Fp x23723 = Fp(x23722.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x23723;
          Fp x23724 = x23722 - x23723;
          Fp x23725 = x23724 * x26;
          Fp x23726 = Fp(x23725.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x23726;
          Fp x23727 = x23725 - x23726;
          Fp x23728 = x23727 * x26;
          Fp x23729 = Fp(x23728.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x23729;
          Fp x23730 = x23728 - x23729;
          Fp x23731 = x23730 * x26;
          Fp x23732 = Fp(x23731.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x23732;
        }
        Fp x23733 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x23734 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x23735 = x23734 * x1;
        Fp x23736 = x23733 + x23735;
        Fp x23737 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x23738 = x23737 * x3;
        Fp x23739 = x23736 + x23738;
        Fp x23740 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x23741 = x23740 * x6;
        Fp x23742 = x23739 + x23741;
        Fp x23743 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x23744 = x23743 * x11;
        Fp x23745 = x23742 + x23744;
        Fp x23746 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x23747 = x23746 * x27;
        Fp x23748 = x23745 + x23747;
        Fp x23749 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x23750 = x23749 * x12;
        Fp x23751 = x23748 + x23750;
        Fp x23752 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x23753 = x23752 * x28;
        Fp x23754 = x23751 + x23753;
        Fp x23755 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x23756 = x23755 * x13;
        Fp x23757 = x23754 + x23756;
        Fp x23758 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x23759 = x23758 * x29;
        Fp x23760 = x23757 + x23759;
        Fp x23761 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x23762 = x23761 * x14;
        Fp x23763 = x23760 + x23762;
        Fp x23764 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x23765 = x23764 * x30;
        Fp x23766 = x23763 + x23765;
        Fp x23767 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x23768 = x23767 * x15;
        Fp x23769 = x23766 + x23768;
        Fp x23770 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x23771 = x23770 * x31;
        Fp x23772 = x23769 + x23771;
        Fp x23773 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x23774 = x23773 * x16;
        Fp x23775 = x23772 + x23774;
        Fp x23776 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x23777 = x23776 * x32;
        Fp x23778 = x23775 + x23777;
        Fp x23779 = x23684 - x23778;
        Fp x23780 = x23779 * x33;
        args[2][108 * steps + cycle] = x23780;
        Fp x23781 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x23782 = x23686 + x23781;
        {
          Fp x23783 = Fp(x23782.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x23783;
          Fp x23784 = x23782 - x23783;
          Fp x23785 = x23784 * x26;
          Fp x23786 = Fp(x23785.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x23786;
          Fp x23787 = x23785 - x23786;
          Fp x23788 = x23787 * x26;
          Fp x23789 = Fp(x23788.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x23789;
          Fp x23790 = x23788 - x23789;
          Fp x23791 = x23790 * x26;
          Fp x23792 = Fp(x23791.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x23792;
          Fp x23793 = x23791 - x23792;
          Fp x23794 = x23793 * x26;
          Fp x23795 = Fp(x23794.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x23795;
          Fp x23796 = x23794 - x23795;
          Fp x23797 = x23796 * x26;
          Fp x23798 = Fp(x23797.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x23798;
          Fp x23799 = x23797 - x23798;
          Fp x23800 = x23799 * x26;
          Fp x23801 = Fp(x23800.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x23801;
          Fp x23802 = x23800 - x23801;
          Fp x23803 = x23802 * x26;
          Fp x23804 = Fp(x23803.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x23804;
          Fp x23805 = x23803 - x23804;
          Fp x23806 = x23805 * x26;
          Fp x23807 = Fp(x23806.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x23807;
          Fp x23808 = x23806 - x23807;
          Fp x23809 = x23808 * x26;
          Fp x23810 = Fp(x23809.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x23810;
          Fp x23811 = x23809 - x23810;
          Fp x23812 = x23811 * x26;
          Fp x23813 = Fp(x23812.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x23813;
          Fp x23814 = x23812 - x23813;
          Fp x23815 = x23814 * x26;
          Fp x23816 = Fp(x23815.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x23816;
          Fp x23817 = x23815 - x23816;
          Fp x23818 = x23817 * x26;
          Fp x23819 = Fp(x23818.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x23819;
          Fp x23820 = x23818 - x23819;
          Fp x23821 = x23820 * x26;
          Fp x23822 = Fp(x23821.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x23822;
          Fp x23823 = x23821 - x23822;
          Fp x23824 = x23823 * x26;
          Fp x23825 = Fp(x23824.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x23825;
          Fp x23826 = x23824 - x23825;
          Fp x23827 = x23826 * x26;
          Fp x23828 = Fp(x23827.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x23828;
        }
        Fp x23829 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x23830 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x23831 = x23830 * x1;
        Fp x23832 = x23829 + x23831;
        Fp x23833 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x23834 = x23833 * x3;
        Fp x23835 = x23832 + x23834;
        Fp x23836 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x23837 = x23836 * x6;
        Fp x23838 = x23835 + x23837;
        Fp x23839 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x23840 = x23839 * x11;
        Fp x23841 = x23838 + x23840;
        Fp x23842 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x23843 = x23842 * x27;
        Fp x23844 = x23841 + x23843;
        Fp x23845 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x23846 = x23845 * x12;
        Fp x23847 = x23844 + x23846;
        Fp x23848 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x23849 = x23848 * x28;
        Fp x23850 = x23847 + x23849;
        Fp x23851 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x23852 = x23851 * x13;
        Fp x23853 = x23850 + x23852;
        Fp x23854 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x23855 = x23854 * x29;
        Fp x23856 = x23853 + x23855;
        Fp x23857 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x23858 = x23857 * x14;
        Fp x23859 = x23856 + x23858;
        Fp x23860 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x23861 = x23860 * x30;
        Fp x23862 = x23859 + x23861;
        Fp x23863 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x23864 = x23863 * x15;
        Fp x23865 = x23862 + x23864;
        Fp x23866 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x23867 = x23866 * x31;
        Fp x23868 = x23865 + x23867;
        Fp x23869 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x23870 = x23869 * x16;
        Fp x23871 = x23868 + x23870;
        Fp x23872 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x23873 = x23872 * x32;
        Fp x23874 = x23871 + x23873;
        Fp x23875 = x23782 - x23874;
        Fp x23876 = x23875 * x33;
        args[2][109 * steps + cycle] = x23876;
        {
          {
            Fp x23877 = (x23778 == 0) ? Fp(1) : Fp(0);
            Fp x23878 = x71 - x23877;
            args[2][114 * steps + cycle] = x23878;
            Fp x23879 = inv(x23778);
            args[2][115 * steps + cycle] = x23879;
          }
          Fp x23880 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x23881 = x23778 * x23880;
          Fp x23882 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x23883 = x23881 - x23882;
          if (x23883 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x23884 = x71 - x23882;
          Fp x23885 = x23884 * x23778;
          if (x23885 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x23886 = (x23874 == 0) ? Fp(1) : Fp(0);
            Fp x23887 = x71 - x23886;
            args[2][116 * steps + cycle] = x23887;
            Fp x23888 = inv(x23874);
            args[2][117 * steps + cycle] = x23888;
          }
          Fp x23889 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x23890 = x23874 * x23889;
          Fp x23891 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x23892 = x23890 - x23891;
          if (x23892 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x23893 = x71 - x23891;
          Fp x23894 = x23893 * x23874;
          if (x23894 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x23895 = x23884 * x23893;
          Fp x23896 = x71 - x23895;
          args[2][111 * steps + cycle] = x23896;
          Fp x23897 = x71 - x23663;
          Fp x23898 = x23473 * x23897;
          Fp x23899 = x71 - x23872;
          Fp x23900 = x23898 * x23899;
          Fp x23901 = x71 - x23473;
          Fp x23902 = x23901 * x23663;
          Fp x23903 = x23902 * x23872;
          Fp x23904 = x23900 + x23903;
          args[2][112 * steps + cycle] = x23904;
          Fp x23905 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x23906 = x23905 + x23872;
          Fp x23907 = x23905 * x1;
          Fp x23908 = x23907 * x23872;
          Fp x23909 = x23906 - x23908;
          args[2][113 * steps + cycle] = x23909;
        }
        Fp x23910 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x23911 = x71 - x23910;
        args[2][100 * steps + cycle] = x23911;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x23912 = x20322 + x3;
        args[2][104 * steps + cycle] = x23912;
        args[2][105 * steps + cycle] = x20344;
        Fp x23913 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x23914 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x23915 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x23916 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x23917 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x20344;
        host_args[2] = x20322;
        host_args[3] = x23475;
        host_args[4] = x23379;
        host_args[5] = x23665;
        host_args[6] = x23571;
        host_args[7] = x23874;
        host_args[8] = x23778;
        host_args[9] = x23913;
        host_args[10] = x23910;
        host_args[11] = x23914;
        host_args[12] = x23915;
        host_args[13] = x23916;
        host_args[14] = x23917;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x23918 = args[2][78 * steps + ((cycle - 1) & mask)];
      if (x23918 != 0) {
        Fp x23919 = x20297 + x20299;
        Fp x23920 = x20298 + x20300;
        {
          Fp x23921 = Fp(x23919.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x23921;
          Fp x23922 = x23919 - x23921;
          Fp x23923 = x23922 * x26;
          Fp x23924 = Fp(x23923.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x23924;
          Fp x23925 = x23923 - x23924;
          Fp x23926 = x23925 * x26;
          Fp x23927 = Fp(x23926.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x23927;
          Fp x23928 = x23926 - x23927;
          Fp x23929 = x23928 * x26;
          Fp x23930 = Fp(x23929.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x23930;
          Fp x23931 = x23929 - x23930;
          Fp x23932 = x23931 * x26;
          Fp x23933 = Fp(x23932.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x23933;
          Fp x23934 = x23932 - x23933;
          Fp x23935 = x23934 * x26;
          Fp x23936 = Fp(x23935.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x23936;
          Fp x23937 = x23935 - x23936;
          Fp x23938 = x23937 * x26;
          Fp x23939 = Fp(x23938.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x23939;
          Fp x23940 = x23938 - x23939;
          Fp x23941 = x23940 * x26;
          Fp x23942 = Fp(x23941.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x23942;
          Fp x23943 = x23941 - x23942;
          Fp x23944 = x23943 * x26;
          Fp x23945 = Fp(x23944.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x23945;
          Fp x23946 = x23944 - x23945;
          Fp x23947 = x23946 * x26;
          Fp x23948 = Fp(x23947.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x23948;
          Fp x23949 = x23947 - x23948;
          Fp x23950 = x23949 * x26;
          Fp x23951 = Fp(x23950.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x23951;
          Fp x23952 = x23950 - x23951;
          Fp x23953 = x23952 * x26;
          Fp x23954 = Fp(x23953.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x23954;
          Fp x23955 = x23953 - x23954;
          Fp x23956 = x23955 * x26;
          Fp x23957 = Fp(x23956.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x23957;
          Fp x23958 = x23956 - x23957;
          Fp x23959 = x23958 * x26;
          Fp x23960 = Fp(x23959.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x23960;
          Fp x23961 = x23959 - x23960;
          Fp x23962 = x23961 * x26;
          Fp x23963 = Fp(x23962.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x23963;
          Fp x23964 = x23962 - x23963;
          Fp x23965 = x23964 * x26;
          Fp x23966 = Fp(x23965.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x23966;
        }
        Fp x23967 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x23968 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x23969 = x23968 * x1;
        Fp x23970 = x23967 + x23969;
        Fp x23971 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x23972 = x23971 * x3;
        Fp x23973 = x23970 + x23972;
        Fp x23974 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x23975 = x23974 * x6;
        Fp x23976 = x23973 + x23975;
        Fp x23977 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x23978 = x23977 * x11;
        Fp x23979 = x23976 + x23978;
        Fp x23980 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x23981 = x23980 * x27;
        Fp x23982 = x23979 + x23981;
        Fp x23983 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x23984 = x23983 * x12;
        Fp x23985 = x23982 + x23984;
        Fp x23986 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x23987 = x23986 * x28;
        Fp x23988 = x23985 + x23987;
        Fp x23989 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x23990 = x23989 * x13;
        Fp x23991 = x23988 + x23990;
        Fp x23992 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x23993 = x23992 * x29;
        Fp x23994 = x23991 + x23993;
        Fp x23995 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x23996 = x23995 * x14;
        Fp x23997 = x23994 + x23996;
        Fp x23998 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x23999 = x23998 * x30;
        Fp x24000 = x23997 + x23999;
        Fp x24001 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x24002 = x24001 * x15;
        Fp x24003 = x24000 + x24002;
        Fp x24004 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x24005 = x24004 * x31;
        Fp x24006 = x24003 + x24005;
        Fp x24007 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x24008 = x24007 * x16;
        Fp x24009 = x24006 + x24008;
        Fp x24010 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x24011 = x24010 * x32;
        Fp x24012 = x24009 + x24011;
        Fp x24013 = x23919 - x24012;
        Fp x24014 = x24013 * x33;
        args[2][106 * steps + cycle] = x24014;
        Fp x24015 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x24016 = x23920 + x24015;
        {
          Fp x24017 = Fp(x24016.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x24017;
          Fp x24018 = x24016 - x24017;
          Fp x24019 = x24018 * x26;
          Fp x24020 = Fp(x24019.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x24020;
          Fp x24021 = x24019 - x24020;
          Fp x24022 = x24021 * x26;
          Fp x24023 = Fp(x24022.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x24023;
          Fp x24024 = x24022 - x24023;
          Fp x24025 = x24024 * x26;
          Fp x24026 = Fp(x24025.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x24026;
          Fp x24027 = x24025 - x24026;
          Fp x24028 = x24027 * x26;
          Fp x24029 = Fp(x24028.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x24029;
          Fp x24030 = x24028 - x24029;
          Fp x24031 = x24030 * x26;
          Fp x24032 = Fp(x24031.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x24032;
          Fp x24033 = x24031 - x24032;
          Fp x24034 = x24033 * x26;
          Fp x24035 = Fp(x24034.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x24035;
          Fp x24036 = x24034 - x24035;
          Fp x24037 = x24036 * x26;
          Fp x24038 = Fp(x24037.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x24038;
          Fp x24039 = x24037 - x24038;
          Fp x24040 = x24039 * x26;
          Fp x24041 = Fp(x24040.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x24041;
          Fp x24042 = x24040 - x24041;
          Fp x24043 = x24042 * x26;
          Fp x24044 = Fp(x24043.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x24044;
          Fp x24045 = x24043 - x24044;
          Fp x24046 = x24045 * x26;
          Fp x24047 = Fp(x24046.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x24047;
          Fp x24048 = x24046 - x24047;
          Fp x24049 = x24048 * x26;
          Fp x24050 = Fp(x24049.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x24050;
          Fp x24051 = x24049 - x24050;
          Fp x24052 = x24051 * x26;
          Fp x24053 = Fp(x24052.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x24053;
          Fp x24054 = x24052 - x24053;
          Fp x24055 = x24054 * x26;
          Fp x24056 = Fp(x24055.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x24056;
          Fp x24057 = x24055 - x24056;
          Fp x24058 = x24057 * x26;
          Fp x24059 = Fp(x24058.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x24059;
          Fp x24060 = x24058 - x24059;
          Fp x24061 = x24060 * x26;
          Fp x24062 = Fp(x24061.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x24062;
        }
        Fp x24063 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x24064 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x24065 = x24064 * x1;
        Fp x24066 = x24063 + x24065;
        Fp x24067 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x24068 = x24067 * x3;
        Fp x24069 = x24066 + x24068;
        Fp x24070 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x24071 = x24070 * x6;
        Fp x24072 = x24069 + x24071;
        Fp x24073 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x24074 = x24073 * x11;
        Fp x24075 = x24072 + x24074;
        Fp x24076 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x24077 = x24076 * x27;
        Fp x24078 = x24075 + x24077;
        Fp x24079 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x24080 = x24079 * x12;
        Fp x24081 = x24078 + x24080;
        Fp x24082 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x24083 = x24082 * x28;
        Fp x24084 = x24081 + x24083;
        Fp x24085 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x24086 = x24085 * x13;
        Fp x24087 = x24084 + x24086;
        Fp x24088 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x24089 = x24088 * x29;
        Fp x24090 = x24087 + x24089;
        Fp x24091 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x24092 = x24091 * x14;
        Fp x24093 = x24090 + x24092;
        Fp x24094 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x24095 = x24094 * x30;
        Fp x24096 = x24093 + x24095;
        Fp x24097 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x24098 = x24097 * x15;
        Fp x24099 = x24096 + x24098;
        Fp x24100 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x24101 = x24100 * x31;
        Fp x24102 = x24099 + x24101;
        Fp x24103 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x24104 = x24103 * x16;
        Fp x24105 = x24102 + x24104;
        Fp x24106 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x24107 = x24106 * x32;
        Fp x24108 = x24105 + x24107;
        Fp x24109 = x24016 - x24108;
        Fp x24110 = x24109 * x33;
        args[2][107 * steps + cycle] = x24110;
        Fp x24111 = x23974 * x1;
        Fp x24112 = x23971 + x24111;
        Fp x24113 = x23977 * x3;
        Fp x24114 = x24112 + x24113;
        Fp x24115 = x23980 * x6;
        Fp x24116 = x24114 + x24115;
        Fp x24117 = x23983 * x11;
        Fp x24118 = x24116 + x24117;
        Fp x24119 = x23986 * x27;
        Fp x24120 = x24118 + x24119;
        Fp x24121 = x23989 * x12;
        Fp x24122 = x24120 + x24121;
        Fp x24123 = x23992 * x28;
        Fp x24124 = x24122 + x24123;
        Fp x24125 = x23995 * x13;
        Fp x24126 = x24124 + x24125;
        Fp x24127 = x23998 * x29;
        Fp x24128 = x24126 + x24127;
        Fp x24129 = x24001 * x14;
        Fp x24130 = x24128 + x24129;
        Fp x24131 = x24004 * x30;
        Fp x24132 = x24130 + x24131;
        Fp x24133 = x24007 * x15;
        Fp x24134 = x24132 + x24133;
        Fp x24135 = x24010 * x31;
        Fp x24136 = x24134 + x24135;
        Fp x24137 = x24063 * x16;
        Fp x24138 = x24136 + x24137;
        Fp x24139 = x24064 * x32;
        Fp x24140 = x24138 + x24139;
        Fp x24141 = x24067 * x17;
        Fp x24142 = x24140 + x24141;
        Fp x24143 = x24070 * x57;
        Fp x24144 = x24142 + x24143;
        Fp x24145 = x24073 * x18;
        Fp x24146 = x24144 + x24145;
        Fp x24147 = x24076 * x58;
        Fp x24148 = x24146 + x24147;
        Fp x24149 = x24079 * x19;
        Fp x24150 = x24148 + x24149;
        Fp x24151 = x24082 * x59;
        Fp x24152 = x24150 + x24151;
        Fp x24153 = x24085 * x20;
        Fp x24154 = x24152 + x24153;
        Fp x24155 = x24088 * x60;
        Fp x24156 = x24154 + x24155;
        args[2][128 * steps + cycle] = x24156;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x24156;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x24157 = host_outs[0];
          Fp x24158 = host_outs[1];
          args[2][129 * steps + cycle] = x24157;
          args[2][130 * steps + cycle] = x24158;
        }
        Fp x24159 = x24094 * x1;
        Fp x24160 = x24091 + x24159;
        Fp x24161 = x24097 * x3;
        Fp x24162 = x24160 + x24161;
        Fp x24163 = x24100 * x6;
        Fp x24164 = x24162 + x24163;
        Fp x24165 = x24103 * x11;
        Fp x24166 = x24164 + x24165;
        Fp x24167 = x24106 * x27;
        Fp x24168 = x24166 + x24167;
        if (x24168 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:63");
        Fp x24169 = args[2][129 * steps + ((cycle - 0) & mask)];
        Fp x24170 = args[2][130 * steps + ((cycle - 0) & mask)];
        {
          Fp x24171 = Fp(x24169.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x24171;
          Fp x24172 = x24169 - x24171;
          Fp x24173 = x24172 * x26;
          Fp x24174 = Fp(x24173.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x24174;
          Fp x24175 = x24173 - x24174;
          Fp x24176 = x24175 * x26;
          Fp x24177 = Fp(x24176.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x24177;
          Fp x24178 = x24176 - x24177;
          Fp x24179 = x24178 * x26;
          Fp x24180 = Fp(x24179.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x24180;
          Fp x24181 = x24179 - x24180;
          Fp x24182 = x24181 * x26;
          Fp x24183 = Fp(x24182.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x24183;
          Fp x24184 = x24182 - x24183;
          Fp x24185 = x24184 * x26;
          Fp x24186 = Fp(x24185.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x24186;
          Fp x24187 = x24185 - x24186;
          Fp x24188 = x24187 * x26;
          Fp x24189 = Fp(x24188.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x24189;
          Fp x24190 = x24188 - x24189;
          Fp x24191 = x24190 * x26;
          Fp x24192 = Fp(x24191.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x24192;
          Fp x24193 = x24191 - x24192;
          Fp x24194 = x24193 * x26;
          Fp x24195 = Fp(x24194.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x24195;
          Fp x24196 = x24194 - x24195;
          Fp x24197 = x24196 * x26;
          Fp x24198 = Fp(x24197.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x24198;
          Fp x24199 = x24197 - x24198;
          Fp x24200 = x24199 * x26;
          Fp x24201 = Fp(x24200.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x24201;
          Fp x24202 = x24200 - x24201;
          Fp x24203 = x24202 * x26;
          Fp x24204 = Fp(x24203.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x24204;
          Fp x24205 = x24203 - x24204;
          Fp x24206 = x24205 * x26;
          Fp x24207 = Fp(x24206.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x24207;
          Fp x24208 = x24206 - x24207;
          Fp x24209 = x24208 * x26;
          Fp x24210 = Fp(x24209.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x24210;
          Fp x24211 = x24209 - x24210;
          Fp x24212 = x24211 * x26;
          Fp x24213 = Fp(x24212.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x24213;
          Fp x24214 = x24212 - x24213;
          Fp x24215 = x24214 * x26;
          Fp x24216 = Fp(x24215.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x24216;
        }
        Fp x24217 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x24218 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x24219 = x24218 * x1;
        Fp x24220 = x24217 + x24219;
        Fp x24221 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x24222 = x24221 * x3;
        Fp x24223 = x24220 + x24222;
        Fp x24224 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x24225 = x24224 * x6;
        Fp x24226 = x24223 + x24225;
        Fp x24227 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x24228 = x24227 * x11;
        Fp x24229 = x24226 + x24228;
        Fp x24230 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x24231 = x24230 * x27;
        Fp x24232 = x24229 + x24231;
        Fp x24233 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x24234 = x24233 * x12;
        Fp x24235 = x24232 + x24234;
        Fp x24236 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x24237 = x24236 * x28;
        Fp x24238 = x24235 + x24237;
        Fp x24239 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x24240 = x24239 * x13;
        Fp x24241 = x24238 + x24240;
        Fp x24242 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x24243 = x24242 * x29;
        Fp x24244 = x24241 + x24243;
        Fp x24245 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x24246 = x24245 * x14;
        Fp x24247 = x24244 + x24246;
        Fp x24248 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x24249 = x24248 * x30;
        Fp x24250 = x24247 + x24249;
        Fp x24251 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x24252 = x24251 * x15;
        Fp x24253 = x24250 + x24252;
        Fp x24254 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x24255 = x24254 * x31;
        Fp x24256 = x24253 + x24255;
        Fp x24257 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x24258 = x24257 * x16;
        Fp x24259 = x24256 + x24258;
        Fp x24260 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x24261 = x24260 * x32;
        Fp x24262 = x24259 + x24261;
        Fp x24263 = x24169 - x24262;
        Fp x24264 = x24263 * x33;
        if (x24264 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:63");
        {
          Fp x24265 = Fp(x24170.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x24265;
          Fp x24266 = x24170 - x24265;
          Fp x24267 = x24266 * x26;
          Fp x24268 = Fp(x24267.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x24268;
          Fp x24269 = x24267 - x24268;
          Fp x24270 = x24269 * x26;
          Fp x24271 = Fp(x24270.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x24271;
          Fp x24272 = x24270 - x24271;
          Fp x24273 = x24272 * x26;
          Fp x24274 = Fp(x24273.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x24274;
          Fp x24275 = x24273 - x24274;
          Fp x24276 = x24275 * x26;
          Fp x24277 = Fp(x24276.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x24277;
          Fp x24278 = x24276 - x24277;
          Fp x24279 = x24278 * x26;
          Fp x24280 = Fp(x24279.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x24280;
          Fp x24281 = x24279 - x24280;
          Fp x24282 = x24281 * x26;
          Fp x24283 = Fp(x24282.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x24283;
          Fp x24284 = x24282 - x24283;
          Fp x24285 = x24284 * x26;
          Fp x24286 = Fp(x24285.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x24286;
          Fp x24287 = x24285 - x24286;
          Fp x24288 = x24287 * x26;
          Fp x24289 = Fp(x24288.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x24289;
          Fp x24290 = x24288 - x24289;
          Fp x24291 = x24290 * x26;
          Fp x24292 = Fp(x24291.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x24292;
          Fp x24293 = x24291 - x24292;
          Fp x24294 = x24293 * x26;
          Fp x24295 = Fp(x24294.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x24295;
          Fp x24296 = x24294 - x24295;
          Fp x24297 = x24296 * x26;
          Fp x24298 = Fp(x24297.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x24298;
          Fp x24299 = x24297 - x24298;
          Fp x24300 = x24299 * x26;
          Fp x24301 = Fp(x24300.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x24301;
          Fp x24302 = x24300 - x24301;
          Fp x24303 = x24302 * x26;
          Fp x24304 = Fp(x24303.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x24304;
          Fp x24305 = x24303 - x24304;
          Fp x24306 = x24305 * x26;
          Fp x24307 = Fp(x24306.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x24307;
          Fp x24308 = x24306 - x24307;
          Fp x24309 = x24308 * x26;
          Fp x24310 = Fp(x24309.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x24310;
        }
        Fp x24311 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x24312 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x24313 = x24312 * x1;
        Fp x24314 = x24311 + x24313;
        Fp x24315 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x24316 = x24315 * x3;
        Fp x24317 = x24314 + x24316;
        Fp x24318 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x24319 = x24318 * x6;
        Fp x24320 = x24317 + x24319;
        Fp x24321 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x24322 = x24321 * x11;
        Fp x24323 = x24320 + x24322;
        Fp x24324 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x24325 = x24324 * x27;
        Fp x24326 = x24323 + x24325;
        Fp x24327 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x24328 = x24327 * x12;
        Fp x24329 = x24326 + x24328;
        Fp x24330 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x24331 = x24330 * x28;
        Fp x24332 = x24329 + x24331;
        Fp x24333 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x24334 = x24333 * x13;
        Fp x24335 = x24332 + x24334;
        Fp x24336 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x24337 = x24336 * x29;
        Fp x24338 = x24335 + x24337;
        Fp x24339 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x24340 = x24339 * x14;
        Fp x24341 = x24338 + x24340;
        Fp x24342 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x24343 = x24342 * x30;
        Fp x24344 = x24341 + x24343;
        Fp x24345 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x24346 = x24345 * x15;
        Fp x24347 = x24344 + x24346;
        Fp x24348 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x24349 = x24348 * x31;
        Fp x24350 = x24347 + x24349;
        Fp x24351 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x24352 = x24351 * x16;
        Fp x24353 = x24350 + x24352;
        Fp x24354 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x24355 = x24354 * x32;
        Fp x24356 = x24353 + x24355;
        Fp x24357 = x24170 - x24356;
        Fp x24358 = x24357 * x33;
        if (x24358 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:63");
        {
          Fp x24359 = (x23970 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x24359;
          Fp x24360 = x23970 - x71;
          Fp x24361 = (x24360 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x24361;
          Fp x24362 = x23970 - x1;
          Fp x24363 = (x24362 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x24363;
          Fp x24364 = x23970 - x2;
          Fp x24365 = (x24364 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x24365;
        }
        Fp x24366 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x24367 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x24368 = x24367 * x1;
        Fp x24369 = x24366 + x24368;
        Fp x24370 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x24371 = x24370 * x2;
        Fp x24372 = x24369 + x24371;
        Fp x24373 = x24372 - x23970;
        if (x24373 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x24374 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x24375 = x24374 * x24238;
        Fp x24376 = x24374 * x24236;
        Fp x24377 = x24242 * x1;
        Fp x24378 = x24239 + x24377;
        Fp x24379 = x24245 * x3;
        Fp x24380 = x24378 + x24379;
        Fp x24381 = x24248 * x6;
        Fp x24382 = x24380 + x24381;
        Fp x24383 = x24251 * x11;
        Fp x24384 = x24382 + x24383;
        Fp x24385 = x24254 * x27;
        Fp x24386 = x24384 + x24385;
        Fp x24387 = x24257 * x12;
        Fp x24388 = x24386 + x24387;
        Fp x24389 = x24260 * x28;
        Fp x24390 = x24388 + x24389;
        Fp x24391 = x24366 * x24390;
        Fp x24392 = x24375 + x24391;
        Fp x24393 = x24366 * x24260;
        Fp x24394 = x24376 + x24393;
        Fp x24395 = x24367 * x24332;
        Fp x24396 = x24392 + x24395;
        Fp x24397 = x24367 * x24330;
        Fp x24398 = x24394 + x24397;
        Fp x24399 = x24336 * x1;
        Fp x24400 = x24333 + x24399;
        Fp x24401 = x24339 * x3;
        Fp x24402 = x24400 + x24401;
        Fp x24403 = x24342 * x6;
        Fp x24404 = x24402 + x24403;
        Fp x24405 = x24345 * x11;
        Fp x24406 = x24404 + x24405;
        Fp x24407 = x24348 * x27;
        Fp x24408 = x24406 + x24407;
        Fp x24409 = x24351 * x12;
        Fp x24410 = x24408 + x24409;
        Fp x24411 = x24354 * x28;
        Fp x24412 = x24410 + x24411;
        Fp x24413 = x24370 * x24412;
        Fp x24414 = x24396 + x24413;
        Fp x24415 = x24370 * x24354;
        Fp x24416 = x24398 + x24415;
        Fp x24417 = x24416 * x61;
        Fp x24418 = x24417 + x24414;
        Fp x24419 = x24416 * x35;
        {
          Fp x24420 = Fp(x24418.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x24420;
          Fp x24421 = x24418 - x24420;
          Fp x24422 = x24421 * x26;
          Fp x24423 = Fp(x24422.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x24423;
          Fp x24424 = x24422 - x24423;
          Fp x24425 = x24424 * x26;
          Fp x24426 = Fp(x24425.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x24426;
          Fp x24427 = x24425 - x24426;
          Fp x24428 = x24427 * x26;
          Fp x24429 = Fp(x24428.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x24429;
          Fp x24430 = x24428 - x24429;
          Fp x24431 = x24430 * x26;
          Fp x24432 = Fp(x24431.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x24432;
          Fp x24433 = x24431 - x24432;
          Fp x24434 = x24433 * x26;
          Fp x24435 = Fp(x24434.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x24435;
          Fp x24436 = x24434 - x24435;
          Fp x24437 = x24436 * x26;
          Fp x24438 = Fp(x24437.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x24438;
          Fp x24439 = x24437 - x24438;
          Fp x24440 = x24439 * x26;
          Fp x24441 = Fp(x24440.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x24441;
          Fp x24442 = x24440 - x24441;
          Fp x24443 = x24442 * x26;
          Fp x24444 = Fp(x24443.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x24444;
          Fp x24445 = x24443 - x24444;
          Fp x24446 = x24445 * x26;
          Fp x24447 = Fp(x24446.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x24447;
          Fp x24448 = x24446 - x24447;
          Fp x24449 = x24448 * x26;
          Fp x24450 = Fp(x24449.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x24450;
          Fp x24451 = x24449 - x24450;
          Fp x24452 = x24451 * x26;
          Fp x24453 = Fp(x24452.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x24453;
          Fp x24454 = x24452 - x24453;
          Fp x24455 = x24454 * x26;
          Fp x24456 = Fp(x24455.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x24456;
          Fp x24457 = x24455 - x24456;
          Fp x24458 = x24457 * x26;
          Fp x24459 = Fp(x24458.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x24459;
          Fp x24460 = x24458 - x24459;
          Fp x24461 = x24460 * x26;
          Fp x24462 = Fp(x24461.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x24462;
          Fp x24463 = x24461 - x24462;
          Fp x24464 = x24463 * x26;
          Fp x24465 = Fp(x24464.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x24465;
        }
        Fp x24466 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x24467 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x24468 = x24467 * x1;
        Fp x24469 = x24466 + x24468;
        Fp x24470 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x24471 = x24470 * x3;
        Fp x24472 = x24469 + x24471;
        Fp x24473 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x24474 = x24473 * x6;
        Fp x24475 = x24472 + x24474;
        Fp x24476 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x24477 = x24476 * x11;
        Fp x24478 = x24475 + x24477;
        Fp x24479 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x24480 = x24479 * x27;
        Fp x24481 = x24478 + x24480;
        Fp x24482 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x24483 = x24482 * x12;
        Fp x24484 = x24481 + x24483;
        Fp x24485 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x24486 = x24485 * x28;
        Fp x24487 = x24484 + x24486;
        Fp x24488 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x24489 = x24488 * x13;
        Fp x24490 = x24487 + x24489;
        Fp x24491 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x24492 = x24491 * x29;
        Fp x24493 = x24490 + x24492;
        Fp x24494 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x24495 = x24494 * x14;
        Fp x24496 = x24493 + x24495;
        Fp x24497 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x24498 = x24497 * x30;
        Fp x24499 = x24496 + x24498;
        Fp x24500 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x24501 = x24500 * x15;
        Fp x24502 = x24499 + x24501;
        Fp x24503 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x24504 = x24503 * x31;
        Fp x24505 = x24502 + x24504;
        Fp x24506 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x24507 = x24506 * x16;
        Fp x24508 = x24505 + x24507;
        Fp x24509 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x24510 = x24509 * x32;
        Fp x24511 = x24508 + x24510;
        Fp x24512 = x24418 - x24511;
        Fp x24513 = x24512 * x33;
        args[2][108 * steps + cycle] = x24513;
        Fp x24514 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x24515 = x24419 + x24514;
        {
          Fp x24516 = Fp(x24515.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x24516;
          Fp x24517 = x24515 - x24516;
          Fp x24518 = x24517 * x26;
          Fp x24519 = Fp(x24518.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x24519;
          Fp x24520 = x24518 - x24519;
          Fp x24521 = x24520 * x26;
          Fp x24522 = Fp(x24521.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x24522;
          Fp x24523 = x24521 - x24522;
          Fp x24524 = x24523 * x26;
          Fp x24525 = Fp(x24524.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x24525;
          Fp x24526 = x24524 - x24525;
          Fp x24527 = x24526 * x26;
          Fp x24528 = Fp(x24527.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x24528;
          Fp x24529 = x24527 - x24528;
          Fp x24530 = x24529 * x26;
          Fp x24531 = Fp(x24530.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x24531;
          Fp x24532 = x24530 - x24531;
          Fp x24533 = x24532 * x26;
          Fp x24534 = Fp(x24533.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x24534;
          Fp x24535 = x24533 - x24534;
          Fp x24536 = x24535 * x26;
          Fp x24537 = Fp(x24536.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x24537;
          Fp x24538 = x24536 - x24537;
          Fp x24539 = x24538 * x26;
          Fp x24540 = Fp(x24539.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x24540;
          Fp x24541 = x24539 - x24540;
          Fp x24542 = x24541 * x26;
          Fp x24543 = Fp(x24542.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x24543;
          Fp x24544 = x24542 - x24543;
          Fp x24545 = x24544 * x26;
          Fp x24546 = Fp(x24545.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x24546;
          Fp x24547 = x24545 - x24546;
          Fp x24548 = x24547 * x26;
          Fp x24549 = Fp(x24548.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x24549;
          Fp x24550 = x24548 - x24549;
          Fp x24551 = x24550 * x26;
          Fp x24552 = Fp(x24551.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x24552;
          Fp x24553 = x24551 - x24552;
          Fp x24554 = x24553 * x26;
          Fp x24555 = Fp(x24554.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x24555;
          Fp x24556 = x24554 - x24555;
          Fp x24557 = x24556 * x26;
          Fp x24558 = Fp(x24557.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x24558;
          Fp x24559 = x24557 - x24558;
          Fp x24560 = x24559 * x26;
          Fp x24561 = Fp(x24560.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x24561;
        }
        Fp x24562 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x24563 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x24564 = x24563 * x1;
        Fp x24565 = x24562 + x24564;
        Fp x24566 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x24567 = x24566 * x3;
        Fp x24568 = x24565 + x24567;
        Fp x24569 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x24570 = x24569 * x6;
        Fp x24571 = x24568 + x24570;
        Fp x24572 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x24573 = x24572 * x11;
        Fp x24574 = x24571 + x24573;
        Fp x24575 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x24576 = x24575 * x27;
        Fp x24577 = x24574 + x24576;
        Fp x24578 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x24579 = x24578 * x12;
        Fp x24580 = x24577 + x24579;
        Fp x24581 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x24582 = x24581 * x28;
        Fp x24583 = x24580 + x24582;
        Fp x24584 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x24585 = x24584 * x13;
        Fp x24586 = x24583 + x24585;
        Fp x24587 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x24588 = x24587 * x29;
        Fp x24589 = x24586 + x24588;
        Fp x24590 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x24591 = x24590 * x14;
        Fp x24592 = x24589 + x24591;
        Fp x24593 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x24594 = x24593 * x30;
        Fp x24595 = x24592 + x24594;
        Fp x24596 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x24597 = x24596 * x15;
        Fp x24598 = x24595 + x24597;
        Fp x24599 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x24600 = x24599 * x31;
        Fp x24601 = x24598 + x24600;
        Fp x24602 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x24603 = x24602 * x16;
        Fp x24604 = x24601 + x24603;
        Fp x24605 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x24606 = x24605 * x32;
        Fp x24607 = x24604 + x24606;
        Fp x24608 = x24515 - x24607;
        Fp x24609 = x24608 * x33;
        args[2][109 * steps + cycle] = x24609;
        {
          {
            Fp x24610 = (x24511 == 0) ? Fp(1) : Fp(0);
            Fp x24611 = x71 - x24610;
            args[2][114 * steps + cycle] = x24611;
            Fp x24612 = inv(x24511);
            args[2][115 * steps + cycle] = x24612;
          }
          Fp x24613 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x24614 = x24511 * x24613;
          Fp x24615 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x24616 = x24614 - x24615;
          if (x24616 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x24617 = x71 - x24615;
          Fp x24618 = x24617 * x24511;
          if (x24618 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x24619 = (x24607 == 0) ? Fp(1) : Fp(0);
            Fp x24620 = x71 - x24619;
            args[2][116 * steps + cycle] = x24620;
            Fp x24621 = inv(x24607);
            args[2][117 * steps + cycle] = x24621;
          }
          Fp x24622 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x24623 = x24607 * x24622;
          Fp x24624 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x24625 = x24623 - x24624;
          if (x24625 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x24626 = x71 - x24624;
          Fp x24627 = x24626 * x24607;
          if (x24627 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x24628 = x24617 * x24626;
          Fp x24629 = x71 - x24628;
          args[2][111 * steps + cycle] = x24629;
          Fp x24630 = x71 - x24354;
          Fp x24631 = x24106 * x24630;
          Fp x24632 = x71 - x24605;
          Fp x24633 = x24631 * x24632;
          Fp x24634 = x71 - x24106;
          Fp x24635 = x24634 * x24354;
          Fp x24636 = x24635 * x24605;
          Fp x24637 = x24633 + x24636;
          args[2][112 * steps + cycle] = x24637;
          Fp x24638 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x24639 = x24638 + x24605;
          Fp x24640 = x24638 * x1;
          Fp x24641 = x24640 * x24605;
          Fp x24642 = x24639 - x24641;
          args[2][113 * steps + cycle] = x24642;
        }
        args[2][100 * steps + cycle] = x24511;
        args[2][101 * steps + cycle] = x24607;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x24643 = x20322 + x3;
        args[2][104 * steps + cycle] = x24643;
        args[2][105 * steps + cycle] = x20344;
        Fp x24644 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x24645 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x24646 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x24647 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x24648 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x24649 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x20344;
        host_args[2] = x20322;
        host_args[3] = x24108;
        host_args[4] = x24012;
        host_args[5] = x24356;
        host_args[6] = x24262;
        host_args[7] = x24607;
        host_args[8] = x24511;
        host_args[9] = x24644;
        host_args[10] = x24645;
        host_args[11] = x24646;
        host_args[12] = x24647;
        host_args[13] = x24648;
        host_args[14] = x24649;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x24650 = args[2][79 * steps + ((cycle - 1) & mask)];
      if (x24650 != 0) {
        Fp x24651 = x20297 + x20299;
        Fp x24652 = x20298 + x20300;
        {
          Fp x24653 = Fp(x24651.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x24653;
          Fp x24654 = x24651 - x24653;
          Fp x24655 = x24654 * x26;
          Fp x24656 = Fp(x24655.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x24656;
          Fp x24657 = x24655 - x24656;
          Fp x24658 = x24657 * x26;
          Fp x24659 = Fp(x24658.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x24659;
          Fp x24660 = x24658 - x24659;
          Fp x24661 = x24660 * x26;
          Fp x24662 = Fp(x24661.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x24662;
          Fp x24663 = x24661 - x24662;
          Fp x24664 = x24663 * x26;
          Fp x24665 = Fp(x24664.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x24665;
          Fp x24666 = x24664 - x24665;
          Fp x24667 = x24666 * x26;
          Fp x24668 = Fp(x24667.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x24668;
          Fp x24669 = x24667 - x24668;
          Fp x24670 = x24669 * x26;
          Fp x24671 = Fp(x24670.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x24671;
          Fp x24672 = x24670 - x24671;
          Fp x24673 = x24672 * x26;
          Fp x24674 = Fp(x24673.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x24674;
          Fp x24675 = x24673 - x24674;
          Fp x24676 = x24675 * x26;
          Fp x24677 = Fp(x24676.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x24677;
          Fp x24678 = x24676 - x24677;
          Fp x24679 = x24678 * x26;
          Fp x24680 = Fp(x24679.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x24680;
          Fp x24681 = x24679 - x24680;
          Fp x24682 = x24681 * x26;
          Fp x24683 = Fp(x24682.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x24683;
          Fp x24684 = x24682 - x24683;
          Fp x24685 = x24684 * x26;
          Fp x24686 = Fp(x24685.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x24686;
          Fp x24687 = x24685 - x24686;
          Fp x24688 = x24687 * x26;
          Fp x24689 = Fp(x24688.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x24689;
          Fp x24690 = x24688 - x24689;
          Fp x24691 = x24690 * x26;
          Fp x24692 = Fp(x24691.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x24692;
          Fp x24693 = x24691 - x24692;
          Fp x24694 = x24693 * x26;
          Fp x24695 = Fp(x24694.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x24695;
          Fp x24696 = x24694 - x24695;
          Fp x24697 = x24696 * x26;
          Fp x24698 = Fp(x24697.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x24698;
        }
        Fp x24699 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x24700 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x24701 = x24700 * x1;
        Fp x24702 = x24699 + x24701;
        Fp x24703 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x24704 = x24703 * x3;
        Fp x24705 = x24702 + x24704;
        Fp x24706 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x24707 = x24706 * x6;
        Fp x24708 = x24705 + x24707;
        Fp x24709 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x24710 = x24709 * x11;
        Fp x24711 = x24708 + x24710;
        Fp x24712 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x24713 = x24712 * x27;
        Fp x24714 = x24711 + x24713;
        Fp x24715 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x24716 = x24715 * x12;
        Fp x24717 = x24714 + x24716;
        Fp x24718 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x24719 = x24718 * x28;
        Fp x24720 = x24717 + x24719;
        Fp x24721 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x24722 = x24721 * x13;
        Fp x24723 = x24720 + x24722;
        Fp x24724 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x24725 = x24724 * x29;
        Fp x24726 = x24723 + x24725;
        Fp x24727 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x24728 = x24727 * x14;
        Fp x24729 = x24726 + x24728;
        Fp x24730 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x24731 = x24730 * x30;
        Fp x24732 = x24729 + x24731;
        Fp x24733 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x24734 = x24733 * x15;
        Fp x24735 = x24732 + x24734;
        Fp x24736 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x24737 = x24736 * x31;
        Fp x24738 = x24735 + x24737;
        Fp x24739 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x24740 = x24739 * x16;
        Fp x24741 = x24738 + x24740;
        Fp x24742 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x24743 = x24742 * x32;
        Fp x24744 = x24741 + x24743;
        Fp x24745 = x24651 - x24744;
        Fp x24746 = x24745 * x33;
        args[2][106 * steps + cycle] = x24746;
        Fp x24747 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x24748 = x24652 + x24747;
        {
          Fp x24749 = Fp(x24748.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x24749;
          Fp x24750 = x24748 - x24749;
          Fp x24751 = x24750 * x26;
          Fp x24752 = Fp(x24751.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x24752;
          Fp x24753 = x24751 - x24752;
          Fp x24754 = x24753 * x26;
          Fp x24755 = Fp(x24754.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x24755;
          Fp x24756 = x24754 - x24755;
          Fp x24757 = x24756 * x26;
          Fp x24758 = Fp(x24757.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x24758;
          Fp x24759 = x24757 - x24758;
          Fp x24760 = x24759 * x26;
          Fp x24761 = Fp(x24760.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x24761;
          Fp x24762 = x24760 - x24761;
          Fp x24763 = x24762 * x26;
          Fp x24764 = Fp(x24763.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x24764;
          Fp x24765 = x24763 - x24764;
          Fp x24766 = x24765 * x26;
          Fp x24767 = Fp(x24766.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x24767;
          Fp x24768 = x24766 - x24767;
          Fp x24769 = x24768 * x26;
          Fp x24770 = Fp(x24769.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x24770;
          Fp x24771 = x24769 - x24770;
          Fp x24772 = x24771 * x26;
          Fp x24773 = Fp(x24772.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x24773;
          Fp x24774 = x24772 - x24773;
          Fp x24775 = x24774 * x26;
          Fp x24776 = Fp(x24775.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x24776;
          Fp x24777 = x24775 - x24776;
          Fp x24778 = x24777 * x26;
          Fp x24779 = Fp(x24778.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x24779;
          Fp x24780 = x24778 - x24779;
          Fp x24781 = x24780 * x26;
          Fp x24782 = Fp(x24781.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x24782;
          Fp x24783 = x24781 - x24782;
          Fp x24784 = x24783 * x26;
          Fp x24785 = Fp(x24784.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x24785;
          Fp x24786 = x24784 - x24785;
          Fp x24787 = x24786 * x26;
          Fp x24788 = Fp(x24787.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x24788;
          Fp x24789 = x24787 - x24788;
          Fp x24790 = x24789 * x26;
          Fp x24791 = Fp(x24790.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x24791;
          Fp x24792 = x24790 - x24791;
          Fp x24793 = x24792 * x26;
          Fp x24794 = Fp(x24793.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x24794;
        }
        Fp x24795 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x24796 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x24797 = x24796 * x1;
        Fp x24798 = x24795 + x24797;
        Fp x24799 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x24800 = x24799 * x3;
        Fp x24801 = x24798 + x24800;
        Fp x24802 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x24803 = x24802 * x6;
        Fp x24804 = x24801 + x24803;
        Fp x24805 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x24806 = x24805 * x11;
        Fp x24807 = x24804 + x24806;
        Fp x24808 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x24809 = x24808 * x27;
        Fp x24810 = x24807 + x24809;
        Fp x24811 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x24812 = x24811 * x12;
        Fp x24813 = x24810 + x24812;
        Fp x24814 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x24815 = x24814 * x28;
        Fp x24816 = x24813 + x24815;
        Fp x24817 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x24818 = x24817 * x13;
        Fp x24819 = x24816 + x24818;
        Fp x24820 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x24821 = x24820 * x29;
        Fp x24822 = x24819 + x24821;
        Fp x24823 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x24824 = x24823 * x14;
        Fp x24825 = x24822 + x24824;
        Fp x24826 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x24827 = x24826 * x30;
        Fp x24828 = x24825 + x24827;
        Fp x24829 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x24830 = x24829 * x15;
        Fp x24831 = x24828 + x24830;
        Fp x24832 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x24833 = x24832 * x31;
        Fp x24834 = x24831 + x24833;
        Fp x24835 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x24836 = x24835 * x16;
        Fp x24837 = x24834 + x24836;
        Fp x24838 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x24839 = x24838 * x32;
        Fp x24840 = x24837 + x24839;
        Fp x24841 = x24748 - x24840;
        Fp x24842 = x24841 * x33;
        args[2][107 * steps + cycle] = x24842;
        Fp x24843 = x24706 * x1;
        Fp x24844 = x24703 + x24843;
        Fp x24845 = x24709 * x3;
        Fp x24846 = x24844 + x24845;
        Fp x24847 = x24712 * x6;
        Fp x24848 = x24846 + x24847;
        Fp x24849 = x24715 * x11;
        Fp x24850 = x24848 + x24849;
        Fp x24851 = x24718 * x27;
        Fp x24852 = x24850 + x24851;
        Fp x24853 = x24721 * x12;
        Fp x24854 = x24852 + x24853;
        Fp x24855 = x24724 * x28;
        Fp x24856 = x24854 + x24855;
        Fp x24857 = x24727 * x13;
        Fp x24858 = x24856 + x24857;
        Fp x24859 = x24730 * x29;
        Fp x24860 = x24858 + x24859;
        Fp x24861 = x24733 * x14;
        Fp x24862 = x24860 + x24861;
        Fp x24863 = x24736 * x30;
        Fp x24864 = x24862 + x24863;
        Fp x24865 = x24739 * x15;
        Fp x24866 = x24864 + x24865;
        Fp x24867 = x24742 * x31;
        Fp x24868 = x24866 + x24867;
        Fp x24869 = x24795 * x16;
        Fp x24870 = x24868 + x24869;
        Fp x24871 = x24796 * x32;
        Fp x24872 = x24870 + x24871;
        Fp x24873 = x24799 * x17;
        Fp x24874 = x24872 + x24873;
        Fp x24875 = x24802 * x57;
        Fp x24876 = x24874 + x24875;
        Fp x24877 = x24805 * x18;
        Fp x24878 = x24876 + x24877;
        Fp x24879 = x24808 * x58;
        Fp x24880 = x24878 + x24879;
        Fp x24881 = x24811 * x19;
        Fp x24882 = x24880 + x24881;
        Fp x24883 = x24814 * x59;
        Fp x24884 = x24882 + x24883;
        Fp x24885 = x24817 * x20;
        Fp x24886 = x24884 + x24885;
        Fp x24887 = x24820 * x60;
        Fp x24888 = x24886 + x24887;
        args[2][128 * steps + cycle] = x24888;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x24888;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x24889 = host_outs[0];
          Fp x24890 = host_outs[1];
          args[2][129 * steps + cycle] = x24889;
          args[2][130 * steps + cycle] = x24890;
        }
        Fp x24891 = x24826 * x1;
        Fp x24892 = x24823 + x24891;
        Fp x24893 = x24829 * x3;
        Fp x24894 = x24892 + x24893;
        Fp x24895 = x24832 * x6;
        Fp x24896 = x24894 + x24895;
        Fp x24897 = x24835 * x11;
        Fp x24898 = x24896 + x24897;
        Fp x24899 = x24838 * x27;
        Fp x24900 = x24898 + x24899;
        if (x24900 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:64");
        Fp x24901 = args[2][129 * steps + ((cycle - 0) & mask)];
        Fp x24902 = args[2][130 * steps + ((cycle - 0) & mask)];
        {
          Fp x24903 = Fp(x24901.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x24903;
          Fp x24904 = x24901 - x24903;
          Fp x24905 = x24904 * x26;
          Fp x24906 = Fp(x24905.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x24906;
          Fp x24907 = x24905 - x24906;
          Fp x24908 = x24907 * x26;
          Fp x24909 = Fp(x24908.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x24909;
          Fp x24910 = x24908 - x24909;
          Fp x24911 = x24910 * x26;
          Fp x24912 = Fp(x24911.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x24912;
          Fp x24913 = x24911 - x24912;
          Fp x24914 = x24913 * x26;
          Fp x24915 = Fp(x24914.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x24915;
          Fp x24916 = x24914 - x24915;
          Fp x24917 = x24916 * x26;
          Fp x24918 = Fp(x24917.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x24918;
          Fp x24919 = x24917 - x24918;
          Fp x24920 = x24919 * x26;
          Fp x24921 = Fp(x24920.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x24921;
          Fp x24922 = x24920 - x24921;
          Fp x24923 = x24922 * x26;
          Fp x24924 = Fp(x24923.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x24924;
          Fp x24925 = x24923 - x24924;
          Fp x24926 = x24925 * x26;
          Fp x24927 = Fp(x24926.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x24927;
          Fp x24928 = x24926 - x24927;
          Fp x24929 = x24928 * x26;
          Fp x24930 = Fp(x24929.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x24930;
          Fp x24931 = x24929 - x24930;
          Fp x24932 = x24931 * x26;
          Fp x24933 = Fp(x24932.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x24933;
          Fp x24934 = x24932 - x24933;
          Fp x24935 = x24934 * x26;
          Fp x24936 = Fp(x24935.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x24936;
          Fp x24937 = x24935 - x24936;
          Fp x24938 = x24937 * x26;
          Fp x24939 = Fp(x24938.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x24939;
          Fp x24940 = x24938 - x24939;
          Fp x24941 = x24940 * x26;
          Fp x24942 = Fp(x24941.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x24942;
          Fp x24943 = x24941 - x24942;
          Fp x24944 = x24943 * x26;
          Fp x24945 = Fp(x24944.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x24945;
          Fp x24946 = x24944 - x24945;
          Fp x24947 = x24946 * x26;
          Fp x24948 = Fp(x24947.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x24948;
        }
        Fp x24949 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x24950 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x24951 = x24950 * x1;
        Fp x24952 = x24949 + x24951;
        Fp x24953 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x24954 = x24953 * x3;
        Fp x24955 = x24952 + x24954;
        Fp x24956 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x24957 = x24956 * x6;
        Fp x24958 = x24955 + x24957;
        Fp x24959 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x24960 = x24959 * x11;
        Fp x24961 = x24958 + x24960;
        Fp x24962 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x24963 = x24962 * x27;
        Fp x24964 = x24961 + x24963;
        Fp x24965 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x24966 = x24965 * x12;
        Fp x24967 = x24964 + x24966;
        Fp x24968 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x24969 = x24968 * x28;
        Fp x24970 = x24967 + x24969;
        Fp x24971 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x24972 = x24971 * x13;
        Fp x24973 = x24970 + x24972;
        Fp x24974 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x24975 = x24974 * x29;
        Fp x24976 = x24973 + x24975;
        Fp x24977 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x24978 = x24977 * x14;
        Fp x24979 = x24976 + x24978;
        Fp x24980 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x24981 = x24980 * x30;
        Fp x24982 = x24979 + x24981;
        Fp x24983 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x24984 = x24983 * x15;
        Fp x24985 = x24982 + x24984;
        Fp x24986 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x24987 = x24986 * x31;
        Fp x24988 = x24985 + x24987;
        Fp x24989 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x24990 = x24989 * x16;
        Fp x24991 = x24988 + x24990;
        Fp x24992 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x24993 = x24992 * x32;
        Fp x24994 = x24991 + x24993;
        Fp x24995 = x24901 - x24994;
        Fp x24996 = x24995 * x33;
        if (x24996 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:64");
        {
          Fp x24997 = Fp(x24902.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x24997;
          Fp x24998 = x24902 - x24997;
          Fp x24999 = x24998 * x26;
          Fp x25000 = Fp(x24999.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x25000;
          Fp x25001 = x24999 - x25000;
          Fp x25002 = x25001 * x26;
          Fp x25003 = Fp(x25002.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x25003;
          Fp x25004 = x25002 - x25003;
          Fp x25005 = x25004 * x26;
          Fp x25006 = Fp(x25005.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x25006;
          Fp x25007 = x25005 - x25006;
          Fp x25008 = x25007 * x26;
          Fp x25009 = Fp(x25008.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x25009;
          Fp x25010 = x25008 - x25009;
          Fp x25011 = x25010 * x26;
          Fp x25012 = Fp(x25011.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x25012;
          Fp x25013 = x25011 - x25012;
          Fp x25014 = x25013 * x26;
          Fp x25015 = Fp(x25014.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x25015;
          Fp x25016 = x25014 - x25015;
          Fp x25017 = x25016 * x26;
          Fp x25018 = Fp(x25017.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x25018;
          Fp x25019 = x25017 - x25018;
          Fp x25020 = x25019 * x26;
          Fp x25021 = Fp(x25020.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x25021;
          Fp x25022 = x25020 - x25021;
          Fp x25023 = x25022 * x26;
          Fp x25024 = Fp(x25023.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x25024;
          Fp x25025 = x25023 - x25024;
          Fp x25026 = x25025 * x26;
          Fp x25027 = Fp(x25026.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x25027;
          Fp x25028 = x25026 - x25027;
          Fp x25029 = x25028 * x26;
          Fp x25030 = Fp(x25029.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x25030;
          Fp x25031 = x25029 - x25030;
          Fp x25032 = x25031 * x26;
          Fp x25033 = Fp(x25032.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x25033;
          Fp x25034 = x25032 - x25033;
          Fp x25035 = x25034 * x26;
          Fp x25036 = Fp(x25035.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x25036;
          Fp x25037 = x25035 - x25036;
          Fp x25038 = x25037 * x26;
          Fp x25039 = Fp(x25038.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x25039;
          Fp x25040 = x25038 - x25039;
          Fp x25041 = x25040 * x26;
          Fp x25042 = Fp(x25041.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x25042;
        }
        Fp x25043 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x25044 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x25045 = x25044 * x1;
        Fp x25046 = x25043 + x25045;
        Fp x25047 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x25048 = x25047 * x3;
        Fp x25049 = x25046 + x25048;
        Fp x25050 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x25051 = x25050 * x6;
        Fp x25052 = x25049 + x25051;
        Fp x25053 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x25054 = x25053 * x11;
        Fp x25055 = x25052 + x25054;
        Fp x25056 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x25057 = x25056 * x27;
        Fp x25058 = x25055 + x25057;
        Fp x25059 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x25060 = x25059 * x12;
        Fp x25061 = x25058 + x25060;
        Fp x25062 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x25063 = x25062 * x28;
        Fp x25064 = x25061 + x25063;
        Fp x25065 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x25066 = x25065 * x13;
        Fp x25067 = x25064 + x25066;
        Fp x25068 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x25069 = x25068 * x29;
        Fp x25070 = x25067 + x25069;
        Fp x25071 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x25072 = x25071 * x14;
        Fp x25073 = x25070 + x25072;
        Fp x25074 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x25075 = x25074 * x30;
        Fp x25076 = x25073 + x25075;
        Fp x25077 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x25078 = x25077 * x15;
        Fp x25079 = x25076 + x25078;
        Fp x25080 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x25081 = x25080 * x31;
        Fp x25082 = x25079 + x25081;
        Fp x25083 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x25084 = x25083 * x16;
        Fp x25085 = x25082 + x25084;
        Fp x25086 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x25087 = x25086 * x32;
        Fp x25088 = x25085 + x25087;
        Fp x25089 = x24902 - x25088;
        Fp x25090 = x25089 * x33;
        if (x25090 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:64");
        {
          Fp x25091 = (x24702 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x25091;
          Fp x25092 = x24702 - x71;
          Fp x25093 = (x25092 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x25093;
          Fp x25094 = x24702 - x1;
          Fp x25095 = (x25094 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x25095;
          Fp x25096 = x24702 - x2;
          Fp x25097 = (x25096 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x25097;
        }
        Fp x25098 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x25099 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x25100 = x25099 * x1;
        Fp x25101 = x25098 + x25100;
        Fp x25102 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x25103 = x25102 * x2;
        Fp x25104 = x25101 + x25103;
        Fp x25105 = x25104 - x24702;
        if (x25105 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        if (x24699 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.cpp:64");
        Fp x25106 = x71 - x24700;
        Fp x25107 = x25106 * x24994;
        Fp x25108 = x24700 * x25088;
        Fp x25109 = x25107 + x25108;
        Fp x25110 = x25106 * x24992;
        Fp x25111 = x24700 * x25086;
        Fp x25112 = x25110 + x25111;
        Fp x25113 = x25112 * x35;
        {
          Fp x25114 = Fp(x25109.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x25114;
          Fp x25115 = x25109 - x25114;
          Fp x25116 = x25115 * x26;
          Fp x25117 = Fp(x25116.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x25117;
          Fp x25118 = x25116 - x25117;
          Fp x25119 = x25118 * x26;
          Fp x25120 = Fp(x25119.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x25120;
          Fp x25121 = x25119 - x25120;
          Fp x25122 = x25121 * x26;
          Fp x25123 = Fp(x25122.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x25123;
          Fp x25124 = x25122 - x25123;
          Fp x25125 = x25124 * x26;
          Fp x25126 = Fp(x25125.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x25126;
          Fp x25127 = x25125 - x25126;
          Fp x25128 = x25127 * x26;
          Fp x25129 = Fp(x25128.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x25129;
          Fp x25130 = x25128 - x25129;
          Fp x25131 = x25130 * x26;
          Fp x25132 = Fp(x25131.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x25132;
          Fp x25133 = x25131 - x25132;
          Fp x25134 = x25133 * x26;
          Fp x25135 = Fp(x25134.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x25135;
          Fp x25136 = x25134 - x25135;
          Fp x25137 = x25136 * x26;
          Fp x25138 = Fp(x25137.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x25138;
          Fp x25139 = x25137 - x25138;
          Fp x25140 = x25139 * x26;
          Fp x25141 = Fp(x25140.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x25141;
          Fp x25142 = x25140 - x25141;
          Fp x25143 = x25142 * x26;
          Fp x25144 = Fp(x25143.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x25144;
          Fp x25145 = x25143 - x25144;
          Fp x25146 = x25145 * x26;
          Fp x25147 = Fp(x25146.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x25147;
          Fp x25148 = x25146 - x25147;
          Fp x25149 = x25148 * x26;
          Fp x25150 = Fp(x25149.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x25150;
          Fp x25151 = x25149 - x25150;
          Fp x25152 = x25151 * x26;
          Fp x25153 = Fp(x25152.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x25153;
          Fp x25154 = x25152 - x25153;
          Fp x25155 = x25154 * x26;
          Fp x25156 = Fp(x25155.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x25156;
          Fp x25157 = x25155 - x25156;
          Fp x25158 = x25157 * x26;
          Fp x25159 = Fp(x25158.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x25159;
        }
        Fp x25160 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x25161 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x25162 = x25161 * x1;
        Fp x25163 = x25160 + x25162;
        Fp x25164 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x25165 = x25164 * x3;
        Fp x25166 = x25163 + x25165;
        Fp x25167 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x25168 = x25167 * x6;
        Fp x25169 = x25166 + x25168;
        Fp x25170 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x25171 = x25170 * x11;
        Fp x25172 = x25169 + x25171;
        Fp x25173 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x25174 = x25173 * x27;
        Fp x25175 = x25172 + x25174;
        Fp x25176 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x25177 = x25176 * x12;
        Fp x25178 = x25175 + x25177;
        Fp x25179 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x25180 = x25179 * x28;
        Fp x25181 = x25178 + x25180;
        Fp x25182 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x25183 = x25182 * x13;
        Fp x25184 = x25181 + x25183;
        Fp x25185 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x25186 = x25185 * x29;
        Fp x25187 = x25184 + x25186;
        Fp x25188 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x25189 = x25188 * x14;
        Fp x25190 = x25187 + x25189;
        Fp x25191 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x25192 = x25191 * x30;
        Fp x25193 = x25190 + x25192;
        Fp x25194 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x25195 = x25194 * x15;
        Fp x25196 = x25193 + x25195;
        Fp x25197 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x25198 = x25197 * x31;
        Fp x25199 = x25196 + x25198;
        Fp x25200 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x25201 = x25200 * x16;
        Fp x25202 = x25199 + x25201;
        Fp x25203 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x25204 = x25203 * x32;
        Fp x25205 = x25202 + x25204;
        Fp x25206 = x25109 - x25205;
        Fp x25207 = x25206 * x33;
        args[2][108 * steps + cycle] = x25207;
        Fp x25208 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x25209 = x25113 + x25208;
        {
          Fp x25210 = Fp(x25209.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x25210;
          Fp x25211 = x25209 - x25210;
          Fp x25212 = x25211 * x26;
          Fp x25213 = Fp(x25212.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x25213;
          Fp x25214 = x25212 - x25213;
          Fp x25215 = x25214 * x26;
          Fp x25216 = Fp(x25215.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x25216;
          Fp x25217 = x25215 - x25216;
          Fp x25218 = x25217 * x26;
          Fp x25219 = Fp(x25218.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x25219;
          Fp x25220 = x25218 - x25219;
          Fp x25221 = x25220 * x26;
          Fp x25222 = Fp(x25221.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x25222;
          Fp x25223 = x25221 - x25222;
          Fp x25224 = x25223 * x26;
          Fp x25225 = Fp(x25224.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x25225;
          Fp x25226 = x25224 - x25225;
          Fp x25227 = x25226 * x26;
          Fp x25228 = Fp(x25227.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x25228;
          Fp x25229 = x25227 - x25228;
          Fp x25230 = x25229 * x26;
          Fp x25231 = Fp(x25230.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x25231;
          Fp x25232 = x25230 - x25231;
          Fp x25233 = x25232 * x26;
          Fp x25234 = Fp(x25233.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x25234;
          Fp x25235 = x25233 - x25234;
          Fp x25236 = x25235 * x26;
          Fp x25237 = Fp(x25236.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x25237;
          Fp x25238 = x25236 - x25237;
          Fp x25239 = x25238 * x26;
          Fp x25240 = Fp(x25239.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x25240;
          Fp x25241 = x25239 - x25240;
          Fp x25242 = x25241 * x26;
          Fp x25243 = Fp(x25242.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x25243;
          Fp x25244 = x25242 - x25243;
          Fp x25245 = x25244 * x26;
          Fp x25246 = Fp(x25245.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x25246;
          Fp x25247 = x25245 - x25246;
          Fp x25248 = x25247 * x26;
          Fp x25249 = Fp(x25248.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x25249;
          Fp x25250 = x25248 - x25249;
          Fp x25251 = x25250 * x26;
          Fp x25252 = Fp(x25251.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x25252;
          Fp x25253 = x25251 - x25252;
          Fp x25254 = x25253 * x26;
          Fp x25255 = Fp(x25254.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x25255;
        }
        Fp x25256 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x25257 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x25258 = x25257 * x1;
        Fp x25259 = x25256 + x25258;
        Fp x25260 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x25261 = x25260 * x3;
        Fp x25262 = x25259 + x25261;
        Fp x25263 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x25264 = x25263 * x6;
        Fp x25265 = x25262 + x25264;
        Fp x25266 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x25267 = x25266 * x11;
        Fp x25268 = x25265 + x25267;
        Fp x25269 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x25270 = x25269 * x27;
        Fp x25271 = x25268 + x25270;
        Fp x25272 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x25273 = x25272 * x12;
        Fp x25274 = x25271 + x25273;
        Fp x25275 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x25276 = x25275 * x28;
        Fp x25277 = x25274 + x25276;
        Fp x25278 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x25279 = x25278 * x13;
        Fp x25280 = x25277 + x25279;
        Fp x25281 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x25282 = x25281 * x29;
        Fp x25283 = x25280 + x25282;
        Fp x25284 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x25285 = x25284 * x14;
        Fp x25286 = x25283 + x25285;
        Fp x25287 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x25288 = x25287 * x30;
        Fp x25289 = x25286 + x25288;
        Fp x25290 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x25291 = x25290 * x15;
        Fp x25292 = x25289 + x25291;
        Fp x25293 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x25294 = x25293 * x31;
        Fp x25295 = x25292 + x25294;
        Fp x25296 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x25297 = x25296 * x16;
        Fp x25298 = x25295 + x25297;
        Fp x25299 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x25300 = x25299 * x32;
        Fp x25301 = x25298 + x25300;
        Fp x25302 = x25209 - x25301;
        Fp x25303 = x25302 * x33;
        args[2][109 * steps + cycle] = x25303;
        {
          {
            Fp x25304 = (x25205 == 0) ? Fp(1) : Fp(0);
            Fp x25305 = x71 - x25304;
            args[2][114 * steps + cycle] = x25305;
            Fp x25306 = inv(x25205);
            args[2][115 * steps + cycle] = x25306;
          }
          Fp x25307 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x25308 = x25205 * x25307;
          Fp x25309 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x25310 = x25308 - x25309;
          if (x25310 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x25311 = x71 - x25309;
          Fp x25312 = x25311 * x25205;
          if (x25312 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x25313 = (x25301 == 0) ? Fp(1) : Fp(0);
            Fp x25314 = x71 - x25313;
            args[2][116 * steps + cycle] = x25314;
            Fp x25315 = inv(x25301);
            args[2][117 * steps + cycle] = x25315;
          }
          Fp x25316 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x25317 = x25301 * x25316;
          Fp x25318 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x25319 = x25317 - x25318;
          if (x25319 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x25320 = x71 - x25318;
          Fp x25321 = x25320 * x25301;
          if (x25321 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x25322 = x25311 * x25320;
          Fp x25323 = x71 - x25322;
          args[2][111 * steps + cycle] = x25323;
          Fp x25324 = x71 - x25086;
          Fp x25325 = x24838 * x25324;
          Fp x25326 = x71 - x25299;
          Fp x25327 = x25325 * x25326;
          Fp x25328 = x71 - x24838;
          Fp x25329 = x25328 * x25086;
          Fp x25330 = x25329 * x25299;
          Fp x25331 = x25327 + x25330;
          args[2][112 * steps + cycle] = x25331;
          Fp x25332 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x25333 = x25332 + x25299;
          Fp x25334 = x25332 * x1;
          Fp x25335 = x25334 * x25299;
          Fp x25336 = x25333 - x25335;
          args[2][113 * steps + cycle] = x25336;
        }
        args[2][100 * steps + cycle] = x25205;
        args[2][101 * steps + cycle] = x25301;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x25337 = x20322 + x3;
        args[2][104 * steps + cycle] = x25337;
        args[2][105 * steps + cycle] = x20344;
        Fp x25338 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x25339 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x25340 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x25341 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x25342 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x25343 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x20344;
        host_args[2] = x20322;
        host_args[3] = x24840;
        host_args[4] = x24744;
        host_args[5] = x25088;
        host_args[6] = x24994;
        host_args[7] = x25301;
        host_args[8] = x25205;
        host_args[9] = x25338;
        host_args[10] = x25339;
        host_args[11] = x25340;
        host_args[12] = x25341;
        host_args[13] = x25342;
        host_args[14] = x25343;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x25344 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x25345 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x25346 = x25345 * x1;
      Fp x25347 = x25344 + x25346;
      Fp x25348 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x25349 = x25348 * x3;
      Fp x25350 = x25347 + x25349;
      Fp x25351 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x25352 = x25351 * x6;
      Fp x25353 = x25350 + x25352;
      Fp x25354 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x25355 = x25354 * x11;
      Fp x25356 = x25353 + x25355;
      Fp x25357 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x25358 = x25357 * x27;
      Fp x25359 = x25356 + x25358;
      Fp x25360 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x25361 = x25360 * x12;
      Fp x25362 = x25359 + x25361;
      Fp x25363 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x25364 = x25363 * x28;
      Fp x25365 = x25362 + x25364;
      Fp x25366 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x25367 = x25366 * x13;
      Fp x25368 = x25365 + x25367;
      Fp x25369 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x25370 = x25369 * x29;
      Fp x25371 = x25368 + x25370;
      Fp x25372 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x25373 = x25372 * x14;
      Fp x25374 = x25371 + x25373;
      Fp x25375 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x25376 = x25375 * x30;
      Fp x25377 = x25374 + x25376;
      Fp x25378 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x25379 = x25378 * x15;
      Fp x25380 = x25377 + x25379;
      Fp x25381 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x25382 = x25381 * x31;
      Fp x25383 = x25380 + x25382;
      Fp x25384 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x25385 = x25384 * x16;
      Fp x25386 = x25383 + x25385;
      Fp x25387 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x25388 = x25387 * x32;
      Fp x25389 = x25386 + x25388;
      {
        Fp x25390 = (x25389 == 0) ? Fp(1) : Fp(0);
        Fp x25391 = x71 - x25390;
        args[2][114 * steps + cycle] = x25391;
        Fp x25392 = inv(x25389);
        args[2][115 * steps + cycle] = x25392;
      }
      Fp x25393 = args[2][115 * steps + ((cycle - 0) & mask)];
      Fp x25394 = x25389 * x25393;
      Fp x25395 = args[2][114 * steps + ((cycle - 0) & mask)];
      Fp x25396 = x25394 - x25395;
      if (x25396 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
      Fp x25397 = x71 - x25395;
      Fp x25398 = x25397 * x25389;
      if (x25398 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
      Fp x25399 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x25400 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x25401 = x25400 * x1;
      Fp x25402 = x25399 + x25401;
      Fp x25403 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x25404 = x25403 * x3;
      Fp x25405 = x25402 + x25404;
      Fp x25406 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x25407 = x25406 * x6;
      Fp x25408 = x25405 + x25407;
      Fp x25409 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x25410 = x25409 * x11;
      Fp x25411 = x25408 + x25410;
      Fp x25412 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x25413 = x25412 * x27;
      Fp x25414 = x25411 + x25413;
      Fp x25415 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x25416 = x25415 * x12;
      Fp x25417 = x25414 + x25416;
      Fp x25418 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x25419 = x25418 * x28;
      Fp x25420 = x25417 + x25419;
      Fp x25421 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x25422 = x25421 * x13;
      Fp x25423 = x25420 + x25422;
      Fp x25424 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x25425 = x25424 * x29;
      Fp x25426 = x25423 + x25425;
      Fp x25427 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x25428 = x25427 * x14;
      Fp x25429 = x25426 + x25428;
      Fp x25430 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x25431 = x25430 * x30;
      Fp x25432 = x25429 + x25431;
      Fp x25433 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x25434 = x25433 * x15;
      Fp x25435 = x25432 + x25434;
      Fp x25436 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x25437 = x25436 * x31;
      Fp x25438 = x25435 + x25437;
      Fp x25439 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x25440 = x25439 * x16;
      Fp x25441 = x25438 + x25440;
      Fp x25442 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x25443 = x25442 * x32;
      Fp x25444 = x25441 + x25443;
      {
        Fp x25445 = (x25444 == 0) ? Fp(1) : Fp(0);
        Fp x25446 = x71 - x25445;
        args[2][116 * steps + cycle] = x25446;
        Fp x25447 = inv(x25444);
        args[2][117 * steps + cycle] = x25447;
      }
      Fp x25448 = args[2][117 * steps + ((cycle - 0) & mask)];
      Fp x25449 = x25444 * x25448;
      Fp x25450 = args[2][116 * steps + ((cycle - 0) & mask)];
      Fp x25451 = x25449 - x25450;
      if (x25451 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
      Fp x25452 = x71 - x25450;
      Fp x25453 = x25452 * x25444;
      if (x25453 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
      Fp x25454 = x25397 * x25452;
      Fp x25455 = x71 - x25454;
      args[2][111 * steps + cycle] = x25455;
      Fp x25456 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x25457 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x25458 = x71 - x25457;
      Fp x25459 = x25456 * x25458;
      Fp x25460 = x71 - x25442;
      Fp x25461 = x25459 * x25460;
      Fp x25462 = x71 - x25456;
      Fp x25463 = x25462 * x25457;
      Fp x25464 = x25463 * x25442;
      Fp x25465 = x25461 + x25464;
      args[2][112 * steps + cycle] = x25465;
      Fp x25466 = args[2][112 * steps + ((cycle - 0) & mask)];
      Fp x25467 = x25466 + x25442;
      Fp x25468 = x25466 * x1;
      Fp x25469 = x25468 * x25442;
      Fp x25470 = x25467 - x25469;
      args[2][113 * steps + cycle] = x25470;
      Fp x25471 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x25472 = x25471 - x71;
      Fp x25473 = x25471 * x25472;
      if (x25473 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25474 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x25475 = x25474 - x71;
      Fp x25476 = x25474 * x25475;
      if (x25476 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25477 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x25478 = x25477 - x71;
      Fp x25479 = x25477 * x25478;
      if (x25479 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25480 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x25481 = x25480 - x71;
      Fp x25482 = x25480 * x25481;
      if (x25482 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25483 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x25484 = x25483 - x71;
      Fp x25485 = x25483 * x25484;
      if (x25485 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25486 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x25487 = x25486 - x71;
      Fp x25488 = x25486 * x25487;
      if (x25488 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25489 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x25490 = x25489 - x71;
      Fp x25491 = x25489 * x25490;
      if (x25491 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25492 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x25493 = x25492 - x71;
      Fp x25494 = x25492 * x25493;
      if (x25494 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25495 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x25496 = x25495 - x71;
      Fp x25497 = x25495 * x25496;
      if (x25497 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25498 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x25499 = x25498 - x71;
      Fp x25500 = x25498 * x25499;
      if (x25500 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25501 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x25502 = x25501 - x71;
      Fp x25503 = x25501 * x25502;
      if (x25503 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25504 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x25505 = x25504 - x71;
      Fp x25506 = x25504 * x25505;
      if (x25506 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25507 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x25508 = x25507 - x71;
      Fp x25509 = x25507 * x25508;
      if (x25509 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25510 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x25511 = x25510 - x71;
      Fp x25512 = x25510 * x25511;
      if (x25512 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25513 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x25514 = x25513 - x71;
      Fp x25515 = x25513 * x25514;
      if (x25515 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25516 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x25517 = x25516 - x71;
      Fp x25518 = x25516 * x25517;
      if (x25518 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25519 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x25520 = x25519 - x71;
      Fp x25521 = x25519 * x25520;
      if (x25521 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25522 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x25523 = x25522 - x71;
      Fp x25524 = x25522 * x25523;
      if (x25524 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25525 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x25526 = x25525 - x71;
      Fp x25527 = x25525 * x25526;
      if (x25527 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25528 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x25529 = x25528 - x71;
      Fp x25530 = x25528 * x25529;
      if (x25530 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25531 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x25532 = x25531 - x71;
      Fp x25533 = x25531 * x25532;
      if (x25533 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25534 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x25535 = x25534 - x71;
      Fp x25536 = x25534 * x25535;
      if (x25536 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25537 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x25538 = x25537 - x71;
      Fp x25539 = x25537 * x25538;
      if (x25539 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25540 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x25541 = x25540 - x71;
      Fp x25542 = x25540 * x25541;
      if (x25542 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25543 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x25544 = x25543 - x71;
      Fp x25545 = x25543 * x25544;
      if (x25545 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25546 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x25547 = x25546 - x71;
      Fp x25548 = x25546 * x25547;
      if (x25548 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25549 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x25550 = x25549 - x71;
      Fp x25551 = x25549 * x25550;
      if (x25551 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25552 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x25553 = x25552 - x71;
      Fp x25554 = x25552 * x25553;
      if (x25554 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25555 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x25556 = x25555 - x71;
      Fp x25557 = x25555 * x25556;
      if (x25557 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25558 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x25559 = x25558 - x71;
      Fp x25560 = x25558 * x25559;
      if (x25560 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25561 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x25562 = x25561 - x71;
      Fp x25563 = x25561 * x25562;
      if (x25563 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25564 = x25456 - x71;
      Fp x25565 = x25456 * x25564;
      if (x25565 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x25566 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x25567 = x25566 - x71;
      Fp x25568 = x25566 * x25567;
      if (x25568 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25569 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x25570 = x25569 - x71;
      Fp x25571 = x25569 * x25570;
      if (x25571 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25572 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x25573 = x25572 - x71;
      Fp x25574 = x25572 * x25573;
      if (x25574 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25575 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x25576 = x25575 - x71;
      Fp x25577 = x25575 * x25576;
      if (x25577 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25578 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x25579 = x25578 - x71;
      Fp x25580 = x25578 * x25579;
      if (x25580 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25581 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x25582 = x25581 - x71;
      Fp x25583 = x25581 * x25582;
      if (x25583 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25584 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x25585 = x25584 - x71;
      Fp x25586 = x25584 * x25585;
      if (x25586 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25587 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x25588 = x25587 - x71;
      Fp x25589 = x25587 * x25588;
      if (x25589 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25590 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x25591 = x25590 - x71;
      Fp x25592 = x25590 * x25591;
      if (x25592 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25593 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x25594 = x25593 - x71;
      Fp x25595 = x25593 * x25594;
      if (x25595 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25596 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x25597 = x25596 - x71;
      Fp x25598 = x25596 * x25597;
      if (x25598 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25599 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x25600 = x25599 - x71;
      Fp x25601 = x25599 * x25600;
      if (x25601 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25602 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x25603 = x25602 - x71;
      Fp x25604 = x25602 * x25603;
      if (x25604 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25605 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x25606 = x25605 - x71;
      Fp x25607 = x25605 * x25606;
      if (x25607 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25608 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x25609 = x25608 - x71;
      Fp x25610 = x25608 * x25609;
      if (x25610 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25611 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x25612 = x25611 - x71;
      Fp x25613 = x25611 * x25612;
      if (x25613 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25614 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x25615 = x25614 - x71;
      Fp x25616 = x25614 * x25615;
      if (x25616 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25617 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x25618 = x25617 - x71;
      Fp x25619 = x25617 * x25618;
      if (x25619 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25620 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x25621 = x25620 - x71;
      Fp x25622 = x25620 * x25621;
      if (x25622 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25623 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x25624 = x25623 - x71;
      Fp x25625 = x25623 * x25624;
      if (x25625 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25626 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x25627 = x25626 - x71;
      Fp x25628 = x25626 * x25627;
      if (x25628 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25629 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x25630 = x25629 - x71;
      Fp x25631 = x25629 * x25630;
      if (x25631 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25632 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x25633 = x25632 - x71;
      Fp x25634 = x25632 * x25633;
      if (x25634 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25635 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x25636 = x25635 - x71;
      Fp x25637 = x25635 * x25636;
      if (x25637 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25638 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x25639 = x25638 - x71;
      Fp x25640 = x25638 * x25639;
      if (x25640 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25641 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x25642 = x25641 - x71;
      Fp x25643 = x25641 * x25642;
      if (x25643 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25644 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x25645 = x25644 - x71;
      Fp x25646 = x25644 * x25645;
      if (x25646 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25647 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x25648 = x25647 - x71;
      Fp x25649 = x25647 * x25648;
      if (x25649 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25650 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x25651 = x25650 - x71;
      Fp x25652 = x25650 * x25651;
      if (x25652 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25653 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x25654 = x25653 - x71;
      Fp x25655 = x25653 * x25654;
      if (x25655 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25656 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x25657 = x25656 - x71;
      Fp x25658 = x25656 * x25657;
      if (x25658 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25659 = x25457 - x71;
      Fp x25660 = x25457 * x25659;
      if (x25660 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x25661 = x25344 - x71;
      Fp x25662 = x25344 * x25661;
      if (x25662 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25663 = x25345 - x71;
      Fp x25664 = x25345 * x25663;
      if (x25664 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25665 = x25348 - x71;
      Fp x25666 = x25348 * x25665;
      if (x25666 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25667 = x25351 - x71;
      Fp x25668 = x25351 * x25667;
      if (x25668 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25669 = x25354 - x71;
      Fp x25670 = x25354 * x25669;
      if (x25670 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25671 = x25357 - x71;
      Fp x25672 = x25357 * x25671;
      if (x25672 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25673 = x25360 - x71;
      Fp x25674 = x25360 * x25673;
      if (x25674 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25675 = x25363 - x71;
      Fp x25676 = x25363 * x25675;
      if (x25676 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25677 = x25366 - x71;
      Fp x25678 = x25366 * x25677;
      if (x25678 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25679 = x25369 - x71;
      Fp x25680 = x25369 * x25679;
      if (x25680 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25681 = x25372 - x71;
      Fp x25682 = x25372 * x25681;
      if (x25682 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25683 = x25375 - x71;
      Fp x25684 = x25375 * x25683;
      if (x25684 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25685 = x25378 - x71;
      Fp x25686 = x25378 * x25685;
      if (x25686 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25687 = x25381 - x71;
      Fp x25688 = x25381 * x25687;
      if (x25688 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25689 = x25384 - x71;
      Fp x25690 = x25384 * x25689;
      if (x25690 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25691 = x25387 - x71;
      Fp x25692 = x25387 * x25691;
      if (x25692 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25693 = x25399 - x71;
      Fp x25694 = x25399 * x25693;
      if (x25694 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25695 = x25400 - x71;
      Fp x25696 = x25400 * x25695;
      if (x25696 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25697 = x25403 - x71;
      Fp x25698 = x25403 * x25697;
      if (x25698 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25699 = x25406 - x71;
      Fp x25700 = x25406 * x25699;
      if (x25700 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25701 = x25409 - x71;
      Fp x25702 = x25409 * x25701;
      if (x25702 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25703 = x25412 - x71;
      Fp x25704 = x25412 * x25703;
      if (x25704 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25705 = x25415 - x71;
      Fp x25706 = x25415 * x25705;
      if (x25706 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25707 = x25418 - x71;
      Fp x25708 = x25418 * x25707;
      if (x25708 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25709 = x25421 - x71;
      Fp x25710 = x25421 * x25709;
      if (x25710 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25711 = x25424 - x71;
      Fp x25712 = x25424 * x25711;
      if (x25712 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25713 = x25427 - x71;
      Fp x25714 = x25427 * x25713;
      if (x25714 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25715 = x25430 - x71;
      Fp x25716 = x25430 * x25715;
      if (x25716 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25717 = x25433 - x71;
      Fp x25718 = x25433 * x25717;
      if (x25718 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25719 = x25436 - x71;
      Fp x25720 = x25436 * x25719;
      if (x25720 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25721 = x25439 - x71;
      Fp x25722 = x25439 * x25721;
      if (x25722 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25723 = x25442 - x71;
      Fp x25724 = x25442 * x25723;
      if (x25724 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x25725 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x25726 = x25725 - x71;
      Fp x25727 = x25725 * x25726;
      if (x25727 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x25728 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x25729 = x25728 - x71;
      Fp x25730 = x25728 * x25729;
      if (x25730 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x25731 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x25732 = x25731 - x71;
      Fp x25733 = x25731 * x25732;
      if (x25733 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x25734 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x25735 = x25734 - x71;
      Fp x25736 = x25734 * x25735;
      if (x25736 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x25737 = x25725 + x25728;
      Fp x25738 = x25737 + x25731;
      Fp x25739 = x25738 + x25734;
      Fp x25740 = x25739 - x71;
      if (x25740 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x25741 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x25742 = x25741 - x71;
      Fp x25743 = x25741 * x25742;
      if (x25743 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:28");
      Fp x25744 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x25745 = x25744 - x71;
      Fp x25746 = x25744 * x25745;
      if (x25746 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:29");
      Fp x25747 = args[2][108 * steps + ((cycle - 0) & mask)];
      Fp x25748 = x25747 - x71;
      Fp x25749 = x25747 * x25748;
      if (x25749 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:30");
      Fp x25750 = args[2][109 * steps + ((cycle - 0) & mask)];
      Fp x25751 = x25750 - x71;
      Fp x25752 = x25750 * x25751;
      if (x25752 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:31");
      Fp x25753 = x25395 - x71;
      Fp x25754 = x25395 * x25753;
      if (x25754 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:36");
      Fp x25755 = x25450 - x71;
      Fp x25756 = x25450 * x25755;
      if (x25756 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:37");
    }
    Fp x25757 = args[2][135 * steps + ((cycle - 0) & mask)];
    if (x25757 != 0) {
      Fp x25758 = args[2][116 * steps + ((cycle - 1) & mask)];
      Fp x25759 = args[2][117 * steps + ((cycle - 1) & mask)];
      Fp x25760 = args[2][114 * steps + ((cycle - 1) & mask)];
      Fp x25761 = args[2][115 * steps + ((cycle - 1) & mask)];
      Fp x25762 = args[2][0 * steps + ((cycle - 2) & mask)];
      Fp x25763 = args[2][1 * steps + ((cycle - 2) & mask)];
      Fp x25764 = x25763 * x3;
      Fp x25765 = x25762 + x25764;
      Fp x25766 = args[2][2 * steps + ((cycle - 2) & mask)];
      Fp x25767 = x25766 * x11;
      Fp x25768 = x25765 + x25767;
      Fp x25769 = args[2][3 * steps + ((cycle - 2) & mask)];
      Fp x25770 = x25769 * x12;
      Fp x25771 = x25768 + x25770;
      Fp x25772 = args[2][4 * steps + ((cycle - 2) & mask)];
      Fp x25773 = x25772 * x13;
      Fp x25774 = x25771 + x25773;
      Fp x25775 = args[2][5 * steps + ((cycle - 2) & mask)];
      Fp x25776 = x25775 * x14;
      Fp x25777 = x25774 + x25776;
      Fp x25778 = args[2][6 * steps + ((cycle - 2) & mask)];
      Fp x25779 = x25778 * x15;
      Fp x25780 = x25777 + x25779;
      Fp x25781 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x25782 = x25781 * x16;
      Fp x25783 = x25780 + x25782;
      Fp x25784 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x25785 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x25786 = x25785 * x3;
      Fp x25787 = x25784 + x25786;
      Fp x25788 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x25789 = x25788 * x11;
      Fp x25790 = x25787 + x25789;
      Fp x25791 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x25792 = x25791 * x12;
      Fp x25793 = x25790 + x25792;
      Fp x25794 = args[2][12 * steps + ((cycle - 2) & mask)];
      Fp x25795 = x25794 * x13;
      Fp x25796 = x25793 + x25795;
      Fp x25797 = args[2][13 * steps + ((cycle - 2) & mask)];
      Fp x25798 = x25797 * x14;
      Fp x25799 = x25796 + x25798;
      Fp x25800 = args[2][14 * steps + ((cycle - 2) & mask)];
      Fp x25801 = x25800 * x15;
      Fp x25802 = x25799 + x25801;
      Fp x25803 = args[2][15 * steps + ((cycle - 2) & mask)];
      Fp x25804 = x25803 * x16;
      Fp x25805 = x25802 + x25804;
      Fp x25806 = args[2][72 * steps + ((cycle - 1) & mask)];
      if (x25806 != 0) {
        Fp x25807 = x25758 + x25760;
        Fp x25808 = x25759 + x25761;
        {
          Fp x25809 = Fp(x25807.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x25809;
          Fp x25810 = x25807 - x25809;
          Fp x25811 = x25810 * x26;
          Fp x25812 = Fp(x25811.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x25812;
          Fp x25813 = x25811 - x25812;
          Fp x25814 = x25813 * x26;
          Fp x25815 = Fp(x25814.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x25815;
          Fp x25816 = x25814 - x25815;
          Fp x25817 = x25816 * x26;
          Fp x25818 = Fp(x25817.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x25818;
          Fp x25819 = x25817 - x25818;
          Fp x25820 = x25819 * x26;
          Fp x25821 = Fp(x25820.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x25821;
          Fp x25822 = x25820 - x25821;
          Fp x25823 = x25822 * x26;
          Fp x25824 = Fp(x25823.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x25824;
          Fp x25825 = x25823 - x25824;
          Fp x25826 = x25825 * x26;
          Fp x25827 = Fp(x25826.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x25827;
          Fp x25828 = x25826 - x25827;
          Fp x25829 = x25828 * x26;
          Fp x25830 = Fp(x25829.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x25830;
          Fp x25831 = x25829 - x25830;
          Fp x25832 = x25831 * x26;
          Fp x25833 = Fp(x25832.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x25833;
          Fp x25834 = x25832 - x25833;
          Fp x25835 = x25834 * x26;
          Fp x25836 = Fp(x25835.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x25836;
          Fp x25837 = x25835 - x25836;
          Fp x25838 = x25837 * x26;
          Fp x25839 = Fp(x25838.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x25839;
          Fp x25840 = x25838 - x25839;
          Fp x25841 = x25840 * x26;
          Fp x25842 = Fp(x25841.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x25842;
          Fp x25843 = x25841 - x25842;
          Fp x25844 = x25843 * x26;
          Fp x25845 = Fp(x25844.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x25845;
          Fp x25846 = x25844 - x25845;
          Fp x25847 = x25846 * x26;
          Fp x25848 = Fp(x25847.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x25848;
          Fp x25849 = x25847 - x25848;
          Fp x25850 = x25849 * x26;
          Fp x25851 = Fp(x25850.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x25851;
          Fp x25852 = x25850 - x25851;
          Fp x25853 = x25852 * x26;
          Fp x25854 = Fp(x25853.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x25854;
        }
        Fp x25855 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x25856 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x25857 = x25856 * x1;
        Fp x25858 = x25855 + x25857;
        Fp x25859 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x25860 = x25859 * x3;
        Fp x25861 = x25858 + x25860;
        Fp x25862 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x25863 = x25862 * x6;
        Fp x25864 = x25861 + x25863;
        Fp x25865 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x25866 = x25865 * x11;
        Fp x25867 = x25864 + x25866;
        Fp x25868 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x25869 = x25868 * x27;
        Fp x25870 = x25867 + x25869;
        Fp x25871 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x25872 = x25871 * x12;
        Fp x25873 = x25870 + x25872;
        Fp x25874 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x25875 = x25874 * x28;
        Fp x25876 = x25873 + x25875;
        Fp x25877 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x25878 = x25877 * x13;
        Fp x25879 = x25876 + x25878;
        Fp x25880 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x25881 = x25880 * x29;
        Fp x25882 = x25879 + x25881;
        Fp x25883 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x25884 = x25883 * x14;
        Fp x25885 = x25882 + x25884;
        Fp x25886 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x25887 = x25886 * x30;
        Fp x25888 = x25885 + x25887;
        Fp x25889 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x25890 = x25889 * x15;
        Fp x25891 = x25888 + x25890;
        Fp x25892 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x25893 = x25892 * x31;
        Fp x25894 = x25891 + x25893;
        Fp x25895 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x25896 = x25895 * x16;
        Fp x25897 = x25894 + x25896;
        Fp x25898 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x25899 = x25898 * x32;
        Fp x25900 = x25897 + x25899;
        Fp x25901 = x25807 - x25900;
        Fp x25902 = x25901 * x33;
        args[2][106 * steps + cycle] = x25902;
        Fp x25903 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x25904 = x25808 + x25903;
        {
          Fp x25905 = Fp(x25904.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x25905;
          Fp x25906 = x25904 - x25905;
          Fp x25907 = x25906 * x26;
          Fp x25908 = Fp(x25907.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x25908;
          Fp x25909 = x25907 - x25908;
          Fp x25910 = x25909 * x26;
          Fp x25911 = Fp(x25910.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x25911;
          Fp x25912 = x25910 - x25911;
          Fp x25913 = x25912 * x26;
          Fp x25914 = Fp(x25913.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x25914;
          Fp x25915 = x25913 - x25914;
          Fp x25916 = x25915 * x26;
          Fp x25917 = Fp(x25916.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x25917;
          Fp x25918 = x25916 - x25917;
          Fp x25919 = x25918 * x26;
          Fp x25920 = Fp(x25919.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x25920;
          Fp x25921 = x25919 - x25920;
          Fp x25922 = x25921 * x26;
          Fp x25923 = Fp(x25922.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x25923;
          Fp x25924 = x25922 - x25923;
          Fp x25925 = x25924 * x26;
          Fp x25926 = Fp(x25925.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x25926;
          Fp x25927 = x25925 - x25926;
          Fp x25928 = x25927 * x26;
          Fp x25929 = Fp(x25928.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x25929;
          Fp x25930 = x25928 - x25929;
          Fp x25931 = x25930 * x26;
          Fp x25932 = Fp(x25931.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x25932;
          Fp x25933 = x25931 - x25932;
          Fp x25934 = x25933 * x26;
          Fp x25935 = Fp(x25934.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x25935;
          Fp x25936 = x25934 - x25935;
          Fp x25937 = x25936 * x26;
          Fp x25938 = Fp(x25937.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x25938;
          Fp x25939 = x25937 - x25938;
          Fp x25940 = x25939 * x26;
          Fp x25941 = Fp(x25940.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x25941;
          Fp x25942 = x25940 - x25941;
          Fp x25943 = x25942 * x26;
          Fp x25944 = Fp(x25943.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x25944;
          Fp x25945 = x25943 - x25944;
          Fp x25946 = x25945 * x26;
          Fp x25947 = Fp(x25946.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x25947;
          Fp x25948 = x25946 - x25947;
          Fp x25949 = x25948 * x26;
          Fp x25950 = Fp(x25949.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x25950;
        }
        Fp x25951 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x25952 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x25953 = x25952 * x1;
        Fp x25954 = x25951 + x25953;
        Fp x25955 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x25956 = x25955 * x3;
        Fp x25957 = x25954 + x25956;
        Fp x25958 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x25959 = x25958 * x6;
        Fp x25960 = x25957 + x25959;
        Fp x25961 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x25962 = x25961 * x11;
        Fp x25963 = x25960 + x25962;
        Fp x25964 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x25965 = x25964 * x27;
        Fp x25966 = x25963 + x25965;
        Fp x25967 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x25968 = x25967 * x12;
        Fp x25969 = x25966 + x25968;
        Fp x25970 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x25971 = x25970 * x28;
        Fp x25972 = x25969 + x25971;
        Fp x25973 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x25974 = x25973 * x13;
        Fp x25975 = x25972 + x25974;
        Fp x25976 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x25977 = x25976 * x29;
        Fp x25978 = x25975 + x25977;
        Fp x25979 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x25980 = x25979 * x14;
        Fp x25981 = x25978 + x25980;
        Fp x25982 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x25983 = x25982 * x30;
        Fp x25984 = x25981 + x25983;
        Fp x25985 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x25986 = x25985 * x15;
        Fp x25987 = x25984 + x25986;
        Fp x25988 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x25989 = x25988 * x31;
        Fp x25990 = x25987 + x25989;
        Fp x25991 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x25992 = x25991 * x16;
        Fp x25993 = x25990 + x25992;
        Fp x25994 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x25995 = x25994 * x32;
        Fp x25996 = x25993 + x25995;
        Fp x25997 = x25904 - x25996;
        Fp x25998 = x25997 * x33;
        args[2][107 * steps + cycle] = x25998;
        Fp x25999 = x25862 * x1;
        Fp x26000 = x25859 + x25999;
        Fp x26001 = x25865 * x3;
        Fp x26002 = x26000 + x26001;
        Fp x26003 = x25868 * x6;
        Fp x26004 = x26002 + x26003;
        Fp x26005 = x25871 * x11;
        Fp x26006 = x26004 + x26005;
        Fp x26007 = x25874 * x27;
        Fp x26008 = x26006 + x26007;
        Fp x26009 = x25877 * x12;
        Fp x26010 = x26008 + x26009;
        Fp x26011 = x25880 * x28;
        Fp x26012 = x26010 + x26011;
        Fp x26013 = x25883 * x13;
        Fp x26014 = x26012 + x26013;
        Fp x26015 = x25886 * x29;
        Fp x26016 = x26014 + x26015;
        Fp x26017 = x25889 * x14;
        Fp x26018 = x26016 + x26017;
        Fp x26019 = x25892 * x30;
        Fp x26020 = x26018 + x26019;
        Fp x26021 = x25895 * x15;
        Fp x26022 = x26020 + x26021;
        Fp x26023 = x25898 * x31;
        Fp x26024 = x26022 + x26023;
        Fp x26025 = x25951 * x16;
        Fp x26026 = x26024 + x26025;
        Fp x26027 = x25952 * x32;
        Fp x26028 = x26026 + x26027;
        Fp x26029 = x25955 * x17;
        Fp x26030 = x26028 + x26029;
        Fp x26031 = x25958 * x57;
        Fp x26032 = x26030 + x26031;
        Fp x26033 = x25961 * x18;
        Fp x26034 = x26032 + x26033;
        Fp x26035 = x25964 * x58;
        Fp x26036 = x26034 + x26035;
        Fp x26037 = x25967 * x19;
        Fp x26038 = x26036 + x26037;
        Fp x26039 = x25970 * x59;
        Fp x26040 = x26038 + x26039;
        Fp x26041 = x25973 * x20;
        Fp x26042 = x26040 + x26041;
        Fp x26043 = x25976 * x60;
        Fp x26044 = x26042 + x26043;
        args[2][128 * steps + cycle] = x26044;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x26044;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x26045 = host_outs[0];
          Fp x26046 = host_outs[1];
          args[2][129 * steps + cycle] = x26045;
          args[2][130 * steps + cycle] = x26046;
        }
        Fp x26047 = x25982 * x1;
        Fp x26048 = x25979 + x26047;
        Fp x26049 = x25985 * x3;
        Fp x26050 = x26048 + x26049;
        Fp x26051 = x25988 * x6;
        Fp x26052 = x26050 + x26051;
        Fp x26053 = x25991 * x11;
        Fp x26054 = x26052 + x26053;
        Fp x26055 = x25994 * x27;
        Fp x26056 = x26054 + x26055;
        if (x26056 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:65");
        Fp x26057 = args[2][129 * steps + ((cycle - 0) & mask)];
        Fp x26058 = args[2][130 * steps + ((cycle - 0) & mask)];
        {
          Fp x26059 = Fp(x26057.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x26059;
          Fp x26060 = x26057 - x26059;
          Fp x26061 = x26060 * x26;
          Fp x26062 = Fp(x26061.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x26062;
          Fp x26063 = x26061 - x26062;
          Fp x26064 = x26063 * x26;
          Fp x26065 = Fp(x26064.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x26065;
          Fp x26066 = x26064 - x26065;
          Fp x26067 = x26066 * x26;
          Fp x26068 = Fp(x26067.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x26068;
          Fp x26069 = x26067 - x26068;
          Fp x26070 = x26069 * x26;
          Fp x26071 = Fp(x26070.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x26071;
          Fp x26072 = x26070 - x26071;
          Fp x26073 = x26072 * x26;
          Fp x26074 = Fp(x26073.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x26074;
          Fp x26075 = x26073 - x26074;
          Fp x26076 = x26075 * x26;
          Fp x26077 = Fp(x26076.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x26077;
          Fp x26078 = x26076 - x26077;
          Fp x26079 = x26078 * x26;
          Fp x26080 = Fp(x26079.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x26080;
          Fp x26081 = x26079 - x26080;
          Fp x26082 = x26081 * x26;
          Fp x26083 = Fp(x26082.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x26083;
          Fp x26084 = x26082 - x26083;
          Fp x26085 = x26084 * x26;
          Fp x26086 = Fp(x26085.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x26086;
          Fp x26087 = x26085 - x26086;
          Fp x26088 = x26087 * x26;
          Fp x26089 = Fp(x26088.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x26089;
          Fp x26090 = x26088 - x26089;
          Fp x26091 = x26090 * x26;
          Fp x26092 = Fp(x26091.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x26092;
          Fp x26093 = x26091 - x26092;
          Fp x26094 = x26093 * x26;
          Fp x26095 = Fp(x26094.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x26095;
          Fp x26096 = x26094 - x26095;
          Fp x26097 = x26096 * x26;
          Fp x26098 = Fp(x26097.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x26098;
          Fp x26099 = x26097 - x26098;
          Fp x26100 = x26099 * x26;
          Fp x26101 = Fp(x26100.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x26101;
          Fp x26102 = x26100 - x26101;
          Fp x26103 = x26102 * x26;
          Fp x26104 = Fp(x26103.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x26104;
        }
        Fp x26105 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x26106 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x26107 = x26106 * x1;
        Fp x26108 = x26105 + x26107;
        Fp x26109 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x26110 = x26109 * x3;
        Fp x26111 = x26108 + x26110;
        Fp x26112 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x26113 = x26112 * x6;
        Fp x26114 = x26111 + x26113;
        Fp x26115 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x26116 = x26115 * x11;
        Fp x26117 = x26114 + x26116;
        Fp x26118 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x26119 = x26118 * x27;
        Fp x26120 = x26117 + x26119;
        Fp x26121 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x26122 = x26121 * x12;
        Fp x26123 = x26120 + x26122;
        Fp x26124 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x26125 = x26124 * x28;
        Fp x26126 = x26123 + x26125;
        Fp x26127 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x26128 = x26127 * x13;
        Fp x26129 = x26126 + x26128;
        Fp x26130 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x26131 = x26130 * x29;
        Fp x26132 = x26129 + x26131;
        Fp x26133 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x26134 = x26133 * x14;
        Fp x26135 = x26132 + x26134;
        Fp x26136 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x26137 = x26136 * x30;
        Fp x26138 = x26135 + x26137;
        Fp x26139 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x26140 = x26139 * x15;
        Fp x26141 = x26138 + x26140;
        Fp x26142 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x26143 = x26142 * x31;
        Fp x26144 = x26141 + x26143;
        Fp x26145 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x26146 = x26145 * x16;
        Fp x26147 = x26144 + x26146;
        Fp x26148 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x26149 = x26148 * x32;
        Fp x26150 = x26147 + x26149;
        Fp x26151 = x26057 - x26150;
        Fp x26152 = x26151 * x33;
        if (x26152 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:65");
        {
          Fp x26153 = Fp(x26058.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x26153;
          Fp x26154 = x26058 - x26153;
          Fp x26155 = x26154 * x26;
          Fp x26156 = Fp(x26155.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x26156;
          Fp x26157 = x26155 - x26156;
          Fp x26158 = x26157 * x26;
          Fp x26159 = Fp(x26158.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x26159;
          Fp x26160 = x26158 - x26159;
          Fp x26161 = x26160 * x26;
          Fp x26162 = Fp(x26161.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x26162;
          Fp x26163 = x26161 - x26162;
          Fp x26164 = x26163 * x26;
          Fp x26165 = Fp(x26164.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x26165;
          Fp x26166 = x26164 - x26165;
          Fp x26167 = x26166 * x26;
          Fp x26168 = Fp(x26167.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x26168;
          Fp x26169 = x26167 - x26168;
          Fp x26170 = x26169 * x26;
          Fp x26171 = Fp(x26170.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x26171;
          Fp x26172 = x26170 - x26171;
          Fp x26173 = x26172 * x26;
          Fp x26174 = Fp(x26173.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x26174;
          Fp x26175 = x26173 - x26174;
          Fp x26176 = x26175 * x26;
          Fp x26177 = Fp(x26176.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x26177;
          Fp x26178 = x26176 - x26177;
          Fp x26179 = x26178 * x26;
          Fp x26180 = Fp(x26179.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x26180;
          Fp x26181 = x26179 - x26180;
          Fp x26182 = x26181 * x26;
          Fp x26183 = Fp(x26182.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x26183;
          Fp x26184 = x26182 - x26183;
          Fp x26185 = x26184 * x26;
          Fp x26186 = Fp(x26185.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x26186;
          Fp x26187 = x26185 - x26186;
          Fp x26188 = x26187 * x26;
          Fp x26189 = Fp(x26188.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x26189;
          Fp x26190 = x26188 - x26189;
          Fp x26191 = x26190 * x26;
          Fp x26192 = Fp(x26191.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x26192;
          Fp x26193 = x26191 - x26192;
          Fp x26194 = x26193 * x26;
          Fp x26195 = Fp(x26194.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x26195;
          Fp x26196 = x26194 - x26195;
          Fp x26197 = x26196 * x26;
          Fp x26198 = Fp(x26197.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x26198;
        }
        Fp x26199 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x26200 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x26201 = x26200 * x1;
        Fp x26202 = x26199 + x26201;
        Fp x26203 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x26204 = x26203 * x3;
        Fp x26205 = x26202 + x26204;
        Fp x26206 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x26207 = x26206 * x6;
        Fp x26208 = x26205 + x26207;
        Fp x26209 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x26210 = x26209 * x11;
        Fp x26211 = x26208 + x26210;
        Fp x26212 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x26213 = x26212 * x27;
        Fp x26214 = x26211 + x26213;
        Fp x26215 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x26216 = x26215 * x12;
        Fp x26217 = x26214 + x26216;
        Fp x26218 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x26219 = x26218 * x28;
        Fp x26220 = x26217 + x26219;
        Fp x26221 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x26222 = x26221 * x13;
        Fp x26223 = x26220 + x26222;
        Fp x26224 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x26225 = x26224 * x29;
        Fp x26226 = x26223 + x26225;
        Fp x26227 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x26228 = x26227 * x14;
        Fp x26229 = x26226 + x26228;
        Fp x26230 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x26231 = x26230 * x30;
        Fp x26232 = x26229 + x26231;
        Fp x26233 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x26234 = x26233 * x15;
        Fp x26235 = x26232 + x26234;
        Fp x26236 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x26237 = x26236 * x31;
        Fp x26238 = x26235 + x26237;
        Fp x26239 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x26240 = x26239 * x16;
        Fp x26241 = x26238 + x26240;
        Fp x26242 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x26243 = x26242 * x32;
        Fp x26244 = x26241 + x26243;
        Fp x26245 = x26058 - x26244;
        Fp x26246 = x26245 * x33;
        if (x26246 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:65");
        {
          Fp x26247 = (x25858 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x26247;
          Fp x26248 = x25858 - x71;
          Fp x26249 = (x26248 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x26249;
          Fp x26250 = x25858 - x1;
          Fp x26251 = (x26250 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x26251;
          Fp x26252 = x25858 - x2;
          Fp x26253 = (x26252 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x26253;
        }
        Fp x26254 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x26255 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x26256 = x26255 * x1;
        Fp x26257 = x26254 + x26256;
        Fp x26258 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x26259 = x26258 * x2;
        Fp x26260 = x26257 + x26259;
        Fp x26261 = x26260 - x25858;
        if (x26261 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        if (x25858 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.cpp:49");
        {
          Fp x26262 = Fp(x26150.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x26262;
          Fp x26263 = x26150 - x26262;
          Fp x26264 = x26263 * x26;
          Fp x26265 = Fp(x26264.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x26265;
          Fp x26266 = x26264 - x26265;
          Fp x26267 = x26266 * x26;
          Fp x26268 = Fp(x26267.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x26268;
          Fp x26269 = x26267 - x26268;
          Fp x26270 = x26269 * x26;
          Fp x26271 = Fp(x26270.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x26271;
          Fp x26272 = x26270 - x26271;
          Fp x26273 = x26272 * x26;
          Fp x26274 = Fp(x26273.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x26274;
          Fp x26275 = x26273 - x26274;
          Fp x26276 = x26275 * x26;
          Fp x26277 = Fp(x26276.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x26277;
          Fp x26278 = x26276 - x26277;
          Fp x26279 = x26278 * x26;
          Fp x26280 = Fp(x26279.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x26280;
          Fp x26281 = x26279 - x26280;
          Fp x26282 = x26281 * x26;
          Fp x26283 = Fp(x26282.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x26283;
          Fp x26284 = x26282 - x26283;
          Fp x26285 = x26284 * x26;
          Fp x26286 = Fp(x26285.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x26286;
          Fp x26287 = x26285 - x26286;
          Fp x26288 = x26287 * x26;
          Fp x26289 = Fp(x26288.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x26289;
          Fp x26290 = x26288 - x26289;
          Fp x26291 = x26290 * x26;
          Fp x26292 = Fp(x26291.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x26292;
          Fp x26293 = x26291 - x26292;
          Fp x26294 = x26293 * x26;
          Fp x26295 = Fp(x26294.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x26295;
          Fp x26296 = x26294 - x26295;
          Fp x26297 = x26296 * x26;
          Fp x26298 = Fp(x26297.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x26298;
          Fp x26299 = x26297 - x26298;
          Fp x26300 = x26299 * x26;
          Fp x26301 = Fp(x26300.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x26301;
          Fp x26302 = x26300 - x26301;
          Fp x26303 = x26302 * x26;
          Fp x26304 = Fp(x26303.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x26304;
          Fp x26305 = x26303 - x26304;
          Fp x26306 = x26305 * x26;
          Fp x26307 = Fp(x26306.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x26307;
        }
        Fp x26308 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x26309 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x26310 = x26309 * x1;
        Fp x26311 = x26308 + x26310;
        Fp x26312 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x26313 = x26312 * x3;
        Fp x26314 = x26311 + x26313;
        Fp x26315 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x26316 = x26315 * x6;
        Fp x26317 = x26314 + x26316;
        Fp x26318 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x26319 = x26318 * x11;
        Fp x26320 = x26317 + x26319;
        Fp x26321 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x26322 = x26321 * x27;
        Fp x26323 = x26320 + x26322;
        Fp x26324 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x26325 = x26324 * x12;
        Fp x26326 = x26323 + x26325;
        Fp x26327 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x26328 = x26327 * x28;
        Fp x26329 = x26326 + x26328;
        Fp x26330 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x26331 = x26330 * x13;
        Fp x26332 = x26329 + x26331;
        Fp x26333 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x26334 = x26333 * x29;
        Fp x26335 = x26332 + x26334;
        Fp x26336 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x26337 = x26336 * x14;
        Fp x26338 = x26335 + x26337;
        Fp x26339 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x26340 = x26339 * x30;
        Fp x26341 = x26338 + x26340;
        Fp x26342 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x26343 = x26342 * x15;
        Fp x26344 = x26341 + x26343;
        Fp x26345 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x26346 = x26345 * x31;
        Fp x26347 = x26344 + x26346;
        Fp x26348 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x26349 = x26348 * x16;
        Fp x26350 = x26347 + x26349;
        Fp x26351 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x26352 = x26351 * x32;
        Fp x26353 = x26350 + x26352;
        Fp x26354 = x26150 - x26353;
        Fp x26355 = x26354 * x33;
        args[2][108 * steps + cycle] = x26355;
        Fp x26356 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x26357 = x26244 + x26356;
        {
          Fp x26358 = Fp(x26357.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x26358;
          Fp x26359 = x26357 - x26358;
          Fp x26360 = x26359 * x26;
          Fp x26361 = Fp(x26360.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x26361;
          Fp x26362 = x26360 - x26361;
          Fp x26363 = x26362 * x26;
          Fp x26364 = Fp(x26363.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x26364;
          Fp x26365 = x26363 - x26364;
          Fp x26366 = x26365 * x26;
          Fp x26367 = Fp(x26366.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x26367;
          Fp x26368 = x26366 - x26367;
          Fp x26369 = x26368 * x26;
          Fp x26370 = Fp(x26369.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x26370;
          Fp x26371 = x26369 - x26370;
          Fp x26372 = x26371 * x26;
          Fp x26373 = Fp(x26372.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x26373;
          Fp x26374 = x26372 - x26373;
          Fp x26375 = x26374 * x26;
          Fp x26376 = Fp(x26375.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x26376;
          Fp x26377 = x26375 - x26376;
          Fp x26378 = x26377 * x26;
          Fp x26379 = Fp(x26378.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x26379;
          Fp x26380 = x26378 - x26379;
          Fp x26381 = x26380 * x26;
          Fp x26382 = Fp(x26381.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x26382;
          Fp x26383 = x26381 - x26382;
          Fp x26384 = x26383 * x26;
          Fp x26385 = Fp(x26384.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x26385;
          Fp x26386 = x26384 - x26385;
          Fp x26387 = x26386 * x26;
          Fp x26388 = Fp(x26387.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x26388;
          Fp x26389 = x26387 - x26388;
          Fp x26390 = x26389 * x26;
          Fp x26391 = Fp(x26390.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x26391;
          Fp x26392 = x26390 - x26391;
          Fp x26393 = x26392 * x26;
          Fp x26394 = Fp(x26393.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x26394;
          Fp x26395 = x26393 - x26394;
          Fp x26396 = x26395 * x26;
          Fp x26397 = Fp(x26396.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x26397;
          Fp x26398 = x26396 - x26397;
          Fp x26399 = x26398 * x26;
          Fp x26400 = Fp(x26399.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x26400;
          Fp x26401 = x26399 - x26400;
          Fp x26402 = x26401 * x26;
          Fp x26403 = Fp(x26402.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x26403;
        }
        Fp x26404 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x26405 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x26406 = x26405 * x1;
        Fp x26407 = x26404 + x26406;
        Fp x26408 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x26409 = x26408 * x3;
        Fp x26410 = x26407 + x26409;
        Fp x26411 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x26412 = x26411 * x6;
        Fp x26413 = x26410 + x26412;
        Fp x26414 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x26415 = x26414 * x11;
        Fp x26416 = x26413 + x26415;
        Fp x26417 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x26418 = x26417 * x27;
        Fp x26419 = x26416 + x26418;
        Fp x26420 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x26421 = x26420 * x12;
        Fp x26422 = x26419 + x26421;
        Fp x26423 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x26424 = x26423 * x28;
        Fp x26425 = x26422 + x26424;
        Fp x26426 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x26427 = x26426 * x13;
        Fp x26428 = x26425 + x26427;
        Fp x26429 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x26430 = x26429 * x29;
        Fp x26431 = x26428 + x26430;
        Fp x26432 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x26433 = x26432 * x14;
        Fp x26434 = x26431 + x26433;
        Fp x26435 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x26436 = x26435 * x30;
        Fp x26437 = x26434 + x26436;
        Fp x26438 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x26439 = x26438 * x15;
        Fp x26440 = x26437 + x26439;
        Fp x26441 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x26442 = x26441 * x31;
        Fp x26443 = x26440 + x26442;
        Fp x26444 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x26445 = x26444 * x16;
        Fp x26446 = x26443 + x26445;
        Fp x26447 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x26448 = x26447 * x32;
        Fp x26449 = x26446 + x26448;
        Fp x26450 = x26357 - x26449;
        Fp x26451 = x26450 * x33;
        args[2][109 * steps + cycle] = x26451;
        {
          {
            Fp x26452 = (x26353 == 0) ? Fp(1) : Fp(0);
            Fp x26453 = x71 - x26452;
            args[2][114 * steps + cycle] = x26453;
            Fp x26454 = inv(x26353);
            args[2][115 * steps + cycle] = x26454;
          }
          Fp x26455 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x26456 = x26353 * x26455;
          Fp x26457 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x26458 = x26456 - x26457;
          if (x26458 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x26459 = x71 - x26457;
          Fp x26460 = x26459 * x26353;
          if (x26460 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x26461 = (x26449 == 0) ? Fp(1) : Fp(0);
            Fp x26462 = x71 - x26461;
            args[2][116 * steps + cycle] = x26462;
            Fp x26463 = inv(x26449);
            args[2][117 * steps + cycle] = x26463;
          }
          Fp x26464 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x26465 = x26449 * x26464;
          Fp x26466 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x26467 = x26465 - x26466;
          if (x26467 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x26468 = x71 - x26466;
          Fp x26469 = x26468 * x26449;
          if (x26469 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x26470 = x26459 * x26468;
          Fp x26471 = x71 - x26470;
          args[2][111 * steps + cycle] = x26471;
          Fp x26472 = x71 - x26242;
          Fp x26473 = x25994 * x26472;
          Fp x26474 = x71 - x26447;
          Fp x26475 = x26473 * x26474;
          Fp x26476 = x71 - x25994;
          Fp x26477 = x26476 * x26242;
          Fp x26478 = x26477 * x26447;
          Fp x26479 = x26475 + x26478;
          args[2][112 * steps + cycle] = x26479;
          Fp x26480 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x26481 = x26480 + x26447;
          Fp x26482 = x26480 * x1;
          Fp x26483 = x26482 * x26447;
          Fp x26484 = x26481 - x26483;
          args[2][113 * steps + cycle] = x26484;
        }
        args[2][100 * steps + cycle] = x26353;
        args[2][101 * steps + cycle] = x26449;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x26485 = x25783 + x3;
        args[2][104 * steps + cycle] = x26485;
        args[2][105 * steps + cycle] = x25805;
        Fp x26486 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x26487 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x26488 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x26489 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x26490 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x26491 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x25805;
        host_args[2] = x25783;
        host_args[3] = x25996;
        host_args[4] = x25900;
        host_args[5] = x26244;
        host_args[6] = x26150;
        host_args[7] = x26449;
        host_args[8] = x26353;
        host_args[9] = x26486;
        host_args[10] = x26487;
        host_args[11] = x26488;
        host_args[12] = x26489;
        host_args[13] = x26490;
        host_args[14] = x26491;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x26492 = args[2][73 * steps + ((cycle - 1) & mask)];
      if (x26492 != 0) {
        Fp x26493 = x25758 + x25760;
        Fp x26494 = x25759 + x25761;
        {
          Fp x26495 = Fp(x26493.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x26495;
          Fp x26496 = x26493 - x26495;
          Fp x26497 = x26496 * x26;
          Fp x26498 = Fp(x26497.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x26498;
          Fp x26499 = x26497 - x26498;
          Fp x26500 = x26499 * x26;
          Fp x26501 = Fp(x26500.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x26501;
          Fp x26502 = x26500 - x26501;
          Fp x26503 = x26502 * x26;
          Fp x26504 = Fp(x26503.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x26504;
          Fp x26505 = x26503 - x26504;
          Fp x26506 = x26505 * x26;
          Fp x26507 = Fp(x26506.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x26507;
          Fp x26508 = x26506 - x26507;
          Fp x26509 = x26508 * x26;
          Fp x26510 = Fp(x26509.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x26510;
          Fp x26511 = x26509 - x26510;
          Fp x26512 = x26511 * x26;
          Fp x26513 = Fp(x26512.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x26513;
          Fp x26514 = x26512 - x26513;
          Fp x26515 = x26514 * x26;
          Fp x26516 = Fp(x26515.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x26516;
          Fp x26517 = x26515 - x26516;
          Fp x26518 = x26517 * x26;
          Fp x26519 = Fp(x26518.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x26519;
          Fp x26520 = x26518 - x26519;
          Fp x26521 = x26520 * x26;
          Fp x26522 = Fp(x26521.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x26522;
          Fp x26523 = x26521 - x26522;
          Fp x26524 = x26523 * x26;
          Fp x26525 = Fp(x26524.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x26525;
          Fp x26526 = x26524 - x26525;
          Fp x26527 = x26526 * x26;
          Fp x26528 = Fp(x26527.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x26528;
          Fp x26529 = x26527 - x26528;
          Fp x26530 = x26529 * x26;
          Fp x26531 = Fp(x26530.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x26531;
          Fp x26532 = x26530 - x26531;
          Fp x26533 = x26532 * x26;
          Fp x26534 = Fp(x26533.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x26534;
          Fp x26535 = x26533 - x26534;
          Fp x26536 = x26535 * x26;
          Fp x26537 = Fp(x26536.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x26537;
          Fp x26538 = x26536 - x26537;
          Fp x26539 = x26538 * x26;
          Fp x26540 = Fp(x26539.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x26540;
        }
        Fp x26541 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x26542 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x26543 = x26542 * x1;
        Fp x26544 = x26541 + x26543;
        Fp x26545 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x26546 = x26545 * x3;
        Fp x26547 = x26544 + x26546;
        Fp x26548 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x26549 = x26548 * x6;
        Fp x26550 = x26547 + x26549;
        Fp x26551 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x26552 = x26551 * x11;
        Fp x26553 = x26550 + x26552;
        Fp x26554 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x26555 = x26554 * x27;
        Fp x26556 = x26553 + x26555;
        Fp x26557 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x26558 = x26557 * x12;
        Fp x26559 = x26556 + x26558;
        Fp x26560 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x26561 = x26560 * x28;
        Fp x26562 = x26559 + x26561;
        Fp x26563 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x26564 = x26563 * x13;
        Fp x26565 = x26562 + x26564;
        Fp x26566 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x26567 = x26566 * x29;
        Fp x26568 = x26565 + x26567;
        Fp x26569 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x26570 = x26569 * x14;
        Fp x26571 = x26568 + x26570;
        Fp x26572 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x26573 = x26572 * x30;
        Fp x26574 = x26571 + x26573;
        Fp x26575 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x26576 = x26575 * x15;
        Fp x26577 = x26574 + x26576;
        Fp x26578 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x26579 = x26578 * x31;
        Fp x26580 = x26577 + x26579;
        Fp x26581 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x26582 = x26581 * x16;
        Fp x26583 = x26580 + x26582;
        Fp x26584 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x26585 = x26584 * x32;
        Fp x26586 = x26583 + x26585;
        Fp x26587 = x26493 - x26586;
        Fp x26588 = x26587 * x33;
        args[2][106 * steps + cycle] = x26588;
        Fp x26589 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x26590 = x26494 + x26589;
        {
          Fp x26591 = Fp(x26590.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x26591;
          Fp x26592 = x26590 - x26591;
          Fp x26593 = x26592 * x26;
          Fp x26594 = Fp(x26593.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x26594;
          Fp x26595 = x26593 - x26594;
          Fp x26596 = x26595 * x26;
          Fp x26597 = Fp(x26596.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x26597;
          Fp x26598 = x26596 - x26597;
          Fp x26599 = x26598 * x26;
          Fp x26600 = Fp(x26599.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x26600;
          Fp x26601 = x26599 - x26600;
          Fp x26602 = x26601 * x26;
          Fp x26603 = Fp(x26602.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x26603;
          Fp x26604 = x26602 - x26603;
          Fp x26605 = x26604 * x26;
          Fp x26606 = Fp(x26605.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x26606;
          Fp x26607 = x26605 - x26606;
          Fp x26608 = x26607 * x26;
          Fp x26609 = Fp(x26608.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x26609;
          Fp x26610 = x26608 - x26609;
          Fp x26611 = x26610 * x26;
          Fp x26612 = Fp(x26611.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x26612;
          Fp x26613 = x26611 - x26612;
          Fp x26614 = x26613 * x26;
          Fp x26615 = Fp(x26614.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x26615;
          Fp x26616 = x26614 - x26615;
          Fp x26617 = x26616 * x26;
          Fp x26618 = Fp(x26617.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x26618;
          Fp x26619 = x26617 - x26618;
          Fp x26620 = x26619 * x26;
          Fp x26621 = Fp(x26620.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x26621;
          Fp x26622 = x26620 - x26621;
          Fp x26623 = x26622 * x26;
          Fp x26624 = Fp(x26623.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x26624;
          Fp x26625 = x26623 - x26624;
          Fp x26626 = x26625 * x26;
          Fp x26627 = Fp(x26626.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x26627;
          Fp x26628 = x26626 - x26627;
          Fp x26629 = x26628 * x26;
          Fp x26630 = Fp(x26629.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x26630;
          Fp x26631 = x26629 - x26630;
          Fp x26632 = x26631 * x26;
          Fp x26633 = Fp(x26632.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x26633;
          Fp x26634 = x26632 - x26633;
          Fp x26635 = x26634 * x26;
          Fp x26636 = Fp(x26635.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x26636;
        }
        Fp x26637 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x26638 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x26639 = x26638 * x1;
        Fp x26640 = x26637 + x26639;
        Fp x26641 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x26642 = x26641 * x3;
        Fp x26643 = x26640 + x26642;
        Fp x26644 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x26645 = x26644 * x6;
        Fp x26646 = x26643 + x26645;
        Fp x26647 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x26648 = x26647 * x11;
        Fp x26649 = x26646 + x26648;
        Fp x26650 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x26651 = x26650 * x27;
        Fp x26652 = x26649 + x26651;
        Fp x26653 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x26654 = x26653 * x12;
        Fp x26655 = x26652 + x26654;
        Fp x26656 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x26657 = x26656 * x28;
        Fp x26658 = x26655 + x26657;
        Fp x26659 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x26660 = x26659 * x13;
        Fp x26661 = x26658 + x26660;
        Fp x26662 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x26663 = x26662 * x29;
        Fp x26664 = x26661 + x26663;
        Fp x26665 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x26666 = x26665 * x14;
        Fp x26667 = x26664 + x26666;
        Fp x26668 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x26669 = x26668 * x30;
        Fp x26670 = x26667 + x26669;
        Fp x26671 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x26672 = x26671 * x15;
        Fp x26673 = x26670 + x26672;
        Fp x26674 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x26675 = x26674 * x31;
        Fp x26676 = x26673 + x26675;
        Fp x26677 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x26678 = x26677 * x16;
        Fp x26679 = x26676 + x26678;
        Fp x26680 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x26681 = x26680 * x32;
        Fp x26682 = x26679 + x26681;
        Fp x26683 = x26590 - x26682;
        Fp x26684 = x26683 * x33;
        args[2][107 * steps + cycle] = x26684;
        Fp x26685 = x26548 * x1;
        Fp x26686 = x26545 + x26685;
        Fp x26687 = x26551 * x3;
        Fp x26688 = x26686 + x26687;
        Fp x26689 = x26554 * x6;
        Fp x26690 = x26688 + x26689;
        Fp x26691 = x26557 * x11;
        Fp x26692 = x26690 + x26691;
        Fp x26693 = x26560 * x27;
        Fp x26694 = x26692 + x26693;
        Fp x26695 = x26563 * x12;
        Fp x26696 = x26694 + x26695;
        Fp x26697 = x26566 * x28;
        Fp x26698 = x26696 + x26697;
        Fp x26699 = x26569 * x13;
        Fp x26700 = x26698 + x26699;
        Fp x26701 = x26572 * x29;
        Fp x26702 = x26700 + x26701;
        Fp x26703 = x26575 * x14;
        Fp x26704 = x26702 + x26703;
        Fp x26705 = x26578 * x30;
        Fp x26706 = x26704 + x26705;
        Fp x26707 = x26581 * x15;
        Fp x26708 = x26706 + x26707;
        Fp x26709 = x26584 * x31;
        Fp x26710 = x26708 + x26709;
        Fp x26711 = x26637 * x16;
        Fp x26712 = x26710 + x26711;
        Fp x26713 = x26638 * x32;
        Fp x26714 = x26712 + x26713;
        Fp x26715 = x26641 * x17;
        Fp x26716 = x26714 + x26715;
        Fp x26717 = x26644 * x57;
        Fp x26718 = x26716 + x26717;
        Fp x26719 = x26647 * x18;
        Fp x26720 = x26718 + x26719;
        Fp x26721 = x26650 * x58;
        Fp x26722 = x26720 + x26721;
        Fp x26723 = x26653 * x19;
        Fp x26724 = x26722 + x26723;
        Fp x26725 = x26656 * x59;
        Fp x26726 = x26724 + x26725;
        Fp x26727 = x26659 * x20;
        Fp x26728 = x26726 + x26727;
        Fp x26729 = x26662 * x60;
        Fp x26730 = x26728 + x26729;
        args[2][128 * steps + cycle] = x26730;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x26730;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x26731 = host_outs[0];
          Fp x26732 = host_outs[1];
          args[2][129 * steps + cycle] = x26731;
          args[2][130 * steps + cycle] = x26732;
        }
        Fp x26733 = x26668 * x1;
        Fp x26734 = x26665 + x26733;
        Fp x26735 = x26671 * x3;
        Fp x26736 = x26734 + x26735;
        Fp x26737 = x26674 * x6;
        Fp x26738 = x26736 + x26737;
        Fp x26739 = x26677 * x11;
        Fp x26740 = x26738 + x26739;
        Fp x26741 = x26680 * x27;
        Fp x26742 = x26740 + x26741;
        if (x26742 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:66");
        Fp x26743 = args[2][129 * steps + ((cycle - 0) & mask)];
        Fp x26744 = args[2][130 * steps + ((cycle - 0) & mask)];
        {
          Fp x26745 = Fp(x26743.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x26745;
          Fp x26746 = x26743 - x26745;
          Fp x26747 = x26746 * x26;
          Fp x26748 = Fp(x26747.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x26748;
          Fp x26749 = x26747 - x26748;
          Fp x26750 = x26749 * x26;
          Fp x26751 = Fp(x26750.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x26751;
          Fp x26752 = x26750 - x26751;
          Fp x26753 = x26752 * x26;
          Fp x26754 = Fp(x26753.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x26754;
          Fp x26755 = x26753 - x26754;
          Fp x26756 = x26755 * x26;
          Fp x26757 = Fp(x26756.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x26757;
          Fp x26758 = x26756 - x26757;
          Fp x26759 = x26758 * x26;
          Fp x26760 = Fp(x26759.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x26760;
          Fp x26761 = x26759 - x26760;
          Fp x26762 = x26761 * x26;
          Fp x26763 = Fp(x26762.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x26763;
          Fp x26764 = x26762 - x26763;
          Fp x26765 = x26764 * x26;
          Fp x26766 = Fp(x26765.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x26766;
          Fp x26767 = x26765 - x26766;
          Fp x26768 = x26767 * x26;
          Fp x26769 = Fp(x26768.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x26769;
          Fp x26770 = x26768 - x26769;
          Fp x26771 = x26770 * x26;
          Fp x26772 = Fp(x26771.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x26772;
          Fp x26773 = x26771 - x26772;
          Fp x26774 = x26773 * x26;
          Fp x26775 = Fp(x26774.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x26775;
          Fp x26776 = x26774 - x26775;
          Fp x26777 = x26776 * x26;
          Fp x26778 = Fp(x26777.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x26778;
          Fp x26779 = x26777 - x26778;
          Fp x26780 = x26779 * x26;
          Fp x26781 = Fp(x26780.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x26781;
          Fp x26782 = x26780 - x26781;
          Fp x26783 = x26782 * x26;
          Fp x26784 = Fp(x26783.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x26784;
          Fp x26785 = x26783 - x26784;
          Fp x26786 = x26785 * x26;
          Fp x26787 = Fp(x26786.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x26787;
          Fp x26788 = x26786 - x26787;
          Fp x26789 = x26788 * x26;
          Fp x26790 = Fp(x26789.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x26790;
        }
        Fp x26791 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x26792 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x26793 = x26792 * x1;
        Fp x26794 = x26791 + x26793;
        Fp x26795 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x26796 = x26795 * x3;
        Fp x26797 = x26794 + x26796;
        Fp x26798 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x26799 = x26798 * x6;
        Fp x26800 = x26797 + x26799;
        Fp x26801 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x26802 = x26801 * x11;
        Fp x26803 = x26800 + x26802;
        Fp x26804 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x26805 = x26804 * x27;
        Fp x26806 = x26803 + x26805;
        Fp x26807 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x26808 = x26807 * x12;
        Fp x26809 = x26806 + x26808;
        Fp x26810 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x26811 = x26810 * x28;
        Fp x26812 = x26809 + x26811;
        Fp x26813 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x26814 = x26813 * x13;
        Fp x26815 = x26812 + x26814;
        Fp x26816 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x26817 = x26816 * x29;
        Fp x26818 = x26815 + x26817;
        Fp x26819 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x26820 = x26819 * x14;
        Fp x26821 = x26818 + x26820;
        Fp x26822 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x26823 = x26822 * x30;
        Fp x26824 = x26821 + x26823;
        Fp x26825 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x26826 = x26825 * x15;
        Fp x26827 = x26824 + x26826;
        Fp x26828 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x26829 = x26828 * x31;
        Fp x26830 = x26827 + x26829;
        Fp x26831 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x26832 = x26831 * x16;
        Fp x26833 = x26830 + x26832;
        Fp x26834 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x26835 = x26834 * x32;
        Fp x26836 = x26833 + x26835;
        Fp x26837 = x26743 - x26836;
        Fp x26838 = x26837 * x33;
        if (x26838 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:66");
        {
          Fp x26839 = Fp(x26744.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x26839;
          Fp x26840 = x26744 - x26839;
          Fp x26841 = x26840 * x26;
          Fp x26842 = Fp(x26841.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x26842;
          Fp x26843 = x26841 - x26842;
          Fp x26844 = x26843 * x26;
          Fp x26845 = Fp(x26844.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x26845;
          Fp x26846 = x26844 - x26845;
          Fp x26847 = x26846 * x26;
          Fp x26848 = Fp(x26847.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x26848;
          Fp x26849 = x26847 - x26848;
          Fp x26850 = x26849 * x26;
          Fp x26851 = Fp(x26850.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x26851;
          Fp x26852 = x26850 - x26851;
          Fp x26853 = x26852 * x26;
          Fp x26854 = Fp(x26853.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x26854;
          Fp x26855 = x26853 - x26854;
          Fp x26856 = x26855 * x26;
          Fp x26857 = Fp(x26856.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x26857;
          Fp x26858 = x26856 - x26857;
          Fp x26859 = x26858 * x26;
          Fp x26860 = Fp(x26859.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x26860;
          Fp x26861 = x26859 - x26860;
          Fp x26862 = x26861 * x26;
          Fp x26863 = Fp(x26862.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x26863;
          Fp x26864 = x26862 - x26863;
          Fp x26865 = x26864 * x26;
          Fp x26866 = Fp(x26865.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x26866;
          Fp x26867 = x26865 - x26866;
          Fp x26868 = x26867 * x26;
          Fp x26869 = Fp(x26868.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x26869;
          Fp x26870 = x26868 - x26869;
          Fp x26871 = x26870 * x26;
          Fp x26872 = Fp(x26871.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x26872;
          Fp x26873 = x26871 - x26872;
          Fp x26874 = x26873 * x26;
          Fp x26875 = Fp(x26874.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x26875;
          Fp x26876 = x26874 - x26875;
          Fp x26877 = x26876 * x26;
          Fp x26878 = Fp(x26877.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x26878;
          Fp x26879 = x26877 - x26878;
          Fp x26880 = x26879 * x26;
          Fp x26881 = Fp(x26880.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x26881;
          Fp x26882 = x26880 - x26881;
          Fp x26883 = x26882 * x26;
          Fp x26884 = Fp(x26883.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x26884;
        }
        Fp x26885 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x26886 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x26887 = x26886 * x1;
        Fp x26888 = x26885 + x26887;
        Fp x26889 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x26890 = x26889 * x3;
        Fp x26891 = x26888 + x26890;
        Fp x26892 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x26893 = x26892 * x6;
        Fp x26894 = x26891 + x26893;
        Fp x26895 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x26896 = x26895 * x11;
        Fp x26897 = x26894 + x26896;
        Fp x26898 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x26899 = x26898 * x27;
        Fp x26900 = x26897 + x26899;
        Fp x26901 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x26902 = x26901 * x12;
        Fp x26903 = x26900 + x26902;
        Fp x26904 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x26905 = x26904 * x28;
        Fp x26906 = x26903 + x26905;
        Fp x26907 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x26908 = x26907 * x13;
        Fp x26909 = x26906 + x26908;
        Fp x26910 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x26911 = x26910 * x29;
        Fp x26912 = x26909 + x26911;
        Fp x26913 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x26914 = x26913 * x14;
        Fp x26915 = x26912 + x26914;
        Fp x26916 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x26917 = x26916 * x30;
        Fp x26918 = x26915 + x26917;
        Fp x26919 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x26920 = x26919 * x15;
        Fp x26921 = x26918 + x26920;
        Fp x26922 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x26923 = x26922 * x31;
        Fp x26924 = x26921 + x26923;
        Fp x26925 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x26926 = x26925 * x16;
        Fp x26927 = x26924 + x26926;
        Fp x26928 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x26929 = x26928 * x32;
        Fp x26930 = x26927 + x26929;
        Fp x26931 = x26744 - x26930;
        Fp x26932 = x26931 * x33;
        if (x26932 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:66");
        {
          Fp x26933 = (x26544 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x26933;
          Fp x26934 = x26544 - x71;
          Fp x26935 = (x26934 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x26935;
          Fp x26936 = x26544 - x1;
          Fp x26937 = (x26936 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x26937;
          Fp x26938 = x26544 - x2;
          Fp x26939 = (x26938 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x26939;
        }
        Fp x26940 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x26941 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x26942 = x26941 * x1;
        Fp x26943 = x26940 + x26942;
        Fp x26944 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x26945 = x26944 * x2;
        Fp x26946 = x26943 + x26945;
        Fp x26947 = x26946 - x26544;
        if (x26947 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x26948 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x26949 = x26948 * x26812;
        Fp x26950 = x26816 * x1;
        Fp x26951 = x26813 + x26950;
        Fp x26952 = x26819 * x3;
        Fp x26953 = x26951 + x26952;
        Fp x26954 = x26822 * x6;
        Fp x26955 = x26953 + x26954;
        Fp x26956 = x26825 * x11;
        Fp x26957 = x26955 + x26956;
        Fp x26958 = x26828 * x27;
        Fp x26959 = x26957 + x26958;
        Fp x26960 = x26831 * x12;
        Fp x26961 = x26959 + x26960;
        Fp x26962 = x26834 * x28;
        Fp x26963 = x26961 + x26962;
        Fp x26964 = x26940 * x26963;
        Fp x26965 = x26949 + x26964;
        Fp x26966 = x26941 * x26906;
        Fp x26967 = x26965 + x26966;
        Fp x26968 = x26910 * x1;
        Fp x26969 = x26907 + x26968;
        Fp x26970 = x26913 * x3;
        Fp x26971 = x26969 + x26970;
        Fp x26972 = x26916 * x6;
        Fp x26973 = x26971 + x26972;
        Fp x26974 = x26919 * x11;
        Fp x26975 = x26973 + x26974;
        Fp x26976 = x26922 * x27;
        Fp x26977 = x26975 + x26976;
        Fp x26978 = x26925 * x12;
        Fp x26979 = x26977 + x26978;
        Fp x26980 = x26928 * x28;
        Fp x26981 = x26979 + x26980;
        Fp x26982 = x26944 * x26981;
        Fp x26983 = x26967 + x26982;
        {
          Fp x26984 = Fp(x26983.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x26984;
          Fp x26985 = x26983 - x26984;
          Fp x26986 = x26985 * x26;
          Fp x26987 = Fp(x26986.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x26987;
          Fp x26988 = x26986 - x26987;
          Fp x26989 = x26988 * x26;
          Fp x26990 = Fp(x26989.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x26990;
          Fp x26991 = x26989 - x26990;
          Fp x26992 = x26991 * x26;
          Fp x26993 = Fp(x26992.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x26993;
          Fp x26994 = x26992 - x26993;
          Fp x26995 = x26994 * x26;
          Fp x26996 = Fp(x26995.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x26996;
          Fp x26997 = x26995 - x26996;
          Fp x26998 = x26997 * x26;
          Fp x26999 = Fp(x26998.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x26999;
          Fp x27000 = x26998 - x26999;
          Fp x27001 = x27000 * x26;
          Fp x27002 = Fp(x27001.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x27002;
          Fp x27003 = x27001 - x27002;
          Fp x27004 = x27003 * x26;
          Fp x27005 = Fp(x27004.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x27005;
          Fp x27006 = x27004 - x27005;
          Fp x27007 = x27006 * x26;
          Fp x27008 = Fp(x27007.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x27008;
          Fp x27009 = x27007 - x27008;
          Fp x27010 = x27009 * x26;
          Fp x27011 = Fp(x27010.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x27011;
          Fp x27012 = x27010 - x27011;
          Fp x27013 = x27012 * x26;
          Fp x27014 = Fp(x27013.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x27014;
          Fp x27015 = x27013 - x27014;
          Fp x27016 = x27015 * x26;
          Fp x27017 = Fp(x27016.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x27017;
          Fp x27018 = x27016 - x27017;
          Fp x27019 = x27018 * x26;
          Fp x27020 = Fp(x27019.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x27020;
          Fp x27021 = x27019 - x27020;
          Fp x27022 = x27021 * x26;
          Fp x27023 = Fp(x27022.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x27023;
          Fp x27024 = x27022 - x27023;
          Fp x27025 = x27024 * x26;
          Fp x27026 = Fp(x27025.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x27026;
          Fp x27027 = x27025 - x27026;
          Fp x27028 = x27027 * x26;
          Fp x27029 = Fp(x27028.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x27029;
        }
        Fp x27030 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x27031 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x27032 = x27031 * x1;
        Fp x27033 = x27030 + x27032;
        Fp x27034 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x27035 = x27034 * x3;
        Fp x27036 = x27033 + x27035;
        Fp x27037 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x27038 = x27037 * x6;
        Fp x27039 = x27036 + x27038;
        Fp x27040 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x27041 = x27040 * x11;
        Fp x27042 = x27039 + x27041;
        Fp x27043 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x27044 = x27043 * x27;
        Fp x27045 = x27042 + x27044;
        Fp x27046 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x27047 = x27046 * x12;
        Fp x27048 = x27045 + x27047;
        Fp x27049 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x27050 = x27049 * x28;
        Fp x27051 = x27048 + x27050;
        Fp x27052 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x27053 = x27052 * x13;
        Fp x27054 = x27051 + x27053;
        Fp x27055 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x27056 = x27055 * x29;
        Fp x27057 = x27054 + x27056;
        Fp x27058 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x27059 = x27058 * x14;
        Fp x27060 = x27057 + x27059;
        Fp x27061 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x27062 = x27061 * x30;
        Fp x27063 = x27060 + x27062;
        Fp x27064 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x27065 = x27064 * x15;
        Fp x27066 = x27063 + x27065;
        Fp x27067 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x27068 = x27067 * x31;
        Fp x27069 = x27066 + x27068;
        Fp x27070 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x27071 = x27070 * x16;
        Fp x27072 = x27069 + x27071;
        Fp x27073 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x27074 = x27073 * x32;
        Fp x27075 = x27072 + x27074;
        Fp x27076 = x26983 - x27075;
        Fp x27077 = x27076 * x33;
        args[2][108 * steps + cycle] = x27077;
        Fp x27078 = args[2][108 * steps + ((cycle - 0) & mask)];
        {
          Fp x27079 = Fp(x27078.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x27079;
          Fp x27080 = x27078 - x27079;
          Fp x27081 = x27080 * x26;
          Fp x27082 = Fp(x27081.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x27082;
          Fp x27083 = x27081 - x27082;
          Fp x27084 = x27083 * x26;
          Fp x27085 = Fp(x27084.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x27085;
          Fp x27086 = x27084 - x27085;
          Fp x27087 = x27086 * x26;
          Fp x27088 = Fp(x27087.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x27088;
          Fp x27089 = x27087 - x27088;
          Fp x27090 = x27089 * x26;
          Fp x27091 = Fp(x27090.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x27091;
          Fp x27092 = x27090 - x27091;
          Fp x27093 = x27092 * x26;
          Fp x27094 = Fp(x27093.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x27094;
          Fp x27095 = x27093 - x27094;
          Fp x27096 = x27095 * x26;
          Fp x27097 = Fp(x27096.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x27097;
          Fp x27098 = x27096 - x27097;
          Fp x27099 = x27098 * x26;
          Fp x27100 = Fp(x27099.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x27100;
          Fp x27101 = x27099 - x27100;
          Fp x27102 = x27101 * x26;
          Fp x27103 = Fp(x27102.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x27103;
          Fp x27104 = x27102 - x27103;
          Fp x27105 = x27104 * x26;
          Fp x27106 = Fp(x27105.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x27106;
          Fp x27107 = x27105 - x27106;
          Fp x27108 = x27107 * x26;
          Fp x27109 = Fp(x27108.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x27109;
          Fp x27110 = x27108 - x27109;
          Fp x27111 = x27110 * x26;
          Fp x27112 = Fp(x27111.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x27112;
          Fp x27113 = x27111 - x27112;
          Fp x27114 = x27113 * x26;
          Fp x27115 = Fp(x27114.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x27115;
          Fp x27116 = x27114 - x27115;
          Fp x27117 = x27116 * x26;
          Fp x27118 = Fp(x27117.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x27118;
          Fp x27119 = x27117 - x27118;
          Fp x27120 = x27119 * x26;
          Fp x27121 = Fp(x27120.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x27121;
          Fp x27122 = x27120 - x27121;
          Fp x27123 = x27122 * x26;
          Fp x27124 = Fp(x27123.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x27124;
        }
        Fp x27125 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x27126 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x27127 = x27126 * x1;
        Fp x27128 = x27125 + x27127;
        Fp x27129 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x27130 = x27129 * x3;
        Fp x27131 = x27128 + x27130;
        Fp x27132 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x27133 = x27132 * x6;
        Fp x27134 = x27131 + x27133;
        Fp x27135 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x27136 = x27135 * x11;
        Fp x27137 = x27134 + x27136;
        Fp x27138 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x27139 = x27138 * x27;
        Fp x27140 = x27137 + x27139;
        Fp x27141 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x27142 = x27141 * x12;
        Fp x27143 = x27140 + x27142;
        Fp x27144 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x27145 = x27144 * x28;
        Fp x27146 = x27143 + x27145;
        Fp x27147 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x27148 = x27147 * x13;
        Fp x27149 = x27146 + x27148;
        Fp x27150 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x27151 = x27150 * x29;
        Fp x27152 = x27149 + x27151;
        Fp x27153 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x27154 = x27153 * x14;
        Fp x27155 = x27152 + x27154;
        Fp x27156 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x27157 = x27156 * x30;
        Fp x27158 = x27155 + x27157;
        Fp x27159 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x27160 = x27159 * x15;
        Fp x27161 = x27158 + x27160;
        Fp x27162 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x27163 = x27162 * x31;
        Fp x27164 = x27161 + x27163;
        Fp x27165 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x27166 = x27165 * x16;
        Fp x27167 = x27164 + x27166;
        Fp x27168 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x27169 = x27168 * x32;
        Fp x27170 = x27167 + x27169;
        Fp x27171 = x27078 - x27170;
        Fp x27172 = x27171 * x33;
        args[2][109 * steps + cycle] = x27172;
        {
          {
            Fp x27173 = (x27075 == 0) ? Fp(1) : Fp(0);
            Fp x27174 = x71 - x27173;
            args[2][114 * steps + cycle] = x27174;
            Fp x27175 = inv(x27075);
            args[2][115 * steps + cycle] = x27175;
          }
          Fp x27176 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x27177 = x27075 * x27176;
          Fp x27178 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x27179 = x27177 - x27178;
          if (x27179 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x27180 = x71 - x27178;
          Fp x27181 = x27180 * x27075;
          if (x27181 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x27182 = (x27170 == 0) ? Fp(1) : Fp(0);
            Fp x27183 = x71 - x27182;
            args[2][116 * steps + cycle] = x27183;
            Fp x27184 = inv(x27170);
            args[2][117 * steps + cycle] = x27184;
          }
          Fp x27185 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x27186 = x27170 * x27185;
          Fp x27187 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x27188 = x27186 - x27187;
          if (x27188 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x27189 = x71 - x27187;
          Fp x27190 = x27189 * x27170;
          if (x27190 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x27191 = x27180 * x27189;
          Fp x27192 = x71 - x27191;
          args[2][111 * steps + cycle] = x27192;
          Fp x27193 = x71 - x26928;
          Fp x27194 = x26680 * x27193;
          Fp x27195 = x71 - x27168;
          Fp x27196 = x27194 * x27195;
          Fp x27197 = x71 - x26680;
          Fp x27198 = x27197 * x26928;
          Fp x27199 = x27198 * x27168;
          Fp x27200 = x27196 + x27199;
          args[2][112 * steps + cycle] = x27200;
          Fp x27201 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x27202 = x27201 + x27168;
          Fp x27203 = x27201 * x1;
          Fp x27204 = x27203 * x27168;
          Fp x27205 = x27202 - x27204;
          args[2][113 * steps + cycle] = x27205;
        }
        args[2][100 * steps + cycle] = x27075;
        args[2][101 * steps + cycle] = x27170;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x27206 = x25783 + x3;
        args[2][104 * steps + cycle] = x27206;
        args[2][105 * steps + cycle] = x25805;
        Fp x27207 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x27208 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x27209 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x27210 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x27211 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x27212 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x25805;
        host_args[2] = x25783;
        host_args[3] = x26682;
        host_args[4] = x26586;
        host_args[5] = x26930;
        host_args[6] = x26836;
        host_args[7] = x27170;
        host_args[8] = x27075;
        host_args[9] = x27207;
        host_args[10] = x27208;
        host_args[11] = x27209;
        host_args[12] = x27210;
        host_args[13] = x27211;
        host_args[14] = x27212;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x27213 = args[2][74 * steps + ((cycle - 1) & mask)];
      if (x27213 != 0) {
        Fp x27214 = x25758 + x25760;
        Fp x27215 = x25759 + x25761;
        {
          Fp x27216 = Fp(x27214.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x27216;
          Fp x27217 = x27214 - x27216;
          Fp x27218 = x27217 * x26;
          Fp x27219 = Fp(x27218.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x27219;
          Fp x27220 = x27218 - x27219;
          Fp x27221 = x27220 * x26;
          Fp x27222 = Fp(x27221.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x27222;
          Fp x27223 = x27221 - x27222;
          Fp x27224 = x27223 * x26;
          Fp x27225 = Fp(x27224.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x27225;
          Fp x27226 = x27224 - x27225;
          Fp x27227 = x27226 * x26;
          Fp x27228 = Fp(x27227.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x27228;
          Fp x27229 = x27227 - x27228;
          Fp x27230 = x27229 * x26;
          Fp x27231 = Fp(x27230.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x27231;
          Fp x27232 = x27230 - x27231;
          Fp x27233 = x27232 * x26;
          Fp x27234 = Fp(x27233.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x27234;
          Fp x27235 = x27233 - x27234;
          Fp x27236 = x27235 * x26;
          Fp x27237 = Fp(x27236.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x27237;
          Fp x27238 = x27236 - x27237;
          Fp x27239 = x27238 * x26;
          Fp x27240 = Fp(x27239.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x27240;
          Fp x27241 = x27239 - x27240;
          Fp x27242 = x27241 * x26;
          Fp x27243 = Fp(x27242.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x27243;
          Fp x27244 = x27242 - x27243;
          Fp x27245 = x27244 * x26;
          Fp x27246 = Fp(x27245.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x27246;
          Fp x27247 = x27245 - x27246;
          Fp x27248 = x27247 * x26;
          Fp x27249 = Fp(x27248.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x27249;
          Fp x27250 = x27248 - x27249;
          Fp x27251 = x27250 * x26;
          Fp x27252 = Fp(x27251.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x27252;
          Fp x27253 = x27251 - x27252;
          Fp x27254 = x27253 * x26;
          Fp x27255 = Fp(x27254.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x27255;
          Fp x27256 = x27254 - x27255;
          Fp x27257 = x27256 * x26;
          Fp x27258 = Fp(x27257.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x27258;
          Fp x27259 = x27257 - x27258;
          Fp x27260 = x27259 * x26;
          Fp x27261 = Fp(x27260.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x27261;
        }
        Fp x27262 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x27263 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x27264 = x27263 * x1;
        Fp x27265 = x27262 + x27264;
        Fp x27266 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x27267 = x27266 * x3;
        Fp x27268 = x27265 + x27267;
        Fp x27269 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x27270 = x27269 * x6;
        Fp x27271 = x27268 + x27270;
        Fp x27272 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x27273 = x27272 * x11;
        Fp x27274 = x27271 + x27273;
        Fp x27275 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x27276 = x27275 * x27;
        Fp x27277 = x27274 + x27276;
        Fp x27278 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x27279 = x27278 * x12;
        Fp x27280 = x27277 + x27279;
        Fp x27281 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x27282 = x27281 * x28;
        Fp x27283 = x27280 + x27282;
        Fp x27284 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x27285 = x27284 * x13;
        Fp x27286 = x27283 + x27285;
        Fp x27287 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x27288 = x27287 * x29;
        Fp x27289 = x27286 + x27288;
        Fp x27290 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x27291 = x27290 * x14;
        Fp x27292 = x27289 + x27291;
        Fp x27293 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x27294 = x27293 * x30;
        Fp x27295 = x27292 + x27294;
        Fp x27296 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x27297 = x27296 * x15;
        Fp x27298 = x27295 + x27297;
        Fp x27299 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x27300 = x27299 * x31;
        Fp x27301 = x27298 + x27300;
        Fp x27302 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x27303 = x27302 * x16;
        Fp x27304 = x27301 + x27303;
        Fp x27305 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x27306 = x27305 * x32;
        Fp x27307 = x27304 + x27306;
        Fp x27308 = x27214 - x27307;
        Fp x27309 = x27308 * x33;
        args[2][106 * steps + cycle] = x27309;
        Fp x27310 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x27311 = x27215 + x27310;
        {
          Fp x27312 = Fp(x27311.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x27312;
          Fp x27313 = x27311 - x27312;
          Fp x27314 = x27313 * x26;
          Fp x27315 = Fp(x27314.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x27315;
          Fp x27316 = x27314 - x27315;
          Fp x27317 = x27316 * x26;
          Fp x27318 = Fp(x27317.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x27318;
          Fp x27319 = x27317 - x27318;
          Fp x27320 = x27319 * x26;
          Fp x27321 = Fp(x27320.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x27321;
          Fp x27322 = x27320 - x27321;
          Fp x27323 = x27322 * x26;
          Fp x27324 = Fp(x27323.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x27324;
          Fp x27325 = x27323 - x27324;
          Fp x27326 = x27325 * x26;
          Fp x27327 = Fp(x27326.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x27327;
          Fp x27328 = x27326 - x27327;
          Fp x27329 = x27328 * x26;
          Fp x27330 = Fp(x27329.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x27330;
          Fp x27331 = x27329 - x27330;
          Fp x27332 = x27331 * x26;
          Fp x27333 = Fp(x27332.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x27333;
          Fp x27334 = x27332 - x27333;
          Fp x27335 = x27334 * x26;
          Fp x27336 = Fp(x27335.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x27336;
          Fp x27337 = x27335 - x27336;
          Fp x27338 = x27337 * x26;
          Fp x27339 = Fp(x27338.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x27339;
          Fp x27340 = x27338 - x27339;
          Fp x27341 = x27340 * x26;
          Fp x27342 = Fp(x27341.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x27342;
          Fp x27343 = x27341 - x27342;
          Fp x27344 = x27343 * x26;
          Fp x27345 = Fp(x27344.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x27345;
          Fp x27346 = x27344 - x27345;
          Fp x27347 = x27346 * x26;
          Fp x27348 = Fp(x27347.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x27348;
          Fp x27349 = x27347 - x27348;
          Fp x27350 = x27349 * x26;
          Fp x27351 = Fp(x27350.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x27351;
          Fp x27352 = x27350 - x27351;
          Fp x27353 = x27352 * x26;
          Fp x27354 = Fp(x27353.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x27354;
          Fp x27355 = x27353 - x27354;
          Fp x27356 = x27355 * x26;
          Fp x27357 = Fp(x27356.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x27357;
        }
        Fp x27358 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x27359 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x27360 = x27359 * x1;
        Fp x27361 = x27358 + x27360;
        Fp x27362 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x27363 = x27362 * x3;
        Fp x27364 = x27361 + x27363;
        Fp x27365 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x27366 = x27365 * x6;
        Fp x27367 = x27364 + x27366;
        Fp x27368 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x27369 = x27368 * x11;
        Fp x27370 = x27367 + x27369;
        Fp x27371 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x27372 = x27371 * x27;
        Fp x27373 = x27370 + x27372;
        Fp x27374 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x27375 = x27374 * x12;
        Fp x27376 = x27373 + x27375;
        Fp x27377 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x27378 = x27377 * x28;
        Fp x27379 = x27376 + x27378;
        Fp x27380 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x27381 = x27380 * x13;
        Fp x27382 = x27379 + x27381;
        Fp x27383 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x27384 = x27383 * x29;
        Fp x27385 = x27382 + x27384;
        Fp x27386 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x27387 = x27386 * x14;
        Fp x27388 = x27385 + x27387;
        Fp x27389 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x27390 = x27389 * x30;
        Fp x27391 = x27388 + x27390;
        Fp x27392 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x27393 = x27392 * x15;
        Fp x27394 = x27391 + x27393;
        Fp x27395 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x27396 = x27395 * x31;
        Fp x27397 = x27394 + x27396;
        Fp x27398 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x27399 = x27398 * x16;
        Fp x27400 = x27397 + x27399;
        Fp x27401 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x27402 = x27401 * x32;
        Fp x27403 = x27400 + x27402;
        Fp x27404 = x27311 - x27403;
        Fp x27405 = x27404 * x33;
        args[2][107 * steps + cycle] = x27405;
        Fp x27406 = x27269 * x1;
        Fp x27407 = x27266 + x27406;
        Fp x27408 = x27272 * x3;
        Fp x27409 = x27407 + x27408;
        Fp x27410 = x27275 * x6;
        Fp x27411 = x27409 + x27410;
        Fp x27412 = x27278 * x11;
        Fp x27413 = x27411 + x27412;
        Fp x27414 = x27281 * x27;
        Fp x27415 = x27413 + x27414;
        Fp x27416 = x27284 * x12;
        Fp x27417 = x27415 + x27416;
        Fp x27418 = x27287 * x28;
        Fp x27419 = x27417 + x27418;
        Fp x27420 = x27290 * x13;
        Fp x27421 = x27419 + x27420;
        Fp x27422 = x27293 * x29;
        Fp x27423 = x27421 + x27422;
        Fp x27424 = x27296 * x14;
        Fp x27425 = x27423 + x27424;
        Fp x27426 = x27299 * x30;
        Fp x27427 = x27425 + x27426;
        Fp x27428 = x27302 * x15;
        Fp x27429 = x27427 + x27428;
        Fp x27430 = x27305 * x31;
        Fp x27431 = x27429 + x27430;
        Fp x27432 = x27358 * x16;
        Fp x27433 = x27431 + x27432;
        Fp x27434 = x27359 * x32;
        Fp x27435 = x27433 + x27434;
        Fp x27436 = x27362 * x17;
        Fp x27437 = x27435 + x27436;
        Fp x27438 = x27365 * x57;
        Fp x27439 = x27437 + x27438;
        Fp x27440 = x27368 * x18;
        Fp x27441 = x27439 + x27440;
        Fp x27442 = x27371 * x58;
        Fp x27443 = x27441 + x27442;
        Fp x27444 = x27374 * x19;
        Fp x27445 = x27443 + x27444;
        Fp x27446 = x27377 * x59;
        Fp x27447 = x27445 + x27446;
        Fp x27448 = x27380 * x20;
        Fp x27449 = x27447 + x27448;
        Fp x27450 = x27383 * x60;
        Fp x27451 = x27449 + x27450;
        args[2][128 * steps + cycle] = x27451;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x27451;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x27452 = host_outs[0];
          Fp x27453 = host_outs[1];
          args[2][129 * steps + cycle] = x27452;
          args[2][130 * steps + cycle] = x27453;
        }
        Fp x27454 = x27389 * x1;
        Fp x27455 = x27386 + x27454;
        Fp x27456 = x27392 * x3;
        Fp x27457 = x27455 + x27456;
        Fp x27458 = x27395 * x6;
        Fp x27459 = x27457 + x27458;
        Fp x27460 = x27398 * x11;
        Fp x27461 = x27459 + x27460;
        Fp x27462 = x27401 * x27;
        Fp x27463 = x27461 + x27462;
        if (x27463 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:67");
        Fp x27464 = args[2][129 * steps + ((cycle - 0) & mask)];
        Fp x27465 = args[2][130 * steps + ((cycle - 0) & mask)];
        {
          Fp x27466 = Fp(x27464.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x27466;
          Fp x27467 = x27464 - x27466;
          Fp x27468 = x27467 * x26;
          Fp x27469 = Fp(x27468.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x27469;
          Fp x27470 = x27468 - x27469;
          Fp x27471 = x27470 * x26;
          Fp x27472 = Fp(x27471.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x27472;
          Fp x27473 = x27471 - x27472;
          Fp x27474 = x27473 * x26;
          Fp x27475 = Fp(x27474.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x27475;
          Fp x27476 = x27474 - x27475;
          Fp x27477 = x27476 * x26;
          Fp x27478 = Fp(x27477.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x27478;
          Fp x27479 = x27477 - x27478;
          Fp x27480 = x27479 * x26;
          Fp x27481 = Fp(x27480.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x27481;
          Fp x27482 = x27480 - x27481;
          Fp x27483 = x27482 * x26;
          Fp x27484 = Fp(x27483.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x27484;
          Fp x27485 = x27483 - x27484;
          Fp x27486 = x27485 * x26;
          Fp x27487 = Fp(x27486.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x27487;
          Fp x27488 = x27486 - x27487;
          Fp x27489 = x27488 * x26;
          Fp x27490 = Fp(x27489.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x27490;
          Fp x27491 = x27489 - x27490;
          Fp x27492 = x27491 * x26;
          Fp x27493 = Fp(x27492.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x27493;
          Fp x27494 = x27492 - x27493;
          Fp x27495 = x27494 * x26;
          Fp x27496 = Fp(x27495.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x27496;
          Fp x27497 = x27495 - x27496;
          Fp x27498 = x27497 * x26;
          Fp x27499 = Fp(x27498.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x27499;
          Fp x27500 = x27498 - x27499;
          Fp x27501 = x27500 * x26;
          Fp x27502 = Fp(x27501.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x27502;
          Fp x27503 = x27501 - x27502;
          Fp x27504 = x27503 * x26;
          Fp x27505 = Fp(x27504.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x27505;
          Fp x27506 = x27504 - x27505;
          Fp x27507 = x27506 * x26;
          Fp x27508 = Fp(x27507.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x27508;
          Fp x27509 = x27507 - x27508;
          Fp x27510 = x27509 * x26;
          Fp x27511 = Fp(x27510.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x27511;
        }
        Fp x27512 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x27513 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x27514 = x27513 * x1;
        Fp x27515 = x27512 + x27514;
        Fp x27516 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x27517 = x27516 * x3;
        Fp x27518 = x27515 + x27517;
        Fp x27519 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x27520 = x27519 * x6;
        Fp x27521 = x27518 + x27520;
        Fp x27522 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x27523 = x27522 * x11;
        Fp x27524 = x27521 + x27523;
        Fp x27525 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x27526 = x27525 * x27;
        Fp x27527 = x27524 + x27526;
        Fp x27528 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x27529 = x27528 * x12;
        Fp x27530 = x27527 + x27529;
        Fp x27531 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x27532 = x27531 * x28;
        Fp x27533 = x27530 + x27532;
        Fp x27534 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x27535 = x27534 * x13;
        Fp x27536 = x27533 + x27535;
        Fp x27537 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x27538 = x27537 * x29;
        Fp x27539 = x27536 + x27538;
        Fp x27540 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x27541 = x27540 * x14;
        Fp x27542 = x27539 + x27541;
        Fp x27543 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x27544 = x27543 * x30;
        Fp x27545 = x27542 + x27544;
        Fp x27546 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x27547 = x27546 * x15;
        Fp x27548 = x27545 + x27547;
        Fp x27549 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x27550 = x27549 * x31;
        Fp x27551 = x27548 + x27550;
        Fp x27552 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x27553 = x27552 * x16;
        Fp x27554 = x27551 + x27553;
        Fp x27555 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x27556 = x27555 * x32;
        Fp x27557 = x27554 + x27556;
        Fp x27558 = x27464 - x27557;
        Fp x27559 = x27558 * x33;
        if (x27559 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:67");
        {
          Fp x27560 = Fp(x27465.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x27560;
          Fp x27561 = x27465 - x27560;
          Fp x27562 = x27561 * x26;
          Fp x27563 = Fp(x27562.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x27563;
          Fp x27564 = x27562 - x27563;
          Fp x27565 = x27564 * x26;
          Fp x27566 = Fp(x27565.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x27566;
          Fp x27567 = x27565 - x27566;
          Fp x27568 = x27567 * x26;
          Fp x27569 = Fp(x27568.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x27569;
          Fp x27570 = x27568 - x27569;
          Fp x27571 = x27570 * x26;
          Fp x27572 = Fp(x27571.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x27572;
          Fp x27573 = x27571 - x27572;
          Fp x27574 = x27573 * x26;
          Fp x27575 = Fp(x27574.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x27575;
          Fp x27576 = x27574 - x27575;
          Fp x27577 = x27576 * x26;
          Fp x27578 = Fp(x27577.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x27578;
          Fp x27579 = x27577 - x27578;
          Fp x27580 = x27579 * x26;
          Fp x27581 = Fp(x27580.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x27581;
          Fp x27582 = x27580 - x27581;
          Fp x27583 = x27582 * x26;
          Fp x27584 = Fp(x27583.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x27584;
          Fp x27585 = x27583 - x27584;
          Fp x27586 = x27585 * x26;
          Fp x27587 = Fp(x27586.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x27587;
          Fp x27588 = x27586 - x27587;
          Fp x27589 = x27588 * x26;
          Fp x27590 = Fp(x27589.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x27590;
          Fp x27591 = x27589 - x27590;
          Fp x27592 = x27591 * x26;
          Fp x27593 = Fp(x27592.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x27593;
          Fp x27594 = x27592 - x27593;
          Fp x27595 = x27594 * x26;
          Fp x27596 = Fp(x27595.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x27596;
          Fp x27597 = x27595 - x27596;
          Fp x27598 = x27597 * x26;
          Fp x27599 = Fp(x27598.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x27599;
          Fp x27600 = x27598 - x27599;
          Fp x27601 = x27600 * x26;
          Fp x27602 = Fp(x27601.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x27602;
          Fp x27603 = x27601 - x27602;
          Fp x27604 = x27603 * x26;
          Fp x27605 = Fp(x27604.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x27605;
        }
        Fp x27606 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x27607 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x27608 = x27607 * x1;
        Fp x27609 = x27606 + x27608;
        Fp x27610 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x27611 = x27610 * x3;
        Fp x27612 = x27609 + x27611;
        Fp x27613 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x27614 = x27613 * x6;
        Fp x27615 = x27612 + x27614;
        Fp x27616 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x27617 = x27616 * x11;
        Fp x27618 = x27615 + x27617;
        Fp x27619 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x27620 = x27619 * x27;
        Fp x27621 = x27618 + x27620;
        Fp x27622 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x27623 = x27622 * x12;
        Fp x27624 = x27621 + x27623;
        Fp x27625 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x27626 = x27625 * x28;
        Fp x27627 = x27624 + x27626;
        Fp x27628 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x27629 = x27628 * x13;
        Fp x27630 = x27627 + x27629;
        Fp x27631 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x27632 = x27631 * x29;
        Fp x27633 = x27630 + x27632;
        Fp x27634 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x27635 = x27634 * x14;
        Fp x27636 = x27633 + x27635;
        Fp x27637 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x27638 = x27637 * x30;
        Fp x27639 = x27636 + x27638;
        Fp x27640 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x27641 = x27640 * x15;
        Fp x27642 = x27639 + x27641;
        Fp x27643 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x27644 = x27643 * x31;
        Fp x27645 = x27642 + x27644;
        Fp x27646 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x27647 = x27646 * x16;
        Fp x27648 = x27645 + x27647;
        Fp x27649 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x27650 = x27649 * x32;
        Fp x27651 = x27648 + x27650;
        Fp x27652 = x27465 - x27651;
        Fp x27653 = x27652 * x33;
        if (x27653 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:67");
        {
          Fp x27654 = (x27265 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x27654;
          Fp x27655 = x27265 - x71;
          Fp x27656 = (x27655 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x27656;
          Fp x27657 = x27265 - x1;
          Fp x27658 = (x27657 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x27658;
          Fp x27659 = x27265 - x2;
          Fp x27660 = (x27659 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x27660;
        }
        Fp x27661 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x27662 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x27663 = x27662 * x1;
        Fp x27664 = x27661 + x27663;
        Fp x27665 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x27666 = x27665 * x2;
        Fp x27667 = x27664 + x27666;
        Fp x27668 = x27667 - x27265;
        if (x27668 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        if (x27262 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.cpp:64");
        Fp x27669 = x71 - x27263;
        Fp x27670 = x27669 * x27557;
        Fp x27671 = x27263 * x27651;
        Fp x27672 = x27670 + x27671;
        {
          Fp x27673 = Fp(x27672.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x27673;
          Fp x27674 = x27672 - x27673;
          Fp x27675 = x27674 * x26;
          Fp x27676 = Fp(x27675.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x27676;
          Fp x27677 = x27675 - x27676;
          Fp x27678 = x27677 * x26;
          Fp x27679 = Fp(x27678.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x27679;
          Fp x27680 = x27678 - x27679;
          Fp x27681 = x27680 * x26;
          Fp x27682 = Fp(x27681.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x27682;
          Fp x27683 = x27681 - x27682;
          Fp x27684 = x27683 * x26;
          Fp x27685 = Fp(x27684.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x27685;
          Fp x27686 = x27684 - x27685;
          Fp x27687 = x27686 * x26;
          Fp x27688 = Fp(x27687.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x27688;
          Fp x27689 = x27687 - x27688;
          Fp x27690 = x27689 * x26;
          Fp x27691 = Fp(x27690.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x27691;
          Fp x27692 = x27690 - x27691;
          Fp x27693 = x27692 * x26;
          Fp x27694 = Fp(x27693.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x27694;
          Fp x27695 = x27693 - x27694;
          Fp x27696 = x27695 * x26;
          Fp x27697 = Fp(x27696.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x27697;
          Fp x27698 = x27696 - x27697;
          Fp x27699 = x27698 * x26;
          Fp x27700 = Fp(x27699.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x27700;
          Fp x27701 = x27699 - x27700;
          Fp x27702 = x27701 * x26;
          Fp x27703 = Fp(x27702.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x27703;
          Fp x27704 = x27702 - x27703;
          Fp x27705 = x27704 * x26;
          Fp x27706 = Fp(x27705.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x27706;
          Fp x27707 = x27705 - x27706;
          Fp x27708 = x27707 * x26;
          Fp x27709 = Fp(x27708.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x27709;
          Fp x27710 = x27708 - x27709;
          Fp x27711 = x27710 * x26;
          Fp x27712 = Fp(x27711.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x27712;
          Fp x27713 = x27711 - x27712;
          Fp x27714 = x27713 * x26;
          Fp x27715 = Fp(x27714.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x27715;
          Fp x27716 = x27714 - x27715;
          Fp x27717 = x27716 * x26;
          Fp x27718 = Fp(x27717.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x27718;
        }
        Fp x27719 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x27720 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x27721 = x27720 * x1;
        Fp x27722 = x27719 + x27721;
        Fp x27723 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x27724 = x27723 * x3;
        Fp x27725 = x27722 + x27724;
        Fp x27726 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x27727 = x27726 * x6;
        Fp x27728 = x27725 + x27727;
        Fp x27729 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x27730 = x27729 * x11;
        Fp x27731 = x27728 + x27730;
        Fp x27732 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x27733 = x27732 * x27;
        Fp x27734 = x27731 + x27733;
        Fp x27735 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x27736 = x27735 * x12;
        Fp x27737 = x27734 + x27736;
        Fp x27738 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x27739 = x27738 * x28;
        Fp x27740 = x27737 + x27739;
        Fp x27741 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x27742 = x27741 * x13;
        Fp x27743 = x27740 + x27742;
        Fp x27744 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x27745 = x27744 * x29;
        Fp x27746 = x27743 + x27745;
        Fp x27747 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x27748 = x27747 * x14;
        Fp x27749 = x27746 + x27748;
        Fp x27750 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x27751 = x27750 * x30;
        Fp x27752 = x27749 + x27751;
        Fp x27753 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x27754 = x27753 * x15;
        Fp x27755 = x27752 + x27754;
        Fp x27756 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x27757 = x27756 * x31;
        Fp x27758 = x27755 + x27757;
        Fp x27759 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x27760 = x27759 * x16;
        Fp x27761 = x27758 + x27760;
        Fp x27762 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x27763 = x27762 * x32;
        Fp x27764 = x27761 + x27763;
        Fp x27765 = x27672 - x27764;
        Fp x27766 = x27765 * x33;
        args[2][108 * steps + cycle] = x27766;
        Fp x27767 = args[2][108 * steps + ((cycle - 0) & mask)];
        {
          Fp x27768 = Fp(x27767.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x27768;
          Fp x27769 = x27767 - x27768;
          Fp x27770 = x27769 * x26;
          Fp x27771 = Fp(x27770.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x27771;
          Fp x27772 = x27770 - x27771;
          Fp x27773 = x27772 * x26;
          Fp x27774 = Fp(x27773.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x27774;
          Fp x27775 = x27773 - x27774;
          Fp x27776 = x27775 * x26;
          Fp x27777 = Fp(x27776.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x27777;
          Fp x27778 = x27776 - x27777;
          Fp x27779 = x27778 * x26;
          Fp x27780 = Fp(x27779.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x27780;
          Fp x27781 = x27779 - x27780;
          Fp x27782 = x27781 * x26;
          Fp x27783 = Fp(x27782.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x27783;
          Fp x27784 = x27782 - x27783;
          Fp x27785 = x27784 * x26;
          Fp x27786 = Fp(x27785.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x27786;
          Fp x27787 = x27785 - x27786;
          Fp x27788 = x27787 * x26;
          Fp x27789 = Fp(x27788.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x27789;
          Fp x27790 = x27788 - x27789;
          Fp x27791 = x27790 * x26;
          Fp x27792 = Fp(x27791.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x27792;
          Fp x27793 = x27791 - x27792;
          Fp x27794 = x27793 * x26;
          Fp x27795 = Fp(x27794.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x27795;
          Fp x27796 = x27794 - x27795;
          Fp x27797 = x27796 * x26;
          Fp x27798 = Fp(x27797.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x27798;
          Fp x27799 = x27797 - x27798;
          Fp x27800 = x27799 * x26;
          Fp x27801 = Fp(x27800.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x27801;
          Fp x27802 = x27800 - x27801;
          Fp x27803 = x27802 * x26;
          Fp x27804 = Fp(x27803.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x27804;
          Fp x27805 = x27803 - x27804;
          Fp x27806 = x27805 * x26;
          Fp x27807 = Fp(x27806.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x27807;
          Fp x27808 = x27806 - x27807;
          Fp x27809 = x27808 * x26;
          Fp x27810 = Fp(x27809.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x27810;
          Fp x27811 = x27809 - x27810;
          Fp x27812 = x27811 * x26;
          Fp x27813 = Fp(x27812.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x27813;
        }
        Fp x27814 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x27815 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x27816 = x27815 * x1;
        Fp x27817 = x27814 + x27816;
        Fp x27818 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x27819 = x27818 * x3;
        Fp x27820 = x27817 + x27819;
        Fp x27821 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x27822 = x27821 * x6;
        Fp x27823 = x27820 + x27822;
        Fp x27824 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x27825 = x27824 * x11;
        Fp x27826 = x27823 + x27825;
        Fp x27827 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x27828 = x27827 * x27;
        Fp x27829 = x27826 + x27828;
        Fp x27830 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x27831 = x27830 * x12;
        Fp x27832 = x27829 + x27831;
        Fp x27833 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x27834 = x27833 * x28;
        Fp x27835 = x27832 + x27834;
        Fp x27836 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x27837 = x27836 * x13;
        Fp x27838 = x27835 + x27837;
        Fp x27839 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x27840 = x27839 * x29;
        Fp x27841 = x27838 + x27840;
        Fp x27842 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x27843 = x27842 * x14;
        Fp x27844 = x27841 + x27843;
        Fp x27845 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x27846 = x27845 * x30;
        Fp x27847 = x27844 + x27846;
        Fp x27848 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x27849 = x27848 * x15;
        Fp x27850 = x27847 + x27849;
        Fp x27851 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x27852 = x27851 * x31;
        Fp x27853 = x27850 + x27852;
        Fp x27854 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x27855 = x27854 * x16;
        Fp x27856 = x27853 + x27855;
        Fp x27857 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x27858 = x27857 * x32;
        Fp x27859 = x27856 + x27858;
        Fp x27860 = x27767 - x27859;
        Fp x27861 = x27860 * x33;
        args[2][109 * steps + cycle] = x27861;
        {
          {
            Fp x27862 = (x27764 == 0) ? Fp(1) : Fp(0);
            Fp x27863 = x71 - x27862;
            args[2][114 * steps + cycle] = x27863;
            Fp x27864 = inv(x27764);
            args[2][115 * steps + cycle] = x27864;
          }
          Fp x27865 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x27866 = x27764 * x27865;
          Fp x27867 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x27868 = x27866 - x27867;
          if (x27868 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x27869 = x71 - x27867;
          Fp x27870 = x27869 * x27764;
          if (x27870 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x27871 = (x27859 == 0) ? Fp(1) : Fp(0);
            Fp x27872 = x71 - x27871;
            args[2][116 * steps + cycle] = x27872;
            Fp x27873 = inv(x27859);
            args[2][117 * steps + cycle] = x27873;
          }
          Fp x27874 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x27875 = x27859 * x27874;
          Fp x27876 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x27877 = x27875 - x27876;
          if (x27877 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x27878 = x71 - x27876;
          Fp x27879 = x27878 * x27859;
          if (x27879 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x27880 = x27869 * x27878;
          Fp x27881 = x71 - x27880;
          args[2][111 * steps + cycle] = x27881;
          Fp x27882 = x71 - x27649;
          Fp x27883 = x27401 * x27882;
          Fp x27884 = x71 - x27857;
          Fp x27885 = x27883 * x27884;
          Fp x27886 = x71 - x27401;
          Fp x27887 = x27886 * x27649;
          Fp x27888 = x27887 * x27857;
          Fp x27889 = x27885 + x27888;
          args[2][112 * steps + cycle] = x27889;
          Fp x27890 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x27891 = x27890 + x27857;
          Fp x27892 = x27890 * x1;
          Fp x27893 = x27892 * x27857;
          Fp x27894 = x27891 - x27893;
          args[2][113 * steps + cycle] = x27894;
        }
        args[2][100 * steps + cycle] = x27764;
        args[2][101 * steps + cycle] = x27859;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x27895 = x25783 + x3;
        args[2][104 * steps + cycle] = x27895;
        args[2][105 * steps + cycle] = x25805;
        Fp x27896 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x27897 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x27898 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x27899 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x27900 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x27901 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x25805;
        host_args[2] = x25783;
        host_args[3] = x27403;
        host_args[4] = x27307;
        host_args[5] = x27651;
        host_args[6] = x27557;
        host_args[7] = x27859;
        host_args[8] = x27764;
        host_args[9] = x27896;
        host_args[10] = x27897;
        host_args[11] = x27898;
        host_args[12] = x27899;
        host_args[13] = x27900;
        host_args[14] = x27901;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x27902 = args[2][75 * steps + ((cycle - 1) & mask)];
      if (x27902 != 0) {
        Fp x27903 = x25758 + x25760;
        Fp x27904 = x25759 + x25761;
        {
          Fp x27905 = Fp(x27903.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x27905;
          Fp x27906 = x27903 - x27905;
          Fp x27907 = x27906 * x26;
          Fp x27908 = Fp(x27907.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x27908;
          Fp x27909 = x27907 - x27908;
          Fp x27910 = x27909 * x26;
          Fp x27911 = Fp(x27910.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x27911;
          Fp x27912 = x27910 - x27911;
          Fp x27913 = x27912 * x26;
          Fp x27914 = Fp(x27913.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x27914;
          Fp x27915 = x27913 - x27914;
          Fp x27916 = x27915 * x26;
          Fp x27917 = Fp(x27916.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x27917;
          Fp x27918 = x27916 - x27917;
          Fp x27919 = x27918 * x26;
          Fp x27920 = Fp(x27919.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x27920;
          Fp x27921 = x27919 - x27920;
          Fp x27922 = x27921 * x26;
          Fp x27923 = Fp(x27922.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x27923;
          Fp x27924 = x27922 - x27923;
          Fp x27925 = x27924 * x26;
          Fp x27926 = Fp(x27925.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x27926;
          Fp x27927 = x27925 - x27926;
          Fp x27928 = x27927 * x26;
          Fp x27929 = Fp(x27928.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x27929;
          Fp x27930 = x27928 - x27929;
          Fp x27931 = x27930 * x26;
          Fp x27932 = Fp(x27931.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x27932;
          Fp x27933 = x27931 - x27932;
          Fp x27934 = x27933 * x26;
          Fp x27935 = Fp(x27934.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x27935;
          Fp x27936 = x27934 - x27935;
          Fp x27937 = x27936 * x26;
          Fp x27938 = Fp(x27937.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x27938;
          Fp x27939 = x27937 - x27938;
          Fp x27940 = x27939 * x26;
          Fp x27941 = Fp(x27940.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x27941;
          Fp x27942 = x27940 - x27941;
          Fp x27943 = x27942 * x26;
          Fp x27944 = Fp(x27943.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x27944;
          Fp x27945 = x27943 - x27944;
          Fp x27946 = x27945 * x26;
          Fp x27947 = Fp(x27946.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x27947;
          Fp x27948 = x27946 - x27947;
          Fp x27949 = x27948 * x26;
          Fp x27950 = Fp(x27949.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x27950;
        }
        Fp x27951 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x27952 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x27953 = x27952 * x1;
        Fp x27954 = x27951 + x27953;
        Fp x27955 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x27956 = x27955 * x3;
        Fp x27957 = x27954 + x27956;
        Fp x27958 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x27959 = x27958 * x6;
        Fp x27960 = x27957 + x27959;
        Fp x27961 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x27962 = x27961 * x11;
        Fp x27963 = x27960 + x27962;
        Fp x27964 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x27965 = x27964 * x27;
        Fp x27966 = x27963 + x27965;
        Fp x27967 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x27968 = x27967 * x12;
        Fp x27969 = x27966 + x27968;
        Fp x27970 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x27971 = x27970 * x28;
        Fp x27972 = x27969 + x27971;
        Fp x27973 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x27974 = x27973 * x13;
        Fp x27975 = x27972 + x27974;
        Fp x27976 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x27977 = x27976 * x29;
        Fp x27978 = x27975 + x27977;
        Fp x27979 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x27980 = x27979 * x14;
        Fp x27981 = x27978 + x27980;
        Fp x27982 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x27983 = x27982 * x30;
        Fp x27984 = x27981 + x27983;
        Fp x27985 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x27986 = x27985 * x15;
        Fp x27987 = x27984 + x27986;
        Fp x27988 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x27989 = x27988 * x31;
        Fp x27990 = x27987 + x27989;
        Fp x27991 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x27992 = x27991 * x16;
        Fp x27993 = x27990 + x27992;
        Fp x27994 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x27995 = x27994 * x32;
        Fp x27996 = x27993 + x27995;
        Fp x27997 = x27903 - x27996;
        Fp x27998 = x27997 * x33;
        args[2][106 * steps + cycle] = x27998;
        Fp x27999 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x28000 = x27904 + x27999;
        {
          Fp x28001 = Fp(x28000.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x28001;
          Fp x28002 = x28000 - x28001;
          Fp x28003 = x28002 * x26;
          Fp x28004 = Fp(x28003.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x28004;
          Fp x28005 = x28003 - x28004;
          Fp x28006 = x28005 * x26;
          Fp x28007 = Fp(x28006.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x28007;
          Fp x28008 = x28006 - x28007;
          Fp x28009 = x28008 * x26;
          Fp x28010 = Fp(x28009.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x28010;
          Fp x28011 = x28009 - x28010;
          Fp x28012 = x28011 * x26;
          Fp x28013 = Fp(x28012.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x28013;
          Fp x28014 = x28012 - x28013;
          Fp x28015 = x28014 * x26;
          Fp x28016 = Fp(x28015.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x28016;
          Fp x28017 = x28015 - x28016;
          Fp x28018 = x28017 * x26;
          Fp x28019 = Fp(x28018.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x28019;
          Fp x28020 = x28018 - x28019;
          Fp x28021 = x28020 * x26;
          Fp x28022 = Fp(x28021.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x28022;
          Fp x28023 = x28021 - x28022;
          Fp x28024 = x28023 * x26;
          Fp x28025 = Fp(x28024.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x28025;
          Fp x28026 = x28024 - x28025;
          Fp x28027 = x28026 * x26;
          Fp x28028 = Fp(x28027.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x28028;
          Fp x28029 = x28027 - x28028;
          Fp x28030 = x28029 * x26;
          Fp x28031 = Fp(x28030.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x28031;
          Fp x28032 = x28030 - x28031;
          Fp x28033 = x28032 * x26;
          Fp x28034 = Fp(x28033.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x28034;
          Fp x28035 = x28033 - x28034;
          Fp x28036 = x28035 * x26;
          Fp x28037 = Fp(x28036.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x28037;
          Fp x28038 = x28036 - x28037;
          Fp x28039 = x28038 * x26;
          Fp x28040 = Fp(x28039.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x28040;
          Fp x28041 = x28039 - x28040;
          Fp x28042 = x28041 * x26;
          Fp x28043 = Fp(x28042.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x28043;
          Fp x28044 = x28042 - x28043;
          Fp x28045 = x28044 * x26;
          Fp x28046 = Fp(x28045.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x28046;
        }
        Fp x28047 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x28048 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x28049 = x28048 * x1;
        Fp x28050 = x28047 + x28049;
        Fp x28051 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x28052 = x28051 * x3;
        Fp x28053 = x28050 + x28052;
        Fp x28054 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x28055 = x28054 * x6;
        Fp x28056 = x28053 + x28055;
        Fp x28057 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x28058 = x28057 * x11;
        Fp x28059 = x28056 + x28058;
        Fp x28060 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x28061 = x28060 * x27;
        Fp x28062 = x28059 + x28061;
        Fp x28063 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x28064 = x28063 * x12;
        Fp x28065 = x28062 + x28064;
        Fp x28066 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x28067 = x28066 * x28;
        Fp x28068 = x28065 + x28067;
        Fp x28069 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x28070 = x28069 * x13;
        Fp x28071 = x28068 + x28070;
        Fp x28072 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x28073 = x28072 * x29;
        Fp x28074 = x28071 + x28073;
        Fp x28075 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x28076 = x28075 * x14;
        Fp x28077 = x28074 + x28076;
        Fp x28078 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x28079 = x28078 * x30;
        Fp x28080 = x28077 + x28079;
        Fp x28081 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x28082 = x28081 * x15;
        Fp x28083 = x28080 + x28082;
        Fp x28084 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x28085 = x28084 * x31;
        Fp x28086 = x28083 + x28085;
        Fp x28087 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x28088 = x28087 * x16;
        Fp x28089 = x28086 + x28088;
        Fp x28090 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x28091 = x28090 * x32;
        Fp x28092 = x28089 + x28091;
        Fp x28093 = x28000 - x28092;
        Fp x28094 = x28093 * x33;
        args[2][107 * steps + cycle] = x28094;
        Fp x28095 = x27958 * x1;
        Fp x28096 = x27955 + x28095;
        Fp x28097 = x27961 * x3;
        Fp x28098 = x28096 + x28097;
        Fp x28099 = x27964 * x6;
        Fp x28100 = x28098 + x28099;
        Fp x28101 = x27967 * x11;
        Fp x28102 = x28100 + x28101;
        Fp x28103 = x27970 * x27;
        Fp x28104 = x28102 + x28103;
        Fp x28105 = x27973 * x12;
        Fp x28106 = x28104 + x28105;
        Fp x28107 = x27976 * x28;
        Fp x28108 = x28106 + x28107;
        Fp x28109 = x27979 * x13;
        Fp x28110 = x28108 + x28109;
        Fp x28111 = x27982 * x29;
        Fp x28112 = x28110 + x28111;
        Fp x28113 = x27985 * x14;
        Fp x28114 = x28112 + x28113;
        Fp x28115 = x27988 * x30;
        Fp x28116 = x28114 + x28115;
        Fp x28117 = x27991 * x15;
        Fp x28118 = x28116 + x28117;
        Fp x28119 = x27994 * x31;
        Fp x28120 = x28118 + x28119;
        Fp x28121 = x28047 * x16;
        Fp x28122 = x28120 + x28121;
        Fp x28123 = x28048 * x32;
        Fp x28124 = x28122 + x28123;
        Fp x28125 = x28051 * x17;
        Fp x28126 = x28124 + x28125;
        Fp x28127 = x28054 * x57;
        Fp x28128 = x28126 + x28127;
        Fp x28129 = x28057 * x18;
        Fp x28130 = x28128 + x28129;
        Fp x28131 = x28060 * x58;
        Fp x28132 = x28130 + x28131;
        Fp x28133 = x28063 * x19;
        Fp x28134 = x28132 + x28133;
        Fp x28135 = x28066 * x59;
        Fp x28136 = x28134 + x28135;
        Fp x28137 = x28069 * x20;
        Fp x28138 = x28136 + x28137;
        Fp x28139 = x28072 * x60;
        Fp x28140 = x28138 + x28139;
        args[2][128 * steps + cycle] = x28140;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x28140;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x28141 = host_outs[0];
          Fp x28142 = host_outs[1];
          args[2][129 * steps + cycle] = x28141;
          args[2][130 * steps + cycle] = x28142;
        }
        Fp x28143 = x28078 * x1;
        Fp x28144 = x28075 + x28143;
        Fp x28145 = x28081 * x3;
        Fp x28146 = x28144 + x28145;
        Fp x28147 = x28084 * x6;
        Fp x28148 = x28146 + x28147;
        Fp x28149 = x28087 * x11;
        Fp x28150 = x28148 + x28149;
        Fp x28151 = x28090 * x27;
        Fp x28152 = x28150 + x28151;
        if (x28152 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:68");
        Fp x28153 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x28154 = x71 - x27952;
        Fp x28155 = args[2][129 * steps + ((cycle - 0) & mask)];
        Fp x28156 = x28154 * x28155;
        Fp x28157 = args[2][130 * steps + ((cycle - 0) & mask)];
        Fp x28158 = x27952 * x28157;
        Fp x28159 = x28156 + x28158;
        {
          Fp x28160 = Fp(x28153.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x28160;
          Fp x28161 = x28153 - x28160;
          Fp x28162 = x28161 * x26;
          Fp x28163 = Fp(x28162.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x28163;
          Fp x28164 = x28162 - x28163;
          Fp x28165 = x28164 * x26;
          Fp x28166 = Fp(x28165.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x28166;
          Fp x28167 = x28165 - x28166;
          Fp x28168 = x28167 * x26;
          Fp x28169 = Fp(x28168.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x28169;
          Fp x28170 = x28168 - x28169;
          Fp x28171 = x28170 * x26;
          Fp x28172 = Fp(x28171.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x28172;
          Fp x28173 = x28171 - x28172;
          Fp x28174 = x28173 * x26;
          Fp x28175 = Fp(x28174.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x28175;
          Fp x28176 = x28174 - x28175;
          Fp x28177 = x28176 * x26;
          Fp x28178 = Fp(x28177.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x28178;
          Fp x28179 = x28177 - x28178;
          Fp x28180 = x28179 * x26;
          Fp x28181 = Fp(x28180.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x28181;
          Fp x28182 = x28180 - x28181;
          Fp x28183 = x28182 * x26;
          Fp x28184 = Fp(x28183.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x28184;
          Fp x28185 = x28183 - x28184;
          Fp x28186 = x28185 * x26;
          Fp x28187 = Fp(x28186.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x28187;
          Fp x28188 = x28186 - x28187;
          Fp x28189 = x28188 * x26;
          Fp x28190 = Fp(x28189.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x28190;
          Fp x28191 = x28189 - x28190;
          Fp x28192 = x28191 * x26;
          Fp x28193 = Fp(x28192.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x28193;
          Fp x28194 = x28192 - x28193;
          Fp x28195 = x28194 * x26;
          Fp x28196 = Fp(x28195.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x28196;
          Fp x28197 = x28195 - x28196;
          Fp x28198 = x28197 * x26;
          Fp x28199 = Fp(x28198.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x28199;
          Fp x28200 = x28198 - x28199;
          Fp x28201 = x28200 * x26;
          Fp x28202 = Fp(x28201.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x28202;
          Fp x28203 = x28201 - x28202;
          Fp x28204 = x28203 * x26;
          Fp x28205 = Fp(x28204.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x28205;
        }
        Fp x28206 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x28207 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x28208 = x28207 * x1;
        Fp x28209 = x28206 + x28208;
        Fp x28210 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x28211 = x28210 * x3;
        Fp x28212 = x28209 + x28211;
        Fp x28213 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x28214 = x28213 * x6;
        Fp x28215 = x28212 + x28214;
        Fp x28216 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x28217 = x28216 * x11;
        Fp x28218 = x28215 + x28217;
        Fp x28219 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x28220 = x28219 * x27;
        Fp x28221 = x28218 + x28220;
        Fp x28222 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x28223 = x28222 * x12;
        Fp x28224 = x28221 + x28223;
        Fp x28225 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x28226 = x28225 * x28;
        Fp x28227 = x28224 + x28226;
        Fp x28228 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x28229 = x28228 * x13;
        Fp x28230 = x28227 + x28229;
        Fp x28231 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x28232 = x28231 * x29;
        Fp x28233 = x28230 + x28232;
        Fp x28234 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x28235 = x28234 * x14;
        Fp x28236 = x28233 + x28235;
        Fp x28237 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x28238 = x28237 * x30;
        Fp x28239 = x28236 + x28238;
        Fp x28240 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x28241 = x28240 * x15;
        Fp x28242 = x28239 + x28241;
        Fp x28243 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x28244 = x28243 * x31;
        Fp x28245 = x28242 + x28244;
        Fp x28246 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x28247 = x28246 * x16;
        Fp x28248 = x28245 + x28247;
        Fp x28249 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x28250 = x28249 * x32;
        Fp x28251 = x28248 + x28250;
        Fp x28252 = x28153 - x28251;
        Fp x28253 = x28252 * x33;
        if (x28253 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:68");
        {
          Fp x28254 = Fp(x28159.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x28254;
          Fp x28255 = x28159 - x28254;
          Fp x28256 = x28255 * x26;
          Fp x28257 = Fp(x28256.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x28257;
          Fp x28258 = x28256 - x28257;
          Fp x28259 = x28258 * x26;
          Fp x28260 = Fp(x28259.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x28260;
          Fp x28261 = x28259 - x28260;
          Fp x28262 = x28261 * x26;
          Fp x28263 = Fp(x28262.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x28263;
          Fp x28264 = x28262 - x28263;
          Fp x28265 = x28264 * x26;
          Fp x28266 = Fp(x28265.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x28266;
          Fp x28267 = x28265 - x28266;
          Fp x28268 = x28267 * x26;
          Fp x28269 = Fp(x28268.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x28269;
          Fp x28270 = x28268 - x28269;
          Fp x28271 = x28270 * x26;
          Fp x28272 = Fp(x28271.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x28272;
          Fp x28273 = x28271 - x28272;
          Fp x28274 = x28273 * x26;
          Fp x28275 = Fp(x28274.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x28275;
          Fp x28276 = x28274 - x28275;
          Fp x28277 = x28276 * x26;
          Fp x28278 = Fp(x28277.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x28278;
          Fp x28279 = x28277 - x28278;
          Fp x28280 = x28279 * x26;
          Fp x28281 = Fp(x28280.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x28281;
          Fp x28282 = x28280 - x28281;
          Fp x28283 = x28282 * x26;
          Fp x28284 = Fp(x28283.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x28284;
          Fp x28285 = x28283 - x28284;
          Fp x28286 = x28285 * x26;
          Fp x28287 = Fp(x28286.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x28287;
          Fp x28288 = x28286 - x28287;
          Fp x28289 = x28288 * x26;
          Fp x28290 = Fp(x28289.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x28290;
          Fp x28291 = x28289 - x28290;
          Fp x28292 = x28291 * x26;
          Fp x28293 = Fp(x28292.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x28293;
          Fp x28294 = x28292 - x28293;
          Fp x28295 = x28294 * x26;
          Fp x28296 = Fp(x28295.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x28296;
          Fp x28297 = x28295 - x28296;
          Fp x28298 = x28297 * x26;
          Fp x28299 = Fp(x28298.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x28299;
        }
        Fp x28300 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x28301 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x28302 = x28301 * x1;
        Fp x28303 = x28300 + x28302;
        Fp x28304 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x28305 = x28304 * x3;
        Fp x28306 = x28303 + x28305;
        Fp x28307 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x28308 = x28307 * x6;
        Fp x28309 = x28306 + x28308;
        Fp x28310 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x28311 = x28310 * x11;
        Fp x28312 = x28309 + x28311;
        Fp x28313 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x28314 = x28313 * x27;
        Fp x28315 = x28312 + x28314;
        Fp x28316 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x28317 = x28316 * x12;
        Fp x28318 = x28315 + x28317;
        Fp x28319 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x28320 = x28319 * x28;
        Fp x28321 = x28318 + x28320;
        Fp x28322 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x28323 = x28322 * x13;
        Fp x28324 = x28321 + x28323;
        Fp x28325 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x28326 = x28325 * x29;
        Fp x28327 = x28324 + x28326;
        Fp x28328 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x28329 = x28328 * x14;
        Fp x28330 = x28327 + x28329;
        Fp x28331 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x28332 = x28331 * x30;
        Fp x28333 = x28330 + x28332;
        Fp x28334 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x28335 = x28334 * x15;
        Fp x28336 = x28333 + x28335;
        Fp x28337 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x28338 = x28337 * x31;
        Fp x28339 = x28336 + x28338;
        Fp x28340 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x28341 = x28340 * x16;
        Fp x28342 = x28339 + x28341;
        Fp x28343 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x28344 = x28343 * x32;
        Fp x28345 = x28342 + x28344;
        Fp x28346 = x28159 - x28345;
        Fp x28347 = x28346 * x33;
        if (x28347 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:68");
        {
          Fp x28348 = (x27954 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x28348;
          Fp x28349 = x27954 - x71;
          Fp x28350 = (x28349 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x28350;
          Fp x28351 = x27954 - x1;
          Fp x28352 = (x28351 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x28352;
          Fp x28353 = x27954 - x2;
          Fp x28354 = (x28353 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x28354;
        }
        Fp x28355 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x28356 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x28357 = x28356 * x1;
        Fp x28358 = x28355 + x28357;
        Fp x28359 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x28360 = x28359 * x2;
        Fp x28361 = x28358 + x28360;
        Fp x28362 = x28361 - x27954;
        if (x28362 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x28363 = x71 - x27951;
        Fp x28364 = x28363 * x28227;
        Fp x28365 = x27951 * x28321;
        Fp x28366 = x28364 + x28365;
        Fp x28367 = x27951 * x28227;
        Fp x28368 = x28325 * x1;
        Fp x28369 = x28322 + x28368;
        Fp x28370 = x28328 * x3;
        Fp x28371 = x28369 + x28370;
        Fp x28372 = x28331 * x6;
        Fp x28373 = x28371 + x28372;
        Fp x28374 = x28334 * x11;
        Fp x28375 = x28373 + x28374;
        Fp x28376 = x28337 * x27;
        Fp x28377 = x28375 + x28376;
        Fp x28378 = x28340 * x12;
        Fp x28379 = x28377 + x28378;
        Fp x28380 = x28343 * x28;
        Fp x28381 = x28379 + x28380;
        Fp x28382 = x28363 * x28381;
        Fp x28383 = x28367 + x28382;
        Fp x28384 = x28383 * x13;
        Fp x28385 = x28366 + x28384;
        args[2][110 * steps + cycle] = x28385;
        Fp x28386 = args[2][110 * steps + ((cycle - 0) & mask)];
        Fp x28387 = x28154 * x28386;
        Fp x28388 = x27952 * x28155;
        Fp x28389 = x28387 + x28388;
        Fp x28390 = x27952 * x28386;
        Fp x28391 = x28154 * x28157;
        Fp x28392 = x28390 + x28391;
        {
          Fp x28393 = Fp(x28389.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x28393;
          Fp x28394 = x28389 - x28393;
          Fp x28395 = x28394 * x26;
          Fp x28396 = Fp(x28395.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x28396;
          Fp x28397 = x28395 - x28396;
          Fp x28398 = x28397 * x26;
          Fp x28399 = Fp(x28398.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x28399;
          Fp x28400 = x28398 - x28399;
          Fp x28401 = x28400 * x26;
          Fp x28402 = Fp(x28401.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x28402;
          Fp x28403 = x28401 - x28402;
          Fp x28404 = x28403 * x26;
          Fp x28405 = Fp(x28404.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x28405;
          Fp x28406 = x28404 - x28405;
          Fp x28407 = x28406 * x26;
          Fp x28408 = Fp(x28407.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x28408;
          Fp x28409 = x28407 - x28408;
          Fp x28410 = x28409 * x26;
          Fp x28411 = Fp(x28410.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x28411;
          Fp x28412 = x28410 - x28411;
          Fp x28413 = x28412 * x26;
          Fp x28414 = Fp(x28413.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x28414;
          Fp x28415 = x28413 - x28414;
          Fp x28416 = x28415 * x26;
          Fp x28417 = Fp(x28416.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x28417;
          Fp x28418 = x28416 - x28417;
          Fp x28419 = x28418 * x26;
          Fp x28420 = Fp(x28419.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x28420;
          Fp x28421 = x28419 - x28420;
          Fp x28422 = x28421 * x26;
          Fp x28423 = Fp(x28422.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x28423;
          Fp x28424 = x28422 - x28423;
          Fp x28425 = x28424 * x26;
          Fp x28426 = Fp(x28425.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x28426;
          Fp x28427 = x28425 - x28426;
          Fp x28428 = x28427 * x26;
          Fp x28429 = Fp(x28428.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x28429;
          Fp x28430 = x28428 - x28429;
          Fp x28431 = x28430 * x26;
          Fp x28432 = Fp(x28431.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x28432;
          Fp x28433 = x28431 - x28432;
          Fp x28434 = x28433 * x26;
          Fp x28435 = Fp(x28434.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x28435;
          Fp x28436 = x28434 - x28435;
          Fp x28437 = x28436 * x26;
          Fp x28438 = Fp(x28437.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x28438;
        }
        Fp x28439 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x28440 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x28441 = x28440 * x1;
        Fp x28442 = x28439 + x28441;
        Fp x28443 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x28444 = x28443 * x3;
        Fp x28445 = x28442 + x28444;
        Fp x28446 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x28447 = x28446 * x6;
        Fp x28448 = x28445 + x28447;
        Fp x28449 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x28450 = x28449 * x11;
        Fp x28451 = x28448 + x28450;
        Fp x28452 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x28453 = x28452 * x27;
        Fp x28454 = x28451 + x28453;
        Fp x28455 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x28456 = x28455 * x12;
        Fp x28457 = x28454 + x28456;
        Fp x28458 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x28459 = x28458 * x28;
        Fp x28460 = x28457 + x28459;
        Fp x28461 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x28462 = x28461 * x13;
        Fp x28463 = x28460 + x28462;
        Fp x28464 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x28465 = x28464 * x29;
        Fp x28466 = x28463 + x28465;
        Fp x28467 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x28468 = x28467 * x14;
        Fp x28469 = x28466 + x28468;
        Fp x28470 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x28471 = x28470 * x30;
        Fp x28472 = x28469 + x28471;
        Fp x28473 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x28474 = x28473 * x15;
        Fp x28475 = x28472 + x28474;
        Fp x28476 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x28477 = x28476 * x31;
        Fp x28478 = x28475 + x28477;
        Fp x28479 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x28480 = x28479 * x16;
        Fp x28481 = x28478 + x28480;
        Fp x28482 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x28483 = x28482 * x32;
        Fp x28484 = x28481 + x28483;
        Fp x28485 = x28389 - x28484;
        Fp x28486 = x28485 * x33;
        args[2][108 * steps + cycle] = x28486;
        Fp x28487 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x28488 = x28392 + x28487;
        {
          Fp x28489 = Fp(x28488.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x28489;
          Fp x28490 = x28488 - x28489;
          Fp x28491 = x28490 * x26;
          Fp x28492 = Fp(x28491.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x28492;
          Fp x28493 = x28491 - x28492;
          Fp x28494 = x28493 * x26;
          Fp x28495 = Fp(x28494.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x28495;
          Fp x28496 = x28494 - x28495;
          Fp x28497 = x28496 * x26;
          Fp x28498 = Fp(x28497.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x28498;
          Fp x28499 = x28497 - x28498;
          Fp x28500 = x28499 * x26;
          Fp x28501 = Fp(x28500.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x28501;
          Fp x28502 = x28500 - x28501;
          Fp x28503 = x28502 * x26;
          Fp x28504 = Fp(x28503.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x28504;
          Fp x28505 = x28503 - x28504;
          Fp x28506 = x28505 * x26;
          Fp x28507 = Fp(x28506.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x28507;
          Fp x28508 = x28506 - x28507;
          Fp x28509 = x28508 * x26;
          Fp x28510 = Fp(x28509.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x28510;
          Fp x28511 = x28509 - x28510;
          Fp x28512 = x28511 * x26;
          Fp x28513 = Fp(x28512.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x28513;
          Fp x28514 = x28512 - x28513;
          Fp x28515 = x28514 * x26;
          Fp x28516 = Fp(x28515.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x28516;
          Fp x28517 = x28515 - x28516;
          Fp x28518 = x28517 * x26;
          Fp x28519 = Fp(x28518.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x28519;
          Fp x28520 = x28518 - x28519;
          Fp x28521 = x28520 * x26;
          Fp x28522 = Fp(x28521.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x28522;
          Fp x28523 = x28521 - x28522;
          Fp x28524 = x28523 * x26;
          Fp x28525 = Fp(x28524.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x28525;
          Fp x28526 = x28524 - x28525;
          Fp x28527 = x28526 * x26;
          Fp x28528 = Fp(x28527.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x28528;
          Fp x28529 = x28527 - x28528;
          Fp x28530 = x28529 * x26;
          Fp x28531 = Fp(x28530.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x28531;
          Fp x28532 = x28530 - x28531;
          Fp x28533 = x28532 * x26;
          Fp x28534 = Fp(x28533.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x28534;
        }
        Fp x28535 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x28536 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x28537 = x28536 * x1;
        Fp x28538 = x28535 + x28537;
        Fp x28539 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x28540 = x28539 * x3;
        Fp x28541 = x28538 + x28540;
        Fp x28542 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x28543 = x28542 * x6;
        Fp x28544 = x28541 + x28543;
        Fp x28545 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x28546 = x28545 * x11;
        Fp x28547 = x28544 + x28546;
        Fp x28548 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x28549 = x28548 * x27;
        Fp x28550 = x28547 + x28549;
        Fp x28551 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x28552 = x28551 * x12;
        Fp x28553 = x28550 + x28552;
        Fp x28554 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x28555 = x28554 * x28;
        Fp x28556 = x28553 + x28555;
        Fp x28557 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x28558 = x28557 * x13;
        Fp x28559 = x28556 + x28558;
        Fp x28560 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x28561 = x28560 * x29;
        Fp x28562 = x28559 + x28561;
        Fp x28563 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x28564 = x28563 * x14;
        Fp x28565 = x28562 + x28564;
        Fp x28566 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x28567 = x28566 * x30;
        Fp x28568 = x28565 + x28567;
        Fp x28569 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x28570 = x28569 * x15;
        Fp x28571 = x28568 + x28570;
        Fp x28572 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x28573 = x28572 * x31;
        Fp x28574 = x28571 + x28573;
        Fp x28575 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x28576 = x28575 * x16;
        Fp x28577 = x28574 + x28576;
        Fp x28578 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x28579 = x28578 * x32;
        Fp x28580 = x28577 + x28579;
        Fp x28581 = x28488 - x28580;
        Fp x28582 = x28581 * x33;
        args[2][109 * steps + cycle] = x28582;
        {
          {
            Fp x28583 = (x28484 == 0) ? Fp(1) : Fp(0);
            Fp x28584 = x71 - x28583;
            args[2][114 * steps + cycle] = x28584;
            Fp x28585 = inv(x28484);
            args[2][115 * steps + cycle] = x28585;
          }
          Fp x28586 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x28587 = x28484 * x28586;
          Fp x28588 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x28589 = x28587 - x28588;
          if (x28589 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x28590 = x71 - x28588;
          Fp x28591 = x28590 * x28484;
          if (x28591 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x28592 = (x28580 == 0) ? Fp(1) : Fp(0);
            Fp x28593 = x71 - x28592;
            args[2][116 * steps + cycle] = x28593;
            Fp x28594 = inv(x28580);
            args[2][117 * steps + cycle] = x28594;
          }
          Fp x28595 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x28596 = x28580 * x28595;
          Fp x28597 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x28598 = x28596 - x28597;
          if (x28598 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x28599 = x71 - x28597;
          Fp x28600 = x28599 * x28580;
          if (x28600 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x28601 = x28590 * x28599;
          Fp x28602 = x71 - x28601;
          args[2][111 * steps + cycle] = x28602;
          Fp x28603 = x71 - x28343;
          Fp x28604 = x28090 * x28603;
          Fp x28605 = x71 - x28578;
          Fp x28606 = x28604 * x28605;
          Fp x28607 = x71 - x28090;
          Fp x28608 = x28607 * x28343;
          Fp x28609 = x28608 * x28578;
          Fp x28610 = x28606 + x28609;
          args[2][112 * steps + cycle] = x28610;
          Fp x28611 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x28612 = x28611 + x28578;
          Fp x28613 = x28611 * x1;
          Fp x28614 = x28613 * x28578;
          Fp x28615 = x28612 - x28614;
          args[2][113 * steps + cycle] = x28615;
        }
        args[2][100 * steps + cycle] = x28484;
        args[2][101 * steps + cycle] = x28580;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x71;
        Fp x28616 = x25783 + x3;
        args[2][104 * steps + cycle] = x28616;
        args[2][105 * steps + cycle] = x25805;
        Fp x28617 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x28618 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x28619 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x28620 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x28621 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x28622 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x25805;
        host_args[2] = x25783;
        host_args[3] = x28092;
        host_args[4] = x27996;
        host_args[5] = x28345;
        host_args[6] = x28251;
        host_args[7] = x28580;
        host_args[8] = x28484;
        host_args[9] = x28617;
        host_args[10] = x28618;
        host_args[11] = x28619;
        host_args[12] = x28620;
        host_args[13] = x28621;
        host_args[14] = x28622;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x28623 = args[2][76 * steps + ((cycle - 1) & mask)];
      if (x28623 != 0) {
        Fp x28624 = x25758 + x25760;
        Fp x28625 = x25759 + x25761;
        {
          Fp x28626 = Fp(x28624.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x28626;
          Fp x28627 = x28624 - x28626;
          Fp x28628 = x28627 * x26;
          Fp x28629 = Fp(x28628.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x28629;
          Fp x28630 = x28628 - x28629;
          Fp x28631 = x28630 * x26;
          Fp x28632 = Fp(x28631.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x28632;
          Fp x28633 = x28631 - x28632;
          Fp x28634 = x28633 * x26;
          Fp x28635 = Fp(x28634.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x28635;
          Fp x28636 = x28634 - x28635;
          Fp x28637 = x28636 * x26;
          Fp x28638 = Fp(x28637.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x28638;
          Fp x28639 = x28637 - x28638;
          Fp x28640 = x28639 * x26;
          Fp x28641 = Fp(x28640.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x28641;
          Fp x28642 = x28640 - x28641;
          Fp x28643 = x28642 * x26;
          Fp x28644 = Fp(x28643.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x28644;
          Fp x28645 = x28643 - x28644;
          Fp x28646 = x28645 * x26;
          Fp x28647 = Fp(x28646.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x28647;
          Fp x28648 = x28646 - x28647;
          Fp x28649 = x28648 * x26;
          Fp x28650 = Fp(x28649.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x28650;
          Fp x28651 = x28649 - x28650;
          Fp x28652 = x28651 * x26;
          Fp x28653 = Fp(x28652.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x28653;
          Fp x28654 = x28652 - x28653;
          Fp x28655 = x28654 * x26;
          Fp x28656 = Fp(x28655.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x28656;
          Fp x28657 = x28655 - x28656;
          Fp x28658 = x28657 * x26;
          Fp x28659 = Fp(x28658.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x28659;
          Fp x28660 = x28658 - x28659;
          Fp x28661 = x28660 * x26;
          Fp x28662 = Fp(x28661.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x28662;
          Fp x28663 = x28661 - x28662;
          Fp x28664 = x28663 * x26;
          Fp x28665 = Fp(x28664.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x28665;
          Fp x28666 = x28664 - x28665;
          Fp x28667 = x28666 * x26;
          Fp x28668 = Fp(x28667.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x28668;
          Fp x28669 = x28667 - x28668;
          Fp x28670 = x28669 * x26;
          Fp x28671 = Fp(x28670.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x28671;
        }
        Fp x28672 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x28673 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x28674 = x28673 * x1;
        Fp x28675 = x28672 + x28674;
        Fp x28676 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x28677 = x28676 * x3;
        Fp x28678 = x28675 + x28677;
        Fp x28679 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x28680 = x28679 * x6;
        Fp x28681 = x28678 + x28680;
        Fp x28682 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x28683 = x28682 * x11;
        Fp x28684 = x28681 + x28683;
        Fp x28685 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x28686 = x28685 * x27;
        Fp x28687 = x28684 + x28686;
        Fp x28688 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x28689 = x28688 * x12;
        Fp x28690 = x28687 + x28689;
        Fp x28691 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x28692 = x28691 * x28;
        Fp x28693 = x28690 + x28692;
        Fp x28694 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x28695 = x28694 * x13;
        Fp x28696 = x28693 + x28695;
        Fp x28697 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x28698 = x28697 * x29;
        Fp x28699 = x28696 + x28698;
        Fp x28700 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x28701 = x28700 * x14;
        Fp x28702 = x28699 + x28701;
        Fp x28703 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x28704 = x28703 * x30;
        Fp x28705 = x28702 + x28704;
        Fp x28706 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x28707 = x28706 * x15;
        Fp x28708 = x28705 + x28707;
        Fp x28709 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x28710 = x28709 * x31;
        Fp x28711 = x28708 + x28710;
        Fp x28712 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x28713 = x28712 * x16;
        Fp x28714 = x28711 + x28713;
        Fp x28715 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x28716 = x28715 * x32;
        Fp x28717 = x28714 + x28716;
        Fp x28718 = x28624 - x28717;
        Fp x28719 = x28718 * x33;
        args[2][106 * steps + cycle] = x28719;
        Fp x28720 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x28721 = x28625 + x28720;
        {
          Fp x28722 = Fp(x28721.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x28722;
          Fp x28723 = x28721 - x28722;
          Fp x28724 = x28723 * x26;
          Fp x28725 = Fp(x28724.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x28725;
          Fp x28726 = x28724 - x28725;
          Fp x28727 = x28726 * x26;
          Fp x28728 = Fp(x28727.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x28728;
          Fp x28729 = x28727 - x28728;
          Fp x28730 = x28729 * x26;
          Fp x28731 = Fp(x28730.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x28731;
          Fp x28732 = x28730 - x28731;
          Fp x28733 = x28732 * x26;
          Fp x28734 = Fp(x28733.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x28734;
          Fp x28735 = x28733 - x28734;
          Fp x28736 = x28735 * x26;
          Fp x28737 = Fp(x28736.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x28737;
          Fp x28738 = x28736 - x28737;
          Fp x28739 = x28738 * x26;
          Fp x28740 = Fp(x28739.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x28740;
          Fp x28741 = x28739 - x28740;
          Fp x28742 = x28741 * x26;
          Fp x28743 = Fp(x28742.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x28743;
          Fp x28744 = x28742 - x28743;
          Fp x28745 = x28744 * x26;
          Fp x28746 = Fp(x28745.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x28746;
          Fp x28747 = x28745 - x28746;
          Fp x28748 = x28747 * x26;
          Fp x28749 = Fp(x28748.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x28749;
          Fp x28750 = x28748 - x28749;
          Fp x28751 = x28750 * x26;
          Fp x28752 = Fp(x28751.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x28752;
          Fp x28753 = x28751 - x28752;
          Fp x28754 = x28753 * x26;
          Fp x28755 = Fp(x28754.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x28755;
          Fp x28756 = x28754 - x28755;
          Fp x28757 = x28756 * x26;
          Fp x28758 = Fp(x28757.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x28758;
          Fp x28759 = x28757 - x28758;
          Fp x28760 = x28759 * x26;
          Fp x28761 = Fp(x28760.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x28761;
          Fp x28762 = x28760 - x28761;
          Fp x28763 = x28762 * x26;
          Fp x28764 = Fp(x28763.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x28764;
          Fp x28765 = x28763 - x28764;
          Fp x28766 = x28765 * x26;
          Fp x28767 = Fp(x28766.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x28767;
        }
        Fp x28768 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x28769 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x28770 = x28769 * x1;
        Fp x28771 = x28768 + x28770;
        Fp x28772 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x28773 = x28772 * x3;
        Fp x28774 = x28771 + x28773;
        Fp x28775 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x28776 = x28775 * x6;
        Fp x28777 = x28774 + x28776;
        Fp x28778 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x28779 = x28778 * x11;
        Fp x28780 = x28777 + x28779;
        Fp x28781 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x28782 = x28781 * x27;
        Fp x28783 = x28780 + x28782;
        Fp x28784 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x28785 = x28784 * x12;
        Fp x28786 = x28783 + x28785;
        Fp x28787 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x28788 = x28787 * x28;
        Fp x28789 = x28786 + x28788;
        Fp x28790 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x28791 = x28790 * x13;
        Fp x28792 = x28789 + x28791;
        Fp x28793 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x28794 = x28793 * x29;
        Fp x28795 = x28792 + x28794;
        Fp x28796 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x28797 = x28796 * x14;
        Fp x28798 = x28795 + x28797;
        Fp x28799 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x28800 = x28799 * x30;
        Fp x28801 = x28798 + x28800;
        Fp x28802 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x28803 = x28802 * x15;
        Fp x28804 = x28801 + x28803;
        Fp x28805 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x28806 = x28805 * x31;
        Fp x28807 = x28804 + x28806;
        Fp x28808 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x28809 = x28808 * x16;
        Fp x28810 = x28807 + x28809;
        Fp x28811 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x28812 = x28811 * x32;
        Fp x28813 = x28810 + x28812;
        Fp x28814 = x28721 - x28813;
        Fp x28815 = x28814 * x33;
        args[2][107 * steps + cycle] = x28815;
        Fp x28816 = x28679 * x1;
        Fp x28817 = x28676 + x28816;
        Fp x28818 = x28682 * x3;
        Fp x28819 = x28817 + x28818;
        Fp x28820 = x28685 * x6;
        Fp x28821 = x28819 + x28820;
        Fp x28822 = x28688 * x11;
        Fp x28823 = x28821 + x28822;
        Fp x28824 = x28691 * x27;
        Fp x28825 = x28823 + x28824;
        Fp x28826 = x28694 * x12;
        Fp x28827 = x28825 + x28826;
        Fp x28828 = x28697 * x28;
        Fp x28829 = x28827 + x28828;
        Fp x28830 = x28700 * x13;
        Fp x28831 = x28829 + x28830;
        Fp x28832 = x28703 * x29;
        Fp x28833 = x28831 + x28832;
        Fp x28834 = x28706 * x14;
        Fp x28835 = x28833 + x28834;
        Fp x28836 = x28709 * x30;
        Fp x28837 = x28835 + x28836;
        Fp x28838 = x28712 * x15;
        Fp x28839 = x28837 + x28838;
        Fp x28840 = x28715 * x31;
        Fp x28841 = x28839 + x28840;
        Fp x28842 = x28768 * x16;
        Fp x28843 = x28841 + x28842;
        Fp x28844 = x28769 * x32;
        Fp x28845 = x28843 + x28844;
        Fp x28846 = x28772 * x17;
        Fp x28847 = x28845 + x28846;
        Fp x28848 = x28775 * x57;
        Fp x28849 = x28847 + x28848;
        Fp x28850 = x28778 * x18;
        Fp x28851 = x28849 + x28850;
        Fp x28852 = x28781 * x58;
        Fp x28853 = x28851 + x28852;
        Fp x28854 = x28784 * x19;
        Fp x28855 = x28853 + x28854;
        Fp x28856 = x28787 * x59;
        Fp x28857 = x28855 + x28856;
        Fp x28858 = x28790 * x20;
        Fp x28859 = x28857 + x28858;
        Fp x28860 = x28793 * x60;
        Fp x28861 = x28859 + x28860;
        args[2][128 * steps + cycle] = x28861;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x28861;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x28862 = host_outs[0];
          Fp x28863 = host_outs[1];
          args[2][129 * steps + cycle] = x28862;
          args[2][130 * steps + cycle] = x28863;
        }
        Fp x28864 = x28799 * x1;
        Fp x28865 = x28796 + x28864;
        Fp x28866 = x28802 * x3;
        Fp x28867 = x28865 + x28866;
        Fp x28868 = x28805 * x6;
        Fp x28869 = x28867 + x28868;
        Fp x28870 = x28808 * x11;
        Fp x28871 = x28869 + x28870;
        Fp x28872 = x28811 * x27;
        Fp x28873 = x28871 + x28872;
        if (x28873 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:69");
        Fp x28874 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x28875 = x71 - x28673;
        Fp x28876 = args[2][129 * steps + ((cycle - 0) & mask)];
        Fp x28877 = x28875 * x28876;
        Fp x28878 = args[2][130 * steps + ((cycle - 0) & mask)];
        Fp x28879 = x28673 * x28878;
        Fp x28880 = x28877 + x28879;
        {
          Fp x28881 = Fp(x28874.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x28881;
          Fp x28882 = x28874 - x28881;
          Fp x28883 = x28882 * x26;
          Fp x28884 = Fp(x28883.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x28884;
          Fp x28885 = x28883 - x28884;
          Fp x28886 = x28885 * x26;
          Fp x28887 = Fp(x28886.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x28887;
          Fp x28888 = x28886 - x28887;
          Fp x28889 = x28888 * x26;
          Fp x28890 = Fp(x28889.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x28890;
          Fp x28891 = x28889 - x28890;
          Fp x28892 = x28891 * x26;
          Fp x28893 = Fp(x28892.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x28893;
          Fp x28894 = x28892 - x28893;
          Fp x28895 = x28894 * x26;
          Fp x28896 = Fp(x28895.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x28896;
          Fp x28897 = x28895 - x28896;
          Fp x28898 = x28897 * x26;
          Fp x28899 = Fp(x28898.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x28899;
          Fp x28900 = x28898 - x28899;
          Fp x28901 = x28900 * x26;
          Fp x28902 = Fp(x28901.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x28902;
          Fp x28903 = x28901 - x28902;
          Fp x28904 = x28903 * x26;
          Fp x28905 = Fp(x28904.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x28905;
          Fp x28906 = x28904 - x28905;
          Fp x28907 = x28906 * x26;
          Fp x28908 = Fp(x28907.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x28908;
          Fp x28909 = x28907 - x28908;
          Fp x28910 = x28909 * x26;
          Fp x28911 = Fp(x28910.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x28911;
          Fp x28912 = x28910 - x28911;
          Fp x28913 = x28912 * x26;
          Fp x28914 = Fp(x28913.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x28914;
          Fp x28915 = x28913 - x28914;
          Fp x28916 = x28915 * x26;
          Fp x28917 = Fp(x28916.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x28917;
          Fp x28918 = x28916 - x28917;
          Fp x28919 = x28918 * x26;
          Fp x28920 = Fp(x28919.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x28920;
          Fp x28921 = x28919 - x28920;
          Fp x28922 = x28921 * x26;
          Fp x28923 = Fp(x28922.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x28923;
          Fp x28924 = x28922 - x28923;
          Fp x28925 = x28924 * x26;
          Fp x28926 = Fp(x28925.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x28926;
        }
        Fp x28927 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x28928 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x28929 = x28928 * x1;
        Fp x28930 = x28927 + x28929;
        Fp x28931 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x28932 = x28931 * x3;
        Fp x28933 = x28930 + x28932;
        Fp x28934 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x28935 = x28934 * x6;
        Fp x28936 = x28933 + x28935;
        Fp x28937 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x28938 = x28937 * x11;
        Fp x28939 = x28936 + x28938;
        Fp x28940 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x28941 = x28940 * x27;
        Fp x28942 = x28939 + x28941;
        Fp x28943 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x28944 = x28943 * x12;
        Fp x28945 = x28942 + x28944;
        Fp x28946 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x28947 = x28946 * x28;
        Fp x28948 = x28945 + x28947;
        Fp x28949 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x28950 = x28949 * x13;
        Fp x28951 = x28948 + x28950;
        Fp x28952 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x28953 = x28952 * x29;
        Fp x28954 = x28951 + x28953;
        Fp x28955 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x28956 = x28955 * x14;
        Fp x28957 = x28954 + x28956;
        Fp x28958 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x28959 = x28958 * x30;
        Fp x28960 = x28957 + x28959;
        Fp x28961 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x28962 = x28961 * x15;
        Fp x28963 = x28960 + x28962;
        Fp x28964 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x28965 = x28964 * x31;
        Fp x28966 = x28963 + x28965;
        Fp x28967 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x28968 = x28967 * x16;
        Fp x28969 = x28966 + x28968;
        Fp x28970 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x28971 = x28970 * x32;
        Fp x28972 = x28969 + x28971;
        Fp x28973 = x28874 - x28972;
        Fp x28974 = x28973 * x33;
        if (x28974 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:69");
        {
          Fp x28975 = Fp(x28880.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x28975;
          Fp x28976 = x28880 - x28975;
          Fp x28977 = x28976 * x26;
          Fp x28978 = Fp(x28977.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x28978;
          Fp x28979 = x28977 - x28978;
          Fp x28980 = x28979 * x26;
          Fp x28981 = Fp(x28980.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x28981;
          Fp x28982 = x28980 - x28981;
          Fp x28983 = x28982 * x26;
          Fp x28984 = Fp(x28983.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x28984;
          Fp x28985 = x28983 - x28984;
          Fp x28986 = x28985 * x26;
          Fp x28987 = Fp(x28986.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x28987;
          Fp x28988 = x28986 - x28987;
          Fp x28989 = x28988 * x26;
          Fp x28990 = Fp(x28989.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x28990;
          Fp x28991 = x28989 - x28990;
          Fp x28992 = x28991 * x26;
          Fp x28993 = Fp(x28992.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x28993;
          Fp x28994 = x28992 - x28993;
          Fp x28995 = x28994 * x26;
          Fp x28996 = Fp(x28995.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x28996;
          Fp x28997 = x28995 - x28996;
          Fp x28998 = x28997 * x26;
          Fp x28999 = Fp(x28998.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x28999;
          Fp x29000 = x28998 - x28999;
          Fp x29001 = x29000 * x26;
          Fp x29002 = Fp(x29001.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x29002;
          Fp x29003 = x29001 - x29002;
          Fp x29004 = x29003 * x26;
          Fp x29005 = Fp(x29004.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x29005;
          Fp x29006 = x29004 - x29005;
          Fp x29007 = x29006 * x26;
          Fp x29008 = Fp(x29007.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x29008;
          Fp x29009 = x29007 - x29008;
          Fp x29010 = x29009 * x26;
          Fp x29011 = Fp(x29010.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x29011;
          Fp x29012 = x29010 - x29011;
          Fp x29013 = x29012 * x26;
          Fp x29014 = Fp(x29013.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x29014;
          Fp x29015 = x29013 - x29014;
          Fp x29016 = x29015 * x26;
          Fp x29017 = Fp(x29016.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x29017;
          Fp x29018 = x29016 - x29017;
          Fp x29019 = x29018 * x26;
          Fp x29020 = Fp(x29019.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x29020;
        }
        Fp x29021 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x29022 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x29023 = x29022 * x1;
        Fp x29024 = x29021 + x29023;
        Fp x29025 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x29026 = x29025 * x3;
        Fp x29027 = x29024 + x29026;
        Fp x29028 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x29029 = x29028 * x6;
        Fp x29030 = x29027 + x29029;
        Fp x29031 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x29032 = x29031 * x11;
        Fp x29033 = x29030 + x29032;
        Fp x29034 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x29035 = x29034 * x27;
        Fp x29036 = x29033 + x29035;
        Fp x29037 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x29038 = x29037 * x12;
        Fp x29039 = x29036 + x29038;
        Fp x29040 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x29041 = x29040 * x28;
        Fp x29042 = x29039 + x29041;
        Fp x29043 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x29044 = x29043 * x13;
        Fp x29045 = x29042 + x29044;
        Fp x29046 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x29047 = x29046 * x29;
        Fp x29048 = x29045 + x29047;
        Fp x29049 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x29050 = x29049 * x14;
        Fp x29051 = x29048 + x29050;
        Fp x29052 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x29053 = x29052 * x30;
        Fp x29054 = x29051 + x29053;
        Fp x29055 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x29056 = x29055 * x15;
        Fp x29057 = x29054 + x29056;
        Fp x29058 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x29059 = x29058 * x31;
        Fp x29060 = x29057 + x29059;
        Fp x29061 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x29062 = x29061 * x16;
        Fp x29063 = x29060 + x29062;
        Fp x29064 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x29065 = x29064 * x32;
        Fp x29066 = x29063 + x29065;
        Fp x29067 = x28880 - x29066;
        Fp x29068 = x29067 * x33;
        if (x29068 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:69");
        {
          Fp x29069 = (x28675 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x29069;
          Fp x29070 = x28675 - x71;
          Fp x29071 = (x29070 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x29071;
          Fp x29072 = x28675 - x1;
          Fp x29073 = (x29072 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x29073;
          Fp x29074 = x28675 - x2;
          Fp x29075 = (x29074 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x29075;
        }
        Fp x29076 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x29077 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x29078 = x29077 * x1;
        Fp x29079 = x29076 + x29078;
        Fp x29080 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x29081 = x29080 * x2;
        Fp x29082 = x29079 + x29081;
        Fp x29083 = x29082 - x28675;
        if (x29083 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        if (x28672 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.cpp:87");
        Fp x29084 = x28875 * x28972;
        Fp x29085 = x28673 * x28876;
        Fp x29086 = x29084 + x29085;
        Fp x29087 = x28673 * x28972;
        Fp x29088 = x28875 * x28878;
        Fp x29089 = x29087 + x29088;
        {
          Fp x29090 = Fp(x29086.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x29090;
          Fp x29091 = x29086 - x29090;
          Fp x29092 = x29091 * x26;
          Fp x29093 = Fp(x29092.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x29093;
          Fp x29094 = x29092 - x29093;
          Fp x29095 = x29094 * x26;
          Fp x29096 = Fp(x29095.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x29096;
          Fp x29097 = x29095 - x29096;
          Fp x29098 = x29097 * x26;
          Fp x29099 = Fp(x29098.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x29099;
          Fp x29100 = x29098 - x29099;
          Fp x29101 = x29100 * x26;
          Fp x29102 = Fp(x29101.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x29102;
          Fp x29103 = x29101 - x29102;
          Fp x29104 = x29103 * x26;
          Fp x29105 = Fp(x29104.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x29105;
          Fp x29106 = x29104 - x29105;
          Fp x29107 = x29106 * x26;
          Fp x29108 = Fp(x29107.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x29108;
          Fp x29109 = x29107 - x29108;
          Fp x29110 = x29109 * x26;
          Fp x29111 = Fp(x29110.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x29111;
          Fp x29112 = x29110 - x29111;
          Fp x29113 = x29112 * x26;
          Fp x29114 = Fp(x29113.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x29114;
          Fp x29115 = x29113 - x29114;
          Fp x29116 = x29115 * x26;
          Fp x29117 = Fp(x29116.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x29117;
          Fp x29118 = x29116 - x29117;
          Fp x29119 = x29118 * x26;
          Fp x29120 = Fp(x29119.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x29120;
          Fp x29121 = x29119 - x29120;
          Fp x29122 = x29121 * x26;
          Fp x29123 = Fp(x29122.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x29123;
          Fp x29124 = x29122 - x29123;
          Fp x29125 = x29124 * x26;
          Fp x29126 = Fp(x29125.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x29126;
          Fp x29127 = x29125 - x29126;
          Fp x29128 = x29127 * x26;
          Fp x29129 = Fp(x29128.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x29129;
          Fp x29130 = x29128 - x29129;
          Fp x29131 = x29130 * x26;
          Fp x29132 = Fp(x29131.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x29132;
          Fp x29133 = x29131 - x29132;
          Fp x29134 = x29133 * x26;
          Fp x29135 = Fp(x29134.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x29135;
        }
        Fp x29136 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x29137 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x29138 = x29137 * x1;
        Fp x29139 = x29136 + x29138;
        Fp x29140 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x29141 = x29140 * x3;
        Fp x29142 = x29139 + x29141;
        Fp x29143 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x29144 = x29143 * x6;
        Fp x29145 = x29142 + x29144;
        Fp x29146 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x29147 = x29146 * x11;
        Fp x29148 = x29145 + x29147;
        Fp x29149 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x29150 = x29149 * x27;
        Fp x29151 = x29148 + x29150;
        Fp x29152 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x29153 = x29152 * x12;
        Fp x29154 = x29151 + x29153;
        Fp x29155 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x29156 = x29155 * x28;
        Fp x29157 = x29154 + x29156;
        Fp x29158 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x29159 = x29158 * x13;
        Fp x29160 = x29157 + x29159;
        Fp x29161 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x29162 = x29161 * x29;
        Fp x29163 = x29160 + x29162;
        Fp x29164 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x29165 = x29164 * x14;
        Fp x29166 = x29163 + x29165;
        Fp x29167 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x29168 = x29167 * x30;
        Fp x29169 = x29166 + x29168;
        Fp x29170 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x29171 = x29170 * x15;
        Fp x29172 = x29169 + x29171;
        Fp x29173 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x29174 = x29173 * x31;
        Fp x29175 = x29172 + x29174;
        Fp x29176 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x29177 = x29176 * x16;
        Fp x29178 = x29175 + x29177;
        Fp x29179 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x29180 = x29179 * x32;
        Fp x29181 = x29178 + x29180;
        Fp x29182 = x29086 - x29181;
        Fp x29183 = x29182 * x33;
        args[2][108 * steps + cycle] = x29183;
        Fp x29184 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x29185 = x29089 + x29184;
        {
          Fp x29186 = Fp(x29185.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x29186;
          Fp x29187 = x29185 - x29186;
          Fp x29188 = x29187 * x26;
          Fp x29189 = Fp(x29188.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x29189;
          Fp x29190 = x29188 - x29189;
          Fp x29191 = x29190 * x26;
          Fp x29192 = Fp(x29191.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x29192;
          Fp x29193 = x29191 - x29192;
          Fp x29194 = x29193 * x26;
          Fp x29195 = Fp(x29194.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x29195;
          Fp x29196 = x29194 - x29195;
          Fp x29197 = x29196 * x26;
          Fp x29198 = Fp(x29197.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x29198;
          Fp x29199 = x29197 - x29198;
          Fp x29200 = x29199 * x26;
          Fp x29201 = Fp(x29200.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x29201;
          Fp x29202 = x29200 - x29201;
          Fp x29203 = x29202 * x26;
          Fp x29204 = Fp(x29203.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x29204;
          Fp x29205 = x29203 - x29204;
          Fp x29206 = x29205 * x26;
          Fp x29207 = Fp(x29206.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x29207;
          Fp x29208 = x29206 - x29207;
          Fp x29209 = x29208 * x26;
          Fp x29210 = Fp(x29209.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x29210;
          Fp x29211 = x29209 - x29210;
          Fp x29212 = x29211 * x26;
          Fp x29213 = Fp(x29212.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x29213;
          Fp x29214 = x29212 - x29213;
          Fp x29215 = x29214 * x26;
          Fp x29216 = Fp(x29215.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x29216;
          Fp x29217 = x29215 - x29216;
          Fp x29218 = x29217 * x26;
          Fp x29219 = Fp(x29218.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x29219;
          Fp x29220 = x29218 - x29219;
          Fp x29221 = x29220 * x26;
          Fp x29222 = Fp(x29221.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x29222;
          Fp x29223 = x29221 - x29222;
          Fp x29224 = x29223 * x26;
          Fp x29225 = Fp(x29224.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x29225;
          Fp x29226 = x29224 - x29225;
          Fp x29227 = x29226 * x26;
          Fp x29228 = Fp(x29227.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x29228;
          Fp x29229 = x29227 - x29228;
          Fp x29230 = x29229 * x26;
          Fp x29231 = Fp(x29230.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x29231;
        }
        Fp x29232 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x29233 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x29234 = x29233 * x1;
        Fp x29235 = x29232 + x29234;
        Fp x29236 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x29237 = x29236 * x3;
        Fp x29238 = x29235 + x29237;
        Fp x29239 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x29240 = x29239 * x6;
        Fp x29241 = x29238 + x29240;
        Fp x29242 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x29243 = x29242 * x11;
        Fp x29244 = x29241 + x29243;
        Fp x29245 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x29246 = x29245 * x27;
        Fp x29247 = x29244 + x29246;
        Fp x29248 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x29249 = x29248 * x12;
        Fp x29250 = x29247 + x29249;
        Fp x29251 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x29252 = x29251 * x28;
        Fp x29253 = x29250 + x29252;
        Fp x29254 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x29255 = x29254 * x13;
        Fp x29256 = x29253 + x29255;
        Fp x29257 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x29258 = x29257 * x29;
        Fp x29259 = x29256 + x29258;
        Fp x29260 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x29261 = x29260 * x14;
        Fp x29262 = x29259 + x29261;
        Fp x29263 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x29264 = x29263 * x30;
        Fp x29265 = x29262 + x29264;
        Fp x29266 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x29267 = x29266 * x15;
        Fp x29268 = x29265 + x29267;
        Fp x29269 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x29270 = x29269 * x31;
        Fp x29271 = x29268 + x29270;
        Fp x29272 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x29273 = x29272 * x16;
        Fp x29274 = x29271 + x29273;
        Fp x29275 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x29276 = x29275 * x32;
        Fp x29277 = x29274 + x29276;
        Fp x29278 = x29185 - x29277;
        Fp x29279 = x29278 * x33;
        args[2][109 * steps + cycle] = x29279;
        {
          {
            Fp x29280 = (x29181 == 0) ? Fp(1) : Fp(0);
            Fp x29281 = x71 - x29280;
            args[2][114 * steps + cycle] = x29281;
            Fp x29282 = inv(x29181);
            args[2][115 * steps + cycle] = x29282;
          }
          Fp x29283 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x29284 = x29181 * x29283;
          Fp x29285 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x29286 = x29284 - x29285;
          if (x29286 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x29287 = x71 - x29285;
          Fp x29288 = x29287 * x29181;
          if (x29288 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x29289 = (x29277 == 0) ? Fp(1) : Fp(0);
            Fp x29290 = x71 - x29289;
            args[2][116 * steps + cycle] = x29290;
            Fp x29291 = inv(x29277);
            args[2][117 * steps + cycle] = x29291;
          }
          Fp x29292 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x29293 = x29277 * x29292;
          Fp x29294 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x29295 = x29293 - x29294;
          if (x29295 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x29296 = x71 - x29294;
          Fp x29297 = x29296 * x29277;
          if (x29297 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x29298 = x29287 * x29296;
          Fp x29299 = x71 - x29298;
          args[2][111 * steps + cycle] = x29299;
          Fp x29300 = x71 - x29064;
          Fp x29301 = x28811 * x29300;
          Fp x29302 = x71 - x29275;
          Fp x29303 = x29301 * x29302;
          Fp x29304 = x71 - x28811;
          Fp x29305 = x29304 * x29064;
          Fp x29306 = x29305 * x29275;
          Fp x29307 = x29303 + x29306;
          args[2][112 * steps + cycle] = x29307;
          Fp x29308 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x29309 = x29308 + x29275;
          Fp x29310 = x29308 * x1;
          Fp x29311 = x29310 * x29275;
          Fp x29312 = x29309 - x29311;
          args[2][113 * steps + cycle] = x29312;
        }
        args[2][100 * steps + cycle] = x29181;
        args[2][101 * steps + cycle] = x29277;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x71;
        Fp x29313 = x25783 + x3;
        args[2][104 * steps + cycle] = x29313;
        args[2][105 * steps + cycle] = x25805;
        Fp x29314 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x29315 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x29316 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x29317 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x29318 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x29319 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x25805;
        host_args[2] = x25783;
        host_args[3] = x28813;
        host_args[4] = x28717;
        host_args[5] = x29066;
        host_args[6] = x28972;
        host_args[7] = x29277;
        host_args[8] = x29181;
        host_args[9] = x29314;
        host_args[10] = x29315;
        host_args[11] = x29316;
        host_args[12] = x29317;
        host_args[13] = x29318;
        host_args[14] = x29319;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x29320 = args[2][77 * steps + ((cycle - 1) & mask)];
      if (x29320 != 0) {
        Fp x29321 = x25758 + x25760;
        Fp x29322 = x25759 + x25761;
        {
          Fp x29323 = Fp(x29321.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x29323;
          Fp x29324 = x29321 - x29323;
          Fp x29325 = x29324 * x26;
          Fp x29326 = Fp(x29325.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x29326;
          Fp x29327 = x29325 - x29326;
          Fp x29328 = x29327 * x26;
          Fp x29329 = Fp(x29328.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x29329;
          Fp x29330 = x29328 - x29329;
          Fp x29331 = x29330 * x26;
          Fp x29332 = Fp(x29331.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x29332;
          Fp x29333 = x29331 - x29332;
          Fp x29334 = x29333 * x26;
          Fp x29335 = Fp(x29334.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x29335;
          Fp x29336 = x29334 - x29335;
          Fp x29337 = x29336 * x26;
          Fp x29338 = Fp(x29337.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x29338;
          Fp x29339 = x29337 - x29338;
          Fp x29340 = x29339 * x26;
          Fp x29341 = Fp(x29340.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x29341;
          Fp x29342 = x29340 - x29341;
          Fp x29343 = x29342 * x26;
          Fp x29344 = Fp(x29343.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x29344;
          Fp x29345 = x29343 - x29344;
          Fp x29346 = x29345 * x26;
          Fp x29347 = Fp(x29346.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x29347;
          Fp x29348 = x29346 - x29347;
          Fp x29349 = x29348 * x26;
          Fp x29350 = Fp(x29349.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x29350;
          Fp x29351 = x29349 - x29350;
          Fp x29352 = x29351 * x26;
          Fp x29353 = Fp(x29352.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x29353;
          Fp x29354 = x29352 - x29353;
          Fp x29355 = x29354 * x26;
          Fp x29356 = Fp(x29355.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x29356;
          Fp x29357 = x29355 - x29356;
          Fp x29358 = x29357 * x26;
          Fp x29359 = Fp(x29358.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x29359;
          Fp x29360 = x29358 - x29359;
          Fp x29361 = x29360 * x26;
          Fp x29362 = Fp(x29361.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x29362;
          Fp x29363 = x29361 - x29362;
          Fp x29364 = x29363 * x26;
          Fp x29365 = Fp(x29364.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x29365;
          Fp x29366 = x29364 - x29365;
          Fp x29367 = x29366 * x26;
          Fp x29368 = Fp(x29367.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x29368;
        }
        Fp x29369 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x29370 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x29371 = x29370 * x1;
        Fp x29372 = x29369 + x29371;
        Fp x29373 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x29374 = x29373 * x3;
        Fp x29375 = x29372 + x29374;
        Fp x29376 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x29377 = x29376 * x6;
        Fp x29378 = x29375 + x29377;
        Fp x29379 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x29380 = x29379 * x11;
        Fp x29381 = x29378 + x29380;
        Fp x29382 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x29383 = x29382 * x27;
        Fp x29384 = x29381 + x29383;
        Fp x29385 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x29386 = x29385 * x12;
        Fp x29387 = x29384 + x29386;
        Fp x29388 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x29389 = x29388 * x28;
        Fp x29390 = x29387 + x29389;
        Fp x29391 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x29392 = x29391 * x13;
        Fp x29393 = x29390 + x29392;
        Fp x29394 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x29395 = x29394 * x29;
        Fp x29396 = x29393 + x29395;
        Fp x29397 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x29398 = x29397 * x14;
        Fp x29399 = x29396 + x29398;
        Fp x29400 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x29401 = x29400 * x30;
        Fp x29402 = x29399 + x29401;
        Fp x29403 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x29404 = x29403 * x15;
        Fp x29405 = x29402 + x29404;
        Fp x29406 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x29407 = x29406 * x31;
        Fp x29408 = x29405 + x29407;
        Fp x29409 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x29410 = x29409 * x16;
        Fp x29411 = x29408 + x29410;
        Fp x29412 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x29413 = x29412 * x32;
        Fp x29414 = x29411 + x29413;
        Fp x29415 = x29321 - x29414;
        Fp x29416 = x29415 * x33;
        args[2][106 * steps + cycle] = x29416;
        Fp x29417 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x29418 = x29322 + x29417;
        {
          Fp x29419 = Fp(x29418.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x29419;
          Fp x29420 = x29418 - x29419;
          Fp x29421 = x29420 * x26;
          Fp x29422 = Fp(x29421.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x29422;
          Fp x29423 = x29421 - x29422;
          Fp x29424 = x29423 * x26;
          Fp x29425 = Fp(x29424.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x29425;
          Fp x29426 = x29424 - x29425;
          Fp x29427 = x29426 * x26;
          Fp x29428 = Fp(x29427.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x29428;
          Fp x29429 = x29427 - x29428;
          Fp x29430 = x29429 * x26;
          Fp x29431 = Fp(x29430.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x29431;
          Fp x29432 = x29430 - x29431;
          Fp x29433 = x29432 * x26;
          Fp x29434 = Fp(x29433.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x29434;
          Fp x29435 = x29433 - x29434;
          Fp x29436 = x29435 * x26;
          Fp x29437 = Fp(x29436.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x29437;
          Fp x29438 = x29436 - x29437;
          Fp x29439 = x29438 * x26;
          Fp x29440 = Fp(x29439.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x29440;
          Fp x29441 = x29439 - x29440;
          Fp x29442 = x29441 * x26;
          Fp x29443 = Fp(x29442.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x29443;
          Fp x29444 = x29442 - x29443;
          Fp x29445 = x29444 * x26;
          Fp x29446 = Fp(x29445.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x29446;
          Fp x29447 = x29445 - x29446;
          Fp x29448 = x29447 * x26;
          Fp x29449 = Fp(x29448.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x29449;
          Fp x29450 = x29448 - x29449;
          Fp x29451 = x29450 * x26;
          Fp x29452 = Fp(x29451.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x29452;
          Fp x29453 = x29451 - x29452;
          Fp x29454 = x29453 * x26;
          Fp x29455 = Fp(x29454.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x29455;
          Fp x29456 = x29454 - x29455;
          Fp x29457 = x29456 * x26;
          Fp x29458 = Fp(x29457.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x29458;
          Fp x29459 = x29457 - x29458;
          Fp x29460 = x29459 * x26;
          Fp x29461 = Fp(x29460.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x29461;
          Fp x29462 = x29460 - x29461;
          Fp x29463 = x29462 * x26;
          Fp x29464 = Fp(x29463.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x29464;
        }
        Fp x29465 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x29466 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x29467 = x29466 * x1;
        Fp x29468 = x29465 + x29467;
        Fp x29469 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x29470 = x29469 * x3;
        Fp x29471 = x29468 + x29470;
        Fp x29472 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x29473 = x29472 * x6;
        Fp x29474 = x29471 + x29473;
        Fp x29475 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x29476 = x29475 * x11;
        Fp x29477 = x29474 + x29476;
        Fp x29478 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x29479 = x29478 * x27;
        Fp x29480 = x29477 + x29479;
        Fp x29481 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x29482 = x29481 * x12;
        Fp x29483 = x29480 + x29482;
        Fp x29484 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x29485 = x29484 * x28;
        Fp x29486 = x29483 + x29485;
        Fp x29487 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x29488 = x29487 * x13;
        Fp x29489 = x29486 + x29488;
        Fp x29490 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x29491 = x29490 * x29;
        Fp x29492 = x29489 + x29491;
        Fp x29493 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x29494 = x29493 * x14;
        Fp x29495 = x29492 + x29494;
        Fp x29496 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x29497 = x29496 * x30;
        Fp x29498 = x29495 + x29497;
        Fp x29499 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x29500 = x29499 * x15;
        Fp x29501 = x29498 + x29500;
        Fp x29502 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x29503 = x29502 * x31;
        Fp x29504 = x29501 + x29503;
        Fp x29505 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x29506 = x29505 * x16;
        Fp x29507 = x29504 + x29506;
        Fp x29508 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x29509 = x29508 * x32;
        Fp x29510 = x29507 + x29509;
        Fp x29511 = x29418 - x29510;
        Fp x29512 = x29511 * x33;
        args[2][107 * steps + cycle] = x29512;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x29513 = host_outs[0];
          Fp x29514 = host_outs[1];
          args[2][129 * steps + cycle] = x29513;
          args[2][130 * steps + cycle] = x29514;
        }
        Fp x29515 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x29516 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x29517 = Fp(x29515.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x29517;
          Fp x29518 = x29515 - x29517;
          Fp x29519 = x29518 * x26;
          Fp x29520 = Fp(x29519.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x29520;
          Fp x29521 = x29519 - x29520;
          Fp x29522 = x29521 * x26;
          Fp x29523 = Fp(x29522.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x29523;
          Fp x29524 = x29522 - x29523;
          Fp x29525 = x29524 * x26;
          Fp x29526 = Fp(x29525.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x29526;
          Fp x29527 = x29525 - x29526;
          Fp x29528 = x29527 * x26;
          Fp x29529 = Fp(x29528.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x29529;
          Fp x29530 = x29528 - x29529;
          Fp x29531 = x29530 * x26;
          Fp x29532 = Fp(x29531.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x29532;
          Fp x29533 = x29531 - x29532;
          Fp x29534 = x29533 * x26;
          Fp x29535 = Fp(x29534.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x29535;
          Fp x29536 = x29534 - x29535;
          Fp x29537 = x29536 * x26;
          Fp x29538 = Fp(x29537.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x29538;
          Fp x29539 = x29537 - x29538;
          Fp x29540 = x29539 * x26;
          Fp x29541 = Fp(x29540.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x29541;
          Fp x29542 = x29540 - x29541;
          Fp x29543 = x29542 * x26;
          Fp x29544 = Fp(x29543.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x29544;
          Fp x29545 = x29543 - x29544;
          Fp x29546 = x29545 * x26;
          Fp x29547 = Fp(x29546.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x29547;
          Fp x29548 = x29546 - x29547;
          Fp x29549 = x29548 * x26;
          Fp x29550 = Fp(x29549.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x29550;
          Fp x29551 = x29549 - x29550;
          Fp x29552 = x29551 * x26;
          Fp x29553 = Fp(x29552.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x29553;
          Fp x29554 = x29552 - x29553;
          Fp x29555 = x29554 * x26;
          Fp x29556 = Fp(x29555.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x29556;
          Fp x29557 = x29555 - x29556;
          Fp x29558 = x29557 * x26;
          Fp x29559 = Fp(x29558.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x29559;
          Fp x29560 = x29558 - x29559;
          Fp x29561 = x29560 * x26;
          Fp x29562 = Fp(x29561.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x29562;
        }
        Fp x29563 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x29564 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x29565 = x29564 * x1;
        Fp x29566 = x29563 + x29565;
        Fp x29567 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x29568 = x29567 * x3;
        Fp x29569 = x29566 + x29568;
        Fp x29570 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x29571 = x29570 * x6;
        Fp x29572 = x29569 + x29571;
        Fp x29573 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x29574 = x29573 * x11;
        Fp x29575 = x29572 + x29574;
        Fp x29576 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x29577 = x29576 * x27;
        Fp x29578 = x29575 + x29577;
        Fp x29579 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x29580 = x29579 * x12;
        Fp x29581 = x29578 + x29580;
        Fp x29582 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x29583 = x29582 * x28;
        Fp x29584 = x29581 + x29583;
        Fp x29585 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x29586 = x29585 * x13;
        Fp x29587 = x29584 + x29586;
        Fp x29588 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x29589 = x29588 * x29;
        Fp x29590 = x29587 + x29589;
        Fp x29591 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x29592 = x29591 * x14;
        Fp x29593 = x29590 + x29592;
        Fp x29594 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x29595 = x29594 * x30;
        Fp x29596 = x29593 + x29595;
        Fp x29597 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x29598 = x29597 * x15;
        Fp x29599 = x29596 + x29598;
        Fp x29600 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x29601 = x29600 * x31;
        Fp x29602 = x29599 + x29601;
        Fp x29603 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x29604 = x29603 * x16;
        Fp x29605 = x29602 + x29604;
        Fp x29606 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x29607 = x29606 * x32;
        Fp x29608 = x29605 + x29607;
        Fp x29609 = x29515 - x29608;
        Fp x29610 = x29609 * x33;
        if (x29610 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:70");
        {
          Fp x29611 = Fp(x29516.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x29611;
          Fp x29612 = x29516 - x29611;
          Fp x29613 = x29612 * x26;
          Fp x29614 = Fp(x29613.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x29614;
          Fp x29615 = x29613 - x29614;
          Fp x29616 = x29615 * x26;
          Fp x29617 = Fp(x29616.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x29617;
          Fp x29618 = x29616 - x29617;
          Fp x29619 = x29618 * x26;
          Fp x29620 = Fp(x29619.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x29620;
          Fp x29621 = x29619 - x29620;
          Fp x29622 = x29621 * x26;
          Fp x29623 = Fp(x29622.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x29623;
          Fp x29624 = x29622 - x29623;
          Fp x29625 = x29624 * x26;
          Fp x29626 = Fp(x29625.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x29626;
          Fp x29627 = x29625 - x29626;
          Fp x29628 = x29627 * x26;
          Fp x29629 = Fp(x29628.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x29629;
          Fp x29630 = x29628 - x29629;
          Fp x29631 = x29630 * x26;
          Fp x29632 = Fp(x29631.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x29632;
          Fp x29633 = x29631 - x29632;
          Fp x29634 = x29633 * x26;
          Fp x29635 = Fp(x29634.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x29635;
          Fp x29636 = x29634 - x29635;
          Fp x29637 = x29636 * x26;
          Fp x29638 = Fp(x29637.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x29638;
          Fp x29639 = x29637 - x29638;
          Fp x29640 = x29639 * x26;
          Fp x29641 = Fp(x29640.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x29641;
          Fp x29642 = x29640 - x29641;
          Fp x29643 = x29642 * x26;
          Fp x29644 = Fp(x29643.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x29644;
          Fp x29645 = x29643 - x29644;
          Fp x29646 = x29645 * x26;
          Fp x29647 = Fp(x29646.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x29647;
          Fp x29648 = x29646 - x29647;
          Fp x29649 = x29648 * x26;
          Fp x29650 = Fp(x29649.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x29650;
          Fp x29651 = x29649 - x29650;
          Fp x29652 = x29651 * x26;
          Fp x29653 = Fp(x29652.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x29653;
          Fp x29654 = x29652 - x29653;
          Fp x29655 = x29654 * x26;
          Fp x29656 = Fp(x29655.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x29656;
        }
        Fp x29657 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x29658 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x29659 = x29658 * x1;
        Fp x29660 = x29657 + x29659;
        Fp x29661 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x29662 = x29661 * x3;
        Fp x29663 = x29660 + x29662;
        Fp x29664 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x29665 = x29664 * x6;
        Fp x29666 = x29663 + x29665;
        Fp x29667 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x29668 = x29667 * x11;
        Fp x29669 = x29666 + x29668;
        Fp x29670 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x29671 = x29670 * x27;
        Fp x29672 = x29669 + x29671;
        Fp x29673 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x29674 = x29673 * x12;
        Fp x29675 = x29672 + x29674;
        Fp x29676 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x29677 = x29676 * x28;
        Fp x29678 = x29675 + x29677;
        Fp x29679 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x29680 = x29679 * x13;
        Fp x29681 = x29678 + x29680;
        Fp x29682 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x29683 = x29682 * x29;
        Fp x29684 = x29681 + x29683;
        Fp x29685 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x29686 = x29685 * x14;
        Fp x29687 = x29684 + x29686;
        Fp x29688 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x29689 = x29688 * x30;
        Fp x29690 = x29687 + x29689;
        Fp x29691 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x29692 = x29691 * x15;
        Fp x29693 = x29690 + x29692;
        Fp x29694 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x29695 = x29694 * x31;
        Fp x29696 = x29693 + x29695;
        Fp x29697 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x29698 = x29697 * x16;
        Fp x29699 = x29696 + x29698;
        Fp x29700 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x29701 = x29700 * x32;
        Fp x29702 = x29699 + x29701;
        Fp x29703 = x29516 - x29702;
        Fp x29704 = x29703 * x33;
        if (x29704 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:70");
        {
          Fp x29705 = (x29372 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x29705;
          Fp x29706 = x29372 - x71;
          Fp x29707 = (x29706 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x29707;
          Fp x29708 = x29372 - x1;
          Fp x29709 = (x29708 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x29709;
          Fp x29710 = x29372 - x2;
          Fp x29711 = (x29710 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x29711;
        }
        Fp x29712 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x29713 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x29714 = x29713 * x1;
        Fp x29715 = x29712 + x29714;
        Fp x29716 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x29717 = x29716 * x2;
        Fp x29718 = x29715 + x29717;
        Fp x29719 = x29718 - x29372;
        if (x29719 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        if (x29372 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.cpp:76");
        {
          Fp x29720 = Fp(x29515.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x29720;
          Fp x29721 = x29515 - x29720;
          Fp x29722 = x29721 * x26;
          Fp x29723 = Fp(x29722.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x29723;
          Fp x29724 = x29722 - x29723;
          Fp x29725 = x29724 * x26;
          Fp x29726 = Fp(x29725.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x29726;
          Fp x29727 = x29725 - x29726;
          Fp x29728 = x29727 * x26;
          Fp x29729 = Fp(x29728.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x29729;
          Fp x29730 = x29728 - x29729;
          Fp x29731 = x29730 * x26;
          Fp x29732 = Fp(x29731.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x29732;
          Fp x29733 = x29731 - x29732;
          Fp x29734 = x29733 * x26;
          Fp x29735 = Fp(x29734.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x29735;
          Fp x29736 = x29734 - x29735;
          Fp x29737 = x29736 * x26;
          Fp x29738 = Fp(x29737.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x29738;
          Fp x29739 = x29737 - x29738;
          Fp x29740 = x29739 * x26;
          Fp x29741 = Fp(x29740.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x29741;
          Fp x29742 = x29740 - x29741;
          Fp x29743 = x29742 * x26;
          Fp x29744 = Fp(x29743.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x29744;
          Fp x29745 = x29743 - x29744;
          Fp x29746 = x29745 * x26;
          Fp x29747 = Fp(x29746.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x29747;
          Fp x29748 = x29746 - x29747;
          Fp x29749 = x29748 * x26;
          Fp x29750 = Fp(x29749.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x29750;
          Fp x29751 = x29749 - x29750;
          Fp x29752 = x29751 * x26;
          Fp x29753 = Fp(x29752.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x29753;
          Fp x29754 = x29752 - x29753;
          Fp x29755 = x29754 * x26;
          Fp x29756 = Fp(x29755.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x29756;
          Fp x29757 = x29755 - x29756;
          Fp x29758 = x29757 * x26;
          Fp x29759 = Fp(x29758.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x29759;
          Fp x29760 = x29758 - x29759;
          Fp x29761 = x29760 * x26;
          Fp x29762 = Fp(x29761.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x29762;
          Fp x29763 = x29761 - x29762;
          Fp x29764 = x29763 * x26;
          Fp x29765 = Fp(x29764.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x29765;
        }
        Fp x29766 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x29767 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x29768 = x29767 * x1;
        Fp x29769 = x29766 + x29768;
        Fp x29770 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x29771 = x29770 * x3;
        Fp x29772 = x29769 + x29771;
        Fp x29773 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x29774 = x29773 * x6;
        Fp x29775 = x29772 + x29774;
        Fp x29776 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x29777 = x29776 * x11;
        Fp x29778 = x29775 + x29777;
        Fp x29779 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x29780 = x29779 * x27;
        Fp x29781 = x29778 + x29780;
        Fp x29782 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x29783 = x29782 * x12;
        Fp x29784 = x29781 + x29783;
        Fp x29785 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x29786 = x29785 * x28;
        Fp x29787 = x29784 + x29786;
        Fp x29788 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x29789 = x29788 * x13;
        Fp x29790 = x29787 + x29789;
        Fp x29791 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x29792 = x29791 * x29;
        Fp x29793 = x29790 + x29792;
        Fp x29794 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x29795 = x29794 * x14;
        Fp x29796 = x29793 + x29795;
        Fp x29797 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x29798 = x29797 * x30;
        Fp x29799 = x29796 + x29798;
        Fp x29800 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x29801 = x29800 * x15;
        Fp x29802 = x29799 + x29801;
        Fp x29803 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x29804 = x29803 * x31;
        Fp x29805 = x29802 + x29804;
        Fp x29806 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x29807 = x29806 * x16;
        Fp x29808 = x29805 + x29807;
        Fp x29809 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x29810 = x29809 * x32;
        Fp x29811 = x29808 + x29810;
        Fp x29812 = x29515 - x29811;
        Fp x29813 = x29812 * x33;
        args[2][108 * steps + cycle] = x29813;
        Fp x29814 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x29815 = x29516 + x29814;
        {
          Fp x29816 = Fp(x29815.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x29816;
          Fp x29817 = x29815 - x29816;
          Fp x29818 = x29817 * x26;
          Fp x29819 = Fp(x29818.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x29819;
          Fp x29820 = x29818 - x29819;
          Fp x29821 = x29820 * x26;
          Fp x29822 = Fp(x29821.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x29822;
          Fp x29823 = x29821 - x29822;
          Fp x29824 = x29823 * x26;
          Fp x29825 = Fp(x29824.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x29825;
          Fp x29826 = x29824 - x29825;
          Fp x29827 = x29826 * x26;
          Fp x29828 = Fp(x29827.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x29828;
          Fp x29829 = x29827 - x29828;
          Fp x29830 = x29829 * x26;
          Fp x29831 = Fp(x29830.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x29831;
          Fp x29832 = x29830 - x29831;
          Fp x29833 = x29832 * x26;
          Fp x29834 = Fp(x29833.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x29834;
          Fp x29835 = x29833 - x29834;
          Fp x29836 = x29835 * x26;
          Fp x29837 = Fp(x29836.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x29837;
          Fp x29838 = x29836 - x29837;
          Fp x29839 = x29838 * x26;
          Fp x29840 = Fp(x29839.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x29840;
          Fp x29841 = x29839 - x29840;
          Fp x29842 = x29841 * x26;
          Fp x29843 = Fp(x29842.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x29843;
          Fp x29844 = x29842 - x29843;
          Fp x29845 = x29844 * x26;
          Fp x29846 = Fp(x29845.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x29846;
          Fp x29847 = x29845 - x29846;
          Fp x29848 = x29847 * x26;
          Fp x29849 = Fp(x29848.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x29849;
          Fp x29850 = x29848 - x29849;
          Fp x29851 = x29850 * x26;
          Fp x29852 = Fp(x29851.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x29852;
          Fp x29853 = x29851 - x29852;
          Fp x29854 = x29853 * x26;
          Fp x29855 = Fp(x29854.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x29855;
          Fp x29856 = x29854 - x29855;
          Fp x29857 = x29856 * x26;
          Fp x29858 = Fp(x29857.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x29858;
          Fp x29859 = x29857 - x29858;
          Fp x29860 = x29859 * x26;
          Fp x29861 = Fp(x29860.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x29861;
        }
        Fp x29862 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x29863 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x29864 = x29863 * x1;
        Fp x29865 = x29862 + x29864;
        Fp x29866 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x29867 = x29866 * x3;
        Fp x29868 = x29865 + x29867;
        Fp x29869 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x29870 = x29869 * x6;
        Fp x29871 = x29868 + x29870;
        Fp x29872 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x29873 = x29872 * x11;
        Fp x29874 = x29871 + x29873;
        Fp x29875 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x29876 = x29875 * x27;
        Fp x29877 = x29874 + x29876;
        Fp x29878 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x29879 = x29878 * x12;
        Fp x29880 = x29877 + x29879;
        Fp x29881 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x29882 = x29881 * x28;
        Fp x29883 = x29880 + x29882;
        Fp x29884 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x29885 = x29884 * x13;
        Fp x29886 = x29883 + x29885;
        Fp x29887 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x29888 = x29887 * x29;
        Fp x29889 = x29886 + x29888;
        Fp x29890 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x29891 = x29890 * x14;
        Fp x29892 = x29889 + x29891;
        Fp x29893 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x29894 = x29893 * x30;
        Fp x29895 = x29892 + x29894;
        Fp x29896 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x29897 = x29896 * x15;
        Fp x29898 = x29895 + x29897;
        Fp x29899 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x29900 = x29899 * x31;
        Fp x29901 = x29898 + x29900;
        Fp x29902 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x29903 = x29902 * x16;
        Fp x29904 = x29901 + x29903;
        Fp x29905 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x29906 = x29905 * x32;
        Fp x29907 = x29904 + x29906;
        Fp x29908 = x29815 - x29907;
        Fp x29909 = x29908 * x33;
        args[2][109 * steps + cycle] = x29909;
        {
          {
            Fp x29910 = (x29811 == 0) ? Fp(1) : Fp(0);
            Fp x29911 = x71 - x29910;
            args[2][114 * steps + cycle] = x29911;
            Fp x29912 = inv(x29811);
            args[2][115 * steps + cycle] = x29912;
          }
          Fp x29913 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x29914 = x29811 * x29913;
          Fp x29915 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x29916 = x29914 - x29915;
          if (x29916 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x29917 = x71 - x29915;
          Fp x29918 = x29917 * x29811;
          if (x29918 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x29919 = (x29907 == 0) ? Fp(1) : Fp(0);
            Fp x29920 = x71 - x29919;
            args[2][116 * steps + cycle] = x29920;
            Fp x29921 = inv(x29907);
            args[2][117 * steps + cycle] = x29921;
          }
          Fp x29922 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x29923 = x29907 * x29922;
          Fp x29924 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x29925 = x29923 - x29924;
          if (x29925 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x29926 = x71 - x29924;
          Fp x29927 = x29926 * x29907;
          if (x29927 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x29928 = x29917 * x29926;
          Fp x29929 = x71 - x29928;
          args[2][111 * steps + cycle] = x29929;
          Fp x29930 = x71 - x29700;
          Fp x29931 = x29508 * x29930;
          Fp x29932 = x71 - x29905;
          Fp x29933 = x29931 * x29932;
          Fp x29934 = x71 - x29508;
          Fp x29935 = x29934 * x29700;
          Fp x29936 = x29935 * x29905;
          Fp x29937 = x29933 + x29936;
          args[2][112 * steps + cycle] = x29937;
          Fp x29938 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x29939 = x29938 + x29905;
          Fp x29940 = x29938 * x1;
          Fp x29941 = x29940 * x29905;
          Fp x29942 = x29939 - x29941;
          args[2][113 * steps + cycle] = x29942;
        }
        args[2][100 * steps + cycle] = x29811;
        args[2][101 * steps + cycle] = x29907;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x71;
        Fp x29943 = x25783 + x3;
        args[2][104 * steps + cycle] = x29943;
        args[2][105 * steps + cycle] = x25805;
        Fp x29944 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x29945 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x29946 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x29947 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x29948 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x29949 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x25805;
        host_args[2] = x25783;
        host_args[3] = x29510;
        host_args[4] = x29414;
        host_args[5] = x29702;
        host_args[6] = x29608;
        host_args[7] = x29907;
        host_args[8] = x29811;
        host_args[9] = x29944;
        host_args[10] = x29945;
        host_args[11] = x29946;
        host_args[12] = x29947;
        host_args[13] = x29948;
        host_args[14] = x29949;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x29950 = args[2][78 * steps + ((cycle - 1) & mask)];
      if (x29950 != 0) {
        {
          Fp x29951 = Fp(x25758.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x29951;
          Fp x29952 = x25758 - x29951;
          Fp x29953 = x29952 * x26;
          Fp x29954 = Fp(x29953.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x29954;
          Fp x29955 = x29953 - x29954;
          Fp x29956 = x29955 * x26;
          Fp x29957 = Fp(x29956.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x29957;
          Fp x29958 = x29956 - x29957;
          Fp x29959 = x29958 * x26;
          Fp x29960 = Fp(x29959.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x29960;
          Fp x29961 = x29959 - x29960;
          Fp x29962 = x29961 * x26;
          Fp x29963 = Fp(x29962.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x29963;
          Fp x29964 = x29962 - x29963;
          Fp x29965 = x29964 * x26;
          Fp x29966 = Fp(x29965.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x29966;
          Fp x29967 = x29965 - x29966;
          Fp x29968 = x29967 * x26;
          Fp x29969 = Fp(x29968.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x29969;
          Fp x29970 = x29968 - x29969;
          Fp x29971 = x29970 * x26;
          Fp x29972 = Fp(x29971.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x29972;
          Fp x29973 = x29971 - x29972;
          Fp x29974 = x29973 * x26;
          Fp x29975 = Fp(x29974.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x29975;
          Fp x29976 = x29974 - x29975;
          Fp x29977 = x29976 * x26;
          Fp x29978 = Fp(x29977.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x29978;
          Fp x29979 = x29977 - x29978;
          Fp x29980 = x29979 * x26;
          Fp x29981 = Fp(x29980.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x29981;
          Fp x29982 = x29980 - x29981;
          Fp x29983 = x29982 * x26;
          Fp x29984 = Fp(x29983.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x29984;
          Fp x29985 = x29983 - x29984;
          Fp x29986 = x29985 * x26;
          Fp x29987 = Fp(x29986.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x29987;
          Fp x29988 = x29986 - x29987;
          Fp x29989 = x29988 * x26;
          Fp x29990 = Fp(x29989.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x29990;
          Fp x29991 = x29989 - x29990;
          Fp x29992 = x29991 * x26;
          Fp x29993 = Fp(x29992.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x29993;
          Fp x29994 = x29992 - x29993;
          Fp x29995 = x29994 * x26;
          Fp x29996 = Fp(x29995.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x29996;
        }
        Fp x29997 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x29998 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x29999 = x29998 * x1;
        Fp x30000 = x29997 + x29999;
        Fp x30001 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x30002 = x30001 * x3;
        Fp x30003 = x30000 + x30002;
        Fp x30004 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x30005 = x30004 * x6;
        Fp x30006 = x30003 + x30005;
        Fp x30007 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x30008 = x30007 * x11;
        Fp x30009 = x30006 + x30008;
        Fp x30010 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x30011 = x30010 * x27;
        Fp x30012 = x30009 + x30011;
        Fp x30013 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x30014 = x30013 * x12;
        Fp x30015 = x30012 + x30014;
        Fp x30016 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x30017 = x30016 * x28;
        Fp x30018 = x30015 + x30017;
        Fp x30019 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x30020 = x30019 * x13;
        Fp x30021 = x30018 + x30020;
        Fp x30022 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x30023 = x30022 * x29;
        Fp x30024 = x30021 + x30023;
        Fp x30025 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x30026 = x30025 * x14;
        Fp x30027 = x30024 + x30026;
        Fp x30028 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x30029 = x30028 * x30;
        Fp x30030 = x30027 + x30029;
        Fp x30031 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x30032 = x30031 * x15;
        Fp x30033 = x30030 + x30032;
        Fp x30034 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x30035 = x30034 * x31;
        Fp x30036 = x30033 + x30035;
        Fp x30037 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x30038 = x30037 * x16;
        Fp x30039 = x30036 + x30038;
        Fp x30040 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x30041 = x30040 * x32;
        Fp x30042 = x30039 + x30041;
        Fp x30043 = x25758 - x30042;
        Fp x30044 = x30043 * x33;
        args[2][106 * steps + cycle] = x30044;
        Fp x30045 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x30046 = x25759 + x30045;
        {
          Fp x30047 = Fp(x30046.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x30047;
          Fp x30048 = x30046 - x30047;
          Fp x30049 = x30048 * x26;
          Fp x30050 = Fp(x30049.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x30050;
          Fp x30051 = x30049 - x30050;
          Fp x30052 = x30051 * x26;
          Fp x30053 = Fp(x30052.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x30053;
          Fp x30054 = x30052 - x30053;
          Fp x30055 = x30054 * x26;
          Fp x30056 = Fp(x30055.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x30056;
          Fp x30057 = x30055 - x30056;
          Fp x30058 = x30057 * x26;
          Fp x30059 = Fp(x30058.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x30059;
          Fp x30060 = x30058 - x30059;
          Fp x30061 = x30060 * x26;
          Fp x30062 = Fp(x30061.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x30062;
          Fp x30063 = x30061 - x30062;
          Fp x30064 = x30063 * x26;
          Fp x30065 = Fp(x30064.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x30065;
          Fp x30066 = x30064 - x30065;
          Fp x30067 = x30066 * x26;
          Fp x30068 = Fp(x30067.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x30068;
          Fp x30069 = x30067 - x30068;
          Fp x30070 = x30069 * x26;
          Fp x30071 = Fp(x30070.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x30071;
          Fp x30072 = x30070 - x30071;
          Fp x30073 = x30072 * x26;
          Fp x30074 = Fp(x30073.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x30074;
          Fp x30075 = x30073 - x30074;
          Fp x30076 = x30075 * x26;
          Fp x30077 = Fp(x30076.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x30077;
          Fp x30078 = x30076 - x30077;
          Fp x30079 = x30078 * x26;
          Fp x30080 = Fp(x30079.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x30080;
          Fp x30081 = x30079 - x30080;
          Fp x30082 = x30081 * x26;
          Fp x30083 = Fp(x30082.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x30083;
          Fp x30084 = x30082 - x30083;
          Fp x30085 = x30084 * x26;
          Fp x30086 = Fp(x30085.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x30086;
          Fp x30087 = x30085 - x30086;
          Fp x30088 = x30087 * x26;
          Fp x30089 = Fp(x30088.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x30089;
          Fp x30090 = x30088 - x30089;
          Fp x30091 = x30090 * x26;
          Fp x30092 = Fp(x30091.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x30092;
        }
        Fp x30093 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x30094 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x30095 = x30094 * x1;
        Fp x30096 = x30093 + x30095;
        Fp x30097 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x30098 = x30097 * x3;
        Fp x30099 = x30096 + x30098;
        Fp x30100 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x30101 = x30100 * x6;
        Fp x30102 = x30099 + x30101;
        Fp x30103 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x30104 = x30103 * x11;
        Fp x30105 = x30102 + x30104;
        Fp x30106 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x30107 = x30106 * x27;
        Fp x30108 = x30105 + x30107;
        Fp x30109 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x30110 = x30109 * x12;
        Fp x30111 = x30108 + x30110;
        Fp x30112 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x30113 = x30112 * x28;
        Fp x30114 = x30111 + x30113;
        Fp x30115 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x30116 = x30115 * x13;
        Fp x30117 = x30114 + x30116;
        Fp x30118 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x30119 = x30118 * x29;
        Fp x30120 = x30117 + x30119;
        Fp x30121 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x30122 = x30121 * x14;
        Fp x30123 = x30120 + x30122;
        Fp x30124 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x30125 = x30124 * x30;
        Fp x30126 = x30123 + x30125;
        Fp x30127 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x30128 = x30127 * x15;
        Fp x30129 = x30126 + x30128;
        Fp x30130 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x30131 = x30130 * x31;
        Fp x30132 = x30129 + x30131;
        Fp x30133 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x30134 = x30133 * x16;
        Fp x30135 = x30132 + x30134;
        Fp x30136 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x30137 = x30136 * x32;
        Fp x30138 = x30135 + x30137;
        Fp x30139 = x30046 - x30138;
        Fp x30140 = x30139 * x33;
        args[2][107 * steps + cycle] = x30140;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x30141 = host_outs[0];
          Fp x30142 = host_outs[1];
          args[2][129 * steps + cycle] = x30141;
          args[2][130 * steps + cycle] = x30142;
        }
        Fp x30143 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x30144 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x30145 = Fp(x30143.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x30145;
          Fp x30146 = x30143 - x30145;
          Fp x30147 = x30146 * x26;
          Fp x30148 = Fp(x30147.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x30148;
          Fp x30149 = x30147 - x30148;
          Fp x30150 = x30149 * x26;
          Fp x30151 = Fp(x30150.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x30151;
          Fp x30152 = x30150 - x30151;
          Fp x30153 = x30152 * x26;
          Fp x30154 = Fp(x30153.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x30154;
          Fp x30155 = x30153 - x30154;
          Fp x30156 = x30155 * x26;
          Fp x30157 = Fp(x30156.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x30157;
          Fp x30158 = x30156 - x30157;
          Fp x30159 = x30158 * x26;
          Fp x30160 = Fp(x30159.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x30160;
          Fp x30161 = x30159 - x30160;
          Fp x30162 = x30161 * x26;
          Fp x30163 = Fp(x30162.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x30163;
          Fp x30164 = x30162 - x30163;
          Fp x30165 = x30164 * x26;
          Fp x30166 = Fp(x30165.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x30166;
          Fp x30167 = x30165 - x30166;
          Fp x30168 = x30167 * x26;
          Fp x30169 = Fp(x30168.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x30169;
          Fp x30170 = x30168 - x30169;
          Fp x30171 = x30170 * x26;
          Fp x30172 = Fp(x30171.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x30172;
          Fp x30173 = x30171 - x30172;
          Fp x30174 = x30173 * x26;
          Fp x30175 = Fp(x30174.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x30175;
          Fp x30176 = x30174 - x30175;
          Fp x30177 = x30176 * x26;
          Fp x30178 = Fp(x30177.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x30178;
          Fp x30179 = x30177 - x30178;
          Fp x30180 = x30179 * x26;
          Fp x30181 = Fp(x30180.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x30181;
          Fp x30182 = x30180 - x30181;
          Fp x30183 = x30182 * x26;
          Fp x30184 = Fp(x30183.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x30184;
          Fp x30185 = x30183 - x30184;
          Fp x30186 = x30185 * x26;
          Fp x30187 = Fp(x30186.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x30187;
          Fp x30188 = x30186 - x30187;
          Fp x30189 = x30188 * x26;
          Fp x30190 = Fp(x30189.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x30190;
        }
        Fp x30191 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x30192 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x30193 = x30192 * x1;
        Fp x30194 = x30191 + x30193;
        Fp x30195 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x30196 = x30195 * x3;
        Fp x30197 = x30194 + x30196;
        Fp x30198 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x30199 = x30198 * x6;
        Fp x30200 = x30197 + x30199;
        Fp x30201 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x30202 = x30201 * x11;
        Fp x30203 = x30200 + x30202;
        Fp x30204 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x30205 = x30204 * x27;
        Fp x30206 = x30203 + x30205;
        Fp x30207 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x30208 = x30207 * x12;
        Fp x30209 = x30206 + x30208;
        Fp x30210 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x30211 = x30210 * x28;
        Fp x30212 = x30209 + x30211;
        Fp x30213 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x30214 = x30213 * x13;
        Fp x30215 = x30212 + x30214;
        Fp x30216 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x30217 = x30216 * x29;
        Fp x30218 = x30215 + x30217;
        Fp x30219 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x30220 = x30219 * x14;
        Fp x30221 = x30218 + x30220;
        Fp x30222 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x30223 = x30222 * x30;
        Fp x30224 = x30221 + x30223;
        Fp x30225 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x30226 = x30225 * x15;
        Fp x30227 = x30224 + x30226;
        Fp x30228 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x30229 = x30228 * x31;
        Fp x30230 = x30227 + x30229;
        Fp x30231 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x30232 = x30231 * x16;
        Fp x30233 = x30230 + x30232;
        Fp x30234 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x30235 = x30234 * x32;
        Fp x30236 = x30233 + x30235;
        Fp x30237 = x30143 - x30236;
        Fp x30238 = x30237 * x33;
        if (x30238 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:71");
        {
          Fp x30239 = Fp(x30144.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x30239;
          Fp x30240 = x30144 - x30239;
          Fp x30241 = x30240 * x26;
          Fp x30242 = Fp(x30241.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x30242;
          Fp x30243 = x30241 - x30242;
          Fp x30244 = x30243 * x26;
          Fp x30245 = Fp(x30244.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x30245;
          Fp x30246 = x30244 - x30245;
          Fp x30247 = x30246 * x26;
          Fp x30248 = Fp(x30247.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x30248;
          Fp x30249 = x30247 - x30248;
          Fp x30250 = x30249 * x26;
          Fp x30251 = Fp(x30250.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x30251;
          Fp x30252 = x30250 - x30251;
          Fp x30253 = x30252 * x26;
          Fp x30254 = Fp(x30253.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x30254;
          Fp x30255 = x30253 - x30254;
          Fp x30256 = x30255 * x26;
          Fp x30257 = Fp(x30256.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x30257;
          Fp x30258 = x30256 - x30257;
          Fp x30259 = x30258 * x26;
          Fp x30260 = Fp(x30259.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x30260;
          Fp x30261 = x30259 - x30260;
          Fp x30262 = x30261 * x26;
          Fp x30263 = Fp(x30262.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x30263;
          Fp x30264 = x30262 - x30263;
          Fp x30265 = x30264 * x26;
          Fp x30266 = Fp(x30265.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x30266;
          Fp x30267 = x30265 - x30266;
          Fp x30268 = x30267 * x26;
          Fp x30269 = Fp(x30268.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x30269;
          Fp x30270 = x30268 - x30269;
          Fp x30271 = x30270 * x26;
          Fp x30272 = Fp(x30271.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x30272;
          Fp x30273 = x30271 - x30272;
          Fp x30274 = x30273 * x26;
          Fp x30275 = Fp(x30274.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x30275;
          Fp x30276 = x30274 - x30275;
          Fp x30277 = x30276 * x26;
          Fp x30278 = Fp(x30277.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x30278;
          Fp x30279 = x30277 - x30278;
          Fp x30280 = x30279 * x26;
          Fp x30281 = Fp(x30280.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x30281;
          Fp x30282 = x30280 - x30281;
          Fp x30283 = x30282 * x26;
          Fp x30284 = Fp(x30283.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x30284;
        }
        Fp x30285 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x30286 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x30287 = x30286 * x1;
        Fp x30288 = x30285 + x30287;
        Fp x30289 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x30290 = x30289 * x3;
        Fp x30291 = x30288 + x30290;
        Fp x30292 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x30293 = x30292 * x6;
        Fp x30294 = x30291 + x30293;
        Fp x30295 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x30296 = x30295 * x11;
        Fp x30297 = x30294 + x30296;
        Fp x30298 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x30299 = x30298 * x27;
        Fp x30300 = x30297 + x30299;
        Fp x30301 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x30302 = x30301 * x12;
        Fp x30303 = x30300 + x30302;
        Fp x30304 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x30305 = x30304 * x28;
        Fp x30306 = x30303 + x30305;
        Fp x30307 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x30308 = x30307 * x13;
        Fp x30309 = x30306 + x30308;
        Fp x30310 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x30311 = x30310 * x29;
        Fp x30312 = x30309 + x30311;
        Fp x30313 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x30314 = x30313 * x14;
        Fp x30315 = x30312 + x30314;
        Fp x30316 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x30317 = x30316 * x30;
        Fp x30318 = x30315 + x30317;
        Fp x30319 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x30320 = x30319 * x15;
        Fp x30321 = x30318 + x30320;
        Fp x30322 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x30323 = x30322 * x31;
        Fp x30324 = x30321 + x30323;
        Fp x30325 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x30326 = x30325 * x16;
        Fp x30327 = x30324 + x30326;
        Fp x30328 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x30329 = x30328 * x32;
        Fp x30330 = x30327 + x30329;
        Fp x30331 = x30144 - x30330;
        Fp x30332 = x30331 * x33;
        if (x30332 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:71");
        {
          Fp x30333 = (x30000 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x30333;
          Fp x30334 = x30000 - x71;
          Fp x30335 = (x30334 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x30335;
          Fp x30336 = x30000 - x1;
          Fp x30337 = (x30336 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x30337;
          Fp x30338 = x30000 - x2;
          Fp x30339 = (x30338 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x30339;
        }
        Fp x30340 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x30341 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x30342 = x30341 * x1;
        Fp x30343 = x30340 + x30342;
        Fp x30344 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x30345 = x30344 * x2;
        Fp x30346 = x30343 + x30345;
        Fp x30347 = x30346 - x30000;
        if (x30347 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x30348 = x30042 + x17;
        Fp x30349 = x30348 - x30236;
        Fp x30350 = x30138 + x35;
        Fp x30351 = x30350 - x30330;
        {
          Fp x30352 = Fp(x30349.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x30352;
          Fp x30353 = x30349 - x30352;
          Fp x30354 = x30353 * x26;
          Fp x30355 = Fp(x30354.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x30355;
          Fp x30356 = x30354 - x30355;
          Fp x30357 = x30356 * x26;
          Fp x30358 = Fp(x30357.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x30358;
          Fp x30359 = x30357 - x30358;
          Fp x30360 = x30359 * x26;
          Fp x30361 = Fp(x30360.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x30361;
          Fp x30362 = x30360 - x30361;
          Fp x30363 = x30362 * x26;
          Fp x30364 = Fp(x30363.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x30364;
          Fp x30365 = x30363 - x30364;
          Fp x30366 = x30365 * x26;
          Fp x30367 = Fp(x30366.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x30367;
          Fp x30368 = x30366 - x30367;
          Fp x30369 = x30368 * x26;
          Fp x30370 = Fp(x30369.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x30370;
          Fp x30371 = x30369 - x30370;
          Fp x30372 = x30371 * x26;
          Fp x30373 = Fp(x30372.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x30373;
          Fp x30374 = x30372 - x30373;
          Fp x30375 = x30374 * x26;
          Fp x30376 = Fp(x30375.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x30376;
          Fp x30377 = x30375 - x30376;
          Fp x30378 = x30377 * x26;
          Fp x30379 = Fp(x30378.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x30379;
          Fp x30380 = x30378 - x30379;
          Fp x30381 = x30380 * x26;
          Fp x30382 = Fp(x30381.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x30382;
          Fp x30383 = x30381 - x30382;
          Fp x30384 = x30383 * x26;
          Fp x30385 = Fp(x30384.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x30385;
          Fp x30386 = x30384 - x30385;
          Fp x30387 = x30386 * x26;
          Fp x30388 = Fp(x30387.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x30388;
          Fp x30389 = x30387 - x30388;
          Fp x30390 = x30389 * x26;
          Fp x30391 = Fp(x30390.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x30391;
          Fp x30392 = x30390 - x30391;
          Fp x30393 = x30392 * x26;
          Fp x30394 = Fp(x30393.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x30394;
          Fp x30395 = x30393 - x30394;
          Fp x30396 = x30395 * x26;
          Fp x30397 = Fp(x30396.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x30397;
        }
        Fp x30398 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x30399 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x30400 = x30399 * x1;
        Fp x30401 = x30398 + x30400;
        Fp x30402 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x30403 = x30402 * x3;
        Fp x30404 = x30401 + x30403;
        Fp x30405 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x30406 = x30405 * x6;
        Fp x30407 = x30404 + x30406;
        Fp x30408 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x30409 = x30408 * x11;
        Fp x30410 = x30407 + x30409;
        Fp x30411 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x30412 = x30411 * x27;
        Fp x30413 = x30410 + x30412;
        Fp x30414 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x30415 = x30414 * x12;
        Fp x30416 = x30413 + x30415;
        Fp x30417 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x30418 = x30417 * x28;
        Fp x30419 = x30416 + x30418;
        Fp x30420 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x30421 = x30420 * x13;
        Fp x30422 = x30419 + x30421;
        Fp x30423 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x30424 = x30423 * x29;
        Fp x30425 = x30422 + x30424;
        Fp x30426 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x30427 = x30426 * x14;
        Fp x30428 = x30425 + x30427;
        Fp x30429 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x30430 = x30429 * x30;
        Fp x30431 = x30428 + x30430;
        Fp x30432 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x30433 = x30432 * x15;
        Fp x30434 = x30431 + x30433;
        Fp x30435 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x30436 = x30435 * x31;
        Fp x30437 = x30434 + x30436;
        Fp x30438 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x30439 = x30438 * x16;
        Fp x30440 = x30437 + x30439;
        Fp x30441 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x30442 = x30441 * x32;
        Fp x30443 = x30440 + x30442;
        Fp x30444 = x30349 - x30443;
        Fp x30445 = x30444 * x33;
        args[2][108 * steps + cycle] = x30445;
        Fp x30446 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x30447 = x30351 + x30446;
        {
          Fp x30448 = Fp(x30447.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x30448;
          Fp x30449 = x30447 - x30448;
          Fp x30450 = x30449 * x26;
          Fp x30451 = Fp(x30450.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x30451;
          Fp x30452 = x30450 - x30451;
          Fp x30453 = x30452 * x26;
          Fp x30454 = Fp(x30453.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x30454;
          Fp x30455 = x30453 - x30454;
          Fp x30456 = x30455 * x26;
          Fp x30457 = Fp(x30456.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x30457;
          Fp x30458 = x30456 - x30457;
          Fp x30459 = x30458 * x26;
          Fp x30460 = Fp(x30459.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x30460;
          Fp x30461 = x30459 - x30460;
          Fp x30462 = x30461 * x26;
          Fp x30463 = Fp(x30462.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x30463;
          Fp x30464 = x30462 - x30463;
          Fp x30465 = x30464 * x26;
          Fp x30466 = Fp(x30465.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x30466;
          Fp x30467 = x30465 - x30466;
          Fp x30468 = x30467 * x26;
          Fp x30469 = Fp(x30468.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x30469;
          Fp x30470 = x30468 - x30469;
          Fp x30471 = x30470 * x26;
          Fp x30472 = Fp(x30471.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x30472;
          Fp x30473 = x30471 - x30472;
          Fp x30474 = x30473 * x26;
          Fp x30475 = Fp(x30474.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x30475;
          Fp x30476 = x30474 - x30475;
          Fp x30477 = x30476 * x26;
          Fp x30478 = Fp(x30477.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x30478;
          Fp x30479 = x30477 - x30478;
          Fp x30480 = x30479 * x26;
          Fp x30481 = Fp(x30480.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x30481;
          Fp x30482 = x30480 - x30481;
          Fp x30483 = x30482 * x26;
          Fp x30484 = Fp(x30483.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x30484;
          Fp x30485 = x30483 - x30484;
          Fp x30486 = x30485 * x26;
          Fp x30487 = Fp(x30486.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x30487;
          Fp x30488 = x30486 - x30487;
          Fp x30489 = x30488 * x26;
          Fp x30490 = Fp(x30489.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x30490;
          Fp x30491 = x30489 - x30490;
          Fp x30492 = x30491 * x26;
          Fp x30493 = Fp(x30492.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x30493;
        }
        Fp x30494 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x30495 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x30496 = x30495 * x1;
        Fp x30497 = x30494 + x30496;
        Fp x30498 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x30499 = x30498 * x3;
        Fp x30500 = x30497 + x30499;
        Fp x30501 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x30502 = x30501 * x6;
        Fp x30503 = x30500 + x30502;
        Fp x30504 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x30505 = x30504 * x11;
        Fp x30506 = x30503 + x30505;
        Fp x30507 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x30508 = x30507 * x27;
        Fp x30509 = x30506 + x30508;
        Fp x30510 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x30511 = x30510 * x12;
        Fp x30512 = x30509 + x30511;
        Fp x30513 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x30514 = x30513 * x28;
        Fp x30515 = x30512 + x30514;
        Fp x30516 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x30517 = x30516 * x13;
        Fp x30518 = x30515 + x30517;
        Fp x30519 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x30520 = x30519 * x29;
        Fp x30521 = x30518 + x30520;
        Fp x30522 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x30523 = x30522 * x14;
        Fp x30524 = x30521 + x30523;
        Fp x30525 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x30526 = x30525 * x30;
        Fp x30527 = x30524 + x30526;
        Fp x30528 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x30529 = x30528 * x15;
        Fp x30530 = x30527 + x30529;
        Fp x30531 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x30532 = x30531 * x31;
        Fp x30533 = x30530 + x30532;
        Fp x30534 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x30535 = x30534 * x16;
        Fp x30536 = x30533 + x30535;
        Fp x30537 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x30538 = x30537 * x32;
        Fp x30539 = x30536 + x30538;
        Fp x30540 = x30447 - x30539;
        Fp x30541 = x30540 * x33;
        args[2][109 * steps + cycle] = x30541;
        {
          {
            Fp x30542 = (x30443 == 0) ? Fp(1) : Fp(0);
            Fp x30543 = x71 - x30542;
            args[2][114 * steps + cycle] = x30543;
            Fp x30544 = inv(x30443);
            args[2][115 * steps + cycle] = x30544;
          }
          Fp x30545 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x30546 = x30443 * x30545;
          Fp x30547 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x30548 = x30546 - x30547;
          if (x30548 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x30549 = x71 - x30547;
          Fp x30550 = x30549 * x30443;
          if (x30550 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x30551 = (x30539 == 0) ? Fp(1) : Fp(0);
            Fp x30552 = x71 - x30551;
            args[2][116 * steps + cycle] = x30552;
            Fp x30553 = inv(x30539);
            args[2][117 * steps + cycle] = x30553;
          }
          Fp x30554 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x30555 = x30539 * x30554;
          Fp x30556 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x30557 = x30555 - x30556;
          if (x30557 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x30558 = x71 - x30556;
          Fp x30559 = x30558 * x30539;
          if (x30559 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x30560 = x30549 * x30558;
          Fp x30561 = x71 - x30560;
          args[2][111 * steps + cycle] = x30561;
          Fp x30562 = x71 - x30328;
          Fp x30563 = x30136 * x30562;
          Fp x30564 = x71 - x30537;
          Fp x30565 = x30563 * x30564;
          Fp x30566 = x71 - x30136;
          Fp x30567 = x30566 * x30328;
          Fp x30568 = x30567 * x30537;
          Fp x30569 = x30565 + x30568;
          args[2][112 * steps + cycle] = x30569;
          Fp x30570 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x30571 = x30570 + x30537;
          Fp x30572 = x30570 * x1;
          Fp x30573 = x30572 * x30537;
          Fp x30574 = x30571 - x30573;
          args[2][113 * steps + cycle] = x30574;
        }
        Fp x30575 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x30576 = x71 - x30575;
        args[2][100 * steps + cycle] = x30576;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x70;
        Fp x30577 = args[2][100 * steps + ((cycle - 0) & mask)];
        Fp x30578 = x30577 * x25760;
        Fp x30579 = x30577 * x25761;
        Fp x30580 = x25783 + x30578;
        Fp x30581 = x25805 + x30579;
        Fp x30582 = x71 - x30577;
        Fp x30583 = x30582 * x3;
        Fp x30584 = x30580 + x30583;
        args[2][104 * steps + cycle] = x30584;
        args[2][105 * steps + cycle] = x30581;
        Fp x30585 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x30586 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x30587 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x30588 = args[2][101 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x25805;
        host_args[2] = x25783;
        host_args[3] = x30138;
        host_args[4] = x30042;
        host_args[5] = x30330;
        host_args[6] = x30236;
        host_args[7] = x30539;
        host_args[8] = x30443;
        host_args[9] = x30575;
        host_args[10] = x30585;
        host_args[11] = x30586;
        host_args[12] = x30587;
        host_args[13] = x30588;
        host_args[14] = x30577;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x30589 = args[2][79 * steps + ((cycle - 1) & mask)];
      if (x30589 != 0) {
        {
          Fp x30590 = Fp(x25758.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x30590;
          Fp x30591 = x25758 - x30590;
          Fp x30592 = x30591 * x26;
          Fp x30593 = Fp(x30592.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x30593;
          Fp x30594 = x30592 - x30593;
          Fp x30595 = x30594 * x26;
          Fp x30596 = Fp(x30595.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x30596;
          Fp x30597 = x30595 - x30596;
          Fp x30598 = x30597 * x26;
          Fp x30599 = Fp(x30598.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x30599;
          Fp x30600 = x30598 - x30599;
          Fp x30601 = x30600 * x26;
          Fp x30602 = Fp(x30601.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x30602;
          Fp x30603 = x30601 - x30602;
          Fp x30604 = x30603 * x26;
          Fp x30605 = Fp(x30604.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x30605;
          Fp x30606 = x30604 - x30605;
          Fp x30607 = x30606 * x26;
          Fp x30608 = Fp(x30607.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x30608;
          Fp x30609 = x30607 - x30608;
          Fp x30610 = x30609 * x26;
          Fp x30611 = Fp(x30610.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x30611;
          Fp x30612 = x30610 - x30611;
          Fp x30613 = x30612 * x26;
          Fp x30614 = Fp(x30613.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x30614;
          Fp x30615 = x30613 - x30614;
          Fp x30616 = x30615 * x26;
          Fp x30617 = Fp(x30616.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x30617;
          Fp x30618 = x30616 - x30617;
          Fp x30619 = x30618 * x26;
          Fp x30620 = Fp(x30619.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x30620;
          Fp x30621 = x30619 - x30620;
          Fp x30622 = x30621 * x26;
          Fp x30623 = Fp(x30622.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x30623;
          Fp x30624 = x30622 - x30623;
          Fp x30625 = x30624 * x26;
          Fp x30626 = Fp(x30625.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x30626;
          Fp x30627 = x30625 - x30626;
          Fp x30628 = x30627 * x26;
          Fp x30629 = Fp(x30628.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x30629;
          Fp x30630 = x30628 - x30629;
          Fp x30631 = x30630 * x26;
          Fp x30632 = Fp(x30631.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x30632;
          Fp x30633 = x30631 - x30632;
          Fp x30634 = x30633 * x26;
          Fp x30635 = Fp(x30634.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x30635;
        }
        Fp x30636 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x30637 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x30638 = x30637 * x1;
        Fp x30639 = x30636 + x30638;
        Fp x30640 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x30641 = x30640 * x3;
        Fp x30642 = x30639 + x30641;
        Fp x30643 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x30644 = x30643 * x6;
        Fp x30645 = x30642 + x30644;
        Fp x30646 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x30647 = x30646 * x11;
        Fp x30648 = x30645 + x30647;
        Fp x30649 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x30650 = x30649 * x27;
        Fp x30651 = x30648 + x30650;
        Fp x30652 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x30653 = x30652 * x12;
        Fp x30654 = x30651 + x30653;
        Fp x30655 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x30656 = x30655 * x28;
        Fp x30657 = x30654 + x30656;
        Fp x30658 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x30659 = x30658 * x13;
        Fp x30660 = x30657 + x30659;
        Fp x30661 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x30662 = x30661 * x29;
        Fp x30663 = x30660 + x30662;
        Fp x30664 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x30665 = x30664 * x14;
        Fp x30666 = x30663 + x30665;
        Fp x30667 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x30668 = x30667 * x30;
        Fp x30669 = x30666 + x30668;
        Fp x30670 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x30671 = x30670 * x15;
        Fp x30672 = x30669 + x30671;
        Fp x30673 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x30674 = x30673 * x31;
        Fp x30675 = x30672 + x30674;
        Fp x30676 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x30677 = x30676 * x16;
        Fp x30678 = x30675 + x30677;
        Fp x30679 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x30680 = x30679 * x32;
        Fp x30681 = x30678 + x30680;
        Fp x30682 = x25758 - x30681;
        Fp x30683 = x30682 * x33;
        args[2][106 * steps + cycle] = x30683;
        Fp x30684 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x30685 = x25759 + x30684;
        {
          Fp x30686 = Fp(x30685.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x30686;
          Fp x30687 = x30685 - x30686;
          Fp x30688 = x30687 * x26;
          Fp x30689 = Fp(x30688.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x30689;
          Fp x30690 = x30688 - x30689;
          Fp x30691 = x30690 * x26;
          Fp x30692 = Fp(x30691.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x30692;
          Fp x30693 = x30691 - x30692;
          Fp x30694 = x30693 * x26;
          Fp x30695 = Fp(x30694.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x30695;
          Fp x30696 = x30694 - x30695;
          Fp x30697 = x30696 * x26;
          Fp x30698 = Fp(x30697.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x30698;
          Fp x30699 = x30697 - x30698;
          Fp x30700 = x30699 * x26;
          Fp x30701 = Fp(x30700.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x30701;
          Fp x30702 = x30700 - x30701;
          Fp x30703 = x30702 * x26;
          Fp x30704 = Fp(x30703.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x30704;
          Fp x30705 = x30703 - x30704;
          Fp x30706 = x30705 * x26;
          Fp x30707 = Fp(x30706.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x30707;
          Fp x30708 = x30706 - x30707;
          Fp x30709 = x30708 * x26;
          Fp x30710 = Fp(x30709.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x30710;
          Fp x30711 = x30709 - x30710;
          Fp x30712 = x30711 * x26;
          Fp x30713 = Fp(x30712.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x30713;
          Fp x30714 = x30712 - x30713;
          Fp x30715 = x30714 * x26;
          Fp x30716 = Fp(x30715.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x30716;
          Fp x30717 = x30715 - x30716;
          Fp x30718 = x30717 * x26;
          Fp x30719 = Fp(x30718.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x30719;
          Fp x30720 = x30718 - x30719;
          Fp x30721 = x30720 * x26;
          Fp x30722 = Fp(x30721.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x30722;
          Fp x30723 = x30721 - x30722;
          Fp x30724 = x30723 * x26;
          Fp x30725 = Fp(x30724.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x30725;
          Fp x30726 = x30724 - x30725;
          Fp x30727 = x30726 * x26;
          Fp x30728 = Fp(x30727.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x30728;
          Fp x30729 = x30727 - x30728;
          Fp x30730 = x30729 * x26;
          Fp x30731 = Fp(x30730.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x30731;
        }
        Fp x30732 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x30733 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x30734 = x30733 * x1;
        Fp x30735 = x30732 + x30734;
        Fp x30736 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x30737 = x30736 * x3;
        Fp x30738 = x30735 + x30737;
        Fp x30739 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x30740 = x30739 * x6;
        Fp x30741 = x30738 + x30740;
        Fp x30742 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x30743 = x30742 * x11;
        Fp x30744 = x30741 + x30743;
        Fp x30745 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x30746 = x30745 * x27;
        Fp x30747 = x30744 + x30746;
        Fp x30748 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x30749 = x30748 * x12;
        Fp x30750 = x30747 + x30749;
        Fp x30751 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x30752 = x30751 * x28;
        Fp x30753 = x30750 + x30752;
        Fp x30754 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x30755 = x30754 * x13;
        Fp x30756 = x30753 + x30755;
        Fp x30757 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x30758 = x30757 * x29;
        Fp x30759 = x30756 + x30758;
        Fp x30760 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x30761 = x30760 * x14;
        Fp x30762 = x30759 + x30761;
        Fp x30763 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x30764 = x30763 * x30;
        Fp x30765 = x30762 + x30764;
        Fp x30766 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x30767 = x30766 * x15;
        Fp x30768 = x30765 + x30767;
        Fp x30769 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x30770 = x30769 * x31;
        Fp x30771 = x30768 + x30770;
        Fp x30772 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x30773 = x30772 * x16;
        Fp x30774 = x30771 + x30773;
        Fp x30775 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x30776 = x30775 * x32;
        Fp x30777 = x30774 + x30776;
        Fp x30778 = x30685 - x30777;
        Fp x30779 = x30778 * x33;
        args[2][107 * steps + cycle] = x30779;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x30780 = host_outs[0];
          Fp x30781 = host_outs[1];
          args[2][129 * steps + cycle] = x30780;
          args[2][130 * steps + cycle] = x30781;
        }
        Fp x30782 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x30783 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x30784 = Fp(x30782.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x30784;
          Fp x30785 = x30782 - x30784;
          Fp x30786 = x30785 * x26;
          Fp x30787 = Fp(x30786.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x30787;
          Fp x30788 = x30786 - x30787;
          Fp x30789 = x30788 * x26;
          Fp x30790 = Fp(x30789.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x30790;
          Fp x30791 = x30789 - x30790;
          Fp x30792 = x30791 * x26;
          Fp x30793 = Fp(x30792.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x30793;
          Fp x30794 = x30792 - x30793;
          Fp x30795 = x30794 * x26;
          Fp x30796 = Fp(x30795.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x30796;
          Fp x30797 = x30795 - x30796;
          Fp x30798 = x30797 * x26;
          Fp x30799 = Fp(x30798.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x30799;
          Fp x30800 = x30798 - x30799;
          Fp x30801 = x30800 * x26;
          Fp x30802 = Fp(x30801.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x30802;
          Fp x30803 = x30801 - x30802;
          Fp x30804 = x30803 * x26;
          Fp x30805 = Fp(x30804.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x30805;
          Fp x30806 = x30804 - x30805;
          Fp x30807 = x30806 * x26;
          Fp x30808 = Fp(x30807.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x30808;
          Fp x30809 = x30807 - x30808;
          Fp x30810 = x30809 * x26;
          Fp x30811 = Fp(x30810.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x30811;
          Fp x30812 = x30810 - x30811;
          Fp x30813 = x30812 * x26;
          Fp x30814 = Fp(x30813.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x30814;
          Fp x30815 = x30813 - x30814;
          Fp x30816 = x30815 * x26;
          Fp x30817 = Fp(x30816.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x30817;
          Fp x30818 = x30816 - x30817;
          Fp x30819 = x30818 * x26;
          Fp x30820 = Fp(x30819.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x30820;
          Fp x30821 = x30819 - x30820;
          Fp x30822 = x30821 * x26;
          Fp x30823 = Fp(x30822.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x30823;
          Fp x30824 = x30822 - x30823;
          Fp x30825 = x30824 * x26;
          Fp x30826 = Fp(x30825.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x30826;
          Fp x30827 = x30825 - x30826;
          Fp x30828 = x30827 * x26;
          Fp x30829 = Fp(x30828.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x30829;
        }
        Fp x30830 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x30831 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x30832 = x30831 * x1;
        Fp x30833 = x30830 + x30832;
        Fp x30834 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x30835 = x30834 * x3;
        Fp x30836 = x30833 + x30835;
        Fp x30837 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x30838 = x30837 * x6;
        Fp x30839 = x30836 + x30838;
        Fp x30840 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x30841 = x30840 * x11;
        Fp x30842 = x30839 + x30841;
        Fp x30843 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x30844 = x30843 * x27;
        Fp x30845 = x30842 + x30844;
        Fp x30846 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x30847 = x30846 * x12;
        Fp x30848 = x30845 + x30847;
        Fp x30849 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x30850 = x30849 * x28;
        Fp x30851 = x30848 + x30850;
        Fp x30852 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x30853 = x30852 * x13;
        Fp x30854 = x30851 + x30853;
        Fp x30855 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x30856 = x30855 * x29;
        Fp x30857 = x30854 + x30856;
        Fp x30858 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x30859 = x30858 * x14;
        Fp x30860 = x30857 + x30859;
        Fp x30861 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x30862 = x30861 * x30;
        Fp x30863 = x30860 + x30862;
        Fp x30864 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x30865 = x30864 * x15;
        Fp x30866 = x30863 + x30865;
        Fp x30867 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x30868 = x30867 * x31;
        Fp x30869 = x30866 + x30868;
        Fp x30870 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x30871 = x30870 * x16;
        Fp x30872 = x30869 + x30871;
        Fp x30873 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x30874 = x30873 * x32;
        Fp x30875 = x30872 + x30874;
        Fp x30876 = x30782 - x30875;
        Fp x30877 = x30876 * x33;
        if (x30877 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:72");
        {
          Fp x30878 = Fp(x30783.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x30878;
          Fp x30879 = x30783 - x30878;
          Fp x30880 = x30879 * x26;
          Fp x30881 = Fp(x30880.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x30881;
          Fp x30882 = x30880 - x30881;
          Fp x30883 = x30882 * x26;
          Fp x30884 = Fp(x30883.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x30884;
          Fp x30885 = x30883 - x30884;
          Fp x30886 = x30885 * x26;
          Fp x30887 = Fp(x30886.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x30887;
          Fp x30888 = x30886 - x30887;
          Fp x30889 = x30888 * x26;
          Fp x30890 = Fp(x30889.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x30890;
          Fp x30891 = x30889 - x30890;
          Fp x30892 = x30891 * x26;
          Fp x30893 = Fp(x30892.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x30893;
          Fp x30894 = x30892 - x30893;
          Fp x30895 = x30894 * x26;
          Fp x30896 = Fp(x30895.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x30896;
          Fp x30897 = x30895 - x30896;
          Fp x30898 = x30897 * x26;
          Fp x30899 = Fp(x30898.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x30899;
          Fp x30900 = x30898 - x30899;
          Fp x30901 = x30900 * x26;
          Fp x30902 = Fp(x30901.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x30902;
          Fp x30903 = x30901 - x30902;
          Fp x30904 = x30903 * x26;
          Fp x30905 = Fp(x30904.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x30905;
          Fp x30906 = x30904 - x30905;
          Fp x30907 = x30906 * x26;
          Fp x30908 = Fp(x30907.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x30908;
          Fp x30909 = x30907 - x30908;
          Fp x30910 = x30909 * x26;
          Fp x30911 = Fp(x30910.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x30911;
          Fp x30912 = x30910 - x30911;
          Fp x30913 = x30912 * x26;
          Fp x30914 = Fp(x30913.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x30914;
          Fp x30915 = x30913 - x30914;
          Fp x30916 = x30915 * x26;
          Fp x30917 = Fp(x30916.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x30917;
          Fp x30918 = x30916 - x30917;
          Fp x30919 = x30918 * x26;
          Fp x30920 = Fp(x30919.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x30920;
          Fp x30921 = x30919 - x30920;
          Fp x30922 = x30921 * x26;
          Fp x30923 = Fp(x30922.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x30923;
        }
        Fp x30924 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x30925 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x30926 = x30925 * x1;
        Fp x30927 = x30924 + x30926;
        Fp x30928 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x30929 = x30928 * x3;
        Fp x30930 = x30927 + x30929;
        Fp x30931 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x30932 = x30931 * x6;
        Fp x30933 = x30930 + x30932;
        Fp x30934 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x30935 = x30934 * x11;
        Fp x30936 = x30933 + x30935;
        Fp x30937 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x30938 = x30937 * x27;
        Fp x30939 = x30936 + x30938;
        Fp x30940 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x30941 = x30940 * x12;
        Fp x30942 = x30939 + x30941;
        Fp x30943 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x30944 = x30943 * x28;
        Fp x30945 = x30942 + x30944;
        Fp x30946 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x30947 = x30946 * x13;
        Fp x30948 = x30945 + x30947;
        Fp x30949 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x30950 = x30949 * x29;
        Fp x30951 = x30948 + x30950;
        Fp x30952 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x30953 = x30952 * x14;
        Fp x30954 = x30951 + x30953;
        Fp x30955 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x30956 = x30955 * x30;
        Fp x30957 = x30954 + x30956;
        Fp x30958 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x30959 = x30958 * x15;
        Fp x30960 = x30957 + x30959;
        Fp x30961 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x30962 = x30961 * x31;
        Fp x30963 = x30960 + x30962;
        Fp x30964 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x30965 = x30964 * x16;
        Fp x30966 = x30963 + x30965;
        Fp x30967 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x30968 = x30967 * x32;
        Fp x30969 = x30966 + x30968;
        Fp x30970 = x30783 - x30969;
        Fp x30971 = x30970 * x33;
        if (x30971 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:72");
        {
          Fp x30972 = (x30639 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x30972;
          Fp x30973 = x30639 - x71;
          Fp x30974 = (x30973 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x30974;
          Fp x30975 = x30639 - x1;
          Fp x30976 = (x30975 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x30976;
          Fp x30977 = x30639 - x2;
          Fp x30978 = (x30977 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x30978;
        }
        Fp x30979 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x30980 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x30981 = x30980 * x1;
        Fp x30982 = x30979 + x30981;
        Fp x30983 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x30984 = x30983 * x2;
        Fp x30985 = x30982 + x30984;
        Fp x30986 = x30985 - x30639;
        if (x30986 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x30987 = x30681 + x17;
        Fp x30988 = x30987 - x30875;
        Fp x30989 = x30777 + x35;
        Fp x30990 = x30989 - x30969;
        {
          Fp x30991 = Fp(x30988.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x30991;
          Fp x30992 = x30988 - x30991;
          Fp x30993 = x30992 * x26;
          Fp x30994 = Fp(x30993.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x30994;
          Fp x30995 = x30993 - x30994;
          Fp x30996 = x30995 * x26;
          Fp x30997 = Fp(x30996.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x30997;
          Fp x30998 = x30996 - x30997;
          Fp x30999 = x30998 * x26;
          Fp x31000 = Fp(x30999.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x31000;
          Fp x31001 = x30999 - x31000;
          Fp x31002 = x31001 * x26;
          Fp x31003 = Fp(x31002.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x31003;
          Fp x31004 = x31002 - x31003;
          Fp x31005 = x31004 * x26;
          Fp x31006 = Fp(x31005.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x31006;
          Fp x31007 = x31005 - x31006;
          Fp x31008 = x31007 * x26;
          Fp x31009 = Fp(x31008.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x31009;
          Fp x31010 = x31008 - x31009;
          Fp x31011 = x31010 * x26;
          Fp x31012 = Fp(x31011.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x31012;
          Fp x31013 = x31011 - x31012;
          Fp x31014 = x31013 * x26;
          Fp x31015 = Fp(x31014.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x31015;
          Fp x31016 = x31014 - x31015;
          Fp x31017 = x31016 * x26;
          Fp x31018 = Fp(x31017.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x31018;
          Fp x31019 = x31017 - x31018;
          Fp x31020 = x31019 * x26;
          Fp x31021 = Fp(x31020.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x31021;
          Fp x31022 = x31020 - x31021;
          Fp x31023 = x31022 * x26;
          Fp x31024 = Fp(x31023.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x31024;
          Fp x31025 = x31023 - x31024;
          Fp x31026 = x31025 * x26;
          Fp x31027 = Fp(x31026.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x31027;
          Fp x31028 = x31026 - x31027;
          Fp x31029 = x31028 * x26;
          Fp x31030 = Fp(x31029.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x31030;
          Fp x31031 = x31029 - x31030;
          Fp x31032 = x31031 * x26;
          Fp x31033 = Fp(x31032.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x31033;
          Fp x31034 = x31032 - x31033;
          Fp x31035 = x31034 * x26;
          Fp x31036 = Fp(x31035.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x31036;
        }
        Fp x31037 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x31038 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x31039 = x31038 * x1;
        Fp x31040 = x31037 + x31039;
        Fp x31041 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x31042 = x31041 * x3;
        Fp x31043 = x31040 + x31042;
        Fp x31044 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x31045 = x31044 * x6;
        Fp x31046 = x31043 + x31045;
        Fp x31047 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x31048 = x31047 * x11;
        Fp x31049 = x31046 + x31048;
        Fp x31050 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x31051 = x31050 * x27;
        Fp x31052 = x31049 + x31051;
        Fp x31053 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x31054 = x31053 * x12;
        Fp x31055 = x31052 + x31054;
        Fp x31056 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x31057 = x31056 * x28;
        Fp x31058 = x31055 + x31057;
        Fp x31059 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x31060 = x31059 * x13;
        Fp x31061 = x31058 + x31060;
        Fp x31062 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x31063 = x31062 * x29;
        Fp x31064 = x31061 + x31063;
        Fp x31065 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x31066 = x31065 * x14;
        Fp x31067 = x31064 + x31066;
        Fp x31068 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x31069 = x31068 * x30;
        Fp x31070 = x31067 + x31069;
        Fp x31071 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x31072 = x31071 * x15;
        Fp x31073 = x31070 + x31072;
        Fp x31074 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x31075 = x31074 * x31;
        Fp x31076 = x31073 + x31075;
        Fp x31077 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x31078 = x31077 * x16;
        Fp x31079 = x31076 + x31078;
        Fp x31080 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x31081 = x31080 * x32;
        Fp x31082 = x31079 + x31081;
        Fp x31083 = x30988 - x31082;
        Fp x31084 = x31083 * x33;
        args[2][108 * steps + cycle] = x31084;
        Fp x31085 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x31086 = x30990 + x31085;
        {
          Fp x31087 = Fp(x31086.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x31087;
          Fp x31088 = x31086 - x31087;
          Fp x31089 = x31088 * x26;
          Fp x31090 = Fp(x31089.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x31090;
          Fp x31091 = x31089 - x31090;
          Fp x31092 = x31091 * x26;
          Fp x31093 = Fp(x31092.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x31093;
          Fp x31094 = x31092 - x31093;
          Fp x31095 = x31094 * x26;
          Fp x31096 = Fp(x31095.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x31096;
          Fp x31097 = x31095 - x31096;
          Fp x31098 = x31097 * x26;
          Fp x31099 = Fp(x31098.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x31099;
          Fp x31100 = x31098 - x31099;
          Fp x31101 = x31100 * x26;
          Fp x31102 = Fp(x31101.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x31102;
          Fp x31103 = x31101 - x31102;
          Fp x31104 = x31103 * x26;
          Fp x31105 = Fp(x31104.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x31105;
          Fp x31106 = x31104 - x31105;
          Fp x31107 = x31106 * x26;
          Fp x31108 = Fp(x31107.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x31108;
          Fp x31109 = x31107 - x31108;
          Fp x31110 = x31109 * x26;
          Fp x31111 = Fp(x31110.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x31111;
          Fp x31112 = x31110 - x31111;
          Fp x31113 = x31112 * x26;
          Fp x31114 = Fp(x31113.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x31114;
          Fp x31115 = x31113 - x31114;
          Fp x31116 = x31115 * x26;
          Fp x31117 = Fp(x31116.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x31117;
          Fp x31118 = x31116 - x31117;
          Fp x31119 = x31118 * x26;
          Fp x31120 = Fp(x31119.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x31120;
          Fp x31121 = x31119 - x31120;
          Fp x31122 = x31121 * x26;
          Fp x31123 = Fp(x31122.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x31123;
          Fp x31124 = x31122 - x31123;
          Fp x31125 = x31124 * x26;
          Fp x31126 = Fp(x31125.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x31126;
          Fp x31127 = x31125 - x31126;
          Fp x31128 = x31127 * x26;
          Fp x31129 = Fp(x31128.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x31129;
          Fp x31130 = x31128 - x31129;
          Fp x31131 = x31130 * x26;
          Fp x31132 = Fp(x31131.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x31132;
        }
        Fp x31133 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x31134 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x31135 = x31134 * x1;
        Fp x31136 = x31133 + x31135;
        Fp x31137 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x31138 = x31137 * x3;
        Fp x31139 = x31136 + x31138;
        Fp x31140 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x31141 = x31140 * x6;
        Fp x31142 = x31139 + x31141;
        Fp x31143 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x31144 = x31143 * x11;
        Fp x31145 = x31142 + x31144;
        Fp x31146 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x31147 = x31146 * x27;
        Fp x31148 = x31145 + x31147;
        Fp x31149 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x31150 = x31149 * x12;
        Fp x31151 = x31148 + x31150;
        Fp x31152 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x31153 = x31152 * x28;
        Fp x31154 = x31151 + x31153;
        Fp x31155 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x31156 = x31155 * x13;
        Fp x31157 = x31154 + x31156;
        Fp x31158 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x31159 = x31158 * x29;
        Fp x31160 = x31157 + x31159;
        Fp x31161 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x31162 = x31161 * x14;
        Fp x31163 = x31160 + x31162;
        Fp x31164 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x31165 = x31164 * x30;
        Fp x31166 = x31163 + x31165;
        Fp x31167 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x31168 = x31167 * x15;
        Fp x31169 = x31166 + x31168;
        Fp x31170 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x31171 = x31170 * x31;
        Fp x31172 = x31169 + x31171;
        Fp x31173 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x31174 = x31173 * x16;
        Fp x31175 = x31172 + x31174;
        Fp x31176 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x31177 = x31176 * x32;
        Fp x31178 = x31175 + x31177;
        Fp x31179 = x31086 - x31178;
        Fp x31180 = x31179 * x33;
        args[2][109 * steps + cycle] = x31180;
        {
          {
            Fp x31181 = (x31082 == 0) ? Fp(1) : Fp(0);
            Fp x31182 = x71 - x31181;
            args[2][114 * steps + cycle] = x31182;
            Fp x31183 = inv(x31082);
            args[2][115 * steps + cycle] = x31183;
          }
          Fp x31184 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x31185 = x31082 * x31184;
          Fp x31186 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x31187 = x31185 - x31186;
          if (x31187 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x31188 = x71 - x31186;
          Fp x31189 = x31188 * x31082;
          if (x31189 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x31190 = (x31178 == 0) ? Fp(1) : Fp(0);
            Fp x31191 = x71 - x31190;
            args[2][116 * steps + cycle] = x31191;
            Fp x31192 = inv(x31178);
            args[2][117 * steps + cycle] = x31192;
          }
          Fp x31193 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x31194 = x31178 * x31193;
          Fp x31195 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x31196 = x31194 - x31195;
          if (x31196 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x31197 = x71 - x31195;
          Fp x31198 = x31197 * x31178;
          if (x31198 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x31199 = x31188 * x31197;
          Fp x31200 = x71 - x31199;
          args[2][111 * steps + cycle] = x31200;
          Fp x31201 = x71 - x30967;
          Fp x31202 = x30775 * x31201;
          Fp x31203 = x71 - x31176;
          Fp x31204 = x31202 * x31203;
          Fp x31205 = x71 - x30775;
          Fp x31206 = x31205 * x30967;
          Fp x31207 = x31206 * x31176;
          Fp x31208 = x31204 + x31207;
          args[2][112 * steps + cycle] = x31208;
          Fp x31209 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x31210 = x31209 + x31176;
          Fp x31211 = x31209 * x1;
          Fp x31212 = x31211 * x31176;
          Fp x31213 = x31210 - x31212;
          args[2][113 * steps + cycle] = x31213;
        }
        Fp x31214 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x31215 = x71 - x31214;
        args[2][100 * steps + cycle] = x31215;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x70;
        Fp x31216 = args[2][100 * steps + ((cycle - 0) & mask)];
        Fp x31217 = x71 - x31216;
        Fp x31218 = x31217 * x25760;
        Fp x31219 = x31217 * x25761;
        Fp x31220 = x25783 + x31218;
        Fp x31221 = x25805 + x31219;
        Fp x31222 = x71 - x31217;
        Fp x31223 = x31222 * x3;
        Fp x31224 = x31220 + x31223;
        args[2][104 * steps + cycle] = x31224;
        args[2][105 * steps + cycle] = x31221;
        Fp x31225 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x31226 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x31227 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x31228 = args[2][101 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x25805;
        host_args[2] = x25783;
        host_args[3] = x30777;
        host_args[4] = x30681;
        host_args[5] = x30969;
        host_args[6] = x30875;
        host_args[7] = x31178;
        host_args[8] = x31082;
        host_args[9] = x31214;
        host_args[10] = x31225;
        host_args[11] = x31226;
        host_args[12] = x31227;
        host_args[13] = x31228;
        host_args[14] = x31216;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x31229 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x31230 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x31231 = x31230 * x1;
      Fp x31232 = x31229 + x31231;
      Fp x31233 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x31234 = x31233 * x3;
      Fp x31235 = x31232 + x31234;
      Fp x31236 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x31237 = x31236 * x6;
      Fp x31238 = x31235 + x31237;
      Fp x31239 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x31240 = x31239 * x11;
      Fp x31241 = x31238 + x31240;
      Fp x31242 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x31243 = x31242 * x27;
      Fp x31244 = x31241 + x31243;
      Fp x31245 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x31246 = x31245 * x12;
      Fp x31247 = x31244 + x31246;
      Fp x31248 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x31249 = x31248 * x28;
      Fp x31250 = x31247 + x31249;
      Fp x31251 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x31252 = x31251 * x13;
      Fp x31253 = x31250 + x31252;
      Fp x31254 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x31255 = x31254 * x29;
      Fp x31256 = x31253 + x31255;
      Fp x31257 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x31258 = x31257 * x14;
      Fp x31259 = x31256 + x31258;
      Fp x31260 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x31261 = x31260 * x30;
      Fp x31262 = x31259 + x31261;
      Fp x31263 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x31264 = x31263 * x15;
      Fp x31265 = x31262 + x31264;
      Fp x31266 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x31267 = x31266 * x31;
      Fp x31268 = x31265 + x31267;
      Fp x31269 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x31270 = x31269 * x16;
      Fp x31271 = x31268 + x31270;
      Fp x31272 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x31273 = x31272 * x32;
      Fp x31274 = x31271 + x31273;
      {
        Fp x31275 = (x31274 == 0) ? Fp(1) : Fp(0);
        Fp x31276 = x71 - x31275;
        args[2][114 * steps + cycle] = x31276;
        Fp x31277 = inv(x31274);
        args[2][115 * steps + cycle] = x31277;
      }
      Fp x31278 = args[2][115 * steps + ((cycle - 0) & mask)];
      Fp x31279 = x31274 * x31278;
      Fp x31280 = args[2][114 * steps + ((cycle - 0) & mask)];
      Fp x31281 = x31279 - x31280;
      if (x31281 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
      Fp x31282 = x71 - x31280;
      Fp x31283 = x31282 * x31274;
      if (x31283 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
      Fp x31284 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x31285 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x31286 = x31285 * x1;
      Fp x31287 = x31284 + x31286;
      Fp x31288 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x31289 = x31288 * x3;
      Fp x31290 = x31287 + x31289;
      Fp x31291 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x31292 = x31291 * x6;
      Fp x31293 = x31290 + x31292;
      Fp x31294 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x31295 = x31294 * x11;
      Fp x31296 = x31293 + x31295;
      Fp x31297 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x31298 = x31297 * x27;
      Fp x31299 = x31296 + x31298;
      Fp x31300 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x31301 = x31300 * x12;
      Fp x31302 = x31299 + x31301;
      Fp x31303 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x31304 = x31303 * x28;
      Fp x31305 = x31302 + x31304;
      Fp x31306 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x31307 = x31306 * x13;
      Fp x31308 = x31305 + x31307;
      Fp x31309 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x31310 = x31309 * x29;
      Fp x31311 = x31308 + x31310;
      Fp x31312 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x31313 = x31312 * x14;
      Fp x31314 = x31311 + x31313;
      Fp x31315 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x31316 = x31315 * x30;
      Fp x31317 = x31314 + x31316;
      Fp x31318 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x31319 = x31318 * x15;
      Fp x31320 = x31317 + x31319;
      Fp x31321 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x31322 = x31321 * x31;
      Fp x31323 = x31320 + x31322;
      Fp x31324 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x31325 = x31324 * x16;
      Fp x31326 = x31323 + x31325;
      Fp x31327 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x31328 = x31327 * x32;
      Fp x31329 = x31326 + x31328;
      {
        Fp x31330 = (x31329 == 0) ? Fp(1) : Fp(0);
        Fp x31331 = x71 - x31330;
        args[2][116 * steps + cycle] = x31331;
        Fp x31332 = inv(x31329);
        args[2][117 * steps + cycle] = x31332;
      }
      Fp x31333 = args[2][117 * steps + ((cycle - 0) & mask)];
      Fp x31334 = x31329 * x31333;
      Fp x31335 = args[2][116 * steps + ((cycle - 0) & mask)];
      Fp x31336 = x31334 - x31335;
      if (x31336 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
      Fp x31337 = x71 - x31335;
      Fp x31338 = x31337 * x31329;
      if (x31338 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
      Fp x31339 = x31282 * x31337;
      Fp x31340 = x71 - x31339;
      args[2][111 * steps + cycle] = x31340;
      Fp x31341 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x31342 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x31343 = x71 - x31342;
      Fp x31344 = x31341 * x31343;
      Fp x31345 = x71 - x31327;
      Fp x31346 = x31344 * x31345;
      Fp x31347 = x71 - x31341;
      Fp x31348 = x31347 * x31342;
      Fp x31349 = x31348 * x31327;
      Fp x31350 = x31346 + x31349;
      args[2][112 * steps + cycle] = x31350;
      Fp x31351 = args[2][112 * steps + ((cycle - 0) & mask)];
      Fp x31352 = x31351 + x31327;
      Fp x31353 = x31351 * x1;
      Fp x31354 = x31353 * x31327;
      Fp x31355 = x31352 - x31354;
      args[2][113 * steps + cycle] = x31355;
      Fp x31356 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x31357 = x31356 - x71;
      Fp x31358 = x31356 * x31357;
      if (x31358 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31359 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x31360 = x31359 - x71;
      Fp x31361 = x31359 * x31360;
      if (x31361 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31362 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x31363 = x31362 - x71;
      Fp x31364 = x31362 * x31363;
      if (x31364 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31365 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x31366 = x31365 - x71;
      Fp x31367 = x31365 * x31366;
      if (x31367 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31368 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x31369 = x31368 - x71;
      Fp x31370 = x31368 * x31369;
      if (x31370 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31371 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x31372 = x31371 - x71;
      Fp x31373 = x31371 * x31372;
      if (x31373 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31374 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x31375 = x31374 - x71;
      Fp x31376 = x31374 * x31375;
      if (x31376 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31377 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x31378 = x31377 - x71;
      Fp x31379 = x31377 * x31378;
      if (x31379 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31380 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x31381 = x31380 - x71;
      Fp x31382 = x31380 * x31381;
      if (x31382 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31383 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x31384 = x31383 - x71;
      Fp x31385 = x31383 * x31384;
      if (x31385 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31386 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x31387 = x31386 - x71;
      Fp x31388 = x31386 * x31387;
      if (x31388 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31389 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x31390 = x31389 - x71;
      Fp x31391 = x31389 * x31390;
      if (x31391 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31392 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x31393 = x31392 - x71;
      Fp x31394 = x31392 * x31393;
      if (x31394 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31395 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x31396 = x31395 - x71;
      Fp x31397 = x31395 * x31396;
      if (x31397 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31398 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x31399 = x31398 - x71;
      Fp x31400 = x31398 * x31399;
      if (x31400 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31401 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x31402 = x31401 - x71;
      Fp x31403 = x31401 * x31402;
      if (x31403 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31404 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x31405 = x31404 - x71;
      Fp x31406 = x31404 * x31405;
      if (x31406 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31407 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x31408 = x31407 - x71;
      Fp x31409 = x31407 * x31408;
      if (x31409 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31410 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x31411 = x31410 - x71;
      Fp x31412 = x31410 * x31411;
      if (x31412 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31413 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x31414 = x31413 - x71;
      Fp x31415 = x31413 * x31414;
      if (x31415 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31416 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x31417 = x31416 - x71;
      Fp x31418 = x31416 * x31417;
      if (x31418 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31419 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x31420 = x31419 - x71;
      Fp x31421 = x31419 * x31420;
      if (x31421 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31422 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x31423 = x31422 - x71;
      Fp x31424 = x31422 * x31423;
      if (x31424 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31425 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x31426 = x31425 - x71;
      Fp x31427 = x31425 * x31426;
      if (x31427 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31428 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x31429 = x31428 - x71;
      Fp x31430 = x31428 * x31429;
      if (x31430 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31431 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x31432 = x31431 - x71;
      Fp x31433 = x31431 * x31432;
      if (x31433 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31434 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x31435 = x31434 - x71;
      Fp x31436 = x31434 * x31435;
      if (x31436 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31437 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x31438 = x31437 - x71;
      Fp x31439 = x31437 * x31438;
      if (x31439 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31440 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x31441 = x31440 - x71;
      Fp x31442 = x31440 * x31441;
      if (x31442 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31443 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x31444 = x31443 - x71;
      Fp x31445 = x31443 * x31444;
      if (x31445 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31446 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x31447 = x31446 - x71;
      Fp x31448 = x31446 * x31447;
      if (x31448 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31449 = x31341 - x71;
      Fp x31450 = x31341 * x31449;
      if (x31450 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x31451 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x31452 = x31451 - x71;
      Fp x31453 = x31451 * x31452;
      if (x31453 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31454 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x31455 = x31454 - x71;
      Fp x31456 = x31454 * x31455;
      if (x31456 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31457 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x31458 = x31457 - x71;
      Fp x31459 = x31457 * x31458;
      if (x31459 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31460 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x31461 = x31460 - x71;
      Fp x31462 = x31460 * x31461;
      if (x31462 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31463 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x31464 = x31463 - x71;
      Fp x31465 = x31463 * x31464;
      if (x31465 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31466 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x31467 = x31466 - x71;
      Fp x31468 = x31466 * x31467;
      if (x31468 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31469 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x31470 = x31469 - x71;
      Fp x31471 = x31469 * x31470;
      if (x31471 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31472 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x31473 = x31472 - x71;
      Fp x31474 = x31472 * x31473;
      if (x31474 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31475 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x31476 = x31475 - x71;
      Fp x31477 = x31475 * x31476;
      if (x31477 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31478 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x31479 = x31478 - x71;
      Fp x31480 = x31478 * x31479;
      if (x31480 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31481 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x31482 = x31481 - x71;
      Fp x31483 = x31481 * x31482;
      if (x31483 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31484 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x31485 = x31484 - x71;
      Fp x31486 = x31484 * x31485;
      if (x31486 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31487 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x31488 = x31487 - x71;
      Fp x31489 = x31487 * x31488;
      if (x31489 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31490 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x31491 = x31490 - x71;
      Fp x31492 = x31490 * x31491;
      if (x31492 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31493 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x31494 = x31493 - x71;
      Fp x31495 = x31493 * x31494;
      if (x31495 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31496 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x31497 = x31496 - x71;
      Fp x31498 = x31496 * x31497;
      if (x31498 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31499 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x31500 = x31499 - x71;
      Fp x31501 = x31499 * x31500;
      if (x31501 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31502 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x31503 = x31502 - x71;
      Fp x31504 = x31502 * x31503;
      if (x31504 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31505 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x31506 = x31505 - x71;
      Fp x31507 = x31505 * x31506;
      if (x31507 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31508 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x31509 = x31508 - x71;
      Fp x31510 = x31508 * x31509;
      if (x31510 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31511 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x31512 = x31511 - x71;
      Fp x31513 = x31511 * x31512;
      if (x31513 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31514 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x31515 = x31514 - x71;
      Fp x31516 = x31514 * x31515;
      if (x31516 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31517 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x31518 = x31517 - x71;
      Fp x31519 = x31517 * x31518;
      if (x31519 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31520 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x31521 = x31520 - x71;
      Fp x31522 = x31520 * x31521;
      if (x31522 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31523 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x31524 = x31523 - x71;
      Fp x31525 = x31523 * x31524;
      if (x31525 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31526 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x31527 = x31526 - x71;
      Fp x31528 = x31526 * x31527;
      if (x31528 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31529 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x31530 = x31529 - x71;
      Fp x31531 = x31529 * x31530;
      if (x31531 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31532 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x31533 = x31532 - x71;
      Fp x31534 = x31532 * x31533;
      if (x31534 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31535 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x31536 = x31535 - x71;
      Fp x31537 = x31535 * x31536;
      if (x31537 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31538 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x31539 = x31538 - x71;
      Fp x31540 = x31538 * x31539;
      if (x31540 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31541 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x31542 = x31541 - x71;
      Fp x31543 = x31541 * x31542;
      if (x31543 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31544 = x31342 - x71;
      Fp x31545 = x31342 * x31544;
      if (x31545 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x31546 = x31229 - x71;
      Fp x31547 = x31229 * x31546;
      if (x31547 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31548 = x31230 - x71;
      Fp x31549 = x31230 * x31548;
      if (x31549 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31550 = x31233 - x71;
      Fp x31551 = x31233 * x31550;
      if (x31551 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31552 = x31236 - x71;
      Fp x31553 = x31236 * x31552;
      if (x31553 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31554 = x31239 - x71;
      Fp x31555 = x31239 * x31554;
      if (x31555 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31556 = x31242 - x71;
      Fp x31557 = x31242 * x31556;
      if (x31557 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31558 = x31245 - x71;
      Fp x31559 = x31245 * x31558;
      if (x31559 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31560 = x31248 - x71;
      Fp x31561 = x31248 * x31560;
      if (x31561 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31562 = x31251 - x71;
      Fp x31563 = x31251 * x31562;
      if (x31563 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31564 = x31254 - x71;
      Fp x31565 = x31254 * x31564;
      if (x31565 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31566 = x31257 - x71;
      Fp x31567 = x31257 * x31566;
      if (x31567 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31568 = x31260 - x71;
      Fp x31569 = x31260 * x31568;
      if (x31569 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31570 = x31263 - x71;
      Fp x31571 = x31263 * x31570;
      if (x31571 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31572 = x31266 - x71;
      Fp x31573 = x31266 * x31572;
      if (x31573 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31574 = x31269 - x71;
      Fp x31575 = x31269 * x31574;
      if (x31575 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31576 = x31272 - x71;
      Fp x31577 = x31272 * x31576;
      if (x31577 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31578 = x31284 - x71;
      Fp x31579 = x31284 * x31578;
      if (x31579 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31580 = x31285 - x71;
      Fp x31581 = x31285 * x31580;
      if (x31581 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31582 = x31288 - x71;
      Fp x31583 = x31288 * x31582;
      if (x31583 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31584 = x31291 - x71;
      Fp x31585 = x31291 * x31584;
      if (x31585 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31586 = x31294 - x71;
      Fp x31587 = x31294 * x31586;
      if (x31587 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31588 = x31297 - x71;
      Fp x31589 = x31297 * x31588;
      if (x31589 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31590 = x31300 - x71;
      Fp x31591 = x31300 * x31590;
      if (x31591 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31592 = x31303 - x71;
      Fp x31593 = x31303 * x31592;
      if (x31593 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31594 = x31306 - x71;
      Fp x31595 = x31306 * x31594;
      if (x31595 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31596 = x31309 - x71;
      Fp x31597 = x31309 * x31596;
      if (x31597 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31598 = x31312 - x71;
      Fp x31599 = x31312 * x31598;
      if (x31599 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31600 = x31315 - x71;
      Fp x31601 = x31315 * x31600;
      if (x31601 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31602 = x31318 - x71;
      Fp x31603 = x31318 * x31602;
      if (x31603 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31604 = x31321 - x71;
      Fp x31605 = x31321 * x31604;
      if (x31605 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31606 = x31324 - x71;
      Fp x31607 = x31324 * x31606;
      if (x31607 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31608 = x31327 - x71;
      Fp x31609 = x31327 * x31608;
      if (x31609 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x31610 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x31611 = x31610 - x71;
      Fp x31612 = x31610 * x31611;
      if (x31612 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x31613 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x31614 = x31613 - x71;
      Fp x31615 = x31613 * x31614;
      if (x31615 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x31616 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x31617 = x31616 - x71;
      Fp x31618 = x31616 * x31617;
      if (x31618 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x31619 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x31620 = x31619 - x71;
      Fp x31621 = x31619 * x31620;
      if (x31621 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x31622 = x31610 + x31613;
      Fp x31623 = x31622 + x31616;
      Fp x31624 = x31623 + x31619;
      Fp x31625 = x31624 - x71;
      if (x31625 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x31626 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x31627 = x31626 - x71;
      Fp x31628 = x31626 * x31627;
      if (x31628 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:28");
      Fp x31629 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x31630 = x31629 - x71;
      Fp x31631 = x31629 * x31630;
      if (x31631 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:29");
      Fp x31632 = args[2][108 * steps + ((cycle - 0) & mask)];
      Fp x31633 = x31632 - x71;
      Fp x31634 = x31632 * x31633;
      if (x31634 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:30");
      Fp x31635 = args[2][109 * steps + ((cycle - 0) & mask)];
      Fp x31636 = x31635 - x71;
      Fp x31637 = x31635 * x31636;
      if (x31637 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:31");
      Fp x31638 = x31280 - x71;
      Fp x31639 = x31280 * x31638;
      if (x31639 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:36");
      Fp x31640 = x31335 - x71;
      Fp x31641 = x31335 * x31640;
      if (x31641 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:37");
    }
    Fp x31642 = args[2][136 * steps + ((cycle - 0) & mask)];
    if (x31642 != 0) {
      Fp x31643 = args[2][116 * steps + ((cycle - 1) & mask)];
      Fp x31644 = args[2][117 * steps + ((cycle - 1) & mask)];
      Fp x31645 = args[2][114 * steps + ((cycle - 1) & mask)];
      Fp x31646 = args[2][115 * steps + ((cycle - 1) & mask)];
      Fp x31647 = args[2][0 * steps + ((cycle - 2) & mask)];
      Fp x31648 = args[2][1 * steps + ((cycle - 2) & mask)];
      Fp x31649 = x31648 * x3;
      Fp x31650 = x31647 + x31649;
      Fp x31651 = args[2][2 * steps + ((cycle - 2) & mask)];
      Fp x31652 = x31651 * x11;
      Fp x31653 = x31650 + x31652;
      Fp x31654 = args[2][3 * steps + ((cycle - 2) & mask)];
      Fp x31655 = x31654 * x12;
      Fp x31656 = x31653 + x31655;
      Fp x31657 = args[2][4 * steps + ((cycle - 2) & mask)];
      Fp x31658 = x31657 * x13;
      Fp x31659 = x31656 + x31658;
      Fp x31660 = args[2][5 * steps + ((cycle - 2) & mask)];
      Fp x31661 = x31660 * x14;
      Fp x31662 = x31659 + x31661;
      Fp x31663 = args[2][6 * steps + ((cycle - 2) & mask)];
      Fp x31664 = x31663 * x15;
      Fp x31665 = x31662 + x31664;
      Fp x31666 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x31667 = x31666 * x16;
      Fp x31668 = x31665 + x31667;
      Fp x31669 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x31670 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x31671 = x31670 * x3;
      Fp x31672 = x31669 + x31671;
      Fp x31673 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x31674 = x31673 * x11;
      Fp x31675 = x31672 + x31674;
      Fp x31676 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x31677 = x31676 * x12;
      Fp x31678 = x31675 + x31677;
      Fp x31679 = args[2][12 * steps + ((cycle - 2) & mask)];
      Fp x31680 = x31679 * x13;
      Fp x31681 = x31678 + x31680;
      Fp x31682 = args[2][13 * steps + ((cycle - 2) & mask)];
      Fp x31683 = x31682 * x14;
      Fp x31684 = x31681 + x31683;
      Fp x31685 = args[2][14 * steps + ((cycle - 2) & mask)];
      Fp x31686 = x31685 * x15;
      Fp x31687 = x31684 + x31686;
      Fp x31688 = args[2][15 * steps + ((cycle - 2) & mask)];
      Fp x31689 = x31688 * x16;
      Fp x31690 = x31687 + x31689;
      Fp x31691 = args[2][72 * steps + ((cycle - 1) & mask)];
      if (x31691 != 0) {
        {
          Fp x31692 = Fp(x31643.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x31692;
          Fp x31693 = x31643 - x31692;
          Fp x31694 = x31693 * x26;
          Fp x31695 = Fp(x31694.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x31695;
          Fp x31696 = x31694 - x31695;
          Fp x31697 = x31696 * x26;
          Fp x31698 = Fp(x31697.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x31698;
          Fp x31699 = x31697 - x31698;
          Fp x31700 = x31699 * x26;
          Fp x31701 = Fp(x31700.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x31701;
          Fp x31702 = x31700 - x31701;
          Fp x31703 = x31702 * x26;
          Fp x31704 = Fp(x31703.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x31704;
          Fp x31705 = x31703 - x31704;
          Fp x31706 = x31705 * x26;
          Fp x31707 = Fp(x31706.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x31707;
          Fp x31708 = x31706 - x31707;
          Fp x31709 = x31708 * x26;
          Fp x31710 = Fp(x31709.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x31710;
          Fp x31711 = x31709 - x31710;
          Fp x31712 = x31711 * x26;
          Fp x31713 = Fp(x31712.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x31713;
          Fp x31714 = x31712 - x31713;
          Fp x31715 = x31714 * x26;
          Fp x31716 = Fp(x31715.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x31716;
          Fp x31717 = x31715 - x31716;
          Fp x31718 = x31717 * x26;
          Fp x31719 = Fp(x31718.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x31719;
          Fp x31720 = x31718 - x31719;
          Fp x31721 = x31720 * x26;
          Fp x31722 = Fp(x31721.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x31722;
          Fp x31723 = x31721 - x31722;
          Fp x31724 = x31723 * x26;
          Fp x31725 = Fp(x31724.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x31725;
          Fp x31726 = x31724 - x31725;
          Fp x31727 = x31726 * x26;
          Fp x31728 = Fp(x31727.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x31728;
          Fp x31729 = x31727 - x31728;
          Fp x31730 = x31729 * x26;
          Fp x31731 = Fp(x31730.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x31731;
          Fp x31732 = x31730 - x31731;
          Fp x31733 = x31732 * x26;
          Fp x31734 = Fp(x31733.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x31734;
          Fp x31735 = x31733 - x31734;
          Fp x31736 = x31735 * x26;
          Fp x31737 = Fp(x31736.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x31737;
        }
        Fp x31738 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x31739 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x31740 = x31739 * x1;
        Fp x31741 = x31738 + x31740;
        Fp x31742 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x31743 = x31742 * x3;
        Fp x31744 = x31741 + x31743;
        Fp x31745 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x31746 = x31745 * x6;
        Fp x31747 = x31744 + x31746;
        Fp x31748 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x31749 = x31748 * x11;
        Fp x31750 = x31747 + x31749;
        Fp x31751 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x31752 = x31751 * x27;
        Fp x31753 = x31750 + x31752;
        Fp x31754 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x31755 = x31754 * x12;
        Fp x31756 = x31753 + x31755;
        Fp x31757 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x31758 = x31757 * x28;
        Fp x31759 = x31756 + x31758;
        Fp x31760 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x31761 = x31760 * x13;
        Fp x31762 = x31759 + x31761;
        Fp x31763 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x31764 = x31763 * x29;
        Fp x31765 = x31762 + x31764;
        Fp x31766 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x31767 = x31766 * x14;
        Fp x31768 = x31765 + x31767;
        Fp x31769 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x31770 = x31769 * x30;
        Fp x31771 = x31768 + x31770;
        Fp x31772 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x31773 = x31772 * x15;
        Fp x31774 = x31771 + x31773;
        Fp x31775 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x31776 = x31775 * x31;
        Fp x31777 = x31774 + x31776;
        Fp x31778 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x31779 = x31778 * x16;
        Fp x31780 = x31777 + x31779;
        Fp x31781 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x31782 = x31781 * x32;
        Fp x31783 = x31780 + x31782;
        Fp x31784 = x31643 - x31783;
        Fp x31785 = x31784 * x33;
        args[2][106 * steps + cycle] = x31785;
        Fp x31786 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x31787 = x31644 + x31786;
        {
          Fp x31788 = Fp(x31787.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x31788;
          Fp x31789 = x31787 - x31788;
          Fp x31790 = x31789 * x26;
          Fp x31791 = Fp(x31790.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x31791;
          Fp x31792 = x31790 - x31791;
          Fp x31793 = x31792 * x26;
          Fp x31794 = Fp(x31793.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x31794;
          Fp x31795 = x31793 - x31794;
          Fp x31796 = x31795 * x26;
          Fp x31797 = Fp(x31796.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x31797;
          Fp x31798 = x31796 - x31797;
          Fp x31799 = x31798 * x26;
          Fp x31800 = Fp(x31799.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x31800;
          Fp x31801 = x31799 - x31800;
          Fp x31802 = x31801 * x26;
          Fp x31803 = Fp(x31802.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x31803;
          Fp x31804 = x31802 - x31803;
          Fp x31805 = x31804 * x26;
          Fp x31806 = Fp(x31805.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x31806;
          Fp x31807 = x31805 - x31806;
          Fp x31808 = x31807 * x26;
          Fp x31809 = Fp(x31808.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x31809;
          Fp x31810 = x31808 - x31809;
          Fp x31811 = x31810 * x26;
          Fp x31812 = Fp(x31811.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x31812;
          Fp x31813 = x31811 - x31812;
          Fp x31814 = x31813 * x26;
          Fp x31815 = Fp(x31814.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x31815;
          Fp x31816 = x31814 - x31815;
          Fp x31817 = x31816 * x26;
          Fp x31818 = Fp(x31817.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x31818;
          Fp x31819 = x31817 - x31818;
          Fp x31820 = x31819 * x26;
          Fp x31821 = Fp(x31820.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x31821;
          Fp x31822 = x31820 - x31821;
          Fp x31823 = x31822 * x26;
          Fp x31824 = Fp(x31823.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x31824;
          Fp x31825 = x31823 - x31824;
          Fp x31826 = x31825 * x26;
          Fp x31827 = Fp(x31826.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x31827;
          Fp x31828 = x31826 - x31827;
          Fp x31829 = x31828 * x26;
          Fp x31830 = Fp(x31829.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x31830;
          Fp x31831 = x31829 - x31830;
          Fp x31832 = x31831 * x26;
          Fp x31833 = Fp(x31832.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x31833;
        }
        Fp x31834 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x31835 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x31836 = x31835 * x1;
        Fp x31837 = x31834 + x31836;
        Fp x31838 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x31839 = x31838 * x3;
        Fp x31840 = x31837 + x31839;
        Fp x31841 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x31842 = x31841 * x6;
        Fp x31843 = x31840 + x31842;
        Fp x31844 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x31845 = x31844 * x11;
        Fp x31846 = x31843 + x31845;
        Fp x31847 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x31848 = x31847 * x27;
        Fp x31849 = x31846 + x31848;
        Fp x31850 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x31851 = x31850 * x12;
        Fp x31852 = x31849 + x31851;
        Fp x31853 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x31854 = x31853 * x28;
        Fp x31855 = x31852 + x31854;
        Fp x31856 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x31857 = x31856 * x13;
        Fp x31858 = x31855 + x31857;
        Fp x31859 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x31860 = x31859 * x29;
        Fp x31861 = x31858 + x31860;
        Fp x31862 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x31863 = x31862 * x14;
        Fp x31864 = x31861 + x31863;
        Fp x31865 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x31866 = x31865 * x30;
        Fp x31867 = x31864 + x31866;
        Fp x31868 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x31869 = x31868 * x15;
        Fp x31870 = x31867 + x31869;
        Fp x31871 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x31872 = x31871 * x31;
        Fp x31873 = x31870 + x31872;
        Fp x31874 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x31875 = x31874 * x16;
        Fp x31876 = x31873 + x31875;
        Fp x31877 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x31878 = x31877 * x32;
        Fp x31879 = x31876 + x31878;
        Fp x31880 = x31787 - x31879;
        Fp x31881 = x31880 * x33;
        args[2][107 * steps + cycle] = x31881;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x31882 = host_outs[0];
          Fp x31883 = host_outs[1];
          args[2][129 * steps + cycle] = x31882;
          args[2][130 * steps + cycle] = x31883;
        }
        Fp x31884 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x31885 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x31886 = Fp(x31884.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x31886;
          Fp x31887 = x31884 - x31886;
          Fp x31888 = x31887 * x26;
          Fp x31889 = Fp(x31888.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x31889;
          Fp x31890 = x31888 - x31889;
          Fp x31891 = x31890 * x26;
          Fp x31892 = Fp(x31891.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x31892;
          Fp x31893 = x31891 - x31892;
          Fp x31894 = x31893 * x26;
          Fp x31895 = Fp(x31894.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x31895;
          Fp x31896 = x31894 - x31895;
          Fp x31897 = x31896 * x26;
          Fp x31898 = Fp(x31897.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x31898;
          Fp x31899 = x31897 - x31898;
          Fp x31900 = x31899 * x26;
          Fp x31901 = Fp(x31900.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x31901;
          Fp x31902 = x31900 - x31901;
          Fp x31903 = x31902 * x26;
          Fp x31904 = Fp(x31903.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x31904;
          Fp x31905 = x31903 - x31904;
          Fp x31906 = x31905 * x26;
          Fp x31907 = Fp(x31906.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x31907;
          Fp x31908 = x31906 - x31907;
          Fp x31909 = x31908 * x26;
          Fp x31910 = Fp(x31909.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x31910;
          Fp x31911 = x31909 - x31910;
          Fp x31912 = x31911 * x26;
          Fp x31913 = Fp(x31912.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x31913;
          Fp x31914 = x31912 - x31913;
          Fp x31915 = x31914 * x26;
          Fp x31916 = Fp(x31915.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x31916;
          Fp x31917 = x31915 - x31916;
          Fp x31918 = x31917 * x26;
          Fp x31919 = Fp(x31918.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x31919;
          Fp x31920 = x31918 - x31919;
          Fp x31921 = x31920 * x26;
          Fp x31922 = Fp(x31921.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x31922;
          Fp x31923 = x31921 - x31922;
          Fp x31924 = x31923 * x26;
          Fp x31925 = Fp(x31924.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x31925;
          Fp x31926 = x31924 - x31925;
          Fp x31927 = x31926 * x26;
          Fp x31928 = Fp(x31927.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x31928;
          Fp x31929 = x31927 - x31928;
          Fp x31930 = x31929 * x26;
          Fp x31931 = Fp(x31930.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x31931;
        }
        Fp x31932 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x31933 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x31934 = x31933 * x1;
        Fp x31935 = x31932 + x31934;
        Fp x31936 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x31937 = x31936 * x3;
        Fp x31938 = x31935 + x31937;
        Fp x31939 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x31940 = x31939 * x6;
        Fp x31941 = x31938 + x31940;
        Fp x31942 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x31943 = x31942 * x11;
        Fp x31944 = x31941 + x31943;
        Fp x31945 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x31946 = x31945 * x27;
        Fp x31947 = x31944 + x31946;
        Fp x31948 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x31949 = x31948 * x12;
        Fp x31950 = x31947 + x31949;
        Fp x31951 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x31952 = x31951 * x28;
        Fp x31953 = x31950 + x31952;
        Fp x31954 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x31955 = x31954 * x13;
        Fp x31956 = x31953 + x31955;
        Fp x31957 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x31958 = x31957 * x29;
        Fp x31959 = x31956 + x31958;
        Fp x31960 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x31961 = x31960 * x14;
        Fp x31962 = x31959 + x31961;
        Fp x31963 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x31964 = x31963 * x30;
        Fp x31965 = x31962 + x31964;
        Fp x31966 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x31967 = x31966 * x15;
        Fp x31968 = x31965 + x31967;
        Fp x31969 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x31970 = x31969 * x31;
        Fp x31971 = x31968 + x31970;
        Fp x31972 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x31973 = x31972 * x16;
        Fp x31974 = x31971 + x31973;
        Fp x31975 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x31976 = x31975 * x32;
        Fp x31977 = x31974 + x31976;
        Fp x31978 = x31884 - x31977;
        Fp x31979 = x31978 * x33;
        if (x31979 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:73");
        {
          Fp x31980 = Fp(x31885.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x31980;
          Fp x31981 = x31885 - x31980;
          Fp x31982 = x31981 * x26;
          Fp x31983 = Fp(x31982.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x31983;
          Fp x31984 = x31982 - x31983;
          Fp x31985 = x31984 * x26;
          Fp x31986 = Fp(x31985.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x31986;
          Fp x31987 = x31985 - x31986;
          Fp x31988 = x31987 * x26;
          Fp x31989 = Fp(x31988.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x31989;
          Fp x31990 = x31988 - x31989;
          Fp x31991 = x31990 * x26;
          Fp x31992 = Fp(x31991.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x31992;
          Fp x31993 = x31991 - x31992;
          Fp x31994 = x31993 * x26;
          Fp x31995 = Fp(x31994.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x31995;
          Fp x31996 = x31994 - x31995;
          Fp x31997 = x31996 * x26;
          Fp x31998 = Fp(x31997.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x31998;
          Fp x31999 = x31997 - x31998;
          Fp x32000 = x31999 * x26;
          Fp x32001 = Fp(x32000.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x32001;
          Fp x32002 = x32000 - x32001;
          Fp x32003 = x32002 * x26;
          Fp x32004 = Fp(x32003.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x32004;
          Fp x32005 = x32003 - x32004;
          Fp x32006 = x32005 * x26;
          Fp x32007 = Fp(x32006.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x32007;
          Fp x32008 = x32006 - x32007;
          Fp x32009 = x32008 * x26;
          Fp x32010 = Fp(x32009.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x32010;
          Fp x32011 = x32009 - x32010;
          Fp x32012 = x32011 * x26;
          Fp x32013 = Fp(x32012.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x32013;
          Fp x32014 = x32012 - x32013;
          Fp x32015 = x32014 * x26;
          Fp x32016 = Fp(x32015.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x32016;
          Fp x32017 = x32015 - x32016;
          Fp x32018 = x32017 * x26;
          Fp x32019 = Fp(x32018.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x32019;
          Fp x32020 = x32018 - x32019;
          Fp x32021 = x32020 * x26;
          Fp x32022 = Fp(x32021.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x32022;
          Fp x32023 = x32021 - x32022;
          Fp x32024 = x32023 * x26;
          Fp x32025 = Fp(x32024.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x32025;
        }
        Fp x32026 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x32027 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x32028 = x32027 * x1;
        Fp x32029 = x32026 + x32028;
        Fp x32030 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x32031 = x32030 * x3;
        Fp x32032 = x32029 + x32031;
        Fp x32033 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x32034 = x32033 * x6;
        Fp x32035 = x32032 + x32034;
        Fp x32036 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x32037 = x32036 * x11;
        Fp x32038 = x32035 + x32037;
        Fp x32039 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x32040 = x32039 * x27;
        Fp x32041 = x32038 + x32040;
        Fp x32042 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x32043 = x32042 * x12;
        Fp x32044 = x32041 + x32043;
        Fp x32045 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x32046 = x32045 * x28;
        Fp x32047 = x32044 + x32046;
        Fp x32048 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x32049 = x32048 * x13;
        Fp x32050 = x32047 + x32049;
        Fp x32051 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x32052 = x32051 * x29;
        Fp x32053 = x32050 + x32052;
        Fp x32054 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x32055 = x32054 * x14;
        Fp x32056 = x32053 + x32055;
        Fp x32057 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x32058 = x32057 * x30;
        Fp x32059 = x32056 + x32058;
        Fp x32060 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x32061 = x32060 * x15;
        Fp x32062 = x32059 + x32061;
        Fp x32063 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x32064 = x32063 * x31;
        Fp x32065 = x32062 + x32064;
        Fp x32066 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x32067 = x32066 * x16;
        Fp x32068 = x32065 + x32067;
        Fp x32069 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x32070 = x32069 * x32;
        Fp x32071 = x32068 + x32070;
        Fp x32072 = x31885 - x32071;
        Fp x32073 = x32072 * x33;
        if (x32073 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:73");
        {
          Fp x32074 = (x31741 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x32074;
          Fp x32075 = x31741 - x71;
          Fp x32076 = (x32075 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x32076;
          Fp x32077 = x31741 - x1;
          Fp x32078 = (x32077 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x32078;
          Fp x32079 = x31741 - x2;
          Fp x32080 = (x32079 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x32080;
        }
        Fp x32081 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x32082 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x32083 = x32082 * x1;
        Fp x32084 = x32081 + x32083;
        Fp x32085 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x32086 = x32085 * x2;
        Fp x32087 = x32084 + x32086;
        Fp x32088 = x32087 - x31741;
        if (x32088 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x32089 = x31783 + x17;
        Fp x32090 = x32089 - x31977;
        Fp x32091 = x31879 + x35;
        Fp x32092 = x32091 - x32071;
        {
          Fp x32093 = Fp(x32090.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x32093;
          Fp x32094 = x32090 - x32093;
          Fp x32095 = x32094 * x26;
          Fp x32096 = Fp(x32095.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x32096;
          Fp x32097 = x32095 - x32096;
          Fp x32098 = x32097 * x26;
          Fp x32099 = Fp(x32098.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x32099;
          Fp x32100 = x32098 - x32099;
          Fp x32101 = x32100 * x26;
          Fp x32102 = Fp(x32101.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x32102;
          Fp x32103 = x32101 - x32102;
          Fp x32104 = x32103 * x26;
          Fp x32105 = Fp(x32104.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x32105;
          Fp x32106 = x32104 - x32105;
          Fp x32107 = x32106 * x26;
          Fp x32108 = Fp(x32107.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x32108;
          Fp x32109 = x32107 - x32108;
          Fp x32110 = x32109 * x26;
          Fp x32111 = Fp(x32110.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x32111;
          Fp x32112 = x32110 - x32111;
          Fp x32113 = x32112 * x26;
          Fp x32114 = Fp(x32113.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x32114;
          Fp x32115 = x32113 - x32114;
          Fp x32116 = x32115 * x26;
          Fp x32117 = Fp(x32116.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x32117;
          Fp x32118 = x32116 - x32117;
          Fp x32119 = x32118 * x26;
          Fp x32120 = Fp(x32119.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x32120;
          Fp x32121 = x32119 - x32120;
          Fp x32122 = x32121 * x26;
          Fp x32123 = Fp(x32122.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x32123;
          Fp x32124 = x32122 - x32123;
          Fp x32125 = x32124 * x26;
          Fp x32126 = Fp(x32125.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x32126;
          Fp x32127 = x32125 - x32126;
          Fp x32128 = x32127 * x26;
          Fp x32129 = Fp(x32128.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x32129;
          Fp x32130 = x32128 - x32129;
          Fp x32131 = x32130 * x26;
          Fp x32132 = Fp(x32131.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x32132;
          Fp x32133 = x32131 - x32132;
          Fp x32134 = x32133 * x26;
          Fp x32135 = Fp(x32134.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x32135;
          Fp x32136 = x32134 - x32135;
          Fp x32137 = x32136 * x26;
          Fp x32138 = Fp(x32137.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x32138;
        }
        Fp x32139 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x32140 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x32141 = x32140 * x1;
        Fp x32142 = x32139 + x32141;
        Fp x32143 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x32144 = x32143 * x3;
        Fp x32145 = x32142 + x32144;
        Fp x32146 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x32147 = x32146 * x6;
        Fp x32148 = x32145 + x32147;
        Fp x32149 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x32150 = x32149 * x11;
        Fp x32151 = x32148 + x32150;
        Fp x32152 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x32153 = x32152 * x27;
        Fp x32154 = x32151 + x32153;
        Fp x32155 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x32156 = x32155 * x12;
        Fp x32157 = x32154 + x32156;
        Fp x32158 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x32159 = x32158 * x28;
        Fp x32160 = x32157 + x32159;
        Fp x32161 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x32162 = x32161 * x13;
        Fp x32163 = x32160 + x32162;
        Fp x32164 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x32165 = x32164 * x29;
        Fp x32166 = x32163 + x32165;
        Fp x32167 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x32168 = x32167 * x14;
        Fp x32169 = x32166 + x32168;
        Fp x32170 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x32171 = x32170 * x30;
        Fp x32172 = x32169 + x32171;
        Fp x32173 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x32174 = x32173 * x15;
        Fp x32175 = x32172 + x32174;
        Fp x32176 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x32177 = x32176 * x31;
        Fp x32178 = x32175 + x32177;
        Fp x32179 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x32180 = x32179 * x16;
        Fp x32181 = x32178 + x32180;
        Fp x32182 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x32183 = x32182 * x32;
        Fp x32184 = x32181 + x32183;
        Fp x32185 = x32090 - x32184;
        Fp x32186 = x32185 * x33;
        args[2][108 * steps + cycle] = x32186;
        Fp x32187 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x32188 = x32092 + x32187;
        {
          Fp x32189 = Fp(x32188.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x32189;
          Fp x32190 = x32188 - x32189;
          Fp x32191 = x32190 * x26;
          Fp x32192 = Fp(x32191.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x32192;
          Fp x32193 = x32191 - x32192;
          Fp x32194 = x32193 * x26;
          Fp x32195 = Fp(x32194.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x32195;
          Fp x32196 = x32194 - x32195;
          Fp x32197 = x32196 * x26;
          Fp x32198 = Fp(x32197.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x32198;
          Fp x32199 = x32197 - x32198;
          Fp x32200 = x32199 * x26;
          Fp x32201 = Fp(x32200.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x32201;
          Fp x32202 = x32200 - x32201;
          Fp x32203 = x32202 * x26;
          Fp x32204 = Fp(x32203.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x32204;
          Fp x32205 = x32203 - x32204;
          Fp x32206 = x32205 * x26;
          Fp x32207 = Fp(x32206.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x32207;
          Fp x32208 = x32206 - x32207;
          Fp x32209 = x32208 * x26;
          Fp x32210 = Fp(x32209.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x32210;
          Fp x32211 = x32209 - x32210;
          Fp x32212 = x32211 * x26;
          Fp x32213 = Fp(x32212.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x32213;
          Fp x32214 = x32212 - x32213;
          Fp x32215 = x32214 * x26;
          Fp x32216 = Fp(x32215.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x32216;
          Fp x32217 = x32215 - x32216;
          Fp x32218 = x32217 * x26;
          Fp x32219 = Fp(x32218.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x32219;
          Fp x32220 = x32218 - x32219;
          Fp x32221 = x32220 * x26;
          Fp x32222 = Fp(x32221.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x32222;
          Fp x32223 = x32221 - x32222;
          Fp x32224 = x32223 * x26;
          Fp x32225 = Fp(x32224.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x32225;
          Fp x32226 = x32224 - x32225;
          Fp x32227 = x32226 * x26;
          Fp x32228 = Fp(x32227.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x32228;
          Fp x32229 = x32227 - x32228;
          Fp x32230 = x32229 * x26;
          Fp x32231 = Fp(x32230.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x32231;
          Fp x32232 = x32230 - x32231;
          Fp x32233 = x32232 * x26;
          Fp x32234 = Fp(x32233.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x32234;
        }
        Fp x32235 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x32236 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x32237 = x32236 * x1;
        Fp x32238 = x32235 + x32237;
        Fp x32239 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x32240 = x32239 * x3;
        Fp x32241 = x32238 + x32240;
        Fp x32242 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x32243 = x32242 * x6;
        Fp x32244 = x32241 + x32243;
        Fp x32245 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x32246 = x32245 * x11;
        Fp x32247 = x32244 + x32246;
        Fp x32248 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x32249 = x32248 * x27;
        Fp x32250 = x32247 + x32249;
        Fp x32251 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x32252 = x32251 * x12;
        Fp x32253 = x32250 + x32252;
        Fp x32254 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x32255 = x32254 * x28;
        Fp x32256 = x32253 + x32255;
        Fp x32257 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x32258 = x32257 * x13;
        Fp x32259 = x32256 + x32258;
        Fp x32260 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x32261 = x32260 * x29;
        Fp x32262 = x32259 + x32261;
        Fp x32263 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x32264 = x32263 * x14;
        Fp x32265 = x32262 + x32264;
        Fp x32266 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x32267 = x32266 * x30;
        Fp x32268 = x32265 + x32267;
        Fp x32269 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x32270 = x32269 * x15;
        Fp x32271 = x32268 + x32270;
        Fp x32272 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x32273 = x32272 * x31;
        Fp x32274 = x32271 + x32273;
        Fp x32275 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x32276 = x32275 * x16;
        Fp x32277 = x32274 + x32276;
        Fp x32278 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x32279 = x32278 * x32;
        Fp x32280 = x32277 + x32279;
        Fp x32281 = x32188 - x32280;
        Fp x32282 = x32281 * x33;
        args[2][109 * steps + cycle] = x32282;
        {
          {
            Fp x32283 = (x32184 == 0) ? Fp(1) : Fp(0);
            Fp x32284 = x71 - x32283;
            args[2][114 * steps + cycle] = x32284;
            Fp x32285 = inv(x32184);
            args[2][115 * steps + cycle] = x32285;
          }
          Fp x32286 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x32287 = x32184 * x32286;
          Fp x32288 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x32289 = x32287 - x32288;
          if (x32289 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x32290 = x71 - x32288;
          Fp x32291 = x32290 * x32184;
          if (x32291 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x32292 = (x32280 == 0) ? Fp(1) : Fp(0);
            Fp x32293 = x71 - x32292;
            args[2][116 * steps + cycle] = x32293;
            Fp x32294 = inv(x32280);
            args[2][117 * steps + cycle] = x32294;
          }
          Fp x32295 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x32296 = x32280 * x32295;
          Fp x32297 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x32298 = x32296 - x32297;
          if (x32298 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x32299 = x71 - x32297;
          Fp x32300 = x32299 * x32280;
          if (x32300 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x32301 = x32290 * x32299;
          Fp x32302 = x71 - x32301;
          args[2][111 * steps + cycle] = x32302;
          Fp x32303 = x71 - x32069;
          Fp x32304 = x31877 * x32303;
          Fp x32305 = x71 - x32278;
          Fp x32306 = x32304 * x32305;
          Fp x32307 = x71 - x31877;
          Fp x32308 = x32307 * x32069;
          Fp x32309 = x32308 * x32278;
          Fp x32310 = x32306 + x32309;
          args[2][112 * steps + cycle] = x32310;
          Fp x32311 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x32312 = x32311 + x32278;
          Fp x32313 = x32311 * x1;
          Fp x32314 = x32313 * x32278;
          Fp x32315 = x32312 - x32314;
          args[2][113 * steps + cycle] = x32315;
        }
        Fp x32316 = args[2][113 * steps + ((cycle - 0) & mask)];
        args[2][100 * steps + cycle] = x32316;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x70;
        Fp x32317 = args[2][100 * steps + ((cycle - 0) & mask)];
        Fp x32318 = x32317 * x31645;
        Fp x32319 = x32317 * x31646;
        Fp x32320 = x31668 + x32318;
        Fp x32321 = x31690 + x32319;
        Fp x32322 = x71 - x32317;
        Fp x32323 = x32322 * x3;
        Fp x32324 = x32320 + x32323;
        args[2][104 * steps + cycle] = x32324;
        args[2][105 * steps + cycle] = x32321;
        Fp x32325 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x32326 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x32327 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x32328 = args[2][101 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x31690;
        host_args[2] = x31668;
        host_args[3] = x31879;
        host_args[4] = x31783;
        host_args[5] = x32071;
        host_args[6] = x31977;
        host_args[7] = x32280;
        host_args[8] = x32184;
        host_args[9] = x32325;
        host_args[10] = x32326;
        host_args[11] = x32327;
        host_args[12] = x32316;
        host_args[13] = x32328;
        host_args[14] = x32317;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x32329 = args[2][73 * steps + ((cycle - 1) & mask)];
      if (x32329 != 0) {
        {
          Fp x32330 = Fp(x31643.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x32330;
          Fp x32331 = x31643 - x32330;
          Fp x32332 = x32331 * x26;
          Fp x32333 = Fp(x32332.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x32333;
          Fp x32334 = x32332 - x32333;
          Fp x32335 = x32334 * x26;
          Fp x32336 = Fp(x32335.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x32336;
          Fp x32337 = x32335 - x32336;
          Fp x32338 = x32337 * x26;
          Fp x32339 = Fp(x32338.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x32339;
          Fp x32340 = x32338 - x32339;
          Fp x32341 = x32340 * x26;
          Fp x32342 = Fp(x32341.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x32342;
          Fp x32343 = x32341 - x32342;
          Fp x32344 = x32343 * x26;
          Fp x32345 = Fp(x32344.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x32345;
          Fp x32346 = x32344 - x32345;
          Fp x32347 = x32346 * x26;
          Fp x32348 = Fp(x32347.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x32348;
          Fp x32349 = x32347 - x32348;
          Fp x32350 = x32349 * x26;
          Fp x32351 = Fp(x32350.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x32351;
          Fp x32352 = x32350 - x32351;
          Fp x32353 = x32352 * x26;
          Fp x32354 = Fp(x32353.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x32354;
          Fp x32355 = x32353 - x32354;
          Fp x32356 = x32355 * x26;
          Fp x32357 = Fp(x32356.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x32357;
          Fp x32358 = x32356 - x32357;
          Fp x32359 = x32358 * x26;
          Fp x32360 = Fp(x32359.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x32360;
          Fp x32361 = x32359 - x32360;
          Fp x32362 = x32361 * x26;
          Fp x32363 = Fp(x32362.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x32363;
          Fp x32364 = x32362 - x32363;
          Fp x32365 = x32364 * x26;
          Fp x32366 = Fp(x32365.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x32366;
          Fp x32367 = x32365 - x32366;
          Fp x32368 = x32367 * x26;
          Fp x32369 = Fp(x32368.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x32369;
          Fp x32370 = x32368 - x32369;
          Fp x32371 = x32370 * x26;
          Fp x32372 = Fp(x32371.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x32372;
          Fp x32373 = x32371 - x32372;
          Fp x32374 = x32373 * x26;
          Fp x32375 = Fp(x32374.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x32375;
        }
        Fp x32376 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x32377 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x32378 = x32377 * x1;
        Fp x32379 = x32376 + x32378;
        Fp x32380 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x32381 = x32380 * x3;
        Fp x32382 = x32379 + x32381;
        Fp x32383 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x32384 = x32383 * x6;
        Fp x32385 = x32382 + x32384;
        Fp x32386 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x32387 = x32386 * x11;
        Fp x32388 = x32385 + x32387;
        Fp x32389 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x32390 = x32389 * x27;
        Fp x32391 = x32388 + x32390;
        Fp x32392 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x32393 = x32392 * x12;
        Fp x32394 = x32391 + x32393;
        Fp x32395 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x32396 = x32395 * x28;
        Fp x32397 = x32394 + x32396;
        Fp x32398 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x32399 = x32398 * x13;
        Fp x32400 = x32397 + x32399;
        Fp x32401 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x32402 = x32401 * x29;
        Fp x32403 = x32400 + x32402;
        Fp x32404 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x32405 = x32404 * x14;
        Fp x32406 = x32403 + x32405;
        Fp x32407 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x32408 = x32407 * x30;
        Fp x32409 = x32406 + x32408;
        Fp x32410 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x32411 = x32410 * x15;
        Fp x32412 = x32409 + x32411;
        Fp x32413 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x32414 = x32413 * x31;
        Fp x32415 = x32412 + x32414;
        Fp x32416 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x32417 = x32416 * x16;
        Fp x32418 = x32415 + x32417;
        Fp x32419 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x32420 = x32419 * x32;
        Fp x32421 = x32418 + x32420;
        Fp x32422 = x31643 - x32421;
        Fp x32423 = x32422 * x33;
        args[2][106 * steps + cycle] = x32423;
        Fp x32424 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x32425 = x31644 + x32424;
        {
          Fp x32426 = Fp(x32425.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x32426;
          Fp x32427 = x32425 - x32426;
          Fp x32428 = x32427 * x26;
          Fp x32429 = Fp(x32428.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x32429;
          Fp x32430 = x32428 - x32429;
          Fp x32431 = x32430 * x26;
          Fp x32432 = Fp(x32431.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x32432;
          Fp x32433 = x32431 - x32432;
          Fp x32434 = x32433 * x26;
          Fp x32435 = Fp(x32434.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x32435;
          Fp x32436 = x32434 - x32435;
          Fp x32437 = x32436 * x26;
          Fp x32438 = Fp(x32437.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x32438;
          Fp x32439 = x32437 - x32438;
          Fp x32440 = x32439 * x26;
          Fp x32441 = Fp(x32440.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x32441;
          Fp x32442 = x32440 - x32441;
          Fp x32443 = x32442 * x26;
          Fp x32444 = Fp(x32443.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x32444;
          Fp x32445 = x32443 - x32444;
          Fp x32446 = x32445 * x26;
          Fp x32447 = Fp(x32446.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x32447;
          Fp x32448 = x32446 - x32447;
          Fp x32449 = x32448 * x26;
          Fp x32450 = Fp(x32449.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x32450;
          Fp x32451 = x32449 - x32450;
          Fp x32452 = x32451 * x26;
          Fp x32453 = Fp(x32452.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x32453;
          Fp x32454 = x32452 - x32453;
          Fp x32455 = x32454 * x26;
          Fp x32456 = Fp(x32455.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x32456;
          Fp x32457 = x32455 - x32456;
          Fp x32458 = x32457 * x26;
          Fp x32459 = Fp(x32458.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x32459;
          Fp x32460 = x32458 - x32459;
          Fp x32461 = x32460 * x26;
          Fp x32462 = Fp(x32461.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x32462;
          Fp x32463 = x32461 - x32462;
          Fp x32464 = x32463 * x26;
          Fp x32465 = Fp(x32464.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x32465;
          Fp x32466 = x32464 - x32465;
          Fp x32467 = x32466 * x26;
          Fp x32468 = Fp(x32467.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x32468;
          Fp x32469 = x32467 - x32468;
          Fp x32470 = x32469 * x26;
          Fp x32471 = Fp(x32470.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x32471;
        }
        Fp x32472 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x32473 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x32474 = x32473 * x1;
        Fp x32475 = x32472 + x32474;
        Fp x32476 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x32477 = x32476 * x3;
        Fp x32478 = x32475 + x32477;
        Fp x32479 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x32480 = x32479 * x6;
        Fp x32481 = x32478 + x32480;
        Fp x32482 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x32483 = x32482 * x11;
        Fp x32484 = x32481 + x32483;
        Fp x32485 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x32486 = x32485 * x27;
        Fp x32487 = x32484 + x32486;
        Fp x32488 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x32489 = x32488 * x12;
        Fp x32490 = x32487 + x32489;
        Fp x32491 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x32492 = x32491 * x28;
        Fp x32493 = x32490 + x32492;
        Fp x32494 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x32495 = x32494 * x13;
        Fp x32496 = x32493 + x32495;
        Fp x32497 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x32498 = x32497 * x29;
        Fp x32499 = x32496 + x32498;
        Fp x32500 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x32501 = x32500 * x14;
        Fp x32502 = x32499 + x32501;
        Fp x32503 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x32504 = x32503 * x30;
        Fp x32505 = x32502 + x32504;
        Fp x32506 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x32507 = x32506 * x15;
        Fp x32508 = x32505 + x32507;
        Fp x32509 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x32510 = x32509 * x31;
        Fp x32511 = x32508 + x32510;
        Fp x32512 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x32513 = x32512 * x16;
        Fp x32514 = x32511 + x32513;
        Fp x32515 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x32516 = x32515 * x32;
        Fp x32517 = x32514 + x32516;
        Fp x32518 = x32425 - x32517;
        Fp x32519 = x32518 * x33;
        args[2][107 * steps + cycle] = x32519;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x32520 = host_outs[0];
          Fp x32521 = host_outs[1];
          args[2][129 * steps + cycle] = x32520;
          args[2][130 * steps + cycle] = x32521;
        }
        Fp x32522 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x32523 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x32524 = Fp(x32522.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x32524;
          Fp x32525 = x32522 - x32524;
          Fp x32526 = x32525 * x26;
          Fp x32527 = Fp(x32526.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x32527;
          Fp x32528 = x32526 - x32527;
          Fp x32529 = x32528 * x26;
          Fp x32530 = Fp(x32529.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x32530;
          Fp x32531 = x32529 - x32530;
          Fp x32532 = x32531 * x26;
          Fp x32533 = Fp(x32532.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x32533;
          Fp x32534 = x32532 - x32533;
          Fp x32535 = x32534 * x26;
          Fp x32536 = Fp(x32535.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x32536;
          Fp x32537 = x32535 - x32536;
          Fp x32538 = x32537 * x26;
          Fp x32539 = Fp(x32538.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x32539;
          Fp x32540 = x32538 - x32539;
          Fp x32541 = x32540 * x26;
          Fp x32542 = Fp(x32541.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x32542;
          Fp x32543 = x32541 - x32542;
          Fp x32544 = x32543 * x26;
          Fp x32545 = Fp(x32544.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x32545;
          Fp x32546 = x32544 - x32545;
          Fp x32547 = x32546 * x26;
          Fp x32548 = Fp(x32547.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x32548;
          Fp x32549 = x32547 - x32548;
          Fp x32550 = x32549 * x26;
          Fp x32551 = Fp(x32550.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x32551;
          Fp x32552 = x32550 - x32551;
          Fp x32553 = x32552 * x26;
          Fp x32554 = Fp(x32553.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x32554;
          Fp x32555 = x32553 - x32554;
          Fp x32556 = x32555 * x26;
          Fp x32557 = Fp(x32556.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x32557;
          Fp x32558 = x32556 - x32557;
          Fp x32559 = x32558 * x26;
          Fp x32560 = Fp(x32559.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x32560;
          Fp x32561 = x32559 - x32560;
          Fp x32562 = x32561 * x26;
          Fp x32563 = Fp(x32562.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x32563;
          Fp x32564 = x32562 - x32563;
          Fp x32565 = x32564 * x26;
          Fp x32566 = Fp(x32565.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x32566;
          Fp x32567 = x32565 - x32566;
          Fp x32568 = x32567 * x26;
          Fp x32569 = Fp(x32568.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x32569;
        }
        Fp x32570 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x32571 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x32572 = x32571 * x1;
        Fp x32573 = x32570 + x32572;
        Fp x32574 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x32575 = x32574 * x3;
        Fp x32576 = x32573 + x32575;
        Fp x32577 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x32578 = x32577 * x6;
        Fp x32579 = x32576 + x32578;
        Fp x32580 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x32581 = x32580 * x11;
        Fp x32582 = x32579 + x32581;
        Fp x32583 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x32584 = x32583 * x27;
        Fp x32585 = x32582 + x32584;
        Fp x32586 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x32587 = x32586 * x12;
        Fp x32588 = x32585 + x32587;
        Fp x32589 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x32590 = x32589 * x28;
        Fp x32591 = x32588 + x32590;
        Fp x32592 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x32593 = x32592 * x13;
        Fp x32594 = x32591 + x32593;
        Fp x32595 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x32596 = x32595 * x29;
        Fp x32597 = x32594 + x32596;
        Fp x32598 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x32599 = x32598 * x14;
        Fp x32600 = x32597 + x32599;
        Fp x32601 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x32602 = x32601 * x30;
        Fp x32603 = x32600 + x32602;
        Fp x32604 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x32605 = x32604 * x15;
        Fp x32606 = x32603 + x32605;
        Fp x32607 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x32608 = x32607 * x31;
        Fp x32609 = x32606 + x32608;
        Fp x32610 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x32611 = x32610 * x16;
        Fp x32612 = x32609 + x32611;
        Fp x32613 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x32614 = x32613 * x32;
        Fp x32615 = x32612 + x32614;
        Fp x32616 = x32522 - x32615;
        Fp x32617 = x32616 * x33;
        if (x32617 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:74");
        {
          Fp x32618 = Fp(x32523.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x32618;
          Fp x32619 = x32523 - x32618;
          Fp x32620 = x32619 * x26;
          Fp x32621 = Fp(x32620.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x32621;
          Fp x32622 = x32620 - x32621;
          Fp x32623 = x32622 * x26;
          Fp x32624 = Fp(x32623.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x32624;
          Fp x32625 = x32623 - x32624;
          Fp x32626 = x32625 * x26;
          Fp x32627 = Fp(x32626.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x32627;
          Fp x32628 = x32626 - x32627;
          Fp x32629 = x32628 * x26;
          Fp x32630 = Fp(x32629.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x32630;
          Fp x32631 = x32629 - x32630;
          Fp x32632 = x32631 * x26;
          Fp x32633 = Fp(x32632.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x32633;
          Fp x32634 = x32632 - x32633;
          Fp x32635 = x32634 * x26;
          Fp x32636 = Fp(x32635.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x32636;
          Fp x32637 = x32635 - x32636;
          Fp x32638 = x32637 * x26;
          Fp x32639 = Fp(x32638.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x32639;
          Fp x32640 = x32638 - x32639;
          Fp x32641 = x32640 * x26;
          Fp x32642 = Fp(x32641.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x32642;
          Fp x32643 = x32641 - x32642;
          Fp x32644 = x32643 * x26;
          Fp x32645 = Fp(x32644.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x32645;
          Fp x32646 = x32644 - x32645;
          Fp x32647 = x32646 * x26;
          Fp x32648 = Fp(x32647.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x32648;
          Fp x32649 = x32647 - x32648;
          Fp x32650 = x32649 * x26;
          Fp x32651 = Fp(x32650.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x32651;
          Fp x32652 = x32650 - x32651;
          Fp x32653 = x32652 * x26;
          Fp x32654 = Fp(x32653.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x32654;
          Fp x32655 = x32653 - x32654;
          Fp x32656 = x32655 * x26;
          Fp x32657 = Fp(x32656.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x32657;
          Fp x32658 = x32656 - x32657;
          Fp x32659 = x32658 * x26;
          Fp x32660 = Fp(x32659.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x32660;
          Fp x32661 = x32659 - x32660;
          Fp x32662 = x32661 * x26;
          Fp x32663 = Fp(x32662.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x32663;
        }
        Fp x32664 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x32665 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x32666 = x32665 * x1;
        Fp x32667 = x32664 + x32666;
        Fp x32668 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x32669 = x32668 * x3;
        Fp x32670 = x32667 + x32669;
        Fp x32671 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x32672 = x32671 * x6;
        Fp x32673 = x32670 + x32672;
        Fp x32674 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x32675 = x32674 * x11;
        Fp x32676 = x32673 + x32675;
        Fp x32677 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x32678 = x32677 * x27;
        Fp x32679 = x32676 + x32678;
        Fp x32680 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x32681 = x32680 * x12;
        Fp x32682 = x32679 + x32681;
        Fp x32683 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x32684 = x32683 * x28;
        Fp x32685 = x32682 + x32684;
        Fp x32686 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x32687 = x32686 * x13;
        Fp x32688 = x32685 + x32687;
        Fp x32689 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x32690 = x32689 * x29;
        Fp x32691 = x32688 + x32690;
        Fp x32692 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x32693 = x32692 * x14;
        Fp x32694 = x32691 + x32693;
        Fp x32695 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x32696 = x32695 * x30;
        Fp x32697 = x32694 + x32696;
        Fp x32698 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x32699 = x32698 * x15;
        Fp x32700 = x32697 + x32699;
        Fp x32701 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x32702 = x32701 * x31;
        Fp x32703 = x32700 + x32702;
        Fp x32704 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x32705 = x32704 * x16;
        Fp x32706 = x32703 + x32705;
        Fp x32707 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x32708 = x32707 * x32;
        Fp x32709 = x32706 + x32708;
        Fp x32710 = x32523 - x32709;
        Fp x32711 = x32710 * x33;
        if (x32711 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:74");
        {
          Fp x32712 = (x32379 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x32712;
          Fp x32713 = x32379 - x71;
          Fp x32714 = (x32713 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x32714;
          Fp x32715 = x32379 - x1;
          Fp x32716 = (x32715 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x32716;
          Fp x32717 = x32379 - x2;
          Fp x32718 = (x32717 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x32718;
        }
        Fp x32719 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x32720 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x32721 = x32720 * x1;
        Fp x32722 = x32719 + x32721;
        Fp x32723 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x32724 = x32723 * x2;
        Fp x32725 = x32722 + x32724;
        Fp x32726 = x32725 - x32379;
        if (x32726 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x32727 = x32421 + x17;
        Fp x32728 = x32727 - x32615;
        Fp x32729 = x32517 + x35;
        Fp x32730 = x32729 - x32709;
        {
          Fp x32731 = Fp(x32728.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x32731;
          Fp x32732 = x32728 - x32731;
          Fp x32733 = x32732 * x26;
          Fp x32734 = Fp(x32733.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x32734;
          Fp x32735 = x32733 - x32734;
          Fp x32736 = x32735 * x26;
          Fp x32737 = Fp(x32736.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x32737;
          Fp x32738 = x32736 - x32737;
          Fp x32739 = x32738 * x26;
          Fp x32740 = Fp(x32739.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x32740;
          Fp x32741 = x32739 - x32740;
          Fp x32742 = x32741 * x26;
          Fp x32743 = Fp(x32742.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x32743;
          Fp x32744 = x32742 - x32743;
          Fp x32745 = x32744 * x26;
          Fp x32746 = Fp(x32745.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x32746;
          Fp x32747 = x32745 - x32746;
          Fp x32748 = x32747 * x26;
          Fp x32749 = Fp(x32748.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x32749;
          Fp x32750 = x32748 - x32749;
          Fp x32751 = x32750 * x26;
          Fp x32752 = Fp(x32751.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x32752;
          Fp x32753 = x32751 - x32752;
          Fp x32754 = x32753 * x26;
          Fp x32755 = Fp(x32754.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x32755;
          Fp x32756 = x32754 - x32755;
          Fp x32757 = x32756 * x26;
          Fp x32758 = Fp(x32757.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x32758;
          Fp x32759 = x32757 - x32758;
          Fp x32760 = x32759 * x26;
          Fp x32761 = Fp(x32760.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x32761;
          Fp x32762 = x32760 - x32761;
          Fp x32763 = x32762 * x26;
          Fp x32764 = Fp(x32763.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x32764;
          Fp x32765 = x32763 - x32764;
          Fp x32766 = x32765 * x26;
          Fp x32767 = Fp(x32766.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x32767;
          Fp x32768 = x32766 - x32767;
          Fp x32769 = x32768 * x26;
          Fp x32770 = Fp(x32769.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x32770;
          Fp x32771 = x32769 - x32770;
          Fp x32772 = x32771 * x26;
          Fp x32773 = Fp(x32772.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x32773;
          Fp x32774 = x32772 - x32773;
          Fp x32775 = x32774 * x26;
          Fp x32776 = Fp(x32775.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x32776;
        }
        Fp x32777 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x32778 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x32779 = x32778 * x1;
        Fp x32780 = x32777 + x32779;
        Fp x32781 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x32782 = x32781 * x3;
        Fp x32783 = x32780 + x32782;
        Fp x32784 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x32785 = x32784 * x6;
        Fp x32786 = x32783 + x32785;
        Fp x32787 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x32788 = x32787 * x11;
        Fp x32789 = x32786 + x32788;
        Fp x32790 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x32791 = x32790 * x27;
        Fp x32792 = x32789 + x32791;
        Fp x32793 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x32794 = x32793 * x12;
        Fp x32795 = x32792 + x32794;
        Fp x32796 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x32797 = x32796 * x28;
        Fp x32798 = x32795 + x32797;
        Fp x32799 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x32800 = x32799 * x13;
        Fp x32801 = x32798 + x32800;
        Fp x32802 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x32803 = x32802 * x29;
        Fp x32804 = x32801 + x32803;
        Fp x32805 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x32806 = x32805 * x14;
        Fp x32807 = x32804 + x32806;
        Fp x32808 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x32809 = x32808 * x30;
        Fp x32810 = x32807 + x32809;
        Fp x32811 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x32812 = x32811 * x15;
        Fp x32813 = x32810 + x32812;
        Fp x32814 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x32815 = x32814 * x31;
        Fp x32816 = x32813 + x32815;
        Fp x32817 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x32818 = x32817 * x16;
        Fp x32819 = x32816 + x32818;
        Fp x32820 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x32821 = x32820 * x32;
        Fp x32822 = x32819 + x32821;
        Fp x32823 = x32728 - x32822;
        Fp x32824 = x32823 * x33;
        args[2][108 * steps + cycle] = x32824;
        Fp x32825 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x32826 = x32730 + x32825;
        {
          Fp x32827 = Fp(x32826.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x32827;
          Fp x32828 = x32826 - x32827;
          Fp x32829 = x32828 * x26;
          Fp x32830 = Fp(x32829.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x32830;
          Fp x32831 = x32829 - x32830;
          Fp x32832 = x32831 * x26;
          Fp x32833 = Fp(x32832.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x32833;
          Fp x32834 = x32832 - x32833;
          Fp x32835 = x32834 * x26;
          Fp x32836 = Fp(x32835.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x32836;
          Fp x32837 = x32835 - x32836;
          Fp x32838 = x32837 * x26;
          Fp x32839 = Fp(x32838.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x32839;
          Fp x32840 = x32838 - x32839;
          Fp x32841 = x32840 * x26;
          Fp x32842 = Fp(x32841.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x32842;
          Fp x32843 = x32841 - x32842;
          Fp x32844 = x32843 * x26;
          Fp x32845 = Fp(x32844.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x32845;
          Fp x32846 = x32844 - x32845;
          Fp x32847 = x32846 * x26;
          Fp x32848 = Fp(x32847.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x32848;
          Fp x32849 = x32847 - x32848;
          Fp x32850 = x32849 * x26;
          Fp x32851 = Fp(x32850.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x32851;
          Fp x32852 = x32850 - x32851;
          Fp x32853 = x32852 * x26;
          Fp x32854 = Fp(x32853.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x32854;
          Fp x32855 = x32853 - x32854;
          Fp x32856 = x32855 * x26;
          Fp x32857 = Fp(x32856.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x32857;
          Fp x32858 = x32856 - x32857;
          Fp x32859 = x32858 * x26;
          Fp x32860 = Fp(x32859.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x32860;
          Fp x32861 = x32859 - x32860;
          Fp x32862 = x32861 * x26;
          Fp x32863 = Fp(x32862.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x32863;
          Fp x32864 = x32862 - x32863;
          Fp x32865 = x32864 * x26;
          Fp x32866 = Fp(x32865.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x32866;
          Fp x32867 = x32865 - x32866;
          Fp x32868 = x32867 * x26;
          Fp x32869 = Fp(x32868.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x32869;
          Fp x32870 = x32868 - x32869;
          Fp x32871 = x32870 * x26;
          Fp x32872 = Fp(x32871.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x32872;
        }
        Fp x32873 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x32874 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x32875 = x32874 * x1;
        Fp x32876 = x32873 + x32875;
        Fp x32877 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x32878 = x32877 * x3;
        Fp x32879 = x32876 + x32878;
        Fp x32880 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x32881 = x32880 * x6;
        Fp x32882 = x32879 + x32881;
        Fp x32883 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x32884 = x32883 * x11;
        Fp x32885 = x32882 + x32884;
        Fp x32886 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x32887 = x32886 * x27;
        Fp x32888 = x32885 + x32887;
        Fp x32889 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x32890 = x32889 * x12;
        Fp x32891 = x32888 + x32890;
        Fp x32892 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x32893 = x32892 * x28;
        Fp x32894 = x32891 + x32893;
        Fp x32895 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x32896 = x32895 * x13;
        Fp x32897 = x32894 + x32896;
        Fp x32898 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x32899 = x32898 * x29;
        Fp x32900 = x32897 + x32899;
        Fp x32901 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x32902 = x32901 * x14;
        Fp x32903 = x32900 + x32902;
        Fp x32904 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x32905 = x32904 * x30;
        Fp x32906 = x32903 + x32905;
        Fp x32907 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x32908 = x32907 * x15;
        Fp x32909 = x32906 + x32908;
        Fp x32910 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x32911 = x32910 * x31;
        Fp x32912 = x32909 + x32911;
        Fp x32913 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x32914 = x32913 * x16;
        Fp x32915 = x32912 + x32914;
        Fp x32916 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x32917 = x32916 * x32;
        Fp x32918 = x32915 + x32917;
        Fp x32919 = x32826 - x32918;
        Fp x32920 = x32919 * x33;
        args[2][109 * steps + cycle] = x32920;
        {
          {
            Fp x32921 = (x32822 == 0) ? Fp(1) : Fp(0);
            Fp x32922 = x71 - x32921;
            args[2][114 * steps + cycle] = x32922;
            Fp x32923 = inv(x32822);
            args[2][115 * steps + cycle] = x32923;
          }
          Fp x32924 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x32925 = x32822 * x32924;
          Fp x32926 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x32927 = x32925 - x32926;
          if (x32927 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x32928 = x71 - x32926;
          Fp x32929 = x32928 * x32822;
          if (x32929 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x32930 = (x32918 == 0) ? Fp(1) : Fp(0);
            Fp x32931 = x71 - x32930;
            args[2][116 * steps + cycle] = x32931;
            Fp x32932 = inv(x32918);
            args[2][117 * steps + cycle] = x32932;
          }
          Fp x32933 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x32934 = x32918 * x32933;
          Fp x32935 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x32936 = x32934 - x32935;
          if (x32936 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x32937 = x71 - x32935;
          Fp x32938 = x32937 * x32918;
          if (x32938 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x32939 = x32928 * x32937;
          Fp x32940 = x71 - x32939;
          args[2][111 * steps + cycle] = x32940;
          Fp x32941 = x71 - x32707;
          Fp x32942 = x32515 * x32941;
          Fp x32943 = x71 - x32916;
          Fp x32944 = x32942 * x32943;
          Fp x32945 = x71 - x32515;
          Fp x32946 = x32945 * x32707;
          Fp x32947 = x32946 * x32916;
          Fp x32948 = x32944 + x32947;
          args[2][112 * steps + cycle] = x32948;
          Fp x32949 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x32950 = x32949 + x32916;
          Fp x32951 = x32949 * x1;
          Fp x32952 = x32951 * x32916;
          Fp x32953 = x32950 - x32952;
          args[2][113 * steps + cycle] = x32953;
        }
        Fp x32954 = args[2][113 * steps + ((cycle - 0) & mask)];
        args[2][100 * steps + cycle] = x32954;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x70;
        Fp x32955 = args[2][100 * steps + ((cycle - 0) & mask)];
        Fp x32956 = x71 - x32955;
        Fp x32957 = x32956 * x31645;
        Fp x32958 = x32956 * x31646;
        Fp x32959 = x31668 + x32957;
        Fp x32960 = x31690 + x32958;
        Fp x32961 = x71 - x32956;
        Fp x32962 = x32961 * x3;
        Fp x32963 = x32959 + x32962;
        args[2][104 * steps + cycle] = x32963;
        args[2][105 * steps + cycle] = x32960;
        Fp x32964 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x32965 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x32966 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x32967 = args[2][101 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x31690;
        host_args[2] = x31668;
        host_args[3] = x32517;
        host_args[4] = x32421;
        host_args[5] = x32709;
        host_args[6] = x32615;
        host_args[7] = x32918;
        host_args[8] = x32822;
        host_args[9] = x32964;
        host_args[10] = x32965;
        host_args[11] = x32966;
        host_args[12] = x32954;
        host_args[13] = x32967;
        host_args[14] = x32955;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x32968 = args[2][74 * steps + ((cycle - 1) & mask)];
      if (x32968 != 0) {
        {
          Fp x32969 = Fp(x31643.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x32969;
          Fp x32970 = x31643 - x32969;
          Fp x32971 = x32970 * x26;
          Fp x32972 = Fp(x32971.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x32972;
          Fp x32973 = x32971 - x32972;
          Fp x32974 = x32973 * x26;
          Fp x32975 = Fp(x32974.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x32975;
          Fp x32976 = x32974 - x32975;
          Fp x32977 = x32976 * x26;
          Fp x32978 = Fp(x32977.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x32978;
          Fp x32979 = x32977 - x32978;
          Fp x32980 = x32979 * x26;
          Fp x32981 = Fp(x32980.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x32981;
          Fp x32982 = x32980 - x32981;
          Fp x32983 = x32982 * x26;
          Fp x32984 = Fp(x32983.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x32984;
          Fp x32985 = x32983 - x32984;
          Fp x32986 = x32985 * x26;
          Fp x32987 = Fp(x32986.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x32987;
          Fp x32988 = x32986 - x32987;
          Fp x32989 = x32988 * x26;
          Fp x32990 = Fp(x32989.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x32990;
          Fp x32991 = x32989 - x32990;
          Fp x32992 = x32991 * x26;
          Fp x32993 = Fp(x32992.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x32993;
          Fp x32994 = x32992 - x32993;
          Fp x32995 = x32994 * x26;
          Fp x32996 = Fp(x32995.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x32996;
          Fp x32997 = x32995 - x32996;
          Fp x32998 = x32997 * x26;
          Fp x32999 = Fp(x32998.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x32999;
          Fp x33000 = x32998 - x32999;
          Fp x33001 = x33000 * x26;
          Fp x33002 = Fp(x33001.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x33002;
          Fp x33003 = x33001 - x33002;
          Fp x33004 = x33003 * x26;
          Fp x33005 = Fp(x33004.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x33005;
          Fp x33006 = x33004 - x33005;
          Fp x33007 = x33006 * x26;
          Fp x33008 = Fp(x33007.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x33008;
          Fp x33009 = x33007 - x33008;
          Fp x33010 = x33009 * x26;
          Fp x33011 = Fp(x33010.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x33011;
          Fp x33012 = x33010 - x33011;
          Fp x33013 = x33012 * x26;
          Fp x33014 = Fp(x33013.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x33014;
        }
        Fp x33015 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x33016 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x33017 = x33016 * x1;
        Fp x33018 = x33015 + x33017;
        Fp x33019 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x33020 = x33019 * x3;
        Fp x33021 = x33018 + x33020;
        Fp x33022 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x33023 = x33022 * x6;
        Fp x33024 = x33021 + x33023;
        Fp x33025 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x33026 = x33025 * x11;
        Fp x33027 = x33024 + x33026;
        Fp x33028 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x33029 = x33028 * x27;
        Fp x33030 = x33027 + x33029;
        Fp x33031 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x33032 = x33031 * x12;
        Fp x33033 = x33030 + x33032;
        Fp x33034 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x33035 = x33034 * x28;
        Fp x33036 = x33033 + x33035;
        Fp x33037 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x33038 = x33037 * x13;
        Fp x33039 = x33036 + x33038;
        Fp x33040 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x33041 = x33040 * x29;
        Fp x33042 = x33039 + x33041;
        Fp x33043 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x33044 = x33043 * x14;
        Fp x33045 = x33042 + x33044;
        Fp x33046 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x33047 = x33046 * x30;
        Fp x33048 = x33045 + x33047;
        Fp x33049 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x33050 = x33049 * x15;
        Fp x33051 = x33048 + x33050;
        Fp x33052 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x33053 = x33052 * x31;
        Fp x33054 = x33051 + x33053;
        Fp x33055 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x33056 = x33055 * x16;
        Fp x33057 = x33054 + x33056;
        Fp x33058 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x33059 = x33058 * x32;
        Fp x33060 = x33057 + x33059;
        Fp x33061 = x31643 - x33060;
        Fp x33062 = x33061 * x33;
        args[2][106 * steps + cycle] = x33062;
        Fp x33063 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x33064 = x31644 + x33063;
        {
          Fp x33065 = Fp(x33064.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x33065;
          Fp x33066 = x33064 - x33065;
          Fp x33067 = x33066 * x26;
          Fp x33068 = Fp(x33067.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x33068;
          Fp x33069 = x33067 - x33068;
          Fp x33070 = x33069 * x26;
          Fp x33071 = Fp(x33070.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x33071;
          Fp x33072 = x33070 - x33071;
          Fp x33073 = x33072 * x26;
          Fp x33074 = Fp(x33073.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x33074;
          Fp x33075 = x33073 - x33074;
          Fp x33076 = x33075 * x26;
          Fp x33077 = Fp(x33076.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x33077;
          Fp x33078 = x33076 - x33077;
          Fp x33079 = x33078 * x26;
          Fp x33080 = Fp(x33079.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x33080;
          Fp x33081 = x33079 - x33080;
          Fp x33082 = x33081 * x26;
          Fp x33083 = Fp(x33082.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x33083;
          Fp x33084 = x33082 - x33083;
          Fp x33085 = x33084 * x26;
          Fp x33086 = Fp(x33085.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x33086;
          Fp x33087 = x33085 - x33086;
          Fp x33088 = x33087 * x26;
          Fp x33089 = Fp(x33088.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x33089;
          Fp x33090 = x33088 - x33089;
          Fp x33091 = x33090 * x26;
          Fp x33092 = Fp(x33091.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x33092;
          Fp x33093 = x33091 - x33092;
          Fp x33094 = x33093 * x26;
          Fp x33095 = Fp(x33094.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x33095;
          Fp x33096 = x33094 - x33095;
          Fp x33097 = x33096 * x26;
          Fp x33098 = Fp(x33097.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x33098;
          Fp x33099 = x33097 - x33098;
          Fp x33100 = x33099 * x26;
          Fp x33101 = Fp(x33100.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x33101;
          Fp x33102 = x33100 - x33101;
          Fp x33103 = x33102 * x26;
          Fp x33104 = Fp(x33103.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x33104;
          Fp x33105 = x33103 - x33104;
          Fp x33106 = x33105 * x26;
          Fp x33107 = Fp(x33106.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x33107;
          Fp x33108 = x33106 - x33107;
          Fp x33109 = x33108 * x26;
          Fp x33110 = Fp(x33109.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x33110;
        }
        Fp x33111 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x33112 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x33113 = x33112 * x1;
        Fp x33114 = x33111 + x33113;
        Fp x33115 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x33116 = x33115 * x3;
        Fp x33117 = x33114 + x33116;
        Fp x33118 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x33119 = x33118 * x6;
        Fp x33120 = x33117 + x33119;
        Fp x33121 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x33122 = x33121 * x11;
        Fp x33123 = x33120 + x33122;
        Fp x33124 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x33125 = x33124 * x27;
        Fp x33126 = x33123 + x33125;
        Fp x33127 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x33128 = x33127 * x12;
        Fp x33129 = x33126 + x33128;
        Fp x33130 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x33131 = x33130 * x28;
        Fp x33132 = x33129 + x33131;
        Fp x33133 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x33134 = x33133 * x13;
        Fp x33135 = x33132 + x33134;
        Fp x33136 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x33137 = x33136 * x29;
        Fp x33138 = x33135 + x33137;
        Fp x33139 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x33140 = x33139 * x14;
        Fp x33141 = x33138 + x33140;
        Fp x33142 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x33143 = x33142 * x30;
        Fp x33144 = x33141 + x33143;
        Fp x33145 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x33146 = x33145 * x15;
        Fp x33147 = x33144 + x33146;
        Fp x33148 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x33149 = x33148 * x31;
        Fp x33150 = x33147 + x33149;
        Fp x33151 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x33152 = x33151 * x16;
        Fp x33153 = x33150 + x33152;
        Fp x33154 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x33155 = x33154 * x32;
        Fp x33156 = x33153 + x33155;
        Fp x33157 = x33064 - x33156;
        Fp x33158 = x33157 * x33;
        args[2][107 * steps + cycle] = x33158;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x33159 = host_outs[0];
          Fp x33160 = host_outs[1];
          args[2][129 * steps + cycle] = x33159;
          args[2][130 * steps + cycle] = x33160;
        }
        Fp x33161 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x33162 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x33163 = Fp(x33161.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x33163;
          Fp x33164 = x33161 - x33163;
          Fp x33165 = x33164 * x26;
          Fp x33166 = Fp(x33165.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x33166;
          Fp x33167 = x33165 - x33166;
          Fp x33168 = x33167 * x26;
          Fp x33169 = Fp(x33168.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x33169;
          Fp x33170 = x33168 - x33169;
          Fp x33171 = x33170 * x26;
          Fp x33172 = Fp(x33171.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x33172;
          Fp x33173 = x33171 - x33172;
          Fp x33174 = x33173 * x26;
          Fp x33175 = Fp(x33174.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x33175;
          Fp x33176 = x33174 - x33175;
          Fp x33177 = x33176 * x26;
          Fp x33178 = Fp(x33177.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x33178;
          Fp x33179 = x33177 - x33178;
          Fp x33180 = x33179 * x26;
          Fp x33181 = Fp(x33180.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x33181;
          Fp x33182 = x33180 - x33181;
          Fp x33183 = x33182 * x26;
          Fp x33184 = Fp(x33183.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x33184;
          Fp x33185 = x33183 - x33184;
          Fp x33186 = x33185 * x26;
          Fp x33187 = Fp(x33186.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x33187;
          Fp x33188 = x33186 - x33187;
          Fp x33189 = x33188 * x26;
          Fp x33190 = Fp(x33189.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x33190;
          Fp x33191 = x33189 - x33190;
          Fp x33192 = x33191 * x26;
          Fp x33193 = Fp(x33192.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x33193;
          Fp x33194 = x33192 - x33193;
          Fp x33195 = x33194 * x26;
          Fp x33196 = Fp(x33195.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x33196;
          Fp x33197 = x33195 - x33196;
          Fp x33198 = x33197 * x26;
          Fp x33199 = Fp(x33198.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x33199;
          Fp x33200 = x33198 - x33199;
          Fp x33201 = x33200 * x26;
          Fp x33202 = Fp(x33201.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x33202;
          Fp x33203 = x33201 - x33202;
          Fp x33204 = x33203 * x26;
          Fp x33205 = Fp(x33204.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x33205;
          Fp x33206 = x33204 - x33205;
          Fp x33207 = x33206 * x26;
          Fp x33208 = Fp(x33207.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x33208;
        }
        Fp x33209 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x33210 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x33211 = x33210 * x1;
        Fp x33212 = x33209 + x33211;
        Fp x33213 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x33214 = x33213 * x3;
        Fp x33215 = x33212 + x33214;
        Fp x33216 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x33217 = x33216 * x6;
        Fp x33218 = x33215 + x33217;
        Fp x33219 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x33220 = x33219 * x11;
        Fp x33221 = x33218 + x33220;
        Fp x33222 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x33223 = x33222 * x27;
        Fp x33224 = x33221 + x33223;
        Fp x33225 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x33226 = x33225 * x12;
        Fp x33227 = x33224 + x33226;
        Fp x33228 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x33229 = x33228 * x28;
        Fp x33230 = x33227 + x33229;
        Fp x33231 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x33232 = x33231 * x13;
        Fp x33233 = x33230 + x33232;
        Fp x33234 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x33235 = x33234 * x29;
        Fp x33236 = x33233 + x33235;
        Fp x33237 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x33238 = x33237 * x14;
        Fp x33239 = x33236 + x33238;
        Fp x33240 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x33241 = x33240 * x30;
        Fp x33242 = x33239 + x33241;
        Fp x33243 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x33244 = x33243 * x15;
        Fp x33245 = x33242 + x33244;
        Fp x33246 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x33247 = x33246 * x31;
        Fp x33248 = x33245 + x33247;
        Fp x33249 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x33250 = x33249 * x16;
        Fp x33251 = x33248 + x33250;
        Fp x33252 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x33253 = x33252 * x32;
        Fp x33254 = x33251 + x33253;
        Fp x33255 = x33161 - x33254;
        Fp x33256 = x33255 * x33;
        if (x33256 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:75");
        {
          Fp x33257 = Fp(x33162.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x33257;
          Fp x33258 = x33162 - x33257;
          Fp x33259 = x33258 * x26;
          Fp x33260 = Fp(x33259.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x33260;
          Fp x33261 = x33259 - x33260;
          Fp x33262 = x33261 * x26;
          Fp x33263 = Fp(x33262.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x33263;
          Fp x33264 = x33262 - x33263;
          Fp x33265 = x33264 * x26;
          Fp x33266 = Fp(x33265.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x33266;
          Fp x33267 = x33265 - x33266;
          Fp x33268 = x33267 * x26;
          Fp x33269 = Fp(x33268.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x33269;
          Fp x33270 = x33268 - x33269;
          Fp x33271 = x33270 * x26;
          Fp x33272 = Fp(x33271.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x33272;
          Fp x33273 = x33271 - x33272;
          Fp x33274 = x33273 * x26;
          Fp x33275 = Fp(x33274.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x33275;
          Fp x33276 = x33274 - x33275;
          Fp x33277 = x33276 * x26;
          Fp x33278 = Fp(x33277.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x33278;
          Fp x33279 = x33277 - x33278;
          Fp x33280 = x33279 * x26;
          Fp x33281 = Fp(x33280.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x33281;
          Fp x33282 = x33280 - x33281;
          Fp x33283 = x33282 * x26;
          Fp x33284 = Fp(x33283.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x33284;
          Fp x33285 = x33283 - x33284;
          Fp x33286 = x33285 * x26;
          Fp x33287 = Fp(x33286.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x33287;
          Fp x33288 = x33286 - x33287;
          Fp x33289 = x33288 * x26;
          Fp x33290 = Fp(x33289.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x33290;
          Fp x33291 = x33289 - x33290;
          Fp x33292 = x33291 * x26;
          Fp x33293 = Fp(x33292.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x33293;
          Fp x33294 = x33292 - x33293;
          Fp x33295 = x33294 * x26;
          Fp x33296 = Fp(x33295.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x33296;
          Fp x33297 = x33295 - x33296;
          Fp x33298 = x33297 * x26;
          Fp x33299 = Fp(x33298.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x33299;
          Fp x33300 = x33298 - x33299;
          Fp x33301 = x33300 * x26;
          Fp x33302 = Fp(x33301.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x33302;
        }
        Fp x33303 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x33304 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x33305 = x33304 * x1;
        Fp x33306 = x33303 + x33305;
        Fp x33307 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x33308 = x33307 * x3;
        Fp x33309 = x33306 + x33308;
        Fp x33310 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x33311 = x33310 * x6;
        Fp x33312 = x33309 + x33311;
        Fp x33313 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x33314 = x33313 * x11;
        Fp x33315 = x33312 + x33314;
        Fp x33316 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x33317 = x33316 * x27;
        Fp x33318 = x33315 + x33317;
        Fp x33319 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x33320 = x33319 * x12;
        Fp x33321 = x33318 + x33320;
        Fp x33322 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x33323 = x33322 * x28;
        Fp x33324 = x33321 + x33323;
        Fp x33325 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x33326 = x33325 * x13;
        Fp x33327 = x33324 + x33326;
        Fp x33328 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x33329 = x33328 * x29;
        Fp x33330 = x33327 + x33329;
        Fp x33331 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x33332 = x33331 * x14;
        Fp x33333 = x33330 + x33332;
        Fp x33334 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x33335 = x33334 * x30;
        Fp x33336 = x33333 + x33335;
        Fp x33337 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x33338 = x33337 * x15;
        Fp x33339 = x33336 + x33338;
        Fp x33340 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x33341 = x33340 * x31;
        Fp x33342 = x33339 + x33341;
        Fp x33343 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x33344 = x33343 * x16;
        Fp x33345 = x33342 + x33344;
        Fp x33346 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x33347 = x33346 * x32;
        Fp x33348 = x33345 + x33347;
        Fp x33349 = x33162 - x33348;
        Fp x33350 = x33349 * x33;
        if (x33350 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:75");
        {
          Fp x33351 = (x33018 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x33351;
          Fp x33352 = x33018 - x71;
          Fp x33353 = (x33352 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x33353;
          Fp x33354 = x33018 - x1;
          Fp x33355 = (x33354 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x33355;
          Fp x33356 = x33018 - x2;
          Fp x33357 = (x33356 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x33357;
        }
        Fp x33358 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x33359 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x33360 = x33359 * x1;
        Fp x33361 = x33358 + x33360;
        Fp x33362 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x33363 = x33362 * x2;
        Fp x33364 = x33361 + x33363;
        Fp x33365 = x33364 - x33018;
        if (x33365 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x33366 = x33060 + x17;
        Fp x33367 = x33366 - x33254;
        Fp x33368 = x33156 + x35;
        Fp x33369 = x33368 - x33348;
        {
          Fp x33370 = Fp(x33367.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x33370;
          Fp x33371 = x33367 - x33370;
          Fp x33372 = x33371 * x26;
          Fp x33373 = Fp(x33372.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x33373;
          Fp x33374 = x33372 - x33373;
          Fp x33375 = x33374 * x26;
          Fp x33376 = Fp(x33375.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x33376;
          Fp x33377 = x33375 - x33376;
          Fp x33378 = x33377 * x26;
          Fp x33379 = Fp(x33378.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x33379;
          Fp x33380 = x33378 - x33379;
          Fp x33381 = x33380 * x26;
          Fp x33382 = Fp(x33381.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x33382;
          Fp x33383 = x33381 - x33382;
          Fp x33384 = x33383 * x26;
          Fp x33385 = Fp(x33384.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x33385;
          Fp x33386 = x33384 - x33385;
          Fp x33387 = x33386 * x26;
          Fp x33388 = Fp(x33387.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x33388;
          Fp x33389 = x33387 - x33388;
          Fp x33390 = x33389 * x26;
          Fp x33391 = Fp(x33390.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x33391;
          Fp x33392 = x33390 - x33391;
          Fp x33393 = x33392 * x26;
          Fp x33394 = Fp(x33393.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x33394;
          Fp x33395 = x33393 - x33394;
          Fp x33396 = x33395 * x26;
          Fp x33397 = Fp(x33396.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x33397;
          Fp x33398 = x33396 - x33397;
          Fp x33399 = x33398 * x26;
          Fp x33400 = Fp(x33399.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x33400;
          Fp x33401 = x33399 - x33400;
          Fp x33402 = x33401 * x26;
          Fp x33403 = Fp(x33402.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x33403;
          Fp x33404 = x33402 - x33403;
          Fp x33405 = x33404 * x26;
          Fp x33406 = Fp(x33405.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x33406;
          Fp x33407 = x33405 - x33406;
          Fp x33408 = x33407 * x26;
          Fp x33409 = Fp(x33408.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x33409;
          Fp x33410 = x33408 - x33409;
          Fp x33411 = x33410 * x26;
          Fp x33412 = Fp(x33411.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x33412;
          Fp x33413 = x33411 - x33412;
          Fp x33414 = x33413 * x26;
          Fp x33415 = Fp(x33414.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x33415;
        }
        Fp x33416 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x33417 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x33418 = x33417 * x1;
        Fp x33419 = x33416 + x33418;
        Fp x33420 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x33421 = x33420 * x3;
        Fp x33422 = x33419 + x33421;
        Fp x33423 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x33424 = x33423 * x6;
        Fp x33425 = x33422 + x33424;
        Fp x33426 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x33427 = x33426 * x11;
        Fp x33428 = x33425 + x33427;
        Fp x33429 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x33430 = x33429 * x27;
        Fp x33431 = x33428 + x33430;
        Fp x33432 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x33433 = x33432 * x12;
        Fp x33434 = x33431 + x33433;
        Fp x33435 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x33436 = x33435 * x28;
        Fp x33437 = x33434 + x33436;
        Fp x33438 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x33439 = x33438 * x13;
        Fp x33440 = x33437 + x33439;
        Fp x33441 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x33442 = x33441 * x29;
        Fp x33443 = x33440 + x33442;
        Fp x33444 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x33445 = x33444 * x14;
        Fp x33446 = x33443 + x33445;
        Fp x33447 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x33448 = x33447 * x30;
        Fp x33449 = x33446 + x33448;
        Fp x33450 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x33451 = x33450 * x15;
        Fp x33452 = x33449 + x33451;
        Fp x33453 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x33454 = x33453 * x31;
        Fp x33455 = x33452 + x33454;
        Fp x33456 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x33457 = x33456 * x16;
        Fp x33458 = x33455 + x33457;
        Fp x33459 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x33460 = x33459 * x32;
        Fp x33461 = x33458 + x33460;
        Fp x33462 = x33367 - x33461;
        Fp x33463 = x33462 * x33;
        args[2][108 * steps + cycle] = x33463;
        Fp x33464 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x33465 = x33369 + x33464;
        {
          Fp x33466 = Fp(x33465.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x33466;
          Fp x33467 = x33465 - x33466;
          Fp x33468 = x33467 * x26;
          Fp x33469 = Fp(x33468.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x33469;
          Fp x33470 = x33468 - x33469;
          Fp x33471 = x33470 * x26;
          Fp x33472 = Fp(x33471.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x33472;
          Fp x33473 = x33471 - x33472;
          Fp x33474 = x33473 * x26;
          Fp x33475 = Fp(x33474.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x33475;
          Fp x33476 = x33474 - x33475;
          Fp x33477 = x33476 * x26;
          Fp x33478 = Fp(x33477.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x33478;
          Fp x33479 = x33477 - x33478;
          Fp x33480 = x33479 * x26;
          Fp x33481 = Fp(x33480.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x33481;
          Fp x33482 = x33480 - x33481;
          Fp x33483 = x33482 * x26;
          Fp x33484 = Fp(x33483.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x33484;
          Fp x33485 = x33483 - x33484;
          Fp x33486 = x33485 * x26;
          Fp x33487 = Fp(x33486.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x33487;
          Fp x33488 = x33486 - x33487;
          Fp x33489 = x33488 * x26;
          Fp x33490 = Fp(x33489.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x33490;
          Fp x33491 = x33489 - x33490;
          Fp x33492 = x33491 * x26;
          Fp x33493 = Fp(x33492.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x33493;
          Fp x33494 = x33492 - x33493;
          Fp x33495 = x33494 * x26;
          Fp x33496 = Fp(x33495.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x33496;
          Fp x33497 = x33495 - x33496;
          Fp x33498 = x33497 * x26;
          Fp x33499 = Fp(x33498.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x33499;
          Fp x33500 = x33498 - x33499;
          Fp x33501 = x33500 * x26;
          Fp x33502 = Fp(x33501.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x33502;
          Fp x33503 = x33501 - x33502;
          Fp x33504 = x33503 * x26;
          Fp x33505 = Fp(x33504.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x33505;
          Fp x33506 = x33504 - x33505;
          Fp x33507 = x33506 * x26;
          Fp x33508 = Fp(x33507.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x33508;
          Fp x33509 = x33507 - x33508;
          Fp x33510 = x33509 * x26;
          Fp x33511 = Fp(x33510.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x33511;
        }
        Fp x33512 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x33513 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x33514 = x33513 * x1;
        Fp x33515 = x33512 + x33514;
        Fp x33516 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x33517 = x33516 * x3;
        Fp x33518 = x33515 + x33517;
        Fp x33519 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x33520 = x33519 * x6;
        Fp x33521 = x33518 + x33520;
        Fp x33522 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x33523 = x33522 * x11;
        Fp x33524 = x33521 + x33523;
        Fp x33525 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x33526 = x33525 * x27;
        Fp x33527 = x33524 + x33526;
        Fp x33528 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x33529 = x33528 * x12;
        Fp x33530 = x33527 + x33529;
        Fp x33531 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x33532 = x33531 * x28;
        Fp x33533 = x33530 + x33532;
        Fp x33534 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x33535 = x33534 * x13;
        Fp x33536 = x33533 + x33535;
        Fp x33537 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x33538 = x33537 * x29;
        Fp x33539 = x33536 + x33538;
        Fp x33540 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x33541 = x33540 * x14;
        Fp x33542 = x33539 + x33541;
        Fp x33543 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x33544 = x33543 * x30;
        Fp x33545 = x33542 + x33544;
        Fp x33546 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x33547 = x33546 * x15;
        Fp x33548 = x33545 + x33547;
        Fp x33549 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x33550 = x33549 * x31;
        Fp x33551 = x33548 + x33550;
        Fp x33552 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x33553 = x33552 * x16;
        Fp x33554 = x33551 + x33553;
        Fp x33555 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x33556 = x33555 * x32;
        Fp x33557 = x33554 + x33556;
        Fp x33558 = x33465 - x33557;
        Fp x33559 = x33558 * x33;
        args[2][109 * steps + cycle] = x33559;
        {
          {
            Fp x33560 = (x33461 == 0) ? Fp(1) : Fp(0);
            Fp x33561 = x71 - x33560;
            args[2][114 * steps + cycle] = x33561;
            Fp x33562 = inv(x33461);
            args[2][115 * steps + cycle] = x33562;
          }
          Fp x33563 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x33564 = x33461 * x33563;
          Fp x33565 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x33566 = x33564 - x33565;
          if (x33566 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x33567 = x71 - x33565;
          Fp x33568 = x33567 * x33461;
          if (x33568 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x33569 = (x33557 == 0) ? Fp(1) : Fp(0);
            Fp x33570 = x71 - x33569;
            args[2][116 * steps + cycle] = x33570;
            Fp x33571 = inv(x33557);
            args[2][117 * steps + cycle] = x33571;
          }
          Fp x33572 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x33573 = x33557 * x33572;
          Fp x33574 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x33575 = x33573 - x33574;
          if (x33575 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x33576 = x71 - x33574;
          Fp x33577 = x33576 * x33557;
          if (x33577 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x33578 = x33567 * x33576;
          Fp x33579 = x71 - x33578;
          args[2][111 * steps + cycle] = x33579;
          Fp x33580 = x71 - x33346;
          Fp x33581 = x33154 * x33580;
          Fp x33582 = x71 - x33555;
          Fp x33583 = x33581 * x33582;
          Fp x33584 = x71 - x33154;
          Fp x33585 = x33584 * x33346;
          Fp x33586 = x33585 * x33555;
          Fp x33587 = x33583 + x33586;
          args[2][112 * steps + cycle] = x33587;
          Fp x33588 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x33589 = x33588 + x33555;
          Fp x33590 = x33588 * x1;
          Fp x33591 = x33590 * x33555;
          Fp x33592 = x33589 - x33591;
          args[2][113 * steps + cycle] = x33592;
        }
        Fp x33593 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x33594 = x71 - x33593;
        args[2][100 * steps + cycle] = x33594;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x70;
        Fp x33595 = args[2][100 * steps + ((cycle - 0) & mask)];
        Fp x33596 = x33595 * x31645;
        Fp x33597 = x33595 * x31646;
        Fp x33598 = x31668 + x33596;
        Fp x33599 = x31690 + x33597;
        Fp x33600 = x71 - x33595;
        Fp x33601 = x33600 * x3;
        Fp x33602 = x33598 + x33601;
        args[2][104 * steps + cycle] = x33602;
        args[2][105 * steps + cycle] = x33599;
        Fp x33603 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x33604 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x33605 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x33606 = args[2][101 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x31690;
        host_args[2] = x31668;
        host_args[3] = x33156;
        host_args[4] = x33060;
        host_args[5] = x33348;
        host_args[6] = x33254;
        host_args[7] = x33557;
        host_args[8] = x33461;
        host_args[9] = x33603;
        host_args[10] = x33593;
        host_args[11] = x33604;
        host_args[12] = x33605;
        host_args[13] = x33606;
        host_args[14] = x33595;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x33607 = args[2][75 * steps + ((cycle - 1) & mask)];
      if (x33607 != 0) {
        {
          Fp x33608 = Fp(x31643.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x33608;
          Fp x33609 = x31643 - x33608;
          Fp x33610 = x33609 * x26;
          Fp x33611 = Fp(x33610.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x33611;
          Fp x33612 = x33610 - x33611;
          Fp x33613 = x33612 * x26;
          Fp x33614 = Fp(x33613.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x33614;
          Fp x33615 = x33613 - x33614;
          Fp x33616 = x33615 * x26;
          Fp x33617 = Fp(x33616.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x33617;
          Fp x33618 = x33616 - x33617;
          Fp x33619 = x33618 * x26;
          Fp x33620 = Fp(x33619.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x33620;
          Fp x33621 = x33619 - x33620;
          Fp x33622 = x33621 * x26;
          Fp x33623 = Fp(x33622.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x33623;
          Fp x33624 = x33622 - x33623;
          Fp x33625 = x33624 * x26;
          Fp x33626 = Fp(x33625.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x33626;
          Fp x33627 = x33625 - x33626;
          Fp x33628 = x33627 * x26;
          Fp x33629 = Fp(x33628.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x33629;
          Fp x33630 = x33628 - x33629;
          Fp x33631 = x33630 * x26;
          Fp x33632 = Fp(x33631.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x33632;
          Fp x33633 = x33631 - x33632;
          Fp x33634 = x33633 * x26;
          Fp x33635 = Fp(x33634.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x33635;
          Fp x33636 = x33634 - x33635;
          Fp x33637 = x33636 * x26;
          Fp x33638 = Fp(x33637.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x33638;
          Fp x33639 = x33637 - x33638;
          Fp x33640 = x33639 * x26;
          Fp x33641 = Fp(x33640.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x33641;
          Fp x33642 = x33640 - x33641;
          Fp x33643 = x33642 * x26;
          Fp x33644 = Fp(x33643.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x33644;
          Fp x33645 = x33643 - x33644;
          Fp x33646 = x33645 * x26;
          Fp x33647 = Fp(x33646.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x33647;
          Fp x33648 = x33646 - x33647;
          Fp x33649 = x33648 * x26;
          Fp x33650 = Fp(x33649.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x33650;
          Fp x33651 = x33649 - x33650;
          Fp x33652 = x33651 * x26;
          Fp x33653 = Fp(x33652.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x33653;
        }
        Fp x33654 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x33655 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x33656 = x33655 * x1;
        Fp x33657 = x33654 + x33656;
        Fp x33658 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x33659 = x33658 * x3;
        Fp x33660 = x33657 + x33659;
        Fp x33661 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x33662 = x33661 * x6;
        Fp x33663 = x33660 + x33662;
        Fp x33664 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x33665 = x33664 * x11;
        Fp x33666 = x33663 + x33665;
        Fp x33667 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x33668 = x33667 * x27;
        Fp x33669 = x33666 + x33668;
        Fp x33670 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x33671 = x33670 * x12;
        Fp x33672 = x33669 + x33671;
        Fp x33673 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x33674 = x33673 * x28;
        Fp x33675 = x33672 + x33674;
        Fp x33676 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x33677 = x33676 * x13;
        Fp x33678 = x33675 + x33677;
        Fp x33679 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x33680 = x33679 * x29;
        Fp x33681 = x33678 + x33680;
        Fp x33682 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x33683 = x33682 * x14;
        Fp x33684 = x33681 + x33683;
        Fp x33685 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x33686 = x33685 * x30;
        Fp x33687 = x33684 + x33686;
        Fp x33688 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x33689 = x33688 * x15;
        Fp x33690 = x33687 + x33689;
        Fp x33691 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x33692 = x33691 * x31;
        Fp x33693 = x33690 + x33692;
        Fp x33694 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x33695 = x33694 * x16;
        Fp x33696 = x33693 + x33695;
        Fp x33697 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x33698 = x33697 * x32;
        Fp x33699 = x33696 + x33698;
        Fp x33700 = x31643 - x33699;
        Fp x33701 = x33700 * x33;
        args[2][106 * steps + cycle] = x33701;
        Fp x33702 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x33703 = x31644 + x33702;
        {
          Fp x33704 = Fp(x33703.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x33704;
          Fp x33705 = x33703 - x33704;
          Fp x33706 = x33705 * x26;
          Fp x33707 = Fp(x33706.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x33707;
          Fp x33708 = x33706 - x33707;
          Fp x33709 = x33708 * x26;
          Fp x33710 = Fp(x33709.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x33710;
          Fp x33711 = x33709 - x33710;
          Fp x33712 = x33711 * x26;
          Fp x33713 = Fp(x33712.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x33713;
          Fp x33714 = x33712 - x33713;
          Fp x33715 = x33714 * x26;
          Fp x33716 = Fp(x33715.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x33716;
          Fp x33717 = x33715 - x33716;
          Fp x33718 = x33717 * x26;
          Fp x33719 = Fp(x33718.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x33719;
          Fp x33720 = x33718 - x33719;
          Fp x33721 = x33720 * x26;
          Fp x33722 = Fp(x33721.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x33722;
          Fp x33723 = x33721 - x33722;
          Fp x33724 = x33723 * x26;
          Fp x33725 = Fp(x33724.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x33725;
          Fp x33726 = x33724 - x33725;
          Fp x33727 = x33726 * x26;
          Fp x33728 = Fp(x33727.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x33728;
          Fp x33729 = x33727 - x33728;
          Fp x33730 = x33729 * x26;
          Fp x33731 = Fp(x33730.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x33731;
          Fp x33732 = x33730 - x33731;
          Fp x33733 = x33732 * x26;
          Fp x33734 = Fp(x33733.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x33734;
          Fp x33735 = x33733 - x33734;
          Fp x33736 = x33735 * x26;
          Fp x33737 = Fp(x33736.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x33737;
          Fp x33738 = x33736 - x33737;
          Fp x33739 = x33738 * x26;
          Fp x33740 = Fp(x33739.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x33740;
          Fp x33741 = x33739 - x33740;
          Fp x33742 = x33741 * x26;
          Fp x33743 = Fp(x33742.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x33743;
          Fp x33744 = x33742 - x33743;
          Fp x33745 = x33744 * x26;
          Fp x33746 = Fp(x33745.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x33746;
          Fp x33747 = x33745 - x33746;
          Fp x33748 = x33747 * x26;
          Fp x33749 = Fp(x33748.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x33749;
        }
        Fp x33750 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x33751 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x33752 = x33751 * x1;
        Fp x33753 = x33750 + x33752;
        Fp x33754 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x33755 = x33754 * x3;
        Fp x33756 = x33753 + x33755;
        Fp x33757 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x33758 = x33757 * x6;
        Fp x33759 = x33756 + x33758;
        Fp x33760 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x33761 = x33760 * x11;
        Fp x33762 = x33759 + x33761;
        Fp x33763 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x33764 = x33763 * x27;
        Fp x33765 = x33762 + x33764;
        Fp x33766 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x33767 = x33766 * x12;
        Fp x33768 = x33765 + x33767;
        Fp x33769 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x33770 = x33769 * x28;
        Fp x33771 = x33768 + x33770;
        Fp x33772 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x33773 = x33772 * x13;
        Fp x33774 = x33771 + x33773;
        Fp x33775 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x33776 = x33775 * x29;
        Fp x33777 = x33774 + x33776;
        Fp x33778 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x33779 = x33778 * x14;
        Fp x33780 = x33777 + x33779;
        Fp x33781 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x33782 = x33781 * x30;
        Fp x33783 = x33780 + x33782;
        Fp x33784 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x33785 = x33784 * x15;
        Fp x33786 = x33783 + x33785;
        Fp x33787 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x33788 = x33787 * x31;
        Fp x33789 = x33786 + x33788;
        Fp x33790 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x33791 = x33790 * x16;
        Fp x33792 = x33789 + x33791;
        Fp x33793 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x33794 = x33793 * x32;
        Fp x33795 = x33792 + x33794;
        Fp x33796 = x33703 - x33795;
        Fp x33797 = x33796 * x33;
        args[2][107 * steps + cycle] = x33797;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x33798 = host_outs[0];
          Fp x33799 = host_outs[1];
          args[2][129 * steps + cycle] = x33798;
          args[2][130 * steps + cycle] = x33799;
        }
        Fp x33800 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x33801 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x33802 = Fp(x33800.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x33802;
          Fp x33803 = x33800 - x33802;
          Fp x33804 = x33803 * x26;
          Fp x33805 = Fp(x33804.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x33805;
          Fp x33806 = x33804 - x33805;
          Fp x33807 = x33806 * x26;
          Fp x33808 = Fp(x33807.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x33808;
          Fp x33809 = x33807 - x33808;
          Fp x33810 = x33809 * x26;
          Fp x33811 = Fp(x33810.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x33811;
          Fp x33812 = x33810 - x33811;
          Fp x33813 = x33812 * x26;
          Fp x33814 = Fp(x33813.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x33814;
          Fp x33815 = x33813 - x33814;
          Fp x33816 = x33815 * x26;
          Fp x33817 = Fp(x33816.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x33817;
          Fp x33818 = x33816 - x33817;
          Fp x33819 = x33818 * x26;
          Fp x33820 = Fp(x33819.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x33820;
          Fp x33821 = x33819 - x33820;
          Fp x33822 = x33821 * x26;
          Fp x33823 = Fp(x33822.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x33823;
          Fp x33824 = x33822 - x33823;
          Fp x33825 = x33824 * x26;
          Fp x33826 = Fp(x33825.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x33826;
          Fp x33827 = x33825 - x33826;
          Fp x33828 = x33827 * x26;
          Fp x33829 = Fp(x33828.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x33829;
          Fp x33830 = x33828 - x33829;
          Fp x33831 = x33830 * x26;
          Fp x33832 = Fp(x33831.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x33832;
          Fp x33833 = x33831 - x33832;
          Fp x33834 = x33833 * x26;
          Fp x33835 = Fp(x33834.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x33835;
          Fp x33836 = x33834 - x33835;
          Fp x33837 = x33836 * x26;
          Fp x33838 = Fp(x33837.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x33838;
          Fp x33839 = x33837 - x33838;
          Fp x33840 = x33839 * x26;
          Fp x33841 = Fp(x33840.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x33841;
          Fp x33842 = x33840 - x33841;
          Fp x33843 = x33842 * x26;
          Fp x33844 = Fp(x33843.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x33844;
          Fp x33845 = x33843 - x33844;
          Fp x33846 = x33845 * x26;
          Fp x33847 = Fp(x33846.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x33847;
        }
        Fp x33848 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x33849 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x33850 = x33849 * x1;
        Fp x33851 = x33848 + x33850;
        Fp x33852 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x33853 = x33852 * x3;
        Fp x33854 = x33851 + x33853;
        Fp x33855 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x33856 = x33855 * x6;
        Fp x33857 = x33854 + x33856;
        Fp x33858 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x33859 = x33858 * x11;
        Fp x33860 = x33857 + x33859;
        Fp x33861 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x33862 = x33861 * x27;
        Fp x33863 = x33860 + x33862;
        Fp x33864 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x33865 = x33864 * x12;
        Fp x33866 = x33863 + x33865;
        Fp x33867 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x33868 = x33867 * x28;
        Fp x33869 = x33866 + x33868;
        Fp x33870 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x33871 = x33870 * x13;
        Fp x33872 = x33869 + x33871;
        Fp x33873 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x33874 = x33873 * x29;
        Fp x33875 = x33872 + x33874;
        Fp x33876 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x33877 = x33876 * x14;
        Fp x33878 = x33875 + x33877;
        Fp x33879 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x33880 = x33879 * x30;
        Fp x33881 = x33878 + x33880;
        Fp x33882 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x33883 = x33882 * x15;
        Fp x33884 = x33881 + x33883;
        Fp x33885 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x33886 = x33885 * x31;
        Fp x33887 = x33884 + x33886;
        Fp x33888 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x33889 = x33888 * x16;
        Fp x33890 = x33887 + x33889;
        Fp x33891 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x33892 = x33891 * x32;
        Fp x33893 = x33890 + x33892;
        Fp x33894 = x33800 - x33893;
        Fp x33895 = x33894 * x33;
        if (x33895 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:76");
        {
          Fp x33896 = Fp(x33801.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x33896;
          Fp x33897 = x33801 - x33896;
          Fp x33898 = x33897 * x26;
          Fp x33899 = Fp(x33898.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x33899;
          Fp x33900 = x33898 - x33899;
          Fp x33901 = x33900 * x26;
          Fp x33902 = Fp(x33901.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x33902;
          Fp x33903 = x33901 - x33902;
          Fp x33904 = x33903 * x26;
          Fp x33905 = Fp(x33904.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x33905;
          Fp x33906 = x33904 - x33905;
          Fp x33907 = x33906 * x26;
          Fp x33908 = Fp(x33907.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x33908;
          Fp x33909 = x33907 - x33908;
          Fp x33910 = x33909 * x26;
          Fp x33911 = Fp(x33910.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x33911;
          Fp x33912 = x33910 - x33911;
          Fp x33913 = x33912 * x26;
          Fp x33914 = Fp(x33913.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x33914;
          Fp x33915 = x33913 - x33914;
          Fp x33916 = x33915 * x26;
          Fp x33917 = Fp(x33916.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x33917;
          Fp x33918 = x33916 - x33917;
          Fp x33919 = x33918 * x26;
          Fp x33920 = Fp(x33919.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x33920;
          Fp x33921 = x33919 - x33920;
          Fp x33922 = x33921 * x26;
          Fp x33923 = Fp(x33922.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x33923;
          Fp x33924 = x33922 - x33923;
          Fp x33925 = x33924 * x26;
          Fp x33926 = Fp(x33925.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x33926;
          Fp x33927 = x33925 - x33926;
          Fp x33928 = x33927 * x26;
          Fp x33929 = Fp(x33928.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x33929;
          Fp x33930 = x33928 - x33929;
          Fp x33931 = x33930 * x26;
          Fp x33932 = Fp(x33931.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x33932;
          Fp x33933 = x33931 - x33932;
          Fp x33934 = x33933 * x26;
          Fp x33935 = Fp(x33934.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x33935;
          Fp x33936 = x33934 - x33935;
          Fp x33937 = x33936 * x26;
          Fp x33938 = Fp(x33937.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x33938;
          Fp x33939 = x33937 - x33938;
          Fp x33940 = x33939 * x26;
          Fp x33941 = Fp(x33940.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x33941;
        }
        Fp x33942 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x33943 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x33944 = x33943 * x1;
        Fp x33945 = x33942 + x33944;
        Fp x33946 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x33947 = x33946 * x3;
        Fp x33948 = x33945 + x33947;
        Fp x33949 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x33950 = x33949 * x6;
        Fp x33951 = x33948 + x33950;
        Fp x33952 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x33953 = x33952 * x11;
        Fp x33954 = x33951 + x33953;
        Fp x33955 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x33956 = x33955 * x27;
        Fp x33957 = x33954 + x33956;
        Fp x33958 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x33959 = x33958 * x12;
        Fp x33960 = x33957 + x33959;
        Fp x33961 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x33962 = x33961 * x28;
        Fp x33963 = x33960 + x33962;
        Fp x33964 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x33965 = x33964 * x13;
        Fp x33966 = x33963 + x33965;
        Fp x33967 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x33968 = x33967 * x29;
        Fp x33969 = x33966 + x33968;
        Fp x33970 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x33971 = x33970 * x14;
        Fp x33972 = x33969 + x33971;
        Fp x33973 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x33974 = x33973 * x30;
        Fp x33975 = x33972 + x33974;
        Fp x33976 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x33977 = x33976 * x15;
        Fp x33978 = x33975 + x33977;
        Fp x33979 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x33980 = x33979 * x31;
        Fp x33981 = x33978 + x33980;
        Fp x33982 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x33983 = x33982 * x16;
        Fp x33984 = x33981 + x33983;
        Fp x33985 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x33986 = x33985 * x32;
        Fp x33987 = x33984 + x33986;
        Fp x33988 = x33801 - x33987;
        Fp x33989 = x33988 * x33;
        if (x33989 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:76");
        {
          Fp x33990 = (x33657 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x33990;
          Fp x33991 = x33657 - x71;
          Fp x33992 = (x33991 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x33992;
          Fp x33993 = x33657 - x1;
          Fp x33994 = (x33993 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x33994;
          Fp x33995 = x33657 - x2;
          Fp x33996 = (x33995 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x33996;
        }
        Fp x33997 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x33998 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x33999 = x33998 * x1;
        Fp x34000 = x33997 + x33999;
        Fp x34001 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x34002 = x34001 * x2;
        Fp x34003 = x34000 + x34002;
        Fp x34004 = x34003 - x33657;
        if (x34004 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x34005 = x33699 + x17;
        Fp x34006 = x34005 - x33893;
        Fp x34007 = x33795 + x35;
        Fp x34008 = x34007 - x33987;
        {
          Fp x34009 = Fp(x34006.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x34009;
          Fp x34010 = x34006 - x34009;
          Fp x34011 = x34010 * x26;
          Fp x34012 = Fp(x34011.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x34012;
          Fp x34013 = x34011 - x34012;
          Fp x34014 = x34013 * x26;
          Fp x34015 = Fp(x34014.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x34015;
          Fp x34016 = x34014 - x34015;
          Fp x34017 = x34016 * x26;
          Fp x34018 = Fp(x34017.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x34018;
          Fp x34019 = x34017 - x34018;
          Fp x34020 = x34019 * x26;
          Fp x34021 = Fp(x34020.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x34021;
          Fp x34022 = x34020 - x34021;
          Fp x34023 = x34022 * x26;
          Fp x34024 = Fp(x34023.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x34024;
          Fp x34025 = x34023 - x34024;
          Fp x34026 = x34025 * x26;
          Fp x34027 = Fp(x34026.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x34027;
          Fp x34028 = x34026 - x34027;
          Fp x34029 = x34028 * x26;
          Fp x34030 = Fp(x34029.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x34030;
          Fp x34031 = x34029 - x34030;
          Fp x34032 = x34031 * x26;
          Fp x34033 = Fp(x34032.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x34033;
          Fp x34034 = x34032 - x34033;
          Fp x34035 = x34034 * x26;
          Fp x34036 = Fp(x34035.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x34036;
          Fp x34037 = x34035 - x34036;
          Fp x34038 = x34037 * x26;
          Fp x34039 = Fp(x34038.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x34039;
          Fp x34040 = x34038 - x34039;
          Fp x34041 = x34040 * x26;
          Fp x34042 = Fp(x34041.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x34042;
          Fp x34043 = x34041 - x34042;
          Fp x34044 = x34043 * x26;
          Fp x34045 = Fp(x34044.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x34045;
          Fp x34046 = x34044 - x34045;
          Fp x34047 = x34046 * x26;
          Fp x34048 = Fp(x34047.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x34048;
          Fp x34049 = x34047 - x34048;
          Fp x34050 = x34049 * x26;
          Fp x34051 = Fp(x34050.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x34051;
          Fp x34052 = x34050 - x34051;
          Fp x34053 = x34052 * x26;
          Fp x34054 = Fp(x34053.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x34054;
        }
        Fp x34055 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x34056 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x34057 = x34056 * x1;
        Fp x34058 = x34055 + x34057;
        Fp x34059 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x34060 = x34059 * x3;
        Fp x34061 = x34058 + x34060;
        Fp x34062 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x34063 = x34062 * x6;
        Fp x34064 = x34061 + x34063;
        Fp x34065 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x34066 = x34065 * x11;
        Fp x34067 = x34064 + x34066;
        Fp x34068 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x34069 = x34068 * x27;
        Fp x34070 = x34067 + x34069;
        Fp x34071 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x34072 = x34071 * x12;
        Fp x34073 = x34070 + x34072;
        Fp x34074 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x34075 = x34074 * x28;
        Fp x34076 = x34073 + x34075;
        Fp x34077 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x34078 = x34077 * x13;
        Fp x34079 = x34076 + x34078;
        Fp x34080 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x34081 = x34080 * x29;
        Fp x34082 = x34079 + x34081;
        Fp x34083 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x34084 = x34083 * x14;
        Fp x34085 = x34082 + x34084;
        Fp x34086 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x34087 = x34086 * x30;
        Fp x34088 = x34085 + x34087;
        Fp x34089 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x34090 = x34089 * x15;
        Fp x34091 = x34088 + x34090;
        Fp x34092 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x34093 = x34092 * x31;
        Fp x34094 = x34091 + x34093;
        Fp x34095 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x34096 = x34095 * x16;
        Fp x34097 = x34094 + x34096;
        Fp x34098 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x34099 = x34098 * x32;
        Fp x34100 = x34097 + x34099;
        Fp x34101 = x34006 - x34100;
        Fp x34102 = x34101 * x33;
        args[2][108 * steps + cycle] = x34102;
        Fp x34103 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x34104 = x34008 + x34103;
        {
          Fp x34105 = Fp(x34104.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x34105;
          Fp x34106 = x34104 - x34105;
          Fp x34107 = x34106 * x26;
          Fp x34108 = Fp(x34107.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x34108;
          Fp x34109 = x34107 - x34108;
          Fp x34110 = x34109 * x26;
          Fp x34111 = Fp(x34110.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x34111;
          Fp x34112 = x34110 - x34111;
          Fp x34113 = x34112 * x26;
          Fp x34114 = Fp(x34113.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x34114;
          Fp x34115 = x34113 - x34114;
          Fp x34116 = x34115 * x26;
          Fp x34117 = Fp(x34116.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x34117;
          Fp x34118 = x34116 - x34117;
          Fp x34119 = x34118 * x26;
          Fp x34120 = Fp(x34119.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x34120;
          Fp x34121 = x34119 - x34120;
          Fp x34122 = x34121 * x26;
          Fp x34123 = Fp(x34122.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x34123;
          Fp x34124 = x34122 - x34123;
          Fp x34125 = x34124 * x26;
          Fp x34126 = Fp(x34125.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x34126;
          Fp x34127 = x34125 - x34126;
          Fp x34128 = x34127 * x26;
          Fp x34129 = Fp(x34128.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x34129;
          Fp x34130 = x34128 - x34129;
          Fp x34131 = x34130 * x26;
          Fp x34132 = Fp(x34131.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x34132;
          Fp x34133 = x34131 - x34132;
          Fp x34134 = x34133 * x26;
          Fp x34135 = Fp(x34134.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x34135;
          Fp x34136 = x34134 - x34135;
          Fp x34137 = x34136 * x26;
          Fp x34138 = Fp(x34137.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x34138;
          Fp x34139 = x34137 - x34138;
          Fp x34140 = x34139 * x26;
          Fp x34141 = Fp(x34140.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x34141;
          Fp x34142 = x34140 - x34141;
          Fp x34143 = x34142 * x26;
          Fp x34144 = Fp(x34143.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x34144;
          Fp x34145 = x34143 - x34144;
          Fp x34146 = x34145 * x26;
          Fp x34147 = Fp(x34146.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x34147;
          Fp x34148 = x34146 - x34147;
          Fp x34149 = x34148 * x26;
          Fp x34150 = Fp(x34149.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x34150;
        }
        Fp x34151 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x34152 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x34153 = x34152 * x1;
        Fp x34154 = x34151 + x34153;
        Fp x34155 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x34156 = x34155 * x3;
        Fp x34157 = x34154 + x34156;
        Fp x34158 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x34159 = x34158 * x6;
        Fp x34160 = x34157 + x34159;
        Fp x34161 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x34162 = x34161 * x11;
        Fp x34163 = x34160 + x34162;
        Fp x34164 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x34165 = x34164 * x27;
        Fp x34166 = x34163 + x34165;
        Fp x34167 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x34168 = x34167 * x12;
        Fp x34169 = x34166 + x34168;
        Fp x34170 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x34171 = x34170 * x28;
        Fp x34172 = x34169 + x34171;
        Fp x34173 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x34174 = x34173 * x13;
        Fp x34175 = x34172 + x34174;
        Fp x34176 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x34177 = x34176 * x29;
        Fp x34178 = x34175 + x34177;
        Fp x34179 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x34180 = x34179 * x14;
        Fp x34181 = x34178 + x34180;
        Fp x34182 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x34183 = x34182 * x30;
        Fp x34184 = x34181 + x34183;
        Fp x34185 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x34186 = x34185 * x15;
        Fp x34187 = x34184 + x34186;
        Fp x34188 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x34189 = x34188 * x31;
        Fp x34190 = x34187 + x34189;
        Fp x34191 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x34192 = x34191 * x16;
        Fp x34193 = x34190 + x34192;
        Fp x34194 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x34195 = x34194 * x32;
        Fp x34196 = x34193 + x34195;
        Fp x34197 = x34104 - x34196;
        Fp x34198 = x34197 * x33;
        args[2][109 * steps + cycle] = x34198;
        {
          {
            Fp x34199 = (x34100 == 0) ? Fp(1) : Fp(0);
            Fp x34200 = x71 - x34199;
            args[2][114 * steps + cycle] = x34200;
            Fp x34201 = inv(x34100);
            args[2][115 * steps + cycle] = x34201;
          }
          Fp x34202 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x34203 = x34100 * x34202;
          Fp x34204 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x34205 = x34203 - x34204;
          if (x34205 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x34206 = x71 - x34204;
          Fp x34207 = x34206 * x34100;
          if (x34207 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x34208 = (x34196 == 0) ? Fp(1) : Fp(0);
            Fp x34209 = x71 - x34208;
            args[2][116 * steps + cycle] = x34209;
            Fp x34210 = inv(x34196);
            args[2][117 * steps + cycle] = x34210;
          }
          Fp x34211 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x34212 = x34196 * x34211;
          Fp x34213 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x34214 = x34212 - x34213;
          if (x34214 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x34215 = x71 - x34213;
          Fp x34216 = x34215 * x34196;
          if (x34216 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x34217 = x34206 * x34215;
          Fp x34218 = x71 - x34217;
          args[2][111 * steps + cycle] = x34218;
          Fp x34219 = x71 - x33985;
          Fp x34220 = x33793 * x34219;
          Fp x34221 = x71 - x34194;
          Fp x34222 = x34220 * x34221;
          Fp x34223 = x71 - x33793;
          Fp x34224 = x34223 * x33985;
          Fp x34225 = x34224 * x34194;
          Fp x34226 = x34222 + x34225;
          args[2][112 * steps + cycle] = x34226;
          Fp x34227 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x34228 = x34227 + x34194;
          Fp x34229 = x34227 * x1;
          Fp x34230 = x34229 * x34194;
          Fp x34231 = x34228 - x34230;
          args[2][113 * steps + cycle] = x34231;
        }
        Fp x34232 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x34233 = x71 - x34232;
        args[2][100 * steps + cycle] = x34233;
        args[2][101 * steps + cycle] = x70;
        args[2][102 * steps + cycle] = x70;
        args[2][103 * steps + cycle] = x70;
        Fp x34234 = args[2][100 * steps + ((cycle - 0) & mask)];
        Fp x34235 = x71 - x34234;
        Fp x34236 = x34235 * x31645;
        Fp x34237 = x34235 * x31646;
        Fp x34238 = x31668 + x34236;
        Fp x34239 = x31690 + x34237;
        Fp x34240 = x71 - x34235;
        Fp x34241 = x34240 * x3;
        Fp x34242 = x34238 + x34241;
        args[2][104 * steps + cycle] = x34242;
        args[2][105 * steps + cycle] = x34239;
        Fp x34243 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x34244 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x34245 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x34246 = args[2][101 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x31690;
        host_args[2] = x31668;
        host_args[3] = x33795;
        host_args[4] = x33699;
        host_args[5] = x33987;
        host_args[6] = x33893;
        host_args[7] = x34196;
        host_args[8] = x34100;
        host_args[9] = x34243;
        host_args[10] = x34232;
        host_args[11] = x34244;
        host_args[12] = x34245;
        host_args[13] = x34246;
        host_args[14] = x34234;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x34247 = args[2][76 * steps + ((cycle - 1) & mask)];
      if (x34247 != 0) {
        {
          Fp x34248 = Fp(x31643.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x34248;
          Fp x34249 = x31643 - x34248;
          Fp x34250 = x34249 * x26;
          Fp x34251 = Fp(x34250.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x34251;
          Fp x34252 = x34250 - x34251;
          Fp x34253 = x34252 * x26;
          Fp x34254 = Fp(x34253.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x34254;
          Fp x34255 = x34253 - x34254;
          Fp x34256 = x34255 * x26;
          Fp x34257 = Fp(x34256.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x34257;
          Fp x34258 = x34256 - x34257;
          Fp x34259 = x34258 * x26;
          Fp x34260 = Fp(x34259.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x34260;
          Fp x34261 = x34259 - x34260;
          Fp x34262 = x34261 * x26;
          Fp x34263 = Fp(x34262.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x34263;
          Fp x34264 = x34262 - x34263;
          Fp x34265 = x34264 * x26;
          Fp x34266 = Fp(x34265.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x34266;
          Fp x34267 = x34265 - x34266;
          Fp x34268 = x34267 * x26;
          Fp x34269 = Fp(x34268.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x34269;
          Fp x34270 = x34268 - x34269;
          Fp x34271 = x34270 * x26;
          Fp x34272 = Fp(x34271.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x34272;
          Fp x34273 = x34271 - x34272;
          Fp x34274 = x34273 * x26;
          Fp x34275 = Fp(x34274.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x34275;
          Fp x34276 = x34274 - x34275;
          Fp x34277 = x34276 * x26;
          Fp x34278 = Fp(x34277.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x34278;
          Fp x34279 = x34277 - x34278;
          Fp x34280 = x34279 * x26;
          Fp x34281 = Fp(x34280.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x34281;
          Fp x34282 = x34280 - x34281;
          Fp x34283 = x34282 * x26;
          Fp x34284 = Fp(x34283.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x34284;
          Fp x34285 = x34283 - x34284;
          Fp x34286 = x34285 * x26;
          Fp x34287 = Fp(x34286.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x34287;
          Fp x34288 = x34286 - x34287;
          Fp x34289 = x34288 * x26;
          Fp x34290 = Fp(x34289.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x34290;
          Fp x34291 = x34289 - x34290;
          Fp x34292 = x34291 * x26;
          Fp x34293 = Fp(x34292.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x34293;
        }
        Fp x34294 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x34295 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x34296 = x34295 * x1;
        Fp x34297 = x34294 + x34296;
        Fp x34298 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x34299 = x34298 * x3;
        Fp x34300 = x34297 + x34299;
        Fp x34301 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x34302 = x34301 * x6;
        Fp x34303 = x34300 + x34302;
        Fp x34304 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x34305 = x34304 * x11;
        Fp x34306 = x34303 + x34305;
        Fp x34307 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x34308 = x34307 * x27;
        Fp x34309 = x34306 + x34308;
        Fp x34310 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x34311 = x34310 * x12;
        Fp x34312 = x34309 + x34311;
        Fp x34313 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x34314 = x34313 * x28;
        Fp x34315 = x34312 + x34314;
        Fp x34316 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x34317 = x34316 * x13;
        Fp x34318 = x34315 + x34317;
        Fp x34319 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x34320 = x34319 * x29;
        Fp x34321 = x34318 + x34320;
        Fp x34322 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x34323 = x34322 * x14;
        Fp x34324 = x34321 + x34323;
        Fp x34325 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x34326 = x34325 * x30;
        Fp x34327 = x34324 + x34326;
        Fp x34328 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x34329 = x34328 * x15;
        Fp x34330 = x34327 + x34329;
        Fp x34331 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x34332 = x34331 * x31;
        Fp x34333 = x34330 + x34332;
        Fp x34334 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x34335 = x34334 * x16;
        Fp x34336 = x34333 + x34335;
        Fp x34337 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x34338 = x34337 * x32;
        Fp x34339 = x34336 + x34338;
        Fp x34340 = x31643 - x34339;
        Fp x34341 = x34340 * x33;
        args[2][106 * steps + cycle] = x34341;
        Fp x34342 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x34343 = x31644 + x34342;
        {
          Fp x34344 = Fp(x34343.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x34344;
          Fp x34345 = x34343 - x34344;
          Fp x34346 = x34345 * x26;
          Fp x34347 = Fp(x34346.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x34347;
          Fp x34348 = x34346 - x34347;
          Fp x34349 = x34348 * x26;
          Fp x34350 = Fp(x34349.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x34350;
          Fp x34351 = x34349 - x34350;
          Fp x34352 = x34351 * x26;
          Fp x34353 = Fp(x34352.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x34353;
          Fp x34354 = x34352 - x34353;
          Fp x34355 = x34354 * x26;
          Fp x34356 = Fp(x34355.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x34356;
          Fp x34357 = x34355 - x34356;
          Fp x34358 = x34357 * x26;
          Fp x34359 = Fp(x34358.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x34359;
          Fp x34360 = x34358 - x34359;
          Fp x34361 = x34360 * x26;
          Fp x34362 = Fp(x34361.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x34362;
          Fp x34363 = x34361 - x34362;
          Fp x34364 = x34363 * x26;
          Fp x34365 = Fp(x34364.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x34365;
          Fp x34366 = x34364 - x34365;
          Fp x34367 = x34366 * x26;
          Fp x34368 = Fp(x34367.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x34368;
          Fp x34369 = x34367 - x34368;
          Fp x34370 = x34369 * x26;
          Fp x34371 = Fp(x34370.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x34371;
          Fp x34372 = x34370 - x34371;
          Fp x34373 = x34372 * x26;
          Fp x34374 = Fp(x34373.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x34374;
          Fp x34375 = x34373 - x34374;
          Fp x34376 = x34375 * x26;
          Fp x34377 = Fp(x34376.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x34377;
          Fp x34378 = x34376 - x34377;
          Fp x34379 = x34378 * x26;
          Fp x34380 = Fp(x34379.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x34380;
          Fp x34381 = x34379 - x34380;
          Fp x34382 = x34381 * x26;
          Fp x34383 = Fp(x34382.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x34383;
          Fp x34384 = x34382 - x34383;
          Fp x34385 = x34384 * x26;
          Fp x34386 = Fp(x34385.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x34386;
          Fp x34387 = x34385 - x34386;
          Fp x34388 = x34387 * x26;
          Fp x34389 = Fp(x34388.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x34389;
        }
        Fp x34390 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x34391 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x34392 = x34391 * x1;
        Fp x34393 = x34390 + x34392;
        Fp x34394 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x34395 = x34394 * x3;
        Fp x34396 = x34393 + x34395;
        Fp x34397 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x34398 = x34397 * x6;
        Fp x34399 = x34396 + x34398;
        Fp x34400 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x34401 = x34400 * x11;
        Fp x34402 = x34399 + x34401;
        Fp x34403 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x34404 = x34403 * x27;
        Fp x34405 = x34402 + x34404;
        Fp x34406 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x34407 = x34406 * x12;
        Fp x34408 = x34405 + x34407;
        Fp x34409 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x34410 = x34409 * x28;
        Fp x34411 = x34408 + x34410;
        Fp x34412 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x34413 = x34412 * x13;
        Fp x34414 = x34411 + x34413;
        Fp x34415 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x34416 = x34415 * x29;
        Fp x34417 = x34414 + x34416;
        Fp x34418 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x34419 = x34418 * x14;
        Fp x34420 = x34417 + x34419;
        Fp x34421 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x34422 = x34421 * x30;
        Fp x34423 = x34420 + x34422;
        Fp x34424 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x34425 = x34424 * x15;
        Fp x34426 = x34423 + x34425;
        Fp x34427 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x34428 = x34427 * x31;
        Fp x34429 = x34426 + x34428;
        Fp x34430 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x34431 = x34430 * x16;
        Fp x34432 = x34429 + x34431;
        Fp x34433 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x34434 = x34433 * x32;
        Fp x34435 = x34432 + x34434;
        Fp x34436 = x34343 - x34435;
        Fp x34437 = x34436 * x33;
        args[2][107 * steps + cycle] = x34437;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x34438 = host_outs[0];
          Fp x34439 = host_outs[1];
          args[2][129 * steps + cycle] = x34438;
          args[2][130 * steps + cycle] = x34439;
        }
        Fp x34440 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x34441 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x34442 = Fp(x34440.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x34442;
          Fp x34443 = x34440 - x34442;
          Fp x34444 = x34443 * x26;
          Fp x34445 = Fp(x34444.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x34445;
          Fp x34446 = x34444 - x34445;
          Fp x34447 = x34446 * x26;
          Fp x34448 = Fp(x34447.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x34448;
          Fp x34449 = x34447 - x34448;
          Fp x34450 = x34449 * x26;
          Fp x34451 = Fp(x34450.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x34451;
          Fp x34452 = x34450 - x34451;
          Fp x34453 = x34452 * x26;
          Fp x34454 = Fp(x34453.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x34454;
          Fp x34455 = x34453 - x34454;
          Fp x34456 = x34455 * x26;
          Fp x34457 = Fp(x34456.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x34457;
          Fp x34458 = x34456 - x34457;
          Fp x34459 = x34458 * x26;
          Fp x34460 = Fp(x34459.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x34460;
          Fp x34461 = x34459 - x34460;
          Fp x34462 = x34461 * x26;
          Fp x34463 = Fp(x34462.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x34463;
          Fp x34464 = x34462 - x34463;
          Fp x34465 = x34464 * x26;
          Fp x34466 = Fp(x34465.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x34466;
          Fp x34467 = x34465 - x34466;
          Fp x34468 = x34467 * x26;
          Fp x34469 = Fp(x34468.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x34469;
          Fp x34470 = x34468 - x34469;
          Fp x34471 = x34470 * x26;
          Fp x34472 = Fp(x34471.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x34472;
          Fp x34473 = x34471 - x34472;
          Fp x34474 = x34473 * x26;
          Fp x34475 = Fp(x34474.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x34475;
          Fp x34476 = x34474 - x34475;
          Fp x34477 = x34476 * x26;
          Fp x34478 = Fp(x34477.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x34478;
          Fp x34479 = x34477 - x34478;
          Fp x34480 = x34479 * x26;
          Fp x34481 = Fp(x34480.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x34481;
          Fp x34482 = x34480 - x34481;
          Fp x34483 = x34482 * x26;
          Fp x34484 = Fp(x34483.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x34484;
          Fp x34485 = x34483 - x34484;
          Fp x34486 = x34485 * x26;
          Fp x34487 = Fp(x34486.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x34487;
        }
        Fp x34488 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x34489 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x34490 = x34489 * x1;
        Fp x34491 = x34488 + x34490;
        Fp x34492 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x34493 = x34492 * x3;
        Fp x34494 = x34491 + x34493;
        Fp x34495 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x34496 = x34495 * x6;
        Fp x34497 = x34494 + x34496;
        Fp x34498 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x34499 = x34498 * x11;
        Fp x34500 = x34497 + x34499;
        Fp x34501 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x34502 = x34501 * x27;
        Fp x34503 = x34500 + x34502;
        Fp x34504 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x34505 = x34504 * x12;
        Fp x34506 = x34503 + x34505;
        Fp x34507 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x34508 = x34507 * x28;
        Fp x34509 = x34506 + x34508;
        Fp x34510 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x34511 = x34510 * x13;
        Fp x34512 = x34509 + x34511;
        Fp x34513 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x34514 = x34513 * x29;
        Fp x34515 = x34512 + x34514;
        Fp x34516 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x34517 = x34516 * x14;
        Fp x34518 = x34515 + x34517;
        Fp x34519 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x34520 = x34519 * x30;
        Fp x34521 = x34518 + x34520;
        Fp x34522 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x34523 = x34522 * x15;
        Fp x34524 = x34521 + x34523;
        Fp x34525 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x34526 = x34525 * x31;
        Fp x34527 = x34524 + x34526;
        Fp x34528 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x34529 = x34528 * x16;
        Fp x34530 = x34527 + x34529;
        Fp x34531 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x34532 = x34531 * x32;
        Fp x34533 = x34530 + x34532;
        Fp x34534 = x34440 - x34533;
        Fp x34535 = x34534 * x33;
        if (x34535 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:77");
        {
          Fp x34536 = Fp(x34441.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x34536;
          Fp x34537 = x34441 - x34536;
          Fp x34538 = x34537 * x26;
          Fp x34539 = Fp(x34538.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x34539;
          Fp x34540 = x34538 - x34539;
          Fp x34541 = x34540 * x26;
          Fp x34542 = Fp(x34541.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x34542;
          Fp x34543 = x34541 - x34542;
          Fp x34544 = x34543 * x26;
          Fp x34545 = Fp(x34544.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x34545;
          Fp x34546 = x34544 - x34545;
          Fp x34547 = x34546 * x26;
          Fp x34548 = Fp(x34547.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x34548;
          Fp x34549 = x34547 - x34548;
          Fp x34550 = x34549 * x26;
          Fp x34551 = Fp(x34550.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x34551;
          Fp x34552 = x34550 - x34551;
          Fp x34553 = x34552 * x26;
          Fp x34554 = Fp(x34553.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x34554;
          Fp x34555 = x34553 - x34554;
          Fp x34556 = x34555 * x26;
          Fp x34557 = Fp(x34556.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x34557;
          Fp x34558 = x34556 - x34557;
          Fp x34559 = x34558 * x26;
          Fp x34560 = Fp(x34559.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x34560;
          Fp x34561 = x34559 - x34560;
          Fp x34562 = x34561 * x26;
          Fp x34563 = Fp(x34562.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x34563;
          Fp x34564 = x34562 - x34563;
          Fp x34565 = x34564 * x26;
          Fp x34566 = Fp(x34565.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x34566;
          Fp x34567 = x34565 - x34566;
          Fp x34568 = x34567 * x26;
          Fp x34569 = Fp(x34568.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x34569;
          Fp x34570 = x34568 - x34569;
          Fp x34571 = x34570 * x26;
          Fp x34572 = Fp(x34571.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x34572;
          Fp x34573 = x34571 - x34572;
          Fp x34574 = x34573 * x26;
          Fp x34575 = Fp(x34574.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x34575;
          Fp x34576 = x34574 - x34575;
          Fp x34577 = x34576 * x26;
          Fp x34578 = Fp(x34577.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x34578;
          Fp x34579 = x34577 - x34578;
          Fp x34580 = x34579 * x26;
          Fp x34581 = Fp(x34580.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x34581;
        }
        Fp x34582 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x34583 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x34584 = x34583 * x1;
        Fp x34585 = x34582 + x34584;
        Fp x34586 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x34587 = x34586 * x3;
        Fp x34588 = x34585 + x34587;
        Fp x34589 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x34590 = x34589 * x6;
        Fp x34591 = x34588 + x34590;
        Fp x34592 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x34593 = x34592 * x11;
        Fp x34594 = x34591 + x34593;
        Fp x34595 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x34596 = x34595 * x27;
        Fp x34597 = x34594 + x34596;
        Fp x34598 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x34599 = x34598 * x12;
        Fp x34600 = x34597 + x34599;
        Fp x34601 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x34602 = x34601 * x28;
        Fp x34603 = x34600 + x34602;
        Fp x34604 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x34605 = x34604 * x13;
        Fp x34606 = x34603 + x34605;
        Fp x34607 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x34608 = x34607 * x29;
        Fp x34609 = x34606 + x34608;
        Fp x34610 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x34611 = x34610 * x14;
        Fp x34612 = x34609 + x34611;
        Fp x34613 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x34614 = x34613 * x30;
        Fp x34615 = x34612 + x34614;
        Fp x34616 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x34617 = x34616 * x15;
        Fp x34618 = x34615 + x34617;
        Fp x34619 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x34620 = x34619 * x31;
        Fp x34621 = x34618 + x34620;
        Fp x34622 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x34623 = x34622 * x16;
        Fp x34624 = x34621 + x34623;
        Fp x34625 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x34626 = x34625 * x32;
        Fp x34627 = x34624 + x34626;
        Fp x34628 = x34441 - x34627;
        Fp x34629 = x34628 * x33;
        if (x34629 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:77");
        {
          Fp x34630 = (x34297 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x34630;
          Fp x34631 = x34297 - x71;
          Fp x34632 = (x34631 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x34632;
          Fp x34633 = x34297 - x1;
          Fp x34634 = (x34633 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x34634;
          Fp x34635 = x34297 - x2;
          Fp x34636 = (x34635 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x34636;
        }
        Fp x34637 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x34638 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x34639 = x34638 * x1;
        Fp x34640 = x34637 + x34639;
        Fp x34641 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x34642 = x34641 * x2;
        Fp x34643 = x34640 + x34642;
        Fp x34644 = x34643 - x34297;
        if (x34644 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x34645 = x31668 + x3;
        {
          Fp x34646 = Fp(x34645.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x34646;
          Fp x34647 = x34645 - x34646;
          Fp x34648 = x34647 * x26;
          Fp x34649 = Fp(x34648.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x34649;
          Fp x34650 = x34648 - x34649;
          Fp x34651 = x34650 * x26;
          Fp x34652 = Fp(x34651.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x34652;
          Fp x34653 = x34651 - x34652;
          Fp x34654 = x34653 * x26;
          Fp x34655 = Fp(x34654.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x34655;
          Fp x34656 = x34654 - x34655;
          Fp x34657 = x34656 * x26;
          Fp x34658 = Fp(x34657.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x34658;
          Fp x34659 = x34657 - x34658;
          Fp x34660 = x34659 * x26;
          Fp x34661 = Fp(x34660.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x34661;
          Fp x34662 = x34660 - x34661;
          Fp x34663 = x34662 * x26;
          Fp x34664 = Fp(x34663.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x34664;
          Fp x34665 = x34663 - x34664;
          Fp x34666 = x34665 * x26;
          Fp x34667 = Fp(x34666.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x34667;
          Fp x34668 = x34666 - x34667;
          Fp x34669 = x34668 * x26;
          Fp x34670 = Fp(x34669.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x34670;
          Fp x34671 = x34669 - x34670;
          Fp x34672 = x34671 * x26;
          Fp x34673 = Fp(x34672.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x34673;
          Fp x34674 = x34672 - x34673;
          Fp x34675 = x34674 * x26;
          Fp x34676 = Fp(x34675.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x34676;
          Fp x34677 = x34675 - x34676;
          Fp x34678 = x34677 * x26;
          Fp x34679 = Fp(x34678.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x34679;
          Fp x34680 = x34678 - x34679;
          Fp x34681 = x34680 * x26;
          Fp x34682 = Fp(x34681.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x34682;
          Fp x34683 = x34681 - x34682;
          Fp x34684 = x34683 * x26;
          Fp x34685 = Fp(x34684.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x34685;
          Fp x34686 = x34684 - x34685;
          Fp x34687 = x34686 * x26;
          Fp x34688 = Fp(x34687.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x34688;
          Fp x34689 = x34687 - x34688;
          Fp x34690 = x34689 * x26;
          Fp x34691 = Fp(x34690.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x34691;
        }
        Fp x34692 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x34693 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x34694 = x34693 * x1;
        Fp x34695 = x34692 + x34694;
        Fp x34696 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x34697 = x34696 * x3;
        Fp x34698 = x34695 + x34697;
        Fp x34699 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x34700 = x34699 * x6;
        Fp x34701 = x34698 + x34700;
        Fp x34702 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x34703 = x34702 * x11;
        Fp x34704 = x34701 + x34703;
        Fp x34705 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x34706 = x34705 * x27;
        Fp x34707 = x34704 + x34706;
        Fp x34708 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x34709 = x34708 * x12;
        Fp x34710 = x34707 + x34709;
        Fp x34711 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x34712 = x34711 * x28;
        Fp x34713 = x34710 + x34712;
        Fp x34714 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x34715 = x34714 * x13;
        Fp x34716 = x34713 + x34715;
        Fp x34717 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x34718 = x34717 * x29;
        Fp x34719 = x34716 + x34718;
        Fp x34720 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x34721 = x34720 * x14;
        Fp x34722 = x34719 + x34721;
        Fp x34723 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x34724 = x34723 * x30;
        Fp x34725 = x34722 + x34724;
        Fp x34726 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x34727 = x34726 * x15;
        Fp x34728 = x34725 + x34727;
        Fp x34729 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x34730 = x34729 * x31;
        Fp x34731 = x34728 + x34730;
        Fp x34732 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x34733 = x34732 * x16;
        Fp x34734 = x34731 + x34733;
        Fp x34735 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x34736 = x34735 * x32;
        Fp x34737 = x34734 + x34736;
        Fp x34738 = x34645 - x34737;
        Fp x34739 = x34738 * x33;
        args[2][108 * steps + cycle] = x34739;
        Fp x34740 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x34741 = x31690 + x34740;
        {
          Fp x34742 = Fp(x34741.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x34742;
          Fp x34743 = x34741 - x34742;
          Fp x34744 = x34743 * x26;
          Fp x34745 = Fp(x34744.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x34745;
          Fp x34746 = x34744 - x34745;
          Fp x34747 = x34746 * x26;
          Fp x34748 = Fp(x34747.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x34748;
          Fp x34749 = x34747 - x34748;
          Fp x34750 = x34749 * x26;
          Fp x34751 = Fp(x34750.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x34751;
          Fp x34752 = x34750 - x34751;
          Fp x34753 = x34752 * x26;
          Fp x34754 = Fp(x34753.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x34754;
          Fp x34755 = x34753 - x34754;
          Fp x34756 = x34755 * x26;
          Fp x34757 = Fp(x34756.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x34757;
          Fp x34758 = x34756 - x34757;
          Fp x34759 = x34758 * x26;
          Fp x34760 = Fp(x34759.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x34760;
          Fp x34761 = x34759 - x34760;
          Fp x34762 = x34761 * x26;
          Fp x34763 = Fp(x34762.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x34763;
          Fp x34764 = x34762 - x34763;
          Fp x34765 = x34764 * x26;
          Fp x34766 = Fp(x34765.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x34766;
          Fp x34767 = x34765 - x34766;
          Fp x34768 = x34767 * x26;
          Fp x34769 = Fp(x34768.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x34769;
          Fp x34770 = x34768 - x34769;
          Fp x34771 = x34770 * x26;
          Fp x34772 = Fp(x34771.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x34772;
          Fp x34773 = x34771 - x34772;
          Fp x34774 = x34773 * x26;
          Fp x34775 = Fp(x34774.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x34775;
          Fp x34776 = x34774 - x34775;
          Fp x34777 = x34776 * x26;
          Fp x34778 = Fp(x34777.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x34778;
          Fp x34779 = x34777 - x34778;
          Fp x34780 = x34779 * x26;
          Fp x34781 = Fp(x34780.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x34781;
          Fp x34782 = x34780 - x34781;
          Fp x34783 = x34782 * x26;
          Fp x34784 = Fp(x34783.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x34784;
          Fp x34785 = x34783 - x34784;
          Fp x34786 = x34785 * x26;
          Fp x34787 = Fp(x34786.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x34787;
        }
        Fp x34788 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x34789 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x34790 = x34789 * x1;
        Fp x34791 = x34788 + x34790;
        Fp x34792 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x34793 = x34792 * x3;
        Fp x34794 = x34791 + x34793;
        Fp x34795 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x34796 = x34795 * x6;
        Fp x34797 = x34794 + x34796;
        Fp x34798 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x34799 = x34798 * x11;
        Fp x34800 = x34797 + x34799;
        Fp x34801 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x34802 = x34801 * x27;
        Fp x34803 = x34800 + x34802;
        Fp x34804 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x34805 = x34804 * x12;
        Fp x34806 = x34803 + x34805;
        Fp x34807 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x34808 = x34807 * x28;
        Fp x34809 = x34806 + x34808;
        Fp x34810 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x34811 = x34810 * x13;
        Fp x34812 = x34809 + x34811;
        Fp x34813 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x34814 = x34813 * x29;
        Fp x34815 = x34812 + x34814;
        Fp x34816 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x34817 = x34816 * x14;
        Fp x34818 = x34815 + x34817;
        Fp x34819 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x34820 = x34819 * x30;
        Fp x34821 = x34818 + x34820;
        Fp x34822 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x34823 = x34822 * x15;
        Fp x34824 = x34821 + x34823;
        Fp x34825 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x34826 = x34825 * x31;
        Fp x34827 = x34824 + x34826;
        Fp x34828 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x34829 = x34828 * x16;
        Fp x34830 = x34827 + x34829;
        Fp x34831 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x34832 = x34831 * x32;
        Fp x34833 = x34830 + x34832;
        Fp x34834 = x34741 - x34833;
        Fp x34835 = x34834 * x33;
        args[2][109 * steps + cycle] = x34835;
        {
          {
            Fp x34836 = (x34737 == 0) ? Fp(1) : Fp(0);
            Fp x34837 = x71 - x34836;
            args[2][114 * steps + cycle] = x34837;
            Fp x34838 = inv(x34737);
            args[2][115 * steps + cycle] = x34838;
          }
          Fp x34839 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x34840 = x34737 * x34839;
          Fp x34841 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x34842 = x34840 - x34841;
          if (x34842 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x34843 = x71 - x34841;
          Fp x34844 = x34843 * x34737;
          if (x34844 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x34845 = (x34833 == 0) ? Fp(1) : Fp(0);
            Fp x34846 = x71 - x34845;
            args[2][116 * steps + cycle] = x34846;
            Fp x34847 = inv(x34833);
            args[2][117 * steps + cycle] = x34847;
          }
          Fp x34848 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x34849 = x34833 * x34848;
          Fp x34850 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x34851 = x34849 - x34850;
          if (x34851 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x34852 = x71 - x34850;
          Fp x34853 = x34852 * x34833;
          if (x34853 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x34854 = x34843 * x34852;
          Fp x34855 = x71 - x34854;
          args[2][111 * steps + cycle] = x34855;
          Fp x34856 = x71 - x34625;
          Fp x34857 = x34433 * x34856;
          Fp x34858 = x71 - x34831;
          Fp x34859 = x34857 * x34858;
          Fp x34860 = x71 - x34433;
          Fp x34861 = x34860 * x34625;
          Fp x34862 = x34861 * x34831;
          Fp x34863 = x34859 + x34862;
          args[2][112 * steps + cycle] = x34863;
          Fp x34864 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x34865 = x34864 + x34831;
          Fp x34866 = x34864 * x1;
          Fp x34867 = x34866 * x34831;
          Fp x34868 = x34865 - x34867;
          args[2][113 * steps + cycle] = x34868;
        }
        args[2][100 * steps + cycle] = x34737;
        args[2][101 * steps + cycle] = x34833;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x34869 = x31668 + x31645;
        Fp x34870 = x31690 + x31646;
        args[2][104 * steps + cycle] = x34869;
        args[2][105 * steps + cycle] = x34870;
        Fp x34871 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x34872 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x34873 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x34874 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x34875 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x34876 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x31690;
        host_args[2] = x31668;
        host_args[3] = x34435;
        host_args[4] = x34339;
        host_args[5] = x34627;
        host_args[6] = x34533;
        host_args[7] = x34833;
        host_args[8] = x34737;
        host_args[9] = x34871;
        host_args[10] = x34872;
        host_args[11] = x34873;
        host_args[12] = x34874;
        host_args[13] = x34875;
        host_args[14] = x34876;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x34877 = args[2][77 * steps + ((cycle - 1) & mask)];
      if (x34877 != 0) {
        {
          Fp x34878 = Fp(x31643.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x34878;
          Fp x34879 = x31643 - x34878;
          Fp x34880 = x34879 * x26;
          Fp x34881 = Fp(x34880.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x34881;
          Fp x34882 = x34880 - x34881;
          Fp x34883 = x34882 * x26;
          Fp x34884 = Fp(x34883.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x34884;
          Fp x34885 = x34883 - x34884;
          Fp x34886 = x34885 * x26;
          Fp x34887 = Fp(x34886.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x34887;
          Fp x34888 = x34886 - x34887;
          Fp x34889 = x34888 * x26;
          Fp x34890 = Fp(x34889.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x34890;
          Fp x34891 = x34889 - x34890;
          Fp x34892 = x34891 * x26;
          Fp x34893 = Fp(x34892.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x34893;
          Fp x34894 = x34892 - x34893;
          Fp x34895 = x34894 * x26;
          Fp x34896 = Fp(x34895.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x34896;
          Fp x34897 = x34895 - x34896;
          Fp x34898 = x34897 * x26;
          Fp x34899 = Fp(x34898.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x34899;
          Fp x34900 = x34898 - x34899;
          Fp x34901 = x34900 * x26;
          Fp x34902 = Fp(x34901.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x34902;
          Fp x34903 = x34901 - x34902;
          Fp x34904 = x34903 * x26;
          Fp x34905 = Fp(x34904.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x34905;
          Fp x34906 = x34904 - x34905;
          Fp x34907 = x34906 * x26;
          Fp x34908 = Fp(x34907.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x34908;
          Fp x34909 = x34907 - x34908;
          Fp x34910 = x34909 * x26;
          Fp x34911 = Fp(x34910.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x34911;
          Fp x34912 = x34910 - x34911;
          Fp x34913 = x34912 * x26;
          Fp x34914 = Fp(x34913.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x34914;
          Fp x34915 = x34913 - x34914;
          Fp x34916 = x34915 * x26;
          Fp x34917 = Fp(x34916.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x34917;
          Fp x34918 = x34916 - x34917;
          Fp x34919 = x34918 * x26;
          Fp x34920 = Fp(x34919.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x34920;
          Fp x34921 = x34919 - x34920;
          Fp x34922 = x34921 * x26;
          Fp x34923 = Fp(x34922.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x34923;
        }
        Fp x34924 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x34925 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x34926 = x34925 * x1;
        Fp x34927 = x34924 + x34926;
        Fp x34928 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x34929 = x34928 * x3;
        Fp x34930 = x34927 + x34929;
        Fp x34931 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x34932 = x34931 * x6;
        Fp x34933 = x34930 + x34932;
        Fp x34934 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x34935 = x34934 * x11;
        Fp x34936 = x34933 + x34935;
        Fp x34937 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x34938 = x34937 * x27;
        Fp x34939 = x34936 + x34938;
        Fp x34940 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x34941 = x34940 * x12;
        Fp x34942 = x34939 + x34941;
        Fp x34943 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x34944 = x34943 * x28;
        Fp x34945 = x34942 + x34944;
        Fp x34946 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x34947 = x34946 * x13;
        Fp x34948 = x34945 + x34947;
        Fp x34949 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x34950 = x34949 * x29;
        Fp x34951 = x34948 + x34950;
        Fp x34952 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x34953 = x34952 * x14;
        Fp x34954 = x34951 + x34953;
        Fp x34955 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x34956 = x34955 * x30;
        Fp x34957 = x34954 + x34956;
        Fp x34958 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x34959 = x34958 * x15;
        Fp x34960 = x34957 + x34959;
        Fp x34961 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x34962 = x34961 * x31;
        Fp x34963 = x34960 + x34962;
        Fp x34964 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x34965 = x34964 * x16;
        Fp x34966 = x34963 + x34965;
        Fp x34967 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x34968 = x34967 * x32;
        Fp x34969 = x34966 + x34968;
        Fp x34970 = x31643 - x34969;
        Fp x34971 = x34970 * x33;
        args[2][106 * steps + cycle] = x34971;
        Fp x34972 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x34973 = x31644 + x34972;
        {
          Fp x34974 = Fp(x34973.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x34974;
          Fp x34975 = x34973 - x34974;
          Fp x34976 = x34975 * x26;
          Fp x34977 = Fp(x34976.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x34977;
          Fp x34978 = x34976 - x34977;
          Fp x34979 = x34978 * x26;
          Fp x34980 = Fp(x34979.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x34980;
          Fp x34981 = x34979 - x34980;
          Fp x34982 = x34981 * x26;
          Fp x34983 = Fp(x34982.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x34983;
          Fp x34984 = x34982 - x34983;
          Fp x34985 = x34984 * x26;
          Fp x34986 = Fp(x34985.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x34986;
          Fp x34987 = x34985 - x34986;
          Fp x34988 = x34987 * x26;
          Fp x34989 = Fp(x34988.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x34989;
          Fp x34990 = x34988 - x34989;
          Fp x34991 = x34990 * x26;
          Fp x34992 = Fp(x34991.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x34992;
          Fp x34993 = x34991 - x34992;
          Fp x34994 = x34993 * x26;
          Fp x34995 = Fp(x34994.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x34995;
          Fp x34996 = x34994 - x34995;
          Fp x34997 = x34996 * x26;
          Fp x34998 = Fp(x34997.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x34998;
          Fp x34999 = x34997 - x34998;
          Fp x35000 = x34999 * x26;
          Fp x35001 = Fp(x35000.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x35001;
          Fp x35002 = x35000 - x35001;
          Fp x35003 = x35002 * x26;
          Fp x35004 = Fp(x35003.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x35004;
          Fp x35005 = x35003 - x35004;
          Fp x35006 = x35005 * x26;
          Fp x35007 = Fp(x35006.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x35007;
          Fp x35008 = x35006 - x35007;
          Fp x35009 = x35008 * x26;
          Fp x35010 = Fp(x35009.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x35010;
          Fp x35011 = x35009 - x35010;
          Fp x35012 = x35011 * x26;
          Fp x35013 = Fp(x35012.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x35013;
          Fp x35014 = x35012 - x35013;
          Fp x35015 = x35014 * x26;
          Fp x35016 = Fp(x35015.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x35016;
          Fp x35017 = x35015 - x35016;
          Fp x35018 = x35017 * x26;
          Fp x35019 = Fp(x35018.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x35019;
        }
        Fp x35020 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x35021 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x35022 = x35021 * x1;
        Fp x35023 = x35020 + x35022;
        Fp x35024 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x35025 = x35024 * x3;
        Fp x35026 = x35023 + x35025;
        Fp x35027 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x35028 = x35027 * x6;
        Fp x35029 = x35026 + x35028;
        Fp x35030 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x35031 = x35030 * x11;
        Fp x35032 = x35029 + x35031;
        Fp x35033 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x35034 = x35033 * x27;
        Fp x35035 = x35032 + x35034;
        Fp x35036 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x35037 = x35036 * x12;
        Fp x35038 = x35035 + x35037;
        Fp x35039 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x35040 = x35039 * x28;
        Fp x35041 = x35038 + x35040;
        Fp x35042 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x35043 = x35042 * x13;
        Fp x35044 = x35041 + x35043;
        Fp x35045 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x35046 = x35045 * x29;
        Fp x35047 = x35044 + x35046;
        Fp x35048 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x35049 = x35048 * x14;
        Fp x35050 = x35047 + x35049;
        Fp x35051 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x35052 = x35051 * x30;
        Fp x35053 = x35050 + x35052;
        Fp x35054 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x35055 = x35054 * x15;
        Fp x35056 = x35053 + x35055;
        Fp x35057 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x35058 = x35057 * x31;
        Fp x35059 = x35056 + x35058;
        Fp x35060 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x35061 = x35060 * x16;
        Fp x35062 = x35059 + x35061;
        Fp x35063 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x35064 = x35063 * x32;
        Fp x35065 = x35062 + x35064;
        Fp x35066 = x34973 - x35065;
        Fp x35067 = x35066 * x33;
        args[2][107 * steps + cycle] = x35067;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x35068 = host_outs[0];
          Fp x35069 = host_outs[1];
          args[2][129 * steps + cycle] = x35068;
          args[2][130 * steps + cycle] = x35069;
        }
        Fp x35070 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x35071 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x35072 = Fp(x35070.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x35072;
          Fp x35073 = x35070 - x35072;
          Fp x35074 = x35073 * x26;
          Fp x35075 = Fp(x35074.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x35075;
          Fp x35076 = x35074 - x35075;
          Fp x35077 = x35076 * x26;
          Fp x35078 = Fp(x35077.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x35078;
          Fp x35079 = x35077 - x35078;
          Fp x35080 = x35079 * x26;
          Fp x35081 = Fp(x35080.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x35081;
          Fp x35082 = x35080 - x35081;
          Fp x35083 = x35082 * x26;
          Fp x35084 = Fp(x35083.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x35084;
          Fp x35085 = x35083 - x35084;
          Fp x35086 = x35085 * x26;
          Fp x35087 = Fp(x35086.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x35087;
          Fp x35088 = x35086 - x35087;
          Fp x35089 = x35088 * x26;
          Fp x35090 = Fp(x35089.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x35090;
          Fp x35091 = x35089 - x35090;
          Fp x35092 = x35091 * x26;
          Fp x35093 = Fp(x35092.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x35093;
          Fp x35094 = x35092 - x35093;
          Fp x35095 = x35094 * x26;
          Fp x35096 = Fp(x35095.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x35096;
          Fp x35097 = x35095 - x35096;
          Fp x35098 = x35097 * x26;
          Fp x35099 = Fp(x35098.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x35099;
          Fp x35100 = x35098 - x35099;
          Fp x35101 = x35100 * x26;
          Fp x35102 = Fp(x35101.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x35102;
          Fp x35103 = x35101 - x35102;
          Fp x35104 = x35103 * x26;
          Fp x35105 = Fp(x35104.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x35105;
          Fp x35106 = x35104 - x35105;
          Fp x35107 = x35106 * x26;
          Fp x35108 = Fp(x35107.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x35108;
          Fp x35109 = x35107 - x35108;
          Fp x35110 = x35109 * x26;
          Fp x35111 = Fp(x35110.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x35111;
          Fp x35112 = x35110 - x35111;
          Fp x35113 = x35112 * x26;
          Fp x35114 = Fp(x35113.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x35114;
          Fp x35115 = x35113 - x35114;
          Fp x35116 = x35115 * x26;
          Fp x35117 = Fp(x35116.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x35117;
        }
        Fp x35118 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x35119 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x35120 = x35119 * x1;
        Fp x35121 = x35118 + x35120;
        Fp x35122 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x35123 = x35122 * x3;
        Fp x35124 = x35121 + x35123;
        Fp x35125 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x35126 = x35125 * x6;
        Fp x35127 = x35124 + x35126;
        Fp x35128 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x35129 = x35128 * x11;
        Fp x35130 = x35127 + x35129;
        Fp x35131 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x35132 = x35131 * x27;
        Fp x35133 = x35130 + x35132;
        Fp x35134 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x35135 = x35134 * x12;
        Fp x35136 = x35133 + x35135;
        Fp x35137 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x35138 = x35137 * x28;
        Fp x35139 = x35136 + x35138;
        Fp x35140 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x35141 = x35140 * x13;
        Fp x35142 = x35139 + x35141;
        Fp x35143 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x35144 = x35143 * x29;
        Fp x35145 = x35142 + x35144;
        Fp x35146 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x35147 = x35146 * x14;
        Fp x35148 = x35145 + x35147;
        Fp x35149 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x35150 = x35149 * x30;
        Fp x35151 = x35148 + x35150;
        Fp x35152 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x35153 = x35152 * x15;
        Fp x35154 = x35151 + x35153;
        Fp x35155 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x35156 = x35155 * x31;
        Fp x35157 = x35154 + x35156;
        Fp x35158 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x35159 = x35158 * x16;
        Fp x35160 = x35157 + x35159;
        Fp x35161 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x35162 = x35161 * x32;
        Fp x35163 = x35160 + x35162;
        Fp x35164 = x35070 - x35163;
        Fp x35165 = x35164 * x33;
        if (x35165 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:78");
        {
          Fp x35166 = Fp(x35071.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x35166;
          Fp x35167 = x35071 - x35166;
          Fp x35168 = x35167 * x26;
          Fp x35169 = Fp(x35168.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x35169;
          Fp x35170 = x35168 - x35169;
          Fp x35171 = x35170 * x26;
          Fp x35172 = Fp(x35171.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x35172;
          Fp x35173 = x35171 - x35172;
          Fp x35174 = x35173 * x26;
          Fp x35175 = Fp(x35174.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x35175;
          Fp x35176 = x35174 - x35175;
          Fp x35177 = x35176 * x26;
          Fp x35178 = Fp(x35177.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x35178;
          Fp x35179 = x35177 - x35178;
          Fp x35180 = x35179 * x26;
          Fp x35181 = Fp(x35180.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x35181;
          Fp x35182 = x35180 - x35181;
          Fp x35183 = x35182 * x26;
          Fp x35184 = Fp(x35183.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x35184;
          Fp x35185 = x35183 - x35184;
          Fp x35186 = x35185 * x26;
          Fp x35187 = Fp(x35186.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x35187;
          Fp x35188 = x35186 - x35187;
          Fp x35189 = x35188 * x26;
          Fp x35190 = Fp(x35189.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x35190;
          Fp x35191 = x35189 - x35190;
          Fp x35192 = x35191 * x26;
          Fp x35193 = Fp(x35192.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x35193;
          Fp x35194 = x35192 - x35193;
          Fp x35195 = x35194 * x26;
          Fp x35196 = Fp(x35195.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x35196;
          Fp x35197 = x35195 - x35196;
          Fp x35198 = x35197 * x26;
          Fp x35199 = Fp(x35198.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x35199;
          Fp x35200 = x35198 - x35199;
          Fp x35201 = x35200 * x26;
          Fp x35202 = Fp(x35201.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x35202;
          Fp x35203 = x35201 - x35202;
          Fp x35204 = x35203 * x26;
          Fp x35205 = Fp(x35204.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x35205;
          Fp x35206 = x35204 - x35205;
          Fp x35207 = x35206 * x26;
          Fp x35208 = Fp(x35207.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x35208;
          Fp x35209 = x35207 - x35208;
          Fp x35210 = x35209 * x26;
          Fp x35211 = Fp(x35210.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x35211;
        }
        Fp x35212 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x35213 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x35214 = x35213 * x1;
        Fp x35215 = x35212 + x35214;
        Fp x35216 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x35217 = x35216 * x3;
        Fp x35218 = x35215 + x35217;
        Fp x35219 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x35220 = x35219 * x6;
        Fp x35221 = x35218 + x35220;
        Fp x35222 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x35223 = x35222 * x11;
        Fp x35224 = x35221 + x35223;
        Fp x35225 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x35226 = x35225 * x27;
        Fp x35227 = x35224 + x35226;
        Fp x35228 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x35229 = x35228 * x12;
        Fp x35230 = x35227 + x35229;
        Fp x35231 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x35232 = x35231 * x28;
        Fp x35233 = x35230 + x35232;
        Fp x35234 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x35235 = x35234 * x13;
        Fp x35236 = x35233 + x35235;
        Fp x35237 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x35238 = x35237 * x29;
        Fp x35239 = x35236 + x35238;
        Fp x35240 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x35241 = x35240 * x14;
        Fp x35242 = x35239 + x35241;
        Fp x35243 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x35244 = x35243 * x30;
        Fp x35245 = x35242 + x35244;
        Fp x35246 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x35247 = x35246 * x15;
        Fp x35248 = x35245 + x35247;
        Fp x35249 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x35250 = x35249 * x31;
        Fp x35251 = x35248 + x35250;
        Fp x35252 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x35253 = x35252 * x16;
        Fp x35254 = x35251 + x35253;
        Fp x35255 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x35256 = x35255 * x32;
        Fp x35257 = x35254 + x35256;
        Fp x35258 = x35071 - x35257;
        Fp x35259 = x35258 * x33;
        if (x35259 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:78");
        {
          Fp x35260 = (x34927 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x35260;
          Fp x35261 = x34927 - x71;
          Fp x35262 = (x35261 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x35262;
          Fp x35263 = x34927 - x1;
          Fp x35264 = (x35263 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x35264;
          Fp x35265 = x34927 - x2;
          Fp x35266 = (x35265 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x35266;
        }
        Fp x35267 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x35268 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x35269 = x35268 * x1;
        Fp x35270 = x35267 + x35269;
        Fp x35271 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x35272 = x35271 * x2;
        Fp x35273 = x35270 + x35272;
        Fp x35274 = x35273 - x34927;
        if (x35274 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x35275 = x31668 + x3;
        {
          Fp x35276 = Fp(x35275.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x35276;
          Fp x35277 = x35275 - x35276;
          Fp x35278 = x35277 * x26;
          Fp x35279 = Fp(x35278.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x35279;
          Fp x35280 = x35278 - x35279;
          Fp x35281 = x35280 * x26;
          Fp x35282 = Fp(x35281.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x35282;
          Fp x35283 = x35281 - x35282;
          Fp x35284 = x35283 * x26;
          Fp x35285 = Fp(x35284.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x35285;
          Fp x35286 = x35284 - x35285;
          Fp x35287 = x35286 * x26;
          Fp x35288 = Fp(x35287.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x35288;
          Fp x35289 = x35287 - x35288;
          Fp x35290 = x35289 * x26;
          Fp x35291 = Fp(x35290.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x35291;
          Fp x35292 = x35290 - x35291;
          Fp x35293 = x35292 * x26;
          Fp x35294 = Fp(x35293.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x35294;
          Fp x35295 = x35293 - x35294;
          Fp x35296 = x35295 * x26;
          Fp x35297 = Fp(x35296.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x35297;
          Fp x35298 = x35296 - x35297;
          Fp x35299 = x35298 * x26;
          Fp x35300 = Fp(x35299.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x35300;
          Fp x35301 = x35299 - x35300;
          Fp x35302 = x35301 * x26;
          Fp x35303 = Fp(x35302.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x35303;
          Fp x35304 = x35302 - x35303;
          Fp x35305 = x35304 * x26;
          Fp x35306 = Fp(x35305.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x35306;
          Fp x35307 = x35305 - x35306;
          Fp x35308 = x35307 * x26;
          Fp x35309 = Fp(x35308.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x35309;
          Fp x35310 = x35308 - x35309;
          Fp x35311 = x35310 * x26;
          Fp x35312 = Fp(x35311.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x35312;
          Fp x35313 = x35311 - x35312;
          Fp x35314 = x35313 * x26;
          Fp x35315 = Fp(x35314.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x35315;
          Fp x35316 = x35314 - x35315;
          Fp x35317 = x35316 * x26;
          Fp x35318 = Fp(x35317.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x35318;
          Fp x35319 = x35317 - x35318;
          Fp x35320 = x35319 * x26;
          Fp x35321 = Fp(x35320.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x35321;
        }
        Fp x35322 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x35323 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x35324 = x35323 * x1;
        Fp x35325 = x35322 + x35324;
        Fp x35326 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x35327 = x35326 * x3;
        Fp x35328 = x35325 + x35327;
        Fp x35329 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x35330 = x35329 * x6;
        Fp x35331 = x35328 + x35330;
        Fp x35332 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x35333 = x35332 * x11;
        Fp x35334 = x35331 + x35333;
        Fp x35335 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x35336 = x35335 * x27;
        Fp x35337 = x35334 + x35336;
        Fp x35338 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x35339 = x35338 * x12;
        Fp x35340 = x35337 + x35339;
        Fp x35341 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x35342 = x35341 * x28;
        Fp x35343 = x35340 + x35342;
        Fp x35344 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x35345 = x35344 * x13;
        Fp x35346 = x35343 + x35345;
        Fp x35347 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x35348 = x35347 * x29;
        Fp x35349 = x35346 + x35348;
        Fp x35350 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x35351 = x35350 * x14;
        Fp x35352 = x35349 + x35351;
        Fp x35353 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x35354 = x35353 * x30;
        Fp x35355 = x35352 + x35354;
        Fp x35356 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x35357 = x35356 * x15;
        Fp x35358 = x35355 + x35357;
        Fp x35359 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x35360 = x35359 * x31;
        Fp x35361 = x35358 + x35360;
        Fp x35362 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x35363 = x35362 * x16;
        Fp x35364 = x35361 + x35363;
        Fp x35365 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x35366 = x35365 * x32;
        Fp x35367 = x35364 + x35366;
        Fp x35368 = x35275 - x35367;
        Fp x35369 = x35368 * x33;
        args[2][108 * steps + cycle] = x35369;
        Fp x35370 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x35371 = x31690 + x35370;
        {
          Fp x35372 = Fp(x35371.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x35372;
          Fp x35373 = x35371 - x35372;
          Fp x35374 = x35373 * x26;
          Fp x35375 = Fp(x35374.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x35375;
          Fp x35376 = x35374 - x35375;
          Fp x35377 = x35376 * x26;
          Fp x35378 = Fp(x35377.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x35378;
          Fp x35379 = x35377 - x35378;
          Fp x35380 = x35379 * x26;
          Fp x35381 = Fp(x35380.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x35381;
          Fp x35382 = x35380 - x35381;
          Fp x35383 = x35382 * x26;
          Fp x35384 = Fp(x35383.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x35384;
          Fp x35385 = x35383 - x35384;
          Fp x35386 = x35385 * x26;
          Fp x35387 = Fp(x35386.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x35387;
          Fp x35388 = x35386 - x35387;
          Fp x35389 = x35388 * x26;
          Fp x35390 = Fp(x35389.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x35390;
          Fp x35391 = x35389 - x35390;
          Fp x35392 = x35391 * x26;
          Fp x35393 = Fp(x35392.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x35393;
          Fp x35394 = x35392 - x35393;
          Fp x35395 = x35394 * x26;
          Fp x35396 = Fp(x35395.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x35396;
          Fp x35397 = x35395 - x35396;
          Fp x35398 = x35397 * x26;
          Fp x35399 = Fp(x35398.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x35399;
          Fp x35400 = x35398 - x35399;
          Fp x35401 = x35400 * x26;
          Fp x35402 = Fp(x35401.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x35402;
          Fp x35403 = x35401 - x35402;
          Fp x35404 = x35403 * x26;
          Fp x35405 = Fp(x35404.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x35405;
          Fp x35406 = x35404 - x35405;
          Fp x35407 = x35406 * x26;
          Fp x35408 = Fp(x35407.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x35408;
          Fp x35409 = x35407 - x35408;
          Fp x35410 = x35409 * x26;
          Fp x35411 = Fp(x35410.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x35411;
          Fp x35412 = x35410 - x35411;
          Fp x35413 = x35412 * x26;
          Fp x35414 = Fp(x35413.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x35414;
          Fp x35415 = x35413 - x35414;
          Fp x35416 = x35415 * x26;
          Fp x35417 = Fp(x35416.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x35417;
        }
        Fp x35418 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x35419 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x35420 = x35419 * x1;
        Fp x35421 = x35418 + x35420;
        Fp x35422 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x35423 = x35422 * x3;
        Fp x35424 = x35421 + x35423;
        Fp x35425 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x35426 = x35425 * x6;
        Fp x35427 = x35424 + x35426;
        Fp x35428 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x35429 = x35428 * x11;
        Fp x35430 = x35427 + x35429;
        Fp x35431 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x35432 = x35431 * x27;
        Fp x35433 = x35430 + x35432;
        Fp x35434 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x35435 = x35434 * x12;
        Fp x35436 = x35433 + x35435;
        Fp x35437 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x35438 = x35437 * x28;
        Fp x35439 = x35436 + x35438;
        Fp x35440 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x35441 = x35440 * x13;
        Fp x35442 = x35439 + x35441;
        Fp x35443 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x35444 = x35443 * x29;
        Fp x35445 = x35442 + x35444;
        Fp x35446 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x35447 = x35446 * x14;
        Fp x35448 = x35445 + x35447;
        Fp x35449 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x35450 = x35449 * x30;
        Fp x35451 = x35448 + x35450;
        Fp x35452 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x35453 = x35452 * x15;
        Fp x35454 = x35451 + x35453;
        Fp x35455 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x35456 = x35455 * x31;
        Fp x35457 = x35454 + x35456;
        Fp x35458 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x35459 = x35458 * x16;
        Fp x35460 = x35457 + x35459;
        Fp x35461 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x35462 = x35461 * x32;
        Fp x35463 = x35460 + x35462;
        Fp x35464 = x35371 - x35463;
        Fp x35465 = x35464 * x33;
        args[2][109 * steps + cycle] = x35465;
        {
          {
            Fp x35466 = (x35367 == 0) ? Fp(1) : Fp(0);
            Fp x35467 = x71 - x35466;
            args[2][114 * steps + cycle] = x35467;
            Fp x35468 = inv(x35367);
            args[2][115 * steps + cycle] = x35468;
          }
          Fp x35469 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x35470 = x35367 * x35469;
          Fp x35471 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x35472 = x35470 - x35471;
          if (x35472 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x35473 = x71 - x35471;
          Fp x35474 = x35473 * x35367;
          if (x35474 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x35475 = (x35463 == 0) ? Fp(1) : Fp(0);
            Fp x35476 = x71 - x35475;
            args[2][116 * steps + cycle] = x35476;
            Fp x35477 = inv(x35463);
            args[2][117 * steps + cycle] = x35477;
          }
          Fp x35478 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x35479 = x35463 * x35478;
          Fp x35480 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x35481 = x35479 - x35480;
          if (x35481 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x35482 = x71 - x35480;
          Fp x35483 = x35482 * x35463;
          if (x35483 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x35484 = x35473 * x35482;
          Fp x35485 = x71 - x35484;
          args[2][111 * steps + cycle] = x35485;
          Fp x35486 = x71 - x35255;
          Fp x35487 = x35063 * x35486;
          Fp x35488 = x71 - x35461;
          Fp x35489 = x35487 * x35488;
          Fp x35490 = x71 - x35063;
          Fp x35491 = x35490 * x35255;
          Fp x35492 = x35491 * x35461;
          Fp x35493 = x35489 + x35492;
          args[2][112 * steps + cycle] = x35493;
          Fp x35494 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x35495 = x35494 + x35461;
          Fp x35496 = x35494 * x1;
          Fp x35497 = x35496 * x35461;
          Fp x35498 = x35495 - x35497;
          args[2][113 * steps + cycle] = x35498;
        }
        args[2][100 * steps + cycle] = x35367;
        args[2][101 * steps + cycle] = x35463;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x35499 = x31643 + x31645;
        Fp x35500 = x31644 + x31646;
        args[2][104 * steps + cycle] = x35499;
        args[2][105 * steps + cycle] = x35500;
        Fp x35501 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x35502 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x35503 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x35504 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x35505 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x35506 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x31690;
        host_args[2] = x31668;
        host_args[3] = x35065;
        host_args[4] = x34969;
        host_args[5] = x35257;
        host_args[6] = x35163;
        host_args[7] = x35463;
        host_args[8] = x35367;
        host_args[9] = x35501;
        host_args[10] = x35502;
        host_args[11] = x35503;
        host_args[12] = x35504;
        host_args[13] = x35505;
        host_args[14] = x35506;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x35507 = args[2][78 * steps + ((cycle - 1) & mask)];
      if (x35507 != 0) {
        {
          Fp x35508 = Fp(x31643.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x35508;
          Fp x35509 = x31643 - x35508;
          Fp x35510 = x35509 * x26;
          Fp x35511 = Fp(x35510.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x35511;
          Fp x35512 = x35510 - x35511;
          Fp x35513 = x35512 * x26;
          Fp x35514 = Fp(x35513.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x35514;
          Fp x35515 = x35513 - x35514;
          Fp x35516 = x35515 * x26;
          Fp x35517 = Fp(x35516.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x35517;
          Fp x35518 = x35516 - x35517;
          Fp x35519 = x35518 * x26;
          Fp x35520 = Fp(x35519.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x35520;
          Fp x35521 = x35519 - x35520;
          Fp x35522 = x35521 * x26;
          Fp x35523 = Fp(x35522.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x35523;
          Fp x35524 = x35522 - x35523;
          Fp x35525 = x35524 * x26;
          Fp x35526 = Fp(x35525.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x35526;
          Fp x35527 = x35525 - x35526;
          Fp x35528 = x35527 * x26;
          Fp x35529 = Fp(x35528.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x35529;
          Fp x35530 = x35528 - x35529;
          Fp x35531 = x35530 * x26;
          Fp x35532 = Fp(x35531.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x35532;
          Fp x35533 = x35531 - x35532;
          Fp x35534 = x35533 * x26;
          Fp x35535 = Fp(x35534.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x35535;
          Fp x35536 = x35534 - x35535;
          Fp x35537 = x35536 * x26;
          Fp x35538 = Fp(x35537.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x35538;
          Fp x35539 = x35537 - x35538;
          Fp x35540 = x35539 * x26;
          Fp x35541 = Fp(x35540.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x35541;
          Fp x35542 = x35540 - x35541;
          Fp x35543 = x35542 * x26;
          Fp x35544 = Fp(x35543.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x35544;
          Fp x35545 = x35543 - x35544;
          Fp x35546 = x35545 * x26;
          Fp x35547 = Fp(x35546.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x35547;
          Fp x35548 = x35546 - x35547;
          Fp x35549 = x35548 * x26;
          Fp x35550 = Fp(x35549.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x35550;
          Fp x35551 = x35549 - x35550;
          Fp x35552 = x35551 * x26;
          Fp x35553 = Fp(x35552.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x35553;
        }
        Fp x35554 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x35555 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x35556 = x35555 * x1;
        Fp x35557 = x35554 + x35556;
        Fp x35558 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x35559 = x35558 * x3;
        Fp x35560 = x35557 + x35559;
        Fp x35561 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x35562 = x35561 * x6;
        Fp x35563 = x35560 + x35562;
        Fp x35564 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x35565 = x35564 * x11;
        Fp x35566 = x35563 + x35565;
        Fp x35567 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x35568 = x35567 * x27;
        Fp x35569 = x35566 + x35568;
        Fp x35570 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x35571 = x35570 * x12;
        Fp x35572 = x35569 + x35571;
        Fp x35573 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x35574 = x35573 * x28;
        Fp x35575 = x35572 + x35574;
        Fp x35576 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x35577 = x35576 * x13;
        Fp x35578 = x35575 + x35577;
        Fp x35579 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x35580 = x35579 * x29;
        Fp x35581 = x35578 + x35580;
        Fp x35582 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x35583 = x35582 * x14;
        Fp x35584 = x35581 + x35583;
        Fp x35585 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x35586 = x35585 * x30;
        Fp x35587 = x35584 + x35586;
        Fp x35588 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x35589 = x35588 * x15;
        Fp x35590 = x35587 + x35589;
        Fp x35591 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x35592 = x35591 * x31;
        Fp x35593 = x35590 + x35592;
        Fp x35594 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x35595 = x35594 * x16;
        Fp x35596 = x35593 + x35595;
        Fp x35597 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x35598 = x35597 * x32;
        Fp x35599 = x35596 + x35598;
        Fp x35600 = x31643 - x35599;
        Fp x35601 = x35600 * x33;
        args[2][106 * steps + cycle] = x35601;
        Fp x35602 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x35603 = x31644 + x35602;
        {
          Fp x35604 = Fp(x35603.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x35604;
          Fp x35605 = x35603 - x35604;
          Fp x35606 = x35605 * x26;
          Fp x35607 = Fp(x35606.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x35607;
          Fp x35608 = x35606 - x35607;
          Fp x35609 = x35608 * x26;
          Fp x35610 = Fp(x35609.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x35610;
          Fp x35611 = x35609 - x35610;
          Fp x35612 = x35611 * x26;
          Fp x35613 = Fp(x35612.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x35613;
          Fp x35614 = x35612 - x35613;
          Fp x35615 = x35614 * x26;
          Fp x35616 = Fp(x35615.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x35616;
          Fp x35617 = x35615 - x35616;
          Fp x35618 = x35617 * x26;
          Fp x35619 = Fp(x35618.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x35619;
          Fp x35620 = x35618 - x35619;
          Fp x35621 = x35620 * x26;
          Fp x35622 = Fp(x35621.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x35622;
          Fp x35623 = x35621 - x35622;
          Fp x35624 = x35623 * x26;
          Fp x35625 = Fp(x35624.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x35625;
          Fp x35626 = x35624 - x35625;
          Fp x35627 = x35626 * x26;
          Fp x35628 = Fp(x35627.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x35628;
          Fp x35629 = x35627 - x35628;
          Fp x35630 = x35629 * x26;
          Fp x35631 = Fp(x35630.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x35631;
          Fp x35632 = x35630 - x35631;
          Fp x35633 = x35632 * x26;
          Fp x35634 = Fp(x35633.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x35634;
          Fp x35635 = x35633 - x35634;
          Fp x35636 = x35635 * x26;
          Fp x35637 = Fp(x35636.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x35637;
          Fp x35638 = x35636 - x35637;
          Fp x35639 = x35638 * x26;
          Fp x35640 = Fp(x35639.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x35640;
          Fp x35641 = x35639 - x35640;
          Fp x35642 = x35641 * x26;
          Fp x35643 = Fp(x35642.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x35643;
          Fp x35644 = x35642 - x35643;
          Fp x35645 = x35644 * x26;
          Fp x35646 = Fp(x35645.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x35646;
          Fp x35647 = x35645 - x35646;
          Fp x35648 = x35647 * x26;
          Fp x35649 = Fp(x35648.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x35649;
        }
        Fp x35650 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x35651 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x35652 = x35651 * x1;
        Fp x35653 = x35650 + x35652;
        Fp x35654 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x35655 = x35654 * x3;
        Fp x35656 = x35653 + x35655;
        Fp x35657 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x35658 = x35657 * x6;
        Fp x35659 = x35656 + x35658;
        Fp x35660 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x35661 = x35660 * x11;
        Fp x35662 = x35659 + x35661;
        Fp x35663 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x35664 = x35663 * x27;
        Fp x35665 = x35662 + x35664;
        Fp x35666 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x35667 = x35666 * x12;
        Fp x35668 = x35665 + x35667;
        Fp x35669 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x35670 = x35669 * x28;
        Fp x35671 = x35668 + x35670;
        Fp x35672 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x35673 = x35672 * x13;
        Fp x35674 = x35671 + x35673;
        Fp x35675 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x35676 = x35675 * x29;
        Fp x35677 = x35674 + x35676;
        Fp x35678 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x35679 = x35678 * x14;
        Fp x35680 = x35677 + x35679;
        Fp x35681 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x35682 = x35681 * x30;
        Fp x35683 = x35680 + x35682;
        Fp x35684 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x35685 = x35684 * x15;
        Fp x35686 = x35683 + x35685;
        Fp x35687 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x35688 = x35687 * x31;
        Fp x35689 = x35686 + x35688;
        Fp x35690 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x35691 = x35690 * x16;
        Fp x35692 = x35689 + x35691;
        Fp x35693 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x35694 = x35693 * x32;
        Fp x35695 = x35692 + x35694;
        Fp x35696 = x35603 - x35695;
        Fp x35697 = x35696 * x33;
        args[2][107 * steps + cycle] = x35697;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x35698 = host_outs[0];
          Fp x35699 = host_outs[1];
          args[2][129 * steps + cycle] = x35698;
          args[2][130 * steps + cycle] = x35699;
        }
        Fp x35700 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x35701 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x35702 = Fp(x35700.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x35702;
          Fp x35703 = x35700 - x35702;
          Fp x35704 = x35703 * x26;
          Fp x35705 = Fp(x35704.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x35705;
          Fp x35706 = x35704 - x35705;
          Fp x35707 = x35706 * x26;
          Fp x35708 = Fp(x35707.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x35708;
          Fp x35709 = x35707 - x35708;
          Fp x35710 = x35709 * x26;
          Fp x35711 = Fp(x35710.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x35711;
          Fp x35712 = x35710 - x35711;
          Fp x35713 = x35712 * x26;
          Fp x35714 = Fp(x35713.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x35714;
          Fp x35715 = x35713 - x35714;
          Fp x35716 = x35715 * x26;
          Fp x35717 = Fp(x35716.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x35717;
          Fp x35718 = x35716 - x35717;
          Fp x35719 = x35718 * x26;
          Fp x35720 = Fp(x35719.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x35720;
          Fp x35721 = x35719 - x35720;
          Fp x35722 = x35721 * x26;
          Fp x35723 = Fp(x35722.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x35723;
          Fp x35724 = x35722 - x35723;
          Fp x35725 = x35724 * x26;
          Fp x35726 = Fp(x35725.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x35726;
          Fp x35727 = x35725 - x35726;
          Fp x35728 = x35727 * x26;
          Fp x35729 = Fp(x35728.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x35729;
          Fp x35730 = x35728 - x35729;
          Fp x35731 = x35730 * x26;
          Fp x35732 = Fp(x35731.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x35732;
          Fp x35733 = x35731 - x35732;
          Fp x35734 = x35733 * x26;
          Fp x35735 = Fp(x35734.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x35735;
          Fp x35736 = x35734 - x35735;
          Fp x35737 = x35736 * x26;
          Fp x35738 = Fp(x35737.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x35738;
          Fp x35739 = x35737 - x35738;
          Fp x35740 = x35739 * x26;
          Fp x35741 = Fp(x35740.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x35741;
          Fp x35742 = x35740 - x35741;
          Fp x35743 = x35742 * x26;
          Fp x35744 = Fp(x35743.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x35744;
          Fp x35745 = x35743 - x35744;
          Fp x35746 = x35745 * x26;
          Fp x35747 = Fp(x35746.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x35747;
        }
        Fp x35748 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x35749 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x35750 = x35749 * x1;
        Fp x35751 = x35748 + x35750;
        Fp x35752 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x35753 = x35752 * x3;
        Fp x35754 = x35751 + x35753;
        Fp x35755 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x35756 = x35755 * x6;
        Fp x35757 = x35754 + x35756;
        Fp x35758 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x35759 = x35758 * x11;
        Fp x35760 = x35757 + x35759;
        Fp x35761 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x35762 = x35761 * x27;
        Fp x35763 = x35760 + x35762;
        Fp x35764 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x35765 = x35764 * x12;
        Fp x35766 = x35763 + x35765;
        Fp x35767 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x35768 = x35767 * x28;
        Fp x35769 = x35766 + x35768;
        Fp x35770 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x35771 = x35770 * x13;
        Fp x35772 = x35769 + x35771;
        Fp x35773 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x35774 = x35773 * x29;
        Fp x35775 = x35772 + x35774;
        Fp x35776 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x35777 = x35776 * x14;
        Fp x35778 = x35775 + x35777;
        Fp x35779 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x35780 = x35779 * x30;
        Fp x35781 = x35778 + x35780;
        Fp x35782 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x35783 = x35782 * x15;
        Fp x35784 = x35781 + x35783;
        Fp x35785 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x35786 = x35785 * x31;
        Fp x35787 = x35784 + x35786;
        Fp x35788 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x35789 = x35788 * x16;
        Fp x35790 = x35787 + x35789;
        Fp x35791 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x35792 = x35791 * x32;
        Fp x35793 = x35790 + x35792;
        Fp x35794 = x35700 - x35793;
        Fp x35795 = x35794 * x33;
        if (x35795 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:79");
        {
          Fp x35796 = Fp(x35701.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x35796;
          Fp x35797 = x35701 - x35796;
          Fp x35798 = x35797 * x26;
          Fp x35799 = Fp(x35798.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x35799;
          Fp x35800 = x35798 - x35799;
          Fp x35801 = x35800 * x26;
          Fp x35802 = Fp(x35801.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x35802;
          Fp x35803 = x35801 - x35802;
          Fp x35804 = x35803 * x26;
          Fp x35805 = Fp(x35804.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x35805;
          Fp x35806 = x35804 - x35805;
          Fp x35807 = x35806 * x26;
          Fp x35808 = Fp(x35807.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x35808;
          Fp x35809 = x35807 - x35808;
          Fp x35810 = x35809 * x26;
          Fp x35811 = Fp(x35810.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x35811;
          Fp x35812 = x35810 - x35811;
          Fp x35813 = x35812 * x26;
          Fp x35814 = Fp(x35813.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x35814;
          Fp x35815 = x35813 - x35814;
          Fp x35816 = x35815 * x26;
          Fp x35817 = Fp(x35816.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x35817;
          Fp x35818 = x35816 - x35817;
          Fp x35819 = x35818 * x26;
          Fp x35820 = Fp(x35819.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x35820;
          Fp x35821 = x35819 - x35820;
          Fp x35822 = x35821 * x26;
          Fp x35823 = Fp(x35822.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x35823;
          Fp x35824 = x35822 - x35823;
          Fp x35825 = x35824 * x26;
          Fp x35826 = Fp(x35825.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x35826;
          Fp x35827 = x35825 - x35826;
          Fp x35828 = x35827 * x26;
          Fp x35829 = Fp(x35828.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x35829;
          Fp x35830 = x35828 - x35829;
          Fp x35831 = x35830 * x26;
          Fp x35832 = Fp(x35831.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x35832;
          Fp x35833 = x35831 - x35832;
          Fp x35834 = x35833 * x26;
          Fp x35835 = Fp(x35834.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x35835;
          Fp x35836 = x35834 - x35835;
          Fp x35837 = x35836 * x26;
          Fp x35838 = Fp(x35837.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x35838;
          Fp x35839 = x35837 - x35838;
          Fp x35840 = x35839 * x26;
          Fp x35841 = Fp(x35840.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x35841;
        }
        Fp x35842 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x35843 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x35844 = x35843 * x1;
        Fp x35845 = x35842 + x35844;
        Fp x35846 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x35847 = x35846 * x3;
        Fp x35848 = x35845 + x35847;
        Fp x35849 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x35850 = x35849 * x6;
        Fp x35851 = x35848 + x35850;
        Fp x35852 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x35853 = x35852 * x11;
        Fp x35854 = x35851 + x35853;
        Fp x35855 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x35856 = x35855 * x27;
        Fp x35857 = x35854 + x35856;
        Fp x35858 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x35859 = x35858 * x12;
        Fp x35860 = x35857 + x35859;
        Fp x35861 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x35862 = x35861 * x28;
        Fp x35863 = x35860 + x35862;
        Fp x35864 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x35865 = x35864 * x13;
        Fp x35866 = x35863 + x35865;
        Fp x35867 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x35868 = x35867 * x29;
        Fp x35869 = x35866 + x35868;
        Fp x35870 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x35871 = x35870 * x14;
        Fp x35872 = x35869 + x35871;
        Fp x35873 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x35874 = x35873 * x30;
        Fp x35875 = x35872 + x35874;
        Fp x35876 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x35877 = x35876 * x15;
        Fp x35878 = x35875 + x35877;
        Fp x35879 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x35880 = x35879 * x31;
        Fp x35881 = x35878 + x35880;
        Fp x35882 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x35883 = x35882 * x16;
        Fp x35884 = x35881 + x35883;
        Fp x35885 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x35886 = x35885 * x32;
        Fp x35887 = x35884 + x35886;
        Fp x35888 = x35701 - x35887;
        Fp x35889 = x35888 * x33;
        if (x35889 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:79");
        {
          Fp x35890 = (x35557 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x35890;
          Fp x35891 = x35557 - x71;
          Fp x35892 = (x35891 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x35892;
          Fp x35893 = x35557 - x1;
          Fp x35894 = (x35893 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x35894;
          Fp x35895 = x35557 - x2;
          Fp x35896 = (x35895 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x35896;
        }
        Fp x35897 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x35898 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x35899 = x35898 * x1;
        Fp x35900 = x35897 + x35899;
        Fp x35901 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x35902 = x35901 * x2;
        Fp x35903 = x35900 + x35902;
        Fp x35904 = x35903 - x35557;
        if (x35904 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        {
          Fp x35905 = Fp(x31645.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x35905;
          Fp x35906 = x31645 - x35905;
          Fp x35907 = x35906 * x26;
          Fp x35908 = Fp(x35907.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x35908;
          Fp x35909 = x35907 - x35908;
          Fp x35910 = x35909 * x26;
          Fp x35911 = Fp(x35910.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x35911;
          Fp x35912 = x35910 - x35911;
          Fp x35913 = x35912 * x26;
          Fp x35914 = Fp(x35913.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x35914;
          Fp x35915 = x35913 - x35914;
          Fp x35916 = x35915 * x26;
          Fp x35917 = Fp(x35916.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x35917;
          Fp x35918 = x35916 - x35917;
          Fp x35919 = x35918 * x26;
          Fp x35920 = Fp(x35919.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x35920;
          Fp x35921 = x35919 - x35920;
          Fp x35922 = x35921 * x26;
          Fp x35923 = Fp(x35922.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x35923;
          Fp x35924 = x35922 - x35923;
          Fp x35925 = x35924 * x26;
          Fp x35926 = Fp(x35925.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x35926;
          Fp x35927 = x35925 - x35926;
          Fp x35928 = x35927 * x26;
          Fp x35929 = Fp(x35928.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x35929;
          Fp x35930 = x35928 - x35929;
          Fp x35931 = x35930 * x26;
          Fp x35932 = Fp(x35931.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x35932;
          Fp x35933 = x35931 - x35932;
          Fp x35934 = x35933 * x26;
          Fp x35935 = Fp(x35934.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x35935;
          Fp x35936 = x35934 - x35935;
          Fp x35937 = x35936 * x26;
          Fp x35938 = Fp(x35937.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x35938;
          Fp x35939 = x35937 - x35938;
          Fp x35940 = x35939 * x26;
          Fp x35941 = Fp(x35940.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x35941;
          Fp x35942 = x35940 - x35941;
          Fp x35943 = x35942 * x26;
          Fp x35944 = Fp(x35943.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x35944;
          Fp x35945 = x35943 - x35944;
          Fp x35946 = x35945 * x26;
          Fp x35947 = Fp(x35946.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x35947;
          Fp x35948 = x35946 - x35947;
          Fp x35949 = x35948 * x26;
          Fp x35950 = Fp(x35949.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x35950;
        }
        Fp x35951 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x35952 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x35953 = x35952 * x1;
        Fp x35954 = x35951 + x35953;
        Fp x35955 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x35956 = x35955 * x3;
        Fp x35957 = x35954 + x35956;
        Fp x35958 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x35959 = x35958 * x6;
        Fp x35960 = x35957 + x35959;
        Fp x35961 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x35962 = x35961 * x11;
        Fp x35963 = x35960 + x35962;
        Fp x35964 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x35965 = x35964 * x27;
        Fp x35966 = x35963 + x35965;
        Fp x35967 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x35968 = x35967 * x12;
        Fp x35969 = x35966 + x35968;
        Fp x35970 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x35971 = x35970 * x28;
        Fp x35972 = x35969 + x35971;
        Fp x35973 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x35974 = x35973 * x13;
        Fp x35975 = x35972 + x35974;
        Fp x35976 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x35977 = x35976 * x29;
        Fp x35978 = x35975 + x35977;
        Fp x35979 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x35980 = x35979 * x14;
        Fp x35981 = x35978 + x35980;
        Fp x35982 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x35983 = x35982 * x30;
        Fp x35984 = x35981 + x35983;
        Fp x35985 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x35986 = x35985 * x15;
        Fp x35987 = x35984 + x35986;
        Fp x35988 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x35989 = x35988 * x31;
        Fp x35990 = x35987 + x35989;
        Fp x35991 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x35992 = x35991 * x16;
        Fp x35993 = x35990 + x35992;
        Fp x35994 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x35995 = x35994 * x32;
        Fp x35996 = x35993 + x35995;
        Fp x35997 = x31645 - x35996;
        Fp x35998 = x35997 * x33;
        args[2][108 * steps + cycle] = x35998;
        Fp x35999 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x36000 = x31646 + x35999;
        {
          Fp x36001 = Fp(x36000.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x36001;
          Fp x36002 = x36000 - x36001;
          Fp x36003 = x36002 * x26;
          Fp x36004 = Fp(x36003.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x36004;
          Fp x36005 = x36003 - x36004;
          Fp x36006 = x36005 * x26;
          Fp x36007 = Fp(x36006.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x36007;
          Fp x36008 = x36006 - x36007;
          Fp x36009 = x36008 * x26;
          Fp x36010 = Fp(x36009.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x36010;
          Fp x36011 = x36009 - x36010;
          Fp x36012 = x36011 * x26;
          Fp x36013 = Fp(x36012.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x36013;
          Fp x36014 = x36012 - x36013;
          Fp x36015 = x36014 * x26;
          Fp x36016 = Fp(x36015.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x36016;
          Fp x36017 = x36015 - x36016;
          Fp x36018 = x36017 * x26;
          Fp x36019 = Fp(x36018.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x36019;
          Fp x36020 = x36018 - x36019;
          Fp x36021 = x36020 * x26;
          Fp x36022 = Fp(x36021.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x36022;
          Fp x36023 = x36021 - x36022;
          Fp x36024 = x36023 * x26;
          Fp x36025 = Fp(x36024.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x36025;
          Fp x36026 = x36024 - x36025;
          Fp x36027 = x36026 * x26;
          Fp x36028 = Fp(x36027.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x36028;
          Fp x36029 = x36027 - x36028;
          Fp x36030 = x36029 * x26;
          Fp x36031 = Fp(x36030.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x36031;
          Fp x36032 = x36030 - x36031;
          Fp x36033 = x36032 * x26;
          Fp x36034 = Fp(x36033.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x36034;
          Fp x36035 = x36033 - x36034;
          Fp x36036 = x36035 * x26;
          Fp x36037 = Fp(x36036.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x36037;
          Fp x36038 = x36036 - x36037;
          Fp x36039 = x36038 * x26;
          Fp x36040 = Fp(x36039.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x36040;
          Fp x36041 = x36039 - x36040;
          Fp x36042 = x36041 * x26;
          Fp x36043 = Fp(x36042.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x36043;
          Fp x36044 = x36042 - x36043;
          Fp x36045 = x36044 * x26;
          Fp x36046 = Fp(x36045.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x36046;
        }
        Fp x36047 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x36048 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x36049 = x36048 * x1;
        Fp x36050 = x36047 + x36049;
        Fp x36051 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x36052 = x36051 * x3;
        Fp x36053 = x36050 + x36052;
        Fp x36054 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x36055 = x36054 * x6;
        Fp x36056 = x36053 + x36055;
        Fp x36057 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x36058 = x36057 * x11;
        Fp x36059 = x36056 + x36058;
        Fp x36060 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x36061 = x36060 * x27;
        Fp x36062 = x36059 + x36061;
        Fp x36063 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x36064 = x36063 * x12;
        Fp x36065 = x36062 + x36064;
        Fp x36066 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x36067 = x36066 * x28;
        Fp x36068 = x36065 + x36067;
        Fp x36069 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x36070 = x36069 * x13;
        Fp x36071 = x36068 + x36070;
        Fp x36072 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x36073 = x36072 * x29;
        Fp x36074 = x36071 + x36073;
        Fp x36075 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x36076 = x36075 * x14;
        Fp x36077 = x36074 + x36076;
        Fp x36078 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x36079 = x36078 * x30;
        Fp x36080 = x36077 + x36079;
        Fp x36081 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x36082 = x36081 * x15;
        Fp x36083 = x36080 + x36082;
        Fp x36084 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x36085 = x36084 * x31;
        Fp x36086 = x36083 + x36085;
        Fp x36087 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x36088 = x36087 * x16;
        Fp x36089 = x36086 + x36088;
        Fp x36090 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x36091 = x36090 * x32;
        Fp x36092 = x36089 + x36091;
        Fp x36093 = x36000 - x36092;
        Fp x36094 = x36093 * x33;
        args[2][109 * steps + cycle] = x36094;
        {
          {
            Fp x36095 = (x35996 == 0) ? Fp(1) : Fp(0);
            Fp x36096 = x71 - x36095;
            args[2][114 * steps + cycle] = x36096;
            Fp x36097 = inv(x35996);
            args[2][115 * steps + cycle] = x36097;
          }
          Fp x36098 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x36099 = x35996 * x36098;
          Fp x36100 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x36101 = x36099 - x36100;
          if (x36101 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x36102 = x71 - x36100;
          Fp x36103 = x36102 * x35996;
          if (x36103 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x36104 = (x36092 == 0) ? Fp(1) : Fp(0);
            Fp x36105 = x71 - x36104;
            args[2][116 * steps + cycle] = x36105;
            Fp x36106 = inv(x36092);
            args[2][117 * steps + cycle] = x36106;
          }
          Fp x36107 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x36108 = x36092 * x36107;
          Fp x36109 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x36110 = x36108 - x36109;
          if (x36110 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x36111 = x71 - x36109;
          Fp x36112 = x36111 * x36092;
          if (x36112 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x36113 = x36102 * x36111;
          Fp x36114 = x71 - x36113;
          args[2][111 * steps + cycle] = x36114;
          Fp x36115 = x71 - x35885;
          Fp x36116 = x35693 * x36115;
          Fp x36117 = x71 - x36090;
          Fp x36118 = x36116 * x36117;
          Fp x36119 = x71 - x35693;
          Fp x36120 = x36119 * x35885;
          Fp x36121 = x36120 * x36090;
          Fp x36122 = x36118 + x36121;
          args[2][112 * steps + cycle] = x36122;
          Fp x36123 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x36124 = x36123 + x36090;
          Fp x36125 = x36123 * x1;
          Fp x36126 = x36125 * x36090;
          Fp x36127 = x36124 - x36126;
          args[2][113 * steps + cycle] = x36127;
        }
        args[2][100 * steps + cycle] = x35996;
        args[2][101 * steps + cycle] = x36092;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x36128 = x31668 + x3;
        args[2][104 * steps + cycle] = x36128;
        args[2][105 * steps + cycle] = x31690;
        Fp x36129 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x36130 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x36131 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x36132 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x36133 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x36134 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x31690;
        host_args[2] = x31668;
        host_args[3] = x35695;
        host_args[4] = x35599;
        host_args[5] = x35887;
        host_args[6] = x35793;
        host_args[7] = x36092;
        host_args[8] = x35996;
        host_args[9] = x36129;
        host_args[10] = x36130;
        host_args[11] = x36131;
        host_args[12] = x36132;
        host_args[13] = x36133;
        host_args[14] = x36134;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x36135 = args[2][79 * steps + ((cycle - 1) & mask)];
      if (x36135 != 0) {
        {
          Fp x36136 = Fp(x31643.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x36136;
          Fp x36137 = x31643 - x36136;
          Fp x36138 = x36137 * x26;
          Fp x36139 = Fp(x36138.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x36139;
          Fp x36140 = x36138 - x36139;
          Fp x36141 = x36140 * x26;
          Fp x36142 = Fp(x36141.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x36142;
          Fp x36143 = x36141 - x36142;
          Fp x36144 = x36143 * x26;
          Fp x36145 = Fp(x36144.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x36145;
          Fp x36146 = x36144 - x36145;
          Fp x36147 = x36146 * x26;
          Fp x36148 = Fp(x36147.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x36148;
          Fp x36149 = x36147 - x36148;
          Fp x36150 = x36149 * x26;
          Fp x36151 = Fp(x36150.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x36151;
          Fp x36152 = x36150 - x36151;
          Fp x36153 = x36152 * x26;
          Fp x36154 = Fp(x36153.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x36154;
          Fp x36155 = x36153 - x36154;
          Fp x36156 = x36155 * x26;
          Fp x36157 = Fp(x36156.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x36157;
          Fp x36158 = x36156 - x36157;
          Fp x36159 = x36158 * x26;
          Fp x36160 = Fp(x36159.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x36160;
          Fp x36161 = x36159 - x36160;
          Fp x36162 = x36161 * x26;
          Fp x36163 = Fp(x36162.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x36163;
          Fp x36164 = x36162 - x36163;
          Fp x36165 = x36164 * x26;
          Fp x36166 = Fp(x36165.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x36166;
          Fp x36167 = x36165 - x36166;
          Fp x36168 = x36167 * x26;
          Fp x36169 = Fp(x36168.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x36169;
          Fp x36170 = x36168 - x36169;
          Fp x36171 = x36170 * x26;
          Fp x36172 = Fp(x36171.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x36172;
          Fp x36173 = x36171 - x36172;
          Fp x36174 = x36173 * x26;
          Fp x36175 = Fp(x36174.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x36175;
          Fp x36176 = x36174 - x36175;
          Fp x36177 = x36176 * x26;
          Fp x36178 = Fp(x36177.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x36178;
          Fp x36179 = x36177 - x36178;
          Fp x36180 = x36179 * x26;
          Fp x36181 = Fp(x36180.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x36181;
        }
        Fp x36182 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x36183 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x36184 = x36183 * x1;
        Fp x36185 = x36182 + x36184;
        Fp x36186 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x36187 = x36186 * x3;
        Fp x36188 = x36185 + x36187;
        Fp x36189 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x36190 = x36189 * x6;
        Fp x36191 = x36188 + x36190;
        Fp x36192 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x36193 = x36192 * x11;
        Fp x36194 = x36191 + x36193;
        Fp x36195 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x36196 = x36195 * x27;
        Fp x36197 = x36194 + x36196;
        Fp x36198 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x36199 = x36198 * x12;
        Fp x36200 = x36197 + x36199;
        Fp x36201 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x36202 = x36201 * x28;
        Fp x36203 = x36200 + x36202;
        Fp x36204 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x36205 = x36204 * x13;
        Fp x36206 = x36203 + x36205;
        Fp x36207 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x36208 = x36207 * x29;
        Fp x36209 = x36206 + x36208;
        Fp x36210 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x36211 = x36210 * x14;
        Fp x36212 = x36209 + x36211;
        Fp x36213 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x36214 = x36213 * x30;
        Fp x36215 = x36212 + x36214;
        Fp x36216 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x36217 = x36216 * x15;
        Fp x36218 = x36215 + x36217;
        Fp x36219 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x36220 = x36219 * x31;
        Fp x36221 = x36218 + x36220;
        Fp x36222 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x36223 = x36222 * x16;
        Fp x36224 = x36221 + x36223;
        Fp x36225 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x36226 = x36225 * x32;
        Fp x36227 = x36224 + x36226;
        Fp x36228 = x31643 - x36227;
        Fp x36229 = x36228 * x33;
        args[2][106 * steps + cycle] = x36229;
        Fp x36230 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x36231 = x31644 + x36230;
        {
          Fp x36232 = Fp(x36231.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x36232;
          Fp x36233 = x36231 - x36232;
          Fp x36234 = x36233 * x26;
          Fp x36235 = Fp(x36234.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x36235;
          Fp x36236 = x36234 - x36235;
          Fp x36237 = x36236 * x26;
          Fp x36238 = Fp(x36237.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x36238;
          Fp x36239 = x36237 - x36238;
          Fp x36240 = x36239 * x26;
          Fp x36241 = Fp(x36240.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x36241;
          Fp x36242 = x36240 - x36241;
          Fp x36243 = x36242 * x26;
          Fp x36244 = Fp(x36243.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x36244;
          Fp x36245 = x36243 - x36244;
          Fp x36246 = x36245 * x26;
          Fp x36247 = Fp(x36246.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x36247;
          Fp x36248 = x36246 - x36247;
          Fp x36249 = x36248 * x26;
          Fp x36250 = Fp(x36249.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x36250;
          Fp x36251 = x36249 - x36250;
          Fp x36252 = x36251 * x26;
          Fp x36253 = Fp(x36252.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x36253;
          Fp x36254 = x36252 - x36253;
          Fp x36255 = x36254 * x26;
          Fp x36256 = Fp(x36255.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x36256;
          Fp x36257 = x36255 - x36256;
          Fp x36258 = x36257 * x26;
          Fp x36259 = Fp(x36258.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x36259;
          Fp x36260 = x36258 - x36259;
          Fp x36261 = x36260 * x26;
          Fp x36262 = Fp(x36261.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x36262;
          Fp x36263 = x36261 - x36262;
          Fp x36264 = x36263 * x26;
          Fp x36265 = Fp(x36264.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x36265;
          Fp x36266 = x36264 - x36265;
          Fp x36267 = x36266 * x26;
          Fp x36268 = Fp(x36267.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x36268;
          Fp x36269 = x36267 - x36268;
          Fp x36270 = x36269 * x26;
          Fp x36271 = Fp(x36270.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x36271;
          Fp x36272 = x36270 - x36271;
          Fp x36273 = x36272 * x26;
          Fp x36274 = Fp(x36273.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x36274;
          Fp x36275 = x36273 - x36274;
          Fp x36276 = x36275 * x26;
          Fp x36277 = Fp(x36276.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x36277;
        }
        Fp x36278 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x36279 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x36280 = x36279 * x1;
        Fp x36281 = x36278 + x36280;
        Fp x36282 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x36283 = x36282 * x3;
        Fp x36284 = x36281 + x36283;
        Fp x36285 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x36286 = x36285 * x6;
        Fp x36287 = x36284 + x36286;
        Fp x36288 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x36289 = x36288 * x11;
        Fp x36290 = x36287 + x36289;
        Fp x36291 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x36292 = x36291 * x27;
        Fp x36293 = x36290 + x36292;
        Fp x36294 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x36295 = x36294 * x12;
        Fp x36296 = x36293 + x36295;
        Fp x36297 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x36298 = x36297 * x28;
        Fp x36299 = x36296 + x36298;
        Fp x36300 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x36301 = x36300 * x13;
        Fp x36302 = x36299 + x36301;
        Fp x36303 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x36304 = x36303 * x29;
        Fp x36305 = x36302 + x36304;
        Fp x36306 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x36307 = x36306 * x14;
        Fp x36308 = x36305 + x36307;
        Fp x36309 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x36310 = x36309 * x30;
        Fp x36311 = x36308 + x36310;
        Fp x36312 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x36313 = x36312 * x15;
        Fp x36314 = x36311 + x36313;
        Fp x36315 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x36316 = x36315 * x31;
        Fp x36317 = x36314 + x36316;
        Fp x36318 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x36319 = x36318 * x16;
        Fp x36320 = x36317 + x36319;
        Fp x36321 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x36322 = x36321 * x32;
        Fp x36323 = x36320 + x36322;
        Fp x36324 = x36231 - x36323;
        Fp x36325 = x36324 * x33;
        args[2][107 * steps + cycle] = x36325;
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x36326 = host_outs[0];
          Fp x36327 = host_outs[1];
          args[2][129 * steps + cycle] = x36326;
          args[2][130 * steps + cycle] = x36327;
        }
        Fp x36328 = args[2][118 * steps + ((cycle - 1) & mask)];
        Fp x36329 = args[2][119 * steps + ((cycle - 1) & mask)];
        {
          Fp x36330 = Fp(x36328.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x36330;
          Fp x36331 = x36328 - x36330;
          Fp x36332 = x36331 * x26;
          Fp x36333 = Fp(x36332.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x36333;
          Fp x36334 = x36332 - x36333;
          Fp x36335 = x36334 * x26;
          Fp x36336 = Fp(x36335.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x36336;
          Fp x36337 = x36335 - x36336;
          Fp x36338 = x36337 * x26;
          Fp x36339 = Fp(x36338.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x36339;
          Fp x36340 = x36338 - x36339;
          Fp x36341 = x36340 * x26;
          Fp x36342 = Fp(x36341.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x36342;
          Fp x36343 = x36341 - x36342;
          Fp x36344 = x36343 * x26;
          Fp x36345 = Fp(x36344.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x36345;
          Fp x36346 = x36344 - x36345;
          Fp x36347 = x36346 * x26;
          Fp x36348 = Fp(x36347.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x36348;
          Fp x36349 = x36347 - x36348;
          Fp x36350 = x36349 * x26;
          Fp x36351 = Fp(x36350.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x36351;
          Fp x36352 = x36350 - x36351;
          Fp x36353 = x36352 * x26;
          Fp x36354 = Fp(x36353.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x36354;
          Fp x36355 = x36353 - x36354;
          Fp x36356 = x36355 * x26;
          Fp x36357 = Fp(x36356.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x36357;
          Fp x36358 = x36356 - x36357;
          Fp x36359 = x36358 * x26;
          Fp x36360 = Fp(x36359.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x36360;
          Fp x36361 = x36359 - x36360;
          Fp x36362 = x36361 * x26;
          Fp x36363 = Fp(x36362.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x36363;
          Fp x36364 = x36362 - x36363;
          Fp x36365 = x36364 * x26;
          Fp x36366 = Fp(x36365.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x36366;
          Fp x36367 = x36365 - x36366;
          Fp x36368 = x36367 * x26;
          Fp x36369 = Fp(x36368.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x36369;
          Fp x36370 = x36368 - x36369;
          Fp x36371 = x36370 * x26;
          Fp x36372 = Fp(x36371.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x36372;
          Fp x36373 = x36371 - x36372;
          Fp x36374 = x36373 * x26;
          Fp x36375 = Fp(x36374.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x36375;
        }
        Fp x36376 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x36377 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x36378 = x36377 * x1;
        Fp x36379 = x36376 + x36378;
        Fp x36380 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x36381 = x36380 * x3;
        Fp x36382 = x36379 + x36381;
        Fp x36383 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x36384 = x36383 * x6;
        Fp x36385 = x36382 + x36384;
        Fp x36386 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x36387 = x36386 * x11;
        Fp x36388 = x36385 + x36387;
        Fp x36389 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x36390 = x36389 * x27;
        Fp x36391 = x36388 + x36390;
        Fp x36392 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x36393 = x36392 * x12;
        Fp x36394 = x36391 + x36393;
        Fp x36395 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x36396 = x36395 * x28;
        Fp x36397 = x36394 + x36396;
        Fp x36398 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x36399 = x36398 * x13;
        Fp x36400 = x36397 + x36399;
        Fp x36401 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x36402 = x36401 * x29;
        Fp x36403 = x36400 + x36402;
        Fp x36404 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x36405 = x36404 * x14;
        Fp x36406 = x36403 + x36405;
        Fp x36407 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x36408 = x36407 * x30;
        Fp x36409 = x36406 + x36408;
        Fp x36410 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x36411 = x36410 * x15;
        Fp x36412 = x36409 + x36411;
        Fp x36413 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x36414 = x36413 * x31;
        Fp x36415 = x36412 + x36414;
        Fp x36416 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x36417 = x36416 * x16;
        Fp x36418 = x36415 + x36417;
        Fp x36419 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x36420 = x36419 * x32;
        Fp x36421 = x36418 + x36420;
        Fp x36422 = x36328 - x36421;
        Fp x36423 = x36422 * x33;
        if (x36423 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:80");
        {
          Fp x36424 = Fp(x36329.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x36424;
          Fp x36425 = x36329 - x36424;
          Fp x36426 = x36425 * x26;
          Fp x36427 = Fp(x36426.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x36427;
          Fp x36428 = x36426 - x36427;
          Fp x36429 = x36428 * x26;
          Fp x36430 = Fp(x36429.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x36430;
          Fp x36431 = x36429 - x36430;
          Fp x36432 = x36431 * x26;
          Fp x36433 = Fp(x36432.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x36433;
          Fp x36434 = x36432 - x36433;
          Fp x36435 = x36434 * x26;
          Fp x36436 = Fp(x36435.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x36436;
          Fp x36437 = x36435 - x36436;
          Fp x36438 = x36437 * x26;
          Fp x36439 = Fp(x36438.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x36439;
          Fp x36440 = x36438 - x36439;
          Fp x36441 = x36440 * x26;
          Fp x36442 = Fp(x36441.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x36442;
          Fp x36443 = x36441 - x36442;
          Fp x36444 = x36443 * x26;
          Fp x36445 = Fp(x36444.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x36445;
          Fp x36446 = x36444 - x36445;
          Fp x36447 = x36446 * x26;
          Fp x36448 = Fp(x36447.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x36448;
          Fp x36449 = x36447 - x36448;
          Fp x36450 = x36449 * x26;
          Fp x36451 = Fp(x36450.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x36451;
          Fp x36452 = x36450 - x36451;
          Fp x36453 = x36452 * x26;
          Fp x36454 = Fp(x36453.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x36454;
          Fp x36455 = x36453 - x36454;
          Fp x36456 = x36455 * x26;
          Fp x36457 = Fp(x36456.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x36457;
          Fp x36458 = x36456 - x36457;
          Fp x36459 = x36458 * x26;
          Fp x36460 = Fp(x36459.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x36460;
          Fp x36461 = x36459 - x36460;
          Fp x36462 = x36461 * x26;
          Fp x36463 = Fp(x36462.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x36463;
          Fp x36464 = x36462 - x36463;
          Fp x36465 = x36464 * x26;
          Fp x36466 = Fp(x36465.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x36466;
          Fp x36467 = x36465 - x36466;
          Fp x36468 = x36467 * x26;
          Fp x36469 = Fp(x36468.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x36469;
        }
        Fp x36470 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x36471 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x36472 = x36471 * x1;
        Fp x36473 = x36470 + x36472;
        Fp x36474 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x36475 = x36474 * x3;
        Fp x36476 = x36473 + x36475;
        Fp x36477 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x36478 = x36477 * x6;
        Fp x36479 = x36476 + x36478;
        Fp x36480 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x36481 = x36480 * x11;
        Fp x36482 = x36479 + x36481;
        Fp x36483 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x36484 = x36483 * x27;
        Fp x36485 = x36482 + x36484;
        Fp x36486 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x36487 = x36486 * x12;
        Fp x36488 = x36485 + x36487;
        Fp x36489 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x36490 = x36489 * x28;
        Fp x36491 = x36488 + x36490;
        Fp x36492 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x36493 = x36492 * x13;
        Fp x36494 = x36491 + x36493;
        Fp x36495 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x36496 = x36495 * x29;
        Fp x36497 = x36494 + x36496;
        Fp x36498 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x36499 = x36498 * x14;
        Fp x36500 = x36497 + x36499;
        Fp x36501 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x36502 = x36501 * x30;
        Fp x36503 = x36500 + x36502;
        Fp x36504 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x36505 = x36504 * x15;
        Fp x36506 = x36503 + x36505;
        Fp x36507 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x36508 = x36507 * x31;
        Fp x36509 = x36506 + x36508;
        Fp x36510 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x36511 = x36510 * x16;
        Fp x36512 = x36509 + x36511;
        Fp x36513 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x36514 = x36513 * x32;
        Fp x36515 = x36512 + x36514;
        Fp x36516 = x36329 - x36515;
        Fp x36517 = x36516 * x33;
        if (x36517 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:80");
        {
          Fp x36518 = (x36185 == 0) ? Fp(1) : Fp(0);
          args[2][96 * steps + cycle] = x36518;
          Fp x36519 = x36185 - x71;
          Fp x36520 = (x36519 == 0) ? Fp(1) : Fp(0);
          args[2][97 * steps + cycle] = x36520;
          Fp x36521 = x36185 - x1;
          Fp x36522 = (x36521 == 0) ? Fp(1) : Fp(0);
          args[2][98 * steps + cycle] = x36522;
          Fp x36523 = x36185 - x2;
          Fp x36524 = (x36523 == 0) ? Fp(1) : Fp(0);
          args[2][99 * steps + cycle] = x36524;
        }
        Fp x36525 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x36526 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x36527 = x36526 * x1;
        Fp x36528 = x36525 + x36527;
        Fp x36529 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x36530 = x36529 * x2;
        Fp x36531 = x36528 + x36530;
        Fp x36532 = x36531 - x36185;
        if (x36532 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
        Fp x36533 = x31668 + x31645;
        Fp x36534 = x31690 + x31646;
        {
          Fp x36535 = Fp(x36533.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x36535;
          Fp x36536 = x36533 - x36535;
          Fp x36537 = x36536 * x26;
          Fp x36538 = Fp(x36537.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x36538;
          Fp x36539 = x36537 - x36538;
          Fp x36540 = x36539 * x26;
          Fp x36541 = Fp(x36540.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x36541;
          Fp x36542 = x36540 - x36541;
          Fp x36543 = x36542 * x26;
          Fp x36544 = Fp(x36543.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x36544;
          Fp x36545 = x36543 - x36544;
          Fp x36546 = x36545 * x26;
          Fp x36547 = Fp(x36546.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x36547;
          Fp x36548 = x36546 - x36547;
          Fp x36549 = x36548 * x26;
          Fp x36550 = Fp(x36549.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x36550;
          Fp x36551 = x36549 - x36550;
          Fp x36552 = x36551 * x26;
          Fp x36553 = Fp(x36552.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x36553;
          Fp x36554 = x36552 - x36553;
          Fp x36555 = x36554 * x26;
          Fp x36556 = Fp(x36555.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x36556;
          Fp x36557 = x36555 - x36556;
          Fp x36558 = x36557 * x26;
          Fp x36559 = Fp(x36558.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x36559;
          Fp x36560 = x36558 - x36559;
          Fp x36561 = x36560 * x26;
          Fp x36562 = Fp(x36561.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x36562;
          Fp x36563 = x36561 - x36562;
          Fp x36564 = x36563 * x26;
          Fp x36565 = Fp(x36564.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x36565;
          Fp x36566 = x36564 - x36565;
          Fp x36567 = x36566 * x26;
          Fp x36568 = Fp(x36567.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x36568;
          Fp x36569 = x36567 - x36568;
          Fp x36570 = x36569 * x26;
          Fp x36571 = Fp(x36570.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x36571;
          Fp x36572 = x36570 - x36571;
          Fp x36573 = x36572 * x26;
          Fp x36574 = Fp(x36573.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x36574;
          Fp x36575 = x36573 - x36574;
          Fp x36576 = x36575 * x26;
          Fp x36577 = Fp(x36576.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x36577;
          Fp x36578 = x36576 - x36577;
          Fp x36579 = x36578 * x26;
          Fp x36580 = Fp(x36579.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x36580;
        }
        Fp x36581 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x36582 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x36583 = x36582 * x1;
        Fp x36584 = x36581 + x36583;
        Fp x36585 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x36586 = x36585 * x3;
        Fp x36587 = x36584 + x36586;
        Fp x36588 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x36589 = x36588 * x6;
        Fp x36590 = x36587 + x36589;
        Fp x36591 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x36592 = x36591 * x11;
        Fp x36593 = x36590 + x36592;
        Fp x36594 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x36595 = x36594 * x27;
        Fp x36596 = x36593 + x36595;
        Fp x36597 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x36598 = x36597 * x12;
        Fp x36599 = x36596 + x36598;
        Fp x36600 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x36601 = x36600 * x28;
        Fp x36602 = x36599 + x36601;
        Fp x36603 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x36604 = x36603 * x13;
        Fp x36605 = x36602 + x36604;
        Fp x36606 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x36607 = x36606 * x29;
        Fp x36608 = x36605 + x36607;
        Fp x36609 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x36610 = x36609 * x14;
        Fp x36611 = x36608 + x36610;
        Fp x36612 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x36613 = x36612 * x30;
        Fp x36614 = x36611 + x36613;
        Fp x36615 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x36616 = x36615 * x15;
        Fp x36617 = x36614 + x36616;
        Fp x36618 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x36619 = x36618 * x31;
        Fp x36620 = x36617 + x36619;
        Fp x36621 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x36622 = x36621 * x16;
        Fp x36623 = x36620 + x36622;
        Fp x36624 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x36625 = x36624 * x32;
        Fp x36626 = x36623 + x36625;
        Fp x36627 = x36533 - x36626;
        Fp x36628 = x36627 * x33;
        args[2][108 * steps + cycle] = x36628;
        Fp x36629 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x36630 = x36534 + x36629;
        {
          Fp x36631 = Fp(x36630.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x36631;
          Fp x36632 = x36630 - x36631;
          Fp x36633 = x36632 * x26;
          Fp x36634 = Fp(x36633.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x36634;
          Fp x36635 = x36633 - x36634;
          Fp x36636 = x36635 * x26;
          Fp x36637 = Fp(x36636.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x36637;
          Fp x36638 = x36636 - x36637;
          Fp x36639 = x36638 * x26;
          Fp x36640 = Fp(x36639.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x36640;
          Fp x36641 = x36639 - x36640;
          Fp x36642 = x36641 * x26;
          Fp x36643 = Fp(x36642.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x36643;
          Fp x36644 = x36642 - x36643;
          Fp x36645 = x36644 * x26;
          Fp x36646 = Fp(x36645.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x36646;
          Fp x36647 = x36645 - x36646;
          Fp x36648 = x36647 * x26;
          Fp x36649 = Fp(x36648.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x36649;
          Fp x36650 = x36648 - x36649;
          Fp x36651 = x36650 * x26;
          Fp x36652 = Fp(x36651.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x36652;
          Fp x36653 = x36651 - x36652;
          Fp x36654 = x36653 * x26;
          Fp x36655 = Fp(x36654.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x36655;
          Fp x36656 = x36654 - x36655;
          Fp x36657 = x36656 * x26;
          Fp x36658 = Fp(x36657.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x36658;
          Fp x36659 = x36657 - x36658;
          Fp x36660 = x36659 * x26;
          Fp x36661 = Fp(x36660.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x36661;
          Fp x36662 = x36660 - x36661;
          Fp x36663 = x36662 * x26;
          Fp x36664 = Fp(x36663.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x36664;
          Fp x36665 = x36663 - x36664;
          Fp x36666 = x36665 * x26;
          Fp x36667 = Fp(x36666.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x36667;
          Fp x36668 = x36666 - x36667;
          Fp x36669 = x36668 * x26;
          Fp x36670 = Fp(x36669.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x36670;
          Fp x36671 = x36669 - x36670;
          Fp x36672 = x36671 * x26;
          Fp x36673 = Fp(x36672.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x36673;
          Fp x36674 = x36672 - x36673;
          Fp x36675 = x36674 * x26;
          Fp x36676 = Fp(x36675.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x36676;
        }
        Fp x36677 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x36678 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x36679 = x36678 * x1;
        Fp x36680 = x36677 + x36679;
        Fp x36681 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x36682 = x36681 * x3;
        Fp x36683 = x36680 + x36682;
        Fp x36684 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x36685 = x36684 * x6;
        Fp x36686 = x36683 + x36685;
        Fp x36687 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x36688 = x36687 * x11;
        Fp x36689 = x36686 + x36688;
        Fp x36690 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x36691 = x36690 * x27;
        Fp x36692 = x36689 + x36691;
        Fp x36693 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x36694 = x36693 * x12;
        Fp x36695 = x36692 + x36694;
        Fp x36696 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x36697 = x36696 * x28;
        Fp x36698 = x36695 + x36697;
        Fp x36699 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x36700 = x36699 * x13;
        Fp x36701 = x36698 + x36700;
        Fp x36702 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x36703 = x36702 * x29;
        Fp x36704 = x36701 + x36703;
        Fp x36705 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x36706 = x36705 * x14;
        Fp x36707 = x36704 + x36706;
        Fp x36708 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x36709 = x36708 * x30;
        Fp x36710 = x36707 + x36709;
        Fp x36711 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x36712 = x36711 * x15;
        Fp x36713 = x36710 + x36712;
        Fp x36714 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x36715 = x36714 * x31;
        Fp x36716 = x36713 + x36715;
        Fp x36717 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x36718 = x36717 * x16;
        Fp x36719 = x36716 + x36718;
        Fp x36720 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x36721 = x36720 * x32;
        Fp x36722 = x36719 + x36721;
        Fp x36723 = x36630 - x36722;
        Fp x36724 = x36723 * x33;
        args[2][109 * steps + cycle] = x36724;
        {
          {
            Fp x36725 = (x36626 == 0) ? Fp(1) : Fp(0);
            Fp x36726 = x71 - x36725;
            args[2][114 * steps + cycle] = x36726;
            Fp x36727 = inv(x36626);
            args[2][115 * steps + cycle] = x36727;
          }
          Fp x36728 = args[2][115 * steps + ((cycle - 0) & mask)];
          Fp x36729 = x36626 * x36728;
          Fp x36730 = args[2][114 * steps + ((cycle - 0) & mask)];
          Fp x36731 = x36729 - x36730;
          if (x36731 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x36732 = x71 - x36730;
          Fp x36733 = x36732 * x36626;
          if (x36733 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          {
            Fp x36734 = (x36722 == 0) ? Fp(1) : Fp(0);
            Fp x36735 = x71 - x36734;
            args[2][116 * steps + cycle] = x36735;
            Fp x36736 = inv(x36722);
            args[2][117 * steps + cycle] = x36736;
          }
          Fp x36737 = args[2][117 * steps + ((cycle - 0) & mask)];
          Fp x36738 = x36722 * x36737;
          Fp x36739 = args[2][116 * steps + ((cycle - 0) & mask)];
          Fp x36740 = x36738 - x36739;
          if (x36740 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
          Fp x36741 = x71 - x36739;
          Fp x36742 = x36741 * x36722;
          if (x36742 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
          Fp x36743 = x36732 * x36741;
          Fp x36744 = x71 - x36743;
          args[2][111 * steps + cycle] = x36744;
          Fp x36745 = x71 - x36513;
          Fp x36746 = x36321 * x36745;
          Fp x36747 = x71 - x36720;
          Fp x36748 = x36746 * x36747;
          Fp x36749 = x71 - x36321;
          Fp x36750 = x36749 * x36513;
          Fp x36751 = x36750 * x36720;
          Fp x36752 = x36748 + x36751;
          args[2][112 * steps + cycle] = x36752;
          Fp x36753 = args[2][112 * steps + ((cycle - 0) & mask)];
          Fp x36754 = x36753 + x36720;
          Fp x36755 = x36753 * x1;
          Fp x36756 = x36755 * x36720;
          Fp x36757 = x36754 - x36756;
          args[2][113 * steps + cycle] = x36757;
        }
        args[2][100 * steps + cycle] = x36626;
        args[2][101 * steps + cycle] = x36722;
        args[2][102 * steps + cycle] = x71;
        args[2][103 * steps + cycle] = x70;
        Fp x36758 = x31668 + x3;
        args[2][104 * steps + cycle] = x36758;
        args[2][105 * steps + cycle] = x31690;
        Fp x36759 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x36760 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x36761 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x36762 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x36763 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x36764 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x31690;
        host_args[2] = x31668;
        host_args[3] = x36323;
        host_args[4] = x36227;
        host_args[5] = x36515;
        host_args[6] = x36421;
        host_args[7] = x36722;
        host_args[8] = x36626;
        host_args[9] = x36759;
        host_args[10] = x36760;
        host_args[11] = x36761;
        host_args[12] = x36762;
        host_args[13] = x36763;
        host_args[14] = x36764;
        host(ctx, "log", "C%u: pc: %04x%04x Compute: x1 = 0x%04x%04x, x2 = 0x%04x%04x, x3 = 0x%04x%04x, nz = %d, carry = %d, overflow = %d, lt = %d, result = 0x%04x%04x", host_args.data(), 15, host_outs.data(), 0);
      }
      Fp x36765 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x36766 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x36767 = x36766 * x1;
      Fp x36768 = x36765 + x36767;
      Fp x36769 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x36770 = x36769 * x3;
      Fp x36771 = x36768 + x36770;
      Fp x36772 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x36773 = x36772 * x6;
      Fp x36774 = x36771 + x36773;
      Fp x36775 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x36776 = x36775 * x11;
      Fp x36777 = x36774 + x36776;
      Fp x36778 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x36779 = x36778 * x27;
      Fp x36780 = x36777 + x36779;
      Fp x36781 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x36782 = x36781 * x12;
      Fp x36783 = x36780 + x36782;
      Fp x36784 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x36785 = x36784 * x28;
      Fp x36786 = x36783 + x36785;
      Fp x36787 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x36788 = x36787 * x13;
      Fp x36789 = x36786 + x36788;
      Fp x36790 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x36791 = x36790 * x29;
      Fp x36792 = x36789 + x36791;
      Fp x36793 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x36794 = x36793 * x14;
      Fp x36795 = x36792 + x36794;
      Fp x36796 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x36797 = x36796 * x30;
      Fp x36798 = x36795 + x36797;
      Fp x36799 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x36800 = x36799 * x15;
      Fp x36801 = x36798 + x36800;
      Fp x36802 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x36803 = x36802 * x31;
      Fp x36804 = x36801 + x36803;
      Fp x36805 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x36806 = x36805 * x16;
      Fp x36807 = x36804 + x36806;
      Fp x36808 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x36809 = x36808 * x32;
      Fp x36810 = x36807 + x36809;
      {
        Fp x36811 = (x36810 == 0) ? Fp(1) : Fp(0);
        Fp x36812 = x71 - x36811;
        args[2][114 * steps + cycle] = x36812;
        Fp x36813 = inv(x36810);
        args[2][115 * steps + cycle] = x36813;
      }
      Fp x36814 = args[2][115 * steps + ((cycle - 0) & mask)];
      Fp x36815 = x36810 * x36814;
      Fp x36816 = args[2][114 * steps + ((cycle - 0) & mask)];
      Fp x36817 = x36815 - x36816;
      if (x36817 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
      Fp x36818 = x71 - x36816;
      Fp x36819 = x36818 * x36810;
      if (x36819 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
      Fp x36820 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x36821 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x36822 = x36821 * x1;
      Fp x36823 = x36820 + x36822;
      Fp x36824 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x36825 = x36824 * x3;
      Fp x36826 = x36823 + x36825;
      Fp x36827 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x36828 = x36827 * x6;
      Fp x36829 = x36826 + x36828;
      Fp x36830 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x36831 = x36830 * x11;
      Fp x36832 = x36829 + x36831;
      Fp x36833 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x36834 = x36833 * x27;
      Fp x36835 = x36832 + x36834;
      Fp x36836 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x36837 = x36836 * x12;
      Fp x36838 = x36835 + x36837;
      Fp x36839 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x36840 = x36839 * x28;
      Fp x36841 = x36838 + x36840;
      Fp x36842 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x36843 = x36842 * x13;
      Fp x36844 = x36841 + x36843;
      Fp x36845 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x36846 = x36845 * x29;
      Fp x36847 = x36844 + x36846;
      Fp x36848 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x36849 = x36848 * x14;
      Fp x36850 = x36847 + x36849;
      Fp x36851 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x36852 = x36851 * x30;
      Fp x36853 = x36850 + x36852;
      Fp x36854 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x36855 = x36854 * x15;
      Fp x36856 = x36853 + x36855;
      Fp x36857 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x36858 = x36857 * x31;
      Fp x36859 = x36856 + x36858;
      Fp x36860 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x36861 = x36860 * x16;
      Fp x36862 = x36859 + x36861;
      Fp x36863 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x36864 = x36863 * x32;
      Fp x36865 = x36862 + x36864;
      {
        Fp x36866 = (x36865 == 0) ? Fp(1) : Fp(0);
        Fp x36867 = x71 - x36866;
        args[2][116 * steps + cycle] = x36867;
        Fp x36868 = inv(x36865);
        args[2][117 * steps + cycle] = x36868;
      }
      Fp x36869 = args[2][117 * steps + ((cycle - 0) & mask)];
      Fp x36870 = x36865 * x36869;
      Fp x36871 = args[2][116 * steps + ((cycle - 0) & mask)];
      Fp x36872 = x36870 - x36871;
      if (x36872 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
      Fp x36873 = x71 - x36871;
      Fp x36874 = x36873 * x36865;
      if (x36874 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
      Fp x36875 = x36818 * x36873;
      Fp x36876 = x71 - x36875;
      args[2][111 * steps + cycle] = x36876;
      Fp x36877 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x36878 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x36879 = x71 - x36878;
      Fp x36880 = x36877 * x36879;
      Fp x36881 = x71 - x36863;
      Fp x36882 = x36880 * x36881;
      Fp x36883 = x71 - x36877;
      Fp x36884 = x36883 * x36878;
      Fp x36885 = x36884 * x36863;
      Fp x36886 = x36882 + x36885;
      args[2][112 * steps + cycle] = x36886;
      Fp x36887 = args[2][112 * steps + ((cycle - 0) & mask)];
      Fp x36888 = x36887 + x36863;
      Fp x36889 = x36887 * x1;
      Fp x36890 = x36889 * x36863;
      Fp x36891 = x36888 - x36890;
      args[2][113 * steps + cycle] = x36891;
      Fp x36892 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x36893 = x36892 - x71;
      Fp x36894 = x36892 * x36893;
      if (x36894 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36895 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x36896 = x36895 - x71;
      Fp x36897 = x36895 * x36896;
      if (x36897 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36898 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x36899 = x36898 - x71;
      Fp x36900 = x36898 * x36899;
      if (x36900 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36901 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x36902 = x36901 - x71;
      Fp x36903 = x36901 * x36902;
      if (x36903 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36904 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x36905 = x36904 - x71;
      Fp x36906 = x36904 * x36905;
      if (x36906 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36907 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x36908 = x36907 - x71;
      Fp x36909 = x36907 * x36908;
      if (x36909 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36910 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x36911 = x36910 - x71;
      Fp x36912 = x36910 * x36911;
      if (x36912 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36913 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x36914 = x36913 - x71;
      Fp x36915 = x36913 * x36914;
      if (x36915 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36916 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x36917 = x36916 - x71;
      Fp x36918 = x36916 * x36917;
      if (x36918 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36919 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x36920 = x36919 - x71;
      Fp x36921 = x36919 * x36920;
      if (x36921 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36922 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x36923 = x36922 - x71;
      Fp x36924 = x36922 * x36923;
      if (x36924 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36925 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x36926 = x36925 - x71;
      Fp x36927 = x36925 * x36926;
      if (x36927 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36928 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x36929 = x36928 - x71;
      Fp x36930 = x36928 * x36929;
      if (x36930 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36931 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x36932 = x36931 - x71;
      Fp x36933 = x36931 * x36932;
      if (x36933 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36934 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x36935 = x36934 - x71;
      Fp x36936 = x36934 * x36935;
      if (x36936 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36937 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x36938 = x36937 - x71;
      Fp x36939 = x36937 * x36938;
      if (x36939 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36940 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x36941 = x36940 - x71;
      Fp x36942 = x36940 * x36941;
      if (x36942 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36943 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x36944 = x36943 - x71;
      Fp x36945 = x36943 * x36944;
      if (x36945 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36946 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x36947 = x36946 - x71;
      Fp x36948 = x36946 * x36947;
      if (x36948 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36949 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x36950 = x36949 - x71;
      Fp x36951 = x36949 * x36950;
      if (x36951 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36952 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x36953 = x36952 - x71;
      Fp x36954 = x36952 * x36953;
      if (x36954 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36955 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x36956 = x36955 - x71;
      Fp x36957 = x36955 * x36956;
      if (x36957 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36958 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x36959 = x36958 - x71;
      Fp x36960 = x36958 * x36959;
      if (x36960 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36961 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x36962 = x36961 - x71;
      Fp x36963 = x36961 * x36962;
      if (x36963 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36964 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x36965 = x36964 - x71;
      Fp x36966 = x36964 * x36965;
      if (x36966 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36967 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x36968 = x36967 - x71;
      Fp x36969 = x36967 * x36968;
      if (x36969 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36970 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x36971 = x36970 - x71;
      Fp x36972 = x36970 * x36971;
      if (x36972 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36973 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x36974 = x36973 - x71;
      Fp x36975 = x36973 * x36974;
      if (x36975 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36976 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x36977 = x36976 - x71;
      Fp x36978 = x36976 * x36977;
      if (x36978 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36979 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x36980 = x36979 - x71;
      Fp x36981 = x36979 * x36980;
      if (x36981 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36982 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x36983 = x36982 - x71;
      Fp x36984 = x36982 * x36983;
      if (x36984 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36985 = x36877 - x71;
      Fp x36986 = x36877 * x36985;
      if (x36986 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:24");
      Fp x36987 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x36988 = x36987 - x71;
      Fp x36989 = x36987 * x36988;
      if (x36989 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x36990 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x36991 = x36990 - x71;
      Fp x36992 = x36990 * x36991;
      if (x36992 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x36993 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x36994 = x36993 - x71;
      Fp x36995 = x36993 * x36994;
      if (x36995 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x36996 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x36997 = x36996 - x71;
      Fp x36998 = x36996 * x36997;
      if (x36998 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x36999 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x37000 = x36999 - x71;
      Fp x37001 = x36999 * x37000;
      if (x37001 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37002 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x37003 = x37002 - x71;
      Fp x37004 = x37002 * x37003;
      if (x37004 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37005 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x37006 = x37005 - x71;
      Fp x37007 = x37005 * x37006;
      if (x37007 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37008 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x37009 = x37008 - x71;
      Fp x37010 = x37008 * x37009;
      if (x37010 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37011 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x37012 = x37011 - x71;
      Fp x37013 = x37011 * x37012;
      if (x37013 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37014 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x37015 = x37014 - x71;
      Fp x37016 = x37014 * x37015;
      if (x37016 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37017 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x37018 = x37017 - x71;
      Fp x37019 = x37017 * x37018;
      if (x37019 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37020 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x37021 = x37020 - x71;
      Fp x37022 = x37020 * x37021;
      if (x37022 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37023 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x37024 = x37023 - x71;
      Fp x37025 = x37023 * x37024;
      if (x37025 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37026 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x37027 = x37026 - x71;
      Fp x37028 = x37026 * x37027;
      if (x37028 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37029 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x37030 = x37029 - x71;
      Fp x37031 = x37029 * x37030;
      if (x37031 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37032 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x37033 = x37032 - x71;
      Fp x37034 = x37032 * x37033;
      if (x37034 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37035 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x37036 = x37035 - x71;
      Fp x37037 = x37035 * x37036;
      if (x37037 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37038 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x37039 = x37038 - x71;
      Fp x37040 = x37038 * x37039;
      if (x37040 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37041 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x37042 = x37041 - x71;
      Fp x37043 = x37041 * x37042;
      if (x37043 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37044 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x37045 = x37044 - x71;
      Fp x37046 = x37044 * x37045;
      if (x37046 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37047 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x37048 = x37047 - x71;
      Fp x37049 = x37047 * x37048;
      if (x37049 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37050 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x37051 = x37050 - x71;
      Fp x37052 = x37050 * x37051;
      if (x37052 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37053 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x37054 = x37053 - x71;
      Fp x37055 = x37053 * x37054;
      if (x37055 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37056 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x37057 = x37056 - x71;
      Fp x37058 = x37056 * x37057;
      if (x37058 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37059 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x37060 = x37059 - x71;
      Fp x37061 = x37059 * x37060;
      if (x37061 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37062 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x37063 = x37062 - x71;
      Fp x37064 = x37062 * x37063;
      if (x37064 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37065 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x37066 = x37065 - x71;
      Fp x37067 = x37065 * x37066;
      if (x37067 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37068 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x37069 = x37068 - x71;
      Fp x37070 = x37068 * x37069;
      if (x37070 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37071 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x37072 = x37071 - x71;
      Fp x37073 = x37071 * x37072;
      if (x37073 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37074 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x37075 = x37074 - x71;
      Fp x37076 = x37074 * x37075;
      if (x37076 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37077 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x37078 = x37077 - x71;
      Fp x37079 = x37077 * x37078;
      if (x37079 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37080 = x36878 - x71;
      Fp x37081 = x36878 * x37080;
      if (x37081 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:25");
      Fp x37082 = x36765 - x71;
      Fp x37083 = x36765 * x37082;
      if (x37083 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37084 = x36766 - x71;
      Fp x37085 = x36766 * x37084;
      if (x37085 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37086 = x36769 - x71;
      Fp x37087 = x36769 * x37086;
      if (x37087 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37088 = x36772 - x71;
      Fp x37089 = x36772 * x37088;
      if (x37089 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37090 = x36775 - x71;
      Fp x37091 = x36775 * x37090;
      if (x37091 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37092 = x36778 - x71;
      Fp x37093 = x36778 * x37092;
      if (x37093 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37094 = x36781 - x71;
      Fp x37095 = x36781 * x37094;
      if (x37095 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37096 = x36784 - x71;
      Fp x37097 = x36784 * x37096;
      if (x37097 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37098 = x36787 - x71;
      Fp x37099 = x36787 * x37098;
      if (x37099 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37100 = x36790 - x71;
      Fp x37101 = x36790 * x37100;
      if (x37101 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37102 = x36793 - x71;
      Fp x37103 = x36793 * x37102;
      if (x37103 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37104 = x36796 - x71;
      Fp x37105 = x36796 * x37104;
      if (x37105 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37106 = x36799 - x71;
      Fp x37107 = x36799 * x37106;
      if (x37107 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37108 = x36802 - x71;
      Fp x37109 = x36802 * x37108;
      if (x37109 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37110 = x36805 - x71;
      Fp x37111 = x36805 * x37110;
      if (x37111 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37112 = x36808 - x71;
      Fp x37113 = x36808 * x37112;
      if (x37113 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37114 = x36820 - x71;
      Fp x37115 = x36820 * x37114;
      if (x37115 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37116 = x36821 - x71;
      Fp x37117 = x36821 * x37116;
      if (x37117 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37118 = x36824 - x71;
      Fp x37119 = x36824 * x37118;
      if (x37119 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37120 = x36827 - x71;
      Fp x37121 = x36827 * x37120;
      if (x37121 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37122 = x36830 - x71;
      Fp x37123 = x36830 * x37122;
      if (x37123 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37124 = x36833 - x71;
      Fp x37125 = x36833 * x37124;
      if (x37125 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37126 = x36836 - x71;
      Fp x37127 = x36836 * x37126;
      if (x37127 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37128 = x36839 - x71;
      Fp x37129 = x36839 * x37128;
      if (x37129 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37130 = x36842 - x71;
      Fp x37131 = x36842 * x37130;
      if (x37131 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37132 = x36845 - x71;
      Fp x37133 = x36845 * x37132;
      if (x37133 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37134 = x36848 - x71;
      Fp x37135 = x36848 * x37134;
      if (x37135 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37136 = x36851 - x71;
      Fp x37137 = x36851 * x37136;
      if (x37137 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37138 = x36854 - x71;
      Fp x37139 = x36854 * x37138;
      if (x37139 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37140 = x36857 - x71;
      Fp x37141 = x36857 * x37140;
      if (x37141 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37142 = x36860 - x71;
      Fp x37143 = x36860 * x37142;
      if (x37143 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37144 = x36863 - x71;
      Fp x37145 = x36863 * x37144;
      if (x37145 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:26");
      Fp x37146 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x37147 = x37146 - x71;
      Fp x37148 = x37146 * x37147;
      if (x37148 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x37149 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x37150 = x37149 - x71;
      Fp x37151 = x37149 * x37150;
      if (x37151 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x37152 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x37153 = x37152 - x71;
      Fp x37154 = x37152 * x37153;
      if (x37154 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x37155 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x37156 = x37155 - x71;
      Fp x37157 = x37155 * x37156;
      if (x37157 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x37158 = x37146 + x37149;
      Fp x37159 = x37158 + x37152;
      Fp x37160 = x37159 + x37155;
      Fp x37161 = x37160 - x71;
      if (x37161 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:27");
      Fp x37162 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x37163 = x37162 - x71;
      Fp x37164 = x37162 * x37163;
      if (x37164 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:28");
      Fp x37165 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x37166 = x37165 - x71;
      Fp x37167 = x37165 * x37166;
      if (x37167 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:29");
      Fp x37168 = args[2][108 * steps + ((cycle - 0) & mask)];
      Fp x37169 = x37168 - x71;
      Fp x37170 = x37168 * x37169;
      if (x37170 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:30");
      Fp x37171 = args[2][109 * steps + ((cycle - 0) & mask)];
      Fp x37172 = x37171 - x71;
      Fp x37173 = x37171 * x37172;
      if (x37173 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:31");
      Fp x37174 = x36816 - x71;
      Fp x37175 = x36816 * x37174;
      if (x37175 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:36");
      Fp x37176 = x36871 - x71;
      Fp x37177 = x36871 * x37176;
      if (x37177 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/compute_cycle.h:37");
    }
    Fp x37178 = args[2][137 * steps + ((cycle - 0) & mask)];
    if (x37178 != 0) {
      host_args[0] = x72;
      host(ctx, "log", "C%u: Multiply", host_args.data(), 1, host_outs.data(), 0);
      args[2][128 * steps + cycle] = x70;
      args[2][131 * steps + cycle] = x70;
      {
        host_args[0] = x72;
        host_args[1] = x70;
        host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
        Fp x37179 = host_outs[0];
        Fp x37180 = host_outs[1];
        args[2][129 * steps + cycle] = x37179;
        args[2][130 * steps + cycle] = x37180;
      }
      Fp x37181 = args[2][116 * steps + ((cycle - 1) & mask)];
      Fp x37182 = args[2][117 * steps + ((cycle - 1) & mask)];
      Fp x37183 = args[2][118 * steps + ((cycle - 1) & mask)];
      Fp x37184 = args[2][119 * steps + ((cycle - 1) & mask)];
      Fp x37185 = args[2][32 * steps + ((cycle - 1) & mask)];
      Fp x37186 = args[2][33 * steps + ((cycle - 1) & mask)];
      Fp x37187 = x37186 * x1;
      Fp x37188 = x37185 + x37187;
      Fp x37189 = args[2][34 * steps + ((cycle - 1) & mask)];
      Fp x37190 = x37189 * x3;
      Fp x37191 = x37188 + x37190;
      Fp x37192 = args[2][35 * steps + ((cycle - 1) & mask)];
      Fp x37193 = x37192 * x6;
      Fp x37194 = x37191 + x37193;
      Fp x37195 = args[2][36 * steps + ((cycle - 1) & mask)];
      Fp x37196 = x37195 * x11;
      Fp x37197 = x37194 + x37196;
      Fp x37198 = args[2][37 * steps + ((cycle - 1) & mask)];
      Fp x37199 = x37198 * x27;
      Fp x37200 = x37197 + x37199;
      Fp x37201 = args[2][38 * steps + ((cycle - 1) & mask)];
      Fp x37202 = x37201 * x12;
      Fp x37203 = x37200 + x37202;
      Fp x37204 = args[2][39 * steps + ((cycle - 1) & mask)];
      Fp x37205 = x37204 * x28;
      Fp x37206 = x37203 + x37205;
      Fp x37207 = args[2][40 * steps + ((cycle - 1) & mask)];
      Fp x37208 = x37207 * x13;
      Fp x37209 = x37206 + x37208;
      Fp x37210 = args[2][41 * steps + ((cycle - 1) & mask)];
      Fp x37211 = x37210 * x29;
      Fp x37212 = x37209 + x37211;
      Fp x37213 = args[2][42 * steps + ((cycle - 1) & mask)];
      Fp x37214 = x37213 * x14;
      Fp x37215 = x37212 + x37214;
      Fp x37216 = args[2][43 * steps + ((cycle - 1) & mask)];
      Fp x37217 = x37216 * x30;
      Fp x37218 = x37215 + x37217;
      Fp x37219 = args[2][44 * steps + ((cycle - 1) & mask)];
      Fp x37220 = x37219 * x15;
      Fp x37221 = x37218 + x37220;
      Fp x37222 = args[2][45 * steps + ((cycle - 1) & mask)];
      Fp x37223 = x37222 * x31;
      Fp x37224 = x37221 + x37223;
      Fp x37225 = args[2][46 * steps + ((cycle - 1) & mask)];
      Fp x37226 = x37225 * x16;
      Fp x37227 = x37224 + x37226;
      Fp x37228 = args[2][47 * steps + ((cycle - 1) & mask)];
      Fp x37229 = x37228 * x32;
      Fp x37230 = x37227 + x37229;
      Fp x37231 = args[2][48 * steps + ((cycle - 1) & mask)];
      Fp x37232 = args[2][49 * steps + ((cycle - 1) & mask)];
      Fp x37233 = x37232 * x1;
      Fp x37234 = x37231 + x37233;
      Fp x37235 = args[2][50 * steps + ((cycle - 1) & mask)];
      Fp x37236 = x37235 * x3;
      Fp x37237 = x37234 + x37236;
      Fp x37238 = args[2][51 * steps + ((cycle - 1) & mask)];
      Fp x37239 = x37238 * x6;
      Fp x37240 = x37237 + x37239;
      Fp x37241 = args[2][52 * steps + ((cycle - 1) & mask)];
      Fp x37242 = x37241 * x11;
      Fp x37243 = x37240 + x37242;
      Fp x37244 = args[2][53 * steps + ((cycle - 1) & mask)];
      Fp x37245 = x37244 * x27;
      Fp x37246 = x37243 + x37245;
      Fp x37247 = args[2][54 * steps + ((cycle - 1) & mask)];
      Fp x37248 = x37247 * x12;
      Fp x37249 = x37246 + x37248;
      Fp x37250 = args[2][55 * steps + ((cycle - 1) & mask)];
      Fp x37251 = x37250 * x28;
      Fp x37252 = x37249 + x37251;
      Fp x37253 = args[2][56 * steps + ((cycle - 1) & mask)];
      Fp x37254 = x37253 * x13;
      Fp x37255 = x37252 + x37254;
      Fp x37256 = args[2][57 * steps + ((cycle - 1) & mask)];
      Fp x37257 = x37256 * x29;
      Fp x37258 = x37255 + x37257;
      Fp x37259 = args[2][58 * steps + ((cycle - 1) & mask)];
      Fp x37260 = x37259 * x14;
      Fp x37261 = x37258 + x37260;
      Fp x37262 = args[2][59 * steps + ((cycle - 1) & mask)];
      Fp x37263 = x37262 * x30;
      Fp x37264 = x37261 + x37263;
      Fp x37265 = args[2][60 * steps + ((cycle - 1) & mask)];
      Fp x37266 = x37265 * x15;
      Fp x37267 = x37264 + x37266;
      Fp x37268 = args[2][61 * steps + ((cycle - 1) & mask)];
      Fp x37269 = x37268 * x31;
      Fp x37270 = x37267 + x37269;
      Fp x37271 = args[2][62 * steps + ((cycle - 1) & mask)];
      Fp x37272 = x37271 * x16;
      Fp x37273 = x37270 + x37272;
      Fp x37274 = args[2][63 * steps + ((cycle - 1) & mask)];
      Fp x37275 = x37274 * x32;
      Fp x37276 = x37273 + x37275;
      Fp x37277 = args[2][72 * steps + ((cycle - 1) & mask)];
      if (x37277 != 0) {
        {
          Fp x37278 = Fp(x37181.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x37278;
          Fp x37279 = x37181 - x37278;
          Fp x37280 = x37279 * x10;
          Fp x37281 = Fp(x37280.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x37281;
          Fp x37282 = x37280 - x37281;
          Fp x37283 = x37282 * x10;
          Fp x37284 = Fp(x37283.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x37284;
          Fp x37285 = x37283 - x37284;
          Fp x37286 = x37285 * x10;
          Fp x37287 = Fp(x37286.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x37287;
          Fp x37288 = x37286 - x37287;
          Fp x37289 = x37288 * x10;
          Fp x37290 = Fp(x37289.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x37290;
          Fp x37291 = x37289 - x37290;
          Fp x37292 = x37291 * x10;
          Fp x37293 = Fp(x37292.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x37293;
          Fp x37294 = x37292 - x37293;
          Fp x37295 = x37294 * x10;
          Fp x37296 = Fp(x37295.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x37296;
          Fp x37297 = x37295 - x37296;
          Fp x37298 = x37297 * x10;
          Fp x37299 = Fp(x37298.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x37299;
        }
        Fp x37300 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x37301 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x37302 = x37301 * x3;
        Fp x37303 = x37300 + x37302;
        Fp x37304 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x37305 = x37304 * x11;
        Fp x37306 = x37303 + x37305;
        Fp x37307 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x37308 = x37307 * x12;
        Fp x37309 = x37306 + x37308;
        Fp x37310 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x37311 = x37310 * x13;
        Fp x37312 = x37309 + x37311;
        Fp x37313 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x37314 = x37313 * x14;
        Fp x37315 = x37312 + x37314;
        Fp x37316 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x37317 = x37316 * x15;
        Fp x37318 = x37315 + x37317;
        Fp x37319 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x37320 = x37319 * x16;
        Fp x37321 = x37318 + x37320;
        Fp x37322 = x37181 - x37321;
        Fp x37323 = x37322 * x33;
        if (x37323 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
        {
          Fp x37324 = Fp(x37182.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x37324;
          Fp x37325 = x37182 - x37324;
          Fp x37326 = x37325 * x10;
          Fp x37327 = Fp(x37326.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x37327;
          Fp x37328 = x37326 - x37327;
          Fp x37329 = x37328 * x10;
          Fp x37330 = Fp(x37329.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x37330;
          Fp x37331 = x37329 - x37330;
          Fp x37332 = x37331 * x10;
          Fp x37333 = Fp(x37332.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x37333;
          Fp x37334 = x37332 - x37333;
          Fp x37335 = x37334 * x10;
          Fp x37336 = Fp(x37335.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x37336;
          Fp x37337 = x37335 - x37336;
          Fp x37338 = x37337 * x10;
          Fp x37339 = Fp(x37338.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x37339;
          Fp x37340 = x37338 - x37339;
          Fp x37341 = x37340 * x10;
          Fp x37342 = Fp(x37341.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x37342;
          Fp x37343 = x37341 - x37342;
          Fp x37344 = x37343 * x10;
          Fp x37345 = Fp(x37344.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x37345;
        }
        Fp x37346 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x37347 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x37348 = x37347 * x3;
        Fp x37349 = x37346 + x37348;
        Fp x37350 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x37351 = x37350 * x11;
        Fp x37352 = x37349 + x37351;
        Fp x37353 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x37354 = x37353 * x12;
        Fp x37355 = x37352 + x37354;
        Fp x37356 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x37357 = x37356 * x13;
        Fp x37358 = x37355 + x37357;
        Fp x37359 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x37360 = x37359 * x14;
        Fp x37361 = x37358 + x37360;
        Fp x37362 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x37363 = x37362 * x15;
        Fp x37364 = x37361 + x37363;
        Fp x37365 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x37366 = x37365 * x16;
        Fp x37367 = x37364 + x37366;
        Fp x37368 = x37182 - x37367;
        Fp x37369 = x37368 * x33;
        if (x37369 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
        {
          Fp x37370 = Fp(x37183.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x37370;
          Fp x37371 = x37183 - x37370;
          Fp x37372 = x37371 * x10;
          Fp x37373 = Fp(x37372.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x37373;
          Fp x37374 = x37372 - x37373;
          Fp x37375 = x37374 * x10;
          Fp x37376 = Fp(x37375.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x37376;
          Fp x37377 = x37375 - x37376;
          Fp x37378 = x37377 * x10;
          Fp x37379 = Fp(x37378.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x37379;
          Fp x37380 = x37378 - x37379;
          Fp x37381 = x37380 * x10;
          Fp x37382 = Fp(x37381.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x37382;
          Fp x37383 = x37381 - x37382;
          Fp x37384 = x37383 * x10;
          Fp x37385 = Fp(x37384.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x37385;
          Fp x37386 = x37384 - x37385;
          Fp x37387 = x37386 * x10;
          Fp x37388 = Fp(x37387.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x37388;
          Fp x37389 = x37387 - x37388;
          Fp x37390 = x37389 * x10;
          Fp x37391 = Fp(x37390.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x37391;
        }
        Fp x37392 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x37393 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x37394 = x37393 * x3;
        Fp x37395 = x37392 + x37394;
        Fp x37396 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x37397 = x37396 * x11;
        Fp x37398 = x37395 + x37397;
        Fp x37399 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x37400 = x37399 * x12;
        Fp x37401 = x37398 + x37400;
        Fp x37402 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x37403 = x37402 * x13;
        Fp x37404 = x37401 + x37403;
        Fp x37405 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x37406 = x37405 * x14;
        Fp x37407 = x37404 + x37406;
        Fp x37408 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x37409 = x37408 * x15;
        Fp x37410 = x37407 + x37409;
        Fp x37411 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x37412 = x37411 * x16;
        Fp x37413 = x37410 + x37412;
        Fp x37414 = x37183 - x37413;
        Fp x37415 = x37414 * x33;
        if (x37415 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
        {
          Fp x37416 = Fp(x37184.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x37416;
          Fp x37417 = x37184 - x37416;
          Fp x37418 = x37417 * x10;
          Fp x37419 = Fp(x37418.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x37419;
          Fp x37420 = x37418 - x37419;
          Fp x37421 = x37420 * x10;
          Fp x37422 = Fp(x37421.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x37422;
          Fp x37423 = x37421 - x37422;
          Fp x37424 = x37423 * x10;
          Fp x37425 = Fp(x37424.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x37425;
          Fp x37426 = x37424 - x37425;
          Fp x37427 = x37426 * x10;
          Fp x37428 = Fp(x37427.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x37428;
          Fp x37429 = x37427 - x37428;
          Fp x37430 = x37429 * x10;
          Fp x37431 = Fp(x37430.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x37431;
          Fp x37432 = x37430 - x37431;
          Fp x37433 = x37432 * x10;
          Fp x37434 = Fp(x37433.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x37434;
          Fp x37435 = x37433 - x37434;
          Fp x37436 = x37435 * x10;
          Fp x37437 = Fp(x37436.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x37437;
        }
        Fp x37438 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x37439 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x37440 = x37439 * x3;
        Fp x37441 = x37438 + x37440;
        Fp x37442 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x37443 = x37442 * x11;
        Fp x37444 = x37441 + x37443;
        Fp x37445 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x37446 = x37445 * x12;
        Fp x37447 = x37444 + x37446;
        Fp x37448 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x37449 = x37448 * x13;
        Fp x37450 = x37447 + x37449;
        Fp x37451 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x37452 = x37451 * x14;
        Fp x37453 = x37450 + x37452;
        Fp x37454 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x37455 = x37454 * x15;
        Fp x37456 = x37453 + x37455;
        Fp x37457 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x37458 = x37457 * x16;
        Fp x37459 = x37456 + x37458;
        Fp x37460 = x37184 - x37459;
        Fp x37461 = x37460 * x33;
        if (x37461 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:97");
        {
          args[2][108 * steps + cycle] = x70;
          args[2][109 * steps + cycle] = x70;
        }
        Fp x37462 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x37463 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x37464 = x37463 * x1;
        Fp x37465 = x37462 + x37464;
        Fp x37466 = x70 - x37465;
        Fp x37467 = x37466 * x10;
        if (x37467 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:38");
        {
          args[2][106 * steps + cycle] = x70;
          args[2][107 * steps + cycle] = x70;
        }
        Fp x37468 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x37469 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x37470 = x37469 * x1;
        Fp x37471 = x37468 + x37470;
        Fp x37472 = x70 - x37471;
        Fp x37473 = x37472 * x10;
        if (x37473 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:45");
        Fp x37474 = x37315 * x37407;
        host_args[0] = x70;
        host_args[1] = x37474;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x37475 = Fp(x37474.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x37475;
          Fp x37476 = x37474 - x37475;
          Fp x37477 = x37476 * x10;
          Fp x37478 = Fp(x37477.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x37478;
          Fp x37479 = x37477 - x37478;
          Fp x37480 = x37479 * x10;
          Fp x37481 = Fp(x37480.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x37481;
          Fp x37482 = x37480 - x37481;
          Fp x37483 = x37482 * x10;
          Fp x37484 = Fp(x37483.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x37484;
          Fp x37485 = x37483 - x37484;
          Fp x37486 = x37485 * x10;
          Fp x37487 = Fp(x37486.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x37487;
          Fp x37488 = x37486 - x37487;
          Fp x37489 = x37488 * x10;
          Fp x37490 = Fp(x37489.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x37490;
          Fp x37491 = x37489 - x37490;
          Fp x37492 = x37491 * x10;
          Fp x37493 = Fp(x37492.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x37493;
          Fp x37494 = x37492 - x37493;
          Fp x37495 = x37494 * x10;
          Fp x37496 = Fp(x37495.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x37496;
          Fp x37497 = x37495 - x37496;
          Fp x37498 = x37497 * x10;
          Fp x37499 = Fp(x37498.asUInt32() & x2.asUInt32());
          args[2][48 * steps + cycle] = x37499;
          Fp x37500 = x37498 - x37499;
          Fp x37501 = x37500 * x10;
          Fp x37502 = Fp(x37501.asUInt32() & x2.asUInt32());
          args[2][49 * steps + cycle] = x37502;
          Fp x37503 = x37501 - x37502;
          Fp x37504 = x37503 * x10;
          Fp x37505 = Fp(x37504.asUInt32() & x2.asUInt32());
          args[2][50 * steps + cycle] = x37505;
          Fp x37506 = x37504 - x37505;
          Fp x37507 = x37506 * x10;
          Fp x37508 = Fp(x37507.asUInt32() & x2.asUInt32());
          args[2][51 * steps + cycle] = x37508;
        }
        Fp x37509 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x37510 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x37511 = x37510 * x3;
        Fp x37512 = x37509 + x37511;
        Fp x37513 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x37514 = x37513 * x11;
        Fp x37515 = x37512 + x37514;
        Fp x37516 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x37517 = x37516 * x12;
        Fp x37518 = x37515 + x37517;
        Fp x37519 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x37520 = x37519 * x13;
        Fp x37521 = x37518 + x37520;
        Fp x37522 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x37523 = x37522 * x14;
        Fp x37524 = x37521 + x37523;
        Fp x37525 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x37526 = x37525 * x15;
        Fp x37527 = x37524 + x37526;
        Fp x37528 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x37529 = x37528 * x16;
        Fp x37530 = x37527 + x37529;
        Fp x37531 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x37532 = x37531 * x17;
        Fp x37533 = x37530 + x37532;
        Fp x37534 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x37535 = x37534 * x18;
        Fp x37536 = x37533 + x37535;
        Fp x37537 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x37538 = x37537 * x19;
        Fp x37539 = x37536 + x37538;
        Fp x37540 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x37541 = x37540 * x20;
        Fp x37542 = x37539 + x37541;
        Fp x37543 = x37474 - x37542;
        Fp x37544 = x37543 * x62;
        {
          Fp x37545 = Fp(x37544.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x37545;
        }
        Fp x37546 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x37547 = x37544 - x37546;
        Fp x37548 = x37547 * x10;
        if (x37548 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x37549 = x37528 * x3;
        Fp x37550 = x37525 + x37549;
        Fp x37551 = x37531 * x11;
        Fp x37552 = x37550 + x37551;
        Fp x37553 = x37534 * x12;
        Fp x37554 = x37552 + x37553;
        Fp x37555 = x37537 * x13;
        Fp x37556 = x37554 + x37555;
        Fp x37557 = x37540 * x14;
        Fp x37558 = x37556 + x37557;
        Fp x37559 = x37544 * x15;
        Fp x37560 = x37558 + x37559;
        Fp x37561 = x37411 * x3;
        Fp x37562 = x37408 + x37561;
        Fp x37563 = x37438 * x11;
        Fp x37564 = x37562 + x37563;
        Fp x37565 = x37439 * x12;
        Fp x37566 = x37564 + x37565;
        Fp x37567 = x37442 * x13;
        Fp x37568 = x37566 + x37567;
        Fp x37569 = x37445 * x14;
        Fp x37570 = x37568 + x37569;
        Fp x37571 = x37315 * x37570;
        Fp x37572 = x37560 + x37571;
        Fp x37573 = x37319 * x3;
        Fp x37574 = x37316 + x37573;
        Fp x37575 = x37346 * x11;
        Fp x37576 = x37574 + x37575;
        Fp x37577 = x37347 * x12;
        Fp x37578 = x37576 + x37577;
        Fp x37579 = x37350 * x13;
        Fp x37580 = x37578 + x37579;
        Fp x37581 = x37353 * x14;
        Fp x37582 = x37580 + x37581;
        Fp x37583 = x37582 * x37407;
        Fp x37584 = x37572 + x37583;
        host_args[0] = x71;
        host_args[1] = x37584;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x37585 = Fp(x37584.asUInt32() & x2.asUInt32());
          args[2][52 * steps + cycle] = x37585;
          Fp x37586 = x37584 - x37585;
          Fp x37587 = x37586 * x10;
          Fp x37588 = Fp(x37587.asUInt32() & x2.asUInt32());
          args[2][53 * steps + cycle] = x37588;
          Fp x37589 = x37587 - x37588;
          Fp x37590 = x37589 * x10;
          Fp x37591 = Fp(x37590.asUInt32() & x2.asUInt32());
          args[2][54 * steps + cycle] = x37591;
          Fp x37592 = x37590 - x37591;
          Fp x37593 = x37592 * x10;
          Fp x37594 = Fp(x37593.asUInt32() & x2.asUInt32());
          args[2][55 * steps + cycle] = x37594;
          Fp x37595 = x37593 - x37594;
          Fp x37596 = x37595 * x10;
          Fp x37597 = Fp(x37596.asUInt32() & x2.asUInt32());
          args[2][56 * steps + cycle] = x37597;
          Fp x37598 = x37596 - x37597;
          Fp x37599 = x37598 * x10;
          Fp x37600 = Fp(x37599.asUInt32() & x2.asUInt32());
          args[2][57 * steps + cycle] = x37600;
          Fp x37601 = x37599 - x37600;
          Fp x37602 = x37601 * x10;
          Fp x37603 = Fp(x37602.asUInt32() & x2.asUInt32());
          args[2][58 * steps + cycle] = x37603;
          Fp x37604 = x37602 - x37603;
          Fp x37605 = x37604 * x10;
          Fp x37606 = Fp(x37605.asUInt32() & x2.asUInt32());
          args[2][59 * steps + cycle] = x37606;
          Fp x37607 = x37605 - x37606;
          Fp x37608 = x37607 * x10;
          Fp x37609 = Fp(x37608.asUInt32() & x2.asUInt32());
          args[2][60 * steps + cycle] = x37609;
          Fp x37610 = x37608 - x37609;
          Fp x37611 = x37610 * x10;
          Fp x37612 = Fp(x37611.asUInt32() & x2.asUInt32());
          args[2][61 * steps + cycle] = x37612;
          Fp x37613 = x37611 - x37612;
          Fp x37614 = x37613 * x10;
          Fp x37615 = Fp(x37614.asUInt32() & x2.asUInt32());
          args[2][62 * steps + cycle] = x37615;
          Fp x37616 = x37614 - x37615;
          Fp x37617 = x37616 * x10;
          Fp x37618 = Fp(x37617.asUInt32() & x2.asUInt32());
          args[2][63 * steps + cycle] = x37618;
        }
        Fp x37619 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x37620 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x37621 = x37620 * x3;
        Fp x37622 = x37619 + x37621;
        Fp x37623 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x37624 = x37623 * x11;
        Fp x37625 = x37622 + x37624;
        Fp x37626 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x37627 = x37626 * x12;
        Fp x37628 = x37625 + x37627;
        Fp x37629 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x37630 = x37629 * x13;
        Fp x37631 = x37628 + x37630;
        Fp x37632 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x37633 = x37632 * x14;
        Fp x37634 = x37631 + x37633;
        Fp x37635 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x37636 = x37635 * x15;
        Fp x37637 = x37634 + x37636;
        Fp x37638 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x37639 = x37638 * x16;
        Fp x37640 = x37637 + x37639;
        Fp x37641 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x37642 = x37641 * x17;
        Fp x37643 = x37640 + x37642;
        Fp x37644 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x37645 = x37644 * x18;
        Fp x37646 = x37643 + x37645;
        Fp x37647 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x37648 = x37647 * x19;
        Fp x37649 = x37646 + x37648;
        Fp x37650 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x37651 = x37650 * x20;
        Fp x37652 = x37649 + x37651;
        Fp x37653 = x37584 - x37652;
        Fp x37654 = x37653 * x62;
        {
          Fp x37655 = Fp(x37654.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x37655;
        }
        Fp x37656 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x37657 = x37654 - x37656;
        Fp x37658 = x37657 * x10;
        if (x37658 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x37659 = x37638 * x3;
        Fp x37660 = x37635 + x37659;
        Fp x37661 = x37641 * x11;
        Fp x37662 = x37660 + x37661;
        Fp x37663 = x37644 * x12;
        Fp x37664 = x37662 + x37663;
        Fp x37665 = x37647 * x13;
        Fp x37666 = x37664 + x37665;
        Fp x37667 = x37650 * x14;
        Fp x37668 = x37666 + x37667;
        Fp x37669 = x37654 * x15;
        Fp x37670 = x37668 + x37669;
        Fp x37671 = x37451 * x3;
        Fp x37672 = x37448 + x37671;
        Fp x37673 = x37454 * x11;
        Fp x37674 = x37672 + x37673;
        Fp x37675 = x37457 * x12;
        Fp x37676 = x37674 + x37675;
        Fp x37677 = x37315 * x37676;
        Fp x37678 = x37670 + x37677;
        Fp x37679 = x37582 * x37570;
        Fp x37680 = x37678 + x37679;
        Fp x37681 = x37359 * x3;
        Fp x37682 = x37356 + x37681;
        Fp x37683 = x37362 * x11;
        Fp x37684 = x37682 + x37683;
        Fp x37685 = x37365 * x12;
        Fp x37686 = x37684 + x37685;
        Fp x37687 = x37686 * x37407;
        Fp x37688 = x37680 + x37687;
        Fp x37689 = x37688 + x31;
        host_args[0] = x1;
        host_args[1] = x37689;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x37690 = Fp(x37689.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x37690;
          Fp x37691 = x37689 - x37690;
          Fp x37692 = x37691 * x10;
          Fp x37693 = Fp(x37692.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x37693;
          Fp x37694 = x37692 - x37693;
          Fp x37695 = x37694 * x10;
          Fp x37696 = Fp(x37695.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x37696;
          Fp x37697 = x37695 - x37696;
          Fp x37698 = x37697 * x10;
          Fp x37699 = Fp(x37698.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x37699;
          Fp x37700 = x37698 - x37699;
          Fp x37701 = x37700 * x10;
          Fp x37702 = Fp(x37701.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x37702;
          Fp x37703 = x37701 - x37702;
          Fp x37704 = x37703 * x10;
          Fp x37705 = Fp(x37704.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x37705;
          Fp x37706 = x37704 - x37705;
          Fp x37707 = x37706 * x10;
          Fp x37708 = Fp(x37707.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x37708;
          Fp x37709 = x37707 - x37708;
          Fp x37710 = x37709 * x10;
          Fp x37711 = Fp(x37710.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x37711;
          Fp x37712 = x37710 - x37711;
          Fp x37713 = x37712 * x10;
          Fp x37714 = Fp(x37713.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x37714;
          Fp x37715 = x37713 - x37714;
          Fp x37716 = x37715 * x10;
          Fp x37717 = Fp(x37716.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x37717;
          Fp x37718 = x37716 - x37717;
          Fp x37719 = x37718 * x10;
          Fp x37720 = Fp(x37719.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x37720;
          Fp x37721 = x37719 - x37720;
          Fp x37722 = x37721 * x10;
          Fp x37723 = Fp(x37722.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x37723;
        }
        Fp x37724 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x37725 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x37726 = x37725 * x3;
        Fp x37727 = x37724 + x37726;
        Fp x37728 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x37729 = x37728 * x11;
        Fp x37730 = x37727 + x37729;
        Fp x37731 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x37732 = x37731 * x12;
        Fp x37733 = x37730 + x37732;
        Fp x37734 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x37735 = x37734 * x13;
        Fp x37736 = x37733 + x37735;
        Fp x37737 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x37738 = x37737 * x14;
        Fp x37739 = x37736 + x37738;
        Fp x37740 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x37741 = x37740 * x15;
        Fp x37742 = x37739 + x37741;
        Fp x37743 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x37744 = x37743 * x16;
        Fp x37745 = x37742 + x37744;
        Fp x37746 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x37747 = x37746 * x17;
        Fp x37748 = x37745 + x37747;
        Fp x37749 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x37750 = x37749 * x18;
        Fp x37751 = x37748 + x37750;
        Fp x37752 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x37753 = x37752 * x19;
        Fp x37754 = x37751 + x37753;
        Fp x37755 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x37756 = x37755 * x20;
        Fp x37757 = x37754 + x37756;
        Fp x37758 = x37689 - x37757;
        Fp x37759 = x37758 * x62;
        {
          Fp x37760 = Fp(x37759.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x37760;
        }
        Fp x37761 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x37762 = x37759 - x37761;
        Fp x37763 = x37762 * x10;
        if (x37763 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x37764 = x37743 * x3;
        Fp x37765 = x37740 + x37764;
        Fp x37766 = x37746 * x11;
        Fp x37767 = x37765 + x37766;
        Fp x37768 = x37749 * x12;
        Fp x37769 = x37767 + x37768;
        Fp x37770 = x37752 * x13;
        Fp x37771 = x37769 + x37770;
        Fp x37772 = x37755 * x14;
        Fp x37773 = x37771 + x37772;
        Fp x37774 = x37759 * x15;
        Fp x37775 = x37773 + x37774;
        Fp x37776 = x37582 * x37676;
        Fp x37777 = x37775 + x37776;
        Fp x37778 = x37686 * x37570;
        Fp x37779 = x37777 + x37778;
        Fp x37780 = x37779 + x63;
        host_args[0] = x2;
        host_args[1] = x37780;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x37781 = Fp(x37780.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x37781;
          Fp x37782 = x37780 - x37781;
          Fp x37783 = x37782 * x10;
          Fp x37784 = Fp(x37783.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x37784;
          Fp x37785 = x37783 - x37784;
          Fp x37786 = x37785 * x10;
          Fp x37787 = Fp(x37786.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x37787;
          Fp x37788 = x37786 - x37787;
          Fp x37789 = x37788 * x10;
          Fp x37790 = Fp(x37789.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x37790;
          Fp x37791 = x37789 - x37790;
          Fp x37792 = x37791 * x10;
          Fp x37793 = Fp(x37792.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x37793;
          Fp x37794 = x37792 - x37793;
          Fp x37795 = x37794 * x10;
          Fp x37796 = Fp(x37795.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x37796;
          Fp x37797 = x37795 - x37796;
          Fp x37798 = x37797 * x10;
          Fp x37799 = Fp(x37798.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x37799;
          Fp x37800 = x37798 - x37799;
          Fp x37801 = x37800 * x10;
          Fp x37802 = Fp(x37801.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x37802;
          Fp x37803 = x37801 - x37802;
          Fp x37804 = x37803 * x10;
          Fp x37805 = Fp(x37804.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x37805;
          Fp x37806 = x37804 - x37805;
          Fp x37807 = x37806 * x10;
          Fp x37808 = Fp(x37807.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x37808;
          Fp x37809 = x37807 - x37808;
          Fp x37810 = x37809 * x10;
          Fp x37811 = Fp(x37810.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x37811;
          Fp x37812 = x37810 - x37811;
          Fp x37813 = x37812 * x10;
          Fp x37814 = Fp(x37813.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x37814;
        }
        Fp x37815 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x37816 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x37817 = x37816 * x3;
        Fp x37818 = x37815 + x37817;
        Fp x37819 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x37820 = x37819 * x11;
        Fp x37821 = x37818 + x37820;
        Fp x37822 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x37823 = x37822 * x12;
        Fp x37824 = x37821 + x37823;
        Fp x37825 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x37826 = x37825 * x13;
        Fp x37827 = x37824 + x37826;
        Fp x37828 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x37829 = x37828 * x14;
        Fp x37830 = x37827 + x37829;
        Fp x37831 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x37832 = x37831 * x15;
        Fp x37833 = x37830 + x37832;
        Fp x37834 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x37835 = x37834 * x16;
        Fp x37836 = x37833 + x37835;
        Fp x37837 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x37838 = x37837 * x17;
        Fp x37839 = x37836 + x37838;
        Fp x37840 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x37841 = x37840 * x18;
        Fp x37842 = x37839 + x37841;
        Fp x37843 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x37844 = x37843 * x19;
        Fp x37845 = x37842 + x37844;
        Fp x37846 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x37847 = x37846 * x20;
        Fp x37848 = x37845 + x37847;
        Fp x37849 = x37780 - x37848;
        Fp x37850 = x37849 * x62;
        {
          Fp x37851 = Fp(x37850.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x37851;
        }
        Fp x37852 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x37853 = x37850 - x37852;
        Fp x37854 = x37853 * x10;
        if (x37854 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x37855 = x37834 * x3;
        Fp x37856 = x37831 + x37855;
        Fp x37857 = x37837 * x11;
        Fp x37858 = x37856 + x37857;
        Fp x37859 = x37840 * x12;
        Fp x37860 = x37858 + x37859;
        Fp x37861 = x37843 * x13;
        Fp x37862 = x37860 + x37861;
        Fp x37863 = x37846 * x14;
        Fp x37864 = x37862 + x37863;
        Fp x37865 = x37850 * x15;
        Fp x37866 = x37864 + x37865;
        Fp x37867 = x37686 * x37676;
        Fp x37868 = x37866 + x37867;
        Fp x37869 = x37868 + x64;
        host_args[0] = x3;
        host_args[1] = x37869;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x37870 = Fp(x37869.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x37870;
          Fp x37871 = x37869 - x37870;
          Fp x37872 = x37871 * x10;
          Fp x37873 = Fp(x37872.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x37873;
          Fp x37874 = x37872 - x37873;
          Fp x37875 = x37874 * x10;
          Fp x37876 = Fp(x37875.asUInt32() & x2.asUInt32());
          args[2][90 * steps + cycle] = x37876;
          Fp x37877 = x37875 - x37876;
          Fp x37878 = x37877 * x10;
          Fp x37879 = Fp(x37878.asUInt32() & x2.asUInt32());
          args[2][91 * steps + cycle] = x37879;
          Fp x37880 = x37878 - x37879;
          Fp x37881 = x37880 * x10;
          Fp x37882 = Fp(x37881.asUInt32() & x2.asUInt32());
          args[2][92 * steps + cycle] = x37882;
          Fp x37883 = x37881 - x37882;
          Fp x37884 = x37883 * x10;
          Fp x37885 = Fp(x37884.asUInt32() & x2.asUInt32());
          args[2][93 * steps + cycle] = x37885;
          Fp x37886 = x37884 - x37885;
          Fp x37887 = x37886 * x10;
          Fp x37888 = Fp(x37887.asUInt32() & x2.asUInt32());
          args[2][94 * steps + cycle] = x37888;
          Fp x37889 = x37887 - x37888;
          Fp x37890 = x37889 * x10;
          Fp x37891 = Fp(x37890.asUInt32() & x2.asUInt32());
          args[2][95 * steps + cycle] = x37891;
          Fp x37892 = x37890 - x37891;
          Fp x37893 = x37892 * x10;
          Fp x37894 = Fp(x37893.asUInt32() & x2.asUInt32());
          args[2][96 * steps + cycle] = x37894;
          Fp x37895 = x37893 - x37894;
          Fp x37896 = x37895 * x10;
          Fp x37897 = Fp(x37896.asUInt32() & x2.asUInt32());
          args[2][97 * steps + cycle] = x37897;
          Fp x37898 = x37896 - x37897;
          Fp x37899 = x37898 * x10;
          Fp x37900 = Fp(x37899.asUInt32() & x2.asUInt32());
          args[2][98 * steps + cycle] = x37900;
          Fp x37901 = x37899 - x37900;
          Fp x37902 = x37901 * x10;
          Fp x37903 = Fp(x37902.asUInt32() & x2.asUInt32());
          args[2][99 * steps + cycle] = x37903;
        }
        Fp x37904 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x37905 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x37906 = x37905 * x3;
        Fp x37907 = x37904 + x37906;
        Fp x37908 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x37909 = x37908 * x11;
        Fp x37910 = x37907 + x37909;
        Fp x37911 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x37912 = x37911 * x12;
        Fp x37913 = x37910 + x37912;
        Fp x37914 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x37915 = x37914 * x13;
        Fp x37916 = x37913 + x37915;
        Fp x37917 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x37918 = x37917 * x14;
        Fp x37919 = x37916 + x37918;
        Fp x37920 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x37921 = x37920 * x15;
        Fp x37922 = x37919 + x37921;
        Fp x37923 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x37924 = x37923 * x16;
        Fp x37925 = x37922 + x37924;
        Fp x37926 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x37927 = x37926 * x17;
        Fp x37928 = x37925 + x37927;
        Fp x37929 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x37930 = x37929 * x18;
        Fp x37931 = x37928 + x37930;
        Fp x37932 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x37933 = x37932 * x19;
        Fp x37934 = x37931 + x37933;
        Fp x37935 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x37936 = x37935 * x20;
        Fp x37937 = x37934 + x37936;
        Fp x37938 = x37869 - x37937;
        Fp x37939 = x37938 * x62;
        {
          Fp x37940 = Fp(x37939.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x37940;
        }
        Fp x37941 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x37942 = x37939 - x37941;
        Fp x37943 = x37942 * x10;
        if (x37943 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x37944 = x37622 * x15;
        Fp x37945 = x37524 + x37944;
        Fp x37946 = x37626 * x3;
        Fp x37947 = x37623 + x37946;
        Fp x37948 = x37629 * x11;
        Fp x37949 = x37947 + x37948;
        Fp x37950 = x37632 * x12;
        Fp x37951 = x37949 + x37950;
        Fp x37952 = x37733 * x13;
        Fp x37953 = x37951 + x37952;
        args[2][100 * steps + cycle] = x37945;
        args[2][101 * steps + cycle] = x37953;
        host_args[0] = x37367;
        host_args[1] = x37321;
        host(ctx, "log", "  i0 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        host_args[0] = x37459;
        host_args[1] = x37413;
        host(ctx, "log", "  i1 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        Fp x37954 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x37955 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x37954;
        host_args[1] = x37955;
        host(ctx, "log", "  result = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
      }
      Fp x37956 = args[2][73 * steps + ((cycle - 1) & mask)];
      if (x37956 != 0) {
        {
          Fp x37957 = Fp(x37181.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x37957;
          Fp x37958 = x37181 - x37957;
          Fp x37959 = x37958 * x10;
          Fp x37960 = Fp(x37959.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x37960;
          Fp x37961 = x37959 - x37960;
          Fp x37962 = x37961 * x10;
          Fp x37963 = Fp(x37962.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x37963;
          Fp x37964 = x37962 - x37963;
          Fp x37965 = x37964 * x10;
          Fp x37966 = Fp(x37965.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x37966;
          Fp x37967 = x37965 - x37966;
          Fp x37968 = x37967 * x10;
          Fp x37969 = Fp(x37968.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x37969;
          Fp x37970 = x37968 - x37969;
          Fp x37971 = x37970 * x10;
          Fp x37972 = Fp(x37971.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x37972;
          Fp x37973 = x37971 - x37972;
          Fp x37974 = x37973 * x10;
          Fp x37975 = Fp(x37974.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x37975;
          Fp x37976 = x37974 - x37975;
          Fp x37977 = x37976 * x10;
          Fp x37978 = Fp(x37977.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x37978;
        }
        Fp x37979 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x37980 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x37981 = x37980 * x3;
        Fp x37982 = x37979 + x37981;
        Fp x37983 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x37984 = x37983 * x11;
        Fp x37985 = x37982 + x37984;
        Fp x37986 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x37987 = x37986 * x12;
        Fp x37988 = x37985 + x37987;
        Fp x37989 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x37990 = x37989 * x13;
        Fp x37991 = x37988 + x37990;
        Fp x37992 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x37993 = x37992 * x14;
        Fp x37994 = x37991 + x37993;
        Fp x37995 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x37996 = x37995 * x15;
        Fp x37997 = x37994 + x37996;
        Fp x37998 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x37999 = x37998 * x16;
        Fp x38000 = x37997 + x37999;
        Fp x38001 = x37181 - x38000;
        Fp x38002 = x38001 * x33;
        if (x38002 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
        {
          Fp x38003 = Fp(x37182.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x38003;
          Fp x38004 = x37182 - x38003;
          Fp x38005 = x38004 * x10;
          Fp x38006 = Fp(x38005.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x38006;
          Fp x38007 = x38005 - x38006;
          Fp x38008 = x38007 * x10;
          Fp x38009 = Fp(x38008.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x38009;
          Fp x38010 = x38008 - x38009;
          Fp x38011 = x38010 * x10;
          Fp x38012 = Fp(x38011.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x38012;
          Fp x38013 = x38011 - x38012;
          Fp x38014 = x38013 * x10;
          Fp x38015 = Fp(x38014.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x38015;
          Fp x38016 = x38014 - x38015;
          Fp x38017 = x38016 * x10;
          Fp x38018 = Fp(x38017.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x38018;
          Fp x38019 = x38017 - x38018;
          Fp x38020 = x38019 * x10;
          Fp x38021 = Fp(x38020.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x38021;
          Fp x38022 = x38020 - x38021;
          Fp x38023 = x38022 * x10;
          Fp x38024 = Fp(x38023.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x38024;
        }
        Fp x38025 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x38026 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x38027 = x38026 * x3;
        Fp x38028 = x38025 + x38027;
        Fp x38029 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x38030 = x38029 * x11;
        Fp x38031 = x38028 + x38030;
        Fp x38032 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x38033 = x38032 * x12;
        Fp x38034 = x38031 + x38033;
        Fp x38035 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x38036 = x38035 * x13;
        Fp x38037 = x38034 + x38036;
        Fp x38038 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x38039 = x38038 * x14;
        Fp x38040 = x38037 + x38039;
        Fp x38041 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x38042 = x38041 * x15;
        Fp x38043 = x38040 + x38042;
        Fp x38044 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x38045 = x38044 * x16;
        Fp x38046 = x38043 + x38045;
        Fp x38047 = x37182 - x38046;
        Fp x38048 = x38047 * x33;
        if (x38048 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
        {
          Fp x38049 = Fp(x37183.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x38049;
          Fp x38050 = x37183 - x38049;
          Fp x38051 = x38050 * x10;
          Fp x38052 = Fp(x38051.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x38052;
          Fp x38053 = x38051 - x38052;
          Fp x38054 = x38053 * x10;
          Fp x38055 = Fp(x38054.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x38055;
          Fp x38056 = x38054 - x38055;
          Fp x38057 = x38056 * x10;
          Fp x38058 = Fp(x38057.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x38058;
          Fp x38059 = x38057 - x38058;
          Fp x38060 = x38059 * x10;
          Fp x38061 = Fp(x38060.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x38061;
          Fp x38062 = x38060 - x38061;
          Fp x38063 = x38062 * x10;
          Fp x38064 = Fp(x38063.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x38064;
          Fp x38065 = x38063 - x38064;
          Fp x38066 = x38065 * x10;
          Fp x38067 = Fp(x38066.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x38067;
          Fp x38068 = x38066 - x38067;
          Fp x38069 = x38068 * x10;
          Fp x38070 = Fp(x38069.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x38070;
        }
        Fp x38071 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x38072 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x38073 = x38072 * x3;
        Fp x38074 = x38071 + x38073;
        Fp x38075 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x38076 = x38075 * x11;
        Fp x38077 = x38074 + x38076;
        Fp x38078 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x38079 = x38078 * x12;
        Fp x38080 = x38077 + x38079;
        Fp x38081 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x38082 = x38081 * x13;
        Fp x38083 = x38080 + x38082;
        Fp x38084 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x38085 = x38084 * x14;
        Fp x38086 = x38083 + x38085;
        Fp x38087 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x38088 = x38087 * x15;
        Fp x38089 = x38086 + x38088;
        Fp x38090 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x38091 = x38090 * x16;
        Fp x38092 = x38089 + x38091;
        Fp x38093 = x37183 - x38092;
        Fp x38094 = x38093 * x33;
        if (x38094 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
        {
          Fp x38095 = Fp(x37184.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x38095;
          Fp x38096 = x37184 - x38095;
          Fp x38097 = x38096 * x10;
          Fp x38098 = Fp(x38097.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x38098;
          Fp x38099 = x38097 - x38098;
          Fp x38100 = x38099 * x10;
          Fp x38101 = Fp(x38100.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x38101;
          Fp x38102 = x38100 - x38101;
          Fp x38103 = x38102 * x10;
          Fp x38104 = Fp(x38103.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x38104;
          Fp x38105 = x38103 - x38104;
          Fp x38106 = x38105 * x10;
          Fp x38107 = Fp(x38106.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x38107;
          Fp x38108 = x38106 - x38107;
          Fp x38109 = x38108 * x10;
          Fp x38110 = Fp(x38109.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x38110;
          Fp x38111 = x38109 - x38110;
          Fp x38112 = x38111 * x10;
          Fp x38113 = Fp(x38112.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x38113;
          Fp x38114 = x38112 - x38113;
          Fp x38115 = x38114 * x10;
          Fp x38116 = Fp(x38115.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x38116;
        }
        Fp x38117 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x38118 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x38119 = x38118 * x3;
        Fp x38120 = x38117 + x38119;
        Fp x38121 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x38122 = x38121 * x11;
        Fp x38123 = x38120 + x38122;
        Fp x38124 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x38125 = x38124 * x12;
        Fp x38126 = x38123 + x38125;
        Fp x38127 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x38128 = x38127 * x13;
        Fp x38129 = x38126 + x38128;
        Fp x38130 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x38131 = x38130 * x14;
        Fp x38132 = x38129 + x38131;
        Fp x38133 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x38134 = x38133 * x15;
        Fp x38135 = x38132 + x38134;
        Fp x38136 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x38137 = x38136 * x16;
        Fp x38138 = x38135 + x38137;
        Fp x38139 = x37184 - x38138;
        Fp x38140 = x38139 * x33;
        if (x38140 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:98");
        {
          Fp x38141 = Fp(x38136.asUInt32() & x71.asUInt32());
          args[2][108 * steps + cycle] = x38141;
          Fp x38142 = x38136 - x38141;
          Fp x38143 = x38142 * x26;
          Fp x38144 = Fp(x38143.asUInt32() & x71.asUInt32());
          args[2][109 * steps + cycle] = x38144;
        }
        Fp x38145 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x38146 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x38147 = x38146 * x1;
        Fp x38148 = x38145 + x38147;
        Fp x38149 = x38136 - x38148;
        Fp x38150 = x38149 * x10;
        if (x38150 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:35");
        {
          Fp x38151 = Fp(x38044.asUInt32() & x71.asUInt32());
          args[2][106 * steps + cycle] = x38151;
          Fp x38152 = x38044 - x38151;
          Fp x38153 = x38152 * x26;
          Fp x38154 = Fp(x38153.asUInt32() & x71.asUInt32());
          args[2][107 * steps + cycle] = x38154;
        }
        Fp x38155 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x38156 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x38157 = x38156 * x1;
        Fp x38158 = x38155 + x38157;
        Fp x38159 = x38044 - x38158;
        Fp x38160 = x38159 * x10;
        if (x38160 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:42");
        Fp x38161 = x37994 * x38086;
        host_args[0] = x70;
        host_args[1] = x38161;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x38162 = Fp(x38161.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x38162;
          Fp x38163 = x38161 - x38162;
          Fp x38164 = x38163 * x10;
          Fp x38165 = Fp(x38164.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x38165;
          Fp x38166 = x38164 - x38165;
          Fp x38167 = x38166 * x10;
          Fp x38168 = Fp(x38167.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x38168;
          Fp x38169 = x38167 - x38168;
          Fp x38170 = x38169 * x10;
          Fp x38171 = Fp(x38170.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x38171;
          Fp x38172 = x38170 - x38171;
          Fp x38173 = x38172 * x10;
          Fp x38174 = Fp(x38173.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x38174;
          Fp x38175 = x38173 - x38174;
          Fp x38176 = x38175 * x10;
          Fp x38177 = Fp(x38176.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x38177;
          Fp x38178 = x38176 - x38177;
          Fp x38179 = x38178 * x10;
          Fp x38180 = Fp(x38179.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x38180;
          Fp x38181 = x38179 - x38180;
          Fp x38182 = x38181 * x10;
          Fp x38183 = Fp(x38182.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x38183;
          Fp x38184 = x38182 - x38183;
          Fp x38185 = x38184 * x10;
          Fp x38186 = Fp(x38185.asUInt32() & x2.asUInt32());
          args[2][48 * steps + cycle] = x38186;
          Fp x38187 = x38185 - x38186;
          Fp x38188 = x38187 * x10;
          Fp x38189 = Fp(x38188.asUInt32() & x2.asUInt32());
          args[2][49 * steps + cycle] = x38189;
          Fp x38190 = x38188 - x38189;
          Fp x38191 = x38190 * x10;
          Fp x38192 = Fp(x38191.asUInt32() & x2.asUInt32());
          args[2][50 * steps + cycle] = x38192;
          Fp x38193 = x38191 - x38192;
          Fp x38194 = x38193 * x10;
          Fp x38195 = Fp(x38194.asUInt32() & x2.asUInt32());
          args[2][51 * steps + cycle] = x38195;
        }
        Fp x38196 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x38197 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x38198 = x38197 * x3;
        Fp x38199 = x38196 + x38198;
        Fp x38200 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x38201 = x38200 * x11;
        Fp x38202 = x38199 + x38201;
        Fp x38203 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x38204 = x38203 * x12;
        Fp x38205 = x38202 + x38204;
        Fp x38206 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x38207 = x38206 * x13;
        Fp x38208 = x38205 + x38207;
        Fp x38209 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x38210 = x38209 * x14;
        Fp x38211 = x38208 + x38210;
        Fp x38212 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x38213 = x38212 * x15;
        Fp x38214 = x38211 + x38213;
        Fp x38215 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x38216 = x38215 * x16;
        Fp x38217 = x38214 + x38216;
        Fp x38218 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x38219 = x38218 * x17;
        Fp x38220 = x38217 + x38219;
        Fp x38221 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x38222 = x38221 * x18;
        Fp x38223 = x38220 + x38222;
        Fp x38224 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x38225 = x38224 * x19;
        Fp x38226 = x38223 + x38225;
        Fp x38227 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x38228 = x38227 * x20;
        Fp x38229 = x38226 + x38228;
        Fp x38230 = x38161 - x38229;
        Fp x38231 = x38230 * x62;
        {
          Fp x38232 = Fp(x38231.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x38232;
        }
        Fp x38233 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x38234 = x38231 - x38233;
        Fp x38235 = x38234 * x10;
        if (x38235 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x38236 = x38215 * x3;
        Fp x38237 = x38212 + x38236;
        Fp x38238 = x38218 * x11;
        Fp x38239 = x38237 + x38238;
        Fp x38240 = x38221 * x12;
        Fp x38241 = x38239 + x38240;
        Fp x38242 = x38224 * x13;
        Fp x38243 = x38241 + x38242;
        Fp x38244 = x38227 * x14;
        Fp x38245 = x38243 + x38244;
        Fp x38246 = x38231 * x15;
        Fp x38247 = x38245 + x38246;
        Fp x38248 = x38090 * x3;
        Fp x38249 = x38087 + x38248;
        Fp x38250 = x38117 * x11;
        Fp x38251 = x38249 + x38250;
        Fp x38252 = x38118 * x12;
        Fp x38253 = x38251 + x38252;
        Fp x38254 = x38121 * x13;
        Fp x38255 = x38253 + x38254;
        Fp x38256 = x38124 * x14;
        Fp x38257 = x38255 + x38256;
        Fp x38258 = x37994 * x38257;
        Fp x38259 = x38247 + x38258;
        Fp x38260 = x37998 * x3;
        Fp x38261 = x37995 + x38260;
        Fp x38262 = x38025 * x11;
        Fp x38263 = x38261 + x38262;
        Fp x38264 = x38026 * x12;
        Fp x38265 = x38263 + x38264;
        Fp x38266 = x38029 * x13;
        Fp x38267 = x38265 + x38266;
        Fp x38268 = x38032 * x14;
        Fp x38269 = x38267 + x38268;
        Fp x38270 = x38269 * x38086;
        Fp x38271 = x38259 + x38270;
        host_args[0] = x71;
        host_args[1] = x38271;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x38272 = Fp(x38271.asUInt32() & x2.asUInt32());
          args[2][52 * steps + cycle] = x38272;
          Fp x38273 = x38271 - x38272;
          Fp x38274 = x38273 * x10;
          Fp x38275 = Fp(x38274.asUInt32() & x2.asUInt32());
          args[2][53 * steps + cycle] = x38275;
          Fp x38276 = x38274 - x38275;
          Fp x38277 = x38276 * x10;
          Fp x38278 = Fp(x38277.asUInt32() & x2.asUInt32());
          args[2][54 * steps + cycle] = x38278;
          Fp x38279 = x38277 - x38278;
          Fp x38280 = x38279 * x10;
          Fp x38281 = Fp(x38280.asUInt32() & x2.asUInt32());
          args[2][55 * steps + cycle] = x38281;
          Fp x38282 = x38280 - x38281;
          Fp x38283 = x38282 * x10;
          Fp x38284 = Fp(x38283.asUInt32() & x2.asUInt32());
          args[2][56 * steps + cycle] = x38284;
          Fp x38285 = x38283 - x38284;
          Fp x38286 = x38285 * x10;
          Fp x38287 = Fp(x38286.asUInt32() & x2.asUInt32());
          args[2][57 * steps + cycle] = x38287;
          Fp x38288 = x38286 - x38287;
          Fp x38289 = x38288 * x10;
          Fp x38290 = Fp(x38289.asUInt32() & x2.asUInt32());
          args[2][58 * steps + cycle] = x38290;
          Fp x38291 = x38289 - x38290;
          Fp x38292 = x38291 * x10;
          Fp x38293 = Fp(x38292.asUInt32() & x2.asUInt32());
          args[2][59 * steps + cycle] = x38293;
          Fp x38294 = x38292 - x38293;
          Fp x38295 = x38294 * x10;
          Fp x38296 = Fp(x38295.asUInt32() & x2.asUInt32());
          args[2][60 * steps + cycle] = x38296;
          Fp x38297 = x38295 - x38296;
          Fp x38298 = x38297 * x10;
          Fp x38299 = Fp(x38298.asUInt32() & x2.asUInt32());
          args[2][61 * steps + cycle] = x38299;
          Fp x38300 = x38298 - x38299;
          Fp x38301 = x38300 * x10;
          Fp x38302 = Fp(x38301.asUInt32() & x2.asUInt32());
          args[2][62 * steps + cycle] = x38302;
          Fp x38303 = x38301 - x38302;
          Fp x38304 = x38303 * x10;
          Fp x38305 = Fp(x38304.asUInt32() & x2.asUInt32());
          args[2][63 * steps + cycle] = x38305;
        }
        Fp x38306 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x38307 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x38308 = x38307 * x3;
        Fp x38309 = x38306 + x38308;
        Fp x38310 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x38311 = x38310 * x11;
        Fp x38312 = x38309 + x38311;
        Fp x38313 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x38314 = x38313 * x12;
        Fp x38315 = x38312 + x38314;
        Fp x38316 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x38317 = x38316 * x13;
        Fp x38318 = x38315 + x38317;
        Fp x38319 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x38320 = x38319 * x14;
        Fp x38321 = x38318 + x38320;
        Fp x38322 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x38323 = x38322 * x15;
        Fp x38324 = x38321 + x38323;
        Fp x38325 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x38326 = x38325 * x16;
        Fp x38327 = x38324 + x38326;
        Fp x38328 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x38329 = x38328 * x17;
        Fp x38330 = x38327 + x38329;
        Fp x38331 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x38332 = x38331 * x18;
        Fp x38333 = x38330 + x38332;
        Fp x38334 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x38335 = x38334 * x19;
        Fp x38336 = x38333 + x38335;
        Fp x38337 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x38338 = x38337 * x20;
        Fp x38339 = x38336 + x38338;
        Fp x38340 = x38271 - x38339;
        Fp x38341 = x38340 * x62;
        {
          Fp x38342 = Fp(x38341.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x38342;
        }
        Fp x38343 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x38344 = x38341 - x38343;
        Fp x38345 = x38344 * x10;
        if (x38345 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x38346 = x38325 * x3;
        Fp x38347 = x38322 + x38346;
        Fp x38348 = x38328 * x11;
        Fp x38349 = x38347 + x38348;
        Fp x38350 = x38331 * x12;
        Fp x38351 = x38349 + x38350;
        Fp x38352 = x38334 * x13;
        Fp x38353 = x38351 + x38352;
        Fp x38354 = x38337 * x14;
        Fp x38355 = x38353 + x38354;
        Fp x38356 = x38341 * x15;
        Fp x38357 = x38355 + x38356;
        Fp x38358 = x38130 * x3;
        Fp x38359 = x38127 + x38358;
        Fp x38360 = x38133 * x11;
        Fp x38361 = x38359 + x38360;
        Fp x38362 = x38136 * x12;
        Fp x38363 = x38361 + x38362;
        Fp x38364 = x37994 * x38363;
        Fp x38365 = x38357 + x38364;
        Fp x38366 = x38269 * x38257;
        Fp x38367 = x38365 + x38366;
        Fp x38368 = x38038 * x3;
        Fp x38369 = x38035 + x38368;
        Fp x38370 = x38041 * x11;
        Fp x38371 = x38369 + x38370;
        Fp x38372 = x38044 * x12;
        Fp x38373 = x38371 + x38372;
        Fp x38374 = x38373 * x38086;
        Fp x38375 = x38367 + x38374;
        Fp x38376 = x38375 + x31;
        Fp x38377 = x38146 * x37982;
        Fp x38378 = x38156 * x38074;
        Fp x38379 = x38377 + x38378;
        Fp x38380 = x38379 * x13;
        Fp x38381 = x38376 - x38380;
        host_args[0] = x1;
        host_args[1] = x38381;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x38382 = Fp(x38381.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x38382;
          Fp x38383 = x38381 - x38382;
          Fp x38384 = x38383 * x10;
          Fp x38385 = Fp(x38384.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x38385;
          Fp x38386 = x38384 - x38385;
          Fp x38387 = x38386 * x10;
          Fp x38388 = Fp(x38387.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x38388;
          Fp x38389 = x38387 - x38388;
          Fp x38390 = x38389 * x10;
          Fp x38391 = Fp(x38390.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x38391;
          Fp x38392 = x38390 - x38391;
          Fp x38393 = x38392 * x10;
          Fp x38394 = Fp(x38393.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x38394;
          Fp x38395 = x38393 - x38394;
          Fp x38396 = x38395 * x10;
          Fp x38397 = Fp(x38396.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x38397;
          Fp x38398 = x38396 - x38397;
          Fp x38399 = x38398 * x10;
          Fp x38400 = Fp(x38399.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x38400;
          Fp x38401 = x38399 - x38400;
          Fp x38402 = x38401 * x10;
          Fp x38403 = Fp(x38402.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x38403;
          Fp x38404 = x38402 - x38403;
          Fp x38405 = x38404 * x10;
          Fp x38406 = Fp(x38405.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x38406;
          Fp x38407 = x38405 - x38406;
          Fp x38408 = x38407 * x10;
          Fp x38409 = Fp(x38408.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x38409;
          Fp x38410 = x38408 - x38409;
          Fp x38411 = x38410 * x10;
          Fp x38412 = Fp(x38411.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x38412;
          Fp x38413 = x38411 - x38412;
          Fp x38414 = x38413 * x10;
          Fp x38415 = Fp(x38414.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x38415;
        }
        Fp x38416 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x38417 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x38418 = x38417 * x3;
        Fp x38419 = x38416 + x38418;
        Fp x38420 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x38421 = x38420 * x11;
        Fp x38422 = x38419 + x38421;
        Fp x38423 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x38424 = x38423 * x12;
        Fp x38425 = x38422 + x38424;
        Fp x38426 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x38427 = x38426 * x13;
        Fp x38428 = x38425 + x38427;
        Fp x38429 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x38430 = x38429 * x14;
        Fp x38431 = x38428 + x38430;
        Fp x38432 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x38433 = x38432 * x15;
        Fp x38434 = x38431 + x38433;
        Fp x38435 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x38436 = x38435 * x16;
        Fp x38437 = x38434 + x38436;
        Fp x38438 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x38439 = x38438 * x17;
        Fp x38440 = x38437 + x38439;
        Fp x38441 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x38442 = x38441 * x18;
        Fp x38443 = x38440 + x38442;
        Fp x38444 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x38445 = x38444 * x19;
        Fp x38446 = x38443 + x38445;
        Fp x38447 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x38448 = x38447 * x20;
        Fp x38449 = x38446 + x38448;
        Fp x38450 = x38381 - x38449;
        Fp x38451 = x38450 * x62;
        {
          Fp x38452 = Fp(x38451.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x38452;
        }
        Fp x38453 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x38454 = x38451 - x38453;
        Fp x38455 = x38454 * x10;
        if (x38455 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x38456 = x38435 * x3;
        Fp x38457 = x38432 + x38456;
        Fp x38458 = x38438 * x11;
        Fp x38459 = x38457 + x38458;
        Fp x38460 = x38441 * x12;
        Fp x38461 = x38459 + x38460;
        Fp x38462 = x38444 * x13;
        Fp x38463 = x38461 + x38462;
        Fp x38464 = x38447 * x14;
        Fp x38465 = x38463 + x38464;
        Fp x38466 = x38451 * x15;
        Fp x38467 = x38465 + x38466;
        Fp x38468 = x38269 * x38363;
        Fp x38469 = x38467 + x38468;
        Fp x38470 = x38373 * x38257;
        Fp x38471 = x38469 + x38470;
        Fp x38472 = x38471 + x63;
        Fp x38473 = x37986 * x3;
        Fp x38474 = x37983 + x38473;
        Fp x38475 = x37989 * x11;
        Fp x38476 = x38474 + x38475;
        Fp x38477 = x37992 * x12;
        Fp x38478 = x38476 + x38477;
        Fp x38479 = x37995 * x13;
        Fp x38480 = x38478 + x38479;
        Fp x38481 = x37998 * x14;
        Fp x38482 = x38480 + x38481;
        Fp x38483 = x38146 * x38482;
        Fp x38484 = x38078 * x3;
        Fp x38485 = x38075 + x38484;
        Fp x38486 = x38081 * x11;
        Fp x38487 = x38485 + x38486;
        Fp x38488 = x38084 * x12;
        Fp x38489 = x38487 + x38488;
        Fp x38490 = x38087 * x13;
        Fp x38491 = x38489 + x38490;
        Fp x38492 = x38090 * x14;
        Fp x38493 = x38491 + x38492;
        Fp x38494 = x38156 * x38493;
        Fp x38495 = x38483 + x38494;
        Fp x38496 = x38472 - x38495;
        host_args[0] = x2;
        host_args[1] = x38496;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x38497 = Fp(x38496.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x38497;
          Fp x38498 = x38496 - x38497;
          Fp x38499 = x38498 * x10;
          Fp x38500 = Fp(x38499.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x38500;
          Fp x38501 = x38499 - x38500;
          Fp x38502 = x38501 * x10;
          Fp x38503 = Fp(x38502.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x38503;
          Fp x38504 = x38502 - x38503;
          Fp x38505 = x38504 * x10;
          Fp x38506 = Fp(x38505.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x38506;
          Fp x38507 = x38505 - x38506;
          Fp x38508 = x38507 * x10;
          Fp x38509 = Fp(x38508.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x38509;
          Fp x38510 = x38508 - x38509;
          Fp x38511 = x38510 * x10;
          Fp x38512 = Fp(x38511.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x38512;
          Fp x38513 = x38511 - x38512;
          Fp x38514 = x38513 * x10;
          Fp x38515 = Fp(x38514.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x38515;
          Fp x38516 = x38514 - x38515;
          Fp x38517 = x38516 * x10;
          Fp x38518 = Fp(x38517.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x38518;
          Fp x38519 = x38517 - x38518;
          Fp x38520 = x38519 * x10;
          Fp x38521 = Fp(x38520.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x38521;
          Fp x38522 = x38520 - x38521;
          Fp x38523 = x38522 * x10;
          Fp x38524 = Fp(x38523.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x38524;
          Fp x38525 = x38523 - x38524;
          Fp x38526 = x38525 * x10;
          Fp x38527 = Fp(x38526.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x38527;
          Fp x38528 = x38526 - x38527;
          Fp x38529 = x38528 * x10;
          Fp x38530 = Fp(x38529.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x38530;
        }
        Fp x38531 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x38532 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x38533 = x38532 * x3;
        Fp x38534 = x38531 + x38533;
        Fp x38535 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x38536 = x38535 * x11;
        Fp x38537 = x38534 + x38536;
        Fp x38538 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x38539 = x38538 * x12;
        Fp x38540 = x38537 + x38539;
        Fp x38541 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x38542 = x38541 * x13;
        Fp x38543 = x38540 + x38542;
        Fp x38544 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x38545 = x38544 * x14;
        Fp x38546 = x38543 + x38545;
        Fp x38547 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x38548 = x38547 * x15;
        Fp x38549 = x38546 + x38548;
        Fp x38550 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x38551 = x38550 * x16;
        Fp x38552 = x38549 + x38551;
        Fp x38553 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x38554 = x38553 * x17;
        Fp x38555 = x38552 + x38554;
        Fp x38556 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x38557 = x38556 * x18;
        Fp x38558 = x38555 + x38557;
        Fp x38559 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x38560 = x38559 * x19;
        Fp x38561 = x38558 + x38560;
        Fp x38562 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x38563 = x38562 * x20;
        Fp x38564 = x38561 + x38563;
        Fp x38565 = x38496 - x38564;
        Fp x38566 = x38565 * x62;
        {
          Fp x38567 = Fp(x38566.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x38567;
        }
        Fp x38568 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x38569 = x38566 - x38568;
        Fp x38570 = x38569 * x10;
        if (x38570 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x38571 = x38550 * x3;
        Fp x38572 = x38547 + x38571;
        Fp x38573 = x38553 * x11;
        Fp x38574 = x38572 + x38573;
        Fp x38575 = x38556 * x12;
        Fp x38576 = x38574 + x38575;
        Fp x38577 = x38559 * x13;
        Fp x38578 = x38576 + x38577;
        Fp x38579 = x38562 * x14;
        Fp x38580 = x38578 + x38579;
        Fp x38581 = x38566 * x15;
        Fp x38582 = x38580 + x38581;
        Fp x38583 = x38373 * x38363;
        Fp x38584 = x38582 + x38583;
        Fp x38585 = x38584 + x64;
        Fp x38586 = x38146 * x38046;
        Fp x38587 = x38156 * x38138;
        Fp x38588 = x38586 + x38587;
        Fp x38589 = x38585 - x38588;
        host_args[0] = x3;
        host_args[1] = x38589;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x38590 = Fp(x38589.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x38590;
          Fp x38591 = x38589 - x38590;
          Fp x38592 = x38591 * x10;
          Fp x38593 = Fp(x38592.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x38593;
          Fp x38594 = x38592 - x38593;
          Fp x38595 = x38594 * x10;
          Fp x38596 = Fp(x38595.asUInt32() & x2.asUInt32());
          args[2][90 * steps + cycle] = x38596;
          Fp x38597 = x38595 - x38596;
          Fp x38598 = x38597 * x10;
          Fp x38599 = Fp(x38598.asUInt32() & x2.asUInt32());
          args[2][91 * steps + cycle] = x38599;
          Fp x38600 = x38598 - x38599;
          Fp x38601 = x38600 * x10;
          Fp x38602 = Fp(x38601.asUInt32() & x2.asUInt32());
          args[2][92 * steps + cycle] = x38602;
          Fp x38603 = x38601 - x38602;
          Fp x38604 = x38603 * x10;
          Fp x38605 = Fp(x38604.asUInt32() & x2.asUInt32());
          args[2][93 * steps + cycle] = x38605;
          Fp x38606 = x38604 - x38605;
          Fp x38607 = x38606 * x10;
          Fp x38608 = Fp(x38607.asUInt32() & x2.asUInt32());
          args[2][94 * steps + cycle] = x38608;
          Fp x38609 = x38607 - x38608;
          Fp x38610 = x38609 * x10;
          Fp x38611 = Fp(x38610.asUInt32() & x2.asUInt32());
          args[2][95 * steps + cycle] = x38611;
          Fp x38612 = x38610 - x38611;
          Fp x38613 = x38612 * x10;
          Fp x38614 = Fp(x38613.asUInt32() & x2.asUInt32());
          args[2][96 * steps + cycle] = x38614;
          Fp x38615 = x38613 - x38614;
          Fp x38616 = x38615 * x10;
          Fp x38617 = Fp(x38616.asUInt32() & x2.asUInt32());
          args[2][97 * steps + cycle] = x38617;
          Fp x38618 = x38616 - x38617;
          Fp x38619 = x38618 * x10;
          Fp x38620 = Fp(x38619.asUInt32() & x2.asUInt32());
          args[2][98 * steps + cycle] = x38620;
          Fp x38621 = x38619 - x38620;
          Fp x38622 = x38621 * x10;
          Fp x38623 = Fp(x38622.asUInt32() & x2.asUInt32());
          args[2][99 * steps + cycle] = x38623;
        }
        Fp x38624 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x38625 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x38626 = x38625 * x3;
        Fp x38627 = x38624 + x38626;
        Fp x38628 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x38629 = x38628 * x11;
        Fp x38630 = x38627 + x38629;
        Fp x38631 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x38632 = x38631 * x12;
        Fp x38633 = x38630 + x38632;
        Fp x38634 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x38635 = x38634 * x13;
        Fp x38636 = x38633 + x38635;
        Fp x38637 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x38638 = x38637 * x14;
        Fp x38639 = x38636 + x38638;
        Fp x38640 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x38641 = x38640 * x15;
        Fp x38642 = x38639 + x38641;
        Fp x38643 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x38644 = x38643 * x16;
        Fp x38645 = x38642 + x38644;
        Fp x38646 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x38647 = x38646 * x17;
        Fp x38648 = x38645 + x38647;
        Fp x38649 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x38650 = x38649 * x18;
        Fp x38651 = x38648 + x38650;
        Fp x38652 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x38653 = x38652 * x19;
        Fp x38654 = x38651 + x38653;
        Fp x38655 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x38656 = x38655 * x20;
        Fp x38657 = x38654 + x38656;
        Fp x38658 = x38589 - x38657;
        Fp x38659 = x38658 * x62;
        {
          Fp x38660 = Fp(x38659.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x38660;
        }
        Fp x38661 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x38662 = x38659 - x38661;
        Fp x38663 = x38662 * x10;
        if (x38663 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x38664 = x38429 * x3;
        Fp x38665 = x38426 + x38664;
        Fp x38666 = x38546 * x11;
        Fp x38667 = x38665 + x38666;
        args[2][100 * steps + cycle] = x38667;
        args[2][101 * steps + cycle] = x38645;
        host_args[0] = x38046;
        host_args[1] = x38000;
        host(ctx, "log", "  i0 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        host_args[0] = x38138;
        host_args[1] = x38092;
        host(ctx, "log", "  i1 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        Fp x38668 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x38669 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x38668;
        host_args[1] = x38669;
        host(ctx, "log", "  result = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
      }
      Fp x38670 = args[2][74 * steps + ((cycle - 1) & mask)];
      if (x38670 != 0) {
        {
          Fp x38671 = Fp(x37181.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x38671;
          Fp x38672 = x37181 - x38671;
          Fp x38673 = x38672 * x10;
          Fp x38674 = Fp(x38673.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x38674;
          Fp x38675 = x38673 - x38674;
          Fp x38676 = x38675 * x10;
          Fp x38677 = Fp(x38676.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x38677;
          Fp x38678 = x38676 - x38677;
          Fp x38679 = x38678 * x10;
          Fp x38680 = Fp(x38679.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x38680;
          Fp x38681 = x38679 - x38680;
          Fp x38682 = x38681 * x10;
          Fp x38683 = Fp(x38682.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x38683;
          Fp x38684 = x38682 - x38683;
          Fp x38685 = x38684 * x10;
          Fp x38686 = Fp(x38685.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x38686;
          Fp x38687 = x38685 - x38686;
          Fp x38688 = x38687 * x10;
          Fp x38689 = Fp(x38688.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x38689;
          Fp x38690 = x38688 - x38689;
          Fp x38691 = x38690 * x10;
          Fp x38692 = Fp(x38691.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x38692;
        }
        Fp x38693 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x38694 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x38695 = x38694 * x3;
        Fp x38696 = x38693 + x38695;
        Fp x38697 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x38698 = x38697 * x11;
        Fp x38699 = x38696 + x38698;
        Fp x38700 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x38701 = x38700 * x12;
        Fp x38702 = x38699 + x38701;
        Fp x38703 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x38704 = x38703 * x13;
        Fp x38705 = x38702 + x38704;
        Fp x38706 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x38707 = x38706 * x14;
        Fp x38708 = x38705 + x38707;
        Fp x38709 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x38710 = x38709 * x15;
        Fp x38711 = x38708 + x38710;
        Fp x38712 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x38713 = x38712 * x16;
        Fp x38714 = x38711 + x38713;
        Fp x38715 = x37181 - x38714;
        Fp x38716 = x38715 * x33;
        if (x38716 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
        {
          Fp x38717 = Fp(x37182.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x38717;
          Fp x38718 = x37182 - x38717;
          Fp x38719 = x38718 * x10;
          Fp x38720 = Fp(x38719.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x38720;
          Fp x38721 = x38719 - x38720;
          Fp x38722 = x38721 * x10;
          Fp x38723 = Fp(x38722.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x38723;
          Fp x38724 = x38722 - x38723;
          Fp x38725 = x38724 * x10;
          Fp x38726 = Fp(x38725.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x38726;
          Fp x38727 = x38725 - x38726;
          Fp x38728 = x38727 * x10;
          Fp x38729 = Fp(x38728.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x38729;
          Fp x38730 = x38728 - x38729;
          Fp x38731 = x38730 * x10;
          Fp x38732 = Fp(x38731.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x38732;
          Fp x38733 = x38731 - x38732;
          Fp x38734 = x38733 * x10;
          Fp x38735 = Fp(x38734.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x38735;
          Fp x38736 = x38734 - x38735;
          Fp x38737 = x38736 * x10;
          Fp x38738 = Fp(x38737.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x38738;
        }
        Fp x38739 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x38740 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x38741 = x38740 * x3;
        Fp x38742 = x38739 + x38741;
        Fp x38743 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x38744 = x38743 * x11;
        Fp x38745 = x38742 + x38744;
        Fp x38746 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x38747 = x38746 * x12;
        Fp x38748 = x38745 + x38747;
        Fp x38749 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x38750 = x38749 * x13;
        Fp x38751 = x38748 + x38750;
        Fp x38752 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x38753 = x38752 * x14;
        Fp x38754 = x38751 + x38753;
        Fp x38755 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x38756 = x38755 * x15;
        Fp x38757 = x38754 + x38756;
        Fp x38758 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x38759 = x38758 * x16;
        Fp x38760 = x38757 + x38759;
        Fp x38761 = x37182 - x38760;
        Fp x38762 = x38761 * x33;
        if (x38762 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
        {
          Fp x38763 = Fp(x37183.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x38763;
          Fp x38764 = x37183 - x38763;
          Fp x38765 = x38764 * x10;
          Fp x38766 = Fp(x38765.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x38766;
          Fp x38767 = x38765 - x38766;
          Fp x38768 = x38767 * x10;
          Fp x38769 = Fp(x38768.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x38769;
          Fp x38770 = x38768 - x38769;
          Fp x38771 = x38770 * x10;
          Fp x38772 = Fp(x38771.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x38772;
          Fp x38773 = x38771 - x38772;
          Fp x38774 = x38773 * x10;
          Fp x38775 = Fp(x38774.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x38775;
          Fp x38776 = x38774 - x38775;
          Fp x38777 = x38776 * x10;
          Fp x38778 = Fp(x38777.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x38778;
          Fp x38779 = x38777 - x38778;
          Fp x38780 = x38779 * x10;
          Fp x38781 = Fp(x38780.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x38781;
          Fp x38782 = x38780 - x38781;
          Fp x38783 = x38782 * x10;
          Fp x38784 = Fp(x38783.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x38784;
        }
        Fp x38785 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x38786 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x38787 = x38786 * x3;
        Fp x38788 = x38785 + x38787;
        Fp x38789 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x38790 = x38789 * x11;
        Fp x38791 = x38788 + x38790;
        Fp x38792 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x38793 = x38792 * x12;
        Fp x38794 = x38791 + x38793;
        Fp x38795 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x38796 = x38795 * x13;
        Fp x38797 = x38794 + x38796;
        Fp x38798 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x38799 = x38798 * x14;
        Fp x38800 = x38797 + x38799;
        Fp x38801 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x38802 = x38801 * x15;
        Fp x38803 = x38800 + x38802;
        Fp x38804 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x38805 = x38804 * x16;
        Fp x38806 = x38803 + x38805;
        Fp x38807 = x37183 - x38806;
        Fp x38808 = x38807 * x33;
        if (x38808 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
        {
          Fp x38809 = Fp(x37184.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x38809;
          Fp x38810 = x37184 - x38809;
          Fp x38811 = x38810 * x10;
          Fp x38812 = Fp(x38811.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x38812;
          Fp x38813 = x38811 - x38812;
          Fp x38814 = x38813 * x10;
          Fp x38815 = Fp(x38814.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x38815;
          Fp x38816 = x38814 - x38815;
          Fp x38817 = x38816 * x10;
          Fp x38818 = Fp(x38817.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x38818;
          Fp x38819 = x38817 - x38818;
          Fp x38820 = x38819 * x10;
          Fp x38821 = Fp(x38820.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x38821;
          Fp x38822 = x38820 - x38821;
          Fp x38823 = x38822 * x10;
          Fp x38824 = Fp(x38823.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x38824;
          Fp x38825 = x38823 - x38824;
          Fp x38826 = x38825 * x10;
          Fp x38827 = Fp(x38826.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x38827;
          Fp x38828 = x38826 - x38827;
          Fp x38829 = x38828 * x10;
          Fp x38830 = Fp(x38829.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x38830;
        }
        Fp x38831 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x38832 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x38833 = x38832 * x3;
        Fp x38834 = x38831 + x38833;
        Fp x38835 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x38836 = x38835 * x11;
        Fp x38837 = x38834 + x38836;
        Fp x38838 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x38839 = x38838 * x12;
        Fp x38840 = x38837 + x38839;
        Fp x38841 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x38842 = x38841 * x13;
        Fp x38843 = x38840 + x38842;
        Fp x38844 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x38845 = x38844 * x14;
        Fp x38846 = x38843 + x38845;
        Fp x38847 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x38848 = x38847 * x15;
        Fp x38849 = x38846 + x38848;
        Fp x38850 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x38851 = x38850 * x16;
        Fp x38852 = x38849 + x38851;
        Fp x38853 = x37184 - x38852;
        Fp x38854 = x38853 * x33;
        if (x38854 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:99");
        {
          args[2][108 * steps + cycle] = x70;
          args[2][109 * steps + cycle] = x70;
        }
        Fp x38855 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x38856 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x38857 = x38856 * x1;
        Fp x38858 = x38855 + x38857;
        Fp x38859 = x70 - x38858;
        Fp x38860 = x38859 * x10;
        if (x38860 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:38");
        {
          Fp x38861 = Fp(x38758.asUInt32() & x71.asUInt32());
          args[2][106 * steps + cycle] = x38861;
          Fp x38862 = x38758 - x38861;
          Fp x38863 = x38862 * x26;
          Fp x38864 = Fp(x38863.asUInt32() & x71.asUInt32());
          args[2][107 * steps + cycle] = x38864;
        }
        Fp x38865 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x38866 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x38867 = x38866 * x1;
        Fp x38868 = x38865 + x38867;
        Fp x38869 = x38758 - x38868;
        Fp x38870 = x38869 * x10;
        if (x38870 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:42");
        Fp x38871 = x38708 * x38800;
        host_args[0] = x70;
        host_args[1] = x38871;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x38872 = Fp(x38871.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x38872;
          Fp x38873 = x38871 - x38872;
          Fp x38874 = x38873 * x10;
          Fp x38875 = Fp(x38874.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x38875;
          Fp x38876 = x38874 - x38875;
          Fp x38877 = x38876 * x10;
          Fp x38878 = Fp(x38877.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x38878;
          Fp x38879 = x38877 - x38878;
          Fp x38880 = x38879 * x10;
          Fp x38881 = Fp(x38880.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x38881;
          Fp x38882 = x38880 - x38881;
          Fp x38883 = x38882 * x10;
          Fp x38884 = Fp(x38883.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x38884;
          Fp x38885 = x38883 - x38884;
          Fp x38886 = x38885 * x10;
          Fp x38887 = Fp(x38886.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x38887;
          Fp x38888 = x38886 - x38887;
          Fp x38889 = x38888 * x10;
          Fp x38890 = Fp(x38889.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x38890;
          Fp x38891 = x38889 - x38890;
          Fp x38892 = x38891 * x10;
          Fp x38893 = Fp(x38892.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x38893;
          Fp x38894 = x38892 - x38893;
          Fp x38895 = x38894 * x10;
          Fp x38896 = Fp(x38895.asUInt32() & x2.asUInt32());
          args[2][48 * steps + cycle] = x38896;
          Fp x38897 = x38895 - x38896;
          Fp x38898 = x38897 * x10;
          Fp x38899 = Fp(x38898.asUInt32() & x2.asUInt32());
          args[2][49 * steps + cycle] = x38899;
          Fp x38900 = x38898 - x38899;
          Fp x38901 = x38900 * x10;
          Fp x38902 = Fp(x38901.asUInt32() & x2.asUInt32());
          args[2][50 * steps + cycle] = x38902;
          Fp x38903 = x38901 - x38902;
          Fp x38904 = x38903 * x10;
          Fp x38905 = Fp(x38904.asUInt32() & x2.asUInt32());
          args[2][51 * steps + cycle] = x38905;
        }
        Fp x38906 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x38907 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x38908 = x38907 * x3;
        Fp x38909 = x38906 + x38908;
        Fp x38910 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x38911 = x38910 * x11;
        Fp x38912 = x38909 + x38911;
        Fp x38913 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x38914 = x38913 * x12;
        Fp x38915 = x38912 + x38914;
        Fp x38916 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x38917 = x38916 * x13;
        Fp x38918 = x38915 + x38917;
        Fp x38919 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x38920 = x38919 * x14;
        Fp x38921 = x38918 + x38920;
        Fp x38922 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x38923 = x38922 * x15;
        Fp x38924 = x38921 + x38923;
        Fp x38925 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x38926 = x38925 * x16;
        Fp x38927 = x38924 + x38926;
        Fp x38928 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x38929 = x38928 * x17;
        Fp x38930 = x38927 + x38929;
        Fp x38931 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x38932 = x38931 * x18;
        Fp x38933 = x38930 + x38932;
        Fp x38934 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x38935 = x38934 * x19;
        Fp x38936 = x38933 + x38935;
        Fp x38937 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x38938 = x38937 * x20;
        Fp x38939 = x38936 + x38938;
        Fp x38940 = x38871 - x38939;
        Fp x38941 = x38940 * x62;
        {
          Fp x38942 = Fp(x38941.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x38942;
        }
        Fp x38943 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x38944 = x38941 - x38943;
        Fp x38945 = x38944 * x10;
        if (x38945 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x38946 = x38925 * x3;
        Fp x38947 = x38922 + x38946;
        Fp x38948 = x38928 * x11;
        Fp x38949 = x38947 + x38948;
        Fp x38950 = x38931 * x12;
        Fp x38951 = x38949 + x38950;
        Fp x38952 = x38934 * x13;
        Fp x38953 = x38951 + x38952;
        Fp x38954 = x38937 * x14;
        Fp x38955 = x38953 + x38954;
        Fp x38956 = x38941 * x15;
        Fp x38957 = x38955 + x38956;
        Fp x38958 = x38804 * x3;
        Fp x38959 = x38801 + x38958;
        Fp x38960 = x38831 * x11;
        Fp x38961 = x38959 + x38960;
        Fp x38962 = x38832 * x12;
        Fp x38963 = x38961 + x38962;
        Fp x38964 = x38835 * x13;
        Fp x38965 = x38963 + x38964;
        Fp x38966 = x38838 * x14;
        Fp x38967 = x38965 + x38966;
        Fp x38968 = x38708 * x38967;
        Fp x38969 = x38957 + x38968;
        Fp x38970 = x38712 * x3;
        Fp x38971 = x38709 + x38970;
        Fp x38972 = x38739 * x11;
        Fp x38973 = x38971 + x38972;
        Fp x38974 = x38740 * x12;
        Fp x38975 = x38973 + x38974;
        Fp x38976 = x38743 * x13;
        Fp x38977 = x38975 + x38976;
        Fp x38978 = x38746 * x14;
        Fp x38979 = x38977 + x38978;
        Fp x38980 = x38979 * x38800;
        Fp x38981 = x38969 + x38980;
        host_args[0] = x71;
        host_args[1] = x38981;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x38982 = Fp(x38981.asUInt32() & x2.asUInt32());
          args[2][52 * steps + cycle] = x38982;
          Fp x38983 = x38981 - x38982;
          Fp x38984 = x38983 * x10;
          Fp x38985 = Fp(x38984.asUInt32() & x2.asUInt32());
          args[2][53 * steps + cycle] = x38985;
          Fp x38986 = x38984 - x38985;
          Fp x38987 = x38986 * x10;
          Fp x38988 = Fp(x38987.asUInt32() & x2.asUInt32());
          args[2][54 * steps + cycle] = x38988;
          Fp x38989 = x38987 - x38988;
          Fp x38990 = x38989 * x10;
          Fp x38991 = Fp(x38990.asUInt32() & x2.asUInt32());
          args[2][55 * steps + cycle] = x38991;
          Fp x38992 = x38990 - x38991;
          Fp x38993 = x38992 * x10;
          Fp x38994 = Fp(x38993.asUInt32() & x2.asUInt32());
          args[2][56 * steps + cycle] = x38994;
          Fp x38995 = x38993 - x38994;
          Fp x38996 = x38995 * x10;
          Fp x38997 = Fp(x38996.asUInt32() & x2.asUInt32());
          args[2][57 * steps + cycle] = x38997;
          Fp x38998 = x38996 - x38997;
          Fp x38999 = x38998 * x10;
          Fp x39000 = Fp(x38999.asUInt32() & x2.asUInt32());
          args[2][58 * steps + cycle] = x39000;
          Fp x39001 = x38999 - x39000;
          Fp x39002 = x39001 * x10;
          Fp x39003 = Fp(x39002.asUInt32() & x2.asUInt32());
          args[2][59 * steps + cycle] = x39003;
          Fp x39004 = x39002 - x39003;
          Fp x39005 = x39004 * x10;
          Fp x39006 = Fp(x39005.asUInt32() & x2.asUInt32());
          args[2][60 * steps + cycle] = x39006;
          Fp x39007 = x39005 - x39006;
          Fp x39008 = x39007 * x10;
          Fp x39009 = Fp(x39008.asUInt32() & x2.asUInt32());
          args[2][61 * steps + cycle] = x39009;
          Fp x39010 = x39008 - x39009;
          Fp x39011 = x39010 * x10;
          Fp x39012 = Fp(x39011.asUInt32() & x2.asUInt32());
          args[2][62 * steps + cycle] = x39012;
          Fp x39013 = x39011 - x39012;
          Fp x39014 = x39013 * x10;
          Fp x39015 = Fp(x39014.asUInt32() & x2.asUInt32());
          args[2][63 * steps + cycle] = x39015;
        }
        Fp x39016 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x39017 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x39018 = x39017 * x3;
        Fp x39019 = x39016 + x39018;
        Fp x39020 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x39021 = x39020 * x11;
        Fp x39022 = x39019 + x39021;
        Fp x39023 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x39024 = x39023 * x12;
        Fp x39025 = x39022 + x39024;
        Fp x39026 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x39027 = x39026 * x13;
        Fp x39028 = x39025 + x39027;
        Fp x39029 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x39030 = x39029 * x14;
        Fp x39031 = x39028 + x39030;
        Fp x39032 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x39033 = x39032 * x15;
        Fp x39034 = x39031 + x39033;
        Fp x39035 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x39036 = x39035 * x16;
        Fp x39037 = x39034 + x39036;
        Fp x39038 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x39039 = x39038 * x17;
        Fp x39040 = x39037 + x39039;
        Fp x39041 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x39042 = x39041 * x18;
        Fp x39043 = x39040 + x39042;
        Fp x39044 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x39045 = x39044 * x19;
        Fp x39046 = x39043 + x39045;
        Fp x39047 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x39048 = x39047 * x20;
        Fp x39049 = x39046 + x39048;
        Fp x39050 = x38981 - x39049;
        Fp x39051 = x39050 * x62;
        {
          Fp x39052 = Fp(x39051.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x39052;
        }
        Fp x39053 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x39054 = x39051 - x39053;
        Fp x39055 = x39054 * x10;
        if (x39055 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x39056 = x39035 * x3;
        Fp x39057 = x39032 + x39056;
        Fp x39058 = x39038 * x11;
        Fp x39059 = x39057 + x39058;
        Fp x39060 = x39041 * x12;
        Fp x39061 = x39059 + x39060;
        Fp x39062 = x39044 * x13;
        Fp x39063 = x39061 + x39062;
        Fp x39064 = x39047 * x14;
        Fp x39065 = x39063 + x39064;
        Fp x39066 = x39051 * x15;
        Fp x39067 = x39065 + x39066;
        Fp x39068 = x38844 * x3;
        Fp x39069 = x38841 + x39068;
        Fp x39070 = x38847 * x11;
        Fp x39071 = x39069 + x39070;
        Fp x39072 = x38850 * x12;
        Fp x39073 = x39071 + x39072;
        Fp x39074 = x38708 * x39073;
        Fp x39075 = x39067 + x39074;
        Fp x39076 = x38979 * x38967;
        Fp x39077 = x39075 + x39076;
        Fp x39078 = x38752 * x3;
        Fp x39079 = x38749 + x39078;
        Fp x39080 = x38755 * x11;
        Fp x39081 = x39079 + x39080;
        Fp x39082 = x38758 * x12;
        Fp x39083 = x39081 + x39082;
        Fp x39084 = x39083 * x38800;
        Fp x39085 = x39077 + x39084;
        Fp x39086 = x39085 + x31;
        Fp x39087 = x38866 * x38788;
        Fp x39088 = x39087 * x13;
        Fp x39089 = x39086 - x39088;
        host_args[0] = x1;
        host_args[1] = x39089;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x39090 = Fp(x39089.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x39090;
          Fp x39091 = x39089 - x39090;
          Fp x39092 = x39091 * x10;
          Fp x39093 = Fp(x39092.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x39093;
          Fp x39094 = x39092 - x39093;
          Fp x39095 = x39094 * x10;
          Fp x39096 = Fp(x39095.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x39096;
          Fp x39097 = x39095 - x39096;
          Fp x39098 = x39097 * x10;
          Fp x39099 = Fp(x39098.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x39099;
          Fp x39100 = x39098 - x39099;
          Fp x39101 = x39100 * x10;
          Fp x39102 = Fp(x39101.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x39102;
          Fp x39103 = x39101 - x39102;
          Fp x39104 = x39103 * x10;
          Fp x39105 = Fp(x39104.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x39105;
          Fp x39106 = x39104 - x39105;
          Fp x39107 = x39106 * x10;
          Fp x39108 = Fp(x39107.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x39108;
          Fp x39109 = x39107 - x39108;
          Fp x39110 = x39109 * x10;
          Fp x39111 = Fp(x39110.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x39111;
          Fp x39112 = x39110 - x39111;
          Fp x39113 = x39112 * x10;
          Fp x39114 = Fp(x39113.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x39114;
          Fp x39115 = x39113 - x39114;
          Fp x39116 = x39115 * x10;
          Fp x39117 = Fp(x39116.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x39117;
          Fp x39118 = x39116 - x39117;
          Fp x39119 = x39118 * x10;
          Fp x39120 = Fp(x39119.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x39120;
          Fp x39121 = x39119 - x39120;
          Fp x39122 = x39121 * x10;
          Fp x39123 = Fp(x39122.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x39123;
        }
        Fp x39124 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x39125 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x39126 = x39125 * x3;
        Fp x39127 = x39124 + x39126;
        Fp x39128 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x39129 = x39128 * x11;
        Fp x39130 = x39127 + x39129;
        Fp x39131 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x39132 = x39131 * x12;
        Fp x39133 = x39130 + x39132;
        Fp x39134 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x39135 = x39134 * x13;
        Fp x39136 = x39133 + x39135;
        Fp x39137 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x39138 = x39137 * x14;
        Fp x39139 = x39136 + x39138;
        Fp x39140 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x39141 = x39140 * x15;
        Fp x39142 = x39139 + x39141;
        Fp x39143 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x39144 = x39143 * x16;
        Fp x39145 = x39142 + x39144;
        Fp x39146 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x39147 = x39146 * x17;
        Fp x39148 = x39145 + x39147;
        Fp x39149 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x39150 = x39149 * x18;
        Fp x39151 = x39148 + x39150;
        Fp x39152 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x39153 = x39152 * x19;
        Fp x39154 = x39151 + x39153;
        Fp x39155 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x39156 = x39155 * x20;
        Fp x39157 = x39154 + x39156;
        Fp x39158 = x39089 - x39157;
        Fp x39159 = x39158 * x62;
        {
          Fp x39160 = Fp(x39159.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x39160;
        }
        Fp x39161 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x39162 = x39159 - x39161;
        Fp x39163 = x39162 * x10;
        if (x39163 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x39164 = x39143 * x3;
        Fp x39165 = x39140 + x39164;
        Fp x39166 = x39146 * x11;
        Fp x39167 = x39165 + x39166;
        Fp x39168 = x39149 * x12;
        Fp x39169 = x39167 + x39168;
        Fp x39170 = x39152 * x13;
        Fp x39171 = x39169 + x39170;
        Fp x39172 = x39155 * x14;
        Fp x39173 = x39171 + x39172;
        Fp x39174 = x39159 * x15;
        Fp x39175 = x39173 + x39174;
        Fp x39176 = x38979 * x39073;
        Fp x39177 = x39175 + x39176;
        Fp x39178 = x39083 * x38967;
        Fp x39179 = x39177 + x39178;
        Fp x39180 = x39179 + x63;
        Fp x39181 = x38792 * x3;
        Fp x39182 = x38789 + x39181;
        Fp x39183 = x38795 * x11;
        Fp x39184 = x39182 + x39183;
        Fp x39185 = x38798 * x12;
        Fp x39186 = x39184 + x39185;
        Fp x39187 = x38801 * x13;
        Fp x39188 = x39186 + x39187;
        Fp x39189 = x38804 * x14;
        Fp x39190 = x39188 + x39189;
        Fp x39191 = x38866 * x39190;
        Fp x39192 = x39180 - x39191;
        host_args[0] = x2;
        host_args[1] = x39192;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x39193 = Fp(x39192.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x39193;
          Fp x39194 = x39192 - x39193;
          Fp x39195 = x39194 * x10;
          Fp x39196 = Fp(x39195.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x39196;
          Fp x39197 = x39195 - x39196;
          Fp x39198 = x39197 * x10;
          Fp x39199 = Fp(x39198.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x39199;
          Fp x39200 = x39198 - x39199;
          Fp x39201 = x39200 * x10;
          Fp x39202 = Fp(x39201.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x39202;
          Fp x39203 = x39201 - x39202;
          Fp x39204 = x39203 * x10;
          Fp x39205 = Fp(x39204.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x39205;
          Fp x39206 = x39204 - x39205;
          Fp x39207 = x39206 * x10;
          Fp x39208 = Fp(x39207.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x39208;
          Fp x39209 = x39207 - x39208;
          Fp x39210 = x39209 * x10;
          Fp x39211 = Fp(x39210.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x39211;
          Fp x39212 = x39210 - x39211;
          Fp x39213 = x39212 * x10;
          Fp x39214 = Fp(x39213.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x39214;
          Fp x39215 = x39213 - x39214;
          Fp x39216 = x39215 * x10;
          Fp x39217 = Fp(x39216.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x39217;
          Fp x39218 = x39216 - x39217;
          Fp x39219 = x39218 * x10;
          Fp x39220 = Fp(x39219.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x39220;
          Fp x39221 = x39219 - x39220;
          Fp x39222 = x39221 * x10;
          Fp x39223 = Fp(x39222.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x39223;
          Fp x39224 = x39222 - x39223;
          Fp x39225 = x39224 * x10;
          Fp x39226 = Fp(x39225.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x39226;
        }
        Fp x39227 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x39228 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x39229 = x39228 * x3;
        Fp x39230 = x39227 + x39229;
        Fp x39231 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x39232 = x39231 * x11;
        Fp x39233 = x39230 + x39232;
        Fp x39234 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x39235 = x39234 * x12;
        Fp x39236 = x39233 + x39235;
        Fp x39237 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x39238 = x39237 * x13;
        Fp x39239 = x39236 + x39238;
        Fp x39240 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x39241 = x39240 * x14;
        Fp x39242 = x39239 + x39241;
        Fp x39243 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x39244 = x39243 * x15;
        Fp x39245 = x39242 + x39244;
        Fp x39246 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x39247 = x39246 * x16;
        Fp x39248 = x39245 + x39247;
        Fp x39249 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x39250 = x39249 * x17;
        Fp x39251 = x39248 + x39250;
        Fp x39252 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x39253 = x39252 * x18;
        Fp x39254 = x39251 + x39253;
        Fp x39255 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x39256 = x39255 * x19;
        Fp x39257 = x39254 + x39256;
        Fp x39258 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x39259 = x39258 * x20;
        Fp x39260 = x39257 + x39259;
        Fp x39261 = x39192 - x39260;
        Fp x39262 = x39261 * x62;
        {
          Fp x39263 = Fp(x39262.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x39263;
        }
        Fp x39264 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x39265 = x39262 - x39264;
        Fp x39266 = x39265 * x10;
        if (x39266 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x39267 = x39246 * x3;
        Fp x39268 = x39243 + x39267;
        Fp x39269 = x39249 * x11;
        Fp x39270 = x39268 + x39269;
        Fp x39271 = x39252 * x12;
        Fp x39272 = x39270 + x39271;
        Fp x39273 = x39255 * x13;
        Fp x39274 = x39272 + x39273;
        Fp x39275 = x39258 * x14;
        Fp x39276 = x39274 + x39275;
        Fp x39277 = x39262 * x15;
        Fp x39278 = x39276 + x39277;
        Fp x39279 = x39083 * x39073;
        Fp x39280 = x39278 + x39279;
        Fp x39281 = x39280 + x64;
        Fp x39282 = x38866 * x38852;
        Fp x39283 = x39281 - x39282;
        host_args[0] = x3;
        host_args[1] = x39283;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x39284 = Fp(x39283.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x39284;
          Fp x39285 = x39283 - x39284;
          Fp x39286 = x39285 * x10;
          Fp x39287 = Fp(x39286.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x39287;
          Fp x39288 = x39286 - x39287;
          Fp x39289 = x39288 * x10;
          Fp x39290 = Fp(x39289.asUInt32() & x2.asUInt32());
          args[2][90 * steps + cycle] = x39290;
          Fp x39291 = x39289 - x39290;
          Fp x39292 = x39291 * x10;
          Fp x39293 = Fp(x39292.asUInt32() & x2.asUInt32());
          args[2][91 * steps + cycle] = x39293;
          Fp x39294 = x39292 - x39293;
          Fp x39295 = x39294 * x10;
          Fp x39296 = Fp(x39295.asUInt32() & x2.asUInt32());
          args[2][92 * steps + cycle] = x39296;
          Fp x39297 = x39295 - x39296;
          Fp x39298 = x39297 * x10;
          Fp x39299 = Fp(x39298.asUInt32() & x2.asUInt32());
          args[2][93 * steps + cycle] = x39299;
          Fp x39300 = x39298 - x39299;
          Fp x39301 = x39300 * x10;
          Fp x39302 = Fp(x39301.asUInt32() & x2.asUInt32());
          args[2][94 * steps + cycle] = x39302;
          Fp x39303 = x39301 - x39302;
          Fp x39304 = x39303 * x10;
          Fp x39305 = Fp(x39304.asUInt32() & x2.asUInt32());
          args[2][95 * steps + cycle] = x39305;
          Fp x39306 = x39304 - x39305;
          Fp x39307 = x39306 * x10;
          Fp x39308 = Fp(x39307.asUInt32() & x2.asUInt32());
          args[2][96 * steps + cycle] = x39308;
          Fp x39309 = x39307 - x39308;
          Fp x39310 = x39309 * x10;
          Fp x39311 = Fp(x39310.asUInt32() & x2.asUInt32());
          args[2][97 * steps + cycle] = x39311;
          Fp x39312 = x39310 - x39311;
          Fp x39313 = x39312 * x10;
          Fp x39314 = Fp(x39313.asUInt32() & x2.asUInt32());
          args[2][98 * steps + cycle] = x39314;
          Fp x39315 = x39313 - x39314;
          Fp x39316 = x39315 * x10;
          Fp x39317 = Fp(x39316.asUInt32() & x2.asUInt32());
          args[2][99 * steps + cycle] = x39317;
        }
        Fp x39318 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x39319 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x39320 = x39319 * x3;
        Fp x39321 = x39318 + x39320;
        Fp x39322 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x39323 = x39322 * x11;
        Fp x39324 = x39321 + x39323;
        Fp x39325 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x39326 = x39325 * x12;
        Fp x39327 = x39324 + x39326;
        Fp x39328 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x39329 = x39328 * x13;
        Fp x39330 = x39327 + x39329;
        Fp x39331 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x39332 = x39331 * x14;
        Fp x39333 = x39330 + x39332;
        Fp x39334 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x39335 = x39334 * x15;
        Fp x39336 = x39333 + x39335;
        Fp x39337 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x39338 = x39337 * x16;
        Fp x39339 = x39336 + x39338;
        Fp x39340 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x39341 = x39340 * x17;
        Fp x39342 = x39339 + x39341;
        Fp x39343 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x39344 = x39343 * x18;
        Fp x39345 = x39342 + x39344;
        Fp x39346 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x39347 = x39346 * x19;
        Fp x39348 = x39345 + x39347;
        Fp x39349 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x39350 = x39349 * x20;
        Fp x39351 = x39348 + x39350;
        Fp x39352 = x39283 - x39351;
        Fp x39353 = x39352 * x62;
        {
          Fp x39354 = Fp(x39353.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x39354;
        }
        Fp x39355 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x39356 = x39353 - x39355;
        Fp x39357 = x39356 * x10;
        if (x39357 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x39358 = x39137 * x3;
        Fp x39359 = x39134 + x39358;
        Fp x39360 = x39242 * x11;
        Fp x39361 = x39359 + x39360;
        args[2][100 * steps + cycle] = x39361;
        args[2][101 * steps + cycle] = x39339;
        host_args[0] = x38760;
        host_args[1] = x38714;
        host(ctx, "log", "  i0 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        host_args[0] = x38852;
        host_args[1] = x38806;
        host(ctx, "log", "  i1 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        Fp x39362 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x39363 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x39362;
        host_args[1] = x39363;
        host(ctx, "log", "  result = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
      }
      Fp x39364 = args[2][75 * steps + ((cycle - 1) & mask)];
      if (x39364 != 0) {
        {
          Fp x39365 = Fp(x37181.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x39365;
          Fp x39366 = x37181 - x39365;
          Fp x39367 = x39366 * x10;
          Fp x39368 = Fp(x39367.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x39368;
          Fp x39369 = x39367 - x39368;
          Fp x39370 = x39369 * x10;
          Fp x39371 = Fp(x39370.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x39371;
          Fp x39372 = x39370 - x39371;
          Fp x39373 = x39372 * x10;
          Fp x39374 = Fp(x39373.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x39374;
          Fp x39375 = x39373 - x39374;
          Fp x39376 = x39375 * x10;
          Fp x39377 = Fp(x39376.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x39377;
          Fp x39378 = x39376 - x39377;
          Fp x39379 = x39378 * x10;
          Fp x39380 = Fp(x39379.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x39380;
          Fp x39381 = x39379 - x39380;
          Fp x39382 = x39381 * x10;
          Fp x39383 = Fp(x39382.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x39383;
          Fp x39384 = x39382 - x39383;
          Fp x39385 = x39384 * x10;
          Fp x39386 = Fp(x39385.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x39386;
        }
        Fp x39387 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x39388 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x39389 = x39388 * x3;
        Fp x39390 = x39387 + x39389;
        Fp x39391 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x39392 = x39391 * x11;
        Fp x39393 = x39390 + x39392;
        Fp x39394 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x39395 = x39394 * x12;
        Fp x39396 = x39393 + x39395;
        Fp x39397 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x39398 = x39397 * x13;
        Fp x39399 = x39396 + x39398;
        Fp x39400 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x39401 = x39400 * x14;
        Fp x39402 = x39399 + x39401;
        Fp x39403 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x39404 = x39403 * x15;
        Fp x39405 = x39402 + x39404;
        Fp x39406 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x39407 = x39406 * x16;
        Fp x39408 = x39405 + x39407;
        Fp x39409 = x37181 - x39408;
        Fp x39410 = x39409 * x33;
        if (x39410 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
        {
          Fp x39411 = Fp(x37182.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x39411;
          Fp x39412 = x37182 - x39411;
          Fp x39413 = x39412 * x10;
          Fp x39414 = Fp(x39413.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x39414;
          Fp x39415 = x39413 - x39414;
          Fp x39416 = x39415 * x10;
          Fp x39417 = Fp(x39416.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x39417;
          Fp x39418 = x39416 - x39417;
          Fp x39419 = x39418 * x10;
          Fp x39420 = Fp(x39419.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x39420;
          Fp x39421 = x39419 - x39420;
          Fp x39422 = x39421 * x10;
          Fp x39423 = Fp(x39422.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x39423;
          Fp x39424 = x39422 - x39423;
          Fp x39425 = x39424 * x10;
          Fp x39426 = Fp(x39425.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x39426;
          Fp x39427 = x39425 - x39426;
          Fp x39428 = x39427 * x10;
          Fp x39429 = Fp(x39428.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x39429;
          Fp x39430 = x39428 - x39429;
          Fp x39431 = x39430 * x10;
          Fp x39432 = Fp(x39431.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x39432;
        }
        Fp x39433 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x39434 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x39435 = x39434 * x3;
        Fp x39436 = x39433 + x39435;
        Fp x39437 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x39438 = x39437 * x11;
        Fp x39439 = x39436 + x39438;
        Fp x39440 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x39441 = x39440 * x12;
        Fp x39442 = x39439 + x39441;
        Fp x39443 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x39444 = x39443 * x13;
        Fp x39445 = x39442 + x39444;
        Fp x39446 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x39447 = x39446 * x14;
        Fp x39448 = x39445 + x39447;
        Fp x39449 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x39450 = x39449 * x15;
        Fp x39451 = x39448 + x39450;
        Fp x39452 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x39453 = x39452 * x16;
        Fp x39454 = x39451 + x39453;
        Fp x39455 = x37182 - x39454;
        Fp x39456 = x39455 * x33;
        if (x39456 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
        {
          Fp x39457 = Fp(x37183.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x39457;
          Fp x39458 = x37183 - x39457;
          Fp x39459 = x39458 * x10;
          Fp x39460 = Fp(x39459.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x39460;
          Fp x39461 = x39459 - x39460;
          Fp x39462 = x39461 * x10;
          Fp x39463 = Fp(x39462.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x39463;
          Fp x39464 = x39462 - x39463;
          Fp x39465 = x39464 * x10;
          Fp x39466 = Fp(x39465.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x39466;
          Fp x39467 = x39465 - x39466;
          Fp x39468 = x39467 * x10;
          Fp x39469 = Fp(x39468.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x39469;
          Fp x39470 = x39468 - x39469;
          Fp x39471 = x39470 * x10;
          Fp x39472 = Fp(x39471.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x39472;
          Fp x39473 = x39471 - x39472;
          Fp x39474 = x39473 * x10;
          Fp x39475 = Fp(x39474.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x39475;
          Fp x39476 = x39474 - x39475;
          Fp x39477 = x39476 * x10;
          Fp x39478 = Fp(x39477.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x39478;
        }
        Fp x39479 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x39480 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x39481 = x39480 * x3;
        Fp x39482 = x39479 + x39481;
        Fp x39483 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x39484 = x39483 * x11;
        Fp x39485 = x39482 + x39484;
        Fp x39486 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x39487 = x39486 * x12;
        Fp x39488 = x39485 + x39487;
        Fp x39489 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x39490 = x39489 * x13;
        Fp x39491 = x39488 + x39490;
        Fp x39492 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x39493 = x39492 * x14;
        Fp x39494 = x39491 + x39493;
        Fp x39495 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x39496 = x39495 * x15;
        Fp x39497 = x39494 + x39496;
        Fp x39498 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x39499 = x39498 * x16;
        Fp x39500 = x39497 + x39499;
        Fp x39501 = x37183 - x39500;
        Fp x39502 = x39501 * x33;
        if (x39502 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
        {
          Fp x39503 = Fp(x37184.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x39503;
          Fp x39504 = x37184 - x39503;
          Fp x39505 = x39504 * x10;
          Fp x39506 = Fp(x39505.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x39506;
          Fp x39507 = x39505 - x39506;
          Fp x39508 = x39507 * x10;
          Fp x39509 = Fp(x39508.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x39509;
          Fp x39510 = x39508 - x39509;
          Fp x39511 = x39510 * x10;
          Fp x39512 = Fp(x39511.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x39512;
          Fp x39513 = x39511 - x39512;
          Fp x39514 = x39513 * x10;
          Fp x39515 = Fp(x39514.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x39515;
          Fp x39516 = x39514 - x39515;
          Fp x39517 = x39516 * x10;
          Fp x39518 = Fp(x39517.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x39518;
          Fp x39519 = x39517 - x39518;
          Fp x39520 = x39519 * x10;
          Fp x39521 = Fp(x39520.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x39521;
          Fp x39522 = x39520 - x39521;
          Fp x39523 = x39522 * x10;
          Fp x39524 = Fp(x39523.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x39524;
        }
        Fp x39525 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x39526 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x39527 = x39526 * x3;
        Fp x39528 = x39525 + x39527;
        Fp x39529 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x39530 = x39529 * x11;
        Fp x39531 = x39528 + x39530;
        Fp x39532 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x39533 = x39532 * x12;
        Fp x39534 = x39531 + x39533;
        Fp x39535 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x39536 = x39535 * x13;
        Fp x39537 = x39534 + x39536;
        Fp x39538 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x39539 = x39538 * x14;
        Fp x39540 = x39537 + x39539;
        Fp x39541 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x39542 = x39541 * x15;
        Fp x39543 = x39540 + x39542;
        Fp x39544 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x39545 = x39544 * x16;
        Fp x39546 = x39543 + x39545;
        Fp x39547 = x37184 - x39546;
        Fp x39548 = x39547 * x33;
        if (x39548 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:100");
        {
          args[2][108 * steps + cycle] = x70;
          args[2][109 * steps + cycle] = x70;
        }
        Fp x39549 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x39550 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x39551 = x39550 * x1;
        Fp x39552 = x39549 + x39551;
        Fp x39553 = x70 - x39552;
        Fp x39554 = x39553 * x10;
        if (x39554 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:38");
        {
          args[2][106 * steps + cycle] = x70;
          args[2][107 * steps + cycle] = x70;
        }
        Fp x39555 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x39556 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x39557 = x39556 * x1;
        Fp x39558 = x39555 + x39557;
        Fp x39559 = x70 - x39558;
        Fp x39560 = x39559 * x10;
        if (x39560 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:45");
        Fp x39561 = x39402 * x39494;
        host_args[0] = x70;
        host_args[1] = x39561;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x39562 = Fp(x39561.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x39562;
          Fp x39563 = x39561 - x39562;
          Fp x39564 = x39563 * x10;
          Fp x39565 = Fp(x39564.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x39565;
          Fp x39566 = x39564 - x39565;
          Fp x39567 = x39566 * x10;
          Fp x39568 = Fp(x39567.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x39568;
          Fp x39569 = x39567 - x39568;
          Fp x39570 = x39569 * x10;
          Fp x39571 = Fp(x39570.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x39571;
          Fp x39572 = x39570 - x39571;
          Fp x39573 = x39572 * x10;
          Fp x39574 = Fp(x39573.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x39574;
          Fp x39575 = x39573 - x39574;
          Fp x39576 = x39575 * x10;
          Fp x39577 = Fp(x39576.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x39577;
          Fp x39578 = x39576 - x39577;
          Fp x39579 = x39578 * x10;
          Fp x39580 = Fp(x39579.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x39580;
          Fp x39581 = x39579 - x39580;
          Fp x39582 = x39581 * x10;
          Fp x39583 = Fp(x39582.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x39583;
          Fp x39584 = x39582 - x39583;
          Fp x39585 = x39584 * x10;
          Fp x39586 = Fp(x39585.asUInt32() & x2.asUInt32());
          args[2][48 * steps + cycle] = x39586;
          Fp x39587 = x39585 - x39586;
          Fp x39588 = x39587 * x10;
          Fp x39589 = Fp(x39588.asUInt32() & x2.asUInt32());
          args[2][49 * steps + cycle] = x39589;
          Fp x39590 = x39588 - x39589;
          Fp x39591 = x39590 * x10;
          Fp x39592 = Fp(x39591.asUInt32() & x2.asUInt32());
          args[2][50 * steps + cycle] = x39592;
          Fp x39593 = x39591 - x39592;
          Fp x39594 = x39593 * x10;
          Fp x39595 = Fp(x39594.asUInt32() & x2.asUInt32());
          args[2][51 * steps + cycle] = x39595;
        }
        Fp x39596 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x39597 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x39598 = x39597 * x3;
        Fp x39599 = x39596 + x39598;
        Fp x39600 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x39601 = x39600 * x11;
        Fp x39602 = x39599 + x39601;
        Fp x39603 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x39604 = x39603 * x12;
        Fp x39605 = x39602 + x39604;
        Fp x39606 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x39607 = x39606 * x13;
        Fp x39608 = x39605 + x39607;
        Fp x39609 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x39610 = x39609 * x14;
        Fp x39611 = x39608 + x39610;
        Fp x39612 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x39613 = x39612 * x15;
        Fp x39614 = x39611 + x39613;
        Fp x39615 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x39616 = x39615 * x16;
        Fp x39617 = x39614 + x39616;
        Fp x39618 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x39619 = x39618 * x17;
        Fp x39620 = x39617 + x39619;
        Fp x39621 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x39622 = x39621 * x18;
        Fp x39623 = x39620 + x39622;
        Fp x39624 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x39625 = x39624 * x19;
        Fp x39626 = x39623 + x39625;
        Fp x39627 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x39628 = x39627 * x20;
        Fp x39629 = x39626 + x39628;
        Fp x39630 = x39561 - x39629;
        Fp x39631 = x39630 * x62;
        {
          Fp x39632 = Fp(x39631.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x39632;
        }
        Fp x39633 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x39634 = x39631 - x39633;
        Fp x39635 = x39634 * x10;
        if (x39635 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x39636 = x39615 * x3;
        Fp x39637 = x39612 + x39636;
        Fp x39638 = x39618 * x11;
        Fp x39639 = x39637 + x39638;
        Fp x39640 = x39621 * x12;
        Fp x39641 = x39639 + x39640;
        Fp x39642 = x39624 * x13;
        Fp x39643 = x39641 + x39642;
        Fp x39644 = x39627 * x14;
        Fp x39645 = x39643 + x39644;
        Fp x39646 = x39631 * x15;
        Fp x39647 = x39645 + x39646;
        Fp x39648 = x39498 * x3;
        Fp x39649 = x39495 + x39648;
        Fp x39650 = x39525 * x11;
        Fp x39651 = x39649 + x39650;
        Fp x39652 = x39526 * x12;
        Fp x39653 = x39651 + x39652;
        Fp x39654 = x39529 * x13;
        Fp x39655 = x39653 + x39654;
        Fp x39656 = x39532 * x14;
        Fp x39657 = x39655 + x39656;
        Fp x39658 = x39402 * x39657;
        Fp x39659 = x39647 + x39658;
        Fp x39660 = x39406 * x3;
        Fp x39661 = x39403 + x39660;
        Fp x39662 = x39433 * x11;
        Fp x39663 = x39661 + x39662;
        Fp x39664 = x39434 * x12;
        Fp x39665 = x39663 + x39664;
        Fp x39666 = x39437 * x13;
        Fp x39667 = x39665 + x39666;
        Fp x39668 = x39440 * x14;
        Fp x39669 = x39667 + x39668;
        Fp x39670 = x39669 * x39494;
        Fp x39671 = x39659 + x39670;
        host_args[0] = x71;
        host_args[1] = x39671;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x39672 = Fp(x39671.asUInt32() & x2.asUInt32());
          args[2][52 * steps + cycle] = x39672;
          Fp x39673 = x39671 - x39672;
          Fp x39674 = x39673 * x10;
          Fp x39675 = Fp(x39674.asUInt32() & x2.asUInt32());
          args[2][53 * steps + cycle] = x39675;
          Fp x39676 = x39674 - x39675;
          Fp x39677 = x39676 * x10;
          Fp x39678 = Fp(x39677.asUInt32() & x2.asUInt32());
          args[2][54 * steps + cycle] = x39678;
          Fp x39679 = x39677 - x39678;
          Fp x39680 = x39679 * x10;
          Fp x39681 = Fp(x39680.asUInt32() & x2.asUInt32());
          args[2][55 * steps + cycle] = x39681;
          Fp x39682 = x39680 - x39681;
          Fp x39683 = x39682 * x10;
          Fp x39684 = Fp(x39683.asUInt32() & x2.asUInt32());
          args[2][56 * steps + cycle] = x39684;
          Fp x39685 = x39683 - x39684;
          Fp x39686 = x39685 * x10;
          Fp x39687 = Fp(x39686.asUInt32() & x2.asUInt32());
          args[2][57 * steps + cycle] = x39687;
          Fp x39688 = x39686 - x39687;
          Fp x39689 = x39688 * x10;
          Fp x39690 = Fp(x39689.asUInt32() & x2.asUInt32());
          args[2][58 * steps + cycle] = x39690;
          Fp x39691 = x39689 - x39690;
          Fp x39692 = x39691 * x10;
          Fp x39693 = Fp(x39692.asUInt32() & x2.asUInt32());
          args[2][59 * steps + cycle] = x39693;
          Fp x39694 = x39692 - x39693;
          Fp x39695 = x39694 * x10;
          Fp x39696 = Fp(x39695.asUInt32() & x2.asUInt32());
          args[2][60 * steps + cycle] = x39696;
          Fp x39697 = x39695 - x39696;
          Fp x39698 = x39697 * x10;
          Fp x39699 = Fp(x39698.asUInt32() & x2.asUInt32());
          args[2][61 * steps + cycle] = x39699;
          Fp x39700 = x39698 - x39699;
          Fp x39701 = x39700 * x10;
          Fp x39702 = Fp(x39701.asUInt32() & x2.asUInt32());
          args[2][62 * steps + cycle] = x39702;
          Fp x39703 = x39701 - x39702;
          Fp x39704 = x39703 * x10;
          Fp x39705 = Fp(x39704.asUInt32() & x2.asUInt32());
          args[2][63 * steps + cycle] = x39705;
        }
        Fp x39706 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x39707 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x39708 = x39707 * x3;
        Fp x39709 = x39706 + x39708;
        Fp x39710 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x39711 = x39710 * x11;
        Fp x39712 = x39709 + x39711;
        Fp x39713 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x39714 = x39713 * x12;
        Fp x39715 = x39712 + x39714;
        Fp x39716 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x39717 = x39716 * x13;
        Fp x39718 = x39715 + x39717;
        Fp x39719 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x39720 = x39719 * x14;
        Fp x39721 = x39718 + x39720;
        Fp x39722 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x39723 = x39722 * x15;
        Fp x39724 = x39721 + x39723;
        Fp x39725 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x39726 = x39725 * x16;
        Fp x39727 = x39724 + x39726;
        Fp x39728 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x39729 = x39728 * x17;
        Fp x39730 = x39727 + x39729;
        Fp x39731 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x39732 = x39731 * x18;
        Fp x39733 = x39730 + x39732;
        Fp x39734 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x39735 = x39734 * x19;
        Fp x39736 = x39733 + x39735;
        Fp x39737 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x39738 = x39737 * x20;
        Fp x39739 = x39736 + x39738;
        Fp x39740 = x39671 - x39739;
        Fp x39741 = x39740 * x62;
        {
          Fp x39742 = Fp(x39741.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x39742;
        }
        Fp x39743 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x39744 = x39741 - x39743;
        Fp x39745 = x39744 * x10;
        if (x39745 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x39746 = x39725 * x3;
        Fp x39747 = x39722 + x39746;
        Fp x39748 = x39728 * x11;
        Fp x39749 = x39747 + x39748;
        Fp x39750 = x39731 * x12;
        Fp x39751 = x39749 + x39750;
        Fp x39752 = x39734 * x13;
        Fp x39753 = x39751 + x39752;
        Fp x39754 = x39737 * x14;
        Fp x39755 = x39753 + x39754;
        Fp x39756 = x39741 * x15;
        Fp x39757 = x39755 + x39756;
        Fp x39758 = x39538 * x3;
        Fp x39759 = x39535 + x39758;
        Fp x39760 = x39541 * x11;
        Fp x39761 = x39759 + x39760;
        Fp x39762 = x39544 * x12;
        Fp x39763 = x39761 + x39762;
        Fp x39764 = x39402 * x39763;
        Fp x39765 = x39757 + x39764;
        Fp x39766 = x39669 * x39657;
        Fp x39767 = x39765 + x39766;
        Fp x39768 = x39446 * x3;
        Fp x39769 = x39443 + x39768;
        Fp x39770 = x39449 * x11;
        Fp x39771 = x39769 + x39770;
        Fp x39772 = x39452 * x12;
        Fp x39773 = x39771 + x39772;
        Fp x39774 = x39773 * x39494;
        Fp x39775 = x39767 + x39774;
        Fp x39776 = x39775 + x31;
        host_args[0] = x1;
        host_args[1] = x39776;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x39777 = Fp(x39776.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x39777;
          Fp x39778 = x39776 - x39777;
          Fp x39779 = x39778 * x10;
          Fp x39780 = Fp(x39779.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x39780;
          Fp x39781 = x39779 - x39780;
          Fp x39782 = x39781 * x10;
          Fp x39783 = Fp(x39782.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x39783;
          Fp x39784 = x39782 - x39783;
          Fp x39785 = x39784 * x10;
          Fp x39786 = Fp(x39785.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x39786;
          Fp x39787 = x39785 - x39786;
          Fp x39788 = x39787 * x10;
          Fp x39789 = Fp(x39788.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x39789;
          Fp x39790 = x39788 - x39789;
          Fp x39791 = x39790 * x10;
          Fp x39792 = Fp(x39791.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x39792;
          Fp x39793 = x39791 - x39792;
          Fp x39794 = x39793 * x10;
          Fp x39795 = Fp(x39794.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x39795;
          Fp x39796 = x39794 - x39795;
          Fp x39797 = x39796 * x10;
          Fp x39798 = Fp(x39797.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x39798;
          Fp x39799 = x39797 - x39798;
          Fp x39800 = x39799 * x10;
          Fp x39801 = Fp(x39800.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x39801;
          Fp x39802 = x39800 - x39801;
          Fp x39803 = x39802 * x10;
          Fp x39804 = Fp(x39803.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x39804;
          Fp x39805 = x39803 - x39804;
          Fp x39806 = x39805 * x10;
          Fp x39807 = Fp(x39806.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x39807;
          Fp x39808 = x39806 - x39807;
          Fp x39809 = x39808 * x10;
          Fp x39810 = Fp(x39809.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x39810;
        }
        Fp x39811 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x39812 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x39813 = x39812 * x3;
        Fp x39814 = x39811 + x39813;
        Fp x39815 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x39816 = x39815 * x11;
        Fp x39817 = x39814 + x39816;
        Fp x39818 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x39819 = x39818 * x12;
        Fp x39820 = x39817 + x39819;
        Fp x39821 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x39822 = x39821 * x13;
        Fp x39823 = x39820 + x39822;
        Fp x39824 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x39825 = x39824 * x14;
        Fp x39826 = x39823 + x39825;
        Fp x39827 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x39828 = x39827 * x15;
        Fp x39829 = x39826 + x39828;
        Fp x39830 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x39831 = x39830 * x16;
        Fp x39832 = x39829 + x39831;
        Fp x39833 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x39834 = x39833 * x17;
        Fp x39835 = x39832 + x39834;
        Fp x39836 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x39837 = x39836 * x18;
        Fp x39838 = x39835 + x39837;
        Fp x39839 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x39840 = x39839 * x19;
        Fp x39841 = x39838 + x39840;
        Fp x39842 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x39843 = x39842 * x20;
        Fp x39844 = x39841 + x39843;
        Fp x39845 = x39776 - x39844;
        Fp x39846 = x39845 * x62;
        {
          Fp x39847 = Fp(x39846.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x39847;
        }
        Fp x39848 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x39849 = x39846 - x39848;
        Fp x39850 = x39849 * x10;
        if (x39850 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x39851 = x39830 * x3;
        Fp x39852 = x39827 + x39851;
        Fp x39853 = x39833 * x11;
        Fp x39854 = x39852 + x39853;
        Fp x39855 = x39836 * x12;
        Fp x39856 = x39854 + x39855;
        Fp x39857 = x39839 * x13;
        Fp x39858 = x39856 + x39857;
        Fp x39859 = x39842 * x14;
        Fp x39860 = x39858 + x39859;
        Fp x39861 = x39846 * x15;
        Fp x39862 = x39860 + x39861;
        Fp x39863 = x39669 * x39763;
        Fp x39864 = x39862 + x39863;
        Fp x39865 = x39773 * x39657;
        Fp x39866 = x39864 + x39865;
        Fp x39867 = x39866 + x63;
        host_args[0] = x2;
        host_args[1] = x39867;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x39868 = Fp(x39867.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x39868;
          Fp x39869 = x39867 - x39868;
          Fp x39870 = x39869 * x10;
          Fp x39871 = Fp(x39870.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x39871;
          Fp x39872 = x39870 - x39871;
          Fp x39873 = x39872 * x10;
          Fp x39874 = Fp(x39873.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x39874;
          Fp x39875 = x39873 - x39874;
          Fp x39876 = x39875 * x10;
          Fp x39877 = Fp(x39876.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x39877;
          Fp x39878 = x39876 - x39877;
          Fp x39879 = x39878 * x10;
          Fp x39880 = Fp(x39879.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x39880;
          Fp x39881 = x39879 - x39880;
          Fp x39882 = x39881 * x10;
          Fp x39883 = Fp(x39882.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x39883;
          Fp x39884 = x39882 - x39883;
          Fp x39885 = x39884 * x10;
          Fp x39886 = Fp(x39885.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x39886;
          Fp x39887 = x39885 - x39886;
          Fp x39888 = x39887 * x10;
          Fp x39889 = Fp(x39888.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x39889;
          Fp x39890 = x39888 - x39889;
          Fp x39891 = x39890 * x10;
          Fp x39892 = Fp(x39891.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x39892;
          Fp x39893 = x39891 - x39892;
          Fp x39894 = x39893 * x10;
          Fp x39895 = Fp(x39894.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x39895;
          Fp x39896 = x39894 - x39895;
          Fp x39897 = x39896 * x10;
          Fp x39898 = Fp(x39897.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x39898;
          Fp x39899 = x39897 - x39898;
          Fp x39900 = x39899 * x10;
          Fp x39901 = Fp(x39900.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x39901;
        }
        Fp x39902 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x39903 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x39904 = x39903 * x3;
        Fp x39905 = x39902 + x39904;
        Fp x39906 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x39907 = x39906 * x11;
        Fp x39908 = x39905 + x39907;
        Fp x39909 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x39910 = x39909 * x12;
        Fp x39911 = x39908 + x39910;
        Fp x39912 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x39913 = x39912 * x13;
        Fp x39914 = x39911 + x39913;
        Fp x39915 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x39916 = x39915 * x14;
        Fp x39917 = x39914 + x39916;
        Fp x39918 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x39919 = x39918 * x15;
        Fp x39920 = x39917 + x39919;
        Fp x39921 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x39922 = x39921 * x16;
        Fp x39923 = x39920 + x39922;
        Fp x39924 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x39925 = x39924 * x17;
        Fp x39926 = x39923 + x39925;
        Fp x39927 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x39928 = x39927 * x18;
        Fp x39929 = x39926 + x39928;
        Fp x39930 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x39931 = x39930 * x19;
        Fp x39932 = x39929 + x39931;
        Fp x39933 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x39934 = x39933 * x20;
        Fp x39935 = x39932 + x39934;
        Fp x39936 = x39867 - x39935;
        Fp x39937 = x39936 * x62;
        {
          Fp x39938 = Fp(x39937.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x39938;
        }
        Fp x39939 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x39940 = x39937 - x39939;
        Fp x39941 = x39940 * x10;
        if (x39941 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x39942 = x39921 * x3;
        Fp x39943 = x39918 + x39942;
        Fp x39944 = x39924 * x11;
        Fp x39945 = x39943 + x39944;
        Fp x39946 = x39927 * x12;
        Fp x39947 = x39945 + x39946;
        Fp x39948 = x39930 * x13;
        Fp x39949 = x39947 + x39948;
        Fp x39950 = x39933 * x14;
        Fp x39951 = x39949 + x39950;
        Fp x39952 = x39937 * x15;
        Fp x39953 = x39951 + x39952;
        Fp x39954 = x39773 * x39763;
        Fp x39955 = x39953 + x39954;
        Fp x39956 = x39955 + x64;
        host_args[0] = x3;
        host_args[1] = x39956;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x39957 = Fp(x39956.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x39957;
          Fp x39958 = x39956 - x39957;
          Fp x39959 = x39958 * x10;
          Fp x39960 = Fp(x39959.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x39960;
          Fp x39961 = x39959 - x39960;
          Fp x39962 = x39961 * x10;
          Fp x39963 = Fp(x39962.asUInt32() & x2.asUInt32());
          args[2][90 * steps + cycle] = x39963;
          Fp x39964 = x39962 - x39963;
          Fp x39965 = x39964 * x10;
          Fp x39966 = Fp(x39965.asUInt32() & x2.asUInt32());
          args[2][91 * steps + cycle] = x39966;
          Fp x39967 = x39965 - x39966;
          Fp x39968 = x39967 * x10;
          Fp x39969 = Fp(x39968.asUInt32() & x2.asUInt32());
          args[2][92 * steps + cycle] = x39969;
          Fp x39970 = x39968 - x39969;
          Fp x39971 = x39970 * x10;
          Fp x39972 = Fp(x39971.asUInt32() & x2.asUInt32());
          args[2][93 * steps + cycle] = x39972;
          Fp x39973 = x39971 - x39972;
          Fp x39974 = x39973 * x10;
          Fp x39975 = Fp(x39974.asUInt32() & x2.asUInt32());
          args[2][94 * steps + cycle] = x39975;
          Fp x39976 = x39974 - x39975;
          Fp x39977 = x39976 * x10;
          Fp x39978 = Fp(x39977.asUInt32() & x2.asUInt32());
          args[2][95 * steps + cycle] = x39978;
          Fp x39979 = x39977 - x39978;
          Fp x39980 = x39979 * x10;
          Fp x39981 = Fp(x39980.asUInt32() & x2.asUInt32());
          args[2][96 * steps + cycle] = x39981;
          Fp x39982 = x39980 - x39981;
          Fp x39983 = x39982 * x10;
          Fp x39984 = Fp(x39983.asUInt32() & x2.asUInt32());
          args[2][97 * steps + cycle] = x39984;
          Fp x39985 = x39983 - x39984;
          Fp x39986 = x39985 * x10;
          Fp x39987 = Fp(x39986.asUInt32() & x2.asUInt32());
          args[2][98 * steps + cycle] = x39987;
          Fp x39988 = x39986 - x39987;
          Fp x39989 = x39988 * x10;
          Fp x39990 = Fp(x39989.asUInt32() & x2.asUInt32());
          args[2][99 * steps + cycle] = x39990;
        }
        Fp x39991 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x39992 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x39993 = x39992 * x3;
        Fp x39994 = x39991 + x39993;
        Fp x39995 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x39996 = x39995 * x11;
        Fp x39997 = x39994 + x39996;
        Fp x39998 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x39999 = x39998 * x12;
        Fp x40000 = x39997 + x39999;
        Fp x40001 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x40002 = x40001 * x13;
        Fp x40003 = x40000 + x40002;
        Fp x40004 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x40005 = x40004 * x14;
        Fp x40006 = x40003 + x40005;
        Fp x40007 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x40008 = x40007 * x15;
        Fp x40009 = x40006 + x40008;
        Fp x40010 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x40011 = x40010 * x16;
        Fp x40012 = x40009 + x40011;
        Fp x40013 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x40014 = x40013 * x17;
        Fp x40015 = x40012 + x40014;
        Fp x40016 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x40017 = x40016 * x18;
        Fp x40018 = x40015 + x40017;
        Fp x40019 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x40020 = x40019 * x19;
        Fp x40021 = x40018 + x40020;
        Fp x40022 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x40023 = x40022 * x20;
        Fp x40024 = x40021 + x40023;
        Fp x40025 = x39956 - x40024;
        Fp x40026 = x40025 * x62;
        {
          Fp x40027 = Fp(x40026.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x40027;
        }
        Fp x40028 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x40029 = x40026 - x40028;
        Fp x40030 = x40029 * x10;
        if (x40030 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x40031 = x39824 * x3;
        Fp x40032 = x39821 + x40031;
        Fp x40033 = x39917 * x11;
        Fp x40034 = x40032 + x40033;
        args[2][100 * steps + cycle] = x40034;
        args[2][101 * steps + cycle] = x40012;
        host_args[0] = x39454;
        host_args[1] = x39408;
        host(ctx, "log", "  i0 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        host_args[0] = x39546;
        host_args[1] = x39500;
        host(ctx, "log", "  i1 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        Fp x40035 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x40036 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x40035;
        host_args[1] = x40036;
        host(ctx, "log", "  result = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
      }
      Fp x40037 = args[2][76 * steps + ((cycle - 1) & mask)];
      if (x40037 != 0) {
        {
          Fp x40038 = Fp(x37181.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x40038;
          Fp x40039 = x37181 - x40038;
          Fp x40040 = x40039 * x10;
          Fp x40041 = Fp(x40040.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x40041;
          Fp x40042 = x40040 - x40041;
          Fp x40043 = x40042 * x10;
          Fp x40044 = Fp(x40043.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x40044;
          Fp x40045 = x40043 - x40044;
          Fp x40046 = x40045 * x10;
          Fp x40047 = Fp(x40046.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x40047;
          Fp x40048 = x40046 - x40047;
          Fp x40049 = x40048 * x10;
          Fp x40050 = Fp(x40049.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x40050;
          Fp x40051 = x40049 - x40050;
          Fp x40052 = x40051 * x10;
          Fp x40053 = Fp(x40052.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x40053;
          Fp x40054 = x40052 - x40053;
          Fp x40055 = x40054 * x10;
          Fp x40056 = Fp(x40055.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x40056;
          Fp x40057 = x40055 - x40056;
          Fp x40058 = x40057 * x10;
          Fp x40059 = Fp(x40058.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x40059;
        }
        Fp x40060 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x40061 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x40062 = x40061 * x3;
        Fp x40063 = x40060 + x40062;
        Fp x40064 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x40065 = x40064 * x11;
        Fp x40066 = x40063 + x40065;
        Fp x40067 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x40068 = x40067 * x12;
        Fp x40069 = x40066 + x40068;
        Fp x40070 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x40071 = x40070 * x13;
        Fp x40072 = x40069 + x40071;
        Fp x40073 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x40074 = x40073 * x14;
        Fp x40075 = x40072 + x40074;
        Fp x40076 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x40077 = x40076 * x15;
        Fp x40078 = x40075 + x40077;
        Fp x40079 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x40080 = x40079 * x16;
        Fp x40081 = x40078 + x40080;
        Fp x40082 = x37181 - x40081;
        Fp x40083 = x40082 * x33;
        if (x40083 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
        {
          Fp x40084 = Fp(x37182.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x40084;
          Fp x40085 = x37182 - x40084;
          Fp x40086 = x40085 * x10;
          Fp x40087 = Fp(x40086.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x40087;
          Fp x40088 = x40086 - x40087;
          Fp x40089 = x40088 * x10;
          Fp x40090 = Fp(x40089.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x40090;
          Fp x40091 = x40089 - x40090;
          Fp x40092 = x40091 * x10;
          Fp x40093 = Fp(x40092.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x40093;
          Fp x40094 = x40092 - x40093;
          Fp x40095 = x40094 * x10;
          Fp x40096 = Fp(x40095.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x40096;
          Fp x40097 = x40095 - x40096;
          Fp x40098 = x40097 * x10;
          Fp x40099 = Fp(x40098.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x40099;
          Fp x40100 = x40098 - x40099;
          Fp x40101 = x40100 * x10;
          Fp x40102 = Fp(x40101.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x40102;
          Fp x40103 = x40101 - x40102;
          Fp x40104 = x40103 * x10;
          Fp x40105 = Fp(x40104.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x40105;
        }
        Fp x40106 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x40107 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x40108 = x40107 * x3;
        Fp x40109 = x40106 + x40108;
        Fp x40110 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x40111 = x40110 * x11;
        Fp x40112 = x40109 + x40111;
        Fp x40113 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x40114 = x40113 * x12;
        Fp x40115 = x40112 + x40114;
        Fp x40116 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x40117 = x40116 * x13;
        Fp x40118 = x40115 + x40117;
        Fp x40119 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x40120 = x40119 * x14;
        Fp x40121 = x40118 + x40120;
        Fp x40122 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x40123 = x40122 * x15;
        Fp x40124 = x40121 + x40123;
        Fp x40125 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x40126 = x40125 * x16;
        Fp x40127 = x40124 + x40126;
        Fp x40128 = x37182 - x40127;
        Fp x40129 = x40128 * x33;
        if (x40129 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
        {
          Fp x40130 = Fp(x37230.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x40130;
          Fp x40131 = x37230 - x40130;
          Fp x40132 = x40131 * x10;
          Fp x40133 = Fp(x40132.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x40133;
          Fp x40134 = x40132 - x40133;
          Fp x40135 = x40134 * x10;
          Fp x40136 = Fp(x40135.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x40136;
          Fp x40137 = x40135 - x40136;
          Fp x40138 = x40137 * x10;
          Fp x40139 = Fp(x40138.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x40139;
          Fp x40140 = x40138 - x40139;
          Fp x40141 = x40140 * x10;
          Fp x40142 = Fp(x40141.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x40142;
          Fp x40143 = x40141 - x40142;
          Fp x40144 = x40143 * x10;
          Fp x40145 = Fp(x40144.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x40145;
          Fp x40146 = x40144 - x40145;
          Fp x40147 = x40146 * x10;
          Fp x40148 = Fp(x40147.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x40148;
          Fp x40149 = x40147 - x40148;
          Fp x40150 = x40149 * x10;
          Fp x40151 = Fp(x40150.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x40151;
        }
        Fp x40152 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x40153 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x40154 = x40153 * x3;
        Fp x40155 = x40152 + x40154;
        Fp x40156 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x40157 = x40156 * x11;
        Fp x40158 = x40155 + x40157;
        Fp x40159 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x40160 = x40159 * x12;
        Fp x40161 = x40158 + x40160;
        Fp x40162 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x40163 = x40162 * x13;
        Fp x40164 = x40161 + x40163;
        Fp x40165 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x40166 = x40165 * x14;
        Fp x40167 = x40164 + x40166;
        Fp x40168 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x40169 = x40168 * x15;
        Fp x40170 = x40167 + x40169;
        Fp x40171 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x40172 = x40171 * x16;
        Fp x40173 = x40170 + x40172;
        Fp x40174 = x37230 - x40173;
        Fp x40175 = x40174 * x33;
        if (x40175 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
        {
          Fp x40176 = Fp(x37276.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x40176;
          Fp x40177 = x37276 - x40176;
          Fp x40178 = x40177 * x10;
          Fp x40179 = Fp(x40178.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x40179;
          Fp x40180 = x40178 - x40179;
          Fp x40181 = x40180 * x10;
          Fp x40182 = Fp(x40181.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x40182;
          Fp x40183 = x40181 - x40182;
          Fp x40184 = x40183 * x10;
          Fp x40185 = Fp(x40184.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x40185;
          Fp x40186 = x40184 - x40185;
          Fp x40187 = x40186 * x10;
          Fp x40188 = Fp(x40187.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x40188;
          Fp x40189 = x40187 - x40188;
          Fp x40190 = x40189 * x10;
          Fp x40191 = Fp(x40190.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x40191;
          Fp x40192 = x40190 - x40191;
          Fp x40193 = x40192 * x10;
          Fp x40194 = Fp(x40193.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x40194;
          Fp x40195 = x40193 - x40194;
          Fp x40196 = x40195 * x10;
          Fp x40197 = Fp(x40196.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x40197;
        }
        Fp x40198 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x40199 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x40200 = x40199 * x3;
        Fp x40201 = x40198 + x40200;
        Fp x40202 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x40203 = x40202 * x11;
        Fp x40204 = x40201 + x40203;
        Fp x40205 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x40206 = x40205 * x12;
        Fp x40207 = x40204 + x40206;
        Fp x40208 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x40209 = x40208 * x13;
        Fp x40210 = x40207 + x40209;
        Fp x40211 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x40212 = x40211 * x14;
        Fp x40213 = x40210 + x40212;
        Fp x40214 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x40215 = x40214 * x15;
        Fp x40216 = x40213 + x40215;
        Fp x40217 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x40218 = x40217 * x16;
        Fp x40219 = x40216 + x40218;
        Fp x40220 = x37276 - x40219;
        Fp x40221 = x40220 * x33;
        if (x40221 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:101");
        {
          args[2][108 * steps + cycle] = x70;
          args[2][109 * steps + cycle] = x70;
        }
        Fp x40222 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x40223 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x40224 = x40223 * x1;
        Fp x40225 = x40222 + x40224;
        Fp x40226 = x70 - x40225;
        Fp x40227 = x40226 * x10;
        if (x40227 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:38");
        {
          args[2][106 * steps + cycle] = x70;
          args[2][107 * steps + cycle] = x70;
        }
        Fp x40228 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x40229 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x40230 = x40229 * x1;
        Fp x40231 = x40228 + x40230;
        Fp x40232 = x70 - x40231;
        Fp x40233 = x40232 * x10;
        if (x40233 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:45");
        Fp x40234 = x40075 * x40167;
        host_args[0] = x70;
        host_args[1] = x40234;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x40235 = Fp(x40234.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x40235;
          Fp x40236 = x40234 - x40235;
          Fp x40237 = x40236 * x10;
          Fp x40238 = Fp(x40237.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x40238;
          Fp x40239 = x40237 - x40238;
          Fp x40240 = x40239 * x10;
          Fp x40241 = Fp(x40240.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x40241;
          Fp x40242 = x40240 - x40241;
          Fp x40243 = x40242 * x10;
          Fp x40244 = Fp(x40243.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x40244;
          Fp x40245 = x40243 - x40244;
          Fp x40246 = x40245 * x10;
          Fp x40247 = Fp(x40246.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x40247;
          Fp x40248 = x40246 - x40247;
          Fp x40249 = x40248 * x10;
          Fp x40250 = Fp(x40249.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x40250;
          Fp x40251 = x40249 - x40250;
          Fp x40252 = x40251 * x10;
          Fp x40253 = Fp(x40252.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x40253;
          Fp x40254 = x40252 - x40253;
          Fp x40255 = x40254 * x10;
          Fp x40256 = Fp(x40255.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x40256;
          Fp x40257 = x40255 - x40256;
          Fp x40258 = x40257 * x10;
          Fp x40259 = Fp(x40258.asUInt32() & x2.asUInt32());
          args[2][48 * steps + cycle] = x40259;
          Fp x40260 = x40258 - x40259;
          Fp x40261 = x40260 * x10;
          Fp x40262 = Fp(x40261.asUInt32() & x2.asUInt32());
          args[2][49 * steps + cycle] = x40262;
          Fp x40263 = x40261 - x40262;
          Fp x40264 = x40263 * x10;
          Fp x40265 = Fp(x40264.asUInt32() & x2.asUInt32());
          args[2][50 * steps + cycle] = x40265;
          Fp x40266 = x40264 - x40265;
          Fp x40267 = x40266 * x10;
          Fp x40268 = Fp(x40267.asUInt32() & x2.asUInt32());
          args[2][51 * steps + cycle] = x40268;
        }
        Fp x40269 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x40270 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x40271 = x40270 * x3;
        Fp x40272 = x40269 + x40271;
        Fp x40273 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x40274 = x40273 * x11;
        Fp x40275 = x40272 + x40274;
        Fp x40276 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x40277 = x40276 * x12;
        Fp x40278 = x40275 + x40277;
        Fp x40279 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x40280 = x40279 * x13;
        Fp x40281 = x40278 + x40280;
        Fp x40282 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x40283 = x40282 * x14;
        Fp x40284 = x40281 + x40283;
        Fp x40285 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x40286 = x40285 * x15;
        Fp x40287 = x40284 + x40286;
        Fp x40288 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x40289 = x40288 * x16;
        Fp x40290 = x40287 + x40289;
        Fp x40291 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x40292 = x40291 * x17;
        Fp x40293 = x40290 + x40292;
        Fp x40294 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x40295 = x40294 * x18;
        Fp x40296 = x40293 + x40295;
        Fp x40297 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x40298 = x40297 * x19;
        Fp x40299 = x40296 + x40298;
        Fp x40300 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x40301 = x40300 * x20;
        Fp x40302 = x40299 + x40301;
        Fp x40303 = x40234 - x40302;
        Fp x40304 = x40303 * x62;
        {
          Fp x40305 = Fp(x40304.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x40305;
        }
        Fp x40306 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x40307 = x40304 - x40306;
        Fp x40308 = x40307 * x10;
        if (x40308 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x40309 = x40288 * x3;
        Fp x40310 = x40285 + x40309;
        Fp x40311 = x40291 * x11;
        Fp x40312 = x40310 + x40311;
        Fp x40313 = x40294 * x12;
        Fp x40314 = x40312 + x40313;
        Fp x40315 = x40297 * x13;
        Fp x40316 = x40314 + x40315;
        Fp x40317 = x40300 * x14;
        Fp x40318 = x40316 + x40317;
        Fp x40319 = x40304 * x15;
        Fp x40320 = x40318 + x40319;
        Fp x40321 = x40171 * x3;
        Fp x40322 = x40168 + x40321;
        Fp x40323 = x40198 * x11;
        Fp x40324 = x40322 + x40323;
        Fp x40325 = x40199 * x12;
        Fp x40326 = x40324 + x40325;
        Fp x40327 = x40202 * x13;
        Fp x40328 = x40326 + x40327;
        Fp x40329 = x40205 * x14;
        Fp x40330 = x40328 + x40329;
        Fp x40331 = x40075 * x40330;
        Fp x40332 = x40320 + x40331;
        Fp x40333 = x40079 * x3;
        Fp x40334 = x40076 + x40333;
        Fp x40335 = x40106 * x11;
        Fp x40336 = x40334 + x40335;
        Fp x40337 = x40107 * x12;
        Fp x40338 = x40336 + x40337;
        Fp x40339 = x40110 * x13;
        Fp x40340 = x40338 + x40339;
        Fp x40341 = x40113 * x14;
        Fp x40342 = x40340 + x40341;
        Fp x40343 = x40342 * x40167;
        Fp x40344 = x40332 + x40343;
        host_args[0] = x71;
        host_args[1] = x40344;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x40345 = Fp(x40344.asUInt32() & x2.asUInt32());
          args[2][52 * steps + cycle] = x40345;
          Fp x40346 = x40344 - x40345;
          Fp x40347 = x40346 * x10;
          Fp x40348 = Fp(x40347.asUInt32() & x2.asUInt32());
          args[2][53 * steps + cycle] = x40348;
          Fp x40349 = x40347 - x40348;
          Fp x40350 = x40349 * x10;
          Fp x40351 = Fp(x40350.asUInt32() & x2.asUInt32());
          args[2][54 * steps + cycle] = x40351;
          Fp x40352 = x40350 - x40351;
          Fp x40353 = x40352 * x10;
          Fp x40354 = Fp(x40353.asUInt32() & x2.asUInt32());
          args[2][55 * steps + cycle] = x40354;
          Fp x40355 = x40353 - x40354;
          Fp x40356 = x40355 * x10;
          Fp x40357 = Fp(x40356.asUInt32() & x2.asUInt32());
          args[2][56 * steps + cycle] = x40357;
          Fp x40358 = x40356 - x40357;
          Fp x40359 = x40358 * x10;
          Fp x40360 = Fp(x40359.asUInt32() & x2.asUInt32());
          args[2][57 * steps + cycle] = x40360;
          Fp x40361 = x40359 - x40360;
          Fp x40362 = x40361 * x10;
          Fp x40363 = Fp(x40362.asUInt32() & x2.asUInt32());
          args[2][58 * steps + cycle] = x40363;
          Fp x40364 = x40362 - x40363;
          Fp x40365 = x40364 * x10;
          Fp x40366 = Fp(x40365.asUInt32() & x2.asUInt32());
          args[2][59 * steps + cycle] = x40366;
          Fp x40367 = x40365 - x40366;
          Fp x40368 = x40367 * x10;
          Fp x40369 = Fp(x40368.asUInt32() & x2.asUInt32());
          args[2][60 * steps + cycle] = x40369;
          Fp x40370 = x40368 - x40369;
          Fp x40371 = x40370 * x10;
          Fp x40372 = Fp(x40371.asUInt32() & x2.asUInt32());
          args[2][61 * steps + cycle] = x40372;
          Fp x40373 = x40371 - x40372;
          Fp x40374 = x40373 * x10;
          Fp x40375 = Fp(x40374.asUInt32() & x2.asUInt32());
          args[2][62 * steps + cycle] = x40375;
          Fp x40376 = x40374 - x40375;
          Fp x40377 = x40376 * x10;
          Fp x40378 = Fp(x40377.asUInt32() & x2.asUInt32());
          args[2][63 * steps + cycle] = x40378;
        }
        Fp x40379 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x40380 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x40381 = x40380 * x3;
        Fp x40382 = x40379 + x40381;
        Fp x40383 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x40384 = x40383 * x11;
        Fp x40385 = x40382 + x40384;
        Fp x40386 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x40387 = x40386 * x12;
        Fp x40388 = x40385 + x40387;
        Fp x40389 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x40390 = x40389 * x13;
        Fp x40391 = x40388 + x40390;
        Fp x40392 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x40393 = x40392 * x14;
        Fp x40394 = x40391 + x40393;
        Fp x40395 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x40396 = x40395 * x15;
        Fp x40397 = x40394 + x40396;
        Fp x40398 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x40399 = x40398 * x16;
        Fp x40400 = x40397 + x40399;
        Fp x40401 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x40402 = x40401 * x17;
        Fp x40403 = x40400 + x40402;
        Fp x40404 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x40405 = x40404 * x18;
        Fp x40406 = x40403 + x40405;
        Fp x40407 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x40408 = x40407 * x19;
        Fp x40409 = x40406 + x40408;
        Fp x40410 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x40411 = x40410 * x20;
        Fp x40412 = x40409 + x40411;
        Fp x40413 = x40344 - x40412;
        Fp x40414 = x40413 * x62;
        {
          Fp x40415 = Fp(x40414.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x40415;
        }
        Fp x40416 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x40417 = x40414 - x40416;
        Fp x40418 = x40417 * x10;
        if (x40418 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x40419 = x40398 * x3;
        Fp x40420 = x40395 + x40419;
        Fp x40421 = x40401 * x11;
        Fp x40422 = x40420 + x40421;
        Fp x40423 = x40404 * x12;
        Fp x40424 = x40422 + x40423;
        Fp x40425 = x40407 * x13;
        Fp x40426 = x40424 + x40425;
        Fp x40427 = x40410 * x14;
        Fp x40428 = x40426 + x40427;
        Fp x40429 = x40414 * x15;
        Fp x40430 = x40428 + x40429;
        Fp x40431 = x40211 * x3;
        Fp x40432 = x40208 + x40431;
        Fp x40433 = x40214 * x11;
        Fp x40434 = x40432 + x40433;
        Fp x40435 = x40217 * x12;
        Fp x40436 = x40434 + x40435;
        Fp x40437 = x40075 * x40436;
        Fp x40438 = x40430 + x40437;
        Fp x40439 = x40342 * x40330;
        Fp x40440 = x40438 + x40439;
        Fp x40441 = x40119 * x3;
        Fp x40442 = x40116 + x40441;
        Fp x40443 = x40122 * x11;
        Fp x40444 = x40442 + x40443;
        Fp x40445 = x40125 * x12;
        Fp x40446 = x40444 + x40445;
        Fp x40447 = x40446 * x40167;
        Fp x40448 = x40440 + x40447;
        Fp x40449 = x40448 + x31;
        host_args[0] = x1;
        host_args[1] = x40449;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x40450 = Fp(x40449.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x40450;
          Fp x40451 = x40449 - x40450;
          Fp x40452 = x40451 * x10;
          Fp x40453 = Fp(x40452.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x40453;
          Fp x40454 = x40452 - x40453;
          Fp x40455 = x40454 * x10;
          Fp x40456 = Fp(x40455.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x40456;
          Fp x40457 = x40455 - x40456;
          Fp x40458 = x40457 * x10;
          Fp x40459 = Fp(x40458.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x40459;
          Fp x40460 = x40458 - x40459;
          Fp x40461 = x40460 * x10;
          Fp x40462 = Fp(x40461.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x40462;
          Fp x40463 = x40461 - x40462;
          Fp x40464 = x40463 * x10;
          Fp x40465 = Fp(x40464.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x40465;
          Fp x40466 = x40464 - x40465;
          Fp x40467 = x40466 * x10;
          Fp x40468 = Fp(x40467.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x40468;
          Fp x40469 = x40467 - x40468;
          Fp x40470 = x40469 * x10;
          Fp x40471 = Fp(x40470.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x40471;
          Fp x40472 = x40470 - x40471;
          Fp x40473 = x40472 * x10;
          Fp x40474 = Fp(x40473.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x40474;
          Fp x40475 = x40473 - x40474;
          Fp x40476 = x40475 * x10;
          Fp x40477 = Fp(x40476.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x40477;
          Fp x40478 = x40476 - x40477;
          Fp x40479 = x40478 * x10;
          Fp x40480 = Fp(x40479.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x40480;
          Fp x40481 = x40479 - x40480;
          Fp x40482 = x40481 * x10;
          Fp x40483 = Fp(x40482.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x40483;
        }
        Fp x40484 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x40485 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x40486 = x40485 * x3;
        Fp x40487 = x40484 + x40486;
        Fp x40488 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x40489 = x40488 * x11;
        Fp x40490 = x40487 + x40489;
        Fp x40491 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x40492 = x40491 * x12;
        Fp x40493 = x40490 + x40492;
        Fp x40494 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x40495 = x40494 * x13;
        Fp x40496 = x40493 + x40495;
        Fp x40497 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x40498 = x40497 * x14;
        Fp x40499 = x40496 + x40498;
        Fp x40500 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x40501 = x40500 * x15;
        Fp x40502 = x40499 + x40501;
        Fp x40503 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x40504 = x40503 * x16;
        Fp x40505 = x40502 + x40504;
        Fp x40506 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x40507 = x40506 * x17;
        Fp x40508 = x40505 + x40507;
        Fp x40509 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x40510 = x40509 * x18;
        Fp x40511 = x40508 + x40510;
        Fp x40512 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x40513 = x40512 * x19;
        Fp x40514 = x40511 + x40513;
        Fp x40515 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x40516 = x40515 * x20;
        Fp x40517 = x40514 + x40516;
        Fp x40518 = x40449 - x40517;
        Fp x40519 = x40518 * x62;
        {
          Fp x40520 = Fp(x40519.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x40520;
        }
        Fp x40521 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x40522 = x40519 - x40521;
        Fp x40523 = x40522 * x10;
        if (x40523 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x40524 = x40503 * x3;
        Fp x40525 = x40500 + x40524;
        Fp x40526 = x40506 * x11;
        Fp x40527 = x40525 + x40526;
        Fp x40528 = x40509 * x12;
        Fp x40529 = x40527 + x40528;
        Fp x40530 = x40512 * x13;
        Fp x40531 = x40529 + x40530;
        Fp x40532 = x40515 * x14;
        Fp x40533 = x40531 + x40532;
        Fp x40534 = x40519 * x15;
        Fp x40535 = x40533 + x40534;
        Fp x40536 = x40342 * x40436;
        Fp x40537 = x40535 + x40536;
        Fp x40538 = x40446 * x40330;
        Fp x40539 = x40537 + x40538;
        Fp x40540 = x40539 + x63;
        host_args[0] = x2;
        host_args[1] = x40540;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x40541 = Fp(x40540.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x40541;
          Fp x40542 = x40540 - x40541;
          Fp x40543 = x40542 * x10;
          Fp x40544 = Fp(x40543.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x40544;
          Fp x40545 = x40543 - x40544;
          Fp x40546 = x40545 * x10;
          Fp x40547 = Fp(x40546.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x40547;
          Fp x40548 = x40546 - x40547;
          Fp x40549 = x40548 * x10;
          Fp x40550 = Fp(x40549.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x40550;
          Fp x40551 = x40549 - x40550;
          Fp x40552 = x40551 * x10;
          Fp x40553 = Fp(x40552.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x40553;
          Fp x40554 = x40552 - x40553;
          Fp x40555 = x40554 * x10;
          Fp x40556 = Fp(x40555.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x40556;
          Fp x40557 = x40555 - x40556;
          Fp x40558 = x40557 * x10;
          Fp x40559 = Fp(x40558.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x40559;
          Fp x40560 = x40558 - x40559;
          Fp x40561 = x40560 * x10;
          Fp x40562 = Fp(x40561.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x40562;
          Fp x40563 = x40561 - x40562;
          Fp x40564 = x40563 * x10;
          Fp x40565 = Fp(x40564.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x40565;
          Fp x40566 = x40564 - x40565;
          Fp x40567 = x40566 * x10;
          Fp x40568 = Fp(x40567.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x40568;
          Fp x40569 = x40567 - x40568;
          Fp x40570 = x40569 * x10;
          Fp x40571 = Fp(x40570.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x40571;
          Fp x40572 = x40570 - x40571;
          Fp x40573 = x40572 * x10;
          Fp x40574 = Fp(x40573.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x40574;
        }
        Fp x40575 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x40576 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x40577 = x40576 * x3;
        Fp x40578 = x40575 + x40577;
        Fp x40579 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x40580 = x40579 * x11;
        Fp x40581 = x40578 + x40580;
        Fp x40582 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x40583 = x40582 * x12;
        Fp x40584 = x40581 + x40583;
        Fp x40585 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x40586 = x40585 * x13;
        Fp x40587 = x40584 + x40586;
        Fp x40588 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x40589 = x40588 * x14;
        Fp x40590 = x40587 + x40589;
        Fp x40591 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x40592 = x40591 * x15;
        Fp x40593 = x40590 + x40592;
        Fp x40594 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x40595 = x40594 * x16;
        Fp x40596 = x40593 + x40595;
        Fp x40597 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x40598 = x40597 * x17;
        Fp x40599 = x40596 + x40598;
        Fp x40600 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x40601 = x40600 * x18;
        Fp x40602 = x40599 + x40601;
        Fp x40603 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x40604 = x40603 * x19;
        Fp x40605 = x40602 + x40604;
        Fp x40606 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x40607 = x40606 * x20;
        Fp x40608 = x40605 + x40607;
        Fp x40609 = x40540 - x40608;
        Fp x40610 = x40609 * x62;
        {
          Fp x40611 = Fp(x40610.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x40611;
        }
        Fp x40612 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x40613 = x40610 - x40612;
        Fp x40614 = x40613 * x10;
        if (x40614 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x40615 = x40594 * x3;
        Fp x40616 = x40591 + x40615;
        Fp x40617 = x40597 * x11;
        Fp x40618 = x40616 + x40617;
        Fp x40619 = x40600 * x12;
        Fp x40620 = x40618 + x40619;
        Fp x40621 = x40603 * x13;
        Fp x40622 = x40620 + x40621;
        Fp x40623 = x40606 * x14;
        Fp x40624 = x40622 + x40623;
        Fp x40625 = x40610 * x15;
        Fp x40626 = x40624 + x40625;
        Fp x40627 = x40446 * x40436;
        Fp x40628 = x40626 + x40627;
        Fp x40629 = x40628 + x64;
        host_args[0] = x3;
        host_args[1] = x40629;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x40630 = Fp(x40629.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x40630;
          Fp x40631 = x40629 - x40630;
          Fp x40632 = x40631 * x10;
          Fp x40633 = Fp(x40632.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x40633;
          Fp x40634 = x40632 - x40633;
          Fp x40635 = x40634 * x10;
          Fp x40636 = Fp(x40635.asUInt32() & x2.asUInt32());
          args[2][90 * steps + cycle] = x40636;
          Fp x40637 = x40635 - x40636;
          Fp x40638 = x40637 * x10;
          Fp x40639 = Fp(x40638.asUInt32() & x2.asUInt32());
          args[2][91 * steps + cycle] = x40639;
          Fp x40640 = x40638 - x40639;
          Fp x40641 = x40640 * x10;
          Fp x40642 = Fp(x40641.asUInt32() & x2.asUInt32());
          args[2][92 * steps + cycle] = x40642;
          Fp x40643 = x40641 - x40642;
          Fp x40644 = x40643 * x10;
          Fp x40645 = Fp(x40644.asUInt32() & x2.asUInt32());
          args[2][93 * steps + cycle] = x40645;
          Fp x40646 = x40644 - x40645;
          Fp x40647 = x40646 * x10;
          Fp x40648 = Fp(x40647.asUInt32() & x2.asUInt32());
          args[2][94 * steps + cycle] = x40648;
          Fp x40649 = x40647 - x40648;
          Fp x40650 = x40649 * x10;
          Fp x40651 = Fp(x40650.asUInt32() & x2.asUInt32());
          args[2][95 * steps + cycle] = x40651;
          Fp x40652 = x40650 - x40651;
          Fp x40653 = x40652 * x10;
          Fp x40654 = Fp(x40653.asUInt32() & x2.asUInt32());
          args[2][96 * steps + cycle] = x40654;
          Fp x40655 = x40653 - x40654;
          Fp x40656 = x40655 * x10;
          Fp x40657 = Fp(x40656.asUInt32() & x2.asUInt32());
          args[2][97 * steps + cycle] = x40657;
          Fp x40658 = x40656 - x40657;
          Fp x40659 = x40658 * x10;
          Fp x40660 = Fp(x40659.asUInt32() & x2.asUInt32());
          args[2][98 * steps + cycle] = x40660;
          Fp x40661 = x40659 - x40660;
          Fp x40662 = x40661 * x10;
          Fp x40663 = Fp(x40662.asUInt32() & x2.asUInt32());
          args[2][99 * steps + cycle] = x40663;
        }
        Fp x40664 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x40665 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x40666 = x40665 * x3;
        Fp x40667 = x40664 + x40666;
        Fp x40668 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x40669 = x40668 * x11;
        Fp x40670 = x40667 + x40669;
        Fp x40671 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x40672 = x40671 * x12;
        Fp x40673 = x40670 + x40672;
        Fp x40674 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x40675 = x40674 * x13;
        Fp x40676 = x40673 + x40675;
        Fp x40677 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x40678 = x40677 * x14;
        Fp x40679 = x40676 + x40678;
        Fp x40680 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x40681 = x40680 * x15;
        Fp x40682 = x40679 + x40681;
        Fp x40683 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x40684 = x40683 * x16;
        Fp x40685 = x40682 + x40684;
        Fp x40686 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x40687 = x40686 * x17;
        Fp x40688 = x40685 + x40687;
        Fp x40689 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x40690 = x40689 * x18;
        Fp x40691 = x40688 + x40690;
        Fp x40692 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x40693 = x40692 * x19;
        Fp x40694 = x40691 + x40693;
        Fp x40695 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x40696 = x40695 * x20;
        Fp x40697 = x40694 + x40696;
        Fp x40698 = x40629 - x40697;
        Fp x40699 = x40698 * x62;
        {
          Fp x40700 = Fp(x40699.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x40700;
        }
        Fp x40701 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x40702 = x40699 - x40701;
        Fp x40703 = x40702 * x10;
        if (x40703 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x40704 = x40382 * x15;
        Fp x40705 = x40284 + x40704;
        Fp x40706 = x40386 * x3;
        Fp x40707 = x40383 + x40706;
        Fp x40708 = x40389 * x11;
        Fp x40709 = x40707 + x40708;
        Fp x40710 = x40392 * x12;
        Fp x40711 = x40709 + x40710;
        Fp x40712 = x40493 * x13;
        Fp x40713 = x40711 + x40712;
        args[2][100 * steps + cycle] = x40705;
        args[2][101 * steps + cycle] = x40713;
        host_args[0] = x40127;
        host_args[1] = x40081;
        host(ctx, "log", "  i0 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        host_args[0] = x40219;
        host_args[1] = x40173;
        host(ctx, "log", "  i1 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        Fp x40714 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x40715 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x40714;
        host_args[1] = x40715;
        host(ctx, "log", "  result = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
      }
      Fp x40716 = args[2][77 * steps + ((cycle - 1) & mask)];
      if (x40716 != 0) {
        {
          Fp x40717 = Fp(x37181.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x40717;
          Fp x40718 = x37181 - x40717;
          Fp x40719 = x40718 * x10;
          Fp x40720 = Fp(x40719.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x40720;
          Fp x40721 = x40719 - x40720;
          Fp x40722 = x40721 * x10;
          Fp x40723 = Fp(x40722.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x40723;
          Fp x40724 = x40722 - x40723;
          Fp x40725 = x40724 * x10;
          Fp x40726 = Fp(x40725.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x40726;
          Fp x40727 = x40725 - x40726;
          Fp x40728 = x40727 * x10;
          Fp x40729 = Fp(x40728.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x40729;
          Fp x40730 = x40728 - x40729;
          Fp x40731 = x40730 * x10;
          Fp x40732 = Fp(x40731.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x40732;
          Fp x40733 = x40731 - x40732;
          Fp x40734 = x40733 * x10;
          Fp x40735 = Fp(x40734.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x40735;
          Fp x40736 = x40734 - x40735;
          Fp x40737 = x40736 * x10;
          Fp x40738 = Fp(x40737.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x40738;
        }
        Fp x40739 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x40740 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x40741 = x40740 * x3;
        Fp x40742 = x40739 + x40741;
        Fp x40743 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x40744 = x40743 * x11;
        Fp x40745 = x40742 + x40744;
        Fp x40746 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x40747 = x40746 * x12;
        Fp x40748 = x40745 + x40747;
        Fp x40749 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x40750 = x40749 * x13;
        Fp x40751 = x40748 + x40750;
        Fp x40752 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x40753 = x40752 * x14;
        Fp x40754 = x40751 + x40753;
        Fp x40755 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x40756 = x40755 * x15;
        Fp x40757 = x40754 + x40756;
        Fp x40758 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x40759 = x40758 * x16;
        Fp x40760 = x40757 + x40759;
        Fp x40761 = x37181 - x40760;
        Fp x40762 = x40761 * x33;
        if (x40762 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
        {
          Fp x40763 = Fp(x37182.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x40763;
          Fp x40764 = x37182 - x40763;
          Fp x40765 = x40764 * x10;
          Fp x40766 = Fp(x40765.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x40766;
          Fp x40767 = x40765 - x40766;
          Fp x40768 = x40767 * x10;
          Fp x40769 = Fp(x40768.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x40769;
          Fp x40770 = x40768 - x40769;
          Fp x40771 = x40770 * x10;
          Fp x40772 = Fp(x40771.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x40772;
          Fp x40773 = x40771 - x40772;
          Fp x40774 = x40773 * x10;
          Fp x40775 = Fp(x40774.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x40775;
          Fp x40776 = x40774 - x40775;
          Fp x40777 = x40776 * x10;
          Fp x40778 = Fp(x40777.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x40778;
          Fp x40779 = x40777 - x40778;
          Fp x40780 = x40779 * x10;
          Fp x40781 = Fp(x40780.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x40781;
          Fp x40782 = x40780 - x40781;
          Fp x40783 = x40782 * x10;
          Fp x40784 = Fp(x40783.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x40784;
        }
        Fp x40785 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x40786 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x40787 = x40786 * x3;
        Fp x40788 = x40785 + x40787;
        Fp x40789 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x40790 = x40789 * x11;
        Fp x40791 = x40788 + x40790;
        Fp x40792 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x40793 = x40792 * x12;
        Fp x40794 = x40791 + x40793;
        Fp x40795 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x40796 = x40795 * x13;
        Fp x40797 = x40794 + x40796;
        Fp x40798 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x40799 = x40798 * x14;
        Fp x40800 = x40797 + x40799;
        Fp x40801 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x40802 = x40801 * x15;
        Fp x40803 = x40800 + x40802;
        Fp x40804 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x40805 = x40804 * x16;
        Fp x40806 = x40803 + x40805;
        Fp x40807 = x37182 - x40806;
        Fp x40808 = x40807 * x33;
        if (x40808 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
        {
          Fp x40809 = Fp(x37230.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x40809;
          Fp x40810 = x37230 - x40809;
          Fp x40811 = x40810 * x10;
          Fp x40812 = Fp(x40811.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x40812;
          Fp x40813 = x40811 - x40812;
          Fp x40814 = x40813 * x10;
          Fp x40815 = Fp(x40814.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x40815;
          Fp x40816 = x40814 - x40815;
          Fp x40817 = x40816 * x10;
          Fp x40818 = Fp(x40817.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x40818;
          Fp x40819 = x40817 - x40818;
          Fp x40820 = x40819 * x10;
          Fp x40821 = Fp(x40820.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x40821;
          Fp x40822 = x40820 - x40821;
          Fp x40823 = x40822 * x10;
          Fp x40824 = Fp(x40823.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x40824;
          Fp x40825 = x40823 - x40824;
          Fp x40826 = x40825 * x10;
          Fp x40827 = Fp(x40826.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x40827;
          Fp x40828 = x40826 - x40827;
          Fp x40829 = x40828 * x10;
          Fp x40830 = Fp(x40829.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x40830;
        }
        Fp x40831 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x40832 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x40833 = x40832 * x3;
        Fp x40834 = x40831 + x40833;
        Fp x40835 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x40836 = x40835 * x11;
        Fp x40837 = x40834 + x40836;
        Fp x40838 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x40839 = x40838 * x12;
        Fp x40840 = x40837 + x40839;
        Fp x40841 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x40842 = x40841 * x13;
        Fp x40843 = x40840 + x40842;
        Fp x40844 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x40845 = x40844 * x14;
        Fp x40846 = x40843 + x40845;
        Fp x40847 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x40848 = x40847 * x15;
        Fp x40849 = x40846 + x40848;
        Fp x40850 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x40851 = x40850 * x16;
        Fp x40852 = x40849 + x40851;
        Fp x40853 = x37230 - x40852;
        Fp x40854 = x40853 * x33;
        if (x40854 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
        {
          Fp x40855 = Fp(x37276.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x40855;
          Fp x40856 = x37276 - x40855;
          Fp x40857 = x40856 * x10;
          Fp x40858 = Fp(x40857.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x40858;
          Fp x40859 = x40857 - x40858;
          Fp x40860 = x40859 * x10;
          Fp x40861 = Fp(x40860.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x40861;
          Fp x40862 = x40860 - x40861;
          Fp x40863 = x40862 * x10;
          Fp x40864 = Fp(x40863.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x40864;
          Fp x40865 = x40863 - x40864;
          Fp x40866 = x40865 * x10;
          Fp x40867 = Fp(x40866.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x40867;
          Fp x40868 = x40866 - x40867;
          Fp x40869 = x40868 * x10;
          Fp x40870 = Fp(x40869.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x40870;
          Fp x40871 = x40869 - x40870;
          Fp x40872 = x40871 * x10;
          Fp x40873 = Fp(x40872.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x40873;
          Fp x40874 = x40872 - x40873;
          Fp x40875 = x40874 * x10;
          Fp x40876 = Fp(x40875.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x40876;
        }
        Fp x40877 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x40878 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x40879 = x40878 * x3;
        Fp x40880 = x40877 + x40879;
        Fp x40881 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x40882 = x40881 * x11;
        Fp x40883 = x40880 + x40882;
        Fp x40884 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x40885 = x40884 * x12;
        Fp x40886 = x40883 + x40885;
        Fp x40887 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x40888 = x40887 * x13;
        Fp x40889 = x40886 + x40888;
        Fp x40890 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x40891 = x40890 * x14;
        Fp x40892 = x40889 + x40891;
        Fp x40893 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x40894 = x40893 * x15;
        Fp x40895 = x40892 + x40894;
        Fp x40896 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x40897 = x40896 * x16;
        Fp x40898 = x40895 + x40897;
        Fp x40899 = x37276 - x40898;
        Fp x40900 = x40899 * x33;
        if (x40900 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/riscv32im.inl:102");
        {
          args[2][108 * steps + cycle] = x70;
          args[2][109 * steps + cycle] = x70;
        }
        Fp x40901 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x40902 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x40903 = x40902 * x1;
        Fp x40904 = x40901 + x40903;
        Fp x40905 = x70 - x40904;
        Fp x40906 = x40905 * x10;
        if (x40906 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:38");
        {
          args[2][106 * steps + cycle] = x70;
          args[2][107 * steps + cycle] = x70;
        }
        Fp x40907 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x40908 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x40909 = x40908 * x1;
        Fp x40910 = x40907 + x40909;
        Fp x40911 = x70 - x40910;
        Fp x40912 = x40911 * x10;
        if (x40912 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:45");
        Fp x40913 = x40754 * x40846;
        host_args[0] = x70;
        host_args[1] = x40913;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x40914 = Fp(x40913.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x40914;
          Fp x40915 = x40913 - x40914;
          Fp x40916 = x40915 * x10;
          Fp x40917 = Fp(x40916.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x40917;
          Fp x40918 = x40916 - x40917;
          Fp x40919 = x40918 * x10;
          Fp x40920 = Fp(x40919.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x40920;
          Fp x40921 = x40919 - x40920;
          Fp x40922 = x40921 * x10;
          Fp x40923 = Fp(x40922.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x40923;
          Fp x40924 = x40922 - x40923;
          Fp x40925 = x40924 * x10;
          Fp x40926 = Fp(x40925.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x40926;
          Fp x40927 = x40925 - x40926;
          Fp x40928 = x40927 * x10;
          Fp x40929 = Fp(x40928.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x40929;
          Fp x40930 = x40928 - x40929;
          Fp x40931 = x40930 * x10;
          Fp x40932 = Fp(x40931.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x40932;
          Fp x40933 = x40931 - x40932;
          Fp x40934 = x40933 * x10;
          Fp x40935 = Fp(x40934.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x40935;
          Fp x40936 = x40934 - x40935;
          Fp x40937 = x40936 * x10;
          Fp x40938 = Fp(x40937.asUInt32() & x2.asUInt32());
          args[2][48 * steps + cycle] = x40938;
          Fp x40939 = x40937 - x40938;
          Fp x40940 = x40939 * x10;
          Fp x40941 = Fp(x40940.asUInt32() & x2.asUInt32());
          args[2][49 * steps + cycle] = x40941;
          Fp x40942 = x40940 - x40941;
          Fp x40943 = x40942 * x10;
          Fp x40944 = Fp(x40943.asUInt32() & x2.asUInt32());
          args[2][50 * steps + cycle] = x40944;
          Fp x40945 = x40943 - x40944;
          Fp x40946 = x40945 * x10;
          Fp x40947 = Fp(x40946.asUInt32() & x2.asUInt32());
          args[2][51 * steps + cycle] = x40947;
        }
        Fp x40948 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x40949 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x40950 = x40949 * x3;
        Fp x40951 = x40948 + x40950;
        Fp x40952 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x40953 = x40952 * x11;
        Fp x40954 = x40951 + x40953;
        Fp x40955 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x40956 = x40955 * x12;
        Fp x40957 = x40954 + x40956;
        Fp x40958 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x40959 = x40958 * x13;
        Fp x40960 = x40957 + x40959;
        Fp x40961 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x40962 = x40961 * x14;
        Fp x40963 = x40960 + x40962;
        Fp x40964 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x40965 = x40964 * x15;
        Fp x40966 = x40963 + x40965;
        Fp x40967 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x40968 = x40967 * x16;
        Fp x40969 = x40966 + x40968;
        Fp x40970 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x40971 = x40970 * x17;
        Fp x40972 = x40969 + x40971;
        Fp x40973 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x40974 = x40973 * x18;
        Fp x40975 = x40972 + x40974;
        Fp x40976 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x40977 = x40976 * x19;
        Fp x40978 = x40975 + x40977;
        Fp x40979 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x40980 = x40979 * x20;
        Fp x40981 = x40978 + x40980;
        Fp x40982 = x40913 - x40981;
        Fp x40983 = x40982 * x62;
        {
          Fp x40984 = Fp(x40983.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x40984;
        }
        Fp x40985 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x40986 = x40983 - x40985;
        Fp x40987 = x40986 * x10;
        if (x40987 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x40988 = x40967 * x3;
        Fp x40989 = x40964 + x40988;
        Fp x40990 = x40970 * x11;
        Fp x40991 = x40989 + x40990;
        Fp x40992 = x40973 * x12;
        Fp x40993 = x40991 + x40992;
        Fp x40994 = x40976 * x13;
        Fp x40995 = x40993 + x40994;
        Fp x40996 = x40979 * x14;
        Fp x40997 = x40995 + x40996;
        Fp x40998 = x40983 * x15;
        Fp x40999 = x40997 + x40998;
        Fp x41000 = x40850 * x3;
        Fp x41001 = x40847 + x41000;
        Fp x41002 = x40877 * x11;
        Fp x41003 = x41001 + x41002;
        Fp x41004 = x40878 * x12;
        Fp x41005 = x41003 + x41004;
        Fp x41006 = x40881 * x13;
        Fp x41007 = x41005 + x41006;
        Fp x41008 = x40884 * x14;
        Fp x41009 = x41007 + x41008;
        Fp x41010 = x40754 * x41009;
        Fp x41011 = x40999 + x41010;
        Fp x41012 = x40758 * x3;
        Fp x41013 = x40755 + x41012;
        Fp x41014 = x40785 * x11;
        Fp x41015 = x41013 + x41014;
        Fp x41016 = x40786 * x12;
        Fp x41017 = x41015 + x41016;
        Fp x41018 = x40789 * x13;
        Fp x41019 = x41017 + x41018;
        Fp x41020 = x40792 * x14;
        Fp x41021 = x41019 + x41020;
        Fp x41022 = x41021 * x40846;
        Fp x41023 = x41011 + x41022;
        host_args[0] = x71;
        host_args[1] = x41023;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x41024 = Fp(x41023.asUInt32() & x2.asUInt32());
          args[2][52 * steps + cycle] = x41024;
          Fp x41025 = x41023 - x41024;
          Fp x41026 = x41025 * x10;
          Fp x41027 = Fp(x41026.asUInt32() & x2.asUInt32());
          args[2][53 * steps + cycle] = x41027;
          Fp x41028 = x41026 - x41027;
          Fp x41029 = x41028 * x10;
          Fp x41030 = Fp(x41029.asUInt32() & x2.asUInt32());
          args[2][54 * steps + cycle] = x41030;
          Fp x41031 = x41029 - x41030;
          Fp x41032 = x41031 * x10;
          Fp x41033 = Fp(x41032.asUInt32() & x2.asUInt32());
          args[2][55 * steps + cycle] = x41033;
          Fp x41034 = x41032 - x41033;
          Fp x41035 = x41034 * x10;
          Fp x41036 = Fp(x41035.asUInt32() & x2.asUInt32());
          args[2][56 * steps + cycle] = x41036;
          Fp x41037 = x41035 - x41036;
          Fp x41038 = x41037 * x10;
          Fp x41039 = Fp(x41038.asUInt32() & x2.asUInt32());
          args[2][57 * steps + cycle] = x41039;
          Fp x41040 = x41038 - x41039;
          Fp x41041 = x41040 * x10;
          Fp x41042 = Fp(x41041.asUInt32() & x2.asUInt32());
          args[2][58 * steps + cycle] = x41042;
          Fp x41043 = x41041 - x41042;
          Fp x41044 = x41043 * x10;
          Fp x41045 = Fp(x41044.asUInt32() & x2.asUInt32());
          args[2][59 * steps + cycle] = x41045;
          Fp x41046 = x41044 - x41045;
          Fp x41047 = x41046 * x10;
          Fp x41048 = Fp(x41047.asUInt32() & x2.asUInt32());
          args[2][60 * steps + cycle] = x41048;
          Fp x41049 = x41047 - x41048;
          Fp x41050 = x41049 * x10;
          Fp x41051 = Fp(x41050.asUInt32() & x2.asUInt32());
          args[2][61 * steps + cycle] = x41051;
          Fp x41052 = x41050 - x41051;
          Fp x41053 = x41052 * x10;
          Fp x41054 = Fp(x41053.asUInt32() & x2.asUInt32());
          args[2][62 * steps + cycle] = x41054;
          Fp x41055 = x41053 - x41054;
          Fp x41056 = x41055 * x10;
          Fp x41057 = Fp(x41056.asUInt32() & x2.asUInt32());
          args[2][63 * steps + cycle] = x41057;
        }
        Fp x41058 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x41059 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x41060 = x41059 * x3;
        Fp x41061 = x41058 + x41060;
        Fp x41062 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x41063 = x41062 * x11;
        Fp x41064 = x41061 + x41063;
        Fp x41065 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x41066 = x41065 * x12;
        Fp x41067 = x41064 + x41066;
        Fp x41068 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x41069 = x41068 * x13;
        Fp x41070 = x41067 + x41069;
        Fp x41071 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x41072 = x41071 * x14;
        Fp x41073 = x41070 + x41072;
        Fp x41074 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x41075 = x41074 * x15;
        Fp x41076 = x41073 + x41075;
        Fp x41077 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x41078 = x41077 * x16;
        Fp x41079 = x41076 + x41078;
        Fp x41080 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x41081 = x41080 * x17;
        Fp x41082 = x41079 + x41081;
        Fp x41083 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x41084 = x41083 * x18;
        Fp x41085 = x41082 + x41084;
        Fp x41086 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x41087 = x41086 * x19;
        Fp x41088 = x41085 + x41087;
        Fp x41089 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x41090 = x41089 * x20;
        Fp x41091 = x41088 + x41090;
        Fp x41092 = x41023 - x41091;
        Fp x41093 = x41092 * x62;
        {
          Fp x41094 = Fp(x41093.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x41094;
        }
        Fp x41095 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x41096 = x41093 - x41095;
        Fp x41097 = x41096 * x10;
        if (x41097 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x41098 = x41077 * x3;
        Fp x41099 = x41074 + x41098;
        Fp x41100 = x41080 * x11;
        Fp x41101 = x41099 + x41100;
        Fp x41102 = x41083 * x12;
        Fp x41103 = x41101 + x41102;
        Fp x41104 = x41086 * x13;
        Fp x41105 = x41103 + x41104;
        Fp x41106 = x41089 * x14;
        Fp x41107 = x41105 + x41106;
        Fp x41108 = x41093 * x15;
        Fp x41109 = x41107 + x41108;
        Fp x41110 = x40890 * x3;
        Fp x41111 = x40887 + x41110;
        Fp x41112 = x40893 * x11;
        Fp x41113 = x41111 + x41112;
        Fp x41114 = x40896 * x12;
        Fp x41115 = x41113 + x41114;
        Fp x41116 = x40754 * x41115;
        Fp x41117 = x41109 + x41116;
        Fp x41118 = x41021 * x41009;
        Fp x41119 = x41117 + x41118;
        Fp x41120 = x40798 * x3;
        Fp x41121 = x40795 + x41120;
        Fp x41122 = x40801 * x11;
        Fp x41123 = x41121 + x41122;
        Fp x41124 = x40804 * x12;
        Fp x41125 = x41123 + x41124;
        Fp x41126 = x41125 * x40846;
        Fp x41127 = x41119 + x41126;
        Fp x41128 = x41127 + x31;
        host_args[0] = x1;
        host_args[1] = x41128;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x41129 = Fp(x41128.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x41129;
          Fp x41130 = x41128 - x41129;
          Fp x41131 = x41130 * x10;
          Fp x41132 = Fp(x41131.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x41132;
          Fp x41133 = x41131 - x41132;
          Fp x41134 = x41133 * x10;
          Fp x41135 = Fp(x41134.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x41135;
          Fp x41136 = x41134 - x41135;
          Fp x41137 = x41136 * x10;
          Fp x41138 = Fp(x41137.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x41138;
          Fp x41139 = x41137 - x41138;
          Fp x41140 = x41139 * x10;
          Fp x41141 = Fp(x41140.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x41141;
          Fp x41142 = x41140 - x41141;
          Fp x41143 = x41142 * x10;
          Fp x41144 = Fp(x41143.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x41144;
          Fp x41145 = x41143 - x41144;
          Fp x41146 = x41145 * x10;
          Fp x41147 = Fp(x41146.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x41147;
          Fp x41148 = x41146 - x41147;
          Fp x41149 = x41148 * x10;
          Fp x41150 = Fp(x41149.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x41150;
          Fp x41151 = x41149 - x41150;
          Fp x41152 = x41151 * x10;
          Fp x41153 = Fp(x41152.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x41153;
          Fp x41154 = x41152 - x41153;
          Fp x41155 = x41154 * x10;
          Fp x41156 = Fp(x41155.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x41156;
          Fp x41157 = x41155 - x41156;
          Fp x41158 = x41157 * x10;
          Fp x41159 = Fp(x41158.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x41159;
          Fp x41160 = x41158 - x41159;
          Fp x41161 = x41160 * x10;
          Fp x41162 = Fp(x41161.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x41162;
        }
        Fp x41163 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x41164 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x41165 = x41164 * x3;
        Fp x41166 = x41163 + x41165;
        Fp x41167 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x41168 = x41167 * x11;
        Fp x41169 = x41166 + x41168;
        Fp x41170 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x41171 = x41170 * x12;
        Fp x41172 = x41169 + x41171;
        Fp x41173 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x41174 = x41173 * x13;
        Fp x41175 = x41172 + x41174;
        Fp x41176 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x41177 = x41176 * x14;
        Fp x41178 = x41175 + x41177;
        Fp x41179 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x41180 = x41179 * x15;
        Fp x41181 = x41178 + x41180;
        Fp x41182 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x41183 = x41182 * x16;
        Fp x41184 = x41181 + x41183;
        Fp x41185 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x41186 = x41185 * x17;
        Fp x41187 = x41184 + x41186;
        Fp x41188 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x41189 = x41188 * x18;
        Fp x41190 = x41187 + x41189;
        Fp x41191 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x41192 = x41191 * x19;
        Fp x41193 = x41190 + x41192;
        Fp x41194 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x41195 = x41194 * x20;
        Fp x41196 = x41193 + x41195;
        Fp x41197 = x41128 - x41196;
        Fp x41198 = x41197 * x62;
        {
          Fp x41199 = Fp(x41198.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x41199;
        }
        Fp x41200 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x41201 = x41198 - x41200;
        Fp x41202 = x41201 * x10;
        if (x41202 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x41203 = x41182 * x3;
        Fp x41204 = x41179 + x41203;
        Fp x41205 = x41185 * x11;
        Fp x41206 = x41204 + x41205;
        Fp x41207 = x41188 * x12;
        Fp x41208 = x41206 + x41207;
        Fp x41209 = x41191 * x13;
        Fp x41210 = x41208 + x41209;
        Fp x41211 = x41194 * x14;
        Fp x41212 = x41210 + x41211;
        Fp x41213 = x41198 * x15;
        Fp x41214 = x41212 + x41213;
        Fp x41215 = x41021 * x41115;
        Fp x41216 = x41214 + x41215;
        Fp x41217 = x41125 * x41009;
        Fp x41218 = x41216 + x41217;
        Fp x41219 = x41218 + x63;
        host_args[0] = x2;
        host_args[1] = x41219;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x41220 = Fp(x41219.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x41220;
          Fp x41221 = x41219 - x41220;
          Fp x41222 = x41221 * x10;
          Fp x41223 = Fp(x41222.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x41223;
          Fp x41224 = x41222 - x41223;
          Fp x41225 = x41224 * x10;
          Fp x41226 = Fp(x41225.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x41226;
          Fp x41227 = x41225 - x41226;
          Fp x41228 = x41227 * x10;
          Fp x41229 = Fp(x41228.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x41229;
          Fp x41230 = x41228 - x41229;
          Fp x41231 = x41230 * x10;
          Fp x41232 = Fp(x41231.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x41232;
          Fp x41233 = x41231 - x41232;
          Fp x41234 = x41233 * x10;
          Fp x41235 = Fp(x41234.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x41235;
          Fp x41236 = x41234 - x41235;
          Fp x41237 = x41236 * x10;
          Fp x41238 = Fp(x41237.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x41238;
          Fp x41239 = x41237 - x41238;
          Fp x41240 = x41239 * x10;
          Fp x41241 = Fp(x41240.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x41241;
          Fp x41242 = x41240 - x41241;
          Fp x41243 = x41242 * x10;
          Fp x41244 = Fp(x41243.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x41244;
          Fp x41245 = x41243 - x41244;
          Fp x41246 = x41245 * x10;
          Fp x41247 = Fp(x41246.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x41247;
          Fp x41248 = x41246 - x41247;
          Fp x41249 = x41248 * x10;
          Fp x41250 = Fp(x41249.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x41250;
          Fp x41251 = x41249 - x41250;
          Fp x41252 = x41251 * x10;
          Fp x41253 = Fp(x41252.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x41253;
        }
        Fp x41254 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x41255 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x41256 = x41255 * x3;
        Fp x41257 = x41254 + x41256;
        Fp x41258 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x41259 = x41258 * x11;
        Fp x41260 = x41257 + x41259;
        Fp x41261 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x41262 = x41261 * x12;
        Fp x41263 = x41260 + x41262;
        Fp x41264 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x41265 = x41264 * x13;
        Fp x41266 = x41263 + x41265;
        Fp x41267 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x41268 = x41267 * x14;
        Fp x41269 = x41266 + x41268;
        Fp x41270 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x41271 = x41270 * x15;
        Fp x41272 = x41269 + x41271;
        Fp x41273 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x41274 = x41273 * x16;
        Fp x41275 = x41272 + x41274;
        Fp x41276 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x41277 = x41276 * x17;
        Fp x41278 = x41275 + x41277;
        Fp x41279 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x41280 = x41279 * x18;
        Fp x41281 = x41278 + x41280;
        Fp x41282 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x41283 = x41282 * x19;
        Fp x41284 = x41281 + x41283;
        Fp x41285 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x41286 = x41285 * x20;
        Fp x41287 = x41284 + x41286;
        Fp x41288 = x41219 - x41287;
        Fp x41289 = x41288 * x62;
        {
          Fp x41290 = Fp(x41289.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x41290;
        }
        Fp x41291 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x41292 = x41289 - x41291;
        Fp x41293 = x41292 * x10;
        if (x41293 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x41294 = x41273 * x3;
        Fp x41295 = x41270 + x41294;
        Fp x41296 = x41276 * x11;
        Fp x41297 = x41295 + x41296;
        Fp x41298 = x41279 * x12;
        Fp x41299 = x41297 + x41298;
        Fp x41300 = x41282 * x13;
        Fp x41301 = x41299 + x41300;
        Fp x41302 = x41285 * x14;
        Fp x41303 = x41301 + x41302;
        Fp x41304 = x41289 * x15;
        Fp x41305 = x41303 + x41304;
        Fp x41306 = x41125 * x41115;
        Fp x41307 = x41305 + x41306;
        Fp x41308 = x41307 + x64;
        host_args[0] = x3;
        host_args[1] = x41308;
        host(ctx, "log", "  tot[%d] = %08x", host_args.data(), 2, host_outs.data(), 0);
        {
          Fp x41309 = Fp(x41308.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x41309;
          Fp x41310 = x41308 - x41309;
          Fp x41311 = x41310 * x10;
          Fp x41312 = Fp(x41311.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x41312;
          Fp x41313 = x41311 - x41312;
          Fp x41314 = x41313 * x10;
          Fp x41315 = Fp(x41314.asUInt32() & x2.asUInt32());
          args[2][90 * steps + cycle] = x41315;
          Fp x41316 = x41314 - x41315;
          Fp x41317 = x41316 * x10;
          Fp x41318 = Fp(x41317.asUInt32() & x2.asUInt32());
          args[2][91 * steps + cycle] = x41318;
          Fp x41319 = x41317 - x41318;
          Fp x41320 = x41319 * x10;
          Fp x41321 = Fp(x41320.asUInt32() & x2.asUInt32());
          args[2][92 * steps + cycle] = x41321;
          Fp x41322 = x41320 - x41321;
          Fp x41323 = x41322 * x10;
          Fp x41324 = Fp(x41323.asUInt32() & x2.asUInt32());
          args[2][93 * steps + cycle] = x41324;
          Fp x41325 = x41323 - x41324;
          Fp x41326 = x41325 * x10;
          Fp x41327 = Fp(x41326.asUInt32() & x2.asUInt32());
          args[2][94 * steps + cycle] = x41327;
          Fp x41328 = x41326 - x41327;
          Fp x41329 = x41328 * x10;
          Fp x41330 = Fp(x41329.asUInt32() & x2.asUInt32());
          args[2][95 * steps + cycle] = x41330;
          Fp x41331 = x41329 - x41330;
          Fp x41332 = x41331 * x10;
          Fp x41333 = Fp(x41332.asUInt32() & x2.asUInt32());
          args[2][96 * steps + cycle] = x41333;
          Fp x41334 = x41332 - x41333;
          Fp x41335 = x41334 * x10;
          Fp x41336 = Fp(x41335.asUInt32() & x2.asUInt32());
          args[2][97 * steps + cycle] = x41336;
          Fp x41337 = x41335 - x41336;
          Fp x41338 = x41337 * x10;
          Fp x41339 = Fp(x41338.asUInt32() & x2.asUInt32());
          args[2][98 * steps + cycle] = x41339;
          Fp x41340 = x41338 - x41339;
          Fp x41341 = x41340 * x10;
          Fp x41342 = Fp(x41341.asUInt32() & x2.asUInt32());
          args[2][99 * steps + cycle] = x41342;
        }
        Fp x41343 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x41344 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x41345 = x41344 * x3;
        Fp x41346 = x41343 + x41345;
        Fp x41347 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x41348 = x41347 * x11;
        Fp x41349 = x41346 + x41348;
        Fp x41350 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x41351 = x41350 * x12;
        Fp x41352 = x41349 + x41351;
        Fp x41353 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x41354 = x41353 * x13;
        Fp x41355 = x41352 + x41354;
        Fp x41356 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x41357 = x41356 * x14;
        Fp x41358 = x41355 + x41357;
        Fp x41359 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x41360 = x41359 * x15;
        Fp x41361 = x41358 + x41360;
        Fp x41362 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x41363 = x41362 * x16;
        Fp x41364 = x41361 + x41363;
        Fp x41365 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x41366 = x41365 * x17;
        Fp x41367 = x41364 + x41366;
        Fp x41368 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x41369 = x41368 * x18;
        Fp x41370 = x41367 + x41369;
        Fp x41371 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x41372 = x41371 * x19;
        Fp x41373 = x41370 + x41372;
        Fp x41374 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x41375 = x41374 * x20;
        Fp x41376 = x41373 + x41375;
        Fp x41377 = x41308 - x41376;
        Fp x41378 = x41377 * x62;
        {
          Fp x41379 = Fp(x41378.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x41379;
        }
        Fp x41380 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x41381 = x41378 - x41380;
        Fp x41382 = x41381 * x10;
        if (x41382 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.cpp:70");
        Fp x41383 = x41061 * x15;
        Fp x41384 = x40963 + x41383;
        Fp x41385 = x41065 * x3;
        Fp x41386 = x41062 + x41385;
        Fp x41387 = x41068 * x11;
        Fp x41388 = x41386 + x41387;
        Fp x41389 = x41071 * x12;
        Fp x41390 = x41388 + x41389;
        Fp x41391 = x41172 * x13;
        Fp x41392 = x41390 + x41391;
        args[2][100 * steps + cycle] = x41384;
        args[2][101 * steps + cycle] = x41392;
        host_args[0] = x40806;
        host_args[1] = x40760;
        host(ctx, "log", "  i0 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        host_args[0] = x40898;
        host_args[1] = x40852;
        host(ctx, "log", "  i1 = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
        Fp x41393 = args[2][101 * steps + ((cycle - 0) & mask)];
        Fp x41394 = args[2][100 * steps + ((cycle - 0) & mask)];
        host_args[0] = x41393;
        host_args[1] = x41394;
        host(ctx, "log", "  result = 0x%04x%04x", host_args.data(), 2, host_outs.data(), 0);
      }
      args[2][102 * steps + cycle] = x71;
      args[2][103 * steps + cycle] = x70;
      Fp x41395 = args[2][0 * steps + ((cycle - 2) & mask)];
      Fp x41396 = args[2][1 * steps + ((cycle - 2) & mask)];
      Fp x41397 = x41396 * x3;
      Fp x41398 = x41395 + x41397;
      Fp x41399 = args[2][2 * steps + ((cycle - 2) & mask)];
      Fp x41400 = x41399 * x11;
      Fp x41401 = x41398 + x41400;
      Fp x41402 = args[2][3 * steps + ((cycle - 2) & mask)];
      Fp x41403 = x41402 * x12;
      Fp x41404 = x41401 + x41403;
      Fp x41405 = args[2][4 * steps + ((cycle - 2) & mask)];
      Fp x41406 = x41405 * x13;
      Fp x41407 = x41404 + x41406;
      Fp x41408 = args[2][5 * steps + ((cycle - 2) & mask)];
      Fp x41409 = x41408 * x14;
      Fp x41410 = x41407 + x41409;
      Fp x41411 = args[2][6 * steps + ((cycle - 2) & mask)];
      Fp x41412 = x41411 * x15;
      Fp x41413 = x41410 + x41412;
      Fp x41414 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x41415 = x41414 * x16;
      Fp x41416 = x41413 + x41415;
      Fp x41417 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x41418 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x41419 = x41418 * x3;
      Fp x41420 = x41417 + x41419;
      Fp x41421 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x41422 = x41421 * x11;
      Fp x41423 = x41420 + x41422;
      Fp x41424 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x41425 = x41424 * x12;
      Fp x41426 = x41423 + x41425;
      Fp x41427 = args[2][12 * steps + ((cycle - 2) & mask)];
      Fp x41428 = x41427 * x13;
      Fp x41429 = x41426 + x41428;
      Fp x41430 = args[2][13 * steps + ((cycle - 2) & mask)];
      Fp x41431 = x41430 * x14;
      Fp x41432 = x41429 + x41431;
      Fp x41433 = args[2][14 * steps + ((cycle - 2) & mask)];
      Fp x41434 = x41433 * x15;
      Fp x41435 = x41432 + x41434;
      Fp x41436 = args[2][15 * steps + ((cycle - 2) & mask)];
      Fp x41437 = x41436 * x16;
      Fp x41438 = x41435 + x41437;
      Fp x41439 = x41416 + x3;
      args[2][104 * steps + cycle] = x41439;
      args[2][105 * steps + cycle] = x41438;
      Fp x41440 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x41441 = x41440 - x71;
      Fp x41442 = x41440 * x41441;
      if (x41442 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.h:37");
      Fp x41443 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x41444 = x41443 - x71;
      Fp x41445 = x41443 * x41444;
      if (x41445 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.h:37");
      Fp x41446 = args[2][108 * steps + ((cycle - 0) & mask)];
      Fp x41447 = x41446 - x71;
      Fp x41448 = x41446 * x41447;
      if (x41448 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.h:38");
      Fp x41449 = args[2][109 * steps + ((cycle - 0) & mask)];
      Fp x41450 = x41449 - x71;
      Fp x41451 = x41449 * x41450;
      if (x41451 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/multiply_cycle.h:38");
    }
    Fp x41452 = args[2][138 * steps + ((cycle - 0) & mask)];
    if (x41452 != 0) {
      host_args[0] = x72;
      host(ctx, "log", "C%u: Divide", host_args.data(), 1, host_outs.data(), 0);
      args[2][128 * steps + cycle] = x70;
      args[2][131 * steps + cycle] = x70;
      {
        host_args[0] = x72;
        host_args[1] = x70;
        host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
        Fp x41453 = host_outs[0];
        Fp x41454 = host_outs[1];
        args[2][129 * steps + cycle] = x41453;
        args[2][130 * steps + cycle] = x41454;
      }
      Fp x41455 = args[2][116 * steps + ((cycle - 1) & mask)];
      Fp x41456 = args[2][117 * steps + ((cycle - 1) & mask)];
      Fp x41457 = args[2][118 * steps + ((cycle - 1) & mask)];
      Fp x41458 = args[2][119 * steps + ((cycle - 1) & mask)];
      Fp x41459 = args[2][32 * steps + ((cycle - 1) & mask)];
      Fp x41460 = args[2][33 * steps + ((cycle - 1) & mask)];
      Fp x41461 = x41460 * x1;
      Fp x41462 = x41459 + x41461;
      Fp x41463 = args[2][34 * steps + ((cycle - 1) & mask)];
      Fp x41464 = x41463 * x3;
      Fp x41465 = x41462 + x41464;
      Fp x41466 = args[2][35 * steps + ((cycle - 1) & mask)];
      Fp x41467 = x41466 * x6;
      Fp x41468 = x41465 + x41467;
      Fp x41469 = args[2][36 * steps + ((cycle - 1) & mask)];
      Fp x41470 = x41469 * x11;
      Fp x41471 = x41468 + x41470;
      Fp x41472 = args[2][37 * steps + ((cycle - 1) & mask)];
      Fp x41473 = x41472 * x27;
      Fp x41474 = x41471 + x41473;
      Fp x41475 = args[2][38 * steps + ((cycle - 1) & mask)];
      Fp x41476 = x41475 * x12;
      Fp x41477 = x41474 + x41476;
      Fp x41478 = args[2][39 * steps + ((cycle - 1) & mask)];
      Fp x41479 = x41478 * x28;
      Fp x41480 = x41477 + x41479;
      Fp x41481 = args[2][40 * steps + ((cycle - 1) & mask)];
      Fp x41482 = x41481 * x13;
      Fp x41483 = x41480 + x41482;
      Fp x41484 = args[2][41 * steps + ((cycle - 1) & mask)];
      Fp x41485 = x41484 * x29;
      Fp x41486 = x41483 + x41485;
      Fp x41487 = args[2][42 * steps + ((cycle - 1) & mask)];
      Fp x41488 = x41487 * x14;
      Fp x41489 = x41486 + x41488;
      Fp x41490 = args[2][43 * steps + ((cycle - 1) & mask)];
      Fp x41491 = x41490 * x30;
      Fp x41492 = x41489 + x41491;
      Fp x41493 = args[2][44 * steps + ((cycle - 1) & mask)];
      Fp x41494 = x41493 * x15;
      Fp x41495 = x41492 + x41494;
      Fp x41496 = args[2][45 * steps + ((cycle - 1) & mask)];
      Fp x41497 = x41496 * x31;
      Fp x41498 = x41495 + x41497;
      Fp x41499 = args[2][46 * steps + ((cycle - 1) & mask)];
      Fp x41500 = x41499 * x16;
      Fp x41501 = x41498 + x41500;
      Fp x41502 = args[2][47 * steps + ((cycle - 1) & mask)];
      Fp x41503 = x41502 * x32;
      Fp x41504 = x41501 + x41503;
      Fp x41505 = args[2][48 * steps + ((cycle - 1) & mask)];
      Fp x41506 = args[2][49 * steps + ((cycle - 1) & mask)];
      Fp x41507 = x41506 * x1;
      Fp x41508 = x41505 + x41507;
      Fp x41509 = args[2][50 * steps + ((cycle - 1) & mask)];
      Fp x41510 = x41509 * x3;
      Fp x41511 = x41508 + x41510;
      Fp x41512 = args[2][51 * steps + ((cycle - 1) & mask)];
      Fp x41513 = x41512 * x6;
      Fp x41514 = x41511 + x41513;
      Fp x41515 = args[2][52 * steps + ((cycle - 1) & mask)];
      Fp x41516 = x41515 * x11;
      Fp x41517 = x41514 + x41516;
      Fp x41518 = args[2][53 * steps + ((cycle - 1) & mask)];
      Fp x41519 = x41518 * x27;
      Fp x41520 = x41517 + x41519;
      Fp x41521 = args[2][54 * steps + ((cycle - 1) & mask)];
      Fp x41522 = x41521 * x12;
      Fp x41523 = x41520 + x41522;
      Fp x41524 = args[2][55 * steps + ((cycle - 1) & mask)];
      Fp x41525 = x41524 * x28;
      Fp x41526 = x41523 + x41525;
      Fp x41527 = args[2][56 * steps + ((cycle - 1) & mask)];
      Fp x41528 = x41527 * x13;
      Fp x41529 = x41526 + x41528;
      Fp x41530 = args[2][57 * steps + ((cycle - 1) & mask)];
      Fp x41531 = x41530 * x29;
      Fp x41532 = x41529 + x41531;
      Fp x41533 = args[2][58 * steps + ((cycle - 1) & mask)];
      Fp x41534 = x41533 * x14;
      Fp x41535 = x41532 + x41534;
      Fp x41536 = args[2][59 * steps + ((cycle - 1) & mask)];
      Fp x41537 = x41536 * x30;
      Fp x41538 = x41535 + x41537;
      Fp x41539 = args[2][60 * steps + ((cycle - 1) & mask)];
      Fp x41540 = x41539 * x15;
      Fp x41541 = x41538 + x41540;
      Fp x41542 = args[2][61 * steps + ((cycle - 1) & mask)];
      Fp x41543 = x41542 * x31;
      Fp x41544 = x41541 + x41543;
      Fp x41545 = args[2][62 * steps + ((cycle - 1) & mask)];
      Fp x41546 = x41545 * x16;
      Fp x41547 = x41544 + x41546;
      Fp x41548 = args[2][63 * steps + ((cycle - 1) & mask)];
      Fp x41549 = x41548 * x32;
      Fp x41550 = x41547 + x41549;
      Fp x41551 = args[2][74 * steps + ((cycle - 1) & mask)];
      if (x41551 != 0) {
        Fp x41552 = x41457 + x41458;
        {
          Fp x41553 = (x41552 == 0) ? Fp(1) : Fp(0);
          Fp x41554 = x71 - x41553;
          args[2][118 * steps + cycle] = x41554;
          Fp x41555 = inv(x41552);
          args[2][119 * steps + cycle] = x41555;
        }
        Fp x41556 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x41557 = x41552 * x41556;
        Fp x41558 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x41559 = x41557 - x41558;
        if (x41559 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x41560 = x71 - x41558;
        Fp x41561 = x41560 * x41552;
        if (x41561 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        {
          Fp x41562 = Fp(x41456.asUInt32() & x32.asUInt32());
          Fp x41563 = x41562 * x65;
          args[2][90 * steps + cycle] = x41563;
          Fp x41564 = Fp(x41458.asUInt32() & x32.asUInt32());
          Fp x41565 = x41564 * x65;
          args[2][91 * steps + cycle] = x41565;
        }
        Fp x41566 = x17 - x41455;
        Fp x41567 = x41566 - x17;
        {
          Fp x41568 = (x41567 == 0) ? Fp(1) : Fp(0);
          Fp x41569 = x71 - x41568;
          args[2][94 * steps + cycle] = x41569;
          Fp x41570 = inv(x41567);
          args[2][106 * steps + cycle] = x41570;
        }
        Fp x41571 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x41572 = x41567 * x41571;
        Fp x41573 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x41574 = x41572 - x41573;
        if (x41574 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x41575 = x71 - x41573;
        Fp x41576 = x41575 * x41567;
        if (x41576 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x41577 = x41573 * x41566;
        Fp x41578 = x17 - x41573;
        Fp x41579 = x41578 - x41456;
        Fp x41580 = x41579 - x17;
        {
          Fp x41581 = (x41580 == 0) ? Fp(1) : Fp(0);
          Fp x41582 = x71 - x41581;
          args[2][95 * steps + cycle] = x41582;
          Fp x41583 = inv(x41580);
          args[2][107 * steps + cycle] = x41583;
        }
        Fp x41584 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x41585 = x41580 * x41584;
        Fp x41586 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x41587 = x41585 - x41586;
        if (x41587 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x41588 = x71 - x41586;
        Fp x41589 = x41588 * x41580;
        if (x41589 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x41590 = x41586 * x41579;
        args[2][108 * steps + cycle] = x41577;
        args[2][109 * steps + cycle] = x41590;
        Fp x41591 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x41592 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x41593 = x17 - x41457;
        Fp x41594 = x41593 - x17;
        {
          Fp x41595 = (x41594 == 0) ? Fp(1) : Fp(0);
          Fp x41596 = x71 - x41595;
          args[2][96 * steps + cycle] = x41596;
          Fp x41597 = inv(x41594);
          args[2][110 * steps + cycle] = x41597;
        }
        Fp x41598 = args[2][110 * steps + ((cycle - 0) & mask)];
        Fp x41599 = x41594 * x41598;
        Fp x41600 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x41601 = x41599 - x41600;
        if (x41601 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x41602 = x71 - x41600;
        Fp x41603 = x41602 * x41594;
        if (x41603 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x41604 = x41600 * x41593;
        Fp x41605 = x17 - x41600;
        Fp x41606 = x41605 - x41458;
        Fp x41607 = x41606 - x17;
        {
          Fp x41608 = (x41607 == 0) ? Fp(1) : Fp(0);
          Fp x41609 = x71 - x41608;
          args[2][97 * steps + cycle] = x41609;
          Fp x41610 = inv(x41607);
          args[2][111 * steps + cycle] = x41610;
        }
        Fp x41611 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x41612 = x41607 * x41611;
        Fp x41613 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x41614 = x41612 - x41613;
        if (x41614 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x41615 = x71 - x41613;
        Fp x41616 = x41615 * x41607;
        if (x41616 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x41617 = x41613 * x41606;
        args[2][112 * steps + cycle] = x41604;
        args[2][113 * steps + cycle] = x41617;
        Fp x41618 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x41619 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x41620 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x41621 = x41620 * x41591;
        Fp x41622 = x41620 * x41592;
        Fp x41623 = x71 - x41620;
        Fp x41624 = x41623 * x41455;
        Fp x41625 = x41623 * x41456;
        Fp x41626 = x41621 + x41624;
        Fp x41627 = x41622 + x41625;
        args[2][124 * steps + cycle] = x41626;
        args[2][125 * steps + cycle] = x41627;
        Fp x41628 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x41629 = x41628 * x41618;
        Fp x41630 = x41628 * x41619;
        Fp x41631 = x71 - x41628;
        Fp x41632 = x41631 * x41457;
        Fp x41633 = x41631 * x41458;
        Fp x41634 = x41629 + x41632;
        Fp x41635 = x41630 + x41633;
        {
          Fp x41636 = Fp(x41634.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x41636;
          Fp x41637 = x41634 - x41636;
          Fp x41638 = x41637 * x10;
          Fp x41639 = Fp(x41638.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x41639;
          Fp x41640 = x41638 - x41639;
          Fp x41641 = x41640 * x10;
          Fp x41642 = Fp(x41641.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x41642;
          Fp x41643 = x41641 - x41642;
          Fp x41644 = x41643 * x10;
          Fp x41645 = Fp(x41644.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x41645;
          Fp x41646 = x41644 - x41645;
          Fp x41647 = x41646 * x10;
          Fp x41648 = Fp(x41647.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x41648;
          Fp x41649 = x41647 - x41648;
          Fp x41650 = x41649 * x10;
          Fp x41651 = Fp(x41650.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x41651;
          Fp x41652 = x41650 - x41651;
          Fp x41653 = x41652 * x10;
          Fp x41654 = Fp(x41653.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x41654;
          Fp x41655 = x41653 - x41654;
          Fp x41656 = x41655 * x10;
          Fp x41657 = Fp(x41656.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x41657;
        }
        Fp x41658 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x41659 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x41660 = x41659 * x3;
        Fp x41661 = x41658 + x41660;
        Fp x41662 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x41663 = x41662 * x11;
        Fp x41664 = x41661 + x41663;
        Fp x41665 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x41666 = x41665 * x12;
        Fp x41667 = x41664 + x41666;
        Fp x41668 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x41669 = x41668 * x13;
        Fp x41670 = x41667 + x41669;
        Fp x41671 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x41672 = x41671 * x14;
        Fp x41673 = x41670 + x41672;
        Fp x41674 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x41675 = x41674 * x15;
        Fp x41676 = x41673 + x41675;
        Fp x41677 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x41678 = x41677 * x16;
        Fp x41679 = x41676 + x41678;
        Fp x41680 = x41634 - x41679;
        Fp x41681 = x41680 * x33;
        if (x41681 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:51");
        {
          Fp x41682 = Fp(x41635.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x41682;
          Fp x41683 = x41635 - x41682;
          Fp x41684 = x41683 * x10;
          Fp x41685 = Fp(x41684.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x41685;
          Fp x41686 = x41684 - x41685;
          Fp x41687 = x41686 * x10;
          Fp x41688 = Fp(x41687.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x41688;
          Fp x41689 = x41687 - x41688;
          Fp x41690 = x41689 * x10;
          Fp x41691 = Fp(x41690.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x41691;
          Fp x41692 = x41690 - x41691;
          Fp x41693 = x41692 * x10;
          Fp x41694 = Fp(x41693.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x41694;
          Fp x41695 = x41693 - x41694;
          Fp x41696 = x41695 * x10;
          Fp x41697 = Fp(x41696.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x41697;
          Fp x41698 = x41696 - x41697;
          Fp x41699 = x41698 * x10;
          Fp x41700 = Fp(x41699.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x41700;
          Fp x41701 = x41699 - x41700;
          Fp x41702 = x41701 * x10;
          Fp x41703 = Fp(x41702.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x41703;
        }
        Fp x41704 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x41705 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x41706 = x41705 * x3;
        Fp x41707 = x41704 + x41706;
        Fp x41708 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x41709 = x41708 * x11;
        Fp x41710 = x41707 + x41709;
        Fp x41711 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x41712 = x41711 * x12;
        Fp x41713 = x41710 + x41712;
        Fp x41714 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x41715 = x41714 * x13;
        Fp x41716 = x41713 + x41715;
        Fp x41717 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x41718 = x41717 * x14;
        Fp x41719 = x41716 + x41718;
        Fp x41720 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x41721 = x41720 * x15;
        Fp x41722 = x41719 + x41721;
        Fp x41723 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x41724 = x41723 * x16;
        Fp x41725 = x41722 + x41724;
        Fp x41726 = x41635 - x41725;
        Fp x41727 = x41726 * x33;
        if (x41727 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:51");
        Fp x41728 = args[2][125 * steps + ((cycle - 0) & mask)];
        Fp x41729 = args[2][124 * steps + ((cycle - 0) & mask)];
        host_args[0] = x41728;
        host_args[1] = x41729;
        host_args[2] = x41725;
        host_args[3] = x41679;
        host_args[4] = x41620;
        host_args[5] = x41628;
        host(ctx, "log", "numer32 = %04x%04x, denom = %04x%04x, negNumer = %d, negDenom = %d", host_args.data(), 6, host_outs.data(), 0);
        {
          host_args[0] = x41729;
          host_args[1] = x41728;
          host_args[2] = x41679;
          host_args[3] = x41725;
          host(ctx, "divide32", "", host_args.data(), 4, host_outs.data(), 4);
          Fp x41730 = host_outs[0];
          Fp x41731 = host_outs[1];
          Fp x41732 = host_outs[2];
          Fp x41733 = host_outs[3];
          args[2][120 * steps + cycle] = x41730;
          args[2][121 * steps + cycle] = x41731;
          args[2][122 * steps + cycle] = x41732;
          args[2][123 * steps + cycle] = x41733;
        }
        Fp x41734 = args[2][121 * steps + ((cycle - 0) & mask)];
        Fp x41735 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x41736 = args[2][123 * steps + ((cycle - 0) & mask)];
        Fp x41737 = args[2][122 * steps + ((cycle - 0) & mask)];
        host_args[0] = x41734;
        host_args[1] = x41735;
        host_args[2] = x41736;
        host_args[3] = x41737;
        host(ctx, "log", "quot32 = %04x%04x, rem32 = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x41738 = Fp(x41735.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x41738;
          Fp x41739 = x41735 - x41738;
          Fp x41740 = x41739 * x10;
          Fp x41741 = Fp(x41740.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x41741;
          Fp x41742 = x41740 - x41741;
          Fp x41743 = x41742 * x10;
          Fp x41744 = Fp(x41743.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x41744;
          Fp x41745 = x41743 - x41744;
          Fp x41746 = x41745 * x10;
          Fp x41747 = Fp(x41746.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x41747;
          Fp x41748 = x41746 - x41747;
          Fp x41749 = x41748 * x10;
          Fp x41750 = Fp(x41749.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x41750;
          Fp x41751 = x41749 - x41750;
          Fp x41752 = x41751 * x10;
          Fp x41753 = Fp(x41752.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x41753;
          Fp x41754 = x41752 - x41753;
          Fp x41755 = x41754 * x10;
          Fp x41756 = Fp(x41755.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x41756;
          Fp x41757 = x41755 - x41756;
          Fp x41758 = x41757 * x10;
          Fp x41759 = Fp(x41758.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x41759;
        }
        Fp x41760 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x41761 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x41762 = x41761 * x3;
        Fp x41763 = x41760 + x41762;
        Fp x41764 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x41765 = x41764 * x11;
        Fp x41766 = x41763 + x41765;
        Fp x41767 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x41768 = x41767 * x12;
        Fp x41769 = x41766 + x41768;
        Fp x41770 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x41771 = x41770 * x13;
        Fp x41772 = x41769 + x41771;
        Fp x41773 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x41774 = x41773 * x14;
        Fp x41775 = x41772 + x41774;
        Fp x41776 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x41777 = x41776 * x15;
        Fp x41778 = x41775 + x41777;
        Fp x41779 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x41780 = x41779 * x16;
        Fp x41781 = x41778 + x41780;
        Fp x41782 = x41735 - x41781;
        Fp x41783 = x41782 * x33;
        if (x41783 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x41784 = Fp(x41734.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x41784;
          Fp x41785 = x41734 - x41784;
          Fp x41786 = x41785 * x10;
          Fp x41787 = Fp(x41786.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x41787;
          Fp x41788 = x41786 - x41787;
          Fp x41789 = x41788 * x10;
          Fp x41790 = Fp(x41789.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x41790;
          Fp x41791 = x41789 - x41790;
          Fp x41792 = x41791 * x10;
          Fp x41793 = Fp(x41792.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x41793;
          Fp x41794 = x41792 - x41793;
          Fp x41795 = x41794 * x10;
          Fp x41796 = Fp(x41795.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x41796;
          Fp x41797 = x41795 - x41796;
          Fp x41798 = x41797 * x10;
          Fp x41799 = Fp(x41798.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x41799;
          Fp x41800 = x41798 - x41799;
          Fp x41801 = x41800 * x10;
          Fp x41802 = Fp(x41801.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x41802;
          Fp x41803 = x41801 - x41802;
          Fp x41804 = x41803 * x10;
          Fp x41805 = Fp(x41804.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x41805;
        }
        Fp x41806 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x41807 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x41808 = x41807 * x3;
        Fp x41809 = x41806 + x41808;
        Fp x41810 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x41811 = x41810 * x11;
        Fp x41812 = x41809 + x41811;
        Fp x41813 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x41814 = x41813 * x12;
        Fp x41815 = x41812 + x41814;
        Fp x41816 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x41817 = x41816 * x13;
        Fp x41818 = x41815 + x41817;
        Fp x41819 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x41820 = x41819 * x14;
        Fp x41821 = x41818 + x41820;
        Fp x41822 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x41823 = x41822 * x15;
        Fp x41824 = x41821 + x41823;
        Fp x41825 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x41826 = x41825 * x16;
        Fp x41827 = x41824 + x41826;
        Fp x41828 = x41734 - x41827;
        Fp x41829 = x41828 * x33;
        if (x41829 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x41830 = Fp(x41737.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x41830;
          Fp x41831 = x41737 - x41830;
          Fp x41832 = x41831 * x10;
          Fp x41833 = Fp(x41832.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x41833;
          Fp x41834 = x41832 - x41833;
          Fp x41835 = x41834 * x10;
          Fp x41836 = Fp(x41835.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x41836;
          Fp x41837 = x41835 - x41836;
          Fp x41838 = x41837 * x10;
          Fp x41839 = Fp(x41838.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x41839;
          Fp x41840 = x41838 - x41839;
          Fp x41841 = x41840 * x10;
          Fp x41842 = Fp(x41841.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x41842;
          Fp x41843 = x41841 - x41842;
          Fp x41844 = x41843 * x10;
          Fp x41845 = Fp(x41844.asUInt32() & x2.asUInt32());
          args[2][37 * steps + cycle] = x41845;
          Fp x41846 = x41844 - x41845;
          Fp x41847 = x41846 * x10;
          Fp x41848 = Fp(x41847.asUInt32() & x2.asUInt32());
          args[2][38 * steps + cycle] = x41848;
          Fp x41849 = x41847 - x41848;
          Fp x41850 = x41849 * x10;
          Fp x41851 = Fp(x41850.asUInt32() & x2.asUInt32());
          args[2][39 * steps + cycle] = x41851;
        }
        Fp x41852 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x41853 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x41854 = x41853 * x3;
        Fp x41855 = x41852 + x41854;
        Fp x41856 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x41857 = x41856 * x11;
        Fp x41858 = x41855 + x41857;
        Fp x41859 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x41860 = x41859 * x12;
        Fp x41861 = x41858 + x41860;
        Fp x41862 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x41863 = x41862 * x13;
        Fp x41864 = x41861 + x41863;
        Fp x41865 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x41866 = x41865 * x14;
        Fp x41867 = x41864 + x41866;
        Fp x41868 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x41869 = x41868 * x15;
        Fp x41870 = x41867 + x41869;
        Fp x41871 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x41872 = x41871 * x16;
        Fp x41873 = x41870 + x41872;
        Fp x41874 = x41737 - x41873;
        Fp x41875 = x41874 * x33;
        if (x41875 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        {
          Fp x41876 = Fp(x41736.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x41876;
          Fp x41877 = x41736 - x41876;
          Fp x41878 = x41877 * x10;
          Fp x41879 = Fp(x41878.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x41879;
          Fp x41880 = x41878 - x41879;
          Fp x41881 = x41880 * x10;
          Fp x41882 = Fp(x41881.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x41882;
          Fp x41883 = x41881 - x41882;
          Fp x41884 = x41883 * x10;
          Fp x41885 = Fp(x41884.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x41885;
          Fp x41886 = x41884 - x41885;
          Fp x41887 = x41886 * x10;
          Fp x41888 = Fp(x41887.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x41888;
          Fp x41889 = x41887 - x41888;
          Fp x41890 = x41889 * x10;
          Fp x41891 = Fp(x41890.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x41891;
          Fp x41892 = x41890 - x41891;
          Fp x41893 = x41892 * x10;
          Fp x41894 = Fp(x41893.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x41894;
          Fp x41895 = x41893 - x41894;
          Fp x41896 = x41895 * x10;
          Fp x41897 = Fp(x41896.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x41897;
        }
        Fp x41898 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x41899 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x41900 = x41899 * x3;
        Fp x41901 = x41898 + x41900;
        Fp x41902 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x41903 = x41902 * x11;
        Fp x41904 = x41901 + x41903;
        Fp x41905 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x41906 = x41905 * x12;
        Fp x41907 = x41904 + x41906;
        Fp x41908 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x41909 = x41908 * x13;
        Fp x41910 = x41907 + x41909;
        Fp x41911 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x41912 = x41911 * x14;
        Fp x41913 = x41910 + x41912;
        Fp x41914 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x41915 = x41914 * x15;
        Fp x41916 = x41913 + x41915;
        Fp x41917 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x41918 = x41917 * x16;
        Fp x41919 = x41916 + x41918;
        Fp x41920 = x41736 - x41919;
        Fp x41921 = x41920 * x33;
        if (x41921 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        if (x41558 != 0) {
          Fp x41922 = x41679 + x17;
          Fp x41923 = x41922 - x41873;
          Fp x41924 = x41923 - x71;
          {
            Fp x41925 = Fp(x41924.asUInt32() & x2.asUInt32());
            args[2][48 * steps + cycle] = x41925;
            Fp x41926 = x41924 - x41925;
            Fp x41927 = x41926 * x10;
            Fp x41928 = Fp(x41927.asUInt32() & x2.asUInt32());
            args[2][49 * steps + cycle] = x41928;
            Fp x41929 = x41927 - x41928;
            Fp x41930 = x41929 * x10;
            Fp x41931 = Fp(x41930.asUInt32() & x2.asUInt32());
            args[2][50 * steps + cycle] = x41931;
            Fp x41932 = x41930 - x41931;
            Fp x41933 = x41932 * x10;
            Fp x41934 = Fp(x41933.asUInt32() & x2.asUInt32());
            args[2][51 * steps + cycle] = x41934;
            Fp x41935 = x41933 - x41934;
            Fp x41936 = x41935 * x10;
            Fp x41937 = Fp(x41936.asUInt32() & x2.asUInt32());
            args[2][52 * steps + cycle] = x41937;
            Fp x41938 = x41936 - x41937;
            Fp x41939 = x41938 * x10;
            Fp x41940 = Fp(x41939.asUInt32() & x2.asUInt32());
            args[2][53 * steps + cycle] = x41940;
            Fp x41941 = x41939 - x41940;
            Fp x41942 = x41941 * x10;
            Fp x41943 = Fp(x41942.asUInt32() & x2.asUInt32());
            args[2][54 * steps + cycle] = x41943;
            Fp x41944 = x41942 - x41943;
            Fp x41945 = x41944 * x10;
            Fp x41946 = Fp(x41945.asUInt32() & x2.asUInt32());
            args[2][55 * steps + cycle] = x41946;
          }
          Fp x41947 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x41948 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x41949 = x41948 * x3;
          Fp x41950 = x41947 + x41949;
          Fp x41951 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x41952 = x41951 * x11;
          Fp x41953 = x41950 + x41952;
          Fp x41954 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x41955 = x41954 * x12;
          Fp x41956 = x41953 + x41955;
          Fp x41957 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x41958 = x41957 * x13;
          Fp x41959 = x41956 + x41958;
          Fp x41960 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x41961 = x41960 * x14;
          Fp x41962 = x41959 + x41961;
          Fp x41963 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x41964 = x41963 * x15;
          Fp x41965 = x41962 + x41964;
          Fp x41966 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x41967 = x41966 * x16;
          Fp x41968 = x41965 + x41967;
          Fp x41969 = x41924 - x41968;
          Fp x41970 = x41969 * x33;
          args[2][93 * steps + cycle] = x41970;
          Fp x41971 = x41725 - x41919;
          Fp x41972 = x41971 - x71;
          Fp x41973 = args[2][93 * steps + ((cycle - 0) & mask)];
          Fp x41974 = x41972 + x41973;
          {
            Fp x41975 = Fp(x41974.asUInt32() & x2.asUInt32());
            args[2][56 * steps + cycle] = x41975;
            Fp x41976 = x41974 - x41975;
            Fp x41977 = x41976 * x10;
            Fp x41978 = Fp(x41977.asUInt32() & x2.asUInt32());
            args[2][57 * steps + cycle] = x41978;
            Fp x41979 = x41977 - x41978;
            Fp x41980 = x41979 * x10;
            Fp x41981 = Fp(x41980.asUInt32() & x2.asUInt32());
            args[2][58 * steps + cycle] = x41981;
            Fp x41982 = x41980 - x41981;
            Fp x41983 = x41982 * x10;
            Fp x41984 = Fp(x41983.asUInt32() & x2.asUInt32());
            args[2][59 * steps + cycle] = x41984;
            Fp x41985 = x41983 - x41984;
            Fp x41986 = x41985 * x10;
            Fp x41987 = Fp(x41986.asUInt32() & x2.asUInt32());
            args[2][60 * steps + cycle] = x41987;
            Fp x41988 = x41986 - x41987;
            Fp x41989 = x41988 * x10;
            Fp x41990 = Fp(x41989.asUInt32() & x2.asUInt32());
            args[2][61 * steps + cycle] = x41990;
            Fp x41991 = x41989 - x41990;
            Fp x41992 = x41991 * x10;
            Fp x41993 = Fp(x41992.asUInt32() & x2.asUInt32());
            args[2][62 * steps + cycle] = x41993;
            Fp x41994 = x41992 - x41993;
            Fp x41995 = x41994 * x10;
            Fp x41996 = Fp(x41995.asUInt32() & x2.asUInt32());
            args[2][63 * steps + cycle] = x41996;
          }
          Fp x41997 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x41998 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x41999 = x41998 * x3;
          Fp x42000 = x41997 + x41999;
          Fp x42001 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x42002 = x42001 * x11;
          Fp x42003 = x42000 + x42002;
          Fp x42004 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x42005 = x42004 * x12;
          Fp x42006 = x42003 + x42005;
          Fp x42007 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x42008 = x42007 * x13;
          Fp x42009 = x42006 + x42008;
          Fp x42010 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x42011 = x42010 * x14;
          Fp x42012 = x42009 + x42011;
          Fp x42013 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x42014 = x42013 * x15;
          Fp x42015 = x42012 + x42014;
          Fp x42016 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x42017 = x42016 * x16;
          Fp x42018 = x42015 + x42017;
          Fp x42019 = x41974 - x42018;
          Fp x42020 = x42019 * x33;
          if (x42020 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:91");
        }
        Fp x42021 = x41775 * x41673;
        Fp x42022 = x42021 + x41867;
        {
          Fp x42023 = Fp(x42022.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x42023;
          Fp x42024 = x42022 - x42023;
          Fp x42025 = x42024 * x10;
          Fp x42026 = Fp(x42025.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x42026;
          Fp x42027 = x42025 - x42026;
          Fp x42028 = x42027 * x10;
          Fp x42029 = Fp(x42028.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x42029;
          Fp x42030 = x42028 - x42029;
          Fp x42031 = x42030 * x10;
          Fp x42032 = Fp(x42031.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x42032;
          Fp x42033 = x42031 - x42032;
          Fp x42034 = x42033 * x10;
          Fp x42035 = Fp(x42034.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x42035;
          Fp x42036 = x42034 - x42035;
          Fp x42037 = x42036 * x10;
          Fp x42038 = Fp(x42037.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x42038;
          Fp x42039 = x42037 - x42038;
          Fp x42040 = x42039 * x10;
          Fp x42041 = Fp(x42040.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x42041;
          Fp x42042 = x42040 - x42041;
          Fp x42043 = x42042 * x10;
          Fp x42044 = Fp(x42043.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x42044;
          Fp x42045 = x42043 - x42044;
          Fp x42046 = x42045 * x10;
          Fp x42047 = Fp(x42046.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x42047;
          Fp x42048 = x42046 - x42047;
          Fp x42049 = x42048 * x10;
          Fp x42050 = Fp(x42049.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x42050;
          Fp x42051 = x42049 - x42050;
          Fp x42052 = x42051 * x10;
          Fp x42053 = Fp(x42052.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x42053;
          Fp x42054 = x42052 - x42053;
          Fp x42055 = x42054 * x10;
          Fp x42056 = Fp(x42055.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x42056;
        }
        Fp x42057 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x42058 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x42059 = x42058 * x3;
        Fp x42060 = x42057 + x42059;
        Fp x42061 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x42062 = x42061 * x11;
        Fp x42063 = x42060 + x42062;
        Fp x42064 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x42065 = x42064 * x12;
        Fp x42066 = x42063 + x42065;
        Fp x42067 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x42068 = x42067 * x13;
        Fp x42069 = x42066 + x42068;
        Fp x42070 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x42071 = x42070 * x14;
        Fp x42072 = x42069 + x42071;
        Fp x42073 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x42074 = x42073 * x15;
        Fp x42075 = x42072 + x42074;
        Fp x42076 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x42077 = x42076 * x16;
        Fp x42078 = x42075 + x42077;
        Fp x42079 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x42080 = x42079 * x17;
        Fp x42081 = x42078 + x42080;
        Fp x42082 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x42083 = x42082 * x18;
        Fp x42084 = x42081 + x42083;
        Fp x42085 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x42086 = x42085 * x19;
        Fp x42087 = x42084 + x42086;
        Fp x42088 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x42089 = x42088 * x20;
        Fp x42090 = x42087 + x42089;
        Fp x42091 = x42022 - x42090;
        Fp x42092 = x42091 * x62;
        if (x42092 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:94");
        Fp x42093 = x41677 * x3;
        Fp x42094 = x41674 + x42093;
        Fp x42095 = x41704 * x11;
        Fp x42096 = x42094 + x42095;
        Fp x42097 = x41705 * x12;
        Fp x42098 = x42096 + x42097;
        Fp x42099 = x41708 * x13;
        Fp x42100 = x42098 + x42099;
        Fp x42101 = x41711 * x14;
        Fp x42102 = x42100 + x42101;
        Fp x42103 = x41775 * x42102;
        Fp x42104 = x41779 * x3;
        Fp x42105 = x41776 + x42104;
        Fp x42106 = x41806 * x11;
        Fp x42107 = x42105 + x42106;
        Fp x42108 = x41807 * x12;
        Fp x42109 = x42107 + x42108;
        Fp x42110 = x41810 * x13;
        Fp x42111 = x42109 + x42110;
        Fp x42112 = x41813 * x14;
        Fp x42113 = x42111 + x42112;
        Fp x42114 = x42113 * x41673;
        Fp x42115 = x42103 + x42114;
        Fp x42116 = x41871 * x3;
        Fp x42117 = x41868 + x42116;
        Fp x42118 = x41898 * x11;
        Fp x42119 = x42117 + x42118;
        Fp x42120 = x41899 * x12;
        Fp x42121 = x42119 + x42120;
        Fp x42122 = x41902 * x13;
        Fp x42123 = x42121 + x42122;
        Fp x42124 = x41905 * x14;
        Fp x42125 = x42123 + x42124;
        Fp x42126 = x42115 + x42125;
        Fp x42127 = x42076 * x3;
        Fp x42128 = x42073 + x42127;
        Fp x42129 = x42079 * x11;
        Fp x42130 = x42128 + x42129;
        Fp x42131 = x42082 * x12;
        Fp x42132 = x42130 + x42131;
        Fp x42133 = x42085 * x13;
        Fp x42134 = x42132 + x42133;
        Fp x42135 = x42088 * x14;
        Fp x42136 = x42134 + x42135;
        Fp x42137 = x42126 + x42136;
        {
          Fp x42138 = Fp(x42137.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x42138;
          Fp x42139 = x42137 - x42138;
          Fp x42140 = x42139 * x10;
          Fp x42141 = Fp(x42140.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x42141;
          Fp x42142 = x42140 - x42141;
          Fp x42143 = x42142 * x10;
          Fp x42144 = Fp(x42143.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x42144;
          Fp x42145 = x42143 - x42144;
          Fp x42146 = x42145 * x10;
          Fp x42147 = Fp(x42146.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x42147;
          Fp x42148 = x42146 - x42147;
          Fp x42149 = x42148 * x10;
          Fp x42150 = Fp(x42149.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x42150;
          Fp x42151 = x42149 - x42150;
          Fp x42152 = x42151 * x10;
          Fp x42153 = Fp(x42152.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x42153;
          Fp x42154 = x42152 - x42153;
          Fp x42155 = x42154 * x10;
          Fp x42156 = Fp(x42155.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x42156;
          Fp x42157 = x42155 - x42156;
          Fp x42158 = x42157 * x10;
          Fp x42159 = Fp(x42158.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x42159;
          Fp x42160 = x42158 - x42159;
          Fp x42161 = x42160 * x10;
          Fp x42162 = Fp(x42161.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x42162;
          Fp x42163 = x42161 - x42162;
          Fp x42164 = x42163 * x10;
          Fp x42165 = Fp(x42164.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x42165;
        }
        Fp x42166 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x42167 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x42168 = x42167 * x3;
        Fp x42169 = x42166 + x42168;
        Fp x42170 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x42171 = x42170 * x11;
        Fp x42172 = x42169 + x42171;
        Fp x42173 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x42174 = x42173 * x12;
        Fp x42175 = x42172 + x42174;
        Fp x42176 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x42177 = x42176 * x13;
        Fp x42178 = x42175 + x42177;
        Fp x42179 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x42180 = x42179 * x14;
        Fp x42181 = x42178 + x42180;
        Fp x42182 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x42183 = x42182 * x15;
        Fp x42184 = x42181 + x42183;
        Fp x42185 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x42186 = x42185 * x16;
        Fp x42187 = x42184 + x42186;
        Fp x42188 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x42189 = x42188 * x17;
        Fp x42190 = x42187 + x42189;
        Fp x42191 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x42192 = x42191 * x18;
        Fp x42193 = x42190 + x42192;
        Fp x42194 = x42137 - x42193;
        Fp x42195 = x42194 * x66;
        if (x42195 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:95");
        Fp x42196 = x41717 * x3;
        Fp x42197 = x41714 + x42196;
        Fp x42198 = x41720 * x11;
        Fp x42199 = x42197 + x42198;
        Fp x42200 = x41723 * x12;
        Fp x42201 = x42199 + x42200;
        Fp x42202 = x41775 * x42201;
        Fp x42203 = x42113 * x42102;
        Fp x42204 = x42202 + x42203;
        Fp x42205 = x41819 * x3;
        Fp x42206 = x41816 + x42205;
        Fp x42207 = x41822 * x11;
        Fp x42208 = x42206 + x42207;
        Fp x42209 = x41825 * x12;
        Fp x42210 = x42208 + x42209;
        Fp x42211 = x42210 * x41673;
        Fp x42212 = x42204 + x42211;
        Fp x42213 = x41911 * x3;
        Fp x42214 = x41908 + x42213;
        Fp x42215 = x41914 * x11;
        Fp x42216 = x42214 + x42215;
        Fp x42217 = x41917 * x12;
        Fp x42218 = x42216 + x42217;
        Fp x42219 = x42212 + x42218;
        Fp x42220 = x42185 * x3;
        Fp x42221 = x42182 + x42220;
        Fp x42222 = x42188 * x11;
        Fp x42223 = x42221 + x42222;
        Fp x42224 = x42191 * x12;
        Fp x42225 = x42223 + x42224;
        Fp x42226 = x42219 + x42225;
        {
          Fp x42227 = Fp(x42226.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x42227;
          Fp x42228 = x42226 - x42227;
          Fp x42229 = x42228 * x10;
          Fp x42230 = Fp(x42229.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x42230;
          Fp x42231 = x42229 - x42230;
          Fp x42232 = x42231 * x10;
          Fp x42233 = Fp(x42232.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x42233;
          Fp x42234 = x42232 - x42233;
          Fp x42235 = x42234 * x10;
          Fp x42236 = Fp(x42235.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x42236;
        }
        Fp x42237 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x42238 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x42239 = x42238 * x3;
        Fp x42240 = x42237 + x42239;
        Fp x42241 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x42242 = x42241 * x11;
        Fp x42243 = x42240 + x42242;
        Fp x42244 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x42245 = x42244 * x12;
        Fp x42246 = x42243 + x42245;
        Fp x42247 = x42226 - x42246;
        Fp x42248 = x42247 * x67;
        if (x42248 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:100");
        host_args[0] = x42090;
        host_args[1] = x42193;
        host_args[2] = x42246;
        host(ctx, "log", "numer0=0x%06x, numer1=0x%05x, numer2=0x%02x", host_args.data(), 3, host_outs.data(), 0);
        Fp x42249 = x42169 * x15;
        Fp x42250 = x42072 + x42249;
        Fp x42251 = x42250 - x41729;
        if (x42251 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:108");
        Fp x42252 = x42173 * x3;
        Fp x42253 = x42170 + x42252;
        Fp x42254 = x42176 * x11;
        Fp x42255 = x42253 + x42254;
        Fp x42256 = x42179 * x12;
        Fp x42257 = x42255 + x42256;
        Fp x42258 = x42246 * x13;
        Fp x42259 = x42257 + x42258;
        Fp x42260 = x42259 - x41728;
        if (x42260 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:109");
        Fp x42261 = x41620 + x41628;
        Fp x42262 = x41620 * x1;
        Fp x42263 = x42262 * x41628;
        Fp x42264 = x42261 - x42263;
        Fp x42265 = x41620 * x41560;
        Fp x42266 = x42264 - x42265;
        args[2][92 * steps + cycle] = x42266;
        Fp x42267 = x17 - x41735;
        Fp x42268 = x42267 - x17;
        {
          Fp x42269 = (x42268 == 0) ? Fp(1) : Fp(0);
          Fp x42270 = x71 - x42269;
          args[2][98 * steps + cycle] = x42270;
          Fp x42271 = inv(x42268);
          args[2][114 * steps + cycle] = x42271;
        }
        Fp x42272 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x42273 = x42268 * x42272;
        Fp x42274 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x42275 = x42273 - x42274;
        if (x42275 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42276 = x71 - x42274;
        Fp x42277 = x42276 * x42268;
        if (x42277 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x42278 = x42274 * x42267;
        Fp x42279 = x17 - x42274;
        Fp x42280 = x42279 - x41734;
        Fp x42281 = x42280 - x17;
        {
          Fp x42282 = (x42281 == 0) ? Fp(1) : Fp(0);
          Fp x42283 = x71 - x42282;
          args[2][99 * steps + cycle] = x42283;
          Fp x42284 = inv(x42281);
          args[2][115 * steps + cycle] = x42284;
        }
        Fp x42285 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x42286 = x42281 * x42285;
        Fp x42287 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x42288 = x42286 - x42287;
        if (x42288 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42289 = x71 - x42287;
        Fp x42290 = x42289 * x42281;
        if (x42290 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x42291 = x42287 * x42280;
        args[2][116 * steps + cycle] = x42278;
        args[2][117 * steps + cycle] = x42291;
        Fp x42292 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x42293 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x42294 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x42295 = x42294 * x42292;
        Fp x42296 = x42294 * x42293;
        Fp x42297 = x71 - x42294;
        Fp x42298 = x42297 * x41735;
        Fp x42299 = x42297 * x41734;
        Fp x42300 = x42295 + x42298;
        Fp x42301 = x42296 + x42299;
        args[2][100 * steps + cycle] = x42300;
        args[2][101 * steps + cycle] = x42301;
      }
      Fp x42302 = args[2][75 * steps + ((cycle - 1) & mask)];
      if (x42302 != 0) {
        Fp x42303 = x41457 + x41458;
        {
          Fp x42304 = (x42303 == 0) ? Fp(1) : Fp(0);
          Fp x42305 = x71 - x42304;
          args[2][118 * steps + cycle] = x42305;
          Fp x42306 = inv(x42303);
          args[2][119 * steps + cycle] = x42306;
        }
        Fp x42307 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x42308 = x42303 * x42307;
        Fp x42309 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x42310 = x42308 - x42309;
        if (x42310 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42311 = x71 - x42309;
        Fp x42312 = x42311 * x42303;
        if (x42312 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        args[2][124 * steps + cycle] = x41455;
        args[2][125 * steps + cycle] = x41456;
        {
          Fp x42313 = Fp(x41457.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x42313;
          Fp x42314 = x41457 - x42313;
          Fp x42315 = x42314 * x10;
          Fp x42316 = Fp(x42315.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x42316;
          Fp x42317 = x42315 - x42316;
          Fp x42318 = x42317 * x10;
          Fp x42319 = Fp(x42318.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x42319;
          Fp x42320 = x42318 - x42319;
          Fp x42321 = x42320 * x10;
          Fp x42322 = Fp(x42321.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x42322;
          Fp x42323 = x42321 - x42322;
          Fp x42324 = x42323 * x10;
          Fp x42325 = Fp(x42324.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x42325;
          Fp x42326 = x42324 - x42325;
          Fp x42327 = x42326 * x10;
          Fp x42328 = Fp(x42327.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x42328;
          Fp x42329 = x42327 - x42328;
          Fp x42330 = x42329 * x10;
          Fp x42331 = Fp(x42330.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x42331;
          Fp x42332 = x42330 - x42331;
          Fp x42333 = x42332 * x10;
          Fp x42334 = Fp(x42333.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x42334;
        }
        Fp x42335 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x42336 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x42337 = x42336 * x3;
        Fp x42338 = x42335 + x42337;
        Fp x42339 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x42340 = x42339 * x11;
        Fp x42341 = x42338 + x42340;
        Fp x42342 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x42343 = x42342 * x12;
        Fp x42344 = x42341 + x42343;
        Fp x42345 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x42346 = x42345 * x13;
        Fp x42347 = x42344 + x42346;
        Fp x42348 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x42349 = x42348 * x14;
        Fp x42350 = x42347 + x42349;
        Fp x42351 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x42352 = x42351 * x15;
        Fp x42353 = x42350 + x42352;
        Fp x42354 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x42355 = x42354 * x16;
        Fp x42356 = x42353 + x42355;
        Fp x42357 = x41457 - x42356;
        Fp x42358 = x42357 * x33;
        if (x42358 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:37");
        {
          Fp x42359 = Fp(x41458.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x42359;
          Fp x42360 = x41458 - x42359;
          Fp x42361 = x42360 * x10;
          Fp x42362 = Fp(x42361.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x42362;
          Fp x42363 = x42361 - x42362;
          Fp x42364 = x42363 * x10;
          Fp x42365 = Fp(x42364.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x42365;
          Fp x42366 = x42364 - x42365;
          Fp x42367 = x42366 * x10;
          Fp x42368 = Fp(x42367.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x42368;
          Fp x42369 = x42367 - x42368;
          Fp x42370 = x42369 * x10;
          Fp x42371 = Fp(x42370.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x42371;
          Fp x42372 = x42370 - x42371;
          Fp x42373 = x42372 * x10;
          Fp x42374 = Fp(x42373.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x42374;
          Fp x42375 = x42373 - x42374;
          Fp x42376 = x42375 * x10;
          Fp x42377 = Fp(x42376.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x42377;
          Fp x42378 = x42376 - x42377;
          Fp x42379 = x42378 * x10;
          Fp x42380 = Fp(x42379.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x42380;
        }
        Fp x42381 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x42382 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x42383 = x42382 * x3;
        Fp x42384 = x42381 + x42383;
        Fp x42385 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x42386 = x42385 * x11;
        Fp x42387 = x42384 + x42386;
        Fp x42388 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x42389 = x42388 * x12;
        Fp x42390 = x42387 + x42389;
        Fp x42391 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x42392 = x42391 * x13;
        Fp x42393 = x42390 + x42392;
        Fp x42394 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x42395 = x42394 * x14;
        Fp x42396 = x42393 + x42395;
        Fp x42397 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x42398 = x42397 * x15;
        Fp x42399 = x42396 + x42398;
        Fp x42400 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x42401 = x42400 * x16;
        Fp x42402 = x42399 + x42401;
        Fp x42403 = x41458 - x42402;
        Fp x42404 = x42403 * x33;
        if (x42404 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:37");
        args[2][90 * steps + cycle] = x70;
        args[2][91 * steps + cycle] = x70;
        {
          args[2][94 * steps + cycle] = x70;
          args[2][106 * steps + cycle] = x70;
        }
        Fp x42405 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x42406 = x70 - x42405;
        if (x42406 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42407 = x42405 * x17;
        Fp x42408 = x17 - x42405;
        Fp x42409 = x42408 - x17;
        {
          Fp x42410 = (x42409 == 0) ? Fp(1) : Fp(0);
          Fp x42411 = x71 - x42410;
          args[2][95 * steps + cycle] = x42411;
          Fp x42412 = inv(x42409);
          args[2][107 * steps + cycle] = x42412;
        }
        Fp x42413 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x42414 = x42409 * x42413;
        Fp x42415 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x42416 = x42414 - x42415;
        if (x42416 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42417 = x71 - x42415;
        Fp x42418 = x42417 * x42409;
        if (x42418 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x42419 = x42415 * x42408;
        args[2][108 * steps + cycle] = x42407;
        args[2][109 * steps + cycle] = x42419;
        {
          args[2][96 * steps + cycle] = x70;
          args[2][110 * steps + cycle] = x70;
        }
        Fp x42420 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x42421 = x70 - x42420;
        if (x42421 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42422 = x42420 * x17;
        Fp x42423 = x17 - x42420;
        Fp x42424 = x42423 - x17;
        {
          Fp x42425 = (x42424 == 0) ? Fp(1) : Fp(0);
          Fp x42426 = x71 - x42425;
          args[2][97 * steps + cycle] = x42426;
          Fp x42427 = inv(x42424);
          args[2][111 * steps + cycle] = x42427;
        }
        Fp x42428 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x42429 = x42424 * x42428;
        Fp x42430 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x42431 = x42429 - x42430;
        if (x42431 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42432 = x71 - x42430;
        Fp x42433 = x42432 * x42424;
        if (x42433 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x42434 = x42430 * x42423;
        args[2][112 * steps + cycle] = x42422;
        args[2][113 * steps + cycle] = x42434;
        Fp x42435 = args[2][125 * steps + ((cycle - 0) & mask)];
        Fp x42436 = args[2][124 * steps + ((cycle - 0) & mask)];
        Fp x42437 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x42438 = args[2][91 * steps + ((cycle - 0) & mask)];
        host_args[0] = x42435;
        host_args[1] = x42436;
        host_args[2] = x42402;
        host_args[3] = x42356;
        host_args[4] = x42437;
        host_args[5] = x42438;
        host(ctx, "log", "numer32 = %04x%04x, denom = %04x%04x, negNumer = %d, negDenom = %d", host_args.data(), 6, host_outs.data(), 0);
        {
          host_args[0] = x42436;
          host_args[1] = x42435;
          host_args[2] = x42356;
          host_args[3] = x42402;
          host(ctx, "divide32", "", host_args.data(), 4, host_outs.data(), 4);
          Fp x42439 = host_outs[0];
          Fp x42440 = host_outs[1];
          Fp x42441 = host_outs[2];
          Fp x42442 = host_outs[3];
          args[2][120 * steps + cycle] = x42439;
          args[2][121 * steps + cycle] = x42440;
          args[2][122 * steps + cycle] = x42441;
          args[2][123 * steps + cycle] = x42442;
        }
        Fp x42443 = args[2][121 * steps + ((cycle - 0) & mask)];
        Fp x42444 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x42445 = args[2][123 * steps + ((cycle - 0) & mask)];
        Fp x42446 = args[2][122 * steps + ((cycle - 0) & mask)];
        host_args[0] = x42443;
        host_args[1] = x42444;
        host_args[2] = x42445;
        host_args[3] = x42446;
        host(ctx, "log", "quot32 = %04x%04x, rem32 = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x42447 = Fp(x42444.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x42447;
          Fp x42448 = x42444 - x42447;
          Fp x42449 = x42448 * x10;
          Fp x42450 = Fp(x42449.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x42450;
          Fp x42451 = x42449 - x42450;
          Fp x42452 = x42451 * x10;
          Fp x42453 = Fp(x42452.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x42453;
          Fp x42454 = x42452 - x42453;
          Fp x42455 = x42454 * x10;
          Fp x42456 = Fp(x42455.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x42456;
          Fp x42457 = x42455 - x42456;
          Fp x42458 = x42457 * x10;
          Fp x42459 = Fp(x42458.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x42459;
          Fp x42460 = x42458 - x42459;
          Fp x42461 = x42460 * x10;
          Fp x42462 = Fp(x42461.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x42462;
          Fp x42463 = x42461 - x42462;
          Fp x42464 = x42463 * x10;
          Fp x42465 = Fp(x42464.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x42465;
          Fp x42466 = x42464 - x42465;
          Fp x42467 = x42466 * x10;
          Fp x42468 = Fp(x42467.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x42468;
        }
        Fp x42469 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x42470 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x42471 = x42470 * x3;
        Fp x42472 = x42469 + x42471;
        Fp x42473 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x42474 = x42473 * x11;
        Fp x42475 = x42472 + x42474;
        Fp x42476 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x42477 = x42476 * x12;
        Fp x42478 = x42475 + x42477;
        Fp x42479 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x42480 = x42479 * x13;
        Fp x42481 = x42478 + x42480;
        Fp x42482 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x42483 = x42482 * x14;
        Fp x42484 = x42481 + x42483;
        Fp x42485 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x42486 = x42485 * x15;
        Fp x42487 = x42484 + x42486;
        Fp x42488 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x42489 = x42488 * x16;
        Fp x42490 = x42487 + x42489;
        Fp x42491 = x42444 - x42490;
        Fp x42492 = x42491 * x33;
        if (x42492 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x42493 = Fp(x42443.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x42493;
          Fp x42494 = x42443 - x42493;
          Fp x42495 = x42494 * x10;
          Fp x42496 = Fp(x42495.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x42496;
          Fp x42497 = x42495 - x42496;
          Fp x42498 = x42497 * x10;
          Fp x42499 = Fp(x42498.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x42499;
          Fp x42500 = x42498 - x42499;
          Fp x42501 = x42500 * x10;
          Fp x42502 = Fp(x42501.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x42502;
          Fp x42503 = x42501 - x42502;
          Fp x42504 = x42503 * x10;
          Fp x42505 = Fp(x42504.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x42505;
          Fp x42506 = x42504 - x42505;
          Fp x42507 = x42506 * x10;
          Fp x42508 = Fp(x42507.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x42508;
          Fp x42509 = x42507 - x42508;
          Fp x42510 = x42509 * x10;
          Fp x42511 = Fp(x42510.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x42511;
          Fp x42512 = x42510 - x42511;
          Fp x42513 = x42512 * x10;
          Fp x42514 = Fp(x42513.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x42514;
        }
        Fp x42515 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x42516 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x42517 = x42516 * x3;
        Fp x42518 = x42515 + x42517;
        Fp x42519 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x42520 = x42519 * x11;
        Fp x42521 = x42518 + x42520;
        Fp x42522 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x42523 = x42522 * x12;
        Fp x42524 = x42521 + x42523;
        Fp x42525 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x42526 = x42525 * x13;
        Fp x42527 = x42524 + x42526;
        Fp x42528 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x42529 = x42528 * x14;
        Fp x42530 = x42527 + x42529;
        Fp x42531 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x42532 = x42531 * x15;
        Fp x42533 = x42530 + x42532;
        Fp x42534 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x42535 = x42534 * x16;
        Fp x42536 = x42533 + x42535;
        Fp x42537 = x42443 - x42536;
        Fp x42538 = x42537 * x33;
        if (x42538 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x42539 = Fp(x42446.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x42539;
          Fp x42540 = x42446 - x42539;
          Fp x42541 = x42540 * x10;
          Fp x42542 = Fp(x42541.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x42542;
          Fp x42543 = x42541 - x42542;
          Fp x42544 = x42543 * x10;
          Fp x42545 = Fp(x42544.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x42545;
          Fp x42546 = x42544 - x42545;
          Fp x42547 = x42546 * x10;
          Fp x42548 = Fp(x42547.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x42548;
          Fp x42549 = x42547 - x42548;
          Fp x42550 = x42549 * x10;
          Fp x42551 = Fp(x42550.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x42551;
          Fp x42552 = x42550 - x42551;
          Fp x42553 = x42552 * x10;
          Fp x42554 = Fp(x42553.asUInt32() & x2.asUInt32());
          args[2][37 * steps + cycle] = x42554;
          Fp x42555 = x42553 - x42554;
          Fp x42556 = x42555 * x10;
          Fp x42557 = Fp(x42556.asUInt32() & x2.asUInt32());
          args[2][38 * steps + cycle] = x42557;
          Fp x42558 = x42556 - x42557;
          Fp x42559 = x42558 * x10;
          Fp x42560 = Fp(x42559.asUInt32() & x2.asUInt32());
          args[2][39 * steps + cycle] = x42560;
        }
        Fp x42561 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x42562 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x42563 = x42562 * x3;
        Fp x42564 = x42561 + x42563;
        Fp x42565 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x42566 = x42565 * x11;
        Fp x42567 = x42564 + x42566;
        Fp x42568 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x42569 = x42568 * x12;
        Fp x42570 = x42567 + x42569;
        Fp x42571 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x42572 = x42571 * x13;
        Fp x42573 = x42570 + x42572;
        Fp x42574 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x42575 = x42574 * x14;
        Fp x42576 = x42573 + x42575;
        Fp x42577 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x42578 = x42577 * x15;
        Fp x42579 = x42576 + x42578;
        Fp x42580 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x42581 = x42580 * x16;
        Fp x42582 = x42579 + x42581;
        Fp x42583 = x42446 - x42582;
        Fp x42584 = x42583 * x33;
        if (x42584 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        {
          Fp x42585 = Fp(x42445.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x42585;
          Fp x42586 = x42445 - x42585;
          Fp x42587 = x42586 * x10;
          Fp x42588 = Fp(x42587.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x42588;
          Fp x42589 = x42587 - x42588;
          Fp x42590 = x42589 * x10;
          Fp x42591 = Fp(x42590.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x42591;
          Fp x42592 = x42590 - x42591;
          Fp x42593 = x42592 * x10;
          Fp x42594 = Fp(x42593.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x42594;
          Fp x42595 = x42593 - x42594;
          Fp x42596 = x42595 * x10;
          Fp x42597 = Fp(x42596.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x42597;
          Fp x42598 = x42596 - x42597;
          Fp x42599 = x42598 * x10;
          Fp x42600 = Fp(x42599.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x42600;
          Fp x42601 = x42599 - x42600;
          Fp x42602 = x42601 * x10;
          Fp x42603 = Fp(x42602.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x42603;
          Fp x42604 = x42602 - x42603;
          Fp x42605 = x42604 * x10;
          Fp x42606 = Fp(x42605.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x42606;
        }
        Fp x42607 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x42608 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x42609 = x42608 * x3;
        Fp x42610 = x42607 + x42609;
        Fp x42611 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x42612 = x42611 * x11;
        Fp x42613 = x42610 + x42612;
        Fp x42614 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x42615 = x42614 * x12;
        Fp x42616 = x42613 + x42615;
        Fp x42617 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x42618 = x42617 * x13;
        Fp x42619 = x42616 + x42618;
        Fp x42620 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x42621 = x42620 * x14;
        Fp x42622 = x42619 + x42621;
        Fp x42623 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x42624 = x42623 * x15;
        Fp x42625 = x42622 + x42624;
        Fp x42626 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x42627 = x42626 * x16;
        Fp x42628 = x42625 + x42627;
        Fp x42629 = x42445 - x42628;
        Fp x42630 = x42629 * x33;
        if (x42630 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        if (x42309 != 0) {
          Fp x42631 = x42356 + x17;
          Fp x42632 = x42631 - x42582;
          Fp x42633 = x42632 - x71;
          {
            Fp x42634 = Fp(x42633.asUInt32() & x2.asUInt32());
            args[2][48 * steps + cycle] = x42634;
            Fp x42635 = x42633 - x42634;
            Fp x42636 = x42635 * x10;
            Fp x42637 = Fp(x42636.asUInt32() & x2.asUInt32());
            args[2][49 * steps + cycle] = x42637;
            Fp x42638 = x42636 - x42637;
            Fp x42639 = x42638 * x10;
            Fp x42640 = Fp(x42639.asUInt32() & x2.asUInt32());
            args[2][50 * steps + cycle] = x42640;
            Fp x42641 = x42639 - x42640;
            Fp x42642 = x42641 * x10;
            Fp x42643 = Fp(x42642.asUInt32() & x2.asUInt32());
            args[2][51 * steps + cycle] = x42643;
            Fp x42644 = x42642 - x42643;
            Fp x42645 = x42644 * x10;
            Fp x42646 = Fp(x42645.asUInt32() & x2.asUInt32());
            args[2][52 * steps + cycle] = x42646;
            Fp x42647 = x42645 - x42646;
            Fp x42648 = x42647 * x10;
            Fp x42649 = Fp(x42648.asUInt32() & x2.asUInt32());
            args[2][53 * steps + cycle] = x42649;
            Fp x42650 = x42648 - x42649;
            Fp x42651 = x42650 * x10;
            Fp x42652 = Fp(x42651.asUInt32() & x2.asUInt32());
            args[2][54 * steps + cycle] = x42652;
            Fp x42653 = x42651 - x42652;
            Fp x42654 = x42653 * x10;
            Fp x42655 = Fp(x42654.asUInt32() & x2.asUInt32());
            args[2][55 * steps + cycle] = x42655;
          }
          Fp x42656 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x42657 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x42658 = x42657 * x3;
          Fp x42659 = x42656 + x42658;
          Fp x42660 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x42661 = x42660 * x11;
          Fp x42662 = x42659 + x42661;
          Fp x42663 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x42664 = x42663 * x12;
          Fp x42665 = x42662 + x42664;
          Fp x42666 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x42667 = x42666 * x13;
          Fp x42668 = x42665 + x42667;
          Fp x42669 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x42670 = x42669 * x14;
          Fp x42671 = x42668 + x42670;
          Fp x42672 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x42673 = x42672 * x15;
          Fp x42674 = x42671 + x42673;
          Fp x42675 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x42676 = x42675 * x16;
          Fp x42677 = x42674 + x42676;
          Fp x42678 = x42633 - x42677;
          Fp x42679 = x42678 * x33;
          args[2][93 * steps + cycle] = x42679;
          Fp x42680 = x42402 - x42628;
          Fp x42681 = x42680 - x71;
          Fp x42682 = args[2][93 * steps + ((cycle - 0) & mask)];
          Fp x42683 = x42681 + x42682;
          {
            Fp x42684 = Fp(x42683.asUInt32() & x2.asUInt32());
            args[2][56 * steps + cycle] = x42684;
            Fp x42685 = x42683 - x42684;
            Fp x42686 = x42685 * x10;
            Fp x42687 = Fp(x42686.asUInt32() & x2.asUInt32());
            args[2][57 * steps + cycle] = x42687;
            Fp x42688 = x42686 - x42687;
            Fp x42689 = x42688 * x10;
            Fp x42690 = Fp(x42689.asUInt32() & x2.asUInt32());
            args[2][58 * steps + cycle] = x42690;
            Fp x42691 = x42689 - x42690;
            Fp x42692 = x42691 * x10;
            Fp x42693 = Fp(x42692.asUInt32() & x2.asUInt32());
            args[2][59 * steps + cycle] = x42693;
            Fp x42694 = x42692 - x42693;
            Fp x42695 = x42694 * x10;
            Fp x42696 = Fp(x42695.asUInt32() & x2.asUInt32());
            args[2][60 * steps + cycle] = x42696;
            Fp x42697 = x42695 - x42696;
            Fp x42698 = x42697 * x10;
            Fp x42699 = Fp(x42698.asUInt32() & x2.asUInt32());
            args[2][61 * steps + cycle] = x42699;
            Fp x42700 = x42698 - x42699;
            Fp x42701 = x42700 * x10;
            Fp x42702 = Fp(x42701.asUInt32() & x2.asUInt32());
            args[2][62 * steps + cycle] = x42702;
            Fp x42703 = x42701 - x42702;
            Fp x42704 = x42703 * x10;
            Fp x42705 = Fp(x42704.asUInt32() & x2.asUInt32());
            args[2][63 * steps + cycle] = x42705;
          }
          Fp x42706 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x42707 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x42708 = x42707 * x3;
          Fp x42709 = x42706 + x42708;
          Fp x42710 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x42711 = x42710 * x11;
          Fp x42712 = x42709 + x42711;
          Fp x42713 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x42714 = x42713 * x12;
          Fp x42715 = x42712 + x42714;
          Fp x42716 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x42717 = x42716 * x13;
          Fp x42718 = x42715 + x42717;
          Fp x42719 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x42720 = x42719 * x14;
          Fp x42721 = x42718 + x42720;
          Fp x42722 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x42723 = x42722 * x15;
          Fp x42724 = x42721 + x42723;
          Fp x42725 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x42726 = x42725 * x16;
          Fp x42727 = x42724 + x42726;
          Fp x42728 = x42683 - x42727;
          Fp x42729 = x42728 * x33;
          if (x42729 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:91");
        }
        Fp x42730 = x42484 * x42350;
        Fp x42731 = x42730 + x42576;
        {
          Fp x42732 = Fp(x42731.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x42732;
          Fp x42733 = x42731 - x42732;
          Fp x42734 = x42733 * x10;
          Fp x42735 = Fp(x42734.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x42735;
          Fp x42736 = x42734 - x42735;
          Fp x42737 = x42736 * x10;
          Fp x42738 = Fp(x42737.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x42738;
          Fp x42739 = x42737 - x42738;
          Fp x42740 = x42739 * x10;
          Fp x42741 = Fp(x42740.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x42741;
          Fp x42742 = x42740 - x42741;
          Fp x42743 = x42742 * x10;
          Fp x42744 = Fp(x42743.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x42744;
          Fp x42745 = x42743 - x42744;
          Fp x42746 = x42745 * x10;
          Fp x42747 = Fp(x42746.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x42747;
          Fp x42748 = x42746 - x42747;
          Fp x42749 = x42748 * x10;
          Fp x42750 = Fp(x42749.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x42750;
          Fp x42751 = x42749 - x42750;
          Fp x42752 = x42751 * x10;
          Fp x42753 = Fp(x42752.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x42753;
          Fp x42754 = x42752 - x42753;
          Fp x42755 = x42754 * x10;
          Fp x42756 = Fp(x42755.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x42756;
          Fp x42757 = x42755 - x42756;
          Fp x42758 = x42757 * x10;
          Fp x42759 = Fp(x42758.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x42759;
          Fp x42760 = x42758 - x42759;
          Fp x42761 = x42760 * x10;
          Fp x42762 = Fp(x42761.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x42762;
          Fp x42763 = x42761 - x42762;
          Fp x42764 = x42763 * x10;
          Fp x42765 = Fp(x42764.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x42765;
        }
        Fp x42766 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x42767 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x42768 = x42767 * x3;
        Fp x42769 = x42766 + x42768;
        Fp x42770 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x42771 = x42770 * x11;
        Fp x42772 = x42769 + x42771;
        Fp x42773 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x42774 = x42773 * x12;
        Fp x42775 = x42772 + x42774;
        Fp x42776 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x42777 = x42776 * x13;
        Fp x42778 = x42775 + x42777;
        Fp x42779 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x42780 = x42779 * x14;
        Fp x42781 = x42778 + x42780;
        Fp x42782 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x42783 = x42782 * x15;
        Fp x42784 = x42781 + x42783;
        Fp x42785 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x42786 = x42785 * x16;
        Fp x42787 = x42784 + x42786;
        Fp x42788 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x42789 = x42788 * x17;
        Fp x42790 = x42787 + x42789;
        Fp x42791 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x42792 = x42791 * x18;
        Fp x42793 = x42790 + x42792;
        Fp x42794 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x42795 = x42794 * x19;
        Fp x42796 = x42793 + x42795;
        Fp x42797 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x42798 = x42797 * x20;
        Fp x42799 = x42796 + x42798;
        Fp x42800 = x42731 - x42799;
        Fp x42801 = x42800 * x62;
        if (x42801 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:94");
        Fp x42802 = x42354 * x3;
        Fp x42803 = x42351 + x42802;
        Fp x42804 = x42381 * x11;
        Fp x42805 = x42803 + x42804;
        Fp x42806 = x42382 * x12;
        Fp x42807 = x42805 + x42806;
        Fp x42808 = x42385 * x13;
        Fp x42809 = x42807 + x42808;
        Fp x42810 = x42388 * x14;
        Fp x42811 = x42809 + x42810;
        Fp x42812 = x42484 * x42811;
        Fp x42813 = x42488 * x3;
        Fp x42814 = x42485 + x42813;
        Fp x42815 = x42515 * x11;
        Fp x42816 = x42814 + x42815;
        Fp x42817 = x42516 * x12;
        Fp x42818 = x42816 + x42817;
        Fp x42819 = x42519 * x13;
        Fp x42820 = x42818 + x42819;
        Fp x42821 = x42522 * x14;
        Fp x42822 = x42820 + x42821;
        Fp x42823 = x42822 * x42350;
        Fp x42824 = x42812 + x42823;
        Fp x42825 = x42580 * x3;
        Fp x42826 = x42577 + x42825;
        Fp x42827 = x42607 * x11;
        Fp x42828 = x42826 + x42827;
        Fp x42829 = x42608 * x12;
        Fp x42830 = x42828 + x42829;
        Fp x42831 = x42611 * x13;
        Fp x42832 = x42830 + x42831;
        Fp x42833 = x42614 * x14;
        Fp x42834 = x42832 + x42833;
        Fp x42835 = x42824 + x42834;
        Fp x42836 = x42785 * x3;
        Fp x42837 = x42782 + x42836;
        Fp x42838 = x42788 * x11;
        Fp x42839 = x42837 + x42838;
        Fp x42840 = x42791 * x12;
        Fp x42841 = x42839 + x42840;
        Fp x42842 = x42794 * x13;
        Fp x42843 = x42841 + x42842;
        Fp x42844 = x42797 * x14;
        Fp x42845 = x42843 + x42844;
        Fp x42846 = x42835 + x42845;
        {
          Fp x42847 = Fp(x42846.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x42847;
          Fp x42848 = x42846 - x42847;
          Fp x42849 = x42848 * x10;
          Fp x42850 = Fp(x42849.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x42850;
          Fp x42851 = x42849 - x42850;
          Fp x42852 = x42851 * x10;
          Fp x42853 = Fp(x42852.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x42853;
          Fp x42854 = x42852 - x42853;
          Fp x42855 = x42854 * x10;
          Fp x42856 = Fp(x42855.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x42856;
          Fp x42857 = x42855 - x42856;
          Fp x42858 = x42857 * x10;
          Fp x42859 = Fp(x42858.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x42859;
          Fp x42860 = x42858 - x42859;
          Fp x42861 = x42860 * x10;
          Fp x42862 = Fp(x42861.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x42862;
          Fp x42863 = x42861 - x42862;
          Fp x42864 = x42863 * x10;
          Fp x42865 = Fp(x42864.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x42865;
          Fp x42866 = x42864 - x42865;
          Fp x42867 = x42866 * x10;
          Fp x42868 = Fp(x42867.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x42868;
          Fp x42869 = x42867 - x42868;
          Fp x42870 = x42869 * x10;
          Fp x42871 = Fp(x42870.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x42871;
          Fp x42872 = x42870 - x42871;
          Fp x42873 = x42872 * x10;
          Fp x42874 = Fp(x42873.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x42874;
        }
        Fp x42875 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x42876 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x42877 = x42876 * x3;
        Fp x42878 = x42875 + x42877;
        Fp x42879 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x42880 = x42879 * x11;
        Fp x42881 = x42878 + x42880;
        Fp x42882 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x42883 = x42882 * x12;
        Fp x42884 = x42881 + x42883;
        Fp x42885 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x42886 = x42885 * x13;
        Fp x42887 = x42884 + x42886;
        Fp x42888 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x42889 = x42888 * x14;
        Fp x42890 = x42887 + x42889;
        Fp x42891 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x42892 = x42891 * x15;
        Fp x42893 = x42890 + x42892;
        Fp x42894 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x42895 = x42894 * x16;
        Fp x42896 = x42893 + x42895;
        Fp x42897 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x42898 = x42897 * x17;
        Fp x42899 = x42896 + x42898;
        Fp x42900 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x42901 = x42900 * x18;
        Fp x42902 = x42899 + x42901;
        Fp x42903 = x42846 - x42902;
        Fp x42904 = x42903 * x66;
        if (x42904 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:95");
        Fp x42905 = x42394 * x3;
        Fp x42906 = x42391 + x42905;
        Fp x42907 = x42397 * x11;
        Fp x42908 = x42906 + x42907;
        Fp x42909 = x42400 * x12;
        Fp x42910 = x42908 + x42909;
        Fp x42911 = x42484 * x42910;
        Fp x42912 = x42822 * x42811;
        Fp x42913 = x42911 + x42912;
        Fp x42914 = x42528 * x3;
        Fp x42915 = x42525 + x42914;
        Fp x42916 = x42531 * x11;
        Fp x42917 = x42915 + x42916;
        Fp x42918 = x42534 * x12;
        Fp x42919 = x42917 + x42918;
        Fp x42920 = x42919 * x42350;
        Fp x42921 = x42913 + x42920;
        Fp x42922 = x42620 * x3;
        Fp x42923 = x42617 + x42922;
        Fp x42924 = x42623 * x11;
        Fp x42925 = x42923 + x42924;
        Fp x42926 = x42626 * x12;
        Fp x42927 = x42925 + x42926;
        Fp x42928 = x42921 + x42927;
        Fp x42929 = x42894 * x3;
        Fp x42930 = x42891 + x42929;
        Fp x42931 = x42897 * x11;
        Fp x42932 = x42930 + x42931;
        Fp x42933 = x42900 * x12;
        Fp x42934 = x42932 + x42933;
        Fp x42935 = x42928 + x42934;
        {
          Fp x42936 = Fp(x42935.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x42936;
          Fp x42937 = x42935 - x42936;
          Fp x42938 = x42937 * x10;
          Fp x42939 = Fp(x42938.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x42939;
          Fp x42940 = x42938 - x42939;
          Fp x42941 = x42940 * x10;
          Fp x42942 = Fp(x42941.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x42942;
          Fp x42943 = x42941 - x42942;
          Fp x42944 = x42943 * x10;
          Fp x42945 = Fp(x42944.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x42945;
        }
        Fp x42946 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x42947 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x42948 = x42947 * x3;
        Fp x42949 = x42946 + x42948;
        Fp x42950 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x42951 = x42950 * x11;
        Fp x42952 = x42949 + x42951;
        Fp x42953 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x42954 = x42953 * x12;
        Fp x42955 = x42952 + x42954;
        Fp x42956 = x42935 - x42955;
        Fp x42957 = x42956 * x67;
        if (x42957 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:100");
        host_args[0] = x42799;
        host_args[1] = x42902;
        host_args[2] = x42955;
        host(ctx, "log", "numer0=0x%06x, numer1=0x%05x, numer2=0x%02x", host_args.data(), 3, host_outs.data(), 0);
        Fp x42958 = x42878 * x15;
        Fp x42959 = x42781 + x42958;
        Fp x42960 = x42959 - x42436;
        if (x42960 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:108");
        Fp x42961 = x42882 * x3;
        Fp x42962 = x42879 + x42961;
        Fp x42963 = x42885 * x11;
        Fp x42964 = x42962 + x42963;
        Fp x42965 = x42888 * x12;
        Fp x42966 = x42964 + x42965;
        Fp x42967 = x42955 * x13;
        Fp x42968 = x42966 + x42967;
        Fp x42969 = x42968 - x42435;
        if (x42969 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:109");
        args[2][92 * steps + cycle] = x70;
        args[2][100 * steps + cycle] = x42444;
        args[2][101 * steps + cycle] = x42443;
        {
          args[2][98 * steps + cycle] = x70;
          args[2][114 * steps + cycle] = x70;
        }
        Fp x42970 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x42971 = x70 - x42970;
        if (x42971 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42972 = x42970 * x17;
        Fp x42973 = x17 - x42970;
        Fp x42974 = x42973 - x17;
        {
          Fp x42975 = (x42974 == 0) ? Fp(1) : Fp(0);
          Fp x42976 = x71 - x42975;
          args[2][99 * steps + cycle] = x42976;
          Fp x42977 = inv(x42974);
          args[2][115 * steps + cycle] = x42977;
        }
        Fp x42978 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x42979 = x42974 * x42978;
        Fp x42980 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x42981 = x42979 - x42980;
        if (x42981 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42982 = x71 - x42980;
        Fp x42983 = x42982 * x42974;
        if (x42983 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x42984 = x42980 * x42973;
        args[2][116 * steps + cycle] = x42972;
        args[2][117 * steps + cycle] = x42984;
      }
      Fp x42985 = args[2][76 * steps + ((cycle - 1) & mask)];
      if (x42985 != 0) {
        Fp x42986 = x41457 + x41458;
        {
          Fp x42987 = (x42986 == 0) ? Fp(1) : Fp(0);
          Fp x42988 = x71 - x42987;
          args[2][118 * steps + cycle] = x42988;
          Fp x42989 = inv(x42986);
          args[2][119 * steps + cycle] = x42989;
        }
        Fp x42990 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x42991 = x42986 * x42990;
        Fp x42992 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x42993 = x42991 - x42992;
        if (x42993 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x42994 = x71 - x42992;
        Fp x42995 = x42994 * x42986;
        if (x42995 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        {
          Fp x42996 = Fp(x41456.asUInt32() & x32.asUInt32());
          Fp x42997 = x42996 * x65;
          args[2][90 * steps + cycle] = x42997;
          Fp x42998 = Fp(x41458.asUInt32() & x32.asUInt32());
          Fp x42999 = x42998 * x65;
          args[2][91 * steps + cycle] = x42999;
        }
        Fp x43000 = x17 - x41455;
        Fp x43001 = x43000 - x17;
        {
          Fp x43002 = (x43001 == 0) ? Fp(1) : Fp(0);
          Fp x43003 = x71 - x43002;
          args[2][94 * steps + cycle] = x43003;
          Fp x43004 = inv(x43001);
          args[2][106 * steps + cycle] = x43004;
        }
        Fp x43005 = args[2][106 * steps + ((cycle - 0) & mask)];
        Fp x43006 = x43001 * x43005;
        Fp x43007 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x43008 = x43006 - x43007;
        if (x43008 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43009 = x71 - x43007;
        Fp x43010 = x43009 * x43001;
        if (x43010 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x43011 = x43007 * x43000;
        Fp x43012 = x17 - x43007;
        Fp x43013 = x43012 - x41456;
        Fp x43014 = x43013 - x17;
        {
          Fp x43015 = (x43014 == 0) ? Fp(1) : Fp(0);
          Fp x43016 = x71 - x43015;
          args[2][95 * steps + cycle] = x43016;
          Fp x43017 = inv(x43014);
          args[2][107 * steps + cycle] = x43017;
        }
        Fp x43018 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x43019 = x43014 * x43018;
        Fp x43020 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x43021 = x43019 - x43020;
        if (x43021 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43022 = x71 - x43020;
        Fp x43023 = x43022 * x43014;
        if (x43023 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x43024 = x43020 * x43013;
        args[2][108 * steps + cycle] = x43011;
        args[2][109 * steps + cycle] = x43024;
        Fp x43025 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x43026 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x43027 = x17 - x41457;
        Fp x43028 = x43027 - x17;
        {
          Fp x43029 = (x43028 == 0) ? Fp(1) : Fp(0);
          Fp x43030 = x71 - x43029;
          args[2][96 * steps + cycle] = x43030;
          Fp x43031 = inv(x43028);
          args[2][110 * steps + cycle] = x43031;
        }
        Fp x43032 = args[2][110 * steps + ((cycle - 0) & mask)];
        Fp x43033 = x43028 * x43032;
        Fp x43034 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x43035 = x43033 - x43034;
        if (x43035 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43036 = x71 - x43034;
        Fp x43037 = x43036 * x43028;
        if (x43037 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x43038 = x43034 * x43027;
        Fp x43039 = x17 - x43034;
        Fp x43040 = x43039 - x41458;
        Fp x43041 = x43040 - x17;
        {
          Fp x43042 = (x43041 == 0) ? Fp(1) : Fp(0);
          Fp x43043 = x71 - x43042;
          args[2][97 * steps + cycle] = x43043;
          Fp x43044 = inv(x43041);
          args[2][111 * steps + cycle] = x43044;
        }
        Fp x43045 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x43046 = x43041 * x43045;
        Fp x43047 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x43048 = x43046 - x43047;
        if (x43048 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43049 = x71 - x43047;
        Fp x43050 = x43049 * x43041;
        if (x43050 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x43051 = x43047 * x43040;
        args[2][112 * steps + cycle] = x43038;
        args[2][113 * steps + cycle] = x43051;
        Fp x43052 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x43053 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x43054 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x43055 = x43054 * x43025;
        Fp x43056 = x43054 * x43026;
        Fp x43057 = x71 - x43054;
        Fp x43058 = x43057 * x41455;
        Fp x43059 = x43057 * x41456;
        Fp x43060 = x43055 + x43058;
        Fp x43061 = x43056 + x43059;
        args[2][124 * steps + cycle] = x43060;
        args[2][125 * steps + cycle] = x43061;
        Fp x43062 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x43063 = x43062 * x43052;
        Fp x43064 = x43062 * x43053;
        Fp x43065 = x71 - x43062;
        Fp x43066 = x43065 * x41457;
        Fp x43067 = x43065 * x41458;
        Fp x43068 = x43063 + x43066;
        Fp x43069 = x43064 + x43067;
        {
          Fp x43070 = Fp(x43068.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x43070;
          Fp x43071 = x43068 - x43070;
          Fp x43072 = x43071 * x10;
          Fp x43073 = Fp(x43072.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x43073;
          Fp x43074 = x43072 - x43073;
          Fp x43075 = x43074 * x10;
          Fp x43076 = Fp(x43075.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x43076;
          Fp x43077 = x43075 - x43076;
          Fp x43078 = x43077 * x10;
          Fp x43079 = Fp(x43078.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x43079;
          Fp x43080 = x43078 - x43079;
          Fp x43081 = x43080 * x10;
          Fp x43082 = Fp(x43081.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x43082;
          Fp x43083 = x43081 - x43082;
          Fp x43084 = x43083 * x10;
          Fp x43085 = Fp(x43084.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x43085;
          Fp x43086 = x43084 - x43085;
          Fp x43087 = x43086 * x10;
          Fp x43088 = Fp(x43087.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x43088;
          Fp x43089 = x43087 - x43088;
          Fp x43090 = x43089 * x10;
          Fp x43091 = Fp(x43090.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x43091;
        }
        Fp x43092 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x43093 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x43094 = x43093 * x3;
        Fp x43095 = x43092 + x43094;
        Fp x43096 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x43097 = x43096 * x11;
        Fp x43098 = x43095 + x43097;
        Fp x43099 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x43100 = x43099 * x12;
        Fp x43101 = x43098 + x43100;
        Fp x43102 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x43103 = x43102 * x13;
        Fp x43104 = x43101 + x43103;
        Fp x43105 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x43106 = x43105 * x14;
        Fp x43107 = x43104 + x43106;
        Fp x43108 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x43109 = x43108 * x15;
        Fp x43110 = x43107 + x43109;
        Fp x43111 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x43112 = x43111 * x16;
        Fp x43113 = x43110 + x43112;
        Fp x43114 = x43068 - x43113;
        Fp x43115 = x43114 * x33;
        if (x43115 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:51");
        {
          Fp x43116 = Fp(x43069.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x43116;
          Fp x43117 = x43069 - x43116;
          Fp x43118 = x43117 * x10;
          Fp x43119 = Fp(x43118.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x43119;
          Fp x43120 = x43118 - x43119;
          Fp x43121 = x43120 * x10;
          Fp x43122 = Fp(x43121.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x43122;
          Fp x43123 = x43121 - x43122;
          Fp x43124 = x43123 * x10;
          Fp x43125 = Fp(x43124.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x43125;
          Fp x43126 = x43124 - x43125;
          Fp x43127 = x43126 * x10;
          Fp x43128 = Fp(x43127.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x43128;
          Fp x43129 = x43127 - x43128;
          Fp x43130 = x43129 * x10;
          Fp x43131 = Fp(x43130.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x43131;
          Fp x43132 = x43130 - x43131;
          Fp x43133 = x43132 * x10;
          Fp x43134 = Fp(x43133.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x43134;
          Fp x43135 = x43133 - x43134;
          Fp x43136 = x43135 * x10;
          Fp x43137 = Fp(x43136.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x43137;
        }
        Fp x43138 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x43139 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x43140 = x43139 * x3;
        Fp x43141 = x43138 + x43140;
        Fp x43142 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x43143 = x43142 * x11;
        Fp x43144 = x43141 + x43143;
        Fp x43145 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x43146 = x43145 * x12;
        Fp x43147 = x43144 + x43146;
        Fp x43148 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x43149 = x43148 * x13;
        Fp x43150 = x43147 + x43149;
        Fp x43151 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x43152 = x43151 * x14;
        Fp x43153 = x43150 + x43152;
        Fp x43154 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x43155 = x43154 * x15;
        Fp x43156 = x43153 + x43155;
        Fp x43157 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x43158 = x43157 * x16;
        Fp x43159 = x43156 + x43158;
        Fp x43160 = x43069 - x43159;
        Fp x43161 = x43160 * x33;
        if (x43161 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:51");
        Fp x43162 = args[2][125 * steps + ((cycle - 0) & mask)];
        Fp x43163 = args[2][124 * steps + ((cycle - 0) & mask)];
        host_args[0] = x43162;
        host_args[1] = x43163;
        host_args[2] = x43159;
        host_args[3] = x43113;
        host_args[4] = x43054;
        host_args[5] = x43062;
        host(ctx, "log", "numer32 = %04x%04x, denom = %04x%04x, negNumer = %d, negDenom = %d", host_args.data(), 6, host_outs.data(), 0);
        {
          host_args[0] = x43163;
          host_args[1] = x43162;
          host_args[2] = x43113;
          host_args[3] = x43159;
          host(ctx, "divide32", "", host_args.data(), 4, host_outs.data(), 4);
          Fp x43164 = host_outs[0];
          Fp x43165 = host_outs[1];
          Fp x43166 = host_outs[2];
          Fp x43167 = host_outs[3];
          args[2][120 * steps + cycle] = x43164;
          args[2][121 * steps + cycle] = x43165;
          args[2][122 * steps + cycle] = x43166;
          args[2][123 * steps + cycle] = x43167;
        }
        Fp x43168 = args[2][121 * steps + ((cycle - 0) & mask)];
        Fp x43169 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x43170 = args[2][123 * steps + ((cycle - 0) & mask)];
        Fp x43171 = args[2][122 * steps + ((cycle - 0) & mask)];
        host_args[0] = x43168;
        host_args[1] = x43169;
        host_args[2] = x43170;
        host_args[3] = x43171;
        host(ctx, "log", "quot32 = %04x%04x, rem32 = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x43172 = Fp(x43169.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x43172;
          Fp x43173 = x43169 - x43172;
          Fp x43174 = x43173 * x10;
          Fp x43175 = Fp(x43174.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x43175;
          Fp x43176 = x43174 - x43175;
          Fp x43177 = x43176 * x10;
          Fp x43178 = Fp(x43177.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x43178;
          Fp x43179 = x43177 - x43178;
          Fp x43180 = x43179 * x10;
          Fp x43181 = Fp(x43180.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x43181;
          Fp x43182 = x43180 - x43181;
          Fp x43183 = x43182 * x10;
          Fp x43184 = Fp(x43183.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x43184;
          Fp x43185 = x43183 - x43184;
          Fp x43186 = x43185 * x10;
          Fp x43187 = Fp(x43186.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x43187;
          Fp x43188 = x43186 - x43187;
          Fp x43189 = x43188 * x10;
          Fp x43190 = Fp(x43189.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x43190;
          Fp x43191 = x43189 - x43190;
          Fp x43192 = x43191 * x10;
          Fp x43193 = Fp(x43192.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x43193;
        }
        Fp x43194 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x43195 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x43196 = x43195 * x3;
        Fp x43197 = x43194 + x43196;
        Fp x43198 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x43199 = x43198 * x11;
        Fp x43200 = x43197 + x43199;
        Fp x43201 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x43202 = x43201 * x12;
        Fp x43203 = x43200 + x43202;
        Fp x43204 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x43205 = x43204 * x13;
        Fp x43206 = x43203 + x43205;
        Fp x43207 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x43208 = x43207 * x14;
        Fp x43209 = x43206 + x43208;
        Fp x43210 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x43211 = x43210 * x15;
        Fp x43212 = x43209 + x43211;
        Fp x43213 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x43214 = x43213 * x16;
        Fp x43215 = x43212 + x43214;
        Fp x43216 = x43169 - x43215;
        Fp x43217 = x43216 * x33;
        if (x43217 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x43218 = Fp(x43168.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x43218;
          Fp x43219 = x43168 - x43218;
          Fp x43220 = x43219 * x10;
          Fp x43221 = Fp(x43220.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x43221;
          Fp x43222 = x43220 - x43221;
          Fp x43223 = x43222 * x10;
          Fp x43224 = Fp(x43223.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x43224;
          Fp x43225 = x43223 - x43224;
          Fp x43226 = x43225 * x10;
          Fp x43227 = Fp(x43226.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x43227;
          Fp x43228 = x43226 - x43227;
          Fp x43229 = x43228 * x10;
          Fp x43230 = Fp(x43229.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x43230;
          Fp x43231 = x43229 - x43230;
          Fp x43232 = x43231 * x10;
          Fp x43233 = Fp(x43232.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x43233;
          Fp x43234 = x43232 - x43233;
          Fp x43235 = x43234 * x10;
          Fp x43236 = Fp(x43235.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x43236;
          Fp x43237 = x43235 - x43236;
          Fp x43238 = x43237 * x10;
          Fp x43239 = Fp(x43238.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x43239;
        }
        Fp x43240 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x43241 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x43242 = x43241 * x3;
        Fp x43243 = x43240 + x43242;
        Fp x43244 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x43245 = x43244 * x11;
        Fp x43246 = x43243 + x43245;
        Fp x43247 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x43248 = x43247 * x12;
        Fp x43249 = x43246 + x43248;
        Fp x43250 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x43251 = x43250 * x13;
        Fp x43252 = x43249 + x43251;
        Fp x43253 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x43254 = x43253 * x14;
        Fp x43255 = x43252 + x43254;
        Fp x43256 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x43257 = x43256 * x15;
        Fp x43258 = x43255 + x43257;
        Fp x43259 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x43260 = x43259 * x16;
        Fp x43261 = x43258 + x43260;
        Fp x43262 = x43168 - x43261;
        Fp x43263 = x43262 * x33;
        if (x43263 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x43264 = Fp(x43171.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x43264;
          Fp x43265 = x43171 - x43264;
          Fp x43266 = x43265 * x10;
          Fp x43267 = Fp(x43266.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x43267;
          Fp x43268 = x43266 - x43267;
          Fp x43269 = x43268 * x10;
          Fp x43270 = Fp(x43269.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x43270;
          Fp x43271 = x43269 - x43270;
          Fp x43272 = x43271 * x10;
          Fp x43273 = Fp(x43272.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x43273;
          Fp x43274 = x43272 - x43273;
          Fp x43275 = x43274 * x10;
          Fp x43276 = Fp(x43275.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x43276;
          Fp x43277 = x43275 - x43276;
          Fp x43278 = x43277 * x10;
          Fp x43279 = Fp(x43278.asUInt32() & x2.asUInt32());
          args[2][37 * steps + cycle] = x43279;
          Fp x43280 = x43278 - x43279;
          Fp x43281 = x43280 * x10;
          Fp x43282 = Fp(x43281.asUInt32() & x2.asUInt32());
          args[2][38 * steps + cycle] = x43282;
          Fp x43283 = x43281 - x43282;
          Fp x43284 = x43283 * x10;
          Fp x43285 = Fp(x43284.asUInt32() & x2.asUInt32());
          args[2][39 * steps + cycle] = x43285;
        }
        Fp x43286 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x43287 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x43288 = x43287 * x3;
        Fp x43289 = x43286 + x43288;
        Fp x43290 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x43291 = x43290 * x11;
        Fp x43292 = x43289 + x43291;
        Fp x43293 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x43294 = x43293 * x12;
        Fp x43295 = x43292 + x43294;
        Fp x43296 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x43297 = x43296 * x13;
        Fp x43298 = x43295 + x43297;
        Fp x43299 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x43300 = x43299 * x14;
        Fp x43301 = x43298 + x43300;
        Fp x43302 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x43303 = x43302 * x15;
        Fp x43304 = x43301 + x43303;
        Fp x43305 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x43306 = x43305 * x16;
        Fp x43307 = x43304 + x43306;
        Fp x43308 = x43171 - x43307;
        Fp x43309 = x43308 * x33;
        if (x43309 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        {
          Fp x43310 = Fp(x43170.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x43310;
          Fp x43311 = x43170 - x43310;
          Fp x43312 = x43311 * x10;
          Fp x43313 = Fp(x43312.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x43313;
          Fp x43314 = x43312 - x43313;
          Fp x43315 = x43314 * x10;
          Fp x43316 = Fp(x43315.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x43316;
          Fp x43317 = x43315 - x43316;
          Fp x43318 = x43317 * x10;
          Fp x43319 = Fp(x43318.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x43319;
          Fp x43320 = x43318 - x43319;
          Fp x43321 = x43320 * x10;
          Fp x43322 = Fp(x43321.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x43322;
          Fp x43323 = x43321 - x43322;
          Fp x43324 = x43323 * x10;
          Fp x43325 = Fp(x43324.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x43325;
          Fp x43326 = x43324 - x43325;
          Fp x43327 = x43326 * x10;
          Fp x43328 = Fp(x43327.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x43328;
          Fp x43329 = x43327 - x43328;
          Fp x43330 = x43329 * x10;
          Fp x43331 = Fp(x43330.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x43331;
        }
        Fp x43332 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x43333 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x43334 = x43333 * x3;
        Fp x43335 = x43332 + x43334;
        Fp x43336 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x43337 = x43336 * x11;
        Fp x43338 = x43335 + x43337;
        Fp x43339 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x43340 = x43339 * x12;
        Fp x43341 = x43338 + x43340;
        Fp x43342 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x43343 = x43342 * x13;
        Fp x43344 = x43341 + x43343;
        Fp x43345 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x43346 = x43345 * x14;
        Fp x43347 = x43344 + x43346;
        Fp x43348 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x43349 = x43348 * x15;
        Fp x43350 = x43347 + x43349;
        Fp x43351 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x43352 = x43351 * x16;
        Fp x43353 = x43350 + x43352;
        Fp x43354 = x43170 - x43353;
        Fp x43355 = x43354 * x33;
        if (x43355 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        if (x42992 != 0) {
          Fp x43356 = x43113 + x17;
          Fp x43357 = x43356 - x43307;
          Fp x43358 = x43357 - x71;
          {
            Fp x43359 = Fp(x43358.asUInt32() & x2.asUInt32());
            args[2][48 * steps + cycle] = x43359;
            Fp x43360 = x43358 - x43359;
            Fp x43361 = x43360 * x10;
            Fp x43362 = Fp(x43361.asUInt32() & x2.asUInt32());
            args[2][49 * steps + cycle] = x43362;
            Fp x43363 = x43361 - x43362;
            Fp x43364 = x43363 * x10;
            Fp x43365 = Fp(x43364.asUInt32() & x2.asUInt32());
            args[2][50 * steps + cycle] = x43365;
            Fp x43366 = x43364 - x43365;
            Fp x43367 = x43366 * x10;
            Fp x43368 = Fp(x43367.asUInt32() & x2.asUInt32());
            args[2][51 * steps + cycle] = x43368;
            Fp x43369 = x43367 - x43368;
            Fp x43370 = x43369 * x10;
            Fp x43371 = Fp(x43370.asUInt32() & x2.asUInt32());
            args[2][52 * steps + cycle] = x43371;
            Fp x43372 = x43370 - x43371;
            Fp x43373 = x43372 * x10;
            Fp x43374 = Fp(x43373.asUInt32() & x2.asUInt32());
            args[2][53 * steps + cycle] = x43374;
            Fp x43375 = x43373 - x43374;
            Fp x43376 = x43375 * x10;
            Fp x43377 = Fp(x43376.asUInt32() & x2.asUInt32());
            args[2][54 * steps + cycle] = x43377;
            Fp x43378 = x43376 - x43377;
            Fp x43379 = x43378 * x10;
            Fp x43380 = Fp(x43379.asUInt32() & x2.asUInt32());
            args[2][55 * steps + cycle] = x43380;
          }
          Fp x43381 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x43382 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x43383 = x43382 * x3;
          Fp x43384 = x43381 + x43383;
          Fp x43385 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x43386 = x43385 * x11;
          Fp x43387 = x43384 + x43386;
          Fp x43388 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x43389 = x43388 * x12;
          Fp x43390 = x43387 + x43389;
          Fp x43391 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x43392 = x43391 * x13;
          Fp x43393 = x43390 + x43392;
          Fp x43394 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x43395 = x43394 * x14;
          Fp x43396 = x43393 + x43395;
          Fp x43397 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x43398 = x43397 * x15;
          Fp x43399 = x43396 + x43398;
          Fp x43400 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x43401 = x43400 * x16;
          Fp x43402 = x43399 + x43401;
          Fp x43403 = x43358 - x43402;
          Fp x43404 = x43403 * x33;
          args[2][93 * steps + cycle] = x43404;
          Fp x43405 = x43159 - x43353;
          Fp x43406 = x43405 - x71;
          Fp x43407 = args[2][93 * steps + ((cycle - 0) & mask)];
          Fp x43408 = x43406 + x43407;
          {
            Fp x43409 = Fp(x43408.asUInt32() & x2.asUInt32());
            args[2][56 * steps + cycle] = x43409;
            Fp x43410 = x43408 - x43409;
            Fp x43411 = x43410 * x10;
            Fp x43412 = Fp(x43411.asUInt32() & x2.asUInt32());
            args[2][57 * steps + cycle] = x43412;
            Fp x43413 = x43411 - x43412;
            Fp x43414 = x43413 * x10;
            Fp x43415 = Fp(x43414.asUInt32() & x2.asUInt32());
            args[2][58 * steps + cycle] = x43415;
            Fp x43416 = x43414 - x43415;
            Fp x43417 = x43416 * x10;
            Fp x43418 = Fp(x43417.asUInt32() & x2.asUInt32());
            args[2][59 * steps + cycle] = x43418;
            Fp x43419 = x43417 - x43418;
            Fp x43420 = x43419 * x10;
            Fp x43421 = Fp(x43420.asUInt32() & x2.asUInt32());
            args[2][60 * steps + cycle] = x43421;
            Fp x43422 = x43420 - x43421;
            Fp x43423 = x43422 * x10;
            Fp x43424 = Fp(x43423.asUInt32() & x2.asUInt32());
            args[2][61 * steps + cycle] = x43424;
            Fp x43425 = x43423 - x43424;
            Fp x43426 = x43425 * x10;
            Fp x43427 = Fp(x43426.asUInt32() & x2.asUInt32());
            args[2][62 * steps + cycle] = x43427;
            Fp x43428 = x43426 - x43427;
            Fp x43429 = x43428 * x10;
            Fp x43430 = Fp(x43429.asUInt32() & x2.asUInt32());
            args[2][63 * steps + cycle] = x43430;
          }
          Fp x43431 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x43432 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x43433 = x43432 * x3;
          Fp x43434 = x43431 + x43433;
          Fp x43435 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x43436 = x43435 * x11;
          Fp x43437 = x43434 + x43436;
          Fp x43438 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x43439 = x43438 * x12;
          Fp x43440 = x43437 + x43439;
          Fp x43441 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x43442 = x43441 * x13;
          Fp x43443 = x43440 + x43442;
          Fp x43444 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x43445 = x43444 * x14;
          Fp x43446 = x43443 + x43445;
          Fp x43447 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x43448 = x43447 * x15;
          Fp x43449 = x43446 + x43448;
          Fp x43450 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x43451 = x43450 * x16;
          Fp x43452 = x43449 + x43451;
          Fp x43453 = x43408 - x43452;
          Fp x43454 = x43453 * x33;
          if (x43454 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:91");
        }
        Fp x43455 = x43209 * x43107;
        Fp x43456 = x43455 + x43301;
        {
          Fp x43457 = Fp(x43456.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x43457;
          Fp x43458 = x43456 - x43457;
          Fp x43459 = x43458 * x10;
          Fp x43460 = Fp(x43459.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x43460;
          Fp x43461 = x43459 - x43460;
          Fp x43462 = x43461 * x10;
          Fp x43463 = Fp(x43462.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x43463;
          Fp x43464 = x43462 - x43463;
          Fp x43465 = x43464 * x10;
          Fp x43466 = Fp(x43465.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x43466;
          Fp x43467 = x43465 - x43466;
          Fp x43468 = x43467 * x10;
          Fp x43469 = Fp(x43468.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x43469;
          Fp x43470 = x43468 - x43469;
          Fp x43471 = x43470 * x10;
          Fp x43472 = Fp(x43471.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x43472;
          Fp x43473 = x43471 - x43472;
          Fp x43474 = x43473 * x10;
          Fp x43475 = Fp(x43474.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x43475;
          Fp x43476 = x43474 - x43475;
          Fp x43477 = x43476 * x10;
          Fp x43478 = Fp(x43477.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x43478;
          Fp x43479 = x43477 - x43478;
          Fp x43480 = x43479 * x10;
          Fp x43481 = Fp(x43480.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x43481;
          Fp x43482 = x43480 - x43481;
          Fp x43483 = x43482 * x10;
          Fp x43484 = Fp(x43483.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x43484;
          Fp x43485 = x43483 - x43484;
          Fp x43486 = x43485 * x10;
          Fp x43487 = Fp(x43486.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x43487;
          Fp x43488 = x43486 - x43487;
          Fp x43489 = x43488 * x10;
          Fp x43490 = Fp(x43489.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x43490;
        }
        Fp x43491 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x43492 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x43493 = x43492 * x3;
        Fp x43494 = x43491 + x43493;
        Fp x43495 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x43496 = x43495 * x11;
        Fp x43497 = x43494 + x43496;
        Fp x43498 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x43499 = x43498 * x12;
        Fp x43500 = x43497 + x43499;
        Fp x43501 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x43502 = x43501 * x13;
        Fp x43503 = x43500 + x43502;
        Fp x43504 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x43505 = x43504 * x14;
        Fp x43506 = x43503 + x43505;
        Fp x43507 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x43508 = x43507 * x15;
        Fp x43509 = x43506 + x43508;
        Fp x43510 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x43511 = x43510 * x16;
        Fp x43512 = x43509 + x43511;
        Fp x43513 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x43514 = x43513 * x17;
        Fp x43515 = x43512 + x43514;
        Fp x43516 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x43517 = x43516 * x18;
        Fp x43518 = x43515 + x43517;
        Fp x43519 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x43520 = x43519 * x19;
        Fp x43521 = x43518 + x43520;
        Fp x43522 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x43523 = x43522 * x20;
        Fp x43524 = x43521 + x43523;
        Fp x43525 = x43456 - x43524;
        Fp x43526 = x43525 * x62;
        if (x43526 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:94");
        Fp x43527 = x43111 * x3;
        Fp x43528 = x43108 + x43527;
        Fp x43529 = x43138 * x11;
        Fp x43530 = x43528 + x43529;
        Fp x43531 = x43139 * x12;
        Fp x43532 = x43530 + x43531;
        Fp x43533 = x43142 * x13;
        Fp x43534 = x43532 + x43533;
        Fp x43535 = x43145 * x14;
        Fp x43536 = x43534 + x43535;
        Fp x43537 = x43209 * x43536;
        Fp x43538 = x43213 * x3;
        Fp x43539 = x43210 + x43538;
        Fp x43540 = x43240 * x11;
        Fp x43541 = x43539 + x43540;
        Fp x43542 = x43241 * x12;
        Fp x43543 = x43541 + x43542;
        Fp x43544 = x43244 * x13;
        Fp x43545 = x43543 + x43544;
        Fp x43546 = x43247 * x14;
        Fp x43547 = x43545 + x43546;
        Fp x43548 = x43547 * x43107;
        Fp x43549 = x43537 + x43548;
        Fp x43550 = x43305 * x3;
        Fp x43551 = x43302 + x43550;
        Fp x43552 = x43332 * x11;
        Fp x43553 = x43551 + x43552;
        Fp x43554 = x43333 * x12;
        Fp x43555 = x43553 + x43554;
        Fp x43556 = x43336 * x13;
        Fp x43557 = x43555 + x43556;
        Fp x43558 = x43339 * x14;
        Fp x43559 = x43557 + x43558;
        Fp x43560 = x43549 + x43559;
        Fp x43561 = x43510 * x3;
        Fp x43562 = x43507 + x43561;
        Fp x43563 = x43513 * x11;
        Fp x43564 = x43562 + x43563;
        Fp x43565 = x43516 * x12;
        Fp x43566 = x43564 + x43565;
        Fp x43567 = x43519 * x13;
        Fp x43568 = x43566 + x43567;
        Fp x43569 = x43522 * x14;
        Fp x43570 = x43568 + x43569;
        Fp x43571 = x43560 + x43570;
        {
          Fp x43572 = Fp(x43571.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x43572;
          Fp x43573 = x43571 - x43572;
          Fp x43574 = x43573 * x10;
          Fp x43575 = Fp(x43574.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x43575;
          Fp x43576 = x43574 - x43575;
          Fp x43577 = x43576 * x10;
          Fp x43578 = Fp(x43577.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x43578;
          Fp x43579 = x43577 - x43578;
          Fp x43580 = x43579 * x10;
          Fp x43581 = Fp(x43580.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x43581;
          Fp x43582 = x43580 - x43581;
          Fp x43583 = x43582 * x10;
          Fp x43584 = Fp(x43583.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x43584;
          Fp x43585 = x43583 - x43584;
          Fp x43586 = x43585 * x10;
          Fp x43587 = Fp(x43586.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x43587;
          Fp x43588 = x43586 - x43587;
          Fp x43589 = x43588 * x10;
          Fp x43590 = Fp(x43589.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x43590;
          Fp x43591 = x43589 - x43590;
          Fp x43592 = x43591 * x10;
          Fp x43593 = Fp(x43592.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x43593;
          Fp x43594 = x43592 - x43593;
          Fp x43595 = x43594 * x10;
          Fp x43596 = Fp(x43595.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x43596;
          Fp x43597 = x43595 - x43596;
          Fp x43598 = x43597 * x10;
          Fp x43599 = Fp(x43598.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x43599;
        }
        Fp x43600 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x43601 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x43602 = x43601 * x3;
        Fp x43603 = x43600 + x43602;
        Fp x43604 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x43605 = x43604 * x11;
        Fp x43606 = x43603 + x43605;
        Fp x43607 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x43608 = x43607 * x12;
        Fp x43609 = x43606 + x43608;
        Fp x43610 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x43611 = x43610 * x13;
        Fp x43612 = x43609 + x43611;
        Fp x43613 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x43614 = x43613 * x14;
        Fp x43615 = x43612 + x43614;
        Fp x43616 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x43617 = x43616 * x15;
        Fp x43618 = x43615 + x43617;
        Fp x43619 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x43620 = x43619 * x16;
        Fp x43621 = x43618 + x43620;
        Fp x43622 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x43623 = x43622 * x17;
        Fp x43624 = x43621 + x43623;
        Fp x43625 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x43626 = x43625 * x18;
        Fp x43627 = x43624 + x43626;
        Fp x43628 = x43571 - x43627;
        Fp x43629 = x43628 * x66;
        if (x43629 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:95");
        Fp x43630 = x43151 * x3;
        Fp x43631 = x43148 + x43630;
        Fp x43632 = x43154 * x11;
        Fp x43633 = x43631 + x43632;
        Fp x43634 = x43157 * x12;
        Fp x43635 = x43633 + x43634;
        Fp x43636 = x43209 * x43635;
        Fp x43637 = x43547 * x43536;
        Fp x43638 = x43636 + x43637;
        Fp x43639 = x43253 * x3;
        Fp x43640 = x43250 + x43639;
        Fp x43641 = x43256 * x11;
        Fp x43642 = x43640 + x43641;
        Fp x43643 = x43259 * x12;
        Fp x43644 = x43642 + x43643;
        Fp x43645 = x43644 * x43107;
        Fp x43646 = x43638 + x43645;
        Fp x43647 = x43345 * x3;
        Fp x43648 = x43342 + x43647;
        Fp x43649 = x43348 * x11;
        Fp x43650 = x43648 + x43649;
        Fp x43651 = x43351 * x12;
        Fp x43652 = x43650 + x43651;
        Fp x43653 = x43646 + x43652;
        Fp x43654 = x43619 * x3;
        Fp x43655 = x43616 + x43654;
        Fp x43656 = x43622 * x11;
        Fp x43657 = x43655 + x43656;
        Fp x43658 = x43625 * x12;
        Fp x43659 = x43657 + x43658;
        Fp x43660 = x43653 + x43659;
        {
          Fp x43661 = Fp(x43660.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x43661;
          Fp x43662 = x43660 - x43661;
          Fp x43663 = x43662 * x10;
          Fp x43664 = Fp(x43663.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x43664;
          Fp x43665 = x43663 - x43664;
          Fp x43666 = x43665 * x10;
          Fp x43667 = Fp(x43666.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x43667;
          Fp x43668 = x43666 - x43667;
          Fp x43669 = x43668 * x10;
          Fp x43670 = Fp(x43669.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x43670;
        }
        Fp x43671 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x43672 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x43673 = x43672 * x3;
        Fp x43674 = x43671 + x43673;
        Fp x43675 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x43676 = x43675 * x11;
        Fp x43677 = x43674 + x43676;
        Fp x43678 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x43679 = x43678 * x12;
        Fp x43680 = x43677 + x43679;
        Fp x43681 = x43660 - x43680;
        Fp x43682 = x43681 * x67;
        if (x43682 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:100");
        host_args[0] = x43524;
        host_args[1] = x43627;
        host_args[2] = x43680;
        host(ctx, "log", "numer0=0x%06x, numer1=0x%05x, numer2=0x%02x", host_args.data(), 3, host_outs.data(), 0);
        Fp x43683 = x43603 * x15;
        Fp x43684 = x43506 + x43683;
        Fp x43685 = x43684 - x43163;
        if (x43685 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:108");
        Fp x43686 = x43607 * x3;
        Fp x43687 = x43604 + x43686;
        Fp x43688 = x43610 * x11;
        Fp x43689 = x43687 + x43688;
        Fp x43690 = x43613 * x12;
        Fp x43691 = x43689 + x43690;
        Fp x43692 = x43680 * x13;
        Fp x43693 = x43691 + x43692;
        Fp x43694 = x43693 - x43162;
        if (x43694 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:109");
        args[2][92 * steps + cycle] = x43054;
        Fp x43695 = x17 - x43171;
        Fp x43696 = x43695 - x17;
        {
          Fp x43697 = (x43696 == 0) ? Fp(1) : Fp(0);
          Fp x43698 = x71 - x43697;
          args[2][98 * steps + cycle] = x43698;
          Fp x43699 = inv(x43696);
          args[2][114 * steps + cycle] = x43699;
        }
        Fp x43700 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x43701 = x43696 * x43700;
        Fp x43702 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x43703 = x43701 - x43702;
        if (x43703 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43704 = x71 - x43702;
        Fp x43705 = x43704 * x43696;
        if (x43705 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x43706 = x43702 * x43695;
        Fp x43707 = x17 - x43702;
        Fp x43708 = x43707 - x43170;
        Fp x43709 = x43708 - x17;
        {
          Fp x43710 = (x43709 == 0) ? Fp(1) : Fp(0);
          Fp x43711 = x71 - x43710;
          args[2][99 * steps + cycle] = x43711;
          Fp x43712 = inv(x43709);
          args[2][115 * steps + cycle] = x43712;
        }
        Fp x43713 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x43714 = x43709 * x43713;
        Fp x43715 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x43716 = x43714 - x43715;
        if (x43716 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43717 = x71 - x43715;
        Fp x43718 = x43717 * x43709;
        if (x43718 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x43719 = x43715 * x43708;
        args[2][116 * steps + cycle] = x43706;
        args[2][117 * steps + cycle] = x43719;
        Fp x43720 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x43721 = args[2][117 * steps + ((cycle - 0) & mask)];
        Fp x43722 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x43723 = x43722 * x43720;
        Fp x43724 = x43722 * x43721;
        Fp x43725 = x71 - x43722;
        Fp x43726 = x43725 * x43171;
        Fp x43727 = x43725 * x43170;
        Fp x43728 = x43723 + x43726;
        Fp x43729 = x43724 + x43727;
        args[2][100 * steps + cycle] = x43728;
        args[2][101 * steps + cycle] = x43729;
      }
      Fp x43730 = args[2][77 * steps + ((cycle - 1) & mask)];
      if (x43730 != 0) {
        Fp x43731 = x41457 + x41458;
        {
          Fp x43732 = (x43731 == 0) ? Fp(1) : Fp(0);
          Fp x43733 = x71 - x43732;
          args[2][118 * steps + cycle] = x43733;
          Fp x43734 = inv(x43731);
          args[2][119 * steps + cycle] = x43734;
        }
        Fp x43735 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x43736 = x43731 * x43735;
        Fp x43737 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x43738 = x43736 - x43737;
        if (x43738 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43739 = x71 - x43737;
        Fp x43740 = x43739 * x43731;
        if (x43740 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        args[2][124 * steps + cycle] = x41455;
        args[2][125 * steps + cycle] = x41456;
        {
          Fp x43741 = Fp(x41457.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x43741;
          Fp x43742 = x41457 - x43741;
          Fp x43743 = x43742 * x10;
          Fp x43744 = Fp(x43743.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x43744;
          Fp x43745 = x43743 - x43744;
          Fp x43746 = x43745 * x10;
          Fp x43747 = Fp(x43746.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x43747;
          Fp x43748 = x43746 - x43747;
          Fp x43749 = x43748 * x10;
          Fp x43750 = Fp(x43749.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x43750;
          Fp x43751 = x43749 - x43750;
          Fp x43752 = x43751 * x10;
          Fp x43753 = Fp(x43752.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x43753;
          Fp x43754 = x43752 - x43753;
          Fp x43755 = x43754 * x10;
          Fp x43756 = Fp(x43755.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x43756;
          Fp x43757 = x43755 - x43756;
          Fp x43758 = x43757 * x10;
          Fp x43759 = Fp(x43758.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x43759;
          Fp x43760 = x43758 - x43759;
          Fp x43761 = x43760 * x10;
          Fp x43762 = Fp(x43761.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x43762;
        }
        Fp x43763 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x43764 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x43765 = x43764 * x3;
        Fp x43766 = x43763 + x43765;
        Fp x43767 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x43768 = x43767 * x11;
        Fp x43769 = x43766 + x43768;
        Fp x43770 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x43771 = x43770 * x12;
        Fp x43772 = x43769 + x43771;
        Fp x43773 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x43774 = x43773 * x13;
        Fp x43775 = x43772 + x43774;
        Fp x43776 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x43777 = x43776 * x14;
        Fp x43778 = x43775 + x43777;
        Fp x43779 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x43780 = x43779 * x15;
        Fp x43781 = x43778 + x43780;
        Fp x43782 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x43783 = x43782 * x16;
        Fp x43784 = x43781 + x43783;
        Fp x43785 = x41457 - x43784;
        Fp x43786 = x43785 * x33;
        if (x43786 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:37");
        {
          Fp x43787 = Fp(x41458.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x43787;
          Fp x43788 = x41458 - x43787;
          Fp x43789 = x43788 * x10;
          Fp x43790 = Fp(x43789.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x43790;
          Fp x43791 = x43789 - x43790;
          Fp x43792 = x43791 * x10;
          Fp x43793 = Fp(x43792.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x43793;
          Fp x43794 = x43792 - x43793;
          Fp x43795 = x43794 * x10;
          Fp x43796 = Fp(x43795.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x43796;
          Fp x43797 = x43795 - x43796;
          Fp x43798 = x43797 * x10;
          Fp x43799 = Fp(x43798.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x43799;
          Fp x43800 = x43798 - x43799;
          Fp x43801 = x43800 * x10;
          Fp x43802 = Fp(x43801.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x43802;
          Fp x43803 = x43801 - x43802;
          Fp x43804 = x43803 * x10;
          Fp x43805 = Fp(x43804.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x43805;
          Fp x43806 = x43804 - x43805;
          Fp x43807 = x43806 * x10;
          Fp x43808 = Fp(x43807.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x43808;
        }
        Fp x43809 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x43810 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x43811 = x43810 * x3;
        Fp x43812 = x43809 + x43811;
        Fp x43813 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x43814 = x43813 * x11;
        Fp x43815 = x43812 + x43814;
        Fp x43816 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x43817 = x43816 * x12;
        Fp x43818 = x43815 + x43817;
        Fp x43819 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x43820 = x43819 * x13;
        Fp x43821 = x43818 + x43820;
        Fp x43822 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x43823 = x43822 * x14;
        Fp x43824 = x43821 + x43823;
        Fp x43825 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x43826 = x43825 * x15;
        Fp x43827 = x43824 + x43826;
        Fp x43828 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x43829 = x43828 * x16;
        Fp x43830 = x43827 + x43829;
        Fp x43831 = x41458 - x43830;
        Fp x43832 = x43831 * x33;
        if (x43832 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:37");
        args[2][90 * steps + cycle] = x70;
        args[2][91 * steps + cycle] = x70;
        {
          args[2][94 * steps + cycle] = x70;
          args[2][106 * steps + cycle] = x70;
        }
        Fp x43833 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x43834 = x70 - x43833;
        if (x43834 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43835 = x43833 * x17;
        Fp x43836 = x17 - x43833;
        Fp x43837 = x43836 - x17;
        {
          Fp x43838 = (x43837 == 0) ? Fp(1) : Fp(0);
          Fp x43839 = x71 - x43838;
          args[2][95 * steps + cycle] = x43839;
          Fp x43840 = inv(x43837);
          args[2][107 * steps + cycle] = x43840;
        }
        Fp x43841 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x43842 = x43837 * x43841;
        Fp x43843 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x43844 = x43842 - x43843;
        if (x43844 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43845 = x71 - x43843;
        Fp x43846 = x43845 * x43837;
        if (x43846 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x43847 = x43843 * x43836;
        args[2][108 * steps + cycle] = x43835;
        args[2][109 * steps + cycle] = x43847;
        {
          args[2][96 * steps + cycle] = x70;
          args[2][110 * steps + cycle] = x70;
        }
        Fp x43848 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x43849 = x70 - x43848;
        if (x43849 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43850 = x43848 * x17;
        Fp x43851 = x17 - x43848;
        Fp x43852 = x43851 - x17;
        {
          Fp x43853 = (x43852 == 0) ? Fp(1) : Fp(0);
          Fp x43854 = x71 - x43853;
          args[2][97 * steps + cycle] = x43854;
          Fp x43855 = inv(x43852);
          args[2][111 * steps + cycle] = x43855;
        }
        Fp x43856 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x43857 = x43852 * x43856;
        Fp x43858 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x43859 = x43857 - x43858;
        if (x43859 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x43860 = x71 - x43858;
        Fp x43861 = x43860 * x43852;
        if (x43861 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x43862 = x43858 * x43851;
        args[2][112 * steps + cycle] = x43850;
        args[2][113 * steps + cycle] = x43862;
        Fp x43863 = args[2][125 * steps + ((cycle - 0) & mask)];
        Fp x43864 = args[2][124 * steps + ((cycle - 0) & mask)];
        Fp x43865 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x43866 = args[2][91 * steps + ((cycle - 0) & mask)];
        host_args[0] = x43863;
        host_args[1] = x43864;
        host_args[2] = x43830;
        host_args[3] = x43784;
        host_args[4] = x43865;
        host_args[5] = x43866;
        host(ctx, "log", "numer32 = %04x%04x, denom = %04x%04x, negNumer = %d, negDenom = %d", host_args.data(), 6, host_outs.data(), 0);
        {
          host_args[0] = x43864;
          host_args[1] = x43863;
          host_args[2] = x43784;
          host_args[3] = x43830;
          host(ctx, "divide32", "", host_args.data(), 4, host_outs.data(), 4);
          Fp x43867 = host_outs[0];
          Fp x43868 = host_outs[1];
          Fp x43869 = host_outs[2];
          Fp x43870 = host_outs[3];
          args[2][120 * steps + cycle] = x43867;
          args[2][121 * steps + cycle] = x43868;
          args[2][122 * steps + cycle] = x43869;
          args[2][123 * steps + cycle] = x43870;
        }
        Fp x43871 = args[2][121 * steps + ((cycle - 0) & mask)];
        Fp x43872 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x43873 = args[2][123 * steps + ((cycle - 0) & mask)];
        Fp x43874 = args[2][122 * steps + ((cycle - 0) & mask)];
        host_args[0] = x43871;
        host_args[1] = x43872;
        host_args[2] = x43873;
        host_args[3] = x43874;
        host(ctx, "log", "quot32 = %04x%04x, rem32 = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x43875 = Fp(x43872.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x43875;
          Fp x43876 = x43872 - x43875;
          Fp x43877 = x43876 * x10;
          Fp x43878 = Fp(x43877.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x43878;
          Fp x43879 = x43877 - x43878;
          Fp x43880 = x43879 * x10;
          Fp x43881 = Fp(x43880.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x43881;
          Fp x43882 = x43880 - x43881;
          Fp x43883 = x43882 * x10;
          Fp x43884 = Fp(x43883.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x43884;
          Fp x43885 = x43883 - x43884;
          Fp x43886 = x43885 * x10;
          Fp x43887 = Fp(x43886.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x43887;
          Fp x43888 = x43886 - x43887;
          Fp x43889 = x43888 * x10;
          Fp x43890 = Fp(x43889.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x43890;
          Fp x43891 = x43889 - x43890;
          Fp x43892 = x43891 * x10;
          Fp x43893 = Fp(x43892.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x43893;
          Fp x43894 = x43892 - x43893;
          Fp x43895 = x43894 * x10;
          Fp x43896 = Fp(x43895.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x43896;
        }
        Fp x43897 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x43898 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x43899 = x43898 * x3;
        Fp x43900 = x43897 + x43899;
        Fp x43901 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x43902 = x43901 * x11;
        Fp x43903 = x43900 + x43902;
        Fp x43904 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x43905 = x43904 * x12;
        Fp x43906 = x43903 + x43905;
        Fp x43907 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x43908 = x43907 * x13;
        Fp x43909 = x43906 + x43908;
        Fp x43910 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x43911 = x43910 * x14;
        Fp x43912 = x43909 + x43911;
        Fp x43913 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x43914 = x43913 * x15;
        Fp x43915 = x43912 + x43914;
        Fp x43916 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x43917 = x43916 * x16;
        Fp x43918 = x43915 + x43917;
        Fp x43919 = x43872 - x43918;
        Fp x43920 = x43919 * x33;
        if (x43920 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x43921 = Fp(x43871.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x43921;
          Fp x43922 = x43871 - x43921;
          Fp x43923 = x43922 * x10;
          Fp x43924 = Fp(x43923.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x43924;
          Fp x43925 = x43923 - x43924;
          Fp x43926 = x43925 * x10;
          Fp x43927 = Fp(x43926.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x43927;
          Fp x43928 = x43926 - x43927;
          Fp x43929 = x43928 * x10;
          Fp x43930 = Fp(x43929.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x43930;
          Fp x43931 = x43929 - x43930;
          Fp x43932 = x43931 * x10;
          Fp x43933 = Fp(x43932.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x43933;
          Fp x43934 = x43932 - x43933;
          Fp x43935 = x43934 * x10;
          Fp x43936 = Fp(x43935.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x43936;
          Fp x43937 = x43935 - x43936;
          Fp x43938 = x43937 * x10;
          Fp x43939 = Fp(x43938.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x43939;
          Fp x43940 = x43938 - x43939;
          Fp x43941 = x43940 * x10;
          Fp x43942 = Fp(x43941.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x43942;
        }
        Fp x43943 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x43944 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x43945 = x43944 * x3;
        Fp x43946 = x43943 + x43945;
        Fp x43947 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x43948 = x43947 * x11;
        Fp x43949 = x43946 + x43948;
        Fp x43950 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x43951 = x43950 * x12;
        Fp x43952 = x43949 + x43951;
        Fp x43953 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x43954 = x43953 * x13;
        Fp x43955 = x43952 + x43954;
        Fp x43956 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x43957 = x43956 * x14;
        Fp x43958 = x43955 + x43957;
        Fp x43959 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x43960 = x43959 * x15;
        Fp x43961 = x43958 + x43960;
        Fp x43962 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x43963 = x43962 * x16;
        Fp x43964 = x43961 + x43963;
        Fp x43965 = x43871 - x43964;
        Fp x43966 = x43965 * x33;
        if (x43966 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x43967 = Fp(x43874.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x43967;
          Fp x43968 = x43874 - x43967;
          Fp x43969 = x43968 * x10;
          Fp x43970 = Fp(x43969.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x43970;
          Fp x43971 = x43969 - x43970;
          Fp x43972 = x43971 * x10;
          Fp x43973 = Fp(x43972.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x43973;
          Fp x43974 = x43972 - x43973;
          Fp x43975 = x43974 * x10;
          Fp x43976 = Fp(x43975.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x43976;
          Fp x43977 = x43975 - x43976;
          Fp x43978 = x43977 * x10;
          Fp x43979 = Fp(x43978.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x43979;
          Fp x43980 = x43978 - x43979;
          Fp x43981 = x43980 * x10;
          Fp x43982 = Fp(x43981.asUInt32() & x2.asUInt32());
          args[2][37 * steps + cycle] = x43982;
          Fp x43983 = x43981 - x43982;
          Fp x43984 = x43983 * x10;
          Fp x43985 = Fp(x43984.asUInt32() & x2.asUInt32());
          args[2][38 * steps + cycle] = x43985;
          Fp x43986 = x43984 - x43985;
          Fp x43987 = x43986 * x10;
          Fp x43988 = Fp(x43987.asUInt32() & x2.asUInt32());
          args[2][39 * steps + cycle] = x43988;
        }
        Fp x43989 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x43990 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x43991 = x43990 * x3;
        Fp x43992 = x43989 + x43991;
        Fp x43993 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x43994 = x43993 * x11;
        Fp x43995 = x43992 + x43994;
        Fp x43996 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x43997 = x43996 * x12;
        Fp x43998 = x43995 + x43997;
        Fp x43999 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x44000 = x43999 * x13;
        Fp x44001 = x43998 + x44000;
        Fp x44002 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x44003 = x44002 * x14;
        Fp x44004 = x44001 + x44003;
        Fp x44005 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x44006 = x44005 * x15;
        Fp x44007 = x44004 + x44006;
        Fp x44008 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x44009 = x44008 * x16;
        Fp x44010 = x44007 + x44009;
        Fp x44011 = x43874 - x44010;
        Fp x44012 = x44011 * x33;
        if (x44012 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        {
          Fp x44013 = Fp(x43873.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x44013;
          Fp x44014 = x43873 - x44013;
          Fp x44015 = x44014 * x10;
          Fp x44016 = Fp(x44015.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x44016;
          Fp x44017 = x44015 - x44016;
          Fp x44018 = x44017 * x10;
          Fp x44019 = Fp(x44018.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x44019;
          Fp x44020 = x44018 - x44019;
          Fp x44021 = x44020 * x10;
          Fp x44022 = Fp(x44021.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x44022;
          Fp x44023 = x44021 - x44022;
          Fp x44024 = x44023 * x10;
          Fp x44025 = Fp(x44024.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x44025;
          Fp x44026 = x44024 - x44025;
          Fp x44027 = x44026 * x10;
          Fp x44028 = Fp(x44027.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x44028;
          Fp x44029 = x44027 - x44028;
          Fp x44030 = x44029 * x10;
          Fp x44031 = Fp(x44030.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x44031;
          Fp x44032 = x44030 - x44031;
          Fp x44033 = x44032 * x10;
          Fp x44034 = Fp(x44033.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x44034;
        }
        Fp x44035 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x44036 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x44037 = x44036 * x3;
        Fp x44038 = x44035 + x44037;
        Fp x44039 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x44040 = x44039 * x11;
        Fp x44041 = x44038 + x44040;
        Fp x44042 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x44043 = x44042 * x12;
        Fp x44044 = x44041 + x44043;
        Fp x44045 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x44046 = x44045 * x13;
        Fp x44047 = x44044 + x44046;
        Fp x44048 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x44049 = x44048 * x14;
        Fp x44050 = x44047 + x44049;
        Fp x44051 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x44052 = x44051 * x15;
        Fp x44053 = x44050 + x44052;
        Fp x44054 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x44055 = x44054 * x16;
        Fp x44056 = x44053 + x44055;
        Fp x44057 = x43873 - x44056;
        Fp x44058 = x44057 * x33;
        if (x44058 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        if (x43737 != 0) {
          Fp x44059 = x43784 + x17;
          Fp x44060 = x44059 - x44010;
          Fp x44061 = x44060 - x71;
          {
            Fp x44062 = Fp(x44061.asUInt32() & x2.asUInt32());
            args[2][48 * steps + cycle] = x44062;
            Fp x44063 = x44061 - x44062;
            Fp x44064 = x44063 * x10;
            Fp x44065 = Fp(x44064.asUInt32() & x2.asUInt32());
            args[2][49 * steps + cycle] = x44065;
            Fp x44066 = x44064 - x44065;
            Fp x44067 = x44066 * x10;
            Fp x44068 = Fp(x44067.asUInt32() & x2.asUInt32());
            args[2][50 * steps + cycle] = x44068;
            Fp x44069 = x44067 - x44068;
            Fp x44070 = x44069 * x10;
            Fp x44071 = Fp(x44070.asUInt32() & x2.asUInt32());
            args[2][51 * steps + cycle] = x44071;
            Fp x44072 = x44070 - x44071;
            Fp x44073 = x44072 * x10;
            Fp x44074 = Fp(x44073.asUInt32() & x2.asUInt32());
            args[2][52 * steps + cycle] = x44074;
            Fp x44075 = x44073 - x44074;
            Fp x44076 = x44075 * x10;
            Fp x44077 = Fp(x44076.asUInt32() & x2.asUInt32());
            args[2][53 * steps + cycle] = x44077;
            Fp x44078 = x44076 - x44077;
            Fp x44079 = x44078 * x10;
            Fp x44080 = Fp(x44079.asUInt32() & x2.asUInt32());
            args[2][54 * steps + cycle] = x44080;
            Fp x44081 = x44079 - x44080;
            Fp x44082 = x44081 * x10;
            Fp x44083 = Fp(x44082.asUInt32() & x2.asUInt32());
            args[2][55 * steps + cycle] = x44083;
          }
          Fp x44084 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x44085 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x44086 = x44085 * x3;
          Fp x44087 = x44084 + x44086;
          Fp x44088 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x44089 = x44088 * x11;
          Fp x44090 = x44087 + x44089;
          Fp x44091 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x44092 = x44091 * x12;
          Fp x44093 = x44090 + x44092;
          Fp x44094 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x44095 = x44094 * x13;
          Fp x44096 = x44093 + x44095;
          Fp x44097 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x44098 = x44097 * x14;
          Fp x44099 = x44096 + x44098;
          Fp x44100 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x44101 = x44100 * x15;
          Fp x44102 = x44099 + x44101;
          Fp x44103 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x44104 = x44103 * x16;
          Fp x44105 = x44102 + x44104;
          Fp x44106 = x44061 - x44105;
          Fp x44107 = x44106 * x33;
          args[2][93 * steps + cycle] = x44107;
          Fp x44108 = x43830 - x44056;
          Fp x44109 = x44108 - x71;
          Fp x44110 = args[2][93 * steps + ((cycle - 0) & mask)];
          Fp x44111 = x44109 + x44110;
          {
            Fp x44112 = Fp(x44111.asUInt32() & x2.asUInt32());
            args[2][56 * steps + cycle] = x44112;
            Fp x44113 = x44111 - x44112;
            Fp x44114 = x44113 * x10;
            Fp x44115 = Fp(x44114.asUInt32() & x2.asUInt32());
            args[2][57 * steps + cycle] = x44115;
            Fp x44116 = x44114 - x44115;
            Fp x44117 = x44116 * x10;
            Fp x44118 = Fp(x44117.asUInt32() & x2.asUInt32());
            args[2][58 * steps + cycle] = x44118;
            Fp x44119 = x44117 - x44118;
            Fp x44120 = x44119 * x10;
            Fp x44121 = Fp(x44120.asUInt32() & x2.asUInt32());
            args[2][59 * steps + cycle] = x44121;
            Fp x44122 = x44120 - x44121;
            Fp x44123 = x44122 * x10;
            Fp x44124 = Fp(x44123.asUInt32() & x2.asUInt32());
            args[2][60 * steps + cycle] = x44124;
            Fp x44125 = x44123 - x44124;
            Fp x44126 = x44125 * x10;
            Fp x44127 = Fp(x44126.asUInt32() & x2.asUInt32());
            args[2][61 * steps + cycle] = x44127;
            Fp x44128 = x44126 - x44127;
            Fp x44129 = x44128 * x10;
            Fp x44130 = Fp(x44129.asUInt32() & x2.asUInt32());
            args[2][62 * steps + cycle] = x44130;
            Fp x44131 = x44129 - x44130;
            Fp x44132 = x44131 * x10;
            Fp x44133 = Fp(x44132.asUInt32() & x2.asUInt32());
            args[2][63 * steps + cycle] = x44133;
          }
          Fp x44134 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x44135 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x44136 = x44135 * x3;
          Fp x44137 = x44134 + x44136;
          Fp x44138 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x44139 = x44138 * x11;
          Fp x44140 = x44137 + x44139;
          Fp x44141 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x44142 = x44141 * x12;
          Fp x44143 = x44140 + x44142;
          Fp x44144 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x44145 = x44144 * x13;
          Fp x44146 = x44143 + x44145;
          Fp x44147 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x44148 = x44147 * x14;
          Fp x44149 = x44146 + x44148;
          Fp x44150 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x44151 = x44150 * x15;
          Fp x44152 = x44149 + x44151;
          Fp x44153 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x44154 = x44153 * x16;
          Fp x44155 = x44152 + x44154;
          Fp x44156 = x44111 - x44155;
          Fp x44157 = x44156 * x33;
          if (x44157 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:91");
        }
        Fp x44158 = x43912 * x43778;
        Fp x44159 = x44158 + x44004;
        {
          Fp x44160 = Fp(x44159.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x44160;
          Fp x44161 = x44159 - x44160;
          Fp x44162 = x44161 * x10;
          Fp x44163 = Fp(x44162.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x44163;
          Fp x44164 = x44162 - x44163;
          Fp x44165 = x44164 * x10;
          Fp x44166 = Fp(x44165.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x44166;
          Fp x44167 = x44165 - x44166;
          Fp x44168 = x44167 * x10;
          Fp x44169 = Fp(x44168.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x44169;
          Fp x44170 = x44168 - x44169;
          Fp x44171 = x44170 * x10;
          Fp x44172 = Fp(x44171.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x44172;
          Fp x44173 = x44171 - x44172;
          Fp x44174 = x44173 * x10;
          Fp x44175 = Fp(x44174.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x44175;
          Fp x44176 = x44174 - x44175;
          Fp x44177 = x44176 * x10;
          Fp x44178 = Fp(x44177.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x44178;
          Fp x44179 = x44177 - x44178;
          Fp x44180 = x44179 * x10;
          Fp x44181 = Fp(x44180.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x44181;
          Fp x44182 = x44180 - x44181;
          Fp x44183 = x44182 * x10;
          Fp x44184 = Fp(x44183.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x44184;
          Fp x44185 = x44183 - x44184;
          Fp x44186 = x44185 * x10;
          Fp x44187 = Fp(x44186.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x44187;
          Fp x44188 = x44186 - x44187;
          Fp x44189 = x44188 * x10;
          Fp x44190 = Fp(x44189.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x44190;
          Fp x44191 = x44189 - x44190;
          Fp x44192 = x44191 * x10;
          Fp x44193 = Fp(x44192.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x44193;
        }
        Fp x44194 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x44195 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x44196 = x44195 * x3;
        Fp x44197 = x44194 + x44196;
        Fp x44198 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x44199 = x44198 * x11;
        Fp x44200 = x44197 + x44199;
        Fp x44201 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x44202 = x44201 * x12;
        Fp x44203 = x44200 + x44202;
        Fp x44204 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x44205 = x44204 * x13;
        Fp x44206 = x44203 + x44205;
        Fp x44207 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x44208 = x44207 * x14;
        Fp x44209 = x44206 + x44208;
        Fp x44210 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x44211 = x44210 * x15;
        Fp x44212 = x44209 + x44211;
        Fp x44213 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x44214 = x44213 * x16;
        Fp x44215 = x44212 + x44214;
        Fp x44216 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x44217 = x44216 * x17;
        Fp x44218 = x44215 + x44217;
        Fp x44219 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x44220 = x44219 * x18;
        Fp x44221 = x44218 + x44220;
        Fp x44222 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x44223 = x44222 * x19;
        Fp x44224 = x44221 + x44223;
        Fp x44225 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x44226 = x44225 * x20;
        Fp x44227 = x44224 + x44226;
        Fp x44228 = x44159 - x44227;
        Fp x44229 = x44228 * x62;
        if (x44229 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:94");
        Fp x44230 = x43782 * x3;
        Fp x44231 = x43779 + x44230;
        Fp x44232 = x43809 * x11;
        Fp x44233 = x44231 + x44232;
        Fp x44234 = x43810 * x12;
        Fp x44235 = x44233 + x44234;
        Fp x44236 = x43813 * x13;
        Fp x44237 = x44235 + x44236;
        Fp x44238 = x43816 * x14;
        Fp x44239 = x44237 + x44238;
        Fp x44240 = x43912 * x44239;
        Fp x44241 = x43916 * x3;
        Fp x44242 = x43913 + x44241;
        Fp x44243 = x43943 * x11;
        Fp x44244 = x44242 + x44243;
        Fp x44245 = x43944 * x12;
        Fp x44246 = x44244 + x44245;
        Fp x44247 = x43947 * x13;
        Fp x44248 = x44246 + x44247;
        Fp x44249 = x43950 * x14;
        Fp x44250 = x44248 + x44249;
        Fp x44251 = x44250 * x43778;
        Fp x44252 = x44240 + x44251;
        Fp x44253 = x44008 * x3;
        Fp x44254 = x44005 + x44253;
        Fp x44255 = x44035 * x11;
        Fp x44256 = x44254 + x44255;
        Fp x44257 = x44036 * x12;
        Fp x44258 = x44256 + x44257;
        Fp x44259 = x44039 * x13;
        Fp x44260 = x44258 + x44259;
        Fp x44261 = x44042 * x14;
        Fp x44262 = x44260 + x44261;
        Fp x44263 = x44252 + x44262;
        Fp x44264 = x44213 * x3;
        Fp x44265 = x44210 + x44264;
        Fp x44266 = x44216 * x11;
        Fp x44267 = x44265 + x44266;
        Fp x44268 = x44219 * x12;
        Fp x44269 = x44267 + x44268;
        Fp x44270 = x44222 * x13;
        Fp x44271 = x44269 + x44270;
        Fp x44272 = x44225 * x14;
        Fp x44273 = x44271 + x44272;
        Fp x44274 = x44263 + x44273;
        {
          Fp x44275 = Fp(x44274.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x44275;
          Fp x44276 = x44274 - x44275;
          Fp x44277 = x44276 * x10;
          Fp x44278 = Fp(x44277.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x44278;
          Fp x44279 = x44277 - x44278;
          Fp x44280 = x44279 * x10;
          Fp x44281 = Fp(x44280.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x44281;
          Fp x44282 = x44280 - x44281;
          Fp x44283 = x44282 * x10;
          Fp x44284 = Fp(x44283.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x44284;
          Fp x44285 = x44283 - x44284;
          Fp x44286 = x44285 * x10;
          Fp x44287 = Fp(x44286.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x44287;
          Fp x44288 = x44286 - x44287;
          Fp x44289 = x44288 * x10;
          Fp x44290 = Fp(x44289.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x44290;
          Fp x44291 = x44289 - x44290;
          Fp x44292 = x44291 * x10;
          Fp x44293 = Fp(x44292.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x44293;
          Fp x44294 = x44292 - x44293;
          Fp x44295 = x44294 * x10;
          Fp x44296 = Fp(x44295.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x44296;
          Fp x44297 = x44295 - x44296;
          Fp x44298 = x44297 * x10;
          Fp x44299 = Fp(x44298.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x44299;
          Fp x44300 = x44298 - x44299;
          Fp x44301 = x44300 * x10;
          Fp x44302 = Fp(x44301.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x44302;
        }
        Fp x44303 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x44304 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x44305 = x44304 * x3;
        Fp x44306 = x44303 + x44305;
        Fp x44307 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x44308 = x44307 * x11;
        Fp x44309 = x44306 + x44308;
        Fp x44310 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x44311 = x44310 * x12;
        Fp x44312 = x44309 + x44311;
        Fp x44313 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x44314 = x44313 * x13;
        Fp x44315 = x44312 + x44314;
        Fp x44316 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x44317 = x44316 * x14;
        Fp x44318 = x44315 + x44317;
        Fp x44319 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x44320 = x44319 * x15;
        Fp x44321 = x44318 + x44320;
        Fp x44322 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x44323 = x44322 * x16;
        Fp x44324 = x44321 + x44323;
        Fp x44325 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x44326 = x44325 * x17;
        Fp x44327 = x44324 + x44326;
        Fp x44328 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x44329 = x44328 * x18;
        Fp x44330 = x44327 + x44329;
        Fp x44331 = x44274 - x44330;
        Fp x44332 = x44331 * x66;
        if (x44332 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:95");
        Fp x44333 = x43822 * x3;
        Fp x44334 = x43819 + x44333;
        Fp x44335 = x43825 * x11;
        Fp x44336 = x44334 + x44335;
        Fp x44337 = x43828 * x12;
        Fp x44338 = x44336 + x44337;
        Fp x44339 = x43912 * x44338;
        Fp x44340 = x44250 * x44239;
        Fp x44341 = x44339 + x44340;
        Fp x44342 = x43956 * x3;
        Fp x44343 = x43953 + x44342;
        Fp x44344 = x43959 * x11;
        Fp x44345 = x44343 + x44344;
        Fp x44346 = x43962 * x12;
        Fp x44347 = x44345 + x44346;
        Fp x44348 = x44347 * x43778;
        Fp x44349 = x44341 + x44348;
        Fp x44350 = x44048 * x3;
        Fp x44351 = x44045 + x44350;
        Fp x44352 = x44051 * x11;
        Fp x44353 = x44351 + x44352;
        Fp x44354 = x44054 * x12;
        Fp x44355 = x44353 + x44354;
        Fp x44356 = x44349 + x44355;
        Fp x44357 = x44322 * x3;
        Fp x44358 = x44319 + x44357;
        Fp x44359 = x44325 * x11;
        Fp x44360 = x44358 + x44359;
        Fp x44361 = x44328 * x12;
        Fp x44362 = x44360 + x44361;
        Fp x44363 = x44356 + x44362;
        {
          Fp x44364 = Fp(x44363.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x44364;
          Fp x44365 = x44363 - x44364;
          Fp x44366 = x44365 * x10;
          Fp x44367 = Fp(x44366.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x44367;
          Fp x44368 = x44366 - x44367;
          Fp x44369 = x44368 * x10;
          Fp x44370 = Fp(x44369.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x44370;
          Fp x44371 = x44369 - x44370;
          Fp x44372 = x44371 * x10;
          Fp x44373 = Fp(x44372.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x44373;
        }
        Fp x44374 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x44375 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x44376 = x44375 * x3;
        Fp x44377 = x44374 + x44376;
        Fp x44378 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x44379 = x44378 * x11;
        Fp x44380 = x44377 + x44379;
        Fp x44381 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x44382 = x44381 * x12;
        Fp x44383 = x44380 + x44382;
        Fp x44384 = x44363 - x44383;
        Fp x44385 = x44384 * x67;
        if (x44385 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:100");
        host_args[0] = x44227;
        host_args[1] = x44330;
        host_args[2] = x44383;
        host(ctx, "log", "numer0=0x%06x, numer1=0x%05x, numer2=0x%02x", host_args.data(), 3, host_outs.data(), 0);
        Fp x44386 = x44306 * x15;
        Fp x44387 = x44209 + x44386;
        Fp x44388 = x44387 - x43864;
        if (x44388 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:108");
        Fp x44389 = x44310 * x3;
        Fp x44390 = x44307 + x44389;
        Fp x44391 = x44313 * x11;
        Fp x44392 = x44390 + x44391;
        Fp x44393 = x44316 * x12;
        Fp x44394 = x44392 + x44393;
        Fp x44395 = x44383 * x13;
        Fp x44396 = x44394 + x44395;
        Fp x44397 = x44396 - x43863;
        if (x44397 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:109");
        args[2][92 * steps + cycle] = x70;
        args[2][100 * steps + cycle] = x43874;
        args[2][101 * steps + cycle] = x43873;
        {
          args[2][98 * steps + cycle] = x70;
          args[2][114 * steps + cycle] = x70;
        }
        Fp x44398 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x44399 = x70 - x44398;
        if (x44399 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x44400 = x44398 * x17;
        Fp x44401 = x17 - x44398;
        Fp x44402 = x44401 - x17;
        {
          Fp x44403 = (x44402 == 0) ? Fp(1) : Fp(0);
          Fp x44404 = x71 - x44403;
          args[2][99 * steps + cycle] = x44404;
          Fp x44405 = inv(x44402);
          args[2][115 * steps + cycle] = x44405;
        }
        Fp x44406 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x44407 = x44402 * x44406;
        Fp x44408 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x44409 = x44407 - x44408;
        if (x44409 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x44410 = x71 - x44408;
        Fp x44411 = x44410 * x44402;
        if (x44411 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x44412 = x44408 * x44401;
        args[2][116 * steps + cycle] = x44400;
        args[2][117 * steps + cycle] = x44412;
      }
      Fp x44413 = args[2][78 * steps + ((cycle - 1) & mask)];
      if (x44413 != 0) {
        Fp x44414 = x41504 + x41550;
        {
          Fp x44415 = (x44414 == 0) ? Fp(1) : Fp(0);
          Fp x44416 = x71 - x44415;
          args[2][118 * steps + cycle] = x44416;
          Fp x44417 = inv(x44414);
          args[2][119 * steps + cycle] = x44417;
        }
        Fp x44418 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x44419 = x44414 * x44418;
        Fp x44420 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x44421 = x44419 - x44420;
        if (x44421 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x44422 = x71 - x44420;
        Fp x44423 = x44422 * x44414;
        if (x44423 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        args[2][124 * steps + cycle] = x41455;
        args[2][125 * steps + cycle] = x41456;
        {
          Fp x44424 = Fp(x41504.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x44424;
          Fp x44425 = x41504 - x44424;
          Fp x44426 = x44425 * x10;
          Fp x44427 = Fp(x44426.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x44427;
          Fp x44428 = x44426 - x44427;
          Fp x44429 = x44428 * x10;
          Fp x44430 = Fp(x44429.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x44430;
          Fp x44431 = x44429 - x44430;
          Fp x44432 = x44431 * x10;
          Fp x44433 = Fp(x44432.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x44433;
          Fp x44434 = x44432 - x44433;
          Fp x44435 = x44434 * x10;
          Fp x44436 = Fp(x44435.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x44436;
          Fp x44437 = x44435 - x44436;
          Fp x44438 = x44437 * x10;
          Fp x44439 = Fp(x44438.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x44439;
          Fp x44440 = x44438 - x44439;
          Fp x44441 = x44440 * x10;
          Fp x44442 = Fp(x44441.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x44442;
          Fp x44443 = x44441 - x44442;
          Fp x44444 = x44443 * x10;
          Fp x44445 = Fp(x44444.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x44445;
        }
        Fp x44446 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x44447 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x44448 = x44447 * x3;
        Fp x44449 = x44446 + x44448;
        Fp x44450 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x44451 = x44450 * x11;
        Fp x44452 = x44449 + x44451;
        Fp x44453 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x44454 = x44453 * x12;
        Fp x44455 = x44452 + x44454;
        Fp x44456 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x44457 = x44456 * x13;
        Fp x44458 = x44455 + x44457;
        Fp x44459 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x44460 = x44459 * x14;
        Fp x44461 = x44458 + x44460;
        Fp x44462 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x44463 = x44462 * x15;
        Fp x44464 = x44461 + x44463;
        Fp x44465 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x44466 = x44465 * x16;
        Fp x44467 = x44464 + x44466;
        Fp x44468 = x41504 - x44467;
        Fp x44469 = x44468 * x33;
        if (x44469 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:37");
        {
          Fp x44470 = Fp(x41550.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x44470;
          Fp x44471 = x41550 - x44470;
          Fp x44472 = x44471 * x10;
          Fp x44473 = Fp(x44472.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x44473;
          Fp x44474 = x44472 - x44473;
          Fp x44475 = x44474 * x10;
          Fp x44476 = Fp(x44475.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x44476;
          Fp x44477 = x44475 - x44476;
          Fp x44478 = x44477 * x10;
          Fp x44479 = Fp(x44478.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x44479;
          Fp x44480 = x44478 - x44479;
          Fp x44481 = x44480 * x10;
          Fp x44482 = Fp(x44481.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x44482;
          Fp x44483 = x44481 - x44482;
          Fp x44484 = x44483 * x10;
          Fp x44485 = Fp(x44484.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x44485;
          Fp x44486 = x44484 - x44485;
          Fp x44487 = x44486 * x10;
          Fp x44488 = Fp(x44487.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x44488;
          Fp x44489 = x44487 - x44488;
          Fp x44490 = x44489 * x10;
          Fp x44491 = Fp(x44490.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x44491;
        }
        Fp x44492 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x44493 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x44494 = x44493 * x3;
        Fp x44495 = x44492 + x44494;
        Fp x44496 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x44497 = x44496 * x11;
        Fp x44498 = x44495 + x44497;
        Fp x44499 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x44500 = x44499 * x12;
        Fp x44501 = x44498 + x44500;
        Fp x44502 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x44503 = x44502 * x13;
        Fp x44504 = x44501 + x44503;
        Fp x44505 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x44506 = x44505 * x14;
        Fp x44507 = x44504 + x44506;
        Fp x44508 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x44509 = x44508 * x15;
        Fp x44510 = x44507 + x44509;
        Fp x44511 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x44512 = x44511 * x16;
        Fp x44513 = x44510 + x44512;
        Fp x44514 = x41550 - x44513;
        Fp x44515 = x44514 * x33;
        if (x44515 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:37");
        args[2][90 * steps + cycle] = x70;
        args[2][91 * steps + cycle] = x70;
        {
          args[2][94 * steps + cycle] = x70;
          args[2][106 * steps + cycle] = x70;
        }
        Fp x44516 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x44517 = x70 - x44516;
        if (x44517 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x44518 = x44516 * x17;
        Fp x44519 = x17 - x44516;
        Fp x44520 = x44519 - x17;
        {
          Fp x44521 = (x44520 == 0) ? Fp(1) : Fp(0);
          Fp x44522 = x71 - x44521;
          args[2][95 * steps + cycle] = x44522;
          Fp x44523 = inv(x44520);
          args[2][107 * steps + cycle] = x44523;
        }
        Fp x44524 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x44525 = x44520 * x44524;
        Fp x44526 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x44527 = x44525 - x44526;
        if (x44527 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x44528 = x71 - x44526;
        Fp x44529 = x44528 * x44520;
        if (x44529 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x44530 = x44526 * x44519;
        args[2][108 * steps + cycle] = x44518;
        args[2][109 * steps + cycle] = x44530;
        {
          args[2][96 * steps + cycle] = x70;
          args[2][110 * steps + cycle] = x70;
        }
        Fp x44531 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x44532 = x70 - x44531;
        if (x44532 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x44533 = x44531 * x17;
        Fp x44534 = x17 - x44531;
        Fp x44535 = x44534 - x17;
        {
          Fp x44536 = (x44535 == 0) ? Fp(1) : Fp(0);
          Fp x44537 = x71 - x44536;
          args[2][97 * steps + cycle] = x44537;
          Fp x44538 = inv(x44535);
          args[2][111 * steps + cycle] = x44538;
        }
        Fp x44539 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x44540 = x44535 * x44539;
        Fp x44541 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x44542 = x44540 - x44541;
        if (x44542 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x44543 = x71 - x44541;
        Fp x44544 = x44543 * x44535;
        if (x44544 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x44545 = x44541 * x44534;
        args[2][112 * steps + cycle] = x44533;
        args[2][113 * steps + cycle] = x44545;
        Fp x44546 = args[2][125 * steps + ((cycle - 0) & mask)];
        Fp x44547 = args[2][124 * steps + ((cycle - 0) & mask)];
        Fp x44548 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x44549 = args[2][91 * steps + ((cycle - 0) & mask)];
        host_args[0] = x44546;
        host_args[1] = x44547;
        host_args[2] = x44513;
        host_args[3] = x44467;
        host_args[4] = x44548;
        host_args[5] = x44549;
        host(ctx, "log", "numer32 = %04x%04x, denom = %04x%04x, negNumer = %d, negDenom = %d", host_args.data(), 6, host_outs.data(), 0);
        {
          host_args[0] = x44547;
          host_args[1] = x44546;
          host_args[2] = x44467;
          host_args[3] = x44513;
          host(ctx, "divide32", "", host_args.data(), 4, host_outs.data(), 4);
          Fp x44550 = host_outs[0];
          Fp x44551 = host_outs[1];
          Fp x44552 = host_outs[2];
          Fp x44553 = host_outs[3];
          args[2][120 * steps + cycle] = x44550;
          args[2][121 * steps + cycle] = x44551;
          args[2][122 * steps + cycle] = x44552;
          args[2][123 * steps + cycle] = x44553;
        }
        Fp x44554 = args[2][121 * steps + ((cycle - 0) & mask)];
        Fp x44555 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x44556 = args[2][123 * steps + ((cycle - 0) & mask)];
        Fp x44557 = args[2][122 * steps + ((cycle - 0) & mask)];
        host_args[0] = x44554;
        host_args[1] = x44555;
        host_args[2] = x44556;
        host_args[3] = x44557;
        host(ctx, "log", "quot32 = %04x%04x, rem32 = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x44558 = Fp(x44555.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x44558;
          Fp x44559 = x44555 - x44558;
          Fp x44560 = x44559 * x10;
          Fp x44561 = Fp(x44560.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x44561;
          Fp x44562 = x44560 - x44561;
          Fp x44563 = x44562 * x10;
          Fp x44564 = Fp(x44563.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x44564;
          Fp x44565 = x44563 - x44564;
          Fp x44566 = x44565 * x10;
          Fp x44567 = Fp(x44566.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x44567;
          Fp x44568 = x44566 - x44567;
          Fp x44569 = x44568 * x10;
          Fp x44570 = Fp(x44569.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x44570;
          Fp x44571 = x44569 - x44570;
          Fp x44572 = x44571 * x10;
          Fp x44573 = Fp(x44572.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x44573;
          Fp x44574 = x44572 - x44573;
          Fp x44575 = x44574 * x10;
          Fp x44576 = Fp(x44575.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x44576;
          Fp x44577 = x44575 - x44576;
          Fp x44578 = x44577 * x10;
          Fp x44579 = Fp(x44578.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x44579;
        }
        Fp x44580 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x44581 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x44582 = x44581 * x3;
        Fp x44583 = x44580 + x44582;
        Fp x44584 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x44585 = x44584 * x11;
        Fp x44586 = x44583 + x44585;
        Fp x44587 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x44588 = x44587 * x12;
        Fp x44589 = x44586 + x44588;
        Fp x44590 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x44591 = x44590 * x13;
        Fp x44592 = x44589 + x44591;
        Fp x44593 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x44594 = x44593 * x14;
        Fp x44595 = x44592 + x44594;
        Fp x44596 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x44597 = x44596 * x15;
        Fp x44598 = x44595 + x44597;
        Fp x44599 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x44600 = x44599 * x16;
        Fp x44601 = x44598 + x44600;
        Fp x44602 = x44555 - x44601;
        Fp x44603 = x44602 * x33;
        if (x44603 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x44604 = Fp(x44554.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x44604;
          Fp x44605 = x44554 - x44604;
          Fp x44606 = x44605 * x10;
          Fp x44607 = Fp(x44606.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x44607;
          Fp x44608 = x44606 - x44607;
          Fp x44609 = x44608 * x10;
          Fp x44610 = Fp(x44609.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x44610;
          Fp x44611 = x44609 - x44610;
          Fp x44612 = x44611 * x10;
          Fp x44613 = Fp(x44612.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x44613;
          Fp x44614 = x44612 - x44613;
          Fp x44615 = x44614 * x10;
          Fp x44616 = Fp(x44615.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x44616;
          Fp x44617 = x44615 - x44616;
          Fp x44618 = x44617 * x10;
          Fp x44619 = Fp(x44618.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x44619;
          Fp x44620 = x44618 - x44619;
          Fp x44621 = x44620 * x10;
          Fp x44622 = Fp(x44621.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x44622;
          Fp x44623 = x44621 - x44622;
          Fp x44624 = x44623 * x10;
          Fp x44625 = Fp(x44624.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x44625;
        }
        Fp x44626 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x44627 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x44628 = x44627 * x3;
        Fp x44629 = x44626 + x44628;
        Fp x44630 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x44631 = x44630 * x11;
        Fp x44632 = x44629 + x44631;
        Fp x44633 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x44634 = x44633 * x12;
        Fp x44635 = x44632 + x44634;
        Fp x44636 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x44637 = x44636 * x13;
        Fp x44638 = x44635 + x44637;
        Fp x44639 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x44640 = x44639 * x14;
        Fp x44641 = x44638 + x44640;
        Fp x44642 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x44643 = x44642 * x15;
        Fp x44644 = x44641 + x44643;
        Fp x44645 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x44646 = x44645 * x16;
        Fp x44647 = x44644 + x44646;
        Fp x44648 = x44554 - x44647;
        Fp x44649 = x44648 * x33;
        if (x44649 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x44650 = Fp(x44557.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x44650;
          Fp x44651 = x44557 - x44650;
          Fp x44652 = x44651 * x10;
          Fp x44653 = Fp(x44652.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x44653;
          Fp x44654 = x44652 - x44653;
          Fp x44655 = x44654 * x10;
          Fp x44656 = Fp(x44655.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x44656;
          Fp x44657 = x44655 - x44656;
          Fp x44658 = x44657 * x10;
          Fp x44659 = Fp(x44658.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x44659;
          Fp x44660 = x44658 - x44659;
          Fp x44661 = x44660 * x10;
          Fp x44662 = Fp(x44661.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x44662;
          Fp x44663 = x44661 - x44662;
          Fp x44664 = x44663 * x10;
          Fp x44665 = Fp(x44664.asUInt32() & x2.asUInt32());
          args[2][37 * steps + cycle] = x44665;
          Fp x44666 = x44664 - x44665;
          Fp x44667 = x44666 * x10;
          Fp x44668 = Fp(x44667.asUInt32() & x2.asUInt32());
          args[2][38 * steps + cycle] = x44668;
          Fp x44669 = x44667 - x44668;
          Fp x44670 = x44669 * x10;
          Fp x44671 = Fp(x44670.asUInt32() & x2.asUInt32());
          args[2][39 * steps + cycle] = x44671;
        }
        Fp x44672 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x44673 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x44674 = x44673 * x3;
        Fp x44675 = x44672 + x44674;
        Fp x44676 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x44677 = x44676 * x11;
        Fp x44678 = x44675 + x44677;
        Fp x44679 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x44680 = x44679 * x12;
        Fp x44681 = x44678 + x44680;
        Fp x44682 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x44683 = x44682 * x13;
        Fp x44684 = x44681 + x44683;
        Fp x44685 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x44686 = x44685 * x14;
        Fp x44687 = x44684 + x44686;
        Fp x44688 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x44689 = x44688 * x15;
        Fp x44690 = x44687 + x44689;
        Fp x44691 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x44692 = x44691 * x16;
        Fp x44693 = x44690 + x44692;
        Fp x44694 = x44557 - x44693;
        Fp x44695 = x44694 * x33;
        if (x44695 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        {
          Fp x44696 = Fp(x44556.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x44696;
          Fp x44697 = x44556 - x44696;
          Fp x44698 = x44697 * x10;
          Fp x44699 = Fp(x44698.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x44699;
          Fp x44700 = x44698 - x44699;
          Fp x44701 = x44700 * x10;
          Fp x44702 = Fp(x44701.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x44702;
          Fp x44703 = x44701 - x44702;
          Fp x44704 = x44703 * x10;
          Fp x44705 = Fp(x44704.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x44705;
          Fp x44706 = x44704 - x44705;
          Fp x44707 = x44706 * x10;
          Fp x44708 = Fp(x44707.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x44708;
          Fp x44709 = x44707 - x44708;
          Fp x44710 = x44709 * x10;
          Fp x44711 = Fp(x44710.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x44711;
          Fp x44712 = x44710 - x44711;
          Fp x44713 = x44712 * x10;
          Fp x44714 = Fp(x44713.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x44714;
          Fp x44715 = x44713 - x44714;
          Fp x44716 = x44715 * x10;
          Fp x44717 = Fp(x44716.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x44717;
        }
        Fp x44718 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x44719 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x44720 = x44719 * x3;
        Fp x44721 = x44718 + x44720;
        Fp x44722 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x44723 = x44722 * x11;
        Fp x44724 = x44721 + x44723;
        Fp x44725 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x44726 = x44725 * x12;
        Fp x44727 = x44724 + x44726;
        Fp x44728 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x44729 = x44728 * x13;
        Fp x44730 = x44727 + x44729;
        Fp x44731 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x44732 = x44731 * x14;
        Fp x44733 = x44730 + x44732;
        Fp x44734 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x44735 = x44734 * x15;
        Fp x44736 = x44733 + x44735;
        Fp x44737 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x44738 = x44737 * x16;
        Fp x44739 = x44736 + x44738;
        Fp x44740 = x44556 - x44739;
        Fp x44741 = x44740 * x33;
        if (x44741 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        if (x44420 != 0) {
          Fp x44742 = x44467 + x17;
          Fp x44743 = x44742 - x44693;
          Fp x44744 = x44743 - x71;
          {
            Fp x44745 = Fp(x44744.asUInt32() & x2.asUInt32());
            args[2][48 * steps + cycle] = x44745;
            Fp x44746 = x44744 - x44745;
            Fp x44747 = x44746 * x10;
            Fp x44748 = Fp(x44747.asUInt32() & x2.asUInt32());
            args[2][49 * steps + cycle] = x44748;
            Fp x44749 = x44747 - x44748;
            Fp x44750 = x44749 * x10;
            Fp x44751 = Fp(x44750.asUInt32() & x2.asUInt32());
            args[2][50 * steps + cycle] = x44751;
            Fp x44752 = x44750 - x44751;
            Fp x44753 = x44752 * x10;
            Fp x44754 = Fp(x44753.asUInt32() & x2.asUInt32());
            args[2][51 * steps + cycle] = x44754;
            Fp x44755 = x44753 - x44754;
            Fp x44756 = x44755 * x10;
            Fp x44757 = Fp(x44756.asUInt32() & x2.asUInt32());
            args[2][52 * steps + cycle] = x44757;
            Fp x44758 = x44756 - x44757;
            Fp x44759 = x44758 * x10;
            Fp x44760 = Fp(x44759.asUInt32() & x2.asUInt32());
            args[2][53 * steps + cycle] = x44760;
            Fp x44761 = x44759 - x44760;
            Fp x44762 = x44761 * x10;
            Fp x44763 = Fp(x44762.asUInt32() & x2.asUInt32());
            args[2][54 * steps + cycle] = x44763;
            Fp x44764 = x44762 - x44763;
            Fp x44765 = x44764 * x10;
            Fp x44766 = Fp(x44765.asUInt32() & x2.asUInt32());
            args[2][55 * steps + cycle] = x44766;
          }
          Fp x44767 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x44768 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x44769 = x44768 * x3;
          Fp x44770 = x44767 + x44769;
          Fp x44771 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x44772 = x44771 * x11;
          Fp x44773 = x44770 + x44772;
          Fp x44774 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x44775 = x44774 * x12;
          Fp x44776 = x44773 + x44775;
          Fp x44777 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x44778 = x44777 * x13;
          Fp x44779 = x44776 + x44778;
          Fp x44780 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x44781 = x44780 * x14;
          Fp x44782 = x44779 + x44781;
          Fp x44783 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x44784 = x44783 * x15;
          Fp x44785 = x44782 + x44784;
          Fp x44786 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x44787 = x44786 * x16;
          Fp x44788 = x44785 + x44787;
          Fp x44789 = x44744 - x44788;
          Fp x44790 = x44789 * x33;
          args[2][93 * steps + cycle] = x44790;
          Fp x44791 = x44513 - x44739;
          Fp x44792 = x44791 - x71;
          Fp x44793 = args[2][93 * steps + ((cycle - 0) & mask)];
          Fp x44794 = x44792 + x44793;
          {
            Fp x44795 = Fp(x44794.asUInt32() & x2.asUInt32());
            args[2][56 * steps + cycle] = x44795;
            Fp x44796 = x44794 - x44795;
            Fp x44797 = x44796 * x10;
            Fp x44798 = Fp(x44797.asUInt32() & x2.asUInt32());
            args[2][57 * steps + cycle] = x44798;
            Fp x44799 = x44797 - x44798;
            Fp x44800 = x44799 * x10;
            Fp x44801 = Fp(x44800.asUInt32() & x2.asUInt32());
            args[2][58 * steps + cycle] = x44801;
            Fp x44802 = x44800 - x44801;
            Fp x44803 = x44802 * x10;
            Fp x44804 = Fp(x44803.asUInt32() & x2.asUInt32());
            args[2][59 * steps + cycle] = x44804;
            Fp x44805 = x44803 - x44804;
            Fp x44806 = x44805 * x10;
            Fp x44807 = Fp(x44806.asUInt32() & x2.asUInt32());
            args[2][60 * steps + cycle] = x44807;
            Fp x44808 = x44806 - x44807;
            Fp x44809 = x44808 * x10;
            Fp x44810 = Fp(x44809.asUInt32() & x2.asUInt32());
            args[2][61 * steps + cycle] = x44810;
            Fp x44811 = x44809 - x44810;
            Fp x44812 = x44811 * x10;
            Fp x44813 = Fp(x44812.asUInt32() & x2.asUInt32());
            args[2][62 * steps + cycle] = x44813;
            Fp x44814 = x44812 - x44813;
            Fp x44815 = x44814 * x10;
            Fp x44816 = Fp(x44815.asUInt32() & x2.asUInt32());
            args[2][63 * steps + cycle] = x44816;
          }
          Fp x44817 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x44818 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x44819 = x44818 * x3;
          Fp x44820 = x44817 + x44819;
          Fp x44821 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x44822 = x44821 * x11;
          Fp x44823 = x44820 + x44822;
          Fp x44824 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x44825 = x44824 * x12;
          Fp x44826 = x44823 + x44825;
          Fp x44827 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x44828 = x44827 * x13;
          Fp x44829 = x44826 + x44828;
          Fp x44830 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x44831 = x44830 * x14;
          Fp x44832 = x44829 + x44831;
          Fp x44833 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x44834 = x44833 * x15;
          Fp x44835 = x44832 + x44834;
          Fp x44836 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x44837 = x44836 * x16;
          Fp x44838 = x44835 + x44837;
          Fp x44839 = x44794 - x44838;
          Fp x44840 = x44839 * x33;
          if (x44840 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:91");
        }
        Fp x44841 = x44595 * x44461;
        Fp x44842 = x44841 + x44687;
        {
          Fp x44843 = Fp(x44842.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x44843;
          Fp x44844 = x44842 - x44843;
          Fp x44845 = x44844 * x10;
          Fp x44846 = Fp(x44845.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x44846;
          Fp x44847 = x44845 - x44846;
          Fp x44848 = x44847 * x10;
          Fp x44849 = Fp(x44848.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x44849;
          Fp x44850 = x44848 - x44849;
          Fp x44851 = x44850 * x10;
          Fp x44852 = Fp(x44851.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x44852;
          Fp x44853 = x44851 - x44852;
          Fp x44854 = x44853 * x10;
          Fp x44855 = Fp(x44854.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x44855;
          Fp x44856 = x44854 - x44855;
          Fp x44857 = x44856 * x10;
          Fp x44858 = Fp(x44857.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x44858;
          Fp x44859 = x44857 - x44858;
          Fp x44860 = x44859 * x10;
          Fp x44861 = Fp(x44860.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x44861;
          Fp x44862 = x44860 - x44861;
          Fp x44863 = x44862 * x10;
          Fp x44864 = Fp(x44863.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x44864;
          Fp x44865 = x44863 - x44864;
          Fp x44866 = x44865 * x10;
          Fp x44867 = Fp(x44866.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x44867;
          Fp x44868 = x44866 - x44867;
          Fp x44869 = x44868 * x10;
          Fp x44870 = Fp(x44869.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x44870;
          Fp x44871 = x44869 - x44870;
          Fp x44872 = x44871 * x10;
          Fp x44873 = Fp(x44872.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x44873;
          Fp x44874 = x44872 - x44873;
          Fp x44875 = x44874 * x10;
          Fp x44876 = Fp(x44875.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x44876;
        }
        Fp x44877 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x44878 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x44879 = x44878 * x3;
        Fp x44880 = x44877 + x44879;
        Fp x44881 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x44882 = x44881 * x11;
        Fp x44883 = x44880 + x44882;
        Fp x44884 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x44885 = x44884 * x12;
        Fp x44886 = x44883 + x44885;
        Fp x44887 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x44888 = x44887 * x13;
        Fp x44889 = x44886 + x44888;
        Fp x44890 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x44891 = x44890 * x14;
        Fp x44892 = x44889 + x44891;
        Fp x44893 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x44894 = x44893 * x15;
        Fp x44895 = x44892 + x44894;
        Fp x44896 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x44897 = x44896 * x16;
        Fp x44898 = x44895 + x44897;
        Fp x44899 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x44900 = x44899 * x17;
        Fp x44901 = x44898 + x44900;
        Fp x44902 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x44903 = x44902 * x18;
        Fp x44904 = x44901 + x44903;
        Fp x44905 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x44906 = x44905 * x19;
        Fp x44907 = x44904 + x44906;
        Fp x44908 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x44909 = x44908 * x20;
        Fp x44910 = x44907 + x44909;
        Fp x44911 = x44842 - x44910;
        Fp x44912 = x44911 * x62;
        if (x44912 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:94");
        Fp x44913 = x44465 * x3;
        Fp x44914 = x44462 + x44913;
        Fp x44915 = x44492 * x11;
        Fp x44916 = x44914 + x44915;
        Fp x44917 = x44493 * x12;
        Fp x44918 = x44916 + x44917;
        Fp x44919 = x44496 * x13;
        Fp x44920 = x44918 + x44919;
        Fp x44921 = x44499 * x14;
        Fp x44922 = x44920 + x44921;
        Fp x44923 = x44595 * x44922;
        Fp x44924 = x44599 * x3;
        Fp x44925 = x44596 + x44924;
        Fp x44926 = x44626 * x11;
        Fp x44927 = x44925 + x44926;
        Fp x44928 = x44627 * x12;
        Fp x44929 = x44927 + x44928;
        Fp x44930 = x44630 * x13;
        Fp x44931 = x44929 + x44930;
        Fp x44932 = x44633 * x14;
        Fp x44933 = x44931 + x44932;
        Fp x44934 = x44933 * x44461;
        Fp x44935 = x44923 + x44934;
        Fp x44936 = x44691 * x3;
        Fp x44937 = x44688 + x44936;
        Fp x44938 = x44718 * x11;
        Fp x44939 = x44937 + x44938;
        Fp x44940 = x44719 * x12;
        Fp x44941 = x44939 + x44940;
        Fp x44942 = x44722 * x13;
        Fp x44943 = x44941 + x44942;
        Fp x44944 = x44725 * x14;
        Fp x44945 = x44943 + x44944;
        Fp x44946 = x44935 + x44945;
        Fp x44947 = x44896 * x3;
        Fp x44948 = x44893 + x44947;
        Fp x44949 = x44899 * x11;
        Fp x44950 = x44948 + x44949;
        Fp x44951 = x44902 * x12;
        Fp x44952 = x44950 + x44951;
        Fp x44953 = x44905 * x13;
        Fp x44954 = x44952 + x44953;
        Fp x44955 = x44908 * x14;
        Fp x44956 = x44954 + x44955;
        Fp x44957 = x44946 + x44956;
        {
          Fp x44958 = Fp(x44957.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x44958;
          Fp x44959 = x44957 - x44958;
          Fp x44960 = x44959 * x10;
          Fp x44961 = Fp(x44960.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x44961;
          Fp x44962 = x44960 - x44961;
          Fp x44963 = x44962 * x10;
          Fp x44964 = Fp(x44963.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x44964;
          Fp x44965 = x44963 - x44964;
          Fp x44966 = x44965 * x10;
          Fp x44967 = Fp(x44966.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x44967;
          Fp x44968 = x44966 - x44967;
          Fp x44969 = x44968 * x10;
          Fp x44970 = Fp(x44969.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x44970;
          Fp x44971 = x44969 - x44970;
          Fp x44972 = x44971 * x10;
          Fp x44973 = Fp(x44972.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x44973;
          Fp x44974 = x44972 - x44973;
          Fp x44975 = x44974 * x10;
          Fp x44976 = Fp(x44975.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x44976;
          Fp x44977 = x44975 - x44976;
          Fp x44978 = x44977 * x10;
          Fp x44979 = Fp(x44978.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x44979;
          Fp x44980 = x44978 - x44979;
          Fp x44981 = x44980 * x10;
          Fp x44982 = Fp(x44981.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x44982;
          Fp x44983 = x44981 - x44982;
          Fp x44984 = x44983 * x10;
          Fp x44985 = Fp(x44984.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x44985;
        }
        Fp x44986 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x44987 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x44988 = x44987 * x3;
        Fp x44989 = x44986 + x44988;
        Fp x44990 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x44991 = x44990 * x11;
        Fp x44992 = x44989 + x44991;
        Fp x44993 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x44994 = x44993 * x12;
        Fp x44995 = x44992 + x44994;
        Fp x44996 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x44997 = x44996 * x13;
        Fp x44998 = x44995 + x44997;
        Fp x44999 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x45000 = x44999 * x14;
        Fp x45001 = x44998 + x45000;
        Fp x45002 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x45003 = x45002 * x15;
        Fp x45004 = x45001 + x45003;
        Fp x45005 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x45006 = x45005 * x16;
        Fp x45007 = x45004 + x45006;
        Fp x45008 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x45009 = x45008 * x17;
        Fp x45010 = x45007 + x45009;
        Fp x45011 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x45012 = x45011 * x18;
        Fp x45013 = x45010 + x45012;
        Fp x45014 = x44957 - x45013;
        Fp x45015 = x45014 * x66;
        if (x45015 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:95");
        Fp x45016 = x44505 * x3;
        Fp x45017 = x44502 + x45016;
        Fp x45018 = x44508 * x11;
        Fp x45019 = x45017 + x45018;
        Fp x45020 = x44511 * x12;
        Fp x45021 = x45019 + x45020;
        Fp x45022 = x44595 * x45021;
        Fp x45023 = x44933 * x44922;
        Fp x45024 = x45022 + x45023;
        Fp x45025 = x44639 * x3;
        Fp x45026 = x44636 + x45025;
        Fp x45027 = x44642 * x11;
        Fp x45028 = x45026 + x45027;
        Fp x45029 = x44645 * x12;
        Fp x45030 = x45028 + x45029;
        Fp x45031 = x45030 * x44461;
        Fp x45032 = x45024 + x45031;
        Fp x45033 = x44731 * x3;
        Fp x45034 = x44728 + x45033;
        Fp x45035 = x44734 * x11;
        Fp x45036 = x45034 + x45035;
        Fp x45037 = x44737 * x12;
        Fp x45038 = x45036 + x45037;
        Fp x45039 = x45032 + x45038;
        Fp x45040 = x45005 * x3;
        Fp x45041 = x45002 + x45040;
        Fp x45042 = x45008 * x11;
        Fp x45043 = x45041 + x45042;
        Fp x45044 = x45011 * x12;
        Fp x45045 = x45043 + x45044;
        Fp x45046 = x45039 + x45045;
        {
          Fp x45047 = Fp(x45046.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x45047;
          Fp x45048 = x45046 - x45047;
          Fp x45049 = x45048 * x10;
          Fp x45050 = Fp(x45049.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x45050;
          Fp x45051 = x45049 - x45050;
          Fp x45052 = x45051 * x10;
          Fp x45053 = Fp(x45052.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x45053;
          Fp x45054 = x45052 - x45053;
          Fp x45055 = x45054 * x10;
          Fp x45056 = Fp(x45055.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x45056;
        }
        Fp x45057 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x45058 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x45059 = x45058 * x3;
        Fp x45060 = x45057 + x45059;
        Fp x45061 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x45062 = x45061 * x11;
        Fp x45063 = x45060 + x45062;
        Fp x45064 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x45065 = x45064 * x12;
        Fp x45066 = x45063 + x45065;
        Fp x45067 = x45046 - x45066;
        Fp x45068 = x45067 * x67;
        if (x45068 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:100");
        host_args[0] = x44910;
        host_args[1] = x45013;
        host_args[2] = x45066;
        host(ctx, "log", "numer0=0x%06x, numer1=0x%05x, numer2=0x%02x", host_args.data(), 3, host_outs.data(), 0);
        Fp x45069 = x44989 * x15;
        Fp x45070 = x44892 + x45069;
        Fp x45071 = x45070 - x44547;
        if (x45071 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:108");
        Fp x45072 = x44993 * x3;
        Fp x45073 = x44990 + x45072;
        Fp x45074 = x44996 * x11;
        Fp x45075 = x45073 + x45074;
        Fp x45076 = x44999 * x12;
        Fp x45077 = x45075 + x45076;
        Fp x45078 = x45066 * x13;
        Fp x45079 = x45077 + x45078;
        Fp x45080 = x45079 - x44546;
        if (x45080 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:109");
        args[2][92 * steps + cycle] = x70;
        args[2][100 * steps + cycle] = x44555;
        args[2][101 * steps + cycle] = x44554;
        {
          args[2][98 * steps + cycle] = x70;
          args[2][114 * steps + cycle] = x70;
        }
        Fp x45081 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x45082 = x70 - x45081;
        if (x45082 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45083 = x45081 * x17;
        Fp x45084 = x17 - x45081;
        Fp x45085 = x45084 - x17;
        {
          Fp x45086 = (x45085 == 0) ? Fp(1) : Fp(0);
          Fp x45087 = x71 - x45086;
          args[2][99 * steps + cycle] = x45087;
          Fp x45088 = inv(x45085);
          args[2][115 * steps + cycle] = x45088;
        }
        Fp x45089 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x45090 = x45085 * x45089;
        Fp x45091 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x45092 = x45090 - x45091;
        if (x45092 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45093 = x71 - x45091;
        Fp x45094 = x45093 * x45085;
        if (x45094 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x45095 = x45091 * x45084;
        args[2][116 * steps + cycle] = x45083;
        args[2][117 * steps + cycle] = x45095;
      }
      Fp x45096 = args[2][79 * steps + ((cycle - 1) & mask)];
      if (x45096 != 0) {
        Fp x45097 = x41504 + x41550;
        {
          Fp x45098 = (x45097 == 0) ? Fp(1) : Fp(0);
          Fp x45099 = x71 - x45098;
          args[2][118 * steps + cycle] = x45099;
          Fp x45100 = inv(x45097);
          args[2][119 * steps + cycle] = x45100;
        }
        Fp x45101 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x45102 = x45097 * x45101;
        Fp x45103 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x45104 = x45102 - x45103;
        if (x45104 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45105 = x71 - x45103;
        Fp x45106 = x45105 * x45097;
        if (x45106 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        {
          Fp x45107 = Fp(x41456.asUInt32() & x32.asUInt32());
          Fp x45108 = x45107 * x65;
          args[2][90 * steps + cycle] = x45108;
        }
        args[2][91 * steps + cycle] = x70;
        Fp x45109 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x45110 = x35 - x41455;
        Fp x45111 = x45109 * x45110;
        Fp x45112 = x71 - x45109;
        Fp x45113 = x45112 * x41455;
        Fp x45114 = x45111 + x45113;
        Fp x45115 = x35 - x41456;
        Fp x45116 = x45109 * x45115;
        Fp x45117 = x45112 * x41456;
        Fp x45118 = x45116 + x45117;
        args[2][124 * steps + cycle] = x45114;
        args[2][125 * steps + cycle] = x45118;
        {
          Fp x45119 = Fp(x41504.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x45119;
          Fp x45120 = x41504 - x45119;
          Fp x45121 = x45120 * x10;
          Fp x45122 = Fp(x45121.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x45122;
          Fp x45123 = x45121 - x45122;
          Fp x45124 = x45123 * x10;
          Fp x45125 = Fp(x45124.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x45125;
          Fp x45126 = x45124 - x45125;
          Fp x45127 = x45126 * x10;
          Fp x45128 = Fp(x45127.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x45128;
          Fp x45129 = x45127 - x45128;
          Fp x45130 = x45129 * x10;
          Fp x45131 = Fp(x45130.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x45131;
          Fp x45132 = x45130 - x45131;
          Fp x45133 = x45132 * x10;
          Fp x45134 = Fp(x45133.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x45134;
          Fp x45135 = x45133 - x45134;
          Fp x45136 = x45135 * x10;
          Fp x45137 = Fp(x45136.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x45137;
          Fp x45138 = x45136 - x45137;
          Fp x45139 = x45138 * x10;
          Fp x45140 = Fp(x45139.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x45140;
        }
        Fp x45141 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x45142 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x45143 = x45142 * x3;
        Fp x45144 = x45141 + x45143;
        Fp x45145 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x45146 = x45145 * x11;
        Fp x45147 = x45144 + x45146;
        Fp x45148 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x45149 = x45148 * x12;
        Fp x45150 = x45147 + x45149;
        Fp x45151 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x45152 = x45151 * x13;
        Fp x45153 = x45150 + x45152;
        Fp x45154 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x45155 = x45154 * x14;
        Fp x45156 = x45153 + x45155;
        Fp x45157 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x45158 = x45157 * x15;
        Fp x45159 = x45156 + x45158;
        Fp x45160 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x45161 = x45160 * x16;
        Fp x45162 = x45159 + x45161;
        Fp x45163 = x41504 - x45162;
        Fp x45164 = x45163 * x33;
        if (x45164 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:59");
        {
          Fp x45165 = Fp(x41550.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x45165;
          Fp x45166 = x41550 - x45165;
          Fp x45167 = x45166 * x10;
          Fp x45168 = Fp(x45167.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x45168;
          Fp x45169 = x45167 - x45168;
          Fp x45170 = x45169 * x10;
          Fp x45171 = Fp(x45170.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x45171;
          Fp x45172 = x45170 - x45171;
          Fp x45173 = x45172 * x10;
          Fp x45174 = Fp(x45173.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x45174;
          Fp x45175 = x45173 - x45174;
          Fp x45176 = x45175 * x10;
          Fp x45177 = Fp(x45176.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x45177;
          Fp x45178 = x45176 - x45177;
          Fp x45179 = x45178 * x10;
          Fp x45180 = Fp(x45179.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x45180;
          Fp x45181 = x45179 - x45180;
          Fp x45182 = x45181 * x10;
          Fp x45183 = Fp(x45182.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x45183;
          Fp x45184 = x45182 - x45183;
          Fp x45185 = x45184 * x10;
          Fp x45186 = Fp(x45185.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x45186;
        }
        Fp x45187 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x45188 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x45189 = x45188 * x3;
        Fp x45190 = x45187 + x45189;
        Fp x45191 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x45192 = x45191 * x11;
        Fp x45193 = x45190 + x45192;
        Fp x45194 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x45195 = x45194 * x12;
        Fp x45196 = x45193 + x45195;
        Fp x45197 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x45198 = x45197 * x13;
        Fp x45199 = x45196 + x45198;
        Fp x45200 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x45201 = x45200 * x14;
        Fp x45202 = x45199 + x45201;
        Fp x45203 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x45204 = x45203 * x15;
        Fp x45205 = x45202 + x45204;
        Fp x45206 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x45207 = x45206 * x16;
        Fp x45208 = x45205 + x45207;
        Fp x45209 = x41550 - x45208;
        Fp x45210 = x45209 * x33;
        if (x45210 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:59");
        {
          args[2][94 * steps + cycle] = x70;
          args[2][106 * steps + cycle] = x70;
        }
        Fp x45211 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x45212 = x70 - x45211;
        if (x45212 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45213 = x45211 * x17;
        Fp x45214 = x17 - x45211;
        Fp x45215 = x45214 - x17;
        {
          Fp x45216 = (x45215 == 0) ? Fp(1) : Fp(0);
          Fp x45217 = x71 - x45216;
          args[2][95 * steps + cycle] = x45217;
          Fp x45218 = inv(x45215);
          args[2][107 * steps + cycle] = x45218;
        }
        Fp x45219 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x45220 = x45215 * x45219;
        Fp x45221 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x45222 = x45220 - x45221;
        if (x45222 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45223 = x71 - x45221;
        Fp x45224 = x45223 * x45215;
        if (x45224 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x45225 = x45221 * x45214;
        args[2][108 * steps + cycle] = x45213;
        args[2][109 * steps + cycle] = x45225;
        {
          args[2][96 * steps + cycle] = x70;
          args[2][110 * steps + cycle] = x70;
        }
        Fp x45226 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x45227 = x70 - x45226;
        if (x45227 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45228 = x45226 * x17;
        Fp x45229 = x17 - x45226;
        Fp x45230 = x45229 - x17;
        {
          Fp x45231 = (x45230 == 0) ? Fp(1) : Fp(0);
          Fp x45232 = x71 - x45231;
          args[2][97 * steps + cycle] = x45232;
          Fp x45233 = inv(x45230);
          args[2][111 * steps + cycle] = x45233;
        }
        Fp x45234 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x45235 = x45230 * x45234;
        Fp x45236 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x45237 = x45235 - x45236;
        if (x45237 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45238 = x71 - x45236;
        Fp x45239 = x45238 * x45230;
        if (x45239 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x45240 = x45236 * x45229;
        args[2][112 * steps + cycle] = x45228;
        args[2][113 * steps + cycle] = x45240;
        Fp x45241 = args[2][125 * steps + ((cycle - 0) & mask)];
        Fp x45242 = args[2][124 * steps + ((cycle - 0) & mask)];
        Fp x45243 = args[2][91 * steps + ((cycle - 0) & mask)];
        host_args[0] = x45241;
        host_args[1] = x45242;
        host_args[2] = x45208;
        host_args[3] = x45162;
        host_args[4] = x45109;
        host_args[5] = x45243;
        host(ctx, "log", "numer32 = %04x%04x, denom = %04x%04x, negNumer = %d, negDenom = %d", host_args.data(), 6, host_outs.data(), 0);
        {
          host_args[0] = x45242;
          host_args[1] = x45241;
          host_args[2] = x45162;
          host_args[3] = x45208;
          host(ctx, "divide32", "", host_args.data(), 4, host_outs.data(), 4);
          Fp x45244 = host_outs[0];
          Fp x45245 = host_outs[1];
          Fp x45246 = host_outs[2];
          Fp x45247 = host_outs[3];
          args[2][120 * steps + cycle] = x45244;
          args[2][121 * steps + cycle] = x45245;
          args[2][122 * steps + cycle] = x45246;
          args[2][123 * steps + cycle] = x45247;
        }
        Fp x45248 = args[2][121 * steps + ((cycle - 0) & mask)];
        Fp x45249 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x45250 = args[2][123 * steps + ((cycle - 0) & mask)];
        Fp x45251 = args[2][122 * steps + ((cycle - 0) & mask)];
        host_args[0] = x45248;
        host_args[1] = x45249;
        host_args[2] = x45250;
        host_args[3] = x45251;
        host(ctx, "log", "quot32 = %04x%04x, rem32 = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x45252 = Fp(x45249.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x45252;
          Fp x45253 = x45249 - x45252;
          Fp x45254 = x45253 * x10;
          Fp x45255 = Fp(x45254.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x45255;
          Fp x45256 = x45254 - x45255;
          Fp x45257 = x45256 * x10;
          Fp x45258 = Fp(x45257.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x45258;
          Fp x45259 = x45257 - x45258;
          Fp x45260 = x45259 * x10;
          Fp x45261 = Fp(x45260.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x45261;
          Fp x45262 = x45260 - x45261;
          Fp x45263 = x45262 * x10;
          Fp x45264 = Fp(x45263.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x45264;
          Fp x45265 = x45263 - x45264;
          Fp x45266 = x45265 * x10;
          Fp x45267 = Fp(x45266.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x45267;
          Fp x45268 = x45266 - x45267;
          Fp x45269 = x45268 * x10;
          Fp x45270 = Fp(x45269.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x45270;
          Fp x45271 = x45269 - x45270;
          Fp x45272 = x45271 * x10;
          Fp x45273 = Fp(x45272.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x45273;
        }
        Fp x45274 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x45275 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x45276 = x45275 * x3;
        Fp x45277 = x45274 + x45276;
        Fp x45278 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x45279 = x45278 * x11;
        Fp x45280 = x45277 + x45279;
        Fp x45281 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x45282 = x45281 * x12;
        Fp x45283 = x45280 + x45282;
        Fp x45284 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x45285 = x45284 * x13;
        Fp x45286 = x45283 + x45285;
        Fp x45287 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x45288 = x45287 * x14;
        Fp x45289 = x45286 + x45288;
        Fp x45290 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x45291 = x45290 * x15;
        Fp x45292 = x45289 + x45291;
        Fp x45293 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x45294 = x45293 * x16;
        Fp x45295 = x45292 + x45294;
        Fp x45296 = x45249 - x45295;
        Fp x45297 = x45296 * x33;
        if (x45297 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x45298 = Fp(x45248.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x45298;
          Fp x45299 = x45248 - x45298;
          Fp x45300 = x45299 * x10;
          Fp x45301 = Fp(x45300.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x45301;
          Fp x45302 = x45300 - x45301;
          Fp x45303 = x45302 * x10;
          Fp x45304 = Fp(x45303.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x45304;
          Fp x45305 = x45303 - x45304;
          Fp x45306 = x45305 * x10;
          Fp x45307 = Fp(x45306.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x45307;
          Fp x45308 = x45306 - x45307;
          Fp x45309 = x45308 * x10;
          Fp x45310 = Fp(x45309.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x45310;
          Fp x45311 = x45309 - x45310;
          Fp x45312 = x45311 * x10;
          Fp x45313 = Fp(x45312.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x45313;
          Fp x45314 = x45312 - x45313;
          Fp x45315 = x45314 * x10;
          Fp x45316 = Fp(x45315.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x45316;
          Fp x45317 = x45315 - x45316;
          Fp x45318 = x45317 * x10;
          Fp x45319 = Fp(x45318.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x45319;
        }
        Fp x45320 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x45321 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x45322 = x45321 * x3;
        Fp x45323 = x45320 + x45322;
        Fp x45324 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x45325 = x45324 * x11;
        Fp x45326 = x45323 + x45325;
        Fp x45327 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x45328 = x45327 * x12;
        Fp x45329 = x45326 + x45328;
        Fp x45330 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x45331 = x45330 * x13;
        Fp x45332 = x45329 + x45331;
        Fp x45333 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x45334 = x45333 * x14;
        Fp x45335 = x45332 + x45334;
        Fp x45336 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x45337 = x45336 * x15;
        Fp x45338 = x45335 + x45337;
        Fp x45339 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x45340 = x45339 * x16;
        Fp x45341 = x45338 + x45340;
        Fp x45342 = x45248 - x45341;
        Fp x45343 = x45342 * x33;
        if (x45343 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x45344 = Fp(x45251.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x45344;
          Fp x45345 = x45251 - x45344;
          Fp x45346 = x45345 * x10;
          Fp x45347 = Fp(x45346.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x45347;
          Fp x45348 = x45346 - x45347;
          Fp x45349 = x45348 * x10;
          Fp x45350 = Fp(x45349.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x45350;
          Fp x45351 = x45349 - x45350;
          Fp x45352 = x45351 * x10;
          Fp x45353 = Fp(x45352.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x45353;
          Fp x45354 = x45352 - x45353;
          Fp x45355 = x45354 * x10;
          Fp x45356 = Fp(x45355.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x45356;
          Fp x45357 = x45355 - x45356;
          Fp x45358 = x45357 * x10;
          Fp x45359 = Fp(x45358.asUInt32() & x2.asUInt32());
          args[2][37 * steps + cycle] = x45359;
          Fp x45360 = x45358 - x45359;
          Fp x45361 = x45360 * x10;
          Fp x45362 = Fp(x45361.asUInt32() & x2.asUInt32());
          args[2][38 * steps + cycle] = x45362;
          Fp x45363 = x45361 - x45362;
          Fp x45364 = x45363 * x10;
          Fp x45365 = Fp(x45364.asUInt32() & x2.asUInt32());
          args[2][39 * steps + cycle] = x45365;
        }
        Fp x45366 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x45367 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x45368 = x45367 * x3;
        Fp x45369 = x45366 + x45368;
        Fp x45370 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x45371 = x45370 * x11;
        Fp x45372 = x45369 + x45371;
        Fp x45373 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x45374 = x45373 * x12;
        Fp x45375 = x45372 + x45374;
        Fp x45376 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x45377 = x45376 * x13;
        Fp x45378 = x45375 + x45377;
        Fp x45379 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x45380 = x45379 * x14;
        Fp x45381 = x45378 + x45380;
        Fp x45382 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x45383 = x45382 * x15;
        Fp x45384 = x45381 + x45383;
        Fp x45385 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x45386 = x45385 * x16;
        Fp x45387 = x45384 + x45386;
        Fp x45388 = x45251 - x45387;
        Fp x45389 = x45388 * x33;
        if (x45389 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        {
          Fp x45390 = Fp(x45250.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x45390;
          Fp x45391 = x45250 - x45390;
          Fp x45392 = x45391 * x10;
          Fp x45393 = Fp(x45392.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x45393;
          Fp x45394 = x45392 - x45393;
          Fp x45395 = x45394 * x10;
          Fp x45396 = Fp(x45395.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x45396;
          Fp x45397 = x45395 - x45396;
          Fp x45398 = x45397 * x10;
          Fp x45399 = Fp(x45398.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x45399;
          Fp x45400 = x45398 - x45399;
          Fp x45401 = x45400 * x10;
          Fp x45402 = Fp(x45401.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x45402;
          Fp x45403 = x45401 - x45402;
          Fp x45404 = x45403 * x10;
          Fp x45405 = Fp(x45404.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x45405;
          Fp x45406 = x45404 - x45405;
          Fp x45407 = x45406 * x10;
          Fp x45408 = Fp(x45407.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x45408;
          Fp x45409 = x45407 - x45408;
          Fp x45410 = x45409 * x10;
          Fp x45411 = Fp(x45410.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x45411;
        }
        Fp x45412 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x45413 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x45414 = x45413 * x3;
        Fp x45415 = x45412 + x45414;
        Fp x45416 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x45417 = x45416 * x11;
        Fp x45418 = x45415 + x45417;
        Fp x45419 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x45420 = x45419 * x12;
        Fp x45421 = x45418 + x45420;
        Fp x45422 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x45423 = x45422 * x13;
        Fp x45424 = x45421 + x45423;
        Fp x45425 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x45426 = x45425 * x14;
        Fp x45427 = x45424 + x45426;
        Fp x45428 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x45429 = x45428 * x15;
        Fp x45430 = x45427 + x45429;
        Fp x45431 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x45432 = x45431 * x16;
        Fp x45433 = x45430 + x45432;
        Fp x45434 = x45250 - x45433;
        Fp x45435 = x45434 * x33;
        if (x45435 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        if (x45103 != 0) {
          Fp x45436 = x45162 + x17;
          Fp x45437 = x45436 - x45387;
          Fp x45438 = x45437 - x71;
          {
            Fp x45439 = Fp(x45438.asUInt32() & x2.asUInt32());
            args[2][48 * steps + cycle] = x45439;
            Fp x45440 = x45438 - x45439;
            Fp x45441 = x45440 * x10;
            Fp x45442 = Fp(x45441.asUInt32() & x2.asUInt32());
            args[2][49 * steps + cycle] = x45442;
            Fp x45443 = x45441 - x45442;
            Fp x45444 = x45443 * x10;
            Fp x45445 = Fp(x45444.asUInt32() & x2.asUInt32());
            args[2][50 * steps + cycle] = x45445;
            Fp x45446 = x45444 - x45445;
            Fp x45447 = x45446 * x10;
            Fp x45448 = Fp(x45447.asUInt32() & x2.asUInt32());
            args[2][51 * steps + cycle] = x45448;
            Fp x45449 = x45447 - x45448;
            Fp x45450 = x45449 * x10;
            Fp x45451 = Fp(x45450.asUInt32() & x2.asUInt32());
            args[2][52 * steps + cycle] = x45451;
            Fp x45452 = x45450 - x45451;
            Fp x45453 = x45452 * x10;
            Fp x45454 = Fp(x45453.asUInt32() & x2.asUInt32());
            args[2][53 * steps + cycle] = x45454;
            Fp x45455 = x45453 - x45454;
            Fp x45456 = x45455 * x10;
            Fp x45457 = Fp(x45456.asUInt32() & x2.asUInt32());
            args[2][54 * steps + cycle] = x45457;
            Fp x45458 = x45456 - x45457;
            Fp x45459 = x45458 * x10;
            Fp x45460 = Fp(x45459.asUInt32() & x2.asUInt32());
            args[2][55 * steps + cycle] = x45460;
          }
          Fp x45461 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x45462 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x45463 = x45462 * x3;
          Fp x45464 = x45461 + x45463;
          Fp x45465 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x45466 = x45465 * x11;
          Fp x45467 = x45464 + x45466;
          Fp x45468 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x45469 = x45468 * x12;
          Fp x45470 = x45467 + x45469;
          Fp x45471 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x45472 = x45471 * x13;
          Fp x45473 = x45470 + x45472;
          Fp x45474 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x45475 = x45474 * x14;
          Fp x45476 = x45473 + x45475;
          Fp x45477 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x45478 = x45477 * x15;
          Fp x45479 = x45476 + x45478;
          Fp x45480 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x45481 = x45480 * x16;
          Fp x45482 = x45479 + x45481;
          Fp x45483 = x45438 - x45482;
          Fp x45484 = x45483 * x33;
          args[2][93 * steps + cycle] = x45484;
          Fp x45485 = x45208 - x45433;
          Fp x45486 = x45485 - x71;
          Fp x45487 = args[2][93 * steps + ((cycle - 0) & mask)];
          Fp x45488 = x45486 + x45487;
          {
            Fp x45489 = Fp(x45488.asUInt32() & x2.asUInt32());
            args[2][56 * steps + cycle] = x45489;
            Fp x45490 = x45488 - x45489;
            Fp x45491 = x45490 * x10;
            Fp x45492 = Fp(x45491.asUInt32() & x2.asUInt32());
            args[2][57 * steps + cycle] = x45492;
            Fp x45493 = x45491 - x45492;
            Fp x45494 = x45493 * x10;
            Fp x45495 = Fp(x45494.asUInt32() & x2.asUInt32());
            args[2][58 * steps + cycle] = x45495;
            Fp x45496 = x45494 - x45495;
            Fp x45497 = x45496 * x10;
            Fp x45498 = Fp(x45497.asUInt32() & x2.asUInt32());
            args[2][59 * steps + cycle] = x45498;
            Fp x45499 = x45497 - x45498;
            Fp x45500 = x45499 * x10;
            Fp x45501 = Fp(x45500.asUInt32() & x2.asUInt32());
            args[2][60 * steps + cycle] = x45501;
            Fp x45502 = x45500 - x45501;
            Fp x45503 = x45502 * x10;
            Fp x45504 = Fp(x45503.asUInt32() & x2.asUInt32());
            args[2][61 * steps + cycle] = x45504;
            Fp x45505 = x45503 - x45504;
            Fp x45506 = x45505 * x10;
            Fp x45507 = Fp(x45506.asUInt32() & x2.asUInt32());
            args[2][62 * steps + cycle] = x45507;
            Fp x45508 = x45506 - x45507;
            Fp x45509 = x45508 * x10;
            Fp x45510 = Fp(x45509.asUInt32() & x2.asUInt32());
            args[2][63 * steps + cycle] = x45510;
          }
          Fp x45511 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x45512 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x45513 = x45512 * x3;
          Fp x45514 = x45511 + x45513;
          Fp x45515 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x45516 = x45515 * x11;
          Fp x45517 = x45514 + x45516;
          Fp x45518 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x45519 = x45518 * x12;
          Fp x45520 = x45517 + x45519;
          Fp x45521 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x45522 = x45521 * x13;
          Fp x45523 = x45520 + x45522;
          Fp x45524 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x45525 = x45524 * x14;
          Fp x45526 = x45523 + x45525;
          Fp x45527 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x45528 = x45527 * x15;
          Fp x45529 = x45526 + x45528;
          Fp x45530 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x45531 = x45530 * x16;
          Fp x45532 = x45529 + x45531;
          Fp x45533 = x45488 - x45532;
          Fp x45534 = x45533 * x33;
          if (x45534 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:91");
        }
        Fp x45535 = x45289 * x45156;
        Fp x45536 = x45535 + x45381;
        {
          Fp x45537 = Fp(x45536.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x45537;
          Fp x45538 = x45536 - x45537;
          Fp x45539 = x45538 * x10;
          Fp x45540 = Fp(x45539.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x45540;
          Fp x45541 = x45539 - x45540;
          Fp x45542 = x45541 * x10;
          Fp x45543 = Fp(x45542.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x45543;
          Fp x45544 = x45542 - x45543;
          Fp x45545 = x45544 * x10;
          Fp x45546 = Fp(x45545.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x45546;
          Fp x45547 = x45545 - x45546;
          Fp x45548 = x45547 * x10;
          Fp x45549 = Fp(x45548.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x45549;
          Fp x45550 = x45548 - x45549;
          Fp x45551 = x45550 * x10;
          Fp x45552 = Fp(x45551.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x45552;
          Fp x45553 = x45551 - x45552;
          Fp x45554 = x45553 * x10;
          Fp x45555 = Fp(x45554.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x45555;
          Fp x45556 = x45554 - x45555;
          Fp x45557 = x45556 * x10;
          Fp x45558 = Fp(x45557.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x45558;
          Fp x45559 = x45557 - x45558;
          Fp x45560 = x45559 * x10;
          Fp x45561 = Fp(x45560.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x45561;
          Fp x45562 = x45560 - x45561;
          Fp x45563 = x45562 * x10;
          Fp x45564 = Fp(x45563.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x45564;
          Fp x45565 = x45563 - x45564;
          Fp x45566 = x45565 * x10;
          Fp x45567 = Fp(x45566.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x45567;
          Fp x45568 = x45566 - x45567;
          Fp x45569 = x45568 * x10;
          Fp x45570 = Fp(x45569.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x45570;
        }
        Fp x45571 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x45572 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x45573 = x45572 * x3;
        Fp x45574 = x45571 + x45573;
        Fp x45575 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x45576 = x45575 * x11;
        Fp x45577 = x45574 + x45576;
        Fp x45578 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x45579 = x45578 * x12;
        Fp x45580 = x45577 + x45579;
        Fp x45581 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x45582 = x45581 * x13;
        Fp x45583 = x45580 + x45582;
        Fp x45584 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x45585 = x45584 * x14;
        Fp x45586 = x45583 + x45585;
        Fp x45587 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x45588 = x45587 * x15;
        Fp x45589 = x45586 + x45588;
        Fp x45590 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x45591 = x45590 * x16;
        Fp x45592 = x45589 + x45591;
        Fp x45593 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x45594 = x45593 * x17;
        Fp x45595 = x45592 + x45594;
        Fp x45596 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x45597 = x45596 * x18;
        Fp x45598 = x45595 + x45597;
        Fp x45599 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x45600 = x45599 * x19;
        Fp x45601 = x45598 + x45600;
        Fp x45602 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x45603 = x45602 * x20;
        Fp x45604 = x45601 + x45603;
        Fp x45605 = x45536 - x45604;
        Fp x45606 = x45605 * x62;
        if (x45606 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:94");
        Fp x45607 = x45160 * x3;
        Fp x45608 = x45157 + x45607;
        Fp x45609 = x45187 * x11;
        Fp x45610 = x45608 + x45609;
        Fp x45611 = x45188 * x12;
        Fp x45612 = x45610 + x45611;
        Fp x45613 = x45191 * x13;
        Fp x45614 = x45612 + x45613;
        Fp x45615 = x45194 * x14;
        Fp x45616 = x45614 + x45615;
        Fp x45617 = x45289 * x45616;
        Fp x45618 = x45293 * x3;
        Fp x45619 = x45290 + x45618;
        Fp x45620 = x45320 * x11;
        Fp x45621 = x45619 + x45620;
        Fp x45622 = x45321 * x12;
        Fp x45623 = x45621 + x45622;
        Fp x45624 = x45324 * x13;
        Fp x45625 = x45623 + x45624;
        Fp x45626 = x45327 * x14;
        Fp x45627 = x45625 + x45626;
        Fp x45628 = x45627 * x45156;
        Fp x45629 = x45617 + x45628;
        Fp x45630 = x45385 * x3;
        Fp x45631 = x45382 + x45630;
        Fp x45632 = x45412 * x11;
        Fp x45633 = x45631 + x45632;
        Fp x45634 = x45413 * x12;
        Fp x45635 = x45633 + x45634;
        Fp x45636 = x45416 * x13;
        Fp x45637 = x45635 + x45636;
        Fp x45638 = x45419 * x14;
        Fp x45639 = x45637 + x45638;
        Fp x45640 = x45629 + x45639;
        Fp x45641 = x45590 * x3;
        Fp x45642 = x45587 + x45641;
        Fp x45643 = x45593 * x11;
        Fp x45644 = x45642 + x45643;
        Fp x45645 = x45596 * x12;
        Fp x45646 = x45644 + x45645;
        Fp x45647 = x45599 * x13;
        Fp x45648 = x45646 + x45647;
        Fp x45649 = x45602 * x14;
        Fp x45650 = x45648 + x45649;
        Fp x45651 = x45640 + x45650;
        {
          Fp x45652 = Fp(x45651.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x45652;
          Fp x45653 = x45651 - x45652;
          Fp x45654 = x45653 * x10;
          Fp x45655 = Fp(x45654.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x45655;
          Fp x45656 = x45654 - x45655;
          Fp x45657 = x45656 * x10;
          Fp x45658 = Fp(x45657.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x45658;
          Fp x45659 = x45657 - x45658;
          Fp x45660 = x45659 * x10;
          Fp x45661 = Fp(x45660.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x45661;
          Fp x45662 = x45660 - x45661;
          Fp x45663 = x45662 * x10;
          Fp x45664 = Fp(x45663.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x45664;
          Fp x45665 = x45663 - x45664;
          Fp x45666 = x45665 * x10;
          Fp x45667 = Fp(x45666.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x45667;
          Fp x45668 = x45666 - x45667;
          Fp x45669 = x45668 * x10;
          Fp x45670 = Fp(x45669.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x45670;
          Fp x45671 = x45669 - x45670;
          Fp x45672 = x45671 * x10;
          Fp x45673 = Fp(x45672.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x45673;
          Fp x45674 = x45672 - x45673;
          Fp x45675 = x45674 * x10;
          Fp x45676 = Fp(x45675.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x45676;
          Fp x45677 = x45675 - x45676;
          Fp x45678 = x45677 * x10;
          Fp x45679 = Fp(x45678.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x45679;
        }
        Fp x45680 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x45681 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x45682 = x45681 * x3;
        Fp x45683 = x45680 + x45682;
        Fp x45684 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x45685 = x45684 * x11;
        Fp x45686 = x45683 + x45685;
        Fp x45687 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x45688 = x45687 * x12;
        Fp x45689 = x45686 + x45688;
        Fp x45690 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x45691 = x45690 * x13;
        Fp x45692 = x45689 + x45691;
        Fp x45693 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x45694 = x45693 * x14;
        Fp x45695 = x45692 + x45694;
        Fp x45696 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x45697 = x45696 * x15;
        Fp x45698 = x45695 + x45697;
        Fp x45699 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x45700 = x45699 * x16;
        Fp x45701 = x45698 + x45700;
        Fp x45702 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x45703 = x45702 * x17;
        Fp x45704 = x45701 + x45703;
        Fp x45705 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x45706 = x45705 * x18;
        Fp x45707 = x45704 + x45706;
        Fp x45708 = x45651 - x45707;
        Fp x45709 = x45708 * x66;
        if (x45709 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:95");
        Fp x45710 = x45200 * x3;
        Fp x45711 = x45197 + x45710;
        Fp x45712 = x45203 * x11;
        Fp x45713 = x45711 + x45712;
        Fp x45714 = x45206 * x12;
        Fp x45715 = x45713 + x45714;
        Fp x45716 = x45289 * x45715;
        Fp x45717 = x45627 * x45616;
        Fp x45718 = x45716 + x45717;
        Fp x45719 = x45333 * x3;
        Fp x45720 = x45330 + x45719;
        Fp x45721 = x45336 * x11;
        Fp x45722 = x45720 + x45721;
        Fp x45723 = x45339 * x12;
        Fp x45724 = x45722 + x45723;
        Fp x45725 = x45724 * x45156;
        Fp x45726 = x45718 + x45725;
        Fp x45727 = x45425 * x3;
        Fp x45728 = x45422 + x45727;
        Fp x45729 = x45428 * x11;
        Fp x45730 = x45728 + x45729;
        Fp x45731 = x45431 * x12;
        Fp x45732 = x45730 + x45731;
        Fp x45733 = x45726 + x45732;
        Fp x45734 = x45699 * x3;
        Fp x45735 = x45696 + x45734;
        Fp x45736 = x45702 * x11;
        Fp x45737 = x45735 + x45736;
        Fp x45738 = x45705 * x12;
        Fp x45739 = x45737 + x45738;
        Fp x45740 = x45733 + x45739;
        {
          Fp x45741 = Fp(x45740.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x45741;
          Fp x45742 = x45740 - x45741;
          Fp x45743 = x45742 * x10;
          Fp x45744 = Fp(x45743.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x45744;
          Fp x45745 = x45743 - x45744;
          Fp x45746 = x45745 * x10;
          Fp x45747 = Fp(x45746.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x45747;
          Fp x45748 = x45746 - x45747;
          Fp x45749 = x45748 * x10;
          Fp x45750 = Fp(x45749.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x45750;
        }
        Fp x45751 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x45752 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x45753 = x45752 * x3;
        Fp x45754 = x45751 + x45753;
        Fp x45755 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x45756 = x45755 * x11;
        Fp x45757 = x45754 + x45756;
        Fp x45758 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x45759 = x45758 * x12;
        Fp x45760 = x45757 + x45759;
        Fp x45761 = x45740 - x45760;
        Fp x45762 = x45761 * x67;
        if (x45762 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:100");
        host_args[0] = x45604;
        host_args[1] = x45707;
        host_args[2] = x45760;
        host(ctx, "log", "numer0=0x%06x, numer1=0x%05x, numer2=0x%02x", host_args.data(), 3, host_outs.data(), 0);
        Fp x45763 = x45683 * x15;
        Fp x45764 = x45586 + x45763;
        Fp x45765 = x45764 - x45242;
        if (x45765 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:108");
        Fp x45766 = x45687 * x3;
        Fp x45767 = x45684 + x45766;
        Fp x45768 = x45690 * x11;
        Fp x45769 = x45767 + x45768;
        Fp x45770 = x45693 * x12;
        Fp x45771 = x45769 + x45770;
        Fp x45772 = x45760 * x13;
        Fp x45773 = x45771 + x45772;
        Fp x45774 = x45773 - x45241;
        if (x45774 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:109");
        Fp x45775 = x45109 + x45243;
        Fp x45776 = x45109 * x1;
        Fp x45777 = x45776 * x45243;
        Fp x45778 = x45775 - x45777;
        Fp x45779 = x45109 * x45105;
        Fp x45780 = x45778 - x45779;
        args[2][92 * steps + cycle] = x45780;
        Fp x45781 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x45782 = x35 - x45249;
        Fp x45783 = x45781 * x45782;
        Fp x45784 = x71 - x45781;
        Fp x45785 = x45784 * x45249;
        Fp x45786 = x45783 + x45785;
        Fp x45787 = x35 - x45248;
        Fp x45788 = x45781 * x45787;
        Fp x45789 = x45784 * x45248;
        Fp x45790 = x45788 + x45789;
        args[2][100 * steps + cycle] = x45786;
        args[2][101 * steps + cycle] = x45790;
        {
          args[2][98 * steps + cycle] = x70;
          args[2][114 * steps + cycle] = x70;
        }
        Fp x45791 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x45792 = x70 - x45791;
        if (x45792 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45793 = x45791 * x17;
        Fp x45794 = x17 - x45791;
        Fp x45795 = x45794 - x17;
        {
          Fp x45796 = (x45795 == 0) ? Fp(1) : Fp(0);
          Fp x45797 = x71 - x45796;
          args[2][99 * steps + cycle] = x45797;
          Fp x45798 = inv(x45795);
          args[2][115 * steps + cycle] = x45798;
        }
        Fp x45799 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x45800 = x45795 * x45799;
        Fp x45801 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x45802 = x45800 - x45801;
        if (x45802 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45803 = x71 - x45801;
        Fp x45804 = x45803 * x45795;
        if (x45804 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x45805 = x45801 * x45794;
        args[2][116 * steps + cycle] = x45793;
        args[2][117 * steps + cycle] = x45805;
      }
      Fp x45806 = args[2][72 * steps + ((cycle - 1) & mask)];
      if (x45806 != 0) {
        Fp x45807 = x41504 + x41550;
        {
          Fp x45808 = (x45807 == 0) ? Fp(1) : Fp(0);
          Fp x45809 = x71 - x45808;
          args[2][118 * steps + cycle] = x45809;
          Fp x45810 = inv(x45807);
          args[2][119 * steps + cycle] = x45810;
        }
        Fp x45811 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x45812 = x45807 * x45811;
        Fp x45813 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x45814 = x45812 - x45813;
        if (x45814 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45815 = x71 - x45813;
        Fp x45816 = x45815 * x45807;
        if (x45816 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        args[2][124 * steps + cycle] = x41455;
        args[2][125 * steps + cycle] = x41456;
        {
          Fp x45817 = Fp(x41504.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x45817;
          Fp x45818 = x41504 - x45817;
          Fp x45819 = x45818 * x10;
          Fp x45820 = Fp(x45819.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x45820;
          Fp x45821 = x45819 - x45820;
          Fp x45822 = x45821 * x10;
          Fp x45823 = Fp(x45822.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x45823;
          Fp x45824 = x45822 - x45823;
          Fp x45825 = x45824 * x10;
          Fp x45826 = Fp(x45825.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x45826;
          Fp x45827 = x45825 - x45826;
          Fp x45828 = x45827 * x10;
          Fp x45829 = Fp(x45828.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x45829;
          Fp x45830 = x45828 - x45829;
          Fp x45831 = x45830 * x10;
          Fp x45832 = Fp(x45831.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x45832;
          Fp x45833 = x45831 - x45832;
          Fp x45834 = x45833 * x10;
          Fp x45835 = Fp(x45834.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x45835;
          Fp x45836 = x45834 - x45835;
          Fp x45837 = x45836 * x10;
          Fp x45838 = Fp(x45837.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x45838;
        }
        Fp x45839 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x45840 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x45841 = x45840 * x3;
        Fp x45842 = x45839 + x45841;
        Fp x45843 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x45844 = x45843 * x11;
        Fp x45845 = x45842 + x45844;
        Fp x45846 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x45847 = x45846 * x12;
        Fp x45848 = x45845 + x45847;
        Fp x45849 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x45850 = x45849 * x13;
        Fp x45851 = x45848 + x45850;
        Fp x45852 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x45853 = x45852 * x14;
        Fp x45854 = x45851 + x45853;
        Fp x45855 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x45856 = x45855 * x15;
        Fp x45857 = x45854 + x45856;
        Fp x45858 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x45859 = x45858 * x16;
        Fp x45860 = x45857 + x45859;
        Fp x45861 = x41504 - x45860;
        Fp x45862 = x45861 * x33;
        if (x45862 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:37");
        {
          Fp x45863 = Fp(x41550.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x45863;
          Fp x45864 = x41550 - x45863;
          Fp x45865 = x45864 * x10;
          Fp x45866 = Fp(x45865.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x45866;
          Fp x45867 = x45865 - x45866;
          Fp x45868 = x45867 * x10;
          Fp x45869 = Fp(x45868.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x45869;
          Fp x45870 = x45868 - x45869;
          Fp x45871 = x45870 * x10;
          Fp x45872 = Fp(x45871.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x45872;
          Fp x45873 = x45871 - x45872;
          Fp x45874 = x45873 * x10;
          Fp x45875 = Fp(x45874.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x45875;
          Fp x45876 = x45874 - x45875;
          Fp x45877 = x45876 * x10;
          Fp x45878 = Fp(x45877.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x45878;
          Fp x45879 = x45877 - x45878;
          Fp x45880 = x45879 * x10;
          Fp x45881 = Fp(x45880.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x45881;
          Fp x45882 = x45880 - x45881;
          Fp x45883 = x45882 * x10;
          Fp x45884 = Fp(x45883.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x45884;
        }
        Fp x45885 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x45886 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x45887 = x45886 * x3;
        Fp x45888 = x45885 + x45887;
        Fp x45889 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x45890 = x45889 * x11;
        Fp x45891 = x45888 + x45890;
        Fp x45892 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x45893 = x45892 * x12;
        Fp x45894 = x45891 + x45893;
        Fp x45895 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x45896 = x45895 * x13;
        Fp x45897 = x45894 + x45896;
        Fp x45898 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x45899 = x45898 * x14;
        Fp x45900 = x45897 + x45899;
        Fp x45901 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x45902 = x45901 * x15;
        Fp x45903 = x45900 + x45902;
        Fp x45904 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x45905 = x45904 * x16;
        Fp x45906 = x45903 + x45905;
        Fp x45907 = x41550 - x45906;
        Fp x45908 = x45907 * x33;
        if (x45908 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:37");
        args[2][90 * steps + cycle] = x70;
        args[2][91 * steps + cycle] = x70;
        {
          args[2][94 * steps + cycle] = x70;
          args[2][106 * steps + cycle] = x70;
        }
        Fp x45909 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x45910 = x70 - x45909;
        if (x45910 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45911 = x45909 * x17;
        Fp x45912 = x17 - x45909;
        Fp x45913 = x45912 - x17;
        {
          Fp x45914 = (x45913 == 0) ? Fp(1) : Fp(0);
          Fp x45915 = x71 - x45914;
          args[2][95 * steps + cycle] = x45915;
          Fp x45916 = inv(x45913);
          args[2][107 * steps + cycle] = x45916;
        }
        Fp x45917 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x45918 = x45913 * x45917;
        Fp x45919 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x45920 = x45918 - x45919;
        if (x45920 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45921 = x71 - x45919;
        Fp x45922 = x45921 * x45913;
        if (x45922 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x45923 = x45919 * x45912;
        args[2][108 * steps + cycle] = x45911;
        args[2][109 * steps + cycle] = x45923;
        {
          args[2][96 * steps + cycle] = x70;
          args[2][110 * steps + cycle] = x70;
        }
        Fp x45924 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x45925 = x70 - x45924;
        if (x45925 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45926 = x45924 * x17;
        Fp x45927 = x17 - x45924;
        Fp x45928 = x45927 - x17;
        {
          Fp x45929 = (x45928 == 0) ? Fp(1) : Fp(0);
          Fp x45930 = x71 - x45929;
          args[2][97 * steps + cycle] = x45930;
          Fp x45931 = inv(x45928);
          args[2][111 * steps + cycle] = x45931;
        }
        Fp x45932 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x45933 = x45928 * x45932;
        Fp x45934 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x45935 = x45933 - x45934;
        if (x45935 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x45936 = x71 - x45934;
        Fp x45937 = x45936 * x45928;
        if (x45937 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x45938 = x45934 * x45927;
        args[2][112 * steps + cycle] = x45926;
        args[2][113 * steps + cycle] = x45938;
        Fp x45939 = args[2][125 * steps + ((cycle - 0) & mask)];
        Fp x45940 = args[2][124 * steps + ((cycle - 0) & mask)];
        Fp x45941 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x45942 = args[2][91 * steps + ((cycle - 0) & mask)];
        host_args[0] = x45939;
        host_args[1] = x45940;
        host_args[2] = x45906;
        host_args[3] = x45860;
        host_args[4] = x45941;
        host_args[5] = x45942;
        host(ctx, "log", "numer32 = %04x%04x, denom = %04x%04x, negNumer = %d, negDenom = %d", host_args.data(), 6, host_outs.data(), 0);
        {
          host_args[0] = x45940;
          host_args[1] = x45939;
          host_args[2] = x45860;
          host_args[3] = x45906;
          host(ctx, "divide32", "", host_args.data(), 4, host_outs.data(), 4);
          Fp x45943 = host_outs[0];
          Fp x45944 = host_outs[1];
          Fp x45945 = host_outs[2];
          Fp x45946 = host_outs[3];
          args[2][120 * steps + cycle] = x45943;
          args[2][121 * steps + cycle] = x45944;
          args[2][122 * steps + cycle] = x45945;
          args[2][123 * steps + cycle] = x45946;
        }
        Fp x45947 = args[2][121 * steps + ((cycle - 0) & mask)];
        Fp x45948 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x45949 = args[2][123 * steps + ((cycle - 0) & mask)];
        Fp x45950 = args[2][122 * steps + ((cycle - 0) & mask)];
        host_args[0] = x45947;
        host_args[1] = x45948;
        host_args[2] = x45949;
        host_args[3] = x45950;
        host(ctx, "log", "quot32 = %04x%04x, rem32 = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x45951 = Fp(x45948.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x45951;
          Fp x45952 = x45948 - x45951;
          Fp x45953 = x45952 * x10;
          Fp x45954 = Fp(x45953.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x45954;
          Fp x45955 = x45953 - x45954;
          Fp x45956 = x45955 * x10;
          Fp x45957 = Fp(x45956.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x45957;
          Fp x45958 = x45956 - x45957;
          Fp x45959 = x45958 * x10;
          Fp x45960 = Fp(x45959.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x45960;
          Fp x45961 = x45959 - x45960;
          Fp x45962 = x45961 * x10;
          Fp x45963 = Fp(x45962.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x45963;
          Fp x45964 = x45962 - x45963;
          Fp x45965 = x45964 * x10;
          Fp x45966 = Fp(x45965.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x45966;
          Fp x45967 = x45965 - x45966;
          Fp x45968 = x45967 * x10;
          Fp x45969 = Fp(x45968.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x45969;
          Fp x45970 = x45968 - x45969;
          Fp x45971 = x45970 * x10;
          Fp x45972 = Fp(x45971.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x45972;
        }
        Fp x45973 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x45974 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x45975 = x45974 * x3;
        Fp x45976 = x45973 + x45975;
        Fp x45977 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x45978 = x45977 * x11;
        Fp x45979 = x45976 + x45978;
        Fp x45980 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x45981 = x45980 * x12;
        Fp x45982 = x45979 + x45981;
        Fp x45983 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x45984 = x45983 * x13;
        Fp x45985 = x45982 + x45984;
        Fp x45986 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x45987 = x45986 * x14;
        Fp x45988 = x45985 + x45987;
        Fp x45989 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x45990 = x45989 * x15;
        Fp x45991 = x45988 + x45990;
        Fp x45992 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x45993 = x45992 * x16;
        Fp x45994 = x45991 + x45993;
        Fp x45995 = x45948 - x45994;
        Fp x45996 = x45995 * x33;
        if (x45996 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x45997 = Fp(x45947.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x45997;
          Fp x45998 = x45947 - x45997;
          Fp x45999 = x45998 * x10;
          Fp x46000 = Fp(x45999.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x46000;
          Fp x46001 = x45999 - x46000;
          Fp x46002 = x46001 * x10;
          Fp x46003 = Fp(x46002.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x46003;
          Fp x46004 = x46002 - x46003;
          Fp x46005 = x46004 * x10;
          Fp x46006 = Fp(x46005.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x46006;
          Fp x46007 = x46005 - x46006;
          Fp x46008 = x46007 * x10;
          Fp x46009 = Fp(x46008.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x46009;
          Fp x46010 = x46008 - x46009;
          Fp x46011 = x46010 * x10;
          Fp x46012 = Fp(x46011.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x46012;
          Fp x46013 = x46011 - x46012;
          Fp x46014 = x46013 * x10;
          Fp x46015 = Fp(x46014.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x46015;
          Fp x46016 = x46014 - x46015;
          Fp x46017 = x46016 * x10;
          Fp x46018 = Fp(x46017.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x46018;
        }
        Fp x46019 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x46020 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x46021 = x46020 * x3;
        Fp x46022 = x46019 + x46021;
        Fp x46023 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x46024 = x46023 * x11;
        Fp x46025 = x46022 + x46024;
        Fp x46026 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x46027 = x46026 * x12;
        Fp x46028 = x46025 + x46027;
        Fp x46029 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x46030 = x46029 * x13;
        Fp x46031 = x46028 + x46030;
        Fp x46032 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x46033 = x46032 * x14;
        Fp x46034 = x46031 + x46033;
        Fp x46035 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x46036 = x46035 * x15;
        Fp x46037 = x46034 + x46036;
        Fp x46038 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x46039 = x46038 * x16;
        Fp x46040 = x46037 + x46039;
        Fp x46041 = x45947 - x46040;
        Fp x46042 = x46041 * x33;
        if (x46042 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x46043 = Fp(x45950.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x46043;
          Fp x46044 = x45950 - x46043;
          Fp x46045 = x46044 * x10;
          Fp x46046 = Fp(x46045.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x46046;
          Fp x46047 = x46045 - x46046;
          Fp x46048 = x46047 * x10;
          Fp x46049 = Fp(x46048.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x46049;
          Fp x46050 = x46048 - x46049;
          Fp x46051 = x46050 * x10;
          Fp x46052 = Fp(x46051.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x46052;
          Fp x46053 = x46051 - x46052;
          Fp x46054 = x46053 * x10;
          Fp x46055 = Fp(x46054.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x46055;
          Fp x46056 = x46054 - x46055;
          Fp x46057 = x46056 * x10;
          Fp x46058 = Fp(x46057.asUInt32() & x2.asUInt32());
          args[2][37 * steps + cycle] = x46058;
          Fp x46059 = x46057 - x46058;
          Fp x46060 = x46059 * x10;
          Fp x46061 = Fp(x46060.asUInt32() & x2.asUInt32());
          args[2][38 * steps + cycle] = x46061;
          Fp x46062 = x46060 - x46061;
          Fp x46063 = x46062 * x10;
          Fp x46064 = Fp(x46063.asUInt32() & x2.asUInt32());
          args[2][39 * steps + cycle] = x46064;
        }
        Fp x46065 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x46066 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x46067 = x46066 * x3;
        Fp x46068 = x46065 + x46067;
        Fp x46069 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x46070 = x46069 * x11;
        Fp x46071 = x46068 + x46070;
        Fp x46072 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x46073 = x46072 * x12;
        Fp x46074 = x46071 + x46073;
        Fp x46075 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x46076 = x46075 * x13;
        Fp x46077 = x46074 + x46076;
        Fp x46078 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x46079 = x46078 * x14;
        Fp x46080 = x46077 + x46079;
        Fp x46081 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x46082 = x46081 * x15;
        Fp x46083 = x46080 + x46082;
        Fp x46084 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x46085 = x46084 * x16;
        Fp x46086 = x46083 + x46085;
        Fp x46087 = x45950 - x46086;
        Fp x46088 = x46087 * x33;
        if (x46088 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        {
          Fp x46089 = Fp(x45949.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x46089;
          Fp x46090 = x45949 - x46089;
          Fp x46091 = x46090 * x10;
          Fp x46092 = Fp(x46091.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x46092;
          Fp x46093 = x46091 - x46092;
          Fp x46094 = x46093 * x10;
          Fp x46095 = Fp(x46094.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x46095;
          Fp x46096 = x46094 - x46095;
          Fp x46097 = x46096 * x10;
          Fp x46098 = Fp(x46097.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x46098;
          Fp x46099 = x46097 - x46098;
          Fp x46100 = x46099 * x10;
          Fp x46101 = Fp(x46100.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x46101;
          Fp x46102 = x46100 - x46101;
          Fp x46103 = x46102 * x10;
          Fp x46104 = Fp(x46103.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x46104;
          Fp x46105 = x46103 - x46104;
          Fp x46106 = x46105 * x10;
          Fp x46107 = Fp(x46106.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x46107;
          Fp x46108 = x46106 - x46107;
          Fp x46109 = x46108 * x10;
          Fp x46110 = Fp(x46109.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x46110;
        }
        Fp x46111 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x46112 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x46113 = x46112 * x3;
        Fp x46114 = x46111 + x46113;
        Fp x46115 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x46116 = x46115 * x11;
        Fp x46117 = x46114 + x46116;
        Fp x46118 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x46119 = x46118 * x12;
        Fp x46120 = x46117 + x46119;
        Fp x46121 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x46122 = x46121 * x13;
        Fp x46123 = x46120 + x46122;
        Fp x46124 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x46125 = x46124 * x14;
        Fp x46126 = x46123 + x46125;
        Fp x46127 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x46128 = x46127 * x15;
        Fp x46129 = x46126 + x46128;
        Fp x46130 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x46131 = x46130 * x16;
        Fp x46132 = x46129 + x46131;
        Fp x46133 = x45949 - x46132;
        Fp x46134 = x46133 * x33;
        if (x46134 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        if (x45813 != 0) {
          Fp x46135 = x45860 + x17;
          Fp x46136 = x46135 - x46086;
          Fp x46137 = x46136 - x71;
          {
            Fp x46138 = Fp(x46137.asUInt32() & x2.asUInt32());
            args[2][48 * steps + cycle] = x46138;
            Fp x46139 = x46137 - x46138;
            Fp x46140 = x46139 * x10;
            Fp x46141 = Fp(x46140.asUInt32() & x2.asUInt32());
            args[2][49 * steps + cycle] = x46141;
            Fp x46142 = x46140 - x46141;
            Fp x46143 = x46142 * x10;
            Fp x46144 = Fp(x46143.asUInt32() & x2.asUInt32());
            args[2][50 * steps + cycle] = x46144;
            Fp x46145 = x46143 - x46144;
            Fp x46146 = x46145 * x10;
            Fp x46147 = Fp(x46146.asUInt32() & x2.asUInt32());
            args[2][51 * steps + cycle] = x46147;
            Fp x46148 = x46146 - x46147;
            Fp x46149 = x46148 * x10;
            Fp x46150 = Fp(x46149.asUInt32() & x2.asUInt32());
            args[2][52 * steps + cycle] = x46150;
            Fp x46151 = x46149 - x46150;
            Fp x46152 = x46151 * x10;
            Fp x46153 = Fp(x46152.asUInt32() & x2.asUInt32());
            args[2][53 * steps + cycle] = x46153;
            Fp x46154 = x46152 - x46153;
            Fp x46155 = x46154 * x10;
            Fp x46156 = Fp(x46155.asUInt32() & x2.asUInt32());
            args[2][54 * steps + cycle] = x46156;
            Fp x46157 = x46155 - x46156;
            Fp x46158 = x46157 * x10;
            Fp x46159 = Fp(x46158.asUInt32() & x2.asUInt32());
            args[2][55 * steps + cycle] = x46159;
          }
          Fp x46160 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x46161 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x46162 = x46161 * x3;
          Fp x46163 = x46160 + x46162;
          Fp x46164 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x46165 = x46164 * x11;
          Fp x46166 = x46163 + x46165;
          Fp x46167 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x46168 = x46167 * x12;
          Fp x46169 = x46166 + x46168;
          Fp x46170 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x46171 = x46170 * x13;
          Fp x46172 = x46169 + x46171;
          Fp x46173 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x46174 = x46173 * x14;
          Fp x46175 = x46172 + x46174;
          Fp x46176 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x46177 = x46176 * x15;
          Fp x46178 = x46175 + x46177;
          Fp x46179 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x46180 = x46179 * x16;
          Fp x46181 = x46178 + x46180;
          Fp x46182 = x46137 - x46181;
          Fp x46183 = x46182 * x33;
          args[2][93 * steps + cycle] = x46183;
          Fp x46184 = x45906 - x46132;
          Fp x46185 = x46184 - x71;
          Fp x46186 = args[2][93 * steps + ((cycle - 0) & mask)];
          Fp x46187 = x46185 + x46186;
          {
            Fp x46188 = Fp(x46187.asUInt32() & x2.asUInt32());
            args[2][56 * steps + cycle] = x46188;
            Fp x46189 = x46187 - x46188;
            Fp x46190 = x46189 * x10;
            Fp x46191 = Fp(x46190.asUInt32() & x2.asUInt32());
            args[2][57 * steps + cycle] = x46191;
            Fp x46192 = x46190 - x46191;
            Fp x46193 = x46192 * x10;
            Fp x46194 = Fp(x46193.asUInt32() & x2.asUInt32());
            args[2][58 * steps + cycle] = x46194;
            Fp x46195 = x46193 - x46194;
            Fp x46196 = x46195 * x10;
            Fp x46197 = Fp(x46196.asUInt32() & x2.asUInt32());
            args[2][59 * steps + cycle] = x46197;
            Fp x46198 = x46196 - x46197;
            Fp x46199 = x46198 * x10;
            Fp x46200 = Fp(x46199.asUInt32() & x2.asUInt32());
            args[2][60 * steps + cycle] = x46200;
            Fp x46201 = x46199 - x46200;
            Fp x46202 = x46201 * x10;
            Fp x46203 = Fp(x46202.asUInt32() & x2.asUInt32());
            args[2][61 * steps + cycle] = x46203;
            Fp x46204 = x46202 - x46203;
            Fp x46205 = x46204 * x10;
            Fp x46206 = Fp(x46205.asUInt32() & x2.asUInt32());
            args[2][62 * steps + cycle] = x46206;
            Fp x46207 = x46205 - x46206;
            Fp x46208 = x46207 * x10;
            Fp x46209 = Fp(x46208.asUInt32() & x2.asUInt32());
            args[2][63 * steps + cycle] = x46209;
          }
          Fp x46210 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x46211 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x46212 = x46211 * x3;
          Fp x46213 = x46210 + x46212;
          Fp x46214 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x46215 = x46214 * x11;
          Fp x46216 = x46213 + x46215;
          Fp x46217 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x46218 = x46217 * x12;
          Fp x46219 = x46216 + x46218;
          Fp x46220 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x46221 = x46220 * x13;
          Fp x46222 = x46219 + x46221;
          Fp x46223 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x46224 = x46223 * x14;
          Fp x46225 = x46222 + x46224;
          Fp x46226 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x46227 = x46226 * x15;
          Fp x46228 = x46225 + x46227;
          Fp x46229 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x46230 = x46229 * x16;
          Fp x46231 = x46228 + x46230;
          Fp x46232 = x46187 - x46231;
          Fp x46233 = x46232 * x33;
          if (x46233 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:91");
        }
        Fp x46234 = x45988 * x45854;
        Fp x46235 = x46234 + x46080;
        {
          Fp x46236 = Fp(x46235.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x46236;
          Fp x46237 = x46235 - x46236;
          Fp x46238 = x46237 * x10;
          Fp x46239 = Fp(x46238.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x46239;
          Fp x46240 = x46238 - x46239;
          Fp x46241 = x46240 * x10;
          Fp x46242 = Fp(x46241.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x46242;
          Fp x46243 = x46241 - x46242;
          Fp x46244 = x46243 * x10;
          Fp x46245 = Fp(x46244.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x46245;
          Fp x46246 = x46244 - x46245;
          Fp x46247 = x46246 * x10;
          Fp x46248 = Fp(x46247.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x46248;
          Fp x46249 = x46247 - x46248;
          Fp x46250 = x46249 * x10;
          Fp x46251 = Fp(x46250.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x46251;
          Fp x46252 = x46250 - x46251;
          Fp x46253 = x46252 * x10;
          Fp x46254 = Fp(x46253.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x46254;
          Fp x46255 = x46253 - x46254;
          Fp x46256 = x46255 * x10;
          Fp x46257 = Fp(x46256.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x46257;
          Fp x46258 = x46256 - x46257;
          Fp x46259 = x46258 * x10;
          Fp x46260 = Fp(x46259.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x46260;
          Fp x46261 = x46259 - x46260;
          Fp x46262 = x46261 * x10;
          Fp x46263 = Fp(x46262.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x46263;
          Fp x46264 = x46262 - x46263;
          Fp x46265 = x46264 * x10;
          Fp x46266 = Fp(x46265.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x46266;
          Fp x46267 = x46265 - x46266;
          Fp x46268 = x46267 * x10;
          Fp x46269 = Fp(x46268.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x46269;
        }
        Fp x46270 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x46271 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x46272 = x46271 * x3;
        Fp x46273 = x46270 + x46272;
        Fp x46274 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x46275 = x46274 * x11;
        Fp x46276 = x46273 + x46275;
        Fp x46277 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x46278 = x46277 * x12;
        Fp x46279 = x46276 + x46278;
        Fp x46280 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x46281 = x46280 * x13;
        Fp x46282 = x46279 + x46281;
        Fp x46283 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x46284 = x46283 * x14;
        Fp x46285 = x46282 + x46284;
        Fp x46286 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x46287 = x46286 * x15;
        Fp x46288 = x46285 + x46287;
        Fp x46289 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x46290 = x46289 * x16;
        Fp x46291 = x46288 + x46290;
        Fp x46292 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x46293 = x46292 * x17;
        Fp x46294 = x46291 + x46293;
        Fp x46295 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x46296 = x46295 * x18;
        Fp x46297 = x46294 + x46296;
        Fp x46298 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x46299 = x46298 * x19;
        Fp x46300 = x46297 + x46299;
        Fp x46301 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x46302 = x46301 * x20;
        Fp x46303 = x46300 + x46302;
        Fp x46304 = x46235 - x46303;
        Fp x46305 = x46304 * x62;
        if (x46305 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:94");
        Fp x46306 = x45858 * x3;
        Fp x46307 = x45855 + x46306;
        Fp x46308 = x45885 * x11;
        Fp x46309 = x46307 + x46308;
        Fp x46310 = x45886 * x12;
        Fp x46311 = x46309 + x46310;
        Fp x46312 = x45889 * x13;
        Fp x46313 = x46311 + x46312;
        Fp x46314 = x45892 * x14;
        Fp x46315 = x46313 + x46314;
        Fp x46316 = x45988 * x46315;
        Fp x46317 = x45992 * x3;
        Fp x46318 = x45989 + x46317;
        Fp x46319 = x46019 * x11;
        Fp x46320 = x46318 + x46319;
        Fp x46321 = x46020 * x12;
        Fp x46322 = x46320 + x46321;
        Fp x46323 = x46023 * x13;
        Fp x46324 = x46322 + x46323;
        Fp x46325 = x46026 * x14;
        Fp x46326 = x46324 + x46325;
        Fp x46327 = x46326 * x45854;
        Fp x46328 = x46316 + x46327;
        Fp x46329 = x46084 * x3;
        Fp x46330 = x46081 + x46329;
        Fp x46331 = x46111 * x11;
        Fp x46332 = x46330 + x46331;
        Fp x46333 = x46112 * x12;
        Fp x46334 = x46332 + x46333;
        Fp x46335 = x46115 * x13;
        Fp x46336 = x46334 + x46335;
        Fp x46337 = x46118 * x14;
        Fp x46338 = x46336 + x46337;
        Fp x46339 = x46328 + x46338;
        Fp x46340 = x46289 * x3;
        Fp x46341 = x46286 + x46340;
        Fp x46342 = x46292 * x11;
        Fp x46343 = x46341 + x46342;
        Fp x46344 = x46295 * x12;
        Fp x46345 = x46343 + x46344;
        Fp x46346 = x46298 * x13;
        Fp x46347 = x46345 + x46346;
        Fp x46348 = x46301 * x14;
        Fp x46349 = x46347 + x46348;
        Fp x46350 = x46339 + x46349;
        {
          Fp x46351 = Fp(x46350.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x46351;
          Fp x46352 = x46350 - x46351;
          Fp x46353 = x46352 * x10;
          Fp x46354 = Fp(x46353.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x46354;
          Fp x46355 = x46353 - x46354;
          Fp x46356 = x46355 * x10;
          Fp x46357 = Fp(x46356.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x46357;
          Fp x46358 = x46356 - x46357;
          Fp x46359 = x46358 * x10;
          Fp x46360 = Fp(x46359.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x46360;
          Fp x46361 = x46359 - x46360;
          Fp x46362 = x46361 * x10;
          Fp x46363 = Fp(x46362.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x46363;
          Fp x46364 = x46362 - x46363;
          Fp x46365 = x46364 * x10;
          Fp x46366 = Fp(x46365.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x46366;
          Fp x46367 = x46365 - x46366;
          Fp x46368 = x46367 * x10;
          Fp x46369 = Fp(x46368.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x46369;
          Fp x46370 = x46368 - x46369;
          Fp x46371 = x46370 * x10;
          Fp x46372 = Fp(x46371.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x46372;
          Fp x46373 = x46371 - x46372;
          Fp x46374 = x46373 * x10;
          Fp x46375 = Fp(x46374.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x46375;
          Fp x46376 = x46374 - x46375;
          Fp x46377 = x46376 * x10;
          Fp x46378 = Fp(x46377.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x46378;
        }
        Fp x46379 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x46380 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x46381 = x46380 * x3;
        Fp x46382 = x46379 + x46381;
        Fp x46383 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x46384 = x46383 * x11;
        Fp x46385 = x46382 + x46384;
        Fp x46386 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x46387 = x46386 * x12;
        Fp x46388 = x46385 + x46387;
        Fp x46389 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x46390 = x46389 * x13;
        Fp x46391 = x46388 + x46390;
        Fp x46392 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x46393 = x46392 * x14;
        Fp x46394 = x46391 + x46393;
        Fp x46395 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x46396 = x46395 * x15;
        Fp x46397 = x46394 + x46396;
        Fp x46398 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x46399 = x46398 * x16;
        Fp x46400 = x46397 + x46399;
        Fp x46401 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x46402 = x46401 * x17;
        Fp x46403 = x46400 + x46402;
        Fp x46404 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x46405 = x46404 * x18;
        Fp x46406 = x46403 + x46405;
        Fp x46407 = x46350 - x46406;
        Fp x46408 = x46407 * x66;
        if (x46408 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:95");
        Fp x46409 = x45898 * x3;
        Fp x46410 = x45895 + x46409;
        Fp x46411 = x45901 * x11;
        Fp x46412 = x46410 + x46411;
        Fp x46413 = x45904 * x12;
        Fp x46414 = x46412 + x46413;
        Fp x46415 = x45988 * x46414;
        Fp x46416 = x46326 * x46315;
        Fp x46417 = x46415 + x46416;
        Fp x46418 = x46032 * x3;
        Fp x46419 = x46029 + x46418;
        Fp x46420 = x46035 * x11;
        Fp x46421 = x46419 + x46420;
        Fp x46422 = x46038 * x12;
        Fp x46423 = x46421 + x46422;
        Fp x46424 = x46423 * x45854;
        Fp x46425 = x46417 + x46424;
        Fp x46426 = x46124 * x3;
        Fp x46427 = x46121 + x46426;
        Fp x46428 = x46127 * x11;
        Fp x46429 = x46427 + x46428;
        Fp x46430 = x46130 * x12;
        Fp x46431 = x46429 + x46430;
        Fp x46432 = x46425 + x46431;
        Fp x46433 = x46398 * x3;
        Fp x46434 = x46395 + x46433;
        Fp x46435 = x46401 * x11;
        Fp x46436 = x46434 + x46435;
        Fp x46437 = x46404 * x12;
        Fp x46438 = x46436 + x46437;
        Fp x46439 = x46432 + x46438;
        {
          Fp x46440 = Fp(x46439.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x46440;
          Fp x46441 = x46439 - x46440;
          Fp x46442 = x46441 * x10;
          Fp x46443 = Fp(x46442.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x46443;
          Fp x46444 = x46442 - x46443;
          Fp x46445 = x46444 * x10;
          Fp x46446 = Fp(x46445.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x46446;
          Fp x46447 = x46445 - x46446;
          Fp x46448 = x46447 * x10;
          Fp x46449 = Fp(x46448.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x46449;
        }
        Fp x46450 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x46451 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x46452 = x46451 * x3;
        Fp x46453 = x46450 + x46452;
        Fp x46454 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x46455 = x46454 * x11;
        Fp x46456 = x46453 + x46455;
        Fp x46457 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x46458 = x46457 * x12;
        Fp x46459 = x46456 + x46458;
        Fp x46460 = x46439 - x46459;
        Fp x46461 = x46460 * x67;
        if (x46461 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:100");
        host_args[0] = x46303;
        host_args[1] = x46406;
        host_args[2] = x46459;
        host(ctx, "log", "numer0=0x%06x, numer1=0x%05x, numer2=0x%02x", host_args.data(), 3, host_outs.data(), 0);
        Fp x46462 = x46382 * x15;
        Fp x46463 = x46285 + x46462;
        Fp x46464 = x46463 - x45940;
        if (x46464 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:108");
        Fp x46465 = x46386 * x3;
        Fp x46466 = x46383 + x46465;
        Fp x46467 = x46389 * x11;
        Fp x46468 = x46466 + x46467;
        Fp x46469 = x46392 * x12;
        Fp x46470 = x46468 + x46469;
        Fp x46471 = x46459 * x13;
        Fp x46472 = x46470 + x46471;
        Fp x46473 = x46472 - x45939;
        if (x46473 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:109");
        args[2][92 * steps + cycle] = x70;
        args[2][100 * steps + cycle] = x45948;
        args[2][101 * steps + cycle] = x45947;
        {
          args[2][98 * steps + cycle] = x70;
          args[2][114 * steps + cycle] = x70;
        }
        Fp x46474 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x46475 = x70 - x46474;
        if (x46475 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x46476 = x46474 * x17;
        Fp x46477 = x17 - x46474;
        Fp x46478 = x46477 - x17;
        {
          Fp x46479 = (x46478 == 0) ? Fp(1) : Fp(0);
          Fp x46480 = x71 - x46479;
          args[2][99 * steps + cycle] = x46480;
          Fp x46481 = inv(x46478);
          args[2][115 * steps + cycle] = x46481;
        }
        Fp x46482 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x46483 = x46478 * x46482;
        Fp x46484 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x46485 = x46483 - x46484;
        if (x46485 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x46486 = x71 - x46484;
        Fp x46487 = x46486 * x46478;
        if (x46487 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x46488 = x46484 * x46477;
        args[2][116 * steps + cycle] = x46476;
        args[2][117 * steps + cycle] = x46488;
      }
      Fp x46489 = args[2][73 * steps + ((cycle - 1) & mask)];
      if (x46489 != 0) {
        Fp x46490 = x41504 + x41550;
        {
          Fp x46491 = (x46490 == 0) ? Fp(1) : Fp(0);
          Fp x46492 = x71 - x46491;
          args[2][118 * steps + cycle] = x46492;
          Fp x46493 = inv(x46490);
          args[2][119 * steps + cycle] = x46493;
        }
        Fp x46494 = args[2][119 * steps + ((cycle - 0) & mask)];
        Fp x46495 = x46490 * x46494;
        Fp x46496 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x46497 = x46495 - x46496;
        if (x46497 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x46498 = x71 - x46496;
        Fp x46499 = x46498 * x46490;
        if (x46499 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        {
          Fp x46500 = Fp(x41456.asUInt32() & x32.asUInt32());
          Fp x46501 = x46500 * x65;
          args[2][90 * steps + cycle] = x46501;
        }
        args[2][91 * steps + cycle] = x70;
        Fp x46502 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x46503 = x35 - x41455;
        Fp x46504 = x46502 * x46503;
        Fp x46505 = x71 - x46502;
        Fp x46506 = x46505 * x41455;
        Fp x46507 = x46504 + x46506;
        Fp x46508 = x35 - x41456;
        Fp x46509 = x46502 * x46508;
        Fp x46510 = x46505 * x41456;
        Fp x46511 = x46509 + x46510;
        args[2][124 * steps + cycle] = x46507;
        args[2][125 * steps + cycle] = x46511;
        {
          Fp x46512 = Fp(x41504.asUInt32() & x2.asUInt32());
          args[2][0 * steps + cycle] = x46512;
          Fp x46513 = x41504 - x46512;
          Fp x46514 = x46513 * x10;
          Fp x46515 = Fp(x46514.asUInt32() & x2.asUInt32());
          args[2][1 * steps + cycle] = x46515;
          Fp x46516 = x46514 - x46515;
          Fp x46517 = x46516 * x10;
          Fp x46518 = Fp(x46517.asUInt32() & x2.asUInt32());
          args[2][2 * steps + cycle] = x46518;
          Fp x46519 = x46517 - x46518;
          Fp x46520 = x46519 * x10;
          Fp x46521 = Fp(x46520.asUInt32() & x2.asUInt32());
          args[2][3 * steps + cycle] = x46521;
          Fp x46522 = x46520 - x46521;
          Fp x46523 = x46522 * x10;
          Fp x46524 = Fp(x46523.asUInt32() & x2.asUInt32());
          args[2][4 * steps + cycle] = x46524;
          Fp x46525 = x46523 - x46524;
          Fp x46526 = x46525 * x10;
          Fp x46527 = Fp(x46526.asUInt32() & x2.asUInt32());
          args[2][5 * steps + cycle] = x46527;
          Fp x46528 = x46526 - x46527;
          Fp x46529 = x46528 * x10;
          Fp x46530 = Fp(x46529.asUInt32() & x2.asUInt32());
          args[2][6 * steps + cycle] = x46530;
          Fp x46531 = x46529 - x46530;
          Fp x46532 = x46531 * x10;
          Fp x46533 = Fp(x46532.asUInt32() & x2.asUInt32());
          args[2][7 * steps + cycle] = x46533;
        }
        Fp x46534 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x46535 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x46536 = x46535 * x3;
        Fp x46537 = x46534 + x46536;
        Fp x46538 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x46539 = x46538 * x11;
        Fp x46540 = x46537 + x46539;
        Fp x46541 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x46542 = x46541 * x12;
        Fp x46543 = x46540 + x46542;
        Fp x46544 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x46545 = x46544 * x13;
        Fp x46546 = x46543 + x46545;
        Fp x46547 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x46548 = x46547 * x14;
        Fp x46549 = x46546 + x46548;
        Fp x46550 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x46551 = x46550 * x15;
        Fp x46552 = x46549 + x46551;
        Fp x46553 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x46554 = x46553 * x16;
        Fp x46555 = x46552 + x46554;
        Fp x46556 = x41504 - x46555;
        Fp x46557 = x46556 * x33;
        if (x46557 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:59");
        {
          Fp x46558 = Fp(x41550.asUInt32() & x2.asUInt32());
          args[2][8 * steps + cycle] = x46558;
          Fp x46559 = x41550 - x46558;
          Fp x46560 = x46559 * x10;
          Fp x46561 = Fp(x46560.asUInt32() & x2.asUInt32());
          args[2][9 * steps + cycle] = x46561;
          Fp x46562 = x46560 - x46561;
          Fp x46563 = x46562 * x10;
          Fp x46564 = Fp(x46563.asUInt32() & x2.asUInt32());
          args[2][10 * steps + cycle] = x46564;
          Fp x46565 = x46563 - x46564;
          Fp x46566 = x46565 * x10;
          Fp x46567 = Fp(x46566.asUInt32() & x2.asUInt32());
          args[2][11 * steps + cycle] = x46567;
          Fp x46568 = x46566 - x46567;
          Fp x46569 = x46568 * x10;
          Fp x46570 = Fp(x46569.asUInt32() & x2.asUInt32());
          args[2][12 * steps + cycle] = x46570;
          Fp x46571 = x46569 - x46570;
          Fp x46572 = x46571 * x10;
          Fp x46573 = Fp(x46572.asUInt32() & x2.asUInt32());
          args[2][13 * steps + cycle] = x46573;
          Fp x46574 = x46572 - x46573;
          Fp x46575 = x46574 * x10;
          Fp x46576 = Fp(x46575.asUInt32() & x2.asUInt32());
          args[2][14 * steps + cycle] = x46576;
          Fp x46577 = x46575 - x46576;
          Fp x46578 = x46577 * x10;
          Fp x46579 = Fp(x46578.asUInt32() & x2.asUInt32());
          args[2][15 * steps + cycle] = x46579;
        }
        Fp x46580 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x46581 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x46582 = x46581 * x3;
        Fp x46583 = x46580 + x46582;
        Fp x46584 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x46585 = x46584 * x11;
        Fp x46586 = x46583 + x46585;
        Fp x46587 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x46588 = x46587 * x12;
        Fp x46589 = x46586 + x46588;
        Fp x46590 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x46591 = x46590 * x13;
        Fp x46592 = x46589 + x46591;
        Fp x46593 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x46594 = x46593 * x14;
        Fp x46595 = x46592 + x46594;
        Fp x46596 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x46597 = x46596 * x15;
        Fp x46598 = x46595 + x46597;
        Fp x46599 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x46600 = x46599 * x16;
        Fp x46601 = x46598 + x46600;
        Fp x46602 = x41550 - x46601;
        Fp x46603 = x46602 * x33;
        if (x46603 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:59");
        {
          args[2][94 * steps + cycle] = x70;
          args[2][106 * steps + cycle] = x70;
        }
        Fp x46604 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x46605 = x70 - x46604;
        if (x46605 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x46606 = x46604 * x17;
        Fp x46607 = x17 - x46604;
        Fp x46608 = x46607 - x17;
        {
          Fp x46609 = (x46608 == 0) ? Fp(1) : Fp(0);
          Fp x46610 = x71 - x46609;
          args[2][95 * steps + cycle] = x46610;
          Fp x46611 = inv(x46608);
          args[2][107 * steps + cycle] = x46611;
        }
        Fp x46612 = args[2][107 * steps + ((cycle - 0) & mask)];
        Fp x46613 = x46608 * x46612;
        Fp x46614 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x46615 = x46613 - x46614;
        if (x46615 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x46616 = x71 - x46614;
        Fp x46617 = x46616 * x46608;
        if (x46617 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x46618 = x46614 * x46607;
        args[2][108 * steps + cycle] = x46606;
        args[2][109 * steps + cycle] = x46618;
        {
          args[2][96 * steps + cycle] = x70;
          args[2][110 * steps + cycle] = x70;
        }
        Fp x46619 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x46620 = x70 - x46619;
        if (x46620 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x46621 = x46619 * x17;
        Fp x46622 = x17 - x46619;
        Fp x46623 = x46622 - x17;
        {
          Fp x46624 = (x46623 == 0) ? Fp(1) : Fp(0);
          Fp x46625 = x71 - x46624;
          args[2][97 * steps + cycle] = x46625;
          Fp x46626 = inv(x46623);
          args[2][111 * steps + cycle] = x46626;
        }
        Fp x46627 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x46628 = x46623 * x46627;
        Fp x46629 = args[2][97 * steps + ((cycle - 0) & mask)];
        Fp x46630 = x46628 - x46629;
        if (x46630 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x46631 = x71 - x46629;
        Fp x46632 = x46631 * x46623;
        if (x46632 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x46633 = x46629 * x46622;
        args[2][112 * steps + cycle] = x46621;
        args[2][113 * steps + cycle] = x46633;
        Fp x46634 = args[2][125 * steps + ((cycle - 0) & mask)];
        Fp x46635 = args[2][124 * steps + ((cycle - 0) & mask)];
        Fp x46636 = args[2][91 * steps + ((cycle - 0) & mask)];
        host_args[0] = x46634;
        host_args[1] = x46635;
        host_args[2] = x46601;
        host_args[3] = x46555;
        host_args[4] = x46502;
        host_args[5] = x46636;
        host(ctx, "log", "numer32 = %04x%04x, denom = %04x%04x, negNumer = %d, negDenom = %d", host_args.data(), 6, host_outs.data(), 0);
        {
          host_args[0] = x46635;
          host_args[1] = x46634;
          host_args[2] = x46555;
          host_args[3] = x46601;
          host(ctx, "divide32", "", host_args.data(), 4, host_outs.data(), 4);
          Fp x46637 = host_outs[0];
          Fp x46638 = host_outs[1];
          Fp x46639 = host_outs[2];
          Fp x46640 = host_outs[3];
          args[2][120 * steps + cycle] = x46637;
          args[2][121 * steps + cycle] = x46638;
          args[2][122 * steps + cycle] = x46639;
          args[2][123 * steps + cycle] = x46640;
        }
        Fp x46641 = args[2][121 * steps + ((cycle - 0) & mask)];
        Fp x46642 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x46643 = args[2][123 * steps + ((cycle - 0) & mask)];
        Fp x46644 = args[2][122 * steps + ((cycle - 0) & mask)];
        host_args[0] = x46641;
        host_args[1] = x46642;
        host_args[2] = x46643;
        host_args[3] = x46644;
        host(ctx, "log", "quot32 = %04x%04x, rem32 = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x46645 = Fp(x46642.asUInt32() & x2.asUInt32());
          args[2][16 * steps + cycle] = x46645;
          Fp x46646 = x46642 - x46645;
          Fp x46647 = x46646 * x10;
          Fp x46648 = Fp(x46647.asUInt32() & x2.asUInt32());
          args[2][17 * steps + cycle] = x46648;
          Fp x46649 = x46647 - x46648;
          Fp x46650 = x46649 * x10;
          Fp x46651 = Fp(x46650.asUInt32() & x2.asUInt32());
          args[2][18 * steps + cycle] = x46651;
          Fp x46652 = x46650 - x46651;
          Fp x46653 = x46652 * x10;
          Fp x46654 = Fp(x46653.asUInt32() & x2.asUInt32());
          args[2][19 * steps + cycle] = x46654;
          Fp x46655 = x46653 - x46654;
          Fp x46656 = x46655 * x10;
          Fp x46657 = Fp(x46656.asUInt32() & x2.asUInt32());
          args[2][20 * steps + cycle] = x46657;
          Fp x46658 = x46656 - x46657;
          Fp x46659 = x46658 * x10;
          Fp x46660 = Fp(x46659.asUInt32() & x2.asUInt32());
          args[2][21 * steps + cycle] = x46660;
          Fp x46661 = x46659 - x46660;
          Fp x46662 = x46661 * x10;
          Fp x46663 = Fp(x46662.asUInt32() & x2.asUInt32());
          args[2][22 * steps + cycle] = x46663;
          Fp x46664 = x46662 - x46663;
          Fp x46665 = x46664 * x10;
          Fp x46666 = Fp(x46665.asUInt32() & x2.asUInt32());
          args[2][23 * steps + cycle] = x46666;
        }
        Fp x46667 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x46668 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x46669 = x46668 * x3;
        Fp x46670 = x46667 + x46669;
        Fp x46671 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x46672 = x46671 * x11;
        Fp x46673 = x46670 + x46672;
        Fp x46674 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x46675 = x46674 * x12;
        Fp x46676 = x46673 + x46675;
        Fp x46677 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x46678 = x46677 * x13;
        Fp x46679 = x46676 + x46678;
        Fp x46680 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x46681 = x46680 * x14;
        Fp x46682 = x46679 + x46681;
        Fp x46683 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x46684 = x46683 * x15;
        Fp x46685 = x46682 + x46684;
        Fp x46686 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x46687 = x46686 * x16;
        Fp x46688 = x46685 + x46687;
        Fp x46689 = x46642 - x46688;
        Fp x46690 = x46689 * x33;
        if (x46690 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x46691 = Fp(x46641.asUInt32() & x2.asUInt32());
          args[2][24 * steps + cycle] = x46691;
          Fp x46692 = x46641 - x46691;
          Fp x46693 = x46692 * x10;
          Fp x46694 = Fp(x46693.asUInt32() & x2.asUInt32());
          args[2][25 * steps + cycle] = x46694;
          Fp x46695 = x46693 - x46694;
          Fp x46696 = x46695 * x10;
          Fp x46697 = Fp(x46696.asUInt32() & x2.asUInt32());
          args[2][26 * steps + cycle] = x46697;
          Fp x46698 = x46696 - x46697;
          Fp x46699 = x46698 * x10;
          Fp x46700 = Fp(x46699.asUInt32() & x2.asUInt32());
          args[2][27 * steps + cycle] = x46700;
          Fp x46701 = x46699 - x46700;
          Fp x46702 = x46701 * x10;
          Fp x46703 = Fp(x46702.asUInt32() & x2.asUInt32());
          args[2][28 * steps + cycle] = x46703;
          Fp x46704 = x46702 - x46703;
          Fp x46705 = x46704 * x10;
          Fp x46706 = Fp(x46705.asUInt32() & x2.asUInt32());
          args[2][29 * steps + cycle] = x46706;
          Fp x46707 = x46705 - x46706;
          Fp x46708 = x46707 * x10;
          Fp x46709 = Fp(x46708.asUInt32() & x2.asUInt32());
          args[2][30 * steps + cycle] = x46709;
          Fp x46710 = x46708 - x46709;
          Fp x46711 = x46710 * x10;
          Fp x46712 = Fp(x46711.asUInt32() & x2.asUInt32());
          args[2][31 * steps + cycle] = x46712;
        }
        Fp x46713 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x46714 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x46715 = x46714 * x3;
        Fp x46716 = x46713 + x46715;
        Fp x46717 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x46718 = x46717 * x11;
        Fp x46719 = x46716 + x46718;
        Fp x46720 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x46721 = x46720 * x12;
        Fp x46722 = x46719 + x46721;
        Fp x46723 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x46724 = x46723 * x13;
        Fp x46725 = x46722 + x46724;
        Fp x46726 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x46727 = x46726 * x14;
        Fp x46728 = x46725 + x46727;
        Fp x46729 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x46730 = x46729 * x15;
        Fp x46731 = x46728 + x46730;
        Fp x46732 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x46733 = x46732 * x16;
        Fp x46734 = x46731 + x46733;
        Fp x46735 = x46641 - x46734;
        Fp x46736 = x46735 * x33;
        if (x46736 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:83");
        {
          Fp x46737 = Fp(x46644.asUInt32() & x2.asUInt32());
          args[2][32 * steps + cycle] = x46737;
          Fp x46738 = x46644 - x46737;
          Fp x46739 = x46738 * x10;
          Fp x46740 = Fp(x46739.asUInt32() & x2.asUInt32());
          args[2][33 * steps + cycle] = x46740;
          Fp x46741 = x46739 - x46740;
          Fp x46742 = x46741 * x10;
          Fp x46743 = Fp(x46742.asUInt32() & x2.asUInt32());
          args[2][34 * steps + cycle] = x46743;
          Fp x46744 = x46742 - x46743;
          Fp x46745 = x46744 * x10;
          Fp x46746 = Fp(x46745.asUInt32() & x2.asUInt32());
          args[2][35 * steps + cycle] = x46746;
          Fp x46747 = x46745 - x46746;
          Fp x46748 = x46747 * x10;
          Fp x46749 = Fp(x46748.asUInt32() & x2.asUInt32());
          args[2][36 * steps + cycle] = x46749;
          Fp x46750 = x46748 - x46749;
          Fp x46751 = x46750 * x10;
          Fp x46752 = Fp(x46751.asUInt32() & x2.asUInt32());
          args[2][37 * steps + cycle] = x46752;
          Fp x46753 = x46751 - x46752;
          Fp x46754 = x46753 * x10;
          Fp x46755 = Fp(x46754.asUInt32() & x2.asUInt32());
          args[2][38 * steps + cycle] = x46755;
          Fp x46756 = x46754 - x46755;
          Fp x46757 = x46756 * x10;
          Fp x46758 = Fp(x46757.asUInt32() & x2.asUInt32());
          args[2][39 * steps + cycle] = x46758;
        }
        Fp x46759 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x46760 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x46761 = x46760 * x3;
        Fp x46762 = x46759 + x46761;
        Fp x46763 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x46764 = x46763 * x11;
        Fp x46765 = x46762 + x46764;
        Fp x46766 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x46767 = x46766 * x12;
        Fp x46768 = x46765 + x46767;
        Fp x46769 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x46770 = x46769 * x13;
        Fp x46771 = x46768 + x46770;
        Fp x46772 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x46773 = x46772 * x14;
        Fp x46774 = x46771 + x46773;
        Fp x46775 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x46776 = x46775 * x15;
        Fp x46777 = x46774 + x46776;
        Fp x46778 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x46779 = x46778 * x16;
        Fp x46780 = x46777 + x46779;
        Fp x46781 = x46644 - x46780;
        Fp x46782 = x46781 * x33;
        if (x46782 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        {
          Fp x46783 = Fp(x46643.asUInt32() & x2.asUInt32());
          args[2][40 * steps + cycle] = x46783;
          Fp x46784 = x46643 - x46783;
          Fp x46785 = x46784 * x10;
          Fp x46786 = Fp(x46785.asUInt32() & x2.asUInt32());
          args[2][41 * steps + cycle] = x46786;
          Fp x46787 = x46785 - x46786;
          Fp x46788 = x46787 * x10;
          Fp x46789 = Fp(x46788.asUInt32() & x2.asUInt32());
          args[2][42 * steps + cycle] = x46789;
          Fp x46790 = x46788 - x46789;
          Fp x46791 = x46790 * x10;
          Fp x46792 = Fp(x46791.asUInt32() & x2.asUInt32());
          args[2][43 * steps + cycle] = x46792;
          Fp x46793 = x46791 - x46792;
          Fp x46794 = x46793 * x10;
          Fp x46795 = Fp(x46794.asUInt32() & x2.asUInt32());
          args[2][44 * steps + cycle] = x46795;
          Fp x46796 = x46794 - x46795;
          Fp x46797 = x46796 * x10;
          Fp x46798 = Fp(x46797.asUInt32() & x2.asUInt32());
          args[2][45 * steps + cycle] = x46798;
          Fp x46799 = x46797 - x46798;
          Fp x46800 = x46799 * x10;
          Fp x46801 = Fp(x46800.asUInt32() & x2.asUInt32());
          args[2][46 * steps + cycle] = x46801;
          Fp x46802 = x46800 - x46801;
          Fp x46803 = x46802 * x10;
          Fp x46804 = Fp(x46803.asUInt32() & x2.asUInt32());
          args[2][47 * steps + cycle] = x46804;
        }
        Fp x46805 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x46806 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x46807 = x46806 * x3;
        Fp x46808 = x46805 + x46807;
        Fp x46809 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x46810 = x46809 * x11;
        Fp x46811 = x46808 + x46810;
        Fp x46812 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x46813 = x46812 * x12;
        Fp x46814 = x46811 + x46813;
        Fp x46815 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x46816 = x46815 * x13;
        Fp x46817 = x46814 + x46816;
        Fp x46818 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x46819 = x46818 * x14;
        Fp x46820 = x46817 + x46819;
        Fp x46821 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x46822 = x46821 * x15;
        Fp x46823 = x46820 + x46822;
        Fp x46824 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x46825 = x46824 * x16;
        Fp x46826 = x46823 + x46825;
        Fp x46827 = x46643 - x46826;
        Fp x46828 = x46827 * x33;
        if (x46828 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:84");
        if (x46496 != 0) {
          Fp x46829 = x46555 + x17;
          Fp x46830 = x46829 - x46780;
          Fp x46831 = x46830 - x71;
          {
            Fp x46832 = Fp(x46831.asUInt32() & x2.asUInt32());
            args[2][48 * steps + cycle] = x46832;
            Fp x46833 = x46831 - x46832;
            Fp x46834 = x46833 * x10;
            Fp x46835 = Fp(x46834.asUInt32() & x2.asUInt32());
            args[2][49 * steps + cycle] = x46835;
            Fp x46836 = x46834 - x46835;
            Fp x46837 = x46836 * x10;
            Fp x46838 = Fp(x46837.asUInt32() & x2.asUInt32());
            args[2][50 * steps + cycle] = x46838;
            Fp x46839 = x46837 - x46838;
            Fp x46840 = x46839 * x10;
            Fp x46841 = Fp(x46840.asUInt32() & x2.asUInt32());
            args[2][51 * steps + cycle] = x46841;
            Fp x46842 = x46840 - x46841;
            Fp x46843 = x46842 * x10;
            Fp x46844 = Fp(x46843.asUInt32() & x2.asUInt32());
            args[2][52 * steps + cycle] = x46844;
            Fp x46845 = x46843 - x46844;
            Fp x46846 = x46845 * x10;
            Fp x46847 = Fp(x46846.asUInt32() & x2.asUInt32());
            args[2][53 * steps + cycle] = x46847;
            Fp x46848 = x46846 - x46847;
            Fp x46849 = x46848 * x10;
            Fp x46850 = Fp(x46849.asUInt32() & x2.asUInt32());
            args[2][54 * steps + cycle] = x46850;
            Fp x46851 = x46849 - x46850;
            Fp x46852 = x46851 * x10;
            Fp x46853 = Fp(x46852.asUInt32() & x2.asUInt32());
            args[2][55 * steps + cycle] = x46853;
          }
          Fp x46854 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x46855 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x46856 = x46855 * x3;
          Fp x46857 = x46854 + x46856;
          Fp x46858 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x46859 = x46858 * x11;
          Fp x46860 = x46857 + x46859;
          Fp x46861 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x46862 = x46861 * x12;
          Fp x46863 = x46860 + x46862;
          Fp x46864 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x46865 = x46864 * x13;
          Fp x46866 = x46863 + x46865;
          Fp x46867 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x46868 = x46867 * x14;
          Fp x46869 = x46866 + x46868;
          Fp x46870 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x46871 = x46870 * x15;
          Fp x46872 = x46869 + x46871;
          Fp x46873 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x46874 = x46873 * x16;
          Fp x46875 = x46872 + x46874;
          Fp x46876 = x46831 - x46875;
          Fp x46877 = x46876 * x33;
          args[2][93 * steps + cycle] = x46877;
          Fp x46878 = x46601 - x46826;
          Fp x46879 = x46878 - x71;
          Fp x46880 = args[2][93 * steps + ((cycle - 0) & mask)];
          Fp x46881 = x46879 + x46880;
          {
            Fp x46882 = Fp(x46881.asUInt32() & x2.asUInt32());
            args[2][56 * steps + cycle] = x46882;
            Fp x46883 = x46881 - x46882;
            Fp x46884 = x46883 * x10;
            Fp x46885 = Fp(x46884.asUInt32() & x2.asUInt32());
            args[2][57 * steps + cycle] = x46885;
            Fp x46886 = x46884 - x46885;
            Fp x46887 = x46886 * x10;
            Fp x46888 = Fp(x46887.asUInt32() & x2.asUInt32());
            args[2][58 * steps + cycle] = x46888;
            Fp x46889 = x46887 - x46888;
            Fp x46890 = x46889 * x10;
            Fp x46891 = Fp(x46890.asUInt32() & x2.asUInt32());
            args[2][59 * steps + cycle] = x46891;
            Fp x46892 = x46890 - x46891;
            Fp x46893 = x46892 * x10;
            Fp x46894 = Fp(x46893.asUInt32() & x2.asUInt32());
            args[2][60 * steps + cycle] = x46894;
            Fp x46895 = x46893 - x46894;
            Fp x46896 = x46895 * x10;
            Fp x46897 = Fp(x46896.asUInt32() & x2.asUInt32());
            args[2][61 * steps + cycle] = x46897;
            Fp x46898 = x46896 - x46897;
            Fp x46899 = x46898 * x10;
            Fp x46900 = Fp(x46899.asUInt32() & x2.asUInt32());
            args[2][62 * steps + cycle] = x46900;
            Fp x46901 = x46899 - x46900;
            Fp x46902 = x46901 * x10;
            Fp x46903 = Fp(x46902.asUInt32() & x2.asUInt32());
            args[2][63 * steps + cycle] = x46903;
          }
          Fp x46904 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x46905 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x46906 = x46905 * x3;
          Fp x46907 = x46904 + x46906;
          Fp x46908 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x46909 = x46908 * x11;
          Fp x46910 = x46907 + x46909;
          Fp x46911 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x46912 = x46911 * x12;
          Fp x46913 = x46910 + x46912;
          Fp x46914 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x46915 = x46914 * x13;
          Fp x46916 = x46913 + x46915;
          Fp x46917 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x46918 = x46917 * x14;
          Fp x46919 = x46916 + x46918;
          Fp x46920 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x46921 = x46920 * x15;
          Fp x46922 = x46919 + x46921;
          Fp x46923 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x46924 = x46923 * x16;
          Fp x46925 = x46922 + x46924;
          Fp x46926 = x46881 - x46925;
          Fp x46927 = x46926 * x33;
          if (x46927 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:91");
        }
        Fp x46928 = x46682 * x46549;
        Fp x46929 = x46928 + x46774;
        {
          Fp x46930 = Fp(x46929.asUInt32() & x2.asUInt32());
          args[2][64 * steps + cycle] = x46930;
          Fp x46931 = x46929 - x46930;
          Fp x46932 = x46931 * x10;
          Fp x46933 = Fp(x46932.asUInt32() & x2.asUInt32());
          args[2][65 * steps + cycle] = x46933;
          Fp x46934 = x46932 - x46933;
          Fp x46935 = x46934 * x10;
          Fp x46936 = Fp(x46935.asUInt32() & x2.asUInt32());
          args[2][66 * steps + cycle] = x46936;
          Fp x46937 = x46935 - x46936;
          Fp x46938 = x46937 * x10;
          Fp x46939 = Fp(x46938.asUInt32() & x2.asUInt32());
          args[2][67 * steps + cycle] = x46939;
          Fp x46940 = x46938 - x46939;
          Fp x46941 = x46940 * x10;
          Fp x46942 = Fp(x46941.asUInt32() & x2.asUInt32());
          args[2][68 * steps + cycle] = x46942;
          Fp x46943 = x46941 - x46942;
          Fp x46944 = x46943 * x10;
          Fp x46945 = Fp(x46944.asUInt32() & x2.asUInt32());
          args[2][69 * steps + cycle] = x46945;
          Fp x46946 = x46944 - x46945;
          Fp x46947 = x46946 * x10;
          Fp x46948 = Fp(x46947.asUInt32() & x2.asUInt32());
          args[2][70 * steps + cycle] = x46948;
          Fp x46949 = x46947 - x46948;
          Fp x46950 = x46949 * x10;
          Fp x46951 = Fp(x46950.asUInt32() & x2.asUInt32());
          args[2][71 * steps + cycle] = x46951;
          Fp x46952 = x46950 - x46951;
          Fp x46953 = x46952 * x10;
          Fp x46954 = Fp(x46953.asUInt32() & x2.asUInt32());
          args[2][72 * steps + cycle] = x46954;
          Fp x46955 = x46953 - x46954;
          Fp x46956 = x46955 * x10;
          Fp x46957 = Fp(x46956.asUInt32() & x2.asUInt32());
          args[2][73 * steps + cycle] = x46957;
          Fp x46958 = x46956 - x46957;
          Fp x46959 = x46958 * x10;
          Fp x46960 = Fp(x46959.asUInt32() & x2.asUInt32());
          args[2][74 * steps + cycle] = x46960;
          Fp x46961 = x46959 - x46960;
          Fp x46962 = x46961 * x10;
          Fp x46963 = Fp(x46962.asUInt32() & x2.asUInt32());
          args[2][75 * steps + cycle] = x46963;
        }
        Fp x46964 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x46965 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x46966 = x46965 * x3;
        Fp x46967 = x46964 + x46966;
        Fp x46968 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x46969 = x46968 * x11;
        Fp x46970 = x46967 + x46969;
        Fp x46971 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x46972 = x46971 * x12;
        Fp x46973 = x46970 + x46972;
        Fp x46974 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x46975 = x46974 * x13;
        Fp x46976 = x46973 + x46975;
        Fp x46977 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x46978 = x46977 * x14;
        Fp x46979 = x46976 + x46978;
        Fp x46980 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x46981 = x46980 * x15;
        Fp x46982 = x46979 + x46981;
        Fp x46983 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x46984 = x46983 * x16;
        Fp x46985 = x46982 + x46984;
        Fp x46986 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x46987 = x46986 * x17;
        Fp x46988 = x46985 + x46987;
        Fp x46989 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x46990 = x46989 * x18;
        Fp x46991 = x46988 + x46990;
        Fp x46992 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x46993 = x46992 * x19;
        Fp x46994 = x46991 + x46993;
        Fp x46995 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x46996 = x46995 * x20;
        Fp x46997 = x46994 + x46996;
        Fp x46998 = x46929 - x46997;
        Fp x46999 = x46998 * x62;
        if (x46999 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:94");
        Fp x47000 = x46553 * x3;
        Fp x47001 = x46550 + x47000;
        Fp x47002 = x46580 * x11;
        Fp x47003 = x47001 + x47002;
        Fp x47004 = x46581 * x12;
        Fp x47005 = x47003 + x47004;
        Fp x47006 = x46584 * x13;
        Fp x47007 = x47005 + x47006;
        Fp x47008 = x46587 * x14;
        Fp x47009 = x47007 + x47008;
        Fp x47010 = x46682 * x47009;
        Fp x47011 = x46686 * x3;
        Fp x47012 = x46683 + x47011;
        Fp x47013 = x46713 * x11;
        Fp x47014 = x47012 + x47013;
        Fp x47015 = x46714 * x12;
        Fp x47016 = x47014 + x47015;
        Fp x47017 = x46717 * x13;
        Fp x47018 = x47016 + x47017;
        Fp x47019 = x46720 * x14;
        Fp x47020 = x47018 + x47019;
        Fp x47021 = x47020 * x46549;
        Fp x47022 = x47010 + x47021;
        Fp x47023 = x46778 * x3;
        Fp x47024 = x46775 + x47023;
        Fp x47025 = x46805 * x11;
        Fp x47026 = x47024 + x47025;
        Fp x47027 = x46806 * x12;
        Fp x47028 = x47026 + x47027;
        Fp x47029 = x46809 * x13;
        Fp x47030 = x47028 + x47029;
        Fp x47031 = x46812 * x14;
        Fp x47032 = x47030 + x47031;
        Fp x47033 = x47022 + x47032;
        Fp x47034 = x46983 * x3;
        Fp x47035 = x46980 + x47034;
        Fp x47036 = x46986 * x11;
        Fp x47037 = x47035 + x47036;
        Fp x47038 = x46989 * x12;
        Fp x47039 = x47037 + x47038;
        Fp x47040 = x46992 * x13;
        Fp x47041 = x47039 + x47040;
        Fp x47042 = x46995 * x14;
        Fp x47043 = x47041 + x47042;
        Fp x47044 = x47033 + x47043;
        {
          Fp x47045 = Fp(x47044.asUInt32() & x2.asUInt32());
          args[2][76 * steps + cycle] = x47045;
          Fp x47046 = x47044 - x47045;
          Fp x47047 = x47046 * x10;
          Fp x47048 = Fp(x47047.asUInt32() & x2.asUInt32());
          args[2][77 * steps + cycle] = x47048;
          Fp x47049 = x47047 - x47048;
          Fp x47050 = x47049 * x10;
          Fp x47051 = Fp(x47050.asUInt32() & x2.asUInt32());
          args[2][78 * steps + cycle] = x47051;
          Fp x47052 = x47050 - x47051;
          Fp x47053 = x47052 * x10;
          Fp x47054 = Fp(x47053.asUInt32() & x2.asUInt32());
          args[2][79 * steps + cycle] = x47054;
          Fp x47055 = x47053 - x47054;
          Fp x47056 = x47055 * x10;
          Fp x47057 = Fp(x47056.asUInt32() & x2.asUInt32());
          args[2][80 * steps + cycle] = x47057;
          Fp x47058 = x47056 - x47057;
          Fp x47059 = x47058 * x10;
          Fp x47060 = Fp(x47059.asUInt32() & x2.asUInt32());
          args[2][81 * steps + cycle] = x47060;
          Fp x47061 = x47059 - x47060;
          Fp x47062 = x47061 * x10;
          Fp x47063 = Fp(x47062.asUInt32() & x2.asUInt32());
          args[2][82 * steps + cycle] = x47063;
          Fp x47064 = x47062 - x47063;
          Fp x47065 = x47064 * x10;
          Fp x47066 = Fp(x47065.asUInt32() & x2.asUInt32());
          args[2][83 * steps + cycle] = x47066;
          Fp x47067 = x47065 - x47066;
          Fp x47068 = x47067 * x10;
          Fp x47069 = Fp(x47068.asUInt32() & x2.asUInt32());
          args[2][84 * steps + cycle] = x47069;
          Fp x47070 = x47068 - x47069;
          Fp x47071 = x47070 * x10;
          Fp x47072 = Fp(x47071.asUInt32() & x2.asUInt32());
          args[2][85 * steps + cycle] = x47072;
        }
        Fp x47073 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x47074 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x47075 = x47074 * x3;
        Fp x47076 = x47073 + x47075;
        Fp x47077 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x47078 = x47077 * x11;
        Fp x47079 = x47076 + x47078;
        Fp x47080 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x47081 = x47080 * x12;
        Fp x47082 = x47079 + x47081;
        Fp x47083 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x47084 = x47083 * x13;
        Fp x47085 = x47082 + x47084;
        Fp x47086 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x47087 = x47086 * x14;
        Fp x47088 = x47085 + x47087;
        Fp x47089 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x47090 = x47089 * x15;
        Fp x47091 = x47088 + x47090;
        Fp x47092 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x47093 = x47092 * x16;
        Fp x47094 = x47091 + x47093;
        Fp x47095 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x47096 = x47095 * x17;
        Fp x47097 = x47094 + x47096;
        Fp x47098 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x47099 = x47098 * x18;
        Fp x47100 = x47097 + x47099;
        Fp x47101 = x47044 - x47100;
        Fp x47102 = x47101 * x66;
        if (x47102 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:95");
        Fp x47103 = x46593 * x3;
        Fp x47104 = x46590 + x47103;
        Fp x47105 = x46596 * x11;
        Fp x47106 = x47104 + x47105;
        Fp x47107 = x46599 * x12;
        Fp x47108 = x47106 + x47107;
        Fp x47109 = x46682 * x47108;
        Fp x47110 = x47020 * x47009;
        Fp x47111 = x47109 + x47110;
        Fp x47112 = x46726 * x3;
        Fp x47113 = x46723 + x47112;
        Fp x47114 = x46729 * x11;
        Fp x47115 = x47113 + x47114;
        Fp x47116 = x46732 * x12;
        Fp x47117 = x47115 + x47116;
        Fp x47118 = x47117 * x46549;
        Fp x47119 = x47111 + x47118;
        Fp x47120 = x46818 * x3;
        Fp x47121 = x46815 + x47120;
        Fp x47122 = x46821 * x11;
        Fp x47123 = x47121 + x47122;
        Fp x47124 = x46824 * x12;
        Fp x47125 = x47123 + x47124;
        Fp x47126 = x47119 + x47125;
        Fp x47127 = x47092 * x3;
        Fp x47128 = x47089 + x47127;
        Fp x47129 = x47095 * x11;
        Fp x47130 = x47128 + x47129;
        Fp x47131 = x47098 * x12;
        Fp x47132 = x47130 + x47131;
        Fp x47133 = x47126 + x47132;
        {
          Fp x47134 = Fp(x47133.asUInt32() & x2.asUInt32());
          args[2][86 * steps + cycle] = x47134;
          Fp x47135 = x47133 - x47134;
          Fp x47136 = x47135 * x10;
          Fp x47137 = Fp(x47136.asUInt32() & x2.asUInt32());
          args[2][87 * steps + cycle] = x47137;
          Fp x47138 = x47136 - x47137;
          Fp x47139 = x47138 * x10;
          Fp x47140 = Fp(x47139.asUInt32() & x2.asUInt32());
          args[2][88 * steps + cycle] = x47140;
          Fp x47141 = x47139 - x47140;
          Fp x47142 = x47141 * x10;
          Fp x47143 = Fp(x47142.asUInt32() & x2.asUInt32());
          args[2][89 * steps + cycle] = x47143;
        }
        Fp x47144 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x47145 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x47146 = x47145 * x3;
        Fp x47147 = x47144 + x47146;
        Fp x47148 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x47149 = x47148 * x11;
        Fp x47150 = x47147 + x47149;
        Fp x47151 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x47152 = x47151 * x12;
        Fp x47153 = x47150 + x47152;
        Fp x47154 = x47133 - x47153;
        Fp x47155 = x47154 * x67;
        if (x47155 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:100");
        host_args[0] = x46997;
        host_args[1] = x47100;
        host_args[2] = x47153;
        host(ctx, "log", "numer0=0x%06x, numer1=0x%05x, numer2=0x%02x", host_args.data(), 3, host_outs.data(), 0);
        Fp x47156 = x47076 * x15;
        Fp x47157 = x46979 + x47156;
        Fp x47158 = x47157 - x46635;
        if (x47158 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:108");
        Fp x47159 = x47080 * x3;
        Fp x47160 = x47077 + x47159;
        Fp x47161 = x47083 * x11;
        Fp x47162 = x47160 + x47161;
        Fp x47163 = x47086 * x12;
        Fp x47164 = x47162 + x47163;
        Fp x47165 = x47153 * x13;
        Fp x47166 = x47164 + x47165;
        Fp x47167 = x47166 - x46634;
        if (x47167 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.cpp:109");
        Fp x47168 = x46502 + x46636;
        Fp x47169 = x46502 * x1;
        Fp x47170 = x47169 * x46636;
        Fp x47171 = x47168 - x47170;
        Fp x47172 = x46502 * x46498;
        Fp x47173 = x47171 - x47172;
        args[2][92 * steps + cycle] = x47173;
        Fp x47174 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x47175 = x35 - x46642;
        Fp x47176 = x47174 * x47175;
        Fp x47177 = x71 - x47174;
        Fp x47178 = x47177 * x46642;
        Fp x47179 = x47176 + x47178;
        Fp x47180 = x35 - x46641;
        Fp x47181 = x47174 * x47180;
        Fp x47182 = x47177 * x46641;
        Fp x47183 = x47181 + x47182;
        args[2][100 * steps + cycle] = x47179;
        args[2][101 * steps + cycle] = x47183;
        {
          args[2][98 * steps + cycle] = x70;
          args[2][114 * steps + cycle] = x70;
        }
        Fp x47184 = args[2][98 * steps + ((cycle - 0) & mask)];
        Fp x47185 = x70 - x47184;
        if (x47185 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x47186 = x47184 * x17;
        Fp x47187 = x17 - x47184;
        Fp x47188 = x47187 - x17;
        {
          Fp x47189 = (x47188 == 0) ? Fp(1) : Fp(0);
          Fp x47190 = x71 - x47189;
          args[2][99 * steps + cycle] = x47190;
          Fp x47191 = inv(x47188);
          args[2][115 * steps + cycle] = x47191;
        }
        Fp x47192 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x47193 = x47188 * x47192;
        Fp x47194 = args[2][99 * steps + ((cycle - 0) & mask)];
        Fp x47195 = x47193 - x47194;
        if (x47195 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x47196 = x71 - x47194;
        Fp x47197 = x47196 * x47188;
        if (x47197 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x47198 = x47194 * x47187;
        args[2][116 * steps + cycle] = x47186;
        args[2][117 * steps + cycle] = x47198;
      }
      args[2][102 * steps + cycle] = x71;
      args[2][103 * steps + cycle] = x70;
      Fp x47199 = args[2][0 * steps + ((cycle - 2) & mask)];
      Fp x47200 = args[2][1 * steps + ((cycle - 2) & mask)];
      Fp x47201 = x47200 * x3;
      Fp x47202 = x47199 + x47201;
      Fp x47203 = args[2][2 * steps + ((cycle - 2) & mask)];
      Fp x47204 = x47203 * x11;
      Fp x47205 = x47202 + x47204;
      Fp x47206 = args[2][3 * steps + ((cycle - 2) & mask)];
      Fp x47207 = x47206 * x12;
      Fp x47208 = x47205 + x47207;
      Fp x47209 = args[2][4 * steps + ((cycle - 2) & mask)];
      Fp x47210 = x47209 * x13;
      Fp x47211 = x47208 + x47210;
      Fp x47212 = args[2][5 * steps + ((cycle - 2) & mask)];
      Fp x47213 = x47212 * x14;
      Fp x47214 = x47211 + x47213;
      Fp x47215 = args[2][6 * steps + ((cycle - 2) & mask)];
      Fp x47216 = x47215 * x15;
      Fp x47217 = x47214 + x47216;
      Fp x47218 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x47219 = x47218 * x16;
      Fp x47220 = x47217 + x47219;
      Fp x47221 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x47222 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x47223 = x47222 * x3;
      Fp x47224 = x47221 + x47223;
      Fp x47225 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x47226 = x47225 * x11;
      Fp x47227 = x47224 + x47226;
      Fp x47228 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x47229 = x47228 * x12;
      Fp x47230 = x47227 + x47229;
      Fp x47231 = args[2][12 * steps + ((cycle - 2) & mask)];
      Fp x47232 = x47231 * x13;
      Fp x47233 = x47230 + x47232;
      Fp x47234 = args[2][13 * steps + ((cycle - 2) & mask)];
      Fp x47235 = x47234 * x14;
      Fp x47236 = x47233 + x47235;
      Fp x47237 = args[2][14 * steps + ((cycle - 2) & mask)];
      Fp x47238 = x47237 * x15;
      Fp x47239 = x47236 + x47238;
      Fp x47240 = args[2][15 * steps + ((cycle - 2) & mask)];
      Fp x47241 = x47240 * x16;
      Fp x47242 = x47239 + x47241;
      Fp x47243 = x47220 + x3;
      args[2][104 * steps + cycle] = x47243;
      args[2][105 * steps + cycle] = x47242;
      Fp x47244 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x47245 = x47244 - x71;
      Fp x47246 = x47244 * x47245;
      if (x47246 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:31");
      Fp x47247 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x47248 = x47247 - x71;
      Fp x47249 = x47247 * x47248;
      if (x47249 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:32");
      Fp x47250 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x47251 = x47250 - x71;
      Fp x47252 = x47250 * x47251;
      if (x47252 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:33");
      Fp x47253 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x47254 = x47253 - x71;
      Fp x47255 = x47253 * x47254;
      if (x47255 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:34");
      Fp x47256 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x47257 = x47256 - x71;
      Fp x47258 = x47256 * x47257;
      if (x47258 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:35");
      Fp x47259 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x47260 = x47259 - x71;
      Fp x47261 = x47259 * x47260;
      if (x47261 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:35");
      Fp x47262 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x47263 = x47262 - x71;
      Fp x47264 = x47262 * x47263;
      if (x47264 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:36");
      Fp x47265 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x47266 = x47265 - x71;
      Fp x47267 = x47265 * x47266;
      if (x47267 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:36");
      Fp x47268 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x47269 = x47268 - x71;
      Fp x47270 = x47268 * x47269;
      if (x47270 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:37");
      Fp x47271 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x47272 = x47271 - x71;
      Fp x47273 = x47271 * x47272;
      if (x47273 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:37");
      Fp x47274 = args[2][118 * steps + ((cycle - 0) & mask)];
      Fp x47275 = x47274 - x71;
      Fp x47276 = x47274 * x47275;
      if (x47276 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/divide_cycle.h:38");
    }
    Fp x47277 = args[2][140 * steps + ((cycle - 0) & mask)];
    if (x47277 != 0) {
      host_args[0] = x72;
      host(ctx, "log", "C%u: Sha Sync", host_args.data(), 1, host_outs.data(), 0);
      args[2][128 * steps + cycle] = x70;
      args[2][131 * steps + cycle] = x70;
      {
        host_args[0] = x72;
        host_args[1] = x70;
        host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
        Fp x47278 = host_outs[0];
        Fp x47279 = host_outs[1];
        args[2][129 * steps + cycle] = x47278;
        args[2][130 * steps + cycle] = x47279;
      }
      args[2][122 * steps + cycle] = x68;
      args[2][123 * steps + cycle] = x70;
      args[2][124 * steps + cycle] = x70;
      args[2][125 * steps + cycle] = x70;
      args[2][126 * steps + cycle] = x70;
      Fp x47280 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x47281 = x47280 - x71;
      Fp x47282 = x47280 * x47281;
      if (x47282 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47283 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x47284 = x47283 - x71;
      Fp x47285 = x47283 * x47284;
      if (x47285 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47286 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x47287 = x47286 - x71;
      Fp x47288 = x47286 * x47287;
      if (x47288 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47289 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x47290 = x47289 - x71;
      Fp x47291 = x47289 * x47290;
      if (x47291 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47292 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x47293 = x47292 - x71;
      Fp x47294 = x47292 * x47293;
      if (x47294 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47295 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x47296 = x47295 - x71;
      Fp x47297 = x47295 * x47296;
      if (x47297 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47298 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x47299 = x47298 - x71;
      Fp x47300 = x47298 * x47299;
      if (x47300 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47301 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x47302 = x47301 - x71;
      Fp x47303 = x47301 * x47302;
      if (x47303 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47304 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x47305 = x47304 - x71;
      Fp x47306 = x47304 * x47305;
      if (x47306 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47307 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x47308 = x47307 - x71;
      Fp x47309 = x47307 * x47308;
      if (x47309 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47310 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x47311 = x47310 - x71;
      Fp x47312 = x47310 * x47311;
      if (x47312 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47313 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x47314 = x47313 - x71;
      Fp x47315 = x47313 * x47314;
      if (x47315 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47316 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x47317 = x47316 - x71;
      Fp x47318 = x47316 * x47317;
      if (x47318 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47319 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x47320 = x47319 - x71;
      Fp x47321 = x47319 * x47320;
      if (x47321 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47322 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x47323 = x47322 - x71;
      Fp x47324 = x47322 * x47323;
      if (x47324 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47325 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x47326 = x47325 - x71;
      Fp x47327 = x47325 * x47326;
      if (x47327 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47328 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x47329 = x47328 - x71;
      Fp x47330 = x47328 * x47329;
      if (x47330 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47331 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x47332 = x47331 - x71;
      Fp x47333 = x47331 * x47332;
      if (x47333 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47334 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x47335 = x47334 - x71;
      Fp x47336 = x47334 * x47335;
      if (x47336 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47337 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x47338 = x47337 - x71;
      Fp x47339 = x47337 * x47338;
      if (x47339 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47340 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x47341 = x47340 - x71;
      Fp x47342 = x47340 * x47341;
      if (x47342 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47343 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x47344 = x47343 - x71;
      Fp x47345 = x47343 * x47344;
      if (x47345 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47346 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x47347 = x47346 - x71;
      Fp x47348 = x47346 * x47347;
      if (x47348 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47349 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x47350 = x47349 - x71;
      Fp x47351 = x47349 * x47350;
      if (x47351 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47352 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x47353 = x47352 - x71;
      Fp x47354 = x47352 * x47353;
      if (x47354 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47355 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x47356 = x47355 - x71;
      Fp x47357 = x47355 * x47356;
      if (x47357 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47358 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x47359 = x47358 - x71;
      Fp x47360 = x47358 * x47359;
      if (x47360 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47361 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x47362 = x47361 - x71;
      Fp x47363 = x47361 * x47362;
      if (x47363 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47364 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x47365 = x47364 - x71;
      Fp x47366 = x47364 * x47365;
      if (x47366 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47367 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x47368 = x47367 - x71;
      Fp x47369 = x47367 * x47368;
      if (x47369 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47370 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x47371 = x47370 - x71;
      Fp x47372 = x47370 * x47371;
      if (x47372 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47373 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x47374 = x47373 - x71;
      Fp x47375 = x47373 * x47374;
      if (x47375 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47376 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x47377 = x47376 - x71;
      Fp x47378 = x47376 * x47377;
      if (x47378 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47379 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x47380 = x47379 - x71;
      Fp x47381 = x47379 * x47380;
      if (x47381 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47382 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x47383 = x47382 - x71;
      Fp x47384 = x47382 * x47383;
      if (x47384 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47385 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x47386 = x47385 - x71;
      Fp x47387 = x47385 * x47386;
      if (x47387 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47388 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x47389 = x47388 - x71;
      Fp x47390 = x47388 * x47389;
      if (x47390 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47391 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x47392 = x47391 - x71;
      Fp x47393 = x47391 * x47392;
      if (x47393 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47394 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x47395 = x47394 - x71;
      Fp x47396 = x47394 * x47395;
      if (x47396 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47397 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x47398 = x47397 - x71;
      Fp x47399 = x47397 * x47398;
      if (x47399 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47400 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x47401 = x47400 - x71;
      Fp x47402 = x47400 * x47401;
      if (x47402 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47403 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x47404 = x47403 - x71;
      Fp x47405 = x47403 * x47404;
      if (x47405 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47406 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x47407 = x47406 - x71;
      Fp x47408 = x47406 * x47407;
      if (x47408 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47409 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x47410 = x47409 - x71;
      Fp x47411 = x47409 * x47410;
      if (x47411 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47412 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x47413 = x47412 - x71;
      Fp x47414 = x47412 * x47413;
      if (x47414 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47415 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x47416 = x47415 - x71;
      Fp x47417 = x47415 * x47416;
      if (x47417 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47418 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x47419 = x47418 - x71;
      Fp x47420 = x47418 * x47419;
      if (x47420 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47421 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x47422 = x47421 - x71;
      Fp x47423 = x47421 * x47422;
      if (x47423 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47424 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x47425 = x47424 - x71;
      Fp x47426 = x47424 * x47425;
      if (x47426 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47427 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x47428 = x47427 - x71;
      Fp x47429 = x47427 * x47428;
      if (x47429 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47430 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x47431 = x47430 - x71;
      Fp x47432 = x47430 * x47431;
      if (x47432 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47433 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x47434 = x47433 - x71;
      Fp x47435 = x47433 * x47434;
      if (x47435 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47436 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x47437 = x47436 - x71;
      Fp x47438 = x47436 * x47437;
      if (x47438 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47439 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x47440 = x47439 - x71;
      Fp x47441 = x47439 * x47440;
      if (x47441 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47442 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x47443 = x47442 - x71;
      Fp x47444 = x47442 * x47443;
      if (x47444 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47445 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x47446 = x47445 - x71;
      Fp x47447 = x47445 * x47446;
      if (x47447 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47448 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x47449 = x47448 - x71;
      Fp x47450 = x47448 * x47449;
      if (x47450 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47451 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x47452 = x47451 - x71;
      Fp x47453 = x47451 * x47452;
      if (x47453 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47454 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x47455 = x47454 - x71;
      Fp x47456 = x47454 * x47455;
      if (x47456 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47457 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x47458 = x47457 - x71;
      Fp x47459 = x47457 * x47458;
      if (x47459 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47460 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x47461 = x47460 - x71;
      Fp x47462 = x47460 * x47461;
      if (x47462 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47463 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x47464 = x47463 - x71;
      Fp x47465 = x47463 * x47464;
      if (x47465 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47466 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x47467 = x47466 - x71;
      Fp x47468 = x47466 * x47467;
      if (x47468 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47469 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x47470 = x47469 - x71;
      Fp x47471 = x47469 * x47470;
      if (x47471 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47472 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x47473 = x47472 - x71;
      Fp x47474 = x47472 * x47473;
      if (x47474 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47475 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x47476 = x47475 - x71;
      Fp x47477 = x47475 * x47476;
      if (x47477 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47478 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x47479 = x47478 - x71;
      Fp x47480 = x47478 * x47479;
      if (x47480 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47481 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x47482 = x47481 - x71;
      Fp x47483 = x47481 * x47482;
      if (x47483 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47484 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x47485 = x47484 - x71;
      Fp x47486 = x47484 * x47485;
      if (x47486 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47487 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x47488 = x47487 - x71;
      Fp x47489 = x47487 * x47488;
      if (x47489 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47490 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x47491 = x47490 - x71;
      Fp x47492 = x47490 * x47491;
      if (x47492 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47493 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x47494 = x47493 - x71;
      Fp x47495 = x47493 * x47494;
      if (x47495 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47496 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x47497 = x47496 - x71;
      Fp x47498 = x47496 * x47497;
      if (x47498 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47499 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x47500 = x47499 - x71;
      Fp x47501 = x47499 * x47500;
      if (x47501 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47502 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x47503 = x47502 - x71;
      Fp x47504 = x47502 * x47503;
      if (x47504 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47505 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x47506 = x47505 - x71;
      Fp x47507 = x47505 * x47506;
      if (x47507 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47508 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x47509 = x47508 - x71;
      Fp x47510 = x47508 * x47509;
      if (x47510 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47511 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x47512 = x47511 - x71;
      Fp x47513 = x47511 * x47512;
      if (x47513 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47514 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x47515 = x47514 - x71;
      Fp x47516 = x47514 * x47515;
      if (x47516 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47517 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x47518 = x47517 - x71;
      Fp x47519 = x47517 * x47518;
      if (x47519 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47520 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x47521 = x47520 - x71;
      Fp x47522 = x47520 * x47521;
      if (x47522 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47523 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x47524 = x47523 - x71;
      Fp x47525 = x47523 * x47524;
      if (x47525 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47526 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x47527 = x47526 - x71;
      Fp x47528 = x47526 * x47527;
      if (x47528 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47529 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x47530 = x47529 - x71;
      Fp x47531 = x47529 * x47530;
      if (x47531 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47532 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x47533 = x47532 - x71;
      Fp x47534 = x47532 * x47533;
      if (x47534 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47535 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x47536 = x47535 - x71;
      Fp x47537 = x47535 * x47536;
      if (x47537 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47538 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x47539 = x47538 - x71;
      Fp x47540 = x47538 * x47539;
      if (x47540 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47541 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x47542 = x47541 - x71;
      Fp x47543 = x47541 * x47542;
      if (x47543 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47544 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x47545 = x47544 - x71;
      Fp x47546 = x47544 * x47545;
      if (x47546 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47547 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x47548 = x47547 - x71;
      Fp x47549 = x47547 * x47548;
      if (x47549 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47550 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x47551 = x47550 - x71;
      Fp x47552 = x47550 * x47551;
      if (x47552 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47553 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x47554 = x47553 - x71;
      Fp x47555 = x47553 * x47554;
      if (x47555 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47556 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x47557 = x47556 - x71;
      Fp x47558 = x47556 * x47557;
      if (x47558 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47559 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x47560 = x47559 - x71;
      Fp x47561 = x47559 * x47560;
      if (x47561 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47562 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x47563 = x47562 - x71;
      Fp x47564 = x47562 * x47563;
      if (x47564 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47565 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x47566 = x47565 - x71;
      Fp x47567 = x47565 * x47566;
      if (x47567 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47568 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x47569 = x47568 - x71;
      Fp x47570 = x47568 * x47569;
      if (x47570 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47571 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x47572 = x47571 - x71;
      Fp x47573 = x47571 * x47572;
      if (x47573 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47574 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x47575 = x47574 - x71;
      Fp x47576 = x47574 * x47575;
      if (x47576 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x47577 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x47578 = x47577 - x71;
      Fp x47579 = x47577 * x47578;
      if (x47579 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
    }
    Fp x47580 = args[2][141 * steps + ((cycle - 0) & mask)];
    if (x47580 != 0) {
      Fp x47581 = args[0][10 * steps + ((cycle - 0) & mask)];
      {
        Fp x47582 = (x47581 == 0) ? Fp(1) : Fp(0);
        args[2][100 * steps + cycle] = x47582;
        Fp x47583 = x47581 - x71;
        Fp x47584 = (x47583 == 0) ? Fp(1) : Fp(0);
        args[2][101 * steps + cycle] = x47584;
        Fp x47585 = x47581 - x1;
        Fp x47586 = (x47585 == 0) ? Fp(1) : Fp(0);
        args[2][102 * steps + cycle] = x47586;
        Fp x47587 = x47581 - x2;
        Fp x47588 = (x47587 == 0) ? Fp(1) : Fp(0);
        args[2][103 * steps + cycle] = x47588;
        Fp x47589 = x47581 - x3;
        Fp x47590 = (x47589 == 0) ? Fp(1) : Fp(0);
        args[2][104 * steps + cycle] = x47590;
        Fp x47591 = x47581 - x4;
        Fp x47592 = (x47591 == 0) ? Fp(1) : Fp(0);
        args[2][105 * steps + cycle] = x47592;
        Fp x47593 = x47581 - x5;
        Fp x47594 = (x47593 == 0) ? Fp(1) : Fp(0);
        args[2][106 * steps + cycle] = x47594;
        Fp x47595 = x47581 - x0;
        Fp x47596 = (x47595 == 0) ? Fp(1) : Fp(0);
        args[2][107 * steps + cycle] = x47596;
      }
      Fp x47597 = args[2][101 * steps + ((cycle - 0) & mask)];
      Fp x47598 = args[2][102 * steps + ((cycle - 0) & mask)];
      Fp x47599 = x47598 * x1;
      Fp x47600 = x47597 + x47599;
      Fp x47601 = args[2][103 * steps + ((cycle - 0) & mask)];
      Fp x47602 = x47601 * x2;
      Fp x47603 = x47600 + x47602;
      Fp x47604 = args[2][104 * steps + ((cycle - 0) & mask)];
      Fp x47605 = x47604 * x3;
      Fp x47606 = x47603 + x47605;
      Fp x47607 = args[2][105 * steps + ((cycle - 0) & mask)];
      Fp x47608 = x47607 * x4;
      Fp x47609 = x47606 + x47608;
      Fp x47610 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x47611 = x47610 * x5;
      Fp x47612 = x47609 + x47611;
      Fp x47613 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x47614 = x47613 * x0;
      Fp x47615 = x47612 + x47614;
      Fp x47616 = x47615 - x47581;
      if (x47616 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      host_args[0] = x72;
      host(ctx, "log", "C%u: Sha Control", host_args.data(), 1, host_outs.data(), 0);
      Fp x47617 = args[2][100 * steps + ((cycle - 0) & mask)];
      if (x47617 != 0) {
        Fp x47618 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x47618;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x47618;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x47619 = host_outs[0];
          Fp x47620 = host_outs[1];
          args[2][129 * steps + cycle] = x47619;
          args[2][130 * steps + cycle] = x47620;
        }
        Fp x47621 = args[2][123 * steps + ((cycle - 1) & mask)];
        {
          Fp x47622 = (x47621 == 0) ? Fp(1) : Fp(0);
          Fp x47623 = x71 - x47622;
          args[2][108 * steps + cycle] = x47623;
          Fp x47624 = inv(x47621);
          args[2][109 * steps + cycle] = x47624;
        }
        Fp x47625 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x47626 = x47621 * x47625;
        Fp x47627 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x47628 = x47626 - x47627;
        if (x47628 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x47629 = x71 - x47627;
        Fp x47630 = x47629 * x47621;
        if (x47630 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        if (x47627 != 0) {
          args[2][122 * steps + cycle] = x47618;
          Fp x47631 = args[2][96 * steps + ((cycle - 1) & mask)];
          args[2][96 * steps + cycle] = x47631;
          Fp x47632 = x47621 - x71;
          args[2][123 * steps + cycle] = x47632;
          host(ctx, "log", "  INIT0, cont", host_args.data(), 0, host_outs.data(), 0);
          args[2][97 * steps + cycle] = x71;
        }
        if (x47629 != 0) {
          Fp x47633 = args[2][128 * steps + ((cycle - 0) & mask)];
          Fp x47634 = x47633 * x3;
          Fp x47635 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x47636 = args[2][129 * steps + ((cycle - 0) & mask)];
          host_args[0] = x47634;
          host_args[1] = x47635;
          host_args[2] = x47636;
          host(ctx, "log", "  INIT0, load, addr = %x, val = 0x%04x%04x", host_args.data(), 3, host_outs.data(), 0);
          Fp x47637 = x47618 + x71;
          args[2][122 * steps + cycle] = x47637;
          args[2][96 * steps + cycle] = x47635;
          args[2][123 * steps + cycle] = x47636;
          args[2][97 * steps + cycle] = x70;
        }
        Fp x47638 = args[2][124 * steps + ((cycle - 1) & mask)];
        args[2][124 * steps + cycle] = x47638;
        Fp x47639 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x47639;
        Fp x47640 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][126 * steps + cycle] = x47640;
        Fp x47641 = args[2][123 * steps + ((cycle - 0) & mask)];
        {
          Fp x47642 = (x47641 == 0) ? Fp(1) : Fp(0);
          Fp x47643 = x71 - x47642;
          args[2][110 * steps + cycle] = x47643;
          Fp x47644 = inv(x47641);
          args[2][111 * steps + cycle] = x47644;
        }
        Fp x47645 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x47646 = x47641 * x47645;
        Fp x47647 = args[2][110 * steps + ((cycle - 0) & mask)];
        Fp x47648 = x47646 - x47647;
        if (x47648 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x47649 = x71 - x47647;
        Fp x47650 = x47649 * x47641;
        if (x47650 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        if (x47647 != 0) {
          args[2][127 * steps + cycle] = x7;
        }
        if (x47649 != 0) {
          args[2][127 * steps + cycle] = x9;
        }
        Fp x47651 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x47652 = x71 - x47651;
        Fp x47653 = x47652 * x47627;
        args[2][98 * steps + cycle] = x47653;
        Fp x47654 = args[2][98 * steps + ((cycle - 0) & mask)];
        if (x47654 != 0) {
          Fp x47655 = args[2][0 * steps + ((cycle - 4) & mask)];
          Fp x47656 = args[2][1 * steps + ((cycle - 4) & mask)];
          Fp x47657 = x47656 * x1;
          Fp x47658 = x47655 + x47657;
          Fp x47659 = args[2][2 * steps + ((cycle - 4) & mask)];
          Fp x47660 = x47659 * x3;
          Fp x47661 = x47658 + x47660;
          Fp x47662 = args[2][3 * steps + ((cycle - 4) & mask)];
          Fp x47663 = x47662 * x6;
          Fp x47664 = x47661 + x47663;
          Fp x47665 = args[2][4 * steps + ((cycle - 4) & mask)];
          Fp x47666 = x47665 * x11;
          Fp x47667 = x47664 + x47666;
          Fp x47668 = args[2][5 * steps + ((cycle - 4) & mask)];
          Fp x47669 = x47668 * x27;
          Fp x47670 = x47667 + x47669;
          Fp x47671 = args[2][6 * steps + ((cycle - 4) & mask)];
          Fp x47672 = x47671 * x12;
          Fp x47673 = x47670 + x47672;
          Fp x47674 = args[2][7 * steps + ((cycle - 4) & mask)];
          Fp x47675 = x47674 * x28;
          Fp x47676 = x47673 + x47675;
          Fp x47677 = args[2][8 * steps + ((cycle - 4) & mask)];
          Fp x47678 = x47677 * x13;
          Fp x47679 = x47676 + x47678;
          Fp x47680 = args[2][9 * steps + ((cycle - 4) & mask)];
          Fp x47681 = x47680 * x29;
          Fp x47682 = x47679 + x47681;
          Fp x47683 = args[2][10 * steps + ((cycle - 4) & mask)];
          Fp x47684 = x47683 * x14;
          Fp x47685 = x47682 + x47684;
          Fp x47686 = args[2][11 * steps + ((cycle - 4) & mask)];
          Fp x47687 = x47686 * x30;
          Fp x47688 = x47685 + x47687;
          Fp x47689 = args[2][12 * steps + ((cycle - 4) & mask)];
          Fp x47690 = x47689 * x15;
          Fp x47691 = x47688 + x47690;
          Fp x47692 = args[2][13 * steps + ((cycle - 4) & mask)];
          Fp x47693 = x47692 * x31;
          Fp x47694 = x47691 + x47693;
          Fp x47695 = args[2][14 * steps + ((cycle - 4) & mask)];
          Fp x47696 = x47695 * x16;
          Fp x47697 = x47694 + x47696;
          Fp x47698 = args[2][15 * steps + ((cycle - 4) & mask)];
          Fp x47699 = x47698 * x32;
          Fp x47700 = x47697 + x47699;
          Fp x47701 = args[2][16 * steps + ((cycle - 4) & mask)];
          Fp x47702 = args[2][17 * steps + ((cycle - 4) & mask)];
          Fp x47703 = x47702 * x1;
          Fp x47704 = x47701 + x47703;
          Fp x47705 = args[2][18 * steps + ((cycle - 4) & mask)];
          Fp x47706 = x47705 * x3;
          Fp x47707 = x47704 + x47706;
          Fp x47708 = args[2][19 * steps + ((cycle - 4) & mask)];
          Fp x47709 = x47708 * x6;
          Fp x47710 = x47707 + x47709;
          Fp x47711 = args[2][20 * steps + ((cycle - 4) & mask)];
          Fp x47712 = x47711 * x11;
          Fp x47713 = x47710 + x47712;
          Fp x47714 = args[2][21 * steps + ((cycle - 4) & mask)];
          Fp x47715 = x47714 * x27;
          Fp x47716 = x47713 + x47715;
          Fp x47717 = args[2][22 * steps + ((cycle - 4) & mask)];
          Fp x47718 = x47717 * x12;
          Fp x47719 = x47716 + x47718;
          Fp x47720 = args[2][23 * steps + ((cycle - 4) & mask)];
          Fp x47721 = x47720 * x28;
          Fp x47722 = x47719 + x47721;
          Fp x47723 = args[2][24 * steps + ((cycle - 4) & mask)];
          Fp x47724 = x47723 * x13;
          Fp x47725 = x47722 + x47724;
          Fp x47726 = args[2][25 * steps + ((cycle - 4) & mask)];
          Fp x47727 = x47726 * x29;
          Fp x47728 = x47725 + x47727;
          Fp x47729 = args[2][26 * steps + ((cycle - 4) & mask)];
          Fp x47730 = x47729 * x14;
          Fp x47731 = x47728 + x47730;
          Fp x47732 = args[2][27 * steps + ((cycle - 4) & mask)];
          Fp x47733 = x47732 * x30;
          Fp x47734 = x47731 + x47733;
          Fp x47735 = args[2][28 * steps + ((cycle - 4) & mask)];
          Fp x47736 = x47735 * x15;
          Fp x47737 = x47734 + x47736;
          Fp x47738 = args[2][29 * steps + ((cycle - 4) & mask)];
          Fp x47739 = x47738 * x31;
          Fp x47740 = x47737 + x47739;
          Fp x47741 = args[2][30 * steps + ((cycle - 4) & mask)];
          Fp x47742 = x47741 * x16;
          Fp x47743 = x47740 + x47742;
          Fp x47744 = args[2][31 * steps + ((cycle - 4) & mask)];
          Fp x47745 = x47744 * x32;
          Fp x47746 = x47743 + x47745;
          {
            Fp x47747 = Fp(x47700.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x47747;
            Fp x47748 = x47700 - x47747;
            Fp x47749 = x47748 * x26;
            Fp x47750 = Fp(x47749.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x47750;
            Fp x47751 = x47749 - x47750;
            Fp x47752 = x47751 * x26;
            Fp x47753 = Fp(x47752.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x47753;
            Fp x47754 = x47752 - x47753;
            Fp x47755 = x47754 * x26;
            Fp x47756 = Fp(x47755.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x47756;
            Fp x47757 = x47755 - x47756;
            Fp x47758 = x47757 * x26;
            Fp x47759 = Fp(x47758.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x47759;
            Fp x47760 = x47758 - x47759;
            Fp x47761 = x47760 * x26;
            Fp x47762 = Fp(x47761.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x47762;
            Fp x47763 = x47761 - x47762;
            Fp x47764 = x47763 * x26;
            Fp x47765 = Fp(x47764.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x47765;
            Fp x47766 = x47764 - x47765;
            Fp x47767 = x47766 * x26;
            Fp x47768 = Fp(x47767.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x47768;
            Fp x47769 = x47767 - x47768;
            Fp x47770 = x47769 * x26;
            Fp x47771 = Fp(x47770.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x47771;
            Fp x47772 = x47770 - x47771;
            Fp x47773 = x47772 * x26;
            Fp x47774 = Fp(x47773.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x47774;
            Fp x47775 = x47773 - x47774;
            Fp x47776 = x47775 * x26;
            Fp x47777 = Fp(x47776.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x47777;
            Fp x47778 = x47776 - x47777;
            Fp x47779 = x47778 * x26;
            Fp x47780 = Fp(x47779.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x47780;
            Fp x47781 = x47779 - x47780;
            Fp x47782 = x47781 * x26;
            Fp x47783 = Fp(x47782.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x47783;
            Fp x47784 = x47782 - x47783;
            Fp x47785 = x47784 * x26;
            Fp x47786 = Fp(x47785.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x47786;
            Fp x47787 = x47785 - x47786;
            Fp x47788 = x47787 * x26;
            Fp x47789 = Fp(x47788.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x47789;
            Fp x47790 = x47788 - x47789;
            Fp x47791 = x47790 * x26;
            Fp x47792 = Fp(x47791.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x47792;
          }
          Fp x47793 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x47794 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x47795 = x47794 * x1;
          Fp x47796 = x47793 + x47795;
          Fp x47797 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x47798 = x47797 * x3;
          Fp x47799 = x47796 + x47798;
          Fp x47800 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x47801 = x47800 * x6;
          Fp x47802 = x47799 + x47801;
          Fp x47803 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x47804 = x47803 * x11;
          Fp x47805 = x47802 + x47804;
          Fp x47806 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x47807 = x47806 * x27;
          Fp x47808 = x47805 + x47807;
          Fp x47809 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x47810 = x47809 * x12;
          Fp x47811 = x47808 + x47810;
          Fp x47812 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x47813 = x47812 * x28;
          Fp x47814 = x47811 + x47813;
          Fp x47815 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x47816 = x47815 * x13;
          Fp x47817 = x47814 + x47816;
          Fp x47818 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x47819 = x47818 * x29;
          Fp x47820 = x47817 + x47819;
          Fp x47821 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x47822 = x47821 * x14;
          Fp x47823 = x47820 + x47822;
          Fp x47824 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x47825 = x47824 * x30;
          Fp x47826 = x47823 + x47825;
          Fp x47827 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x47828 = x47827 * x15;
          Fp x47829 = x47826 + x47828;
          Fp x47830 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x47831 = x47830 * x31;
          Fp x47832 = x47829 + x47831;
          Fp x47833 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x47834 = x47833 * x16;
          Fp x47835 = x47832 + x47834;
          Fp x47836 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x47837 = x47836 * x32;
          Fp x47838 = x47835 + x47837;
          Fp x47839 = x47700 - x47838;
          Fp x47840 = x47839 * x33;
          if (x47840 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          {
            Fp x47841 = Fp(x47746.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x47841;
            Fp x47842 = x47746 - x47841;
            Fp x47843 = x47842 * x26;
            Fp x47844 = Fp(x47843.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x47844;
            Fp x47845 = x47843 - x47844;
            Fp x47846 = x47845 * x26;
            Fp x47847 = Fp(x47846.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x47847;
            Fp x47848 = x47846 - x47847;
            Fp x47849 = x47848 * x26;
            Fp x47850 = Fp(x47849.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x47850;
            Fp x47851 = x47849 - x47850;
            Fp x47852 = x47851 * x26;
            Fp x47853 = Fp(x47852.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x47853;
            Fp x47854 = x47852 - x47853;
            Fp x47855 = x47854 * x26;
            Fp x47856 = Fp(x47855.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x47856;
            Fp x47857 = x47855 - x47856;
            Fp x47858 = x47857 * x26;
            Fp x47859 = Fp(x47858.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x47859;
            Fp x47860 = x47858 - x47859;
            Fp x47861 = x47860 * x26;
            Fp x47862 = Fp(x47861.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x47862;
            Fp x47863 = x47861 - x47862;
            Fp x47864 = x47863 * x26;
            Fp x47865 = Fp(x47864.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x47865;
            Fp x47866 = x47864 - x47865;
            Fp x47867 = x47866 * x26;
            Fp x47868 = Fp(x47867.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x47868;
            Fp x47869 = x47867 - x47868;
            Fp x47870 = x47869 * x26;
            Fp x47871 = Fp(x47870.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x47871;
            Fp x47872 = x47870 - x47871;
            Fp x47873 = x47872 * x26;
            Fp x47874 = Fp(x47873.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x47874;
            Fp x47875 = x47873 - x47874;
            Fp x47876 = x47875 * x26;
            Fp x47877 = Fp(x47876.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x47877;
            Fp x47878 = x47876 - x47877;
            Fp x47879 = x47878 * x26;
            Fp x47880 = Fp(x47879.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x47880;
            Fp x47881 = x47879 - x47880;
            Fp x47882 = x47881 * x26;
            Fp x47883 = Fp(x47882.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x47883;
            Fp x47884 = x47882 - x47883;
            Fp x47885 = x47884 * x26;
            Fp x47886 = Fp(x47885.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x47886;
          }
          Fp x47887 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x47888 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x47889 = x47888 * x1;
          Fp x47890 = x47887 + x47889;
          Fp x47891 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x47892 = x47891 * x3;
          Fp x47893 = x47890 + x47892;
          Fp x47894 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x47895 = x47894 * x6;
          Fp x47896 = x47893 + x47895;
          Fp x47897 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x47898 = x47897 * x11;
          Fp x47899 = x47896 + x47898;
          Fp x47900 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x47901 = x47900 * x27;
          Fp x47902 = x47899 + x47901;
          Fp x47903 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x47904 = x47903 * x12;
          Fp x47905 = x47902 + x47904;
          Fp x47906 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x47907 = x47906 * x28;
          Fp x47908 = x47905 + x47907;
          Fp x47909 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x47910 = x47909 * x13;
          Fp x47911 = x47908 + x47910;
          Fp x47912 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x47913 = x47912 * x29;
          Fp x47914 = x47911 + x47913;
          Fp x47915 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x47916 = x47915 * x14;
          Fp x47917 = x47914 + x47916;
          Fp x47918 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x47919 = x47918 * x30;
          Fp x47920 = x47917 + x47919;
          Fp x47921 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x47922 = x47921 * x15;
          Fp x47923 = x47920 + x47922;
          Fp x47924 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x47925 = x47924 * x31;
          Fp x47926 = x47923 + x47925;
          Fp x47927 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x47928 = x47927 * x16;
          Fp x47929 = x47926 + x47928;
          Fp x47930 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x47931 = x47930 * x32;
          Fp x47932 = x47929 + x47931;
          Fp x47933 = x47746 - x47932;
          Fp x47934 = x47933 * x33;
          if (x47934 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          Fp x47935 = args[2][32 * steps + ((cycle - 4) & mask)];
          Fp x47936 = args[2][33 * steps + ((cycle - 4) & mask)];
          Fp x47937 = x47936 * x1;
          Fp x47938 = x47935 + x47937;
          Fp x47939 = args[2][34 * steps + ((cycle - 4) & mask)];
          Fp x47940 = x47939 * x3;
          Fp x47941 = x47938 + x47940;
          Fp x47942 = args[2][35 * steps + ((cycle - 4) & mask)];
          Fp x47943 = x47942 * x6;
          Fp x47944 = x47941 + x47943;
          Fp x47945 = args[2][36 * steps + ((cycle - 4) & mask)];
          Fp x47946 = x47945 * x11;
          Fp x47947 = x47944 + x47946;
          Fp x47948 = args[2][37 * steps + ((cycle - 4) & mask)];
          Fp x47949 = x47948 * x27;
          Fp x47950 = x47947 + x47949;
          Fp x47951 = args[2][38 * steps + ((cycle - 4) & mask)];
          Fp x47952 = x47951 * x12;
          Fp x47953 = x47950 + x47952;
          Fp x47954 = args[2][39 * steps + ((cycle - 4) & mask)];
          Fp x47955 = x47954 * x28;
          Fp x47956 = x47953 + x47955;
          Fp x47957 = args[2][40 * steps + ((cycle - 4) & mask)];
          Fp x47958 = x47957 * x13;
          Fp x47959 = x47956 + x47958;
          Fp x47960 = args[2][41 * steps + ((cycle - 4) & mask)];
          Fp x47961 = x47960 * x29;
          Fp x47962 = x47959 + x47961;
          Fp x47963 = args[2][42 * steps + ((cycle - 4) & mask)];
          Fp x47964 = x47963 * x14;
          Fp x47965 = x47962 + x47964;
          Fp x47966 = args[2][43 * steps + ((cycle - 4) & mask)];
          Fp x47967 = x47966 * x30;
          Fp x47968 = x47965 + x47967;
          Fp x47969 = args[2][44 * steps + ((cycle - 4) & mask)];
          Fp x47970 = x47969 * x15;
          Fp x47971 = x47968 + x47970;
          Fp x47972 = args[2][45 * steps + ((cycle - 4) & mask)];
          Fp x47973 = x47972 * x31;
          Fp x47974 = x47971 + x47973;
          Fp x47975 = args[2][46 * steps + ((cycle - 4) & mask)];
          Fp x47976 = x47975 * x16;
          Fp x47977 = x47974 + x47976;
          Fp x47978 = args[2][47 * steps + ((cycle - 4) & mask)];
          Fp x47979 = x47978 * x32;
          Fp x47980 = x47977 + x47979;
          Fp x47981 = args[2][48 * steps + ((cycle - 4) & mask)];
          Fp x47982 = args[2][49 * steps + ((cycle - 4) & mask)];
          Fp x47983 = x47982 * x1;
          Fp x47984 = x47981 + x47983;
          Fp x47985 = args[2][50 * steps + ((cycle - 4) & mask)];
          Fp x47986 = x47985 * x3;
          Fp x47987 = x47984 + x47986;
          Fp x47988 = args[2][51 * steps + ((cycle - 4) & mask)];
          Fp x47989 = x47988 * x6;
          Fp x47990 = x47987 + x47989;
          Fp x47991 = args[2][52 * steps + ((cycle - 4) & mask)];
          Fp x47992 = x47991 * x11;
          Fp x47993 = x47990 + x47992;
          Fp x47994 = args[2][53 * steps + ((cycle - 4) & mask)];
          Fp x47995 = x47994 * x27;
          Fp x47996 = x47993 + x47995;
          Fp x47997 = args[2][54 * steps + ((cycle - 4) & mask)];
          Fp x47998 = x47997 * x12;
          Fp x47999 = x47996 + x47998;
          Fp x48000 = args[2][55 * steps + ((cycle - 4) & mask)];
          Fp x48001 = x48000 * x28;
          Fp x48002 = x47999 + x48001;
          Fp x48003 = args[2][56 * steps + ((cycle - 4) & mask)];
          Fp x48004 = x48003 * x13;
          Fp x48005 = x48002 + x48004;
          Fp x48006 = args[2][57 * steps + ((cycle - 4) & mask)];
          Fp x48007 = x48006 * x29;
          Fp x48008 = x48005 + x48007;
          Fp x48009 = args[2][58 * steps + ((cycle - 4) & mask)];
          Fp x48010 = x48009 * x14;
          Fp x48011 = x48008 + x48010;
          Fp x48012 = args[2][59 * steps + ((cycle - 4) & mask)];
          Fp x48013 = x48012 * x30;
          Fp x48014 = x48011 + x48013;
          Fp x48015 = args[2][60 * steps + ((cycle - 4) & mask)];
          Fp x48016 = x48015 * x15;
          Fp x48017 = x48014 + x48016;
          Fp x48018 = args[2][61 * steps + ((cycle - 4) & mask)];
          Fp x48019 = x48018 * x31;
          Fp x48020 = x48017 + x48019;
          Fp x48021 = args[2][62 * steps + ((cycle - 4) & mask)];
          Fp x48022 = x48021 * x16;
          Fp x48023 = x48020 + x48022;
          Fp x48024 = args[2][63 * steps + ((cycle - 4) & mask)];
          Fp x48025 = x48024 * x32;
          Fp x48026 = x48023 + x48025;
          {
            Fp x48027 = Fp(x47980.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x48027;
            Fp x48028 = x47980 - x48027;
            Fp x48029 = x48028 * x26;
            Fp x48030 = Fp(x48029.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x48030;
            Fp x48031 = x48029 - x48030;
            Fp x48032 = x48031 * x26;
            Fp x48033 = Fp(x48032.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x48033;
            Fp x48034 = x48032 - x48033;
            Fp x48035 = x48034 * x26;
            Fp x48036 = Fp(x48035.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x48036;
            Fp x48037 = x48035 - x48036;
            Fp x48038 = x48037 * x26;
            Fp x48039 = Fp(x48038.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x48039;
            Fp x48040 = x48038 - x48039;
            Fp x48041 = x48040 * x26;
            Fp x48042 = Fp(x48041.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x48042;
            Fp x48043 = x48041 - x48042;
            Fp x48044 = x48043 * x26;
            Fp x48045 = Fp(x48044.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x48045;
            Fp x48046 = x48044 - x48045;
            Fp x48047 = x48046 * x26;
            Fp x48048 = Fp(x48047.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x48048;
            Fp x48049 = x48047 - x48048;
            Fp x48050 = x48049 * x26;
            Fp x48051 = Fp(x48050.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x48051;
            Fp x48052 = x48050 - x48051;
            Fp x48053 = x48052 * x26;
            Fp x48054 = Fp(x48053.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x48054;
            Fp x48055 = x48053 - x48054;
            Fp x48056 = x48055 * x26;
            Fp x48057 = Fp(x48056.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x48057;
            Fp x48058 = x48056 - x48057;
            Fp x48059 = x48058 * x26;
            Fp x48060 = Fp(x48059.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x48060;
            Fp x48061 = x48059 - x48060;
            Fp x48062 = x48061 * x26;
            Fp x48063 = Fp(x48062.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x48063;
            Fp x48064 = x48062 - x48063;
            Fp x48065 = x48064 * x26;
            Fp x48066 = Fp(x48065.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x48066;
            Fp x48067 = x48065 - x48066;
            Fp x48068 = x48067 * x26;
            Fp x48069 = Fp(x48068.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x48069;
            Fp x48070 = x48068 - x48069;
            Fp x48071 = x48070 * x26;
            Fp x48072 = Fp(x48071.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x48072;
          }
          Fp x48073 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x48074 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x48075 = x48074 * x1;
          Fp x48076 = x48073 + x48075;
          Fp x48077 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x48078 = x48077 * x3;
          Fp x48079 = x48076 + x48078;
          Fp x48080 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x48081 = x48080 * x6;
          Fp x48082 = x48079 + x48081;
          Fp x48083 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x48084 = x48083 * x11;
          Fp x48085 = x48082 + x48084;
          Fp x48086 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x48087 = x48086 * x27;
          Fp x48088 = x48085 + x48087;
          Fp x48089 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x48090 = x48089 * x12;
          Fp x48091 = x48088 + x48090;
          Fp x48092 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x48093 = x48092 * x28;
          Fp x48094 = x48091 + x48093;
          Fp x48095 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x48096 = x48095 * x13;
          Fp x48097 = x48094 + x48096;
          Fp x48098 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x48099 = x48098 * x29;
          Fp x48100 = x48097 + x48099;
          Fp x48101 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x48102 = x48101 * x14;
          Fp x48103 = x48100 + x48102;
          Fp x48104 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x48105 = x48104 * x30;
          Fp x48106 = x48103 + x48105;
          Fp x48107 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x48108 = x48107 * x15;
          Fp x48109 = x48106 + x48108;
          Fp x48110 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x48111 = x48110 * x31;
          Fp x48112 = x48109 + x48111;
          Fp x48113 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x48114 = x48113 * x16;
          Fp x48115 = x48112 + x48114;
          Fp x48116 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x48117 = x48116 * x32;
          Fp x48118 = x48115 + x48117;
          Fp x48119 = x47980 - x48118;
          Fp x48120 = x48119 * x33;
          if (x48120 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          {
            Fp x48121 = Fp(x48026.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x48121;
            Fp x48122 = x48026 - x48121;
            Fp x48123 = x48122 * x26;
            Fp x48124 = Fp(x48123.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x48124;
            Fp x48125 = x48123 - x48124;
            Fp x48126 = x48125 * x26;
            Fp x48127 = Fp(x48126.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x48127;
            Fp x48128 = x48126 - x48127;
            Fp x48129 = x48128 * x26;
            Fp x48130 = Fp(x48129.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x48130;
            Fp x48131 = x48129 - x48130;
            Fp x48132 = x48131 * x26;
            Fp x48133 = Fp(x48132.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x48133;
            Fp x48134 = x48132 - x48133;
            Fp x48135 = x48134 * x26;
            Fp x48136 = Fp(x48135.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x48136;
            Fp x48137 = x48135 - x48136;
            Fp x48138 = x48137 * x26;
            Fp x48139 = Fp(x48138.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x48139;
            Fp x48140 = x48138 - x48139;
            Fp x48141 = x48140 * x26;
            Fp x48142 = Fp(x48141.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x48142;
            Fp x48143 = x48141 - x48142;
            Fp x48144 = x48143 * x26;
            Fp x48145 = Fp(x48144.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x48145;
            Fp x48146 = x48144 - x48145;
            Fp x48147 = x48146 * x26;
            Fp x48148 = Fp(x48147.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x48148;
            Fp x48149 = x48147 - x48148;
            Fp x48150 = x48149 * x26;
            Fp x48151 = Fp(x48150.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x48151;
            Fp x48152 = x48150 - x48151;
            Fp x48153 = x48152 * x26;
            Fp x48154 = Fp(x48153.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x48154;
            Fp x48155 = x48153 - x48154;
            Fp x48156 = x48155 * x26;
            Fp x48157 = Fp(x48156.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x48157;
            Fp x48158 = x48156 - x48157;
            Fp x48159 = x48158 * x26;
            Fp x48160 = Fp(x48159.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x48160;
            Fp x48161 = x48159 - x48160;
            Fp x48162 = x48161 * x26;
            Fp x48163 = Fp(x48162.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x48163;
            Fp x48164 = x48162 - x48163;
            Fp x48165 = x48164 * x26;
            Fp x48166 = Fp(x48165.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x48166;
          }
          Fp x48167 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x48168 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x48169 = x48168 * x1;
          Fp x48170 = x48167 + x48169;
          Fp x48171 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x48172 = x48171 * x3;
          Fp x48173 = x48170 + x48172;
          Fp x48174 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x48175 = x48174 * x6;
          Fp x48176 = x48173 + x48175;
          Fp x48177 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x48178 = x48177 * x11;
          Fp x48179 = x48176 + x48178;
          Fp x48180 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x48181 = x48180 * x27;
          Fp x48182 = x48179 + x48181;
          Fp x48183 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x48184 = x48183 * x12;
          Fp x48185 = x48182 + x48184;
          Fp x48186 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x48187 = x48186 * x28;
          Fp x48188 = x48185 + x48187;
          Fp x48189 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x48190 = x48189 * x13;
          Fp x48191 = x48188 + x48190;
          Fp x48192 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x48193 = x48192 * x29;
          Fp x48194 = x48191 + x48193;
          Fp x48195 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x48196 = x48195 * x14;
          Fp x48197 = x48194 + x48196;
          Fp x48198 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x48199 = x48198 * x30;
          Fp x48200 = x48197 + x48199;
          Fp x48201 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x48202 = x48201 * x15;
          Fp x48203 = x48200 + x48202;
          Fp x48204 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x48205 = x48204 * x31;
          Fp x48206 = x48203 + x48205;
          Fp x48207 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x48208 = x48207 * x16;
          Fp x48209 = x48206 + x48208;
          Fp x48210 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x48211 = x48210 * x32;
          Fp x48212 = x48209 + x48211;
          Fp x48213 = x48026 - x48212;
          Fp x48214 = x48213 * x33;
          if (x48214 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          host_args[0] = x47932;
          host_args[1] = x47838;
          host_args[2] = x48212;
          host_args[3] = x48118;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%0x04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x48215 = x71 - x47654;
        if (x48215 != 0) {
          Fp x48216 = args[0][12 * steps + ((cycle - 0) & mask)];
          Fp x48217 = args[0][13 * steps + ((cycle - 0) & mask)];
          {
            Fp x48218 = Fp(x48216.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x48218;
            Fp x48219 = x48216 - x48218;
            Fp x48220 = x48219 * x26;
            Fp x48221 = Fp(x48220.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x48221;
            Fp x48222 = x48220 - x48221;
            Fp x48223 = x48222 * x26;
            Fp x48224 = Fp(x48223.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x48224;
            Fp x48225 = x48223 - x48224;
            Fp x48226 = x48225 * x26;
            Fp x48227 = Fp(x48226.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x48227;
            Fp x48228 = x48226 - x48227;
            Fp x48229 = x48228 * x26;
            Fp x48230 = Fp(x48229.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x48230;
            Fp x48231 = x48229 - x48230;
            Fp x48232 = x48231 * x26;
            Fp x48233 = Fp(x48232.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x48233;
            Fp x48234 = x48232 - x48233;
            Fp x48235 = x48234 * x26;
            Fp x48236 = Fp(x48235.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x48236;
            Fp x48237 = x48235 - x48236;
            Fp x48238 = x48237 * x26;
            Fp x48239 = Fp(x48238.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x48239;
            Fp x48240 = x48238 - x48239;
            Fp x48241 = x48240 * x26;
            Fp x48242 = Fp(x48241.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x48242;
            Fp x48243 = x48241 - x48242;
            Fp x48244 = x48243 * x26;
            Fp x48245 = Fp(x48244.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x48245;
            Fp x48246 = x48244 - x48245;
            Fp x48247 = x48246 * x26;
            Fp x48248 = Fp(x48247.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x48248;
            Fp x48249 = x48247 - x48248;
            Fp x48250 = x48249 * x26;
            Fp x48251 = Fp(x48250.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x48251;
            Fp x48252 = x48250 - x48251;
            Fp x48253 = x48252 * x26;
            Fp x48254 = Fp(x48253.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x48254;
            Fp x48255 = x48253 - x48254;
            Fp x48256 = x48255 * x26;
            Fp x48257 = Fp(x48256.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x48257;
            Fp x48258 = x48256 - x48257;
            Fp x48259 = x48258 * x26;
            Fp x48260 = Fp(x48259.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x48260;
            Fp x48261 = x48259 - x48260;
            Fp x48262 = x48261 * x26;
            Fp x48263 = Fp(x48262.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x48263;
          }
          Fp x48264 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x48265 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x48266 = x48265 * x1;
          Fp x48267 = x48264 + x48266;
          Fp x48268 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x48269 = x48268 * x3;
          Fp x48270 = x48267 + x48269;
          Fp x48271 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x48272 = x48271 * x6;
          Fp x48273 = x48270 + x48272;
          Fp x48274 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x48275 = x48274 * x11;
          Fp x48276 = x48273 + x48275;
          Fp x48277 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x48278 = x48277 * x27;
          Fp x48279 = x48276 + x48278;
          Fp x48280 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x48281 = x48280 * x12;
          Fp x48282 = x48279 + x48281;
          Fp x48283 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x48284 = x48283 * x28;
          Fp x48285 = x48282 + x48284;
          Fp x48286 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x48287 = x48286 * x13;
          Fp x48288 = x48285 + x48287;
          Fp x48289 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x48290 = x48289 * x29;
          Fp x48291 = x48288 + x48290;
          Fp x48292 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x48293 = x48292 * x14;
          Fp x48294 = x48291 + x48293;
          Fp x48295 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x48296 = x48295 * x30;
          Fp x48297 = x48294 + x48296;
          Fp x48298 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x48299 = x48298 * x15;
          Fp x48300 = x48297 + x48299;
          Fp x48301 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x48302 = x48301 * x31;
          Fp x48303 = x48300 + x48302;
          Fp x48304 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x48305 = x48304 * x16;
          Fp x48306 = x48303 + x48305;
          Fp x48307 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x48308 = x48307 * x32;
          Fp x48309 = x48306 + x48308;
          Fp x48310 = x48216 - x48309;
          Fp x48311 = x48310 * x33;
          if (x48311 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          {
            Fp x48312 = Fp(x48217.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x48312;
            Fp x48313 = x48217 - x48312;
            Fp x48314 = x48313 * x26;
            Fp x48315 = Fp(x48314.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x48315;
            Fp x48316 = x48314 - x48315;
            Fp x48317 = x48316 * x26;
            Fp x48318 = Fp(x48317.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x48318;
            Fp x48319 = x48317 - x48318;
            Fp x48320 = x48319 * x26;
            Fp x48321 = Fp(x48320.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x48321;
            Fp x48322 = x48320 - x48321;
            Fp x48323 = x48322 * x26;
            Fp x48324 = Fp(x48323.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x48324;
            Fp x48325 = x48323 - x48324;
            Fp x48326 = x48325 * x26;
            Fp x48327 = Fp(x48326.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x48327;
            Fp x48328 = x48326 - x48327;
            Fp x48329 = x48328 * x26;
            Fp x48330 = Fp(x48329.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x48330;
            Fp x48331 = x48329 - x48330;
            Fp x48332 = x48331 * x26;
            Fp x48333 = Fp(x48332.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x48333;
            Fp x48334 = x48332 - x48333;
            Fp x48335 = x48334 * x26;
            Fp x48336 = Fp(x48335.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x48336;
            Fp x48337 = x48335 - x48336;
            Fp x48338 = x48337 * x26;
            Fp x48339 = Fp(x48338.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x48339;
            Fp x48340 = x48338 - x48339;
            Fp x48341 = x48340 * x26;
            Fp x48342 = Fp(x48341.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x48342;
            Fp x48343 = x48341 - x48342;
            Fp x48344 = x48343 * x26;
            Fp x48345 = Fp(x48344.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x48345;
            Fp x48346 = x48344 - x48345;
            Fp x48347 = x48346 * x26;
            Fp x48348 = Fp(x48347.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x48348;
            Fp x48349 = x48347 - x48348;
            Fp x48350 = x48349 * x26;
            Fp x48351 = Fp(x48350.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x48351;
            Fp x48352 = x48350 - x48351;
            Fp x48353 = x48352 * x26;
            Fp x48354 = Fp(x48353.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x48354;
            Fp x48355 = x48353 - x48354;
            Fp x48356 = x48355 * x26;
            Fp x48357 = Fp(x48356.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x48357;
          }
          Fp x48358 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x48359 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x48360 = x48359 * x1;
          Fp x48361 = x48358 + x48360;
          Fp x48362 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x48363 = x48362 * x3;
          Fp x48364 = x48361 + x48363;
          Fp x48365 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x48366 = x48365 * x6;
          Fp x48367 = x48364 + x48366;
          Fp x48368 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x48369 = x48368 * x11;
          Fp x48370 = x48367 + x48369;
          Fp x48371 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x48372 = x48371 * x27;
          Fp x48373 = x48370 + x48372;
          Fp x48374 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x48375 = x48374 * x12;
          Fp x48376 = x48373 + x48375;
          Fp x48377 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x48378 = x48377 * x28;
          Fp x48379 = x48376 + x48378;
          Fp x48380 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x48381 = x48380 * x13;
          Fp x48382 = x48379 + x48381;
          Fp x48383 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x48384 = x48383 * x29;
          Fp x48385 = x48382 + x48384;
          Fp x48386 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x48387 = x48386 * x14;
          Fp x48388 = x48385 + x48387;
          Fp x48389 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x48390 = x48389 * x30;
          Fp x48391 = x48388 + x48390;
          Fp x48392 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x48393 = x48392 * x15;
          Fp x48394 = x48391 + x48393;
          Fp x48395 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x48396 = x48395 * x31;
          Fp x48397 = x48394 + x48396;
          Fp x48398 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x48399 = x48398 * x16;
          Fp x48400 = x48397 + x48399;
          Fp x48401 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x48402 = x48401 * x32;
          Fp x48403 = x48400 + x48402;
          Fp x48404 = x48217 - x48403;
          Fp x48405 = x48404 * x33;
          if (x48405 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          Fp x48406 = args[0][14 * steps + ((cycle - 0) & mask)];
          Fp x48407 = args[0][15 * steps + ((cycle - 0) & mask)];
          {
            Fp x48408 = Fp(x48406.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x48408;
            Fp x48409 = x48406 - x48408;
            Fp x48410 = x48409 * x26;
            Fp x48411 = Fp(x48410.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x48411;
            Fp x48412 = x48410 - x48411;
            Fp x48413 = x48412 * x26;
            Fp x48414 = Fp(x48413.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x48414;
            Fp x48415 = x48413 - x48414;
            Fp x48416 = x48415 * x26;
            Fp x48417 = Fp(x48416.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x48417;
            Fp x48418 = x48416 - x48417;
            Fp x48419 = x48418 * x26;
            Fp x48420 = Fp(x48419.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x48420;
            Fp x48421 = x48419 - x48420;
            Fp x48422 = x48421 * x26;
            Fp x48423 = Fp(x48422.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x48423;
            Fp x48424 = x48422 - x48423;
            Fp x48425 = x48424 * x26;
            Fp x48426 = Fp(x48425.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x48426;
            Fp x48427 = x48425 - x48426;
            Fp x48428 = x48427 * x26;
            Fp x48429 = Fp(x48428.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x48429;
            Fp x48430 = x48428 - x48429;
            Fp x48431 = x48430 * x26;
            Fp x48432 = Fp(x48431.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x48432;
            Fp x48433 = x48431 - x48432;
            Fp x48434 = x48433 * x26;
            Fp x48435 = Fp(x48434.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x48435;
            Fp x48436 = x48434 - x48435;
            Fp x48437 = x48436 * x26;
            Fp x48438 = Fp(x48437.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x48438;
            Fp x48439 = x48437 - x48438;
            Fp x48440 = x48439 * x26;
            Fp x48441 = Fp(x48440.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x48441;
            Fp x48442 = x48440 - x48441;
            Fp x48443 = x48442 * x26;
            Fp x48444 = Fp(x48443.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x48444;
            Fp x48445 = x48443 - x48444;
            Fp x48446 = x48445 * x26;
            Fp x48447 = Fp(x48446.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x48447;
            Fp x48448 = x48446 - x48447;
            Fp x48449 = x48448 * x26;
            Fp x48450 = Fp(x48449.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x48450;
            Fp x48451 = x48449 - x48450;
            Fp x48452 = x48451 * x26;
            Fp x48453 = Fp(x48452.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x48453;
          }
          Fp x48454 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x48455 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x48456 = x48455 * x1;
          Fp x48457 = x48454 + x48456;
          Fp x48458 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x48459 = x48458 * x3;
          Fp x48460 = x48457 + x48459;
          Fp x48461 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x48462 = x48461 * x6;
          Fp x48463 = x48460 + x48462;
          Fp x48464 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x48465 = x48464 * x11;
          Fp x48466 = x48463 + x48465;
          Fp x48467 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x48468 = x48467 * x27;
          Fp x48469 = x48466 + x48468;
          Fp x48470 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x48471 = x48470 * x12;
          Fp x48472 = x48469 + x48471;
          Fp x48473 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x48474 = x48473 * x28;
          Fp x48475 = x48472 + x48474;
          Fp x48476 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x48477 = x48476 * x13;
          Fp x48478 = x48475 + x48477;
          Fp x48479 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x48480 = x48479 * x29;
          Fp x48481 = x48478 + x48480;
          Fp x48482 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x48483 = x48482 * x14;
          Fp x48484 = x48481 + x48483;
          Fp x48485 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x48486 = x48485 * x30;
          Fp x48487 = x48484 + x48486;
          Fp x48488 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x48489 = x48488 * x15;
          Fp x48490 = x48487 + x48489;
          Fp x48491 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x48492 = x48491 * x31;
          Fp x48493 = x48490 + x48492;
          Fp x48494 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x48495 = x48494 * x16;
          Fp x48496 = x48493 + x48495;
          Fp x48497 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x48498 = x48497 * x32;
          Fp x48499 = x48496 + x48498;
          Fp x48500 = x48406 - x48499;
          Fp x48501 = x48500 * x33;
          if (x48501 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          {
            Fp x48502 = Fp(x48407.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x48502;
            Fp x48503 = x48407 - x48502;
            Fp x48504 = x48503 * x26;
            Fp x48505 = Fp(x48504.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x48505;
            Fp x48506 = x48504 - x48505;
            Fp x48507 = x48506 * x26;
            Fp x48508 = Fp(x48507.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x48508;
            Fp x48509 = x48507 - x48508;
            Fp x48510 = x48509 * x26;
            Fp x48511 = Fp(x48510.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x48511;
            Fp x48512 = x48510 - x48511;
            Fp x48513 = x48512 * x26;
            Fp x48514 = Fp(x48513.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x48514;
            Fp x48515 = x48513 - x48514;
            Fp x48516 = x48515 * x26;
            Fp x48517 = Fp(x48516.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x48517;
            Fp x48518 = x48516 - x48517;
            Fp x48519 = x48518 * x26;
            Fp x48520 = Fp(x48519.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x48520;
            Fp x48521 = x48519 - x48520;
            Fp x48522 = x48521 * x26;
            Fp x48523 = Fp(x48522.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x48523;
            Fp x48524 = x48522 - x48523;
            Fp x48525 = x48524 * x26;
            Fp x48526 = Fp(x48525.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x48526;
            Fp x48527 = x48525 - x48526;
            Fp x48528 = x48527 * x26;
            Fp x48529 = Fp(x48528.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x48529;
            Fp x48530 = x48528 - x48529;
            Fp x48531 = x48530 * x26;
            Fp x48532 = Fp(x48531.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x48532;
            Fp x48533 = x48531 - x48532;
            Fp x48534 = x48533 * x26;
            Fp x48535 = Fp(x48534.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x48535;
            Fp x48536 = x48534 - x48535;
            Fp x48537 = x48536 * x26;
            Fp x48538 = Fp(x48537.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x48538;
            Fp x48539 = x48537 - x48538;
            Fp x48540 = x48539 * x26;
            Fp x48541 = Fp(x48540.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x48541;
            Fp x48542 = x48540 - x48541;
            Fp x48543 = x48542 * x26;
            Fp x48544 = Fp(x48543.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x48544;
            Fp x48545 = x48543 - x48544;
            Fp x48546 = x48545 * x26;
            Fp x48547 = Fp(x48546.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x48547;
          }
          Fp x48548 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x48549 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x48550 = x48549 * x1;
          Fp x48551 = x48548 + x48550;
          Fp x48552 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x48553 = x48552 * x3;
          Fp x48554 = x48551 + x48553;
          Fp x48555 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x48556 = x48555 * x6;
          Fp x48557 = x48554 + x48556;
          Fp x48558 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x48559 = x48558 * x11;
          Fp x48560 = x48557 + x48559;
          Fp x48561 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x48562 = x48561 * x27;
          Fp x48563 = x48560 + x48562;
          Fp x48564 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x48565 = x48564 * x12;
          Fp x48566 = x48563 + x48565;
          Fp x48567 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x48568 = x48567 * x28;
          Fp x48569 = x48566 + x48568;
          Fp x48570 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x48571 = x48570 * x13;
          Fp x48572 = x48569 + x48571;
          Fp x48573 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x48574 = x48573 * x29;
          Fp x48575 = x48572 + x48574;
          Fp x48576 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x48577 = x48576 * x14;
          Fp x48578 = x48575 + x48577;
          Fp x48579 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x48580 = x48579 * x30;
          Fp x48581 = x48578 + x48580;
          Fp x48582 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x48583 = x48582 * x15;
          Fp x48584 = x48581 + x48583;
          Fp x48585 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x48586 = x48585 * x31;
          Fp x48587 = x48584 + x48586;
          Fp x48588 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x48589 = x48588 * x16;
          Fp x48590 = x48587 + x48589;
          Fp x48591 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x48592 = x48591 * x32;
          Fp x48593 = x48590 + x48592;
          Fp x48594 = x48407 - x48593;
          Fp x48595 = x48594 * x33;
          if (x48595 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          host_args[0] = x48403;
          host_args[1] = x48309;
          host_args[2] = x48593;
          host_args[3] = x48499;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x48596 = x47627 - x71;
        Fp x48597 = x47627 * x48596;
        if (x48597 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:131");
        Fp x48598 = x47647 - x71;
        Fp x48599 = x47647 * x48598;
        if (x48599 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:155");
        Fp x48600 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x48601 = x48600 - x71;
        Fp x48602 = x48600 * x48601;
        if (x48602 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:106");
        Fp x48603 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x48604 = x48603 - x71;
        Fp x48605 = x48603 * x48604;
        if (x48605 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:107");
        Fp x48606 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x48607 = x48606 - x71;
        Fp x48608 = x48606 * x48607;
        if (x48608 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:108");
        Fp x48609 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x48610 = x48609 - x71;
        Fp x48611 = x48609 * x48610;
        if (x48611 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:109");
      }
      if (x47597 != 0) {
        Fp x48612 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x48612;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x48612;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x48613 = host_outs[0];
          Fp x48614 = host_outs[1];
          args[2][129 * steps + cycle] = x48613;
          args[2][130 * steps + cycle] = x48614;
        }
        Fp x48615 = args[2][97 * steps + ((cycle - 1) & mask)];
        args[2][97 * steps + cycle] = x48615;
        Fp x48616 = args[2][98 * steps + ((cycle - 1) & mask)];
        args[2][98 * steps + cycle] = x48616;
        Fp x48617 = args[2][96 * steps + ((cycle - 1) & mask)];
        args[2][96 * steps + cycle] = x48617;
        Fp x48618 = args[2][123 * steps + ((cycle - 1) & mask)];
        args[2][123 * steps + cycle] = x48618;
        Fp x48619 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x48619;
        Fp x48620 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][126 * steps + cycle] = x48620;
        Fp x48621 = args[2][97 * steps + ((cycle - 0) & mask)];
        if (x48621 != 0) {
          host(ctx, "log", "  INIT2, cont", host_args.data(), 0, host_outs.data(), 0);
          Fp x48622 = args[2][124 * steps + ((cycle - 1) & mask)];
          args[2][124 * steps + cycle] = x48622;
          args[2][122 * steps + cycle] = x48612;
        }
        Fp x48623 = x71 - x48621;
        if (x48623 != 0) {
          Fp x48624 = args[2][128 * steps + ((cycle - 0) & mask)];
          Fp x48625 = x48624 * x3;
          Fp x48626 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x48627 = args[2][129 * steps + ((cycle - 0) & mask)];
          host_args[0] = x48625;
          host_args[1] = x48626;
          host_args[2] = x48627;
          host(ctx, "log", "  INIT1, load, addr = %x, val = 0x%04x%04x", host_args.data(), 3, host_outs.data(), 0);
          Fp x48628 = x48626 * x17;
          Fp x48629 = x48628 + x48627;
          args[2][124 * steps + cycle] = x48629;
          Fp x48630 = x48612 + x71;
          args[2][122 * steps + cycle] = x48630;
        }
        Fp x48631 = args[2][98 * steps + ((cycle - 0) & mask)];
        if (x48631 != 0) {
          Fp x48632 = args[2][0 * steps + ((cycle - 4) & mask)];
          Fp x48633 = args[2][1 * steps + ((cycle - 4) & mask)];
          Fp x48634 = x48633 * x1;
          Fp x48635 = x48632 + x48634;
          Fp x48636 = args[2][2 * steps + ((cycle - 4) & mask)];
          Fp x48637 = x48636 * x3;
          Fp x48638 = x48635 + x48637;
          Fp x48639 = args[2][3 * steps + ((cycle - 4) & mask)];
          Fp x48640 = x48639 * x6;
          Fp x48641 = x48638 + x48640;
          Fp x48642 = args[2][4 * steps + ((cycle - 4) & mask)];
          Fp x48643 = x48642 * x11;
          Fp x48644 = x48641 + x48643;
          Fp x48645 = args[2][5 * steps + ((cycle - 4) & mask)];
          Fp x48646 = x48645 * x27;
          Fp x48647 = x48644 + x48646;
          Fp x48648 = args[2][6 * steps + ((cycle - 4) & mask)];
          Fp x48649 = x48648 * x12;
          Fp x48650 = x48647 + x48649;
          Fp x48651 = args[2][7 * steps + ((cycle - 4) & mask)];
          Fp x48652 = x48651 * x28;
          Fp x48653 = x48650 + x48652;
          Fp x48654 = args[2][8 * steps + ((cycle - 4) & mask)];
          Fp x48655 = x48654 * x13;
          Fp x48656 = x48653 + x48655;
          Fp x48657 = args[2][9 * steps + ((cycle - 4) & mask)];
          Fp x48658 = x48657 * x29;
          Fp x48659 = x48656 + x48658;
          Fp x48660 = args[2][10 * steps + ((cycle - 4) & mask)];
          Fp x48661 = x48660 * x14;
          Fp x48662 = x48659 + x48661;
          Fp x48663 = args[2][11 * steps + ((cycle - 4) & mask)];
          Fp x48664 = x48663 * x30;
          Fp x48665 = x48662 + x48664;
          Fp x48666 = args[2][12 * steps + ((cycle - 4) & mask)];
          Fp x48667 = x48666 * x15;
          Fp x48668 = x48665 + x48667;
          Fp x48669 = args[2][13 * steps + ((cycle - 4) & mask)];
          Fp x48670 = x48669 * x31;
          Fp x48671 = x48668 + x48670;
          Fp x48672 = args[2][14 * steps + ((cycle - 4) & mask)];
          Fp x48673 = x48672 * x16;
          Fp x48674 = x48671 + x48673;
          Fp x48675 = args[2][15 * steps + ((cycle - 4) & mask)];
          Fp x48676 = x48675 * x32;
          Fp x48677 = x48674 + x48676;
          Fp x48678 = args[2][16 * steps + ((cycle - 4) & mask)];
          Fp x48679 = args[2][17 * steps + ((cycle - 4) & mask)];
          Fp x48680 = x48679 * x1;
          Fp x48681 = x48678 + x48680;
          Fp x48682 = args[2][18 * steps + ((cycle - 4) & mask)];
          Fp x48683 = x48682 * x3;
          Fp x48684 = x48681 + x48683;
          Fp x48685 = args[2][19 * steps + ((cycle - 4) & mask)];
          Fp x48686 = x48685 * x6;
          Fp x48687 = x48684 + x48686;
          Fp x48688 = args[2][20 * steps + ((cycle - 4) & mask)];
          Fp x48689 = x48688 * x11;
          Fp x48690 = x48687 + x48689;
          Fp x48691 = args[2][21 * steps + ((cycle - 4) & mask)];
          Fp x48692 = x48691 * x27;
          Fp x48693 = x48690 + x48692;
          Fp x48694 = args[2][22 * steps + ((cycle - 4) & mask)];
          Fp x48695 = x48694 * x12;
          Fp x48696 = x48693 + x48695;
          Fp x48697 = args[2][23 * steps + ((cycle - 4) & mask)];
          Fp x48698 = x48697 * x28;
          Fp x48699 = x48696 + x48698;
          Fp x48700 = args[2][24 * steps + ((cycle - 4) & mask)];
          Fp x48701 = x48700 * x13;
          Fp x48702 = x48699 + x48701;
          Fp x48703 = args[2][25 * steps + ((cycle - 4) & mask)];
          Fp x48704 = x48703 * x29;
          Fp x48705 = x48702 + x48704;
          Fp x48706 = args[2][26 * steps + ((cycle - 4) & mask)];
          Fp x48707 = x48706 * x14;
          Fp x48708 = x48705 + x48707;
          Fp x48709 = args[2][27 * steps + ((cycle - 4) & mask)];
          Fp x48710 = x48709 * x30;
          Fp x48711 = x48708 + x48710;
          Fp x48712 = args[2][28 * steps + ((cycle - 4) & mask)];
          Fp x48713 = x48712 * x15;
          Fp x48714 = x48711 + x48713;
          Fp x48715 = args[2][29 * steps + ((cycle - 4) & mask)];
          Fp x48716 = x48715 * x31;
          Fp x48717 = x48714 + x48716;
          Fp x48718 = args[2][30 * steps + ((cycle - 4) & mask)];
          Fp x48719 = x48718 * x16;
          Fp x48720 = x48717 + x48719;
          Fp x48721 = args[2][31 * steps + ((cycle - 4) & mask)];
          Fp x48722 = x48721 * x32;
          Fp x48723 = x48720 + x48722;
          {
            Fp x48724 = Fp(x48677.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x48724;
            Fp x48725 = x48677 - x48724;
            Fp x48726 = x48725 * x26;
            Fp x48727 = Fp(x48726.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x48727;
            Fp x48728 = x48726 - x48727;
            Fp x48729 = x48728 * x26;
            Fp x48730 = Fp(x48729.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x48730;
            Fp x48731 = x48729 - x48730;
            Fp x48732 = x48731 * x26;
            Fp x48733 = Fp(x48732.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x48733;
            Fp x48734 = x48732 - x48733;
            Fp x48735 = x48734 * x26;
            Fp x48736 = Fp(x48735.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x48736;
            Fp x48737 = x48735 - x48736;
            Fp x48738 = x48737 * x26;
            Fp x48739 = Fp(x48738.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x48739;
            Fp x48740 = x48738 - x48739;
            Fp x48741 = x48740 * x26;
            Fp x48742 = Fp(x48741.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x48742;
            Fp x48743 = x48741 - x48742;
            Fp x48744 = x48743 * x26;
            Fp x48745 = Fp(x48744.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x48745;
            Fp x48746 = x48744 - x48745;
            Fp x48747 = x48746 * x26;
            Fp x48748 = Fp(x48747.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x48748;
            Fp x48749 = x48747 - x48748;
            Fp x48750 = x48749 * x26;
            Fp x48751 = Fp(x48750.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x48751;
            Fp x48752 = x48750 - x48751;
            Fp x48753 = x48752 * x26;
            Fp x48754 = Fp(x48753.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x48754;
            Fp x48755 = x48753 - x48754;
            Fp x48756 = x48755 * x26;
            Fp x48757 = Fp(x48756.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x48757;
            Fp x48758 = x48756 - x48757;
            Fp x48759 = x48758 * x26;
            Fp x48760 = Fp(x48759.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x48760;
            Fp x48761 = x48759 - x48760;
            Fp x48762 = x48761 * x26;
            Fp x48763 = Fp(x48762.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x48763;
            Fp x48764 = x48762 - x48763;
            Fp x48765 = x48764 * x26;
            Fp x48766 = Fp(x48765.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x48766;
            Fp x48767 = x48765 - x48766;
            Fp x48768 = x48767 * x26;
            Fp x48769 = Fp(x48768.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x48769;
          }
          Fp x48770 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x48771 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x48772 = x48771 * x1;
          Fp x48773 = x48770 + x48772;
          Fp x48774 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x48775 = x48774 * x3;
          Fp x48776 = x48773 + x48775;
          Fp x48777 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x48778 = x48777 * x6;
          Fp x48779 = x48776 + x48778;
          Fp x48780 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x48781 = x48780 * x11;
          Fp x48782 = x48779 + x48781;
          Fp x48783 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x48784 = x48783 * x27;
          Fp x48785 = x48782 + x48784;
          Fp x48786 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x48787 = x48786 * x12;
          Fp x48788 = x48785 + x48787;
          Fp x48789 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x48790 = x48789 * x28;
          Fp x48791 = x48788 + x48790;
          Fp x48792 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x48793 = x48792 * x13;
          Fp x48794 = x48791 + x48793;
          Fp x48795 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x48796 = x48795 * x29;
          Fp x48797 = x48794 + x48796;
          Fp x48798 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x48799 = x48798 * x14;
          Fp x48800 = x48797 + x48799;
          Fp x48801 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x48802 = x48801 * x30;
          Fp x48803 = x48800 + x48802;
          Fp x48804 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x48805 = x48804 * x15;
          Fp x48806 = x48803 + x48805;
          Fp x48807 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x48808 = x48807 * x31;
          Fp x48809 = x48806 + x48808;
          Fp x48810 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x48811 = x48810 * x16;
          Fp x48812 = x48809 + x48811;
          Fp x48813 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x48814 = x48813 * x32;
          Fp x48815 = x48812 + x48814;
          Fp x48816 = x48677 - x48815;
          Fp x48817 = x48816 * x33;
          if (x48817 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          {
            Fp x48818 = Fp(x48723.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x48818;
            Fp x48819 = x48723 - x48818;
            Fp x48820 = x48819 * x26;
            Fp x48821 = Fp(x48820.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x48821;
            Fp x48822 = x48820 - x48821;
            Fp x48823 = x48822 * x26;
            Fp x48824 = Fp(x48823.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x48824;
            Fp x48825 = x48823 - x48824;
            Fp x48826 = x48825 * x26;
            Fp x48827 = Fp(x48826.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x48827;
            Fp x48828 = x48826 - x48827;
            Fp x48829 = x48828 * x26;
            Fp x48830 = Fp(x48829.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x48830;
            Fp x48831 = x48829 - x48830;
            Fp x48832 = x48831 * x26;
            Fp x48833 = Fp(x48832.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x48833;
            Fp x48834 = x48832 - x48833;
            Fp x48835 = x48834 * x26;
            Fp x48836 = Fp(x48835.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x48836;
            Fp x48837 = x48835 - x48836;
            Fp x48838 = x48837 * x26;
            Fp x48839 = Fp(x48838.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x48839;
            Fp x48840 = x48838 - x48839;
            Fp x48841 = x48840 * x26;
            Fp x48842 = Fp(x48841.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x48842;
            Fp x48843 = x48841 - x48842;
            Fp x48844 = x48843 * x26;
            Fp x48845 = Fp(x48844.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x48845;
            Fp x48846 = x48844 - x48845;
            Fp x48847 = x48846 * x26;
            Fp x48848 = Fp(x48847.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x48848;
            Fp x48849 = x48847 - x48848;
            Fp x48850 = x48849 * x26;
            Fp x48851 = Fp(x48850.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x48851;
            Fp x48852 = x48850 - x48851;
            Fp x48853 = x48852 * x26;
            Fp x48854 = Fp(x48853.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x48854;
            Fp x48855 = x48853 - x48854;
            Fp x48856 = x48855 * x26;
            Fp x48857 = Fp(x48856.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x48857;
            Fp x48858 = x48856 - x48857;
            Fp x48859 = x48858 * x26;
            Fp x48860 = Fp(x48859.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x48860;
            Fp x48861 = x48859 - x48860;
            Fp x48862 = x48861 * x26;
            Fp x48863 = Fp(x48862.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x48863;
          }
          Fp x48864 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x48865 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x48866 = x48865 * x1;
          Fp x48867 = x48864 + x48866;
          Fp x48868 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x48869 = x48868 * x3;
          Fp x48870 = x48867 + x48869;
          Fp x48871 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x48872 = x48871 * x6;
          Fp x48873 = x48870 + x48872;
          Fp x48874 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x48875 = x48874 * x11;
          Fp x48876 = x48873 + x48875;
          Fp x48877 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x48878 = x48877 * x27;
          Fp x48879 = x48876 + x48878;
          Fp x48880 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x48881 = x48880 * x12;
          Fp x48882 = x48879 + x48881;
          Fp x48883 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x48884 = x48883 * x28;
          Fp x48885 = x48882 + x48884;
          Fp x48886 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x48887 = x48886 * x13;
          Fp x48888 = x48885 + x48887;
          Fp x48889 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x48890 = x48889 * x29;
          Fp x48891 = x48888 + x48890;
          Fp x48892 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x48893 = x48892 * x14;
          Fp x48894 = x48891 + x48893;
          Fp x48895 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x48896 = x48895 * x30;
          Fp x48897 = x48894 + x48896;
          Fp x48898 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x48899 = x48898 * x15;
          Fp x48900 = x48897 + x48899;
          Fp x48901 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x48902 = x48901 * x31;
          Fp x48903 = x48900 + x48902;
          Fp x48904 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x48905 = x48904 * x16;
          Fp x48906 = x48903 + x48905;
          Fp x48907 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x48908 = x48907 * x32;
          Fp x48909 = x48906 + x48908;
          Fp x48910 = x48723 - x48909;
          Fp x48911 = x48910 * x33;
          if (x48911 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          Fp x48912 = args[2][32 * steps + ((cycle - 4) & mask)];
          Fp x48913 = args[2][33 * steps + ((cycle - 4) & mask)];
          Fp x48914 = x48913 * x1;
          Fp x48915 = x48912 + x48914;
          Fp x48916 = args[2][34 * steps + ((cycle - 4) & mask)];
          Fp x48917 = x48916 * x3;
          Fp x48918 = x48915 + x48917;
          Fp x48919 = args[2][35 * steps + ((cycle - 4) & mask)];
          Fp x48920 = x48919 * x6;
          Fp x48921 = x48918 + x48920;
          Fp x48922 = args[2][36 * steps + ((cycle - 4) & mask)];
          Fp x48923 = x48922 * x11;
          Fp x48924 = x48921 + x48923;
          Fp x48925 = args[2][37 * steps + ((cycle - 4) & mask)];
          Fp x48926 = x48925 * x27;
          Fp x48927 = x48924 + x48926;
          Fp x48928 = args[2][38 * steps + ((cycle - 4) & mask)];
          Fp x48929 = x48928 * x12;
          Fp x48930 = x48927 + x48929;
          Fp x48931 = args[2][39 * steps + ((cycle - 4) & mask)];
          Fp x48932 = x48931 * x28;
          Fp x48933 = x48930 + x48932;
          Fp x48934 = args[2][40 * steps + ((cycle - 4) & mask)];
          Fp x48935 = x48934 * x13;
          Fp x48936 = x48933 + x48935;
          Fp x48937 = args[2][41 * steps + ((cycle - 4) & mask)];
          Fp x48938 = x48937 * x29;
          Fp x48939 = x48936 + x48938;
          Fp x48940 = args[2][42 * steps + ((cycle - 4) & mask)];
          Fp x48941 = x48940 * x14;
          Fp x48942 = x48939 + x48941;
          Fp x48943 = args[2][43 * steps + ((cycle - 4) & mask)];
          Fp x48944 = x48943 * x30;
          Fp x48945 = x48942 + x48944;
          Fp x48946 = args[2][44 * steps + ((cycle - 4) & mask)];
          Fp x48947 = x48946 * x15;
          Fp x48948 = x48945 + x48947;
          Fp x48949 = args[2][45 * steps + ((cycle - 4) & mask)];
          Fp x48950 = x48949 * x31;
          Fp x48951 = x48948 + x48950;
          Fp x48952 = args[2][46 * steps + ((cycle - 4) & mask)];
          Fp x48953 = x48952 * x16;
          Fp x48954 = x48951 + x48953;
          Fp x48955 = args[2][47 * steps + ((cycle - 4) & mask)];
          Fp x48956 = x48955 * x32;
          Fp x48957 = x48954 + x48956;
          Fp x48958 = args[2][48 * steps + ((cycle - 4) & mask)];
          Fp x48959 = args[2][49 * steps + ((cycle - 4) & mask)];
          Fp x48960 = x48959 * x1;
          Fp x48961 = x48958 + x48960;
          Fp x48962 = args[2][50 * steps + ((cycle - 4) & mask)];
          Fp x48963 = x48962 * x3;
          Fp x48964 = x48961 + x48963;
          Fp x48965 = args[2][51 * steps + ((cycle - 4) & mask)];
          Fp x48966 = x48965 * x6;
          Fp x48967 = x48964 + x48966;
          Fp x48968 = args[2][52 * steps + ((cycle - 4) & mask)];
          Fp x48969 = x48968 * x11;
          Fp x48970 = x48967 + x48969;
          Fp x48971 = args[2][53 * steps + ((cycle - 4) & mask)];
          Fp x48972 = x48971 * x27;
          Fp x48973 = x48970 + x48972;
          Fp x48974 = args[2][54 * steps + ((cycle - 4) & mask)];
          Fp x48975 = x48974 * x12;
          Fp x48976 = x48973 + x48975;
          Fp x48977 = args[2][55 * steps + ((cycle - 4) & mask)];
          Fp x48978 = x48977 * x28;
          Fp x48979 = x48976 + x48978;
          Fp x48980 = args[2][56 * steps + ((cycle - 4) & mask)];
          Fp x48981 = x48980 * x13;
          Fp x48982 = x48979 + x48981;
          Fp x48983 = args[2][57 * steps + ((cycle - 4) & mask)];
          Fp x48984 = x48983 * x29;
          Fp x48985 = x48982 + x48984;
          Fp x48986 = args[2][58 * steps + ((cycle - 4) & mask)];
          Fp x48987 = x48986 * x14;
          Fp x48988 = x48985 + x48987;
          Fp x48989 = args[2][59 * steps + ((cycle - 4) & mask)];
          Fp x48990 = x48989 * x30;
          Fp x48991 = x48988 + x48990;
          Fp x48992 = args[2][60 * steps + ((cycle - 4) & mask)];
          Fp x48993 = x48992 * x15;
          Fp x48994 = x48991 + x48993;
          Fp x48995 = args[2][61 * steps + ((cycle - 4) & mask)];
          Fp x48996 = x48995 * x31;
          Fp x48997 = x48994 + x48996;
          Fp x48998 = args[2][62 * steps + ((cycle - 4) & mask)];
          Fp x48999 = x48998 * x16;
          Fp x49000 = x48997 + x48999;
          Fp x49001 = args[2][63 * steps + ((cycle - 4) & mask)];
          Fp x49002 = x49001 * x32;
          Fp x49003 = x49000 + x49002;
          {
            Fp x49004 = Fp(x48957.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x49004;
            Fp x49005 = x48957 - x49004;
            Fp x49006 = x49005 * x26;
            Fp x49007 = Fp(x49006.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x49007;
            Fp x49008 = x49006 - x49007;
            Fp x49009 = x49008 * x26;
            Fp x49010 = Fp(x49009.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x49010;
            Fp x49011 = x49009 - x49010;
            Fp x49012 = x49011 * x26;
            Fp x49013 = Fp(x49012.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x49013;
            Fp x49014 = x49012 - x49013;
            Fp x49015 = x49014 * x26;
            Fp x49016 = Fp(x49015.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x49016;
            Fp x49017 = x49015 - x49016;
            Fp x49018 = x49017 * x26;
            Fp x49019 = Fp(x49018.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x49019;
            Fp x49020 = x49018 - x49019;
            Fp x49021 = x49020 * x26;
            Fp x49022 = Fp(x49021.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x49022;
            Fp x49023 = x49021 - x49022;
            Fp x49024 = x49023 * x26;
            Fp x49025 = Fp(x49024.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x49025;
            Fp x49026 = x49024 - x49025;
            Fp x49027 = x49026 * x26;
            Fp x49028 = Fp(x49027.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x49028;
            Fp x49029 = x49027 - x49028;
            Fp x49030 = x49029 * x26;
            Fp x49031 = Fp(x49030.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x49031;
            Fp x49032 = x49030 - x49031;
            Fp x49033 = x49032 * x26;
            Fp x49034 = Fp(x49033.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x49034;
            Fp x49035 = x49033 - x49034;
            Fp x49036 = x49035 * x26;
            Fp x49037 = Fp(x49036.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x49037;
            Fp x49038 = x49036 - x49037;
            Fp x49039 = x49038 * x26;
            Fp x49040 = Fp(x49039.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x49040;
            Fp x49041 = x49039 - x49040;
            Fp x49042 = x49041 * x26;
            Fp x49043 = Fp(x49042.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x49043;
            Fp x49044 = x49042 - x49043;
            Fp x49045 = x49044 * x26;
            Fp x49046 = Fp(x49045.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x49046;
            Fp x49047 = x49045 - x49046;
            Fp x49048 = x49047 * x26;
            Fp x49049 = Fp(x49048.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x49049;
          }
          Fp x49050 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x49051 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x49052 = x49051 * x1;
          Fp x49053 = x49050 + x49052;
          Fp x49054 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x49055 = x49054 * x3;
          Fp x49056 = x49053 + x49055;
          Fp x49057 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x49058 = x49057 * x6;
          Fp x49059 = x49056 + x49058;
          Fp x49060 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x49061 = x49060 * x11;
          Fp x49062 = x49059 + x49061;
          Fp x49063 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x49064 = x49063 * x27;
          Fp x49065 = x49062 + x49064;
          Fp x49066 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x49067 = x49066 * x12;
          Fp x49068 = x49065 + x49067;
          Fp x49069 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x49070 = x49069 * x28;
          Fp x49071 = x49068 + x49070;
          Fp x49072 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x49073 = x49072 * x13;
          Fp x49074 = x49071 + x49073;
          Fp x49075 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x49076 = x49075 * x29;
          Fp x49077 = x49074 + x49076;
          Fp x49078 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x49079 = x49078 * x14;
          Fp x49080 = x49077 + x49079;
          Fp x49081 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x49082 = x49081 * x30;
          Fp x49083 = x49080 + x49082;
          Fp x49084 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x49085 = x49084 * x15;
          Fp x49086 = x49083 + x49085;
          Fp x49087 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x49088 = x49087 * x31;
          Fp x49089 = x49086 + x49088;
          Fp x49090 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x49091 = x49090 * x16;
          Fp x49092 = x49089 + x49091;
          Fp x49093 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x49094 = x49093 * x32;
          Fp x49095 = x49092 + x49094;
          Fp x49096 = x48957 - x49095;
          Fp x49097 = x49096 * x33;
          if (x49097 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          {
            Fp x49098 = Fp(x49003.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x49098;
            Fp x49099 = x49003 - x49098;
            Fp x49100 = x49099 * x26;
            Fp x49101 = Fp(x49100.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x49101;
            Fp x49102 = x49100 - x49101;
            Fp x49103 = x49102 * x26;
            Fp x49104 = Fp(x49103.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x49104;
            Fp x49105 = x49103 - x49104;
            Fp x49106 = x49105 * x26;
            Fp x49107 = Fp(x49106.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x49107;
            Fp x49108 = x49106 - x49107;
            Fp x49109 = x49108 * x26;
            Fp x49110 = Fp(x49109.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x49110;
            Fp x49111 = x49109 - x49110;
            Fp x49112 = x49111 * x26;
            Fp x49113 = Fp(x49112.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x49113;
            Fp x49114 = x49112 - x49113;
            Fp x49115 = x49114 * x26;
            Fp x49116 = Fp(x49115.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x49116;
            Fp x49117 = x49115 - x49116;
            Fp x49118 = x49117 * x26;
            Fp x49119 = Fp(x49118.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x49119;
            Fp x49120 = x49118 - x49119;
            Fp x49121 = x49120 * x26;
            Fp x49122 = Fp(x49121.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x49122;
            Fp x49123 = x49121 - x49122;
            Fp x49124 = x49123 * x26;
            Fp x49125 = Fp(x49124.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x49125;
            Fp x49126 = x49124 - x49125;
            Fp x49127 = x49126 * x26;
            Fp x49128 = Fp(x49127.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x49128;
            Fp x49129 = x49127 - x49128;
            Fp x49130 = x49129 * x26;
            Fp x49131 = Fp(x49130.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x49131;
            Fp x49132 = x49130 - x49131;
            Fp x49133 = x49132 * x26;
            Fp x49134 = Fp(x49133.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x49134;
            Fp x49135 = x49133 - x49134;
            Fp x49136 = x49135 * x26;
            Fp x49137 = Fp(x49136.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x49137;
            Fp x49138 = x49136 - x49137;
            Fp x49139 = x49138 * x26;
            Fp x49140 = Fp(x49139.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x49140;
            Fp x49141 = x49139 - x49140;
            Fp x49142 = x49141 * x26;
            Fp x49143 = Fp(x49142.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x49143;
          }
          Fp x49144 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x49145 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x49146 = x49145 * x1;
          Fp x49147 = x49144 + x49146;
          Fp x49148 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x49149 = x49148 * x3;
          Fp x49150 = x49147 + x49149;
          Fp x49151 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x49152 = x49151 * x6;
          Fp x49153 = x49150 + x49152;
          Fp x49154 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x49155 = x49154 * x11;
          Fp x49156 = x49153 + x49155;
          Fp x49157 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x49158 = x49157 * x27;
          Fp x49159 = x49156 + x49158;
          Fp x49160 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x49161 = x49160 * x12;
          Fp x49162 = x49159 + x49161;
          Fp x49163 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x49164 = x49163 * x28;
          Fp x49165 = x49162 + x49164;
          Fp x49166 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x49167 = x49166 * x13;
          Fp x49168 = x49165 + x49167;
          Fp x49169 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x49170 = x49169 * x29;
          Fp x49171 = x49168 + x49170;
          Fp x49172 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x49173 = x49172 * x14;
          Fp x49174 = x49171 + x49173;
          Fp x49175 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x49176 = x49175 * x30;
          Fp x49177 = x49174 + x49176;
          Fp x49178 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x49179 = x49178 * x15;
          Fp x49180 = x49177 + x49179;
          Fp x49181 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x49182 = x49181 * x31;
          Fp x49183 = x49180 + x49182;
          Fp x49184 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x49185 = x49184 * x16;
          Fp x49186 = x49183 + x49185;
          Fp x49187 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x49188 = x49187 * x32;
          Fp x49189 = x49186 + x49188;
          Fp x49190 = x49003 - x49189;
          Fp x49191 = x49190 * x33;
          if (x49191 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          host_args[0] = x48909;
          host_args[1] = x48815;
          host_args[2] = x49189;
          host_args[3] = x49095;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%0x04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x49192 = x71 - x48631;
        if (x49192 != 0) {
          Fp x49193 = args[0][12 * steps + ((cycle - 0) & mask)];
          Fp x49194 = args[0][13 * steps + ((cycle - 0) & mask)];
          {
            Fp x49195 = Fp(x49193.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x49195;
            Fp x49196 = x49193 - x49195;
            Fp x49197 = x49196 * x26;
            Fp x49198 = Fp(x49197.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x49198;
            Fp x49199 = x49197 - x49198;
            Fp x49200 = x49199 * x26;
            Fp x49201 = Fp(x49200.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x49201;
            Fp x49202 = x49200 - x49201;
            Fp x49203 = x49202 * x26;
            Fp x49204 = Fp(x49203.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x49204;
            Fp x49205 = x49203 - x49204;
            Fp x49206 = x49205 * x26;
            Fp x49207 = Fp(x49206.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x49207;
            Fp x49208 = x49206 - x49207;
            Fp x49209 = x49208 * x26;
            Fp x49210 = Fp(x49209.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x49210;
            Fp x49211 = x49209 - x49210;
            Fp x49212 = x49211 * x26;
            Fp x49213 = Fp(x49212.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x49213;
            Fp x49214 = x49212 - x49213;
            Fp x49215 = x49214 * x26;
            Fp x49216 = Fp(x49215.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x49216;
            Fp x49217 = x49215 - x49216;
            Fp x49218 = x49217 * x26;
            Fp x49219 = Fp(x49218.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x49219;
            Fp x49220 = x49218 - x49219;
            Fp x49221 = x49220 * x26;
            Fp x49222 = Fp(x49221.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x49222;
            Fp x49223 = x49221 - x49222;
            Fp x49224 = x49223 * x26;
            Fp x49225 = Fp(x49224.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x49225;
            Fp x49226 = x49224 - x49225;
            Fp x49227 = x49226 * x26;
            Fp x49228 = Fp(x49227.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x49228;
            Fp x49229 = x49227 - x49228;
            Fp x49230 = x49229 * x26;
            Fp x49231 = Fp(x49230.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x49231;
            Fp x49232 = x49230 - x49231;
            Fp x49233 = x49232 * x26;
            Fp x49234 = Fp(x49233.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x49234;
            Fp x49235 = x49233 - x49234;
            Fp x49236 = x49235 * x26;
            Fp x49237 = Fp(x49236.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x49237;
            Fp x49238 = x49236 - x49237;
            Fp x49239 = x49238 * x26;
            Fp x49240 = Fp(x49239.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x49240;
          }
          Fp x49241 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x49242 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x49243 = x49242 * x1;
          Fp x49244 = x49241 + x49243;
          Fp x49245 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x49246 = x49245 * x3;
          Fp x49247 = x49244 + x49246;
          Fp x49248 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x49249 = x49248 * x6;
          Fp x49250 = x49247 + x49249;
          Fp x49251 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x49252 = x49251 * x11;
          Fp x49253 = x49250 + x49252;
          Fp x49254 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x49255 = x49254 * x27;
          Fp x49256 = x49253 + x49255;
          Fp x49257 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x49258 = x49257 * x12;
          Fp x49259 = x49256 + x49258;
          Fp x49260 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x49261 = x49260 * x28;
          Fp x49262 = x49259 + x49261;
          Fp x49263 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x49264 = x49263 * x13;
          Fp x49265 = x49262 + x49264;
          Fp x49266 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x49267 = x49266 * x29;
          Fp x49268 = x49265 + x49267;
          Fp x49269 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x49270 = x49269 * x14;
          Fp x49271 = x49268 + x49270;
          Fp x49272 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x49273 = x49272 * x30;
          Fp x49274 = x49271 + x49273;
          Fp x49275 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x49276 = x49275 * x15;
          Fp x49277 = x49274 + x49276;
          Fp x49278 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x49279 = x49278 * x31;
          Fp x49280 = x49277 + x49279;
          Fp x49281 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x49282 = x49281 * x16;
          Fp x49283 = x49280 + x49282;
          Fp x49284 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x49285 = x49284 * x32;
          Fp x49286 = x49283 + x49285;
          Fp x49287 = x49193 - x49286;
          Fp x49288 = x49287 * x33;
          if (x49288 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          {
            Fp x49289 = Fp(x49194.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x49289;
            Fp x49290 = x49194 - x49289;
            Fp x49291 = x49290 * x26;
            Fp x49292 = Fp(x49291.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x49292;
            Fp x49293 = x49291 - x49292;
            Fp x49294 = x49293 * x26;
            Fp x49295 = Fp(x49294.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x49295;
            Fp x49296 = x49294 - x49295;
            Fp x49297 = x49296 * x26;
            Fp x49298 = Fp(x49297.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x49298;
            Fp x49299 = x49297 - x49298;
            Fp x49300 = x49299 * x26;
            Fp x49301 = Fp(x49300.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x49301;
            Fp x49302 = x49300 - x49301;
            Fp x49303 = x49302 * x26;
            Fp x49304 = Fp(x49303.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x49304;
            Fp x49305 = x49303 - x49304;
            Fp x49306 = x49305 * x26;
            Fp x49307 = Fp(x49306.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x49307;
            Fp x49308 = x49306 - x49307;
            Fp x49309 = x49308 * x26;
            Fp x49310 = Fp(x49309.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x49310;
            Fp x49311 = x49309 - x49310;
            Fp x49312 = x49311 * x26;
            Fp x49313 = Fp(x49312.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x49313;
            Fp x49314 = x49312 - x49313;
            Fp x49315 = x49314 * x26;
            Fp x49316 = Fp(x49315.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x49316;
            Fp x49317 = x49315 - x49316;
            Fp x49318 = x49317 * x26;
            Fp x49319 = Fp(x49318.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x49319;
            Fp x49320 = x49318 - x49319;
            Fp x49321 = x49320 * x26;
            Fp x49322 = Fp(x49321.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x49322;
            Fp x49323 = x49321 - x49322;
            Fp x49324 = x49323 * x26;
            Fp x49325 = Fp(x49324.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x49325;
            Fp x49326 = x49324 - x49325;
            Fp x49327 = x49326 * x26;
            Fp x49328 = Fp(x49327.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x49328;
            Fp x49329 = x49327 - x49328;
            Fp x49330 = x49329 * x26;
            Fp x49331 = Fp(x49330.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x49331;
            Fp x49332 = x49330 - x49331;
            Fp x49333 = x49332 * x26;
            Fp x49334 = Fp(x49333.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x49334;
          }
          Fp x49335 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x49336 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x49337 = x49336 * x1;
          Fp x49338 = x49335 + x49337;
          Fp x49339 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x49340 = x49339 * x3;
          Fp x49341 = x49338 + x49340;
          Fp x49342 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x49343 = x49342 * x6;
          Fp x49344 = x49341 + x49343;
          Fp x49345 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x49346 = x49345 * x11;
          Fp x49347 = x49344 + x49346;
          Fp x49348 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x49349 = x49348 * x27;
          Fp x49350 = x49347 + x49349;
          Fp x49351 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x49352 = x49351 * x12;
          Fp x49353 = x49350 + x49352;
          Fp x49354 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x49355 = x49354 * x28;
          Fp x49356 = x49353 + x49355;
          Fp x49357 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x49358 = x49357 * x13;
          Fp x49359 = x49356 + x49358;
          Fp x49360 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x49361 = x49360 * x29;
          Fp x49362 = x49359 + x49361;
          Fp x49363 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x49364 = x49363 * x14;
          Fp x49365 = x49362 + x49364;
          Fp x49366 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x49367 = x49366 * x30;
          Fp x49368 = x49365 + x49367;
          Fp x49369 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x49370 = x49369 * x15;
          Fp x49371 = x49368 + x49370;
          Fp x49372 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x49373 = x49372 * x31;
          Fp x49374 = x49371 + x49373;
          Fp x49375 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x49376 = x49375 * x16;
          Fp x49377 = x49374 + x49376;
          Fp x49378 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x49379 = x49378 * x32;
          Fp x49380 = x49377 + x49379;
          Fp x49381 = x49194 - x49380;
          Fp x49382 = x49381 * x33;
          if (x49382 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          Fp x49383 = args[0][14 * steps + ((cycle - 0) & mask)];
          Fp x49384 = args[0][15 * steps + ((cycle - 0) & mask)];
          {
            Fp x49385 = Fp(x49383.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x49385;
            Fp x49386 = x49383 - x49385;
            Fp x49387 = x49386 * x26;
            Fp x49388 = Fp(x49387.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x49388;
            Fp x49389 = x49387 - x49388;
            Fp x49390 = x49389 * x26;
            Fp x49391 = Fp(x49390.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x49391;
            Fp x49392 = x49390 - x49391;
            Fp x49393 = x49392 * x26;
            Fp x49394 = Fp(x49393.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x49394;
            Fp x49395 = x49393 - x49394;
            Fp x49396 = x49395 * x26;
            Fp x49397 = Fp(x49396.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x49397;
            Fp x49398 = x49396 - x49397;
            Fp x49399 = x49398 * x26;
            Fp x49400 = Fp(x49399.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x49400;
            Fp x49401 = x49399 - x49400;
            Fp x49402 = x49401 * x26;
            Fp x49403 = Fp(x49402.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x49403;
            Fp x49404 = x49402 - x49403;
            Fp x49405 = x49404 * x26;
            Fp x49406 = Fp(x49405.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x49406;
            Fp x49407 = x49405 - x49406;
            Fp x49408 = x49407 * x26;
            Fp x49409 = Fp(x49408.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x49409;
            Fp x49410 = x49408 - x49409;
            Fp x49411 = x49410 * x26;
            Fp x49412 = Fp(x49411.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x49412;
            Fp x49413 = x49411 - x49412;
            Fp x49414 = x49413 * x26;
            Fp x49415 = Fp(x49414.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x49415;
            Fp x49416 = x49414 - x49415;
            Fp x49417 = x49416 * x26;
            Fp x49418 = Fp(x49417.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x49418;
            Fp x49419 = x49417 - x49418;
            Fp x49420 = x49419 * x26;
            Fp x49421 = Fp(x49420.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x49421;
            Fp x49422 = x49420 - x49421;
            Fp x49423 = x49422 * x26;
            Fp x49424 = Fp(x49423.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x49424;
            Fp x49425 = x49423 - x49424;
            Fp x49426 = x49425 * x26;
            Fp x49427 = Fp(x49426.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x49427;
            Fp x49428 = x49426 - x49427;
            Fp x49429 = x49428 * x26;
            Fp x49430 = Fp(x49429.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x49430;
          }
          Fp x49431 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x49432 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x49433 = x49432 * x1;
          Fp x49434 = x49431 + x49433;
          Fp x49435 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x49436 = x49435 * x3;
          Fp x49437 = x49434 + x49436;
          Fp x49438 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x49439 = x49438 * x6;
          Fp x49440 = x49437 + x49439;
          Fp x49441 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x49442 = x49441 * x11;
          Fp x49443 = x49440 + x49442;
          Fp x49444 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x49445 = x49444 * x27;
          Fp x49446 = x49443 + x49445;
          Fp x49447 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x49448 = x49447 * x12;
          Fp x49449 = x49446 + x49448;
          Fp x49450 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x49451 = x49450 * x28;
          Fp x49452 = x49449 + x49451;
          Fp x49453 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x49454 = x49453 * x13;
          Fp x49455 = x49452 + x49454;
          Fp x49456 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x49457 = x49456 * x29;
          Fp x49458 = x49455 + x49457;
          Fp x49459 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x49460 = x49459 * x14;
          Fp x49461 = x49458 + x49460;
          Fp x49462 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x49463 = x49462 * x30;
          Fp x49464 = x49461 + x49463;
          Fp x49465 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x49466 = x49465 * x15;
          Fp x49467 = x49464 + x49466;
          Fp x49468 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x49469 = x49468 * x31;
          Fp x49470 = x49467 + x49469;
          Fp x49471 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x49472 = x49471 * x16;
          Fp x49473 = x49470 + x49472;
          Fp x49474 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x49475 = x49474 * x32;
          Fp x49476 = x49473 + x49475;
          Fp x49477 = x49383 - x49476;
          Fp x49478 = x49477 * x33;
          if (x49478 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          {
            Fp x49479 = Fp(x49384.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x49479;
            Fp x49480 = x49384 - x49479;
            Fp x49481 = x49480 * x26;
            Fp x49482 = Fp(x49481.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x49482;
            Fp x49483 = x49481 - x49482;
            Fp x49484 = x49483 * x26;
            Fp x49485 = Fp(x49484.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x49485;
            Fp x49486 = x49484 - x49485;
            Fp x49487 = x49486 * x26;
            Fp x49488 = Fp(x49487.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x49488;
            Fp x49489 = x49487 - x49488;
            Fp x49490 = x49489 * x26;
            Fp x49491 = Fp(x49490.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x49491;
            Fp x49492 = x49490 - x49491;
            Fp x49493 = x49492 * x26;
            Fp x49494 = Fp(x49493.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x49494;
            Fp x49495 = x49493 - x49494;
            Fp x49496 = x49495 * x26;
            Fp x49497 = Fp(x49496.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x49497;
            Fp x49498 = x49496 - x49497;
            Fp x49499 = x49498 * x26;
            Fp x49500 = Fp(x49499.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x49500;
            Fp x49501 = x49499 - x49500;
            Fp x49502 = x49501 * x26;
            Fp x49503 = Fp(x49502.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x49503;
            Fp x49504 = x49502 - x49503;
            Fp x49505 = x49504 * x26;
            Fp x49506 = Fp(x49505.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x49506;
            Fp x49507 = x49505 - x49506;
            Fp x49508 = x49507 * x26;
            Fp x49509 = Fp(x49508.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x49509;
            Fp x49510 = x49508 - x49509;
            Fp x49511 = x49510 * x26;
            Fp x49512 = Fp(x49511.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x49512;
            Fp x49513 = x49511 - x49512;
            Fp x49514 = x49513 * x26;
            Fp x49515 = Fp(x49514.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x49515;
            Fp x49516 = x49514 - x49515;
            Fp x49517 = x49516 * x26;
            Fp x49518 = Fp(x49517.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x49518;
            Fp x49519 = x49517 - x49518;
            Fp x49520 = x49519 * x26;
            Fp x49521 = Fp(x49520.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x49521;
            Fp x49522 = x49520 - x49521;
            Fp x49523 = x49522 * x26;
            Fp x49524 = Fp(x49523.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x49524;
          }
          Fp x49525 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x49526 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x49527 = x49526 * x1;
          Fp x49528 = x49525 + x49527;
          Fp x49529 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x49530 = x49529 * x3;
          Fp x49531 = x49528 + x49530;
          Fp x49532 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x49533 = x49532 * x6;
          Fp x49534 = x49531 + x49533;
          Fp x49535 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x49536 = x49535 * x11;
          Fp x49537 = x49534 + x49536;
          Fp x49538 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x49539 = x49538 * x27;
          Fp x49540 = x49537 + x49539;
          Fp x49541 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x49542 = x49541 * x12;
          Fp x49543 = x49540 + x49542;
          Fp x49544 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x49545 = x49544 * x28;
          Fp x49546 = x49543 + x49545;
          Fp x49547 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x49548 = x49547 * x13;
          Fp x49549 = x49546 + x49548;
          Fp x49550 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x49551 = x49550 * x29;
          Fp x49552 = x49549 + x49551;
          Fp x49553 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x49554 = x49553 * x14;
          Fp x49555 = x49552 + x49554;
          Fp x49556 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x49557 = x49556 * x30;
          Fp x49558 = x49555 + x49557;
          Fp x49559 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x49560 = x49559 * x15;
          Fp x49561 = x49558 + x49560;
          Fp x49562 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x49563 = x49562 * x31;
          Fp x49564 = x49561 + x49563;
          Fp x49565 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x49566 = x49565 * x16;
          Fp x49567 = x49564 + x49566;
          Fp x49568 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x49569 = x49568 * x32;
          Fp x49570 = x49567 + x49569;
          Fp x49571 = x49384 - x49570;
          Fp x49572 = x49571 * x33;
          if (x49572 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          host_args[0] = x49380;
          host_args[1] = x49286;
          host_args[2] = x49570;
          host_args[3] = x49476;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        args[2][127 * steps + cycle] = x7;
        Fp x49573 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x49574 = x49573 - x71;
        Fp x49575 = x49573 * x49574;
        if (x49575 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:106");
        Fp x49576 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x49577 = x49576 - x71;
        Fp x49578 = x49576 * x49577;
        if (x49578 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:107");
        Fp x49579 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x49580 = x49579 - x71;
        Fp x49581 = x49579 * x49580;
        if (x49581 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:108");
        Fp x49582 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x49583 = x49582 - x71;
        Fp x49584 = x49582 * x49583;
        if (x49584 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:109");
      }
      if (x47598 != 0) {
        Fp x49585 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x49585;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x49585;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x49586 = host_outs[0];
          Fp x49587 = host_outs[1];
          args[2][129 * steps + cycle] = x49586;
          args[2][130 * steps + cycle] = x49587;
        }
        Fp x49588 = args[2][97 * steps + ((cycle - 1) & mask)];
        args[2][97 * steps + cycle] = x49588;
        Fp x49589 = args[2][98 * steps + ((cycle - 1) & mask)];
        args[2][98 * steps + cycle] = x49589;
        Fp x49590 = args[2][96 * steps + ((cycle - 1) & mask)];
        args[2][96 * steps + cycle] = x49590;
        Fp x49591 = args[2][123 * steps + ((cycle - 1) & mask)];
        args[2][123 * steps + cycle] = x49591;
        Fp x49592 = args[2][124 * steps + ((cycle - 1) & mask)];
        args[2][124 * steps + cycle] = x49592;
        Fp x49593 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][126 * steps + cycle] = x49593;
        Fp x49594 = args[2][97 * steps + ((cycle - 0) & mask)];
        if (x49594 != 0) {
          host(ctx, "log", "  INIT2, cont", host_args.data(), 0, host_outs.data(), 0);
          Fp x49595 = args[2][125 * steps + ((cycle - 1) & mask)];
          args[2][125 * steps + cycle] = x49595;
          args[2][122 * steps + cycle] = x49585;
        }
        Fp x49596 = x71 - x49594;
        if (x49596 != 0) {
          Fp x49597 = args[2][128 * steps + ((cycle - 0) & mask)];
          Fp x49598 = x49597 * x3;
          Fp x49599 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x49600 = args[2][129 * steps + ((cycle - 0) & mask)];
          host_args[0] = x49598;
          host_args[1] = x49599;
          host_args[2] = x49600;
          host(ctx, "log", "  INIT2, load, addr = %x, val = 0x%04x%04x", host_args.data(), 3, host_outs.data(), 0);
          Fp x49601 = x49599 * x17;
          Fp x49602 = x49601 + x49600;
          Fp x49603 = x49602 * x10;
          args[2][125 * steps + cycle] = x49603;
          Fp x49604 = x49585 + x71;
          args[2][122 * steps + cycle] = x49604;
        }
        Fp x49605 = args[2][98 * steps + ((cycle - 0) & mask)];
        if (x49605 != 0) {
          Fp x49606 = args[2][0 * steps + ((cycle - 4) & mask)];
          Fp x49607 = args[2][1 * steps + ((cycle - 4) & mask)];
          Fp x49608 = x49607 * x1;
          Fp x49609 = x49606 + x49608;
          Fp x49610 = args[2][2 * steps + ((cycle - 4) & mask)];
          Fp x49611 = x49610 * x3;
          Fp x49612 = x49609 + x49611;
          Fp x49613 = args[2][3 * steps + ((cycle - 4) & mask)];
          Fp x49614 = x49613 * x6;
          Fp x49615 = x49612 + x49614;
          Fp x49616 = args[2][4 * steps + ((cycle - 4) & mask)];
          Fp x49617 = x49616 * x11;
          Fp x49618 = x49615 + x49617;
          Fp x49619 = args[2][5 * steps + ((cycle - 4) & mask)];
          Fp x49620 = x49619 * x27;
          Fp x49621 = x49618 + x49620;
          Fp x49622 = args[2][6 * steps + ((cycle - 4) & mask)];
          Fp x49623 = x49622 * x12;
          Fp x49624 = x49621 + x49623;
          Fp x49625 = args[2][7 * steps + ((cycle - 4) & mask)];
          Fp x49626 = x49625 * x28;
          Fp x49627 = x49624 + x49626;
          Fp x49628 = args[2][8 * steps + ((cycle - 4) & mask)];
          Fp x49629 = x49628 * x13;
          Fp x49630 = x49627 + x49629;
          Fp x49631 = args[2][9 * steps + ((cycle - 4) & mask)];
          Fp x49632 = x49631 * x29;
          Fp x49633 = x49630 + x49632;
          Fp x49634 = args[2][10 * steps + ((cycle - 4) & mask)];
          Fp x49635 = x49634 * x14;
          Fp x49636 = x49633 + x49635;
          Fp x49637 = args[2][11 * steps + ((cycle - 4) & mask)];
          Fp x49638 = x49637 * x30;
          Fp x49639 = x49636 + x49638;
          Fp x49640 = args[2][12 * steps + ((cycle - 4) & mask)];
          Fp x49641 = x49640 * x15;
          Fp x49642 = x49639 + x49641;
          Fp x49643 = args[2][13 * steps + ((cycle - 4) & mask)];
          Fp x49644 = x49643 * x31;
          Fp x49645 = x49642 + x49644;
          Fp x49646 = args[2][14 * steps + ((cycle - 4) & mask)];
          Fp x49647 = x49646 * x16;
          Fp x49648 = x49645 + x49647;
          Fp x49649 = args[2][15 * steps + ((cycle - 4) & mask)];
          Fp x49650 = x49649 * x32;
          Fp x49651 = x49648 + x49650;
          Fp x49652 = args[2][16 * steps + ((cycle - 4) & mask)];
          Fp x49653 = args[2][17 * steps + ((cycle - 4) & mask)];
          Fp x49654 = x49653 * x1;
          Fp x49655 = x49652 + x49654;
          Fp x49656 = args[2][18 * steps + ((cycle - 4) & mask)];
          Fp x49657 = x49656 * x3;
          Fp x49658 = x49655 + x49657;
          Fp x49659 = args[2][19 * steps + ((cycle - 4) & mask)];
          Fp x49660 = x49659 * x6;
          Fp x49661 = x49658 + x49660;
          Fp x49662 = args[2][20 * steps + ((cycle - 4) & mask)];
          Fp x49663 = x49662 * x11;
          Fp x49664 = x49661 + x49663;
          Fp x49665 = args[2][21 * steps + ((cycle - 4) & mask)];
          Fp x49666 = x49665 * x27;
          Fp x49667 = x49664 + x49666;
          Fp x49668 = args[2][22 * steps + ((cycle - 4) & mask)];
          Fp x49669 = x49668 * x12;
          Fp x49670 = x49667 + x49669;
          Fp x49671 = args[2][23 * steps + ((cycle - 4) & mask)];
          Fp x49672 = x49671 * x28;
          Fp x49673 = x49670 + x49672;
          Fp x49674 = args[2][24 * steps + ((cycle - 4) & mask)];
          Fp x49675 = x49674 * x13;
          Fp x49676 = x49673 + x49675;
          Fp x49677 = args[2][25 * steps + ((cycle - 4) & mask)];
          Fp x49678 = x49677 * x29;
          Fp x49679 = x49676 + x49678;
          Fp x49680 = args[2][26 * steps + ((cycle - 4) & mask)];
          Fp x49681 = x49680 * x14;
          Fp x49682 = x49679 + x49681;
          Fp x49683 = args[2][27 * steps + ((cycle - 4) & mask)];
          Fp x49684 = x49683 * x30;
          Fp x49685 = x49682 + x49684;
          Fp x49686 = args[2][28 * steps + ((cycle - 4) & mask)];
          Fp x49687 = x49686 * x15;
          Fp x49688 = x49685 + x49687;
          Fp x49689 = args[2][29 * steps + ((cycle - 4) & mask)];
          Fp x49690 = x49689 * x31;
          Fp x49691 = x49688 + x49690;
          Fp x49692 = args[2][30 * steps + ((cycle - 4) & mask)];
          Fp x49693 = x49692 * x16;
          Fp x49694 = x49691 + x49693;
          Fp x49695 = args[2][31 * steps + ((cycle - 4) & mask)];
          Fp x49696 = x49695 * x32;
          Fp x49697 = x49694 + x49696;
          {
            Fp x49698 = Fp(x49651.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x49698;
            Fp x49699 = x49651 - x49698;
            Fp x49700 = x49699 * x26;
            Fp x49701 = Fp(x49700.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x49701;
            Fp x49702 = x49700 - x49701;
            Fp x49703 = x49702 * x26;
            Fp x49704 = Fp(x49703.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x49704;
            Fp x49705 = x49703 - x49704;
            Fp x49706 = x49705 * x26;
            Fp x49707 = Fp(x49706.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x49707;
            Fp x49708 = x49706 - x49707;
            Fp x49709 = x49708 * x26;
            Fp x49710 = Fp(x49709.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x49710;
            Fp x49711 = x49709 - x49710;
            Fp x49712 = x49711 * x26;
            Fp x49713 = Fp(x49712.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x49713;
            Fp x49714 = x49712 - x49713;
            Fp x49715 = x49714 * x26;
            Fp x49716 = Fp(x49715.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x49716;
            Fp x49717 = x49715 - x49716;
            Fp x49718 = x49717 * x26;
            Fp x49719 = Fp(x49718.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x49719;
            Fp x49720 = x49718 - x49719;
            Fp x49721 = x49720 * x26;
            Fp x49722 = Fp(x49721.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x49722;
            Fp x49723 = x49721 - x49722;
            Fp x49724 = x49723 * x26;
            Fp x49725 = Fp(x49724.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x49725;
            Fp x49726 = x49724 - x49725;
            Fp x49727 = x49726 * x26;
            Fp x49728 = Fp(x49727.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x49728;
            Fp x49729 = x49727 - x49728;
            Fp x49730 = x49729 * x26;
            Fp x49731 = Fp(x49730.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x49731;
            Fp x49732 = x49730 - x49731;
            Fp x49733 = x49732 * x26;
            Fp x49734 = Fp(x49733.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x49734;
            Fp x49735 = x49733 - x49734;
            Fp x49736 = x49735 * x26;
            Fp x49737 = Fp(x49736.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x49737;
            Fp x49738 = x49736 - x49737;
            Fp x49739 = x49738 * x26;
            Fp x49740 = Fp(x49739.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x49740;
            Fp x49741 = x49739 - x49740;
            Fp x49742 = x49741 * x26;
            Fp x49743 = Fp(x49742.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x49743;
          }
          Fp x49744 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x49745 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x49746 = x49745 * x1;
          Fp x49747 = x49744 + x49746;
          Fp x49748 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x49749 = x49748 * x3;
          Fp x49750 = x49747 + x49749;
          Fp x49751 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x49752 = x49751 * x6;
          Fp x49753 = x49750 + x49752;
          Fp x49754 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x49755 = x49754 * x11;
          Fp x49756 = x49753 + x49755;
          Fp x49757 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x49758 = x49757 * x27;
          Fp x49759 = x49756 + x49758;
          Fp x49760 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x49761 = x49760 * x12;
          Fp x49762 = x49759 + x49761;
          Fp x49763 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x49764 = x49763 * x28;
          Fp x49765 = x49762 + x49764;
          Fp x49766 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x49767 = x49766 * x13;
          Fp x49768 = x49765 + x49767;
          Fp x49769 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x49770 = x49769 * x29;
          Fp x49771 = x49768 + x49770;
          Fp x49772 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x49773 = x49772 * x14;
          Fp x49774 = x49771 + x49773;
          Fp x49775 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x49776 = x49775 * x30;
          Fp x49777 = x49774 + x49776;
          Fp x49778 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x49779 = x49778 * x15;
          Fp x49780 = x49777 + x49779;
          Fp x49781 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x49782 = x49781 * x31;
          Fp x49783 = x49780 + x49782;
          Fp x49784 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x49785 = x49784 * x16;
          Fp x49786 = x49783 + x49785;
          Fp x49787 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x49788 = x49787 * x32;
          Fp x49789 = x49786 + x49788;
          Fp x49790 = x49651 - x49789;
          Fp x49791 = x49790 * x33;
          if (x49791 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          {
            Fp x49792 = Fp(x49697.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x49792;
            Fp x49793 = x49697 - x49792;
            Fp x49794 = x49793 * x26;
            Fp x49795 = Fp(x49794.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x49795;
            Fp x49796 = x49794 - x49795;
            Fp x49797 = x49796 * x26;
            Fp x49798 = Fp(x49797.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x49798;
            Fp x49799 = x49797 - x49798;
            Fp x49800 = x49799 * x26;
            Fp x49801 = Fp(x49800.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x49801;
            Fp x49802 = x49800 - x49801;
            Fp x49803 = x49802 * x26;
            Fp x49804 = Fp(x49803.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x49804;
            Fp x49805 = x49803 - x49804;
            Fp x49806 = x49805 * x26;
            Fp x49807 = Fp(x49806.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x49807;
            Fp x49808 = x49806 - x49807;
            Fp x49809 = x49808 * x26;
            Fp x49810 = Fp(x49809.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x49810;
            Fp x49811 = x49809 - x49810;
            Fp x49812 = x49811 * x26;
            Fp x49813 = Fp(x49812.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x49813;
            Fp x49814 = x49812 - x49813;
            Fp x49815 = x49814 * x26;
            Fp x49816 = Fp(x49815.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x49816;
            Fp x49817 = x49815 - x49816;
            Fp x49818 = x49817 * x26;
            Fp x49819 = Fp(x49818.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x49819;
            Fp x49820 = x49818 - x49819;
            Fp x49821 = x49820 * x26;
            Fp x49822 = Fp(x49821.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x49822;
            Fp x49823 = x49821 - x49822;
            Fp x49824 = x49823 * x26;
            Fp x49825 = Fp(x49824.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x49825;
            Fp x49826 = x49824 - x49825;
            Fp x49827 = x49826 * x26;
            Fp x49828 = Fp(x49827.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x49828;
            Fp x49829 = x49827 - x49828;
            Fp x49830 = x49829 * x26;
            Fp x49831 = Fp(x49830.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x49831;
            Fp x49832 = x49830 - x49831;
            Fp x49833 = x49832 * x26;
            Fp x49834 = Fp(x49833.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x49834;
            Fp x49835 = x49833 - x49834;
            Fp x49836 = x49835 * x26;
            Fp x49837 = Fp(x49836.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x49837;
          }
          Fp x49838 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x49839 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x49840 = x49839 * x1;
          Fp x49841 = x49838 + x49840;
          Fp x49842 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x49843 = x49842 * x3;
          Fp x49844 = x49841 + x49843;
          Fp x49845 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x49846 = x49845 * x6;
          Fp x49847 = x49844 + x49846;
          Fp x49848 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x49849 = x49848 * x11;
          Fp x49850 = x49847 + x49849;
          Fp x49851 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x49852 = x49851 * x27;
          Fp x49853 = x49850 + x49852;
          Fp x49854 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x49855 = x49854 * x12;
          Fp x49856 = x49853 + x49855;
          Fp x49857 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x49858 = x49857 * x28;
          Fp x49859 = x49856 + x49858;
          Fp x49860 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x49861 = x49860 * x13;
          Fp x49862 = x49859 + x49861;
          Fp x49863 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x49864 = x49863 * x29;
          Fp x49865 = x49862 + x49864;
          Fp x49866 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x49867 = x49866 * x14;
          Fp x49868 = x49865 + x49867;
          Fp x49869 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x49870 = x49869 * x30;
          Fp x49871 = x49868 + x49870;
          Fp x49872 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x49873 = x49872 * x15;
          Fp x49874 = x49871 + x49873;
          Fp x49875 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x49876 = x49875 * x31;
          Fp x49877 = x49874 + x49876;
          Fp x49878 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x49879 = x49878 * x16;
          Fp x49880 = x49877 + x49879;
          Fp x49881 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x49882 = x49881 * x32;
          Fp x49883 = x49880 + x49882;
          Fp x49884 = x49697 - x49883;
          Fp x49885 = x49884 * x33;
          if (x49885 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          Fp x49886 = args[2][32 * steps + ((cycle - 4) & mask)];
          Fp x49887 = args[2][33 * steps + ((cycle - 4) & mask)];
          Fp x49888 = x49887 * x1;
          Fp x49889 = x49886 + x49888;
          Fp x49890 = args[2][34 * steps + ((cycle - 4) & mask)];
          Fp x49891 = x49890 * x3;
          Fp x49892 = x49889 + x49891;
          Fp x49893 = args[2][35 * steps + ((cycle - 4) & mask)];
          Fp x49894 = x49893 * x6;
          Fp x49895 = x49892 + x49894;
          Fp x49896 = args[2][36 * steps + ((cycle - 4) & mask)];
          Fp x49897 = x49896 * x11;
          Fp x49898 = x49895 + x49897;
          Fp x49899 = args[2][37 * steps + ((cycle - 4) & mask)];
          Fp x49900 = x49899 * x27;
          Fp x49901 = x49898 + x49900;
          Fp x49902 = args[2][38 * steps + ((cycle - 4) & mask)];
          Fp x49903 = x49902 * x12;
          Fp x49904 = x49901 + x49903;
          Fp x49905 = args[2][39 * steps + ((cycle - 4) & mask)];
          Fp x49906 = x49905 * x28;
          Fp x49907 = x49904 + x49906;
          Fp x49908 = args[2][40 * steps + ((cycle - 4) & mask)];
          Fp x49909 = x49908 * x13;
          Fp x49910 = x49907 + x49909;
          Fp x49911 = args[2][41 * steps + ((cycle - 4) & mask)];
          Fp x49912 = x49911 * x29;
          Fp x49913 = x49910 + x49912;
          Fp x49914 = args[2][42 * steps + ((cycle - 4) & mask)];
          Fp x49915 = x49914 * x14;
          Fp x49916 = x49913 + x49915;
          Fp x49917 = args[2][43 * steps + ((cycle - 4) & mask)];
          Fp x49918 = x49917 * x30;
          Fp x49919 = x49916 + x49918;
          Fp x49920 = args[2][44 * steps + ((cycle - 4) & mask)];
          Fp x49921 = x49920 * x15;
          Fp x49922 = x49919 + x49921;
          Fp x49923 = args[2][45 * steps + ((cycle - 4) & mask)];
          Fp x49924 = x49923 * x31;
          Fp x49925 = x49922 + x49924;
          Fp x49926 = args[2][46 * steps + ((cycle - 4) & mask)];
          Fp x49927 = x49926 * x16;
          Fp x49928 = x49925 + x49927;
          Fp x49929 = args[2][47 * steps + ((cycle - 4) & mask)];
          Fp x49930 = x49929 * x32;
          Fp x49931 = x49928 + x49930;
          Fp x49932 = args[2][48 * steps + ((cycle - 4) & mask)];
          Fp x49933 = args[2][49 * steps + ((cycle - 4) & mask)];
          Fp x49934 = x49933 * x1;
          Fp x49935 = x49932 + x49934;
          Fp x49936 = args[2][50 * steps + ((cycle - 4) & mask)];
          Fp x49937 = x49936 * x3;
          Fp x49938 = x49935 + x49937;
          Fp x49939 = args[2][51 * steps + ((cycle - 4) & mask)];
          Fp x49940 = x49939 * x6;
          Fp x49941 = x49938 + x49940;
          Fp x49942 = args[2][52 * steps + ((cycle - 4) & mask)];
          Fp x49943 = x49942 * x11;
          Fp x49944 = x49941 + x49943;
          Fp x49945 = args[2][53 * steps + ((cycle - 4) & mask)];
          Fp x49946 = x49945 * x27;
          Fp x49947 = x49944 + x49946;
          Fp x49948 = args[2][54 * steps + ((cycle - 4) & mask)];
          Fp x49949 = x49948 * x12;
          Fp x49950 = x49947 + x49949;
          Fp x49951 = args[2][55 * steps + ((cycle - 4) & mask)];
          Fp x49952 = x49951 * x28;
          Fp x49953 = x49950 + x49952;
          Fp x49954 = args[2][56 * steps + ((cycle - 4) & mask)];
          Fp x49955 = x49954 * x13;
          Fp x49956 = x49953 + x49955;
          Fp x49957 = args[2][57 * steps + ((cycle - 4) & mask)];
          Fp x49958 = x49957 * x29;
          Fp x49959 = x49956 + x49958;
          Fp x49960 = args[2][58 * steps + ((cycle - 4) & mask)];
          Fp x49961 = x49960 * x14;
          Fp x49962 = x49959 + x49961;
          Fp x49963 = args[2][59 * steps + ((cycle - 4) & mask)];
          Fp x49964 = x49963 * x30;
          Fp x49965 = x49962 + x49964;
          Fp x49966 = args[2][60 * steps + ((cycle - 4) & mask)];
          Fp x49967 = x49966 * x15;
          Fp x49968 = x49965 + x49967;
          Fp x49969 = args[2][61 * steps + ((cycle - 4) & mask)];
          Fp x49970 = x49969 * x31;
          Fp x49971 = x49968 + x49970;
          Fp x49972 = args[2][62 * steps + ((cycle - 4) & mask)];
          Fp x49973 = x49972 * x16;
          Fp x49974 = x49971 + x49973;
          Fp x49975 = args[2][63 * steps + ((cycle - 4) & mask)];
          Fp x49976 = x49975 * x32;
          Fp x49977 = x49974 + x49976;
          {
            Fp x49978 = Fp(x49931.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x49978;
            Fp x49979 = x49931 - x49978;
            Fp x49980 = x49979 * x26;
            Fp x49981 = Fp(x49980.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x49981;
            Fp x49982 = x49980 - x49981;
            Fp x49983 = x49982 * x26;
            Fp x49984 = Fp(x49983.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x49984;
            Fp x49985 = x49983 - x49984;
            Fp x49986 = x49985 * x26;
            Fp x49987 = Fp(x49986.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x49987;
            Fp x49988 = x49986 - x49987;
            Fp x49989 = x49988 * x26;
            Fp x49990 = Fp(x49989.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x49990;
            Fp x49991 = x49989 - x49990;
            Fp x49992 = x49991 * x26;
            Fp x49993 = Fp(x49992.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x49993;
            Fp x49994 = x49992 - x49993;
            Fp x49995 = x49994 * x26;
            Fp x49996 = Fp(x49995.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x49996;
            Fp x49997 = x49995 - x49996;
            Fp x49998 = x49997 * x26;
            Fp x49999 = Fp(x49998.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x49999;
            Fp x50000 = x49998 - x49999;
            Fp x50001 = x50000 * x26;
            Fp x50002 = Fp(x50001.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x50002;
            Fp x50003 = x50001 - x50002;
            Fp x50004 = x50003 * x26;
            Fp x50005 = Fp(x50004.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x50005;
            Fp x50006 = x50004 - x50005;
            Fp x50007 = x50006 * x26;
            Fp x50008 = Fp(x50007.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x50008;
            Fp x50009 = x50007 - x50008;
            Fp x50010 = x50009 * x26;
            Fp x50011 = Fp(x50010.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x50011;
            Fp x50012 = x50010 - x50011;
            Fp x50013 = x50012 * x26;
            Fp x50014 = Fp(x50013.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x50014;
            Fp x50015 = x50013 - x50014;
            Fp x50016 = x50015 * x26;
            Fp x50017 = Fp(x50016.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x50017;
            Fp x50018 = x50016 - x50017;
            Fp x50019 = x50018 * x26;
            Fp x50020 = Fp(x50019.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x50020;
            Fp x50021 = x50019 - x50020;
            Fp x50022 = x50021 * x26;
            Fp x50023 = Fp(x50022.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x50023;
          }
          Fp x50024 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x50025 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x50026 = x50025 * x1;
          Fp x50027 = x50024 + x50026;
          Fp x50028 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x50029 = x50028 * x3;
          Fp x50030 = x50027 + x50029;
          Fp x50031 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x50032 = x50031 * x6;
          Fp x50033 = x50030 + x50032;
          Fp x50034 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x50035 = x50034 * x11;
          Fp x50036 = x50033 + x50035;
          Fp x50037 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x50038 = x50037 * x27;
          Fp x50039 = x50036 + x50038;
          Fp x50040 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x50041 = x50040 * x12;
          Fp x50042 = x50039 + x50041;
          Fp x50043 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x50044 = x50043 * x28;
          Fp x50045 = x50042 + x50044;
          Fp x50046 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x50047 = x50046 * x13;
          Fp x50048 = x50045 + x50047;
          Fp x50049 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x50050 = x50049 * x29;
          Fp x50051 = x50048 + x50050;
          Fp x50052 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x50053 = x50052 * x14;
          Fp x50054 = x50051 + x50053;
          Fp x50055 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x50056 = x50055 * x30;
          Fp x50057 = x50054 + x50056;
          Fp x50058 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x50059 = x50058 * x15;
          Fp x50060 = x50057 + x50059;
          Fp x50061 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x50062 = x50061 * x31;
          Fp x50063 = x50060 + x50062;
          Fp x50064 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x50065 = x50064 * x16;
          Fp x50066 = x50063 + x50065;
          Fp x50067 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x50068 = x50067 * x32;
          Fp x50069 = x50066 + x50068;
          Fp x50070 = x49931 - x50069;
          Fp x50071 = x50070 * x33;
          if (x50071 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          {
            Fp x50072 = Fp(x49977.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x50072;
            Fp x50073 = x49977 - x50072;
            Fp x50074 = x50073 * x26;
            Fp x50075 = Fp(x50074.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x50075;
            Fp x50076 = x50074 - x50075;
            Fp x50077 = x50076 * x26;
            Fp x50078 = Fp(x50077.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x50078;
            Fp x50079 = x50077 - x50078;
            Fp x50080 = x50079 * x26;
            Fp x50081 = Fp(x50080.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x50081;
            Fp x50082 = x50080 - x50081;
            Fp x50083 = x50082 * x26;
            Fp x50084 = Fp(x50083.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x50084;
            Fp x50085 = x50083 - x50084;
            Fp x50086 = x50085 * x26;
            Fp x50087 = Fp(x50086.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x50087;
            Fp x50088 = x50086 - x50087;
            Fp x50089 = x50088 * x26;
            Fp x50090 = Fp(x50089.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x50090;
            Fp x50091 = x50089 - x50090;
            Fp x50092 = x50091 * x26;
            Fp x50093 = Fp(x50092.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x50093;
            Fp x50094 = x50092 - x50093;
            Fp x50095 = x50094 * x26;
            Fp x50096 = Fp(x50095.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x50096;
            Fp x50097 = x50095 - x50096;
            Fp x50098 = x50097 * x26;
            Fp x50099 = Fp(x50098.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x50099;
            Fp x50100 = x50098 - x50099;
            Fp x50101 = x50100 * x26;
            Fp x50102 = Fp(x50101.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x50102;
            Fp x50103 = x50101 - x50102;
            Fp x50104 = x50103 * x26;
            Fp x50105 = Fp(x50104.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x50105;
            Fp x50106 = x50104 - x50105;
            Fp x50107 = x50106 * x26;
            Fp x50108 = Fp(x50107.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x50108;
            Fp x50109 = x50107 - x50108;
            Fp x50110 = x50109 * x26;
            Fp x50111 = Fp(x50110.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x50111;
            Fp x50112 = x50110 - x50111;
            Fp x50113 = x50112 * x26;
            Fp x50114 = Fp(x50113.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x50114;
            Fp x50115 = x50113 - x50114;
            Fp x50116 = x50115 * x26;
            Fp x50117 = Fp(x50116.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x50117;
          }
          Fp x50118 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x50119 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x50120 = x50119 * x1;
          Fp x50121 = x50118 + x50120;
          Fp x50122 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x50123 = x50122 * x3;
          Fp x50124 = x50121 + x50123;
          Fp x50125 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x50126 = x50125 * x6;
          Fp x50127 = x50124 + x50126;
          Fp x50128 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x50129 = x50128 * x11;
          Fp x50130 = x50127 + x50129;
          Fp x50131 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x50132 = x50131 * x27;
          Fp x50133 = x50130 + x50132;
          Fp x50134 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x50135 = x50134 * x12;
          Fp x50136 = x50133 + x50135;
          Fp x50137 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x50138 = x50137 * x28;
          Fp x50139 = x50136 + x50138;
          Fp x50140 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x50141 = x50140 * x13;
          Fp x50142 = x50139 + x50141;
          Fp x50143 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x50144 = x50143 * x29;
          Fp x50145 = x50142 + x50144;
          Fp x50146 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x50147 = x50146 * x14;
          Fp x50148 = x50145 + x50147;
          Fp x50149 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x50150 = x50149 * x30;
          Fp x50151 = x50148 + x50150;
          Fp x50152 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x50153 = x50152 * x15;
          Fp x50154 = x50151 + x50153;
          Fp x50155 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x50156 = x50155 * x31;
          Fp x50157 = x50154 + x50156;
          Fp x50158 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x50159 = x50158 * x16;
          Fp x50160 = x50157 + x50159;
          Fp x50161 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x50162 = x50161 * x32;
          Fp x50163 = x50160 + x50162;
          Fp x50164 = x49977 - x50163;
          Fp x50165 = x50164 * x33;
          if (x50165 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          host_args[0] = x49883;
          host_args[1] = x49789;
          host_args[2] = x50163;
          host_args[3] = x50069;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%0x04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x50166 = x71 - x49605;
        if (x50166 != 0) {
          Fp x50167 = args[0][12 * steps + ((cycle - 0) & mask)];
          Fp x50168 = args[0][13 * steps + ((cycle - 0) & mask)];
          {
            Fp x50169 = Fp(x50167.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x50169;
            Fp x50170 = x50167 - x50169;
            Fp x50171 = x50170 * x26;
            Fp x50172 = Fp(x50171.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x50172;
            Fp x50173 = x50171 - x50172;
            Fp x50174 = x50173 * x26;
            Fp x50175 = Fp(x50174.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x50175;
            Fp x50176 = x50174 - x50175;
            Fp x50177 = x50176 * x26;
            Fp x50178 = Fp(x50177.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x50178;
            Fp x50179 = x50177 - x50178;
            Fp x50180 = x50179 * x26;
            Fp x50181 = Fp(x50180.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x50181;
            Fp x50182 = x50180 - x50181;
            Fp x50183 = x50182 * x26;
            Fp x50184 = Fp(x50183.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x50184;
            Fp x50185 = x50183 - x50184;
            Fp x50186 = x50185 * x26;
            Fp x50187 = Fp(x50186.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x50187;
            Fp x50188 = x50186 - x50187;
            Fp x50189 = x50188 * x26;
            Fp x50190 = Fp(x50189.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x50190;
            Fp x50191 = x50189 - x50190;
            Fp x50192 = x50191 * x26;
            Fp x50193 = Fp(x50192.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x50193;
            Fp x50194 = x50192 - x50193;
            Fp x50195 = x50194 * x26;
            Fp x50196 = Fp(x50195.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x50196;
            Fp x50197 = x50195 - x50196;
            Fp x50198 = x50197 * x26;
            Fp x50199 = Fp(x50198.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x50199;
            Fp x50200 = x50198 - x50199;
            Fp x50201 = x50200 * x26;
            Fp x50202 = Fp(x50201.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x50202;
            Fp x50203 = x50201 - x50202;
            Fp x50204 = x50203 * x26;
            Fp x50205 = Fp(x50204.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x50205;
            Fp x50206 = x50204 - x50205;
            Fp x50207 = x50206 * x26;
            Fp x50208 = Fp(x50207.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x50208;
            Fp x50209 = x50207 - x50208;
            Fp x50210 = x50209 * x26;
            Fp x50211 = Fp(x50210.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x50211;
            Fp x50212 = x50210 - x50211;
            Fp x50213 = x50212 * x26;
            Fp x50214 = Fp(x50213.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x50214;
          }
          Fp x50215 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x50216 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x50217 = x50216 * x1;
          Fp x50218 = x50215 + x50217;
          Fp x50219 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x50220 = x50219 * x3;
          Fp x50221 = x50218 + x50220;
          Fp x50222 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x50223 = x50222 * x6;
          Fp x50224 = x50221 + x50223;
          Fp x50225 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x50226 = x50225 * x11;
          Fp x50227 = x50224 + x50226;
          Fp x50228 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x50229 = x50228 * x27;
          Fp x50230 = x50227 + x50229;
          Fp x50231 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x50232 = x50231 * x12;
          Fp x50233 = x50230 + x50232;
          Fp x50234 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x50235 = x50234 * x28;
          Fp x50236 = x50233 + x50235;
          Fp x50237 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x50238 = x50237 * x13;
          Fp x50239 = x50236 + x50238;
          Fp x50240 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x50241 = x50240 * x29;
          Fp x50242 = x50239 + x50241;
          Fp x50243 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x50244 = x50243 * x14;
          Fp x50245 = x50242 + x50244;
          Fp x50246 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x50247 = x50246 * x30;
          Fp x50248 = x50245 + x50247;
          Fp x50249 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x50250 = x50249 * x15;
          Fp x50251 = x50248 + x50250;
          Fp x50252 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x50253 = x50252 * x31;
          Fp x50254 = x50251 + x50253;
          Fp x50255 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x50256 = x50255 * x16;
          Fp x50257 = x50254 + x50256;
          Fp x50258 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x50259 = x50258 * x32;
          Fp x50260 = x50257 + x50259;
          Fp x50261 = x50167 - x50260;
          Fp x50262 = x50261 * x33;
          if (x50262 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          {
            Fp x50263 = Fp(x50168.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x50263;
            Fp x50264 = x50168 - x50263;
            Fp x50265 = x50264 * x26;
            Fp x50266 = Fp(x50265.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x50266;
            Fp x50267 = x50265 - x50266;
            Fp x50268 = x50267 * x26;
            Fp x50269 = Fp(x50268.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x50269;
            Fp x50270 = x50268 - x50269;
            Fp x50271 = x50270 * x26;
            Fp x50272 = Fp(x50271.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x50272;
            Fp x50273 = x50271 - x50272;
            Fp x50274 = x50273 * x26;
            Fp x50275 = Fp(x50274.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x50275;
            Fp x50276 = x50274 - x50275;
            Fp x50277 = x50276 * x26;
            Fp x50278 = Fp(x50277.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x50278;
            Fp x50279 = x50277 - x50278;
            Fp x50280 = x50279 * x26;
            Fp x50281 = Fp(x50280.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x50281;
            Fp x50282 = x50280 - x50281;
            Fp x50283 = x50282 * x26;
            Fp x50284 = Fp(x50283.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x50284;
            Fp x50285 = x50283 - x50284;
            Fp x50286 = x50285 * x26;
            Fp x50287 = Fp(x50286.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x50287;
            Fp x50288 = x50286 - x50287;
            Fp x50289 = x50288 * x26;
            Fp x50290 = Fp(x50289.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x50290;
            Fp x50291 = x50289 - x50290;
            Fp x50292 = x50291 * x26;
            Fp x50293 = Fp(x50292.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x50293;
            Fp x50294 = x50292 - x50293;
            Fp x50295 = x50294 * x26;
            Fp x50296 = Fp(x50295.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x50296;
            Fp x50297 = x50295 - x50296;
            Fp x50298 = x50297 * x26;
            Fp x50299 = Fp(x50298.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x50299;
            Fp x50300 = x50298 - x50299;
            Fp x50301 = x50300 * x26;
            Fp x50302 = Fp(x50301.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x50302;
            Fp x50303 = x50301 - x50302;
            Fp x50304 = x50303 * x26;
            Fp x50305 = Fp(x50304.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x50305;
            Fp x50306 = x50304 - x50305;
            Fp x50307 = x50306 * x26;
            Fp x50308 = Fp(x50307.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x50308;
          }
          Fp x50309 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x50310 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x50311 = x50310 * x1;
          Fp x50312 = x50309 + x50311;
          Fp x50313 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x50314 = x50313 * x3;
          Fp x50315 = x50312 + x50314;
          Fp x50316 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x50317 = x50316 * x6;
          Fp x50318 = x50315 + x50317;
          Fp x50319 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x50320 = x50319 * x11;
          Fp x50321 = x50318 + x50320;
          Fp x50322 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x50323 = x50322 * x27;
          Fp x50324 = x50321 + x50323;
          Fp x50325 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x50326 = x50325 * x12;
          Fp x50327 = x50324 + x50326;
          Fp x50328 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x50329 = x50328 * x28;
          Fp x50330 = x50327 + x50329;
          Fp x50331 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x50332 = x50331 * x13;
          Fp x50333 = x50330 + x50332;
          Fp x50334 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x50335 = x50334 * x29;
          Fp x50336 = x50333 + x50335;
          Fp x50337 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x50338 = x50337 * x14;
          Fp x50339 = x50336 + x50338;
          Fp x50340 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x50341 = x50340 * x30;
          Fp x50342 = x50339 + x50341;
          Fp x50343 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x50344 = x50343 * x15;
          Fp x50345 = x50342 + x50344;
          Fp x50346 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x50347 = x50346 * x31;
          Fp x50348 = x50345 + x50347;
          Fp x50349 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x50350 = x50349 * x16;
          Fp x50351 = x50348 + x50350;
          Fp x50352 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x50353 = x50352 * x32;
          Fp x50354 = x50351 + x50353;
          Fp x50355 = x50168 - x50354;
          Fp x50356 = x50355 * x33;
          if (x50356 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          Fp x50357 = args[0][14 * steps + ((cycle - 0) & mask)];
          Fp x50358 = args[0][15 * steps + ((cycle - 0) & mask)];
          {
            Fp x50359 = Fp(x50357.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x50359;
            Fp x50360 = x50357 - x50359;
            Fp x50361 = x50360 * x26;
            Fp x50362 = Fp(x50361.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x50362;
            Fp x50363 = x50361 - x50362;
            Fp x50364 = x50363 * x26;
            Fp x50365 = Fp(x50364.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x50365;
            Fp x50366 = x50364 - x50365;
            Fp x50367 = x50366 * x26;
            Fp x50368 = Fp(x50367.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x50368;
            Fp x50369 = x50367 - x50368;
            Fp x50370 = x50369 * x26;
            Fp x50371 = Fp(x50370.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x50371;
            Fp x50372 = x50370 - x50371;
            Fp x50373 = x50372 * x26;
            Fp x50374 = Fp(x50373.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x50374;
            Fp x50375 = x50373 - x50374;
            Fp x50376 = x50375 * x26;
            Fp x50377 = Fp(x50376.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x50377;
            Fp x50378 = x50376 - x50377;
            Fp x50379 = x50378 * x26;
            Fp x50380 = Fp(x50379.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x50380;
            Fp x50381 = x50379 - x50380;
            Fp x50382 = x50381 * x26;
            Fp x50383 = Fp(x50382.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x50383;
            Fp x50384 = x50382 - x50383;
            Fp x50385 = x50384 * x26;
            Fp x50386 = Fp(x50385.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x50386;
            Fp x50387 = x50385 - x50386;
            Fp x50388 = x50387 * x26;
            Fp x50389 = Fp(x50388.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x50389;
            Fp x50390 = x50388 - x50389;
            Fp x50391 = x50390 * x26;
            Fp x50392 = Fp(x50391.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x50392;
            Fp x50393 = x50391 - x50392;
            Fp x50394 = x50393 * x26;
            Fp x50395 = Fp(x50394.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x50395;
            Fp x50396 = x50394 - x50395;
            Fp x50397 = x50396 * x26;
            Fp x50398 = Fp(x50397.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x50398;
            Fp x50399 = x50397 - x50398;
            Fp x50400 = x50399 * x26;
            Fp x50401 = Fp(x50400.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x50401;
            Fp x50402 = x50400 - x50401;
            Fp x50403 = x50402 * x26;
            Fp x50404 = Fp(x50403.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x50404;
          }
          Fp x50405 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x50406 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x50407 = x50406 * x1;
          Fp x50408 = x50405 + x50407;
          Fp x50409 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x50410 = x50409 * x3;
          Fp x50411 = x50408 + x50410;
          Fp x50412 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x50413 = x50412 * x6;
          Fp x50414 = x50411 + x50413;
          Fp x50415 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x50416 = x50415 * x11;
          Fp x50417 = x50414 + x50416;
          Fp x50418 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x50419 = x50418 * x27;
          Fp x50420 = x50417 + x50419;
          Fp x50421 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x50422 = x50421 * x12;
          Fp x50423 = x50420 + x50422;
          Fp x50424 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x50425 = x50424 * x28;
          Fp x50426 = x50423 + x50425;
          Fp x50427 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x50428 = x50427 * x13;
          Fp x50429 = x50426 + x50428;
          Fp x50430 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x50431 = x50430 * x29;
          Fp x50432 = x50429 + x50431;
          Fp x50433 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x50434 = x50433 * x14;
          Fp x50435 = x50432 + x50434;
          Fp x50436 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x50437 = x50436 * x30;
          Fp x50438 = x50435 + x50437;
          Fp x50439 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x50440 = x50439 * x15;
          Fp x50441 = x50438 + x50440;
          Fp x50442 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x50443 = x50442 * x31;
          Fp x50444 = x50441 + x50443;
          Fp x50445 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x50446 = x50445 * x16;
          Fp x50447 = x50444 + x50446;
          Fp x50448 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x50449 = x50448 * x32;
          Fp x50450 = x50447 + x50449;
          Fp x50451 = x50357 - x50450;
          Fp x50452 = x50451 * x33;
          if (x50452 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          {
            Fp x50453 = Fp(x50358.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x50453;
            Fp x50454 = x50358 - x50453;
            Fp x50455 = x50454 * x26;
            Fp x50456 = Fp(x50455.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x50456;
            Fp x50457 = x50455 - x50456;
            Fp x50458 = x50457 * x26;
            Fp x50459 = Fp(x50458.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x50459;
            Fp x50460 = x50458 - x50459;
            Fp x50461 = x50460 * x26;
            Fp x50462 = Fp(x50461.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x50462;
            Fp x50463 = x50461 - x50462;
            Fp x50464 = x50463 * x26;
            Fp x50465 = Fp(x50464.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x50465;
            Fp x50466 = x50464 - x50465;
            Fp x50467 = x50466 * x26;
            Fp x50468 = Fp(x50467.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x50468;
            Fp x50469 = x50467 - x50468;
            Fp x50470 = x50469 * x26;
            Fp x50471 = Fp(x50470.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x50471;
            Fp x50472 = x50470 - x50471;
            Fp x50473 = x50472 * x26;
            Fp x50474 = Fp(x50473.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x50474;
            Fp x50475 = x50473 - x50474;
            Fp x50476 = x50475 * x26;
            Fp x50477 = Fp(x50476.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x50477;
            Fp x50478 = x50476 - x50477;
            Fp x50479 = x50478 * x26;
            Fp x50480 = Fp(x50479.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x50480;
            Fp x50481 = x50479 - x50480;
            Fp x50482 = x50481 * x26;
            Fp x50483 = Fp(x50482.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x50483;
            Fp x50484 = x50482 - x50483;
            Fp x50485 = x50484 * x26;
            Fp x50486 = Fp(x50485.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x50486;
            Fp x50487 = x50485 - x50486;
            Fp x50488 = x50487 * x26;
            Fp x50489 = Fp(x50488.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x50489;
            Fp x50490 = x50488 - x50489;
            Fp x50491 = x50490 * x26;
            Fp x50492 = Fp(x50491.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x50492;
            Fp x50493 = x50491 - x50492;
            Fp x50494 = x50493 * x26;
            Fp x50495 = Fp(x50494.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x50495;
            Fp x50496 = x50494 - x50495;
            Fp x50497 = x50496 * x26;
            Fp x50498 = Fp(x50497.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x50498;
          }
          Fp x50499 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x50500 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x50501 = x50500 * x1;
          Fp x50502 = x50499 + x50501;
          Fp x50503 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x50504 = x50503 * x3;
          Fp x50505 = x50502 + x50504;
          Fp x50506 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x50507 = x50506 * x6;
          Fp x50508 = x50505 + x50507;
          Fp x50509 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x50510 = x50509 * x11;
          Fp x50511 = x50508 + x50510;
          Fp x50512 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x50513 = x50512 * x27;
          Fp x50514 = x50511 + x50513;
          Fp x50515 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x50516 = x50515 * x12;
          Fp x50517 = x50514 + x50516;
          Fp x50518 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x50519 = x50518 * x28;
          Fp x50520 = x50517 + x50519;
          Fp x50521 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x50522 = x50521 * x13;
          Fp x50523 = x50520 + x50522;
          Fp x50524 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x50525 = x50524 * x29;
          Fp x50526 = x50523 + x50525;
          Fp x50527 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x50528 = x50527 * x14;
          Fp x50529 = x50526 + x50528;
          Fp x50530 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x50531 = x50530 * x30;
          Fp x50532 = x50529 + x50531;
          Fp x50533 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x50534 = x50533 * x15;
          Fp x50535 = x50532 + x50534;
          Fp x50536 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x50537 = x50536 * x31;
          Fp x50538 = x50535 + x50537;
          Fp x50539 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x50540 = x50539 * x16;
          Fp x50541 = x50538 + x50540;
          Fp x50542 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x50543 = x50542 * x32;
          Fp x50544 = x50541 + x50543;
          Fp x50545 = x50358 - x50544;
          Fp x50546 = x50545 * x33;
          if (x50546 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          host_args[0] = x50354;
          host_args[1] = x50260;
          host_args[2] = x50544;
          host_args[3] = x50450;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        args[2][127 * steps + cycle] = x7;
        Fp x50547 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x50548 = x50547 - x71;
        Fp x50549 = x50547 * x50548;
        if (x50549 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:106");
        Fp x50550 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x50551 = x50550 - x71;
        Fp x50552 = x50550 * x50551;
        if (x50552 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:107");
        Fp x50553 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x50554 = x50553 - x71;
        Fp x50555 = x50553 * x50554;
        if (x50555 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:108");
        Fp x50556 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x50557 = x50556 - x71;
        Fp x50558 = x50556 * x50557;
        if (x50558 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:109");
      }
      if (x47601 != 0) {
        Fp x50559 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x50559;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x50559;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x50560 = host_outs[0];
          Fp x50561 = host_outs[1];
          args[2][129 * steps + cycle] = x50560;
          args[2][130 * steps + cycle] = x50561;
        }
        Fp x50562 = args[2][97 * steps + ((cycle - 1) & mask)];
        args[2][97 * steps + cycle] = x50562;
        Fp x50563 = args[2][98 * steps + ((cycle - 1) & mask)];
        args[2][98 * steps + cycle] = x50563;
        Fp x50564 = args[2][96 * steps + ((cycle - 1) & mask)];
        args[2][96 * steps + cycle] = x50564;
        Fp x50565 = args[2][123 * steps + ((cycle - 1) & mask)];
        args[2][123 * steps + cycle] = x50565;
        Fp x50566 = args[2][124 * steps + ((cycle - 1) & mask)];
        args[2][124 * steps + cycle] = x50566;
        Fp x50567 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x50567;
        Fp x50568 = args[2][97 * steps + ((cycle - 0) & mask)];
        if (x50568 != 0) {
          host(ctx, "log", "  INIT3, cont", host_args.data(), 0, host_outs.data(), 0);
          Fp x50569 = args[2][126 * steps + ((cycle - 1) & mask)];
          args[2][126 * steps + cycle] = x50569;
          args[2][122 * steps + cycle] = x50559;
        }
        Fp x50570 = x71 - x50568;
        if (x50570 != 0) {
          Fp x50571 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x50572 = x50571 * x17;
          Fp x50573 = args[2][129 * steps + ((cycle - 0) & mask)];
          Fp x50574 = x50572 + x50573;
          Fp x50575 = x50574 * x10;
          Fp x50576 = x50575 + x0;
          args[2][126 * steps + cycle] = x50576;
          Fp x50577 = x50559 + x71;
          args[2][122 * steps + cycle] = x50577;
        }
        Fp x50578 = args[2][98 * steps + ((cycle - 0) & mask)];
        if (x50578 != 0) {
          Fp x50579 = args[2][0 * steps + ((cycle - 4) & mask)];
          Fp x50580 = args[2][1 * steps + ((cycle - 4) & mask)];
          Fp x50581 = x50580 * x1;
          Fp x50582 = x50579 + x50581;
          Fp x50583 = args[2][2 * steps + ((cycle - 4) & mask)];
          Fp x50584 = x50583 * x3;
          Fp x50585 = x50582 + x50584;
          Fp x50586 = args[2][3 * steps + ((cycle - 4) & mask)];
          Fp x50587 = x50586 * x6;
          Fp x50588 = x50585 + x50587;
          Fp x50589 = args[2][4 * steps + ((cycle - 4) & mask)];
          Fp x50590 = x50589 * x11;
          Fp x50591 = x50588 + x50590;
          Fp x50592 = args[2][5 * steps + ((cycle - 4) & mask)];
          Fp x50593 = x50592 * x27;
          Fp x50594 = x50591 + x50593;
          Fp x50595 = args[2][6 * steps + ((cycle - 4) & mask)];
          Fp x50596 = x50595 * x12;
          Fp x50597 = x50594 + x50596;
          Fp x50598 = args[2][7 * steps + ((cycle - 4) & mask)];
          Fp x50599 = x50598 * x28;
          Fp x50600 = x50597 + x50599;
          Fp x50601 = args[2][8 * steps + ((cycle - 4) & mask)];
          Fp x50602 = x50601 * x13;
          Fp x50603 = x50600 + x50602;
          Fp x50604 = args[2][9 * steps + ((cycle - 4) & mask)];
          Fp x50605 = x50604 * x29;
          Fp x50606 = x50603 + x50605;
          Fp x50607 = args[2][10 * steps + ((cycle - 4) & mask)];
          Fp x50608 = x50607 * x14;
          Fp x50609 = x50606 + x50608;
          Fp x50610 = args[2][11 * steps + ((cycle - 4) & mask)];
          Fp x50611 = x50610 * x30;
          Fp x50612 = x50609 + x50611;
          Fp x50613 = args[2][12 * steps + ((cycle - 4) & mask)];
          Fp x50614 = x50613 * x15;
          Fp x50615 = x50612 + x50614;
          Fp x50616 = args[2][13 * steps + ((cycle - 4) & mask)];
          Fp x50617 = x50616 * x31;
          Fp x50618 = x50615 + x50617;
          Fp x50619 = args[2][14 * steps + ((cycle - 4) & mask)];
          Fp x50620 = x50619 * x16;
          Fp x50621 = x50618 + x50620;
          Fp x50622 = args[2][15 * steps + ((cycle - 4) & mask)];
          Fp x50623 = x50622 * x32;
          Fp x50624 = x50621 + x50623;
          Fp x50625 = args[2][16 * steps + ((cycle - 4) & mask)];
          Fp x50626 = args[2][17 * steps + ((cycle - 4) & mask)];
          Fp x50627 = x50626 * x1;
          Fp x50628 = x50625 + x50627;
          Fp x50629 = args[2][18 * steps + ((cycle - 4) & mask)];
          Fp x50630 = x50629 * x3;
          Fp x50631 = x50628 + x50630;
          Fp x50632 = args[2][19 * steps + ((cycle - 4) & mask)];
          Fp x50633 = x50632 * x6;
          Fp x50634 = x50631 + x50633;
          Fp x50635 = args[2][20 * steps + ((cycle - 4) & mask)];
          Fp x50636 = x50635 * x11;
          Fp x50637 = x50634 + x50636;
          Fp x50638 = args[2][21 * steps + ((cycle - 4) & mask)];
          Fp x50639 = x50638 * x27;
          Fp x50640 = x50637 + x50639;
          Fp x50641 = args[2][22 * steps + ((cycle - 4) & mask)];
          Fp x50642 = x50641 * x12;
          Fp x50643 = x50640 + x50642;
          Fp x50644 = args[2][23 * steps + ((cycle - 4) & mask)];
          Fp x50645 = x50644 * x28;
          Fp x50646 = x50643 + x50645;
          Fp x50647 = args[2][24 * steps + ((cycle - 4) & mask)];
          Fp x50648 = x50647 * x13;
          Fp x50649 = x50646 + x50648;
          Fp x50650 = args[2][25 * steps + ((cycle - 4) & mask)];
          Fp x50651 = x50650 * x29;
          Fp x50652 = x50649 + x50651;
          Fp x50653 = args[2][26 * steps + ((cycle - 4) & mask)];
          Fp x50654 = x50653 * x14;
          Fp x50655 = x50652 + x50654;
          Fp x50656 = args[2][27 * steps + ((cycle - 4) & mask)];
          Fp x50657 = x50656 * x30;
          Fp x50658 = x50655 + x50657;
          Fp x50659 = args[2][28 * steps + ((cycle - 4) & mask)];
          Fp x50660 = x50659 * x15;
          Fp x50661 = x50658 + x50660;
          Fp x50662 = args[2][29 * steps + ((cycle - 4) & mask)];
          Fp x50663 = x50662 * x31;
          Fp x50664 = x50661 + x50663;
          Fp x50665 = args[2][30 * steps + ((cycle - 4) & mask)];
          Fp x50666 = x50665 * x16;
          Fp x50667 = x50664 + x50666;
          Fp x50668 = args[2][31 * steps + ((cycle - 4) & mask)];
          Fp x50669 = x50668 * x32;
          Fp x50670 = x50667 + x50669;
          {
            Fp x50671 = Fp(x50624.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x50671;
            Fp x50672 = x50624 - x50671;
            Fp x50673 = x50672 * x26;
            Fp x50674 = Fp(x50673.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x50674;
            Fp x50675 = x50673 - x50674;
            Fp x50676 = x50675 * x26;
            Fp x50677 = Fp(x50676.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x50677;
            Fp x50678 = x50676 - x50677;
            Fp x50679 = x50678 * x26;
            Fp x50680 = Fp(x50679.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x50680;
            Fp x50681 = x50679 - x50680;
            Fp x50682 = x50681 * x26;
            Fp x50683 = Fp(x50682.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x50683;
            Fp x50684 = x50682 - x50683;
            Fp x50685 = x50684 * x26;
            Fp x50686 = Fp(x50685.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x50686;
            Fp x50687 = x50685 - x50686;
            Fp x50688 = x50687 * x26;
            Fp x50689 = Fp(x50688.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x50689;
            Fp x50690 = x50688 - x50689;
            Fp x50691 = x50690 * x26;
            Fp x50692 = Fp(x50691.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x50692;
            Fp x50693 = x50691 - x50692;
            Fp x50694 = x50693 * x26;
            Fp x50695 = Fp(x50694.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x50695;
            Fp x50696 = x50694 - x50695;
            Fp x50697 = x50696 * x26;
            Fp x50698 = Fp(x50697.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x50698;
            Fp x50699 = x50697 - x50698;
            Fp x50700 = x50699 * x26;
            Fp x50701 = Fp(x50700.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x50701;
            Fp x50702 = x50700 - x50701;
            Fp x50703 = x50702 * x26;
            Fp x50704 = Fp(x50703.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x50704;
            Fp x50705 = x50703 - x50704;
            Fp x50706 = x50705 * x26;
            Fp x50707 = Fp(x50706.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x50707;
            Fp x50708 = x50706 - x50707;
            Fp x50709 = x50708 * x26;
            Fp x50710 = Fp(x50709.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x50710;
            Fp x50711 = x50709 - x50710;
            Fp x50712 = x50711 * x26;
            Fp x50713 = Fp(x50712.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x50713;
            Fp x50714 = x50712 - x50713;
            Fp x50715 = x50714 * x26;
            Fp x50716 = Fp(x50715.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x50716;
          }
          Fp x50717 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x50718 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x50719 = x50718 * x1;
          Fp x50720 = x50717 + x50719;
          Fp x50721 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x50722 = x50721 * x3;
          Fp x50723 = x50720 + x50722;
          Fp x50724 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x50725 = x50724 * x6;
          Fp x50726 = x50723 + x50725;
          Fp x50727 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x50728 = x50727 * x11;
          Fp x50729 = x50726 + x50728;
          Fp x50730 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x50731 = x50730 * x27;
          Fp x50732 = x50729 + x50731;
          Fp x50733 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x50734 = x50733 * x12;
          Fp x50735 = x50732 + x50734;
          Fp x50736 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x50737 = x50736 * x28;
          Fp x50738 = x50735 + x50737;
          Fp x50739 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x50740 = x50739 * x13;
          Fp x50741 = x50738 + x50740;
          Fp x50742 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x50743 = x50742 * x29;
          Fp x50744 = x50741 + x50743;
          Fp x50745 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x50746 = x50745 * x14;
          Fp x50747 = x50744 + x50746;
          Fp x50748 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x50749 = x50748 * x30;
          Fp x50750 = x50747 + x50749;
          Fp x50751 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x50752 = x50751 * x15;
          Fp x50753 = x50750 + x50752;
          Fp x50754 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x50755 = x50754 * x31;
          Fp x50756 = x50753 + x50755;
          Fp x50757 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x50758 = x50757 * x16;
          Fp x50759 = x50756 + x50758;
          Fp x50760 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x50761 = x50760 * x32;
          Fp x50762 = x50759 + x50761;
          Fp x50763 = x50624 - x50762;
          Fp x50764 = x50763 * x33;
          if (x50764 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          {
            Fp x50765 = Fp(x50670.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x50765;
            Fp x50766 = x50670 - x50765;
            Fp x50767 = x50766 * x26;
            Fp x50768 = Fp(x50767.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x50768;
            Fp x50769 = x50767 - x50768;
            Fp x50770 = x50769 * x26;
            Fp x50771 = Fp(x50770.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x50771;
            Fp x50772 = x50770 - x50771;
            Fp x50773 = x50772 * x26;
            Fp x50774 = Fp(x50773.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x50774;
            Fp x50775 = x50773 - x50774;
            Fp x50776 = x50775 * x26;
            Fp x50777 = Fp(x50776.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x50777;
            Fp x50778 = x50776 - x50777;
            Fp x50779 = x50778 * x26;
            Fp x50780 = Fp(x50779.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x50780;
            Fp x50781 = x50779 - x50780;
            Fp x50782 = x50781 * x26;
            Fp x50783 = Fp(x50782.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x50783;
            Fp x50784 = x50782 - x50783;
            Fp x50785 = x50784 * x26;
            Fp x50786 = Fp(x50785.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x50786;
            Fp x50787 = x50785 - x50786;
            Fp x50788 = x50787 * x26;
            Fp x50789 = Fp(x50788.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x50789;
            Fp x50790 = x50788 - x50789;
            Fp x50791 = x50790 * x26;
            Fp x50792 = Fp(x50791.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x50792;
            Fp x50793 = x50791 - x50792;
            Fp x50794 = x50793 * x26;
            Fp x50795 = Fp(x50794.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x50795;
            Fp x50796 = x50794 - x50795;
            Fp x50797 = x50796 * x26;
            Fp x50798 = Fp(x50797.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x50798;
            Fp x50799 = x50797 - x50798;
            Fp x50800 = x50799 * x26;
            Fp x50801 = Fp(x50800.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x50801;
            Fp x50802 = x50800 - x50801;
            Fp x50803 = x50802 * x26;
            Fp x50804 = Fp(x50803.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x50804;
            Fp x50805 = x50803 - x50804;
            Fp x50806 = x50805 * x26;
            Fp x50807 = Fp(x50806.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x50807;
            Fp x50808 = x50806 - x50807;
            Fp x50809 = x50808 * x26;
            Fp x50810 = Fp(x50809.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x50810;
          }
          Fp x50811 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x50812 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x50813 = x50812 * x1;
          Fp x50814 = x50811 + x50813;
          Fp x50815 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x50816 = x50815 * x3;
          Fp x50817 = x50814 + x50816;
          Fp x50818 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x50819 = x50818 * x6;
          Fp x50820 = x50817 + x50819;
          Fp x50821 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x50822 = x50821 * x11;
          Fp x50823 = x50820 + x50822;
          Fp x50824 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x50825 = x50824 * x27;
          Fp x50826 = x50823 + x50825;
          Fp x50827 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x50828 = x50827 * x12;
          Fp x50829 = x50826 + x50828;
          Fp x50830 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x50831 = x50830 * x28;
          Fp x50832 = x50829 + x50831;
          Fp x50833 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x50834 = x50833 * x13;
          Fp x50835 = x50832 + x50834;
          Fp x50836 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x50837 = x50836 * x29;
          Fp x50838 = x50835 + x50837;
          Fp x50839 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x50840 = x50839 * x14;
          Fp x50841 = x50838 + x50840;
          Fp x50842 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x50843 = x50842 * x30;
          Fp x50844 = x50841 + x50843;
          Fp x50845 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x50846 = x50845 * x15;
          Fp x50847 = x50844 + x50846;
          Fp x50848 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x50849 = x50848 * x31;
          Fp x50850 = x50847 + x50849;
          Fp x50851 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x50852 = x50851 * x16;
          Fp x50853 = x50850 + x50852;
          Fp x50854 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x50855 = x50854 * x32;
          Fp x50856 = x50853 + x50855;
          Fp x50857 = x50670 - x50856;
          Fp x50858 = x50857 * x33;
          if (x50858 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          Fp x50859 = args[2][32 * steps + ((cycle - 4) & mask)];
          Fp x50860 = args[2][33 * steps + ((cycle - 4) & mask)];
          Fp x50861 = x50860 * x1;
          Fp x50862 = x50859 + x50861;
          Fp x50863 = args[2][34 * steps + ((cycle - 4) & mask)];
          Fp x50864 = x50863 * x3;
          Fp x50865 = x50862 + x50864;
          Fp x50866 = args[2][35 * steps + ((cycle - 4) & mask)];
          Fp x50867 = x50866 * x6;
          Fp x50868 = x50865 + x50867;
          Fp x50869 = args[2][36 * steps + ((cycle - 4) & mask)];
          Fp x50870 = x50869 * x11;
          Fp x50871 = x50868 + x50870;
          Fp x50872 = args[2][37 * steps + ((cycle - 4) & mask)];
          Fp x50873 = x50872 * x27;
          Fp x50874 = x50871 + x50873;
          Fp x50875 = args[2][38 * steps + ((cycle - 4) & mask)];
          Fp x50876 = x50875 * x12;
          Fp x50877 = x50874 + x50876;
          Fp x50878 = args[2][39 * steps + ((cycle - 4) & mask)];
          Fp x50879 = x50878 * x28;
          Fp x50880 = x50877 + x50879;
          Fp x50881 = args[2][40 * steps + ((cycle - 4) & mask)];
          Fp x50882 = x50881 * x13;
          Fp x50883 = x50880 + x50882;
          Fp x50884 = args[2][41 * steps + ((cycle - 4) & mask)];
          Fp x50885 = x50884 * x29;
          Fp x50886 = x50883 + x50885;
          Fp x50887 = args[2][42 * steps + ((cycle - 4) & mask)];
          Fp x50888 = x50887 * x14;
          Fp x50889 = x50886 + x50888;
          Fp x50890 = args[2][43 * steps + ((cycle - 4) & mask)];
          Fp x50891 = x50890 * x30;
          Fp x50892 = x50889 + x50891;
          Fp x50893 = args[2][44 * steps + ((cycle - 4) & mask)];
          Fp x50894 = x50893 * x15;
          Fp x50895 = x50892 + x50894;
          Fp x50896 = args[2][45 * steps + ((cycle - 4) & mask)];
          Fp x50897 = x50896 * x31;
          Fp x50898 = x50895 + x50897;
          Fp x50899 = args[2][46 * steps + ((cycle - 4) & mask)];
          Fp x50900 = x50899 * x16;
          Fp x50901 = x50898 + x50900;
          Fp x50902 = args[2][47 * steps + ((cycle - 4) & mask)];
          Fp x50903 = x50902 * x32;
          Fp x50904 = x50901 + x50903;
          Fp x50905 = args[2][48 * steps + ((cycle - 4) & mask)];
          Fp x50906 = args[2][49 * steps + ((cycle - 4) & mask)];
          Fp x50907 = x50906 * x1;
          Fp x50908 = x50905 + x50907;
          Fp x50909 = args[2][50 * steps + ((cycle - 4) & mask)];
          Fp x50910 = x50909 * x3;
          Fp x50911 = x50908 + x50910;
          Fp x50912 = args[2][51 * steps + ((cycle - 4) & mask)];
          Fp x50913 = x50912 * x6;
          Fp x50914 = x50911 + x50913;
          Fp x50915 = args[2][52 * steps + ((cycle - 4) & mask)];
          Fp x50916 = x50915 * x11;
          Fp x50917 = x50914 + x50916;
          Fp x50918 = args[2][53 * steps + ((cycle - 4) & mask)];
          Fp x50919 = x50918 * x27;
          Fp x50920 = x50917 + x50919;
          Fp x50921 = args[2][54 * steps + ((cycle - 4) & mask)];
          Fp x50922 = x50921 * x12;
          Fp x50923 = x50920 + x50922;
          Fp x50924 = args[2][55 * steps + ((cycle - 4) & mask)];
          Fp x50925 = x50924 * x28;
          Fp x50926 = x50923 + x50925;
          Fp x50927 = args[2][56 * steps + ((cycle - 4) & mask)];
          Fp x50928 = x50927 * x13;
          Fp x50929 = x50926 + x50928;
          Fp x50930 = args[2][57 * steps + ((cycle - 4) & mask)];
          Fp x50931 = x50930 * x29;
          Fp x50932 = x50929 + x50931;
          Fp x50933 = args[2][58 * steps + ((cycle - 4) & mask)];
          Fp x50934 = x50933 * x14;
          Fp x50935 = x50932 + x50934;
          Fp x50936 = args[2][59 * steps + ((cycle - 4) & mask)];
          Fp x50937 = x50936 * x30;
          Fp x50938 = x50935 + x50937;
          Fp x50939 = args[2][60 * steps + ((cycle - 4) & mask)];
          Fp x50940 = x50939 * x15;
          Fp x50941 = x50938 + x50940;
          Fp x50942 = args[2][61 * steps + ((cycle - 4) & mask)];
          Fp x50943 = x50942 * x31;
          Fp x50944 = x50941 + x50943;
          Fp x50945 = args[2][62 * steps + ((cycle - 4) & mask)];
          Fp x50946 = x50945 * x16;
          Fp x50947 = x50944 + x50946;
          Fp x50948 = args[2][63 * steps + ((cycle - 4) & mask)];
          Fp x50949 = x50948 * x32;
          Fp x50950 = x50947 + x50949;
          {
            Fp x50951 = Fp(x50904.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x50951;
            Fp x50952 = x50904 - x50951;
            Fp x50953 = x50952 * x26;
            Fp x50954 = Fp(x50953.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x50954;
            Fp x50955 = x50953 - x50954;
            Fp x50956 = x50955 * x26;
            Fp x50957 = Fp(x50956.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x50957;
            Fp x50958 = x50956 - x50957;
            Fp x50959 = x50958 * x26;
            Fp x50960 = Fp(x50959.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x50960;
            Fp x50961 = x50959 - x50960;
            Fp x50962 = x50961 * x26;
            Fp x50963 = Fp(x50962.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x50963;
            Fp x50964 = x50962 - x50963;
            Fp x50965 = x50964 * x26;
            Fp x50966 = Fp(x50965.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x50966;
            Fp x50967 = x50965 - x50966;
            Fp x50968 = x50967 * x26;
            Fp x50969 = Fp(x50968.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x50969;
            Fp x50970 = x50968 - x50969;
            Fp x50971 = x50970 * x26;
            Fp x50972 = Fp(x50971.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x50972;
            Fp x50973 = x50971 - x50972;
            Fp x50974 = x50973 * x26;
            Fp x50975 = Fp(x50974.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x50975;
            Fp x50976 = x50974 - x50975;
            Fp x50977 = x50976 * x26;
            Fp x50978 = Fp(x50977.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x50978;
            Fp x50979 = x50977 - x50978;
            Fp x50980 = x50979 * x26;
            Fp x50981 = Fp(x50980.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x50981;
            Fp x50982 = x50980 - x50981;
            Fp x50983 = x50982 * x26;
            Fp x50984 = Fp(x50983.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x50984;
            Fp x50985 = x50983 - x50984;
            Fp x50986 = x50985 * x26;
            Fp x50987 = Fp(x50986.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x50987;
            Fp x50988 = x50986 - x50987;
            Fp x50989 = x50988 * x26;
            Fp x50990 = Fp(x50989.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x50990;
            Fp x50991 = x50989 - x50990;
            Fp x50992 = x50991 * x26;
            Fp x50993 = Fp(x50992.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x50993;
            Fp x50994 = x50992 - x50993;
            Fp x50995 = x50994 * x26;
            Fp x50996 = Fp(x50995.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x50996;
          }
          Fp x50997 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x50998 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x50999 = x50998 * x1;
          Fp x51000 = x50997 + x50999;
          Fp x51001 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x51002 = x51001 * x3;
          Fp x51003 = x51000 + x51002;
          Fp x51004 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x51005 = x51004 * x6;
          Fp x51006 = x51003 + x51005;
          Fp x51007 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x51008 = x51007 * x11;
          Fp x51009 = x51006 + x51008;
          Fp x51010 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x51011 = x51010 * x27;
          Fp x51012 = x51009 + x51011;
          Fp x51013 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x51014 = x51013 * x12;
          Fp x51015 = x51012 + x51014;
          Fp x51016 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x51017 = x51016 * x28;
          Fp x51018 = x51015 + x51017;
          Fp x51019 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x51020 = x51019 * x13;
          Fp x51021 = x51018 + x51020;
          Fp x51022 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x51023 = x51022 * x29;
          Fp x51024 = x51021 + x51023;
          Fp x51025 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x51026 = x51025 * x14;
          Fp x51027 = x51024 + x51026;
          Fp x51028 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x51029 = x51028 * x30;
          Fp x51030 = x51027 + x51029;
          Fp x51031 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x51032 = x51031 * x15;
          Fp x51033 = x51030 + x51032;
          Fp x51034 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x51035 = x51034 * x31;
          Fp x51036 = x51033 + x51035;
          Fp x51037 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x51038 = x51037 * x16;
          Fp x51039 = x51036 + x51038;
          Fp x51040 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x51041 = x51040 * x32;
          Fp x51042 = x51039 + x51041;
          Fp x51043 = x50904 - x51042;
          Fp x51044 = x51043 * x33;
          if (x51044 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          {
            Fp x51045 = Fp(x50950.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x51045;
            Fp x51046 = x50950 - x51045;
            Fp x51047 = x51046 * x26;
            Fp x51048 = Fp(x51047.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x51048;
            Fp x51049 = x51047 - x51048;
            Fp x51050 = x51049 * x26;
            Fp x51051 = Fp(x51050.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x51051;
            Fp x51052 = x51050 - x51051;
            Fp x51053 = x51052 * x26;
            Fp x51054 = Fp(x51053.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x51054;
            Fp x51055 = x51053 - x51054;
            Fp x51056 = x51055 * x26;
            Fp x51057 = Fp(x51056.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x51057;
            Fp x51058 = x51056 - x51057;
            Fp x51059 = x51058 * x26;
            Fp x51060 = Fp(x51059.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x51060;
            Fp x51061 = x51059 - x51060;
            Fp x51062 = x51061 * x26;
            Fp x51063 = Fp(x51062.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x51063;
            Fp x51064 = x51062 - x51063;
            Fp x51065 = x51064 * x26;
            Fp x51066 = Fp(x51065.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x51066;
            Fp x51067 = x51065 - x51066;
            Fp x51068 = x51067 * x26;
            Fp x51069 = Fp(x51068.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x51069;
            Fp x51070 = x51068 - x51069;
            Fp x51071 = x51070 * x26;
            Fp x51072 = Fp(x51071.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x51072;
            Fp x51073 = x51071 - x51072;
            Fp x51074 = x51073 * x26;
            Fp x51075 = Fp(x51074.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x51075;
            Fp x51076 = x51074 - x51075;
            Fp x51077 = x51076 * x26;
            Fp x51078 = Fp(x51077.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x51078;
            Fp x51079 = x51077 - x51078;
            Fp x51080 = x51079 * x26;
            Fp x51081 = Fp(x51080.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x51081;
            Fp x51082 = x51080 - x51081;
            Fp x51083 = x51082 * x26;
            Fp x51084 = Fp(x51083.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x51084;
            Fp x51085 = x51083 - x51084;
            Fp x51086 = x51085 * x26;
            Fp x51087 = Fp(x51086.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x51087;
            Fp x51088 = x51086 - x51087;
            Fp x51089 = x51088 * x26;
            Fp x51090 = Fp(x51089.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x51090;
          }
          Fp x51091 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x51092 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x51093 = x51092 * x1;
          Fp x51094 = x51091 + x51093;
          Fp x51095 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x51096 = x51095 * x3;
          Fp x51097 = x51094 + x51096;
          Fp x51098 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x51099 = x51098 * x6;
          Fp x51100 = x51097 + x51099;
          Fp x51101 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x51102 = x51101 * x11;
          Fp x51103 = x51100 + x51102;
          Fp x51104 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x51105 = x51104 * x27;
          Fp x51106 = x51103 + x51105;
          Fp x51107 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x51108 = x51107 * x12;
          Fp x51109 = x51106 + x51108;
          Fp x51110 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x51111 = x51110 * x28;
          Fp x51112 = x51109 + x51111;
          Fp x51113 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x51114 = x51113 * x13;
          Fp x51115 = x51112 + x51114;
          Fp x51116 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x51117 = x51116 * x29;
          Fp x51118 = x51115 + x51117;
          Fp x51119 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x51120 = x51119 * x14;
          Fp x51121 = x51118 + x51120;
          Fp x51122 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x51123 = x51122 * x30;
          Fp x51124 = x51121 + x51123;
          Fp x51125 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x51126 = x51125 * x15;
          Fp x51127 = x51124 + x51126;
          Fp x51128 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x51129 = x51128 * x31;
          Fp x51130 = x51127 + x51129;
          Fp x51131 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x51132 = x51131 * x16;
          Fp x51133 = x51130 + x51132;
          Fp x51134 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x51135 = x51134 * x32;
          Fp x51136 = x51133 + x51135;
          Fp x51137 = x50950 - x51136;
          Fp x51138 = x51137 * x33;
          if (x51138 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          host_args[0] = x50856;
          host_args[1] = x50762;
          host_args[2] = x51136;
          host_args[3] = x51042;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%0x04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x51139 = x71 - x50578;
        if (x51139 != 0) {
          Fp x51140 = args[0][12 * steps + ((cycle - 0) & mask)];
          Fp x51141 = args[0][13 * steps + ((cycle - 0) & mask)];
          {
            Fp x51142 = Fp(x51140.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x51142;
            Fp x51143 = x51140 - x51142;
            Fp x51144 = x51143 * x26;
            Fp x51145 = Fp(x51144.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x51145;
            Fp x51146 = x51144 - x51145;
            Fp x51147 = x51146 * x26;
            Fp x51148 = Fp(x51147.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x51148;
            Fp x51149 = x51147 - x51148;
            Fp x51150 = x51149 * x26;
            Fp x51151 = Fp(x51150.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x51151;
            Fp x51152 = x51150 - x51151;
            Fp x51153 = x51152 * x26;
            Fp x51154 = Fp(x51153.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x51154;
            Fp x51155 = x51153 - x51154;
            Fp x51156 = x51155 * x26;
            Fp x51157 = Fp(x51156.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x51157;
            Fp x51158 = x51156 - x51157;
            Fp x51159 = x51158 * x26;
            Fp x51160 = Fp(x51159.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x51160;
            Fp x51161 = x51159 - x51160;
            Fp x51162 = x51161 * x26;
            Fp x51163 = Fp(x51162.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x51163;
            Fp x51164 = x51162 - x51163;
            Fp x51165 = x51164 * x26;
            Fp x51166 = Fp(x51165.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x51166;
            Fp x51167 = x51165 - x51166;
            Fp x51168 = x51167 * x26;
            Fp x51169 = Fp(x51168.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x51169;
            Fp x51170 = x51168 - x51169;
            Fp x51171 = x51170 * x26;
            Fp x51172 = Fp(x51171.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x51172;
            Fp x51173 = x51171 - x51172;
            Fp x51174 = x51173 * x26;
            Fp x51175 = Fp(x51174.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x51175;
            Fp x51176 = x51174 - x51175;
            Fp x51177 = x51176 * x26;
            Fp x51178 = Fp(x51177.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x51178;
            Fp x51179 = x51177 - x51178;
            Fp x51180 = x51179 * x26;
            Fp x51181 = Fp(x51180.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x51181;
            Fp x51182 = x51180 - x51181;
            Fp x51183 = x51182 * x26;
            Fp x51184 = Fp(x51183.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x51184;
            Fp x51185 = x51183 - x51184;
            Fp x51186 = x51185 * x26;
            Fp x51187 = Fp(x51186.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x51187;
          }
          Fp x51188 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x51189 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x51190 = x51189 * x1;
          Fp x51191 = x51188 + x51190;
          Fp x51192 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x51193 = x51192 * x3;
          Fp x51194 = x51191 + x51193;
          Fp x51195 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x51196 = x51195 * x6;
          Fp x51197 = x51194 + x51196;
          Fp x51198 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x51199 = x51198 * x11;
          Fp x51200 = x51197 + x51199;
          Fp x51201 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x51202 = x51201 * x27;
          Fp x51203 = x51200 + x51202;
          Fp x51204 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x51205 = x51204 * x12;
          Fp x51206 = x51203 + x51205;
          Fp x51207 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x51208 = x51207 * x28;
          Fp x51209 = x51206 + x51208;
          Fp x51210 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x51211 = x51210 * x13;
          Fp x51212 = x51209 + x51211;
          Fp x51213 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x51214 = x51213 * x29;
          Fp x51215 = x51212 + x51214;
          Fp x51216 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x51217 = x51216 * x14;
          Fp x51218 = x51215 + x51217;
          Fp x51219 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x51220 = x51219 * x30;
          Fp x51221 = x51218 + x51220;
          Fp x51222 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x51223 = x51222 * x15;
          Fp x51224 = x51221 + x51223;
          Fp x51225 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x51226 = x51225 * x31;
          Fp x51227 = x51224 + x51226;
          Fp x51228 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x51229 = x51228 * x16;
          Fp x51230 = x51227 + x51229;
          Fp x51231 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x51232 = x51231 * x32;
          Fp x51233 = x51230 + x51232;
          Fp x51234 = x51140 - x51233;
          Fp x51235 = x51234 * x33;
          if (x51235 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          {
            Fp x51236 = Fp(x51141.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x51236;
            Fp x51237 = x51141 - x51236;
            Fp x51238 = x51237 * x26;
            Fp x51239 = Fp(x51238.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x51239;
            Fp x51240 = x51238 - x51239;
            Fp x51241 = x51240 * x26;
            Fp x51242 = Fp(x51241.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x51242;
            Fp x51243 = x51241 - x51242;
            Fp x51244 = x51243 * x26;
            Fp x51245 = Fp(x51244.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x51245;
            Fp x51246 = x51244 - x51245;
            Fp x51247 = x51246 * x26;
            Fp x51248 = Fp(x51247.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x51248;
            Fp x51249 = x51247 - x51248;
            Fp x51250 = x51249 * x26;
            Fp x51251 = Fp(x51250.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x51251;
            Fp x51252 = x51250 - x51251;
            Fp x51253 = x51252 * x26;
            Fp x51254 = Fp(x51253.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x51254;
            Fp x51255 = x51253 - x51254;
            Fp x51256 = x51255 * x26;
            Fp x51257 = Fp(x51256.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x51257;
            Fp x51258 = x51256 - x51257;
            Fp x51259 = x51258 * x26;
            Fp x51260 = Fp(x51259.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x51260;
            Fp x51261 = x51259 - x51260;
            Fp x51262 = x51261 * x26;
            Fp x51263 = Fp(x51262.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x51263;
            Fp x51264 = x51262 - x51263;
            Fp x51265 = x51264 * x26;
            Fp x51266 = Fp(x51265.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x51266;
            Fp x51267 = x51265 - x51266;
            Fp x51268 = x51267 * x26;
            Fp x51269 = Fp(x51268.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x51269;
            Fp x51270 = x51268 - x51269;
            Fp x51271 = x51270 * x26;
            Fp x51272 = Fp(x51271.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x51272;
            Fp x51273 = x51271 - x51272;
            Fp x51274 = x51273 * x26;
            Fp x51275 = Fp(x51274.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x51275;
            Fp x51276 = x51274 - x51275;
            Fp x51277 = x51276 * x26;
            Fp x51278 = Fp(x51277.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x51278;
            Fp x51279 = x51277 - x51278;
            Fp x51280 = x51279 * x26;
            Fp x51281 = Fp(x51280.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x51281;
          }
          Fp x51282 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x51283 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x51284 = x51283 * x1;
          Fp x51285 = x51282 + x51284;
          Fp x51286 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x51287 = x51286 * x3;
          Fp x51288 = x51285 + x51287;
          Fp x51289 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x51290 = x51289 * x6;
          Fp x51291 = x51288 + x51290;
          Fp x51292 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x51293 = x51292 * x11;
          Fp x51294 = x51291 + x51293;
          Fp x51295 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x51296 = x51295 * x27;
          Fp x51297 = x51294 + x51296;
          Fp x51298 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x51299 = x51298 * x12;
          Fp x51300 = x51297 + x51299;
          Fp x51301 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x51302 = x51301 * x28;
          Fp x51303 = x51300 + x51302;
          Fp x51304 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x51305 = x51304 * x13;
          Fp x51306 = x51303 + x51305;
          Fp x51307 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x51308 = x51307 * x29;
          Fp x51309 = x51306 + x51308;
          Fp x51310 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x51311 = x51310 * x14;
          Fp x51312 = x51309 + x51311;
          Fp x51313 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x51314 = x51313 * x30;
          Fp x51315 = x51312 + x51314;
          Fp x51316 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x51317 = x51316 * x15;
          Fp x51318 = x51315 + x51317;
          Fp x51319 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x51320 = x51319 * x31;
          Fp x51321 = x51318 + x51320;
          Fp x51322 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x51323 = x51322 * x16;
          Fp x51324 = x51321 + x51323;
          Fp x51325 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x51326 = x51325 * x32;
          Fp x51327 = x51324 + x51326;
          Fp x51328 = x51141 - x51327;
          Fp x51329 = x51328 * x33;
          if (x51329 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          Fp x51330 = args[0][14 * steps + ((cycle - 0) & mask)];
          Fp x51331 = args[0][15 * steps + ((cycle - 0) & mask)];
          {
            Fp x51332 = Fp(x51330.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x51332;
            Fp x51333 = x51330 - x51332;
            Fp x51334 = x51333 * x26;
            Fp x51335 = Fp(x51334.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x51335;
            Fp x51336 = x51334 - x51335;
            Fp x51337 = x51336 * x26;
            Fp x51338 = Fp(x51337.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x51338;
            Fp x51339 = x51337 - x51338;
            Fp x51340 = x51339 * x26;
            Fp x51341 = Fp(x51340.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x51341;
            Fp x51342 = x51340 - x51341;
            Fp x51343 = x51342 * x26;
            Fp x51344 = Fp(x51343.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x51344;
            Fp x51345 = x51343 - x51344;
            Fp x51346 = x51345 * x26;
            Fp x51347 = Fp(x51346.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x51347;
            Fp x51348 = x51346 - x51347;
            Fp x51349 = x51348 * x26;
            Fp x51350 = Fp(x51349.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x51350;
            Fp x51351 = x51349 - x51350;
            Fp x51352 = x51351 * x26;
            Fp x51353 = Fp(x51352.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x51353;
            Fp x51354 = x51352 - x51353;
            Fp x51355 = x51354 * x26;
            Fp x51356 = Fp(x51355.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x51356;
            Fp x51357 = x51355 - x51356;
            Fp x51358 = x51357 * x26;
            Fp x51359 = Fp(x51358.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x51359;
            Fp x51360 = x51358 - x51359;
            Fp x51361 = x51360 * x26;
            Fp x51362 = Fp(x51361.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x51362;
            Fp x51363 = x51361 - x51362;
            Fp x51364 = x51363 * x26;
            Fp x51365 = Fp(x51364.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x51365;
            Fp x51366 = x51364 - x51365;
            Fp x51367 = x51366 * x26;
            Fp x51368 = Fp(x51367.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x51368;
            Fp x51369 = x51367 - x51368;
            Fp x51370 = x51369 * x26;
            Fp x51371 = Fp(x51370.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x51371;
            Fp x51372 = x51370 - x51371;
            Fp x51373 = x51372 * x26;
            Fp x51374 = Fp(x51373.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x51374;
            Fp x51375 = x51373 - x51374;
            Fp x51376 = x51375 * x26;
            Fp x51377 = Fp(x51376.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x51377;
          }
          Fp x51378 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x51379 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x51380 = x51379 * x1;
          Fp x51381 = x51378 + x51380;
          Fp x51382 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x51383 = x51382 * x3;
          Fp x51384 = x51381 + x51383;
          Fp x51385 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x51386 = x51385 * x6;
          Fp x51387 = x51384 + x51386;
          Fp x51388 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x51389 = x51388 * x11;
          Fp x51390 = x51387 + x51389;
          Fp x51391 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x51392 = x51391 * x27;
          Fp x51393 = x51390 + x51392;
          Fp x51394 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x51395 = x51394 * x12;
          Fp x51396 = x51393 + x51395;
          Fp x51397 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x51398 = x51397 * x28;
          Fp x51399 = x51396 + x51398;
          Fp x51400 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x51401 = x51400 * x13;
          Fp x51402 = x51399 + x51401;
          Fp x51403 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x51404 = x51403 * x29;
          Fp x51405 = x51402 + x51404;
          Fp x51406 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x51407 = x51406 * x14;
          Fp x51408 = x51405 + x51407;
          Fp x51409 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x51410 = x51409 * x30;
          Fp x51411 = x51408 + x51410;
          Fp x51412 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x51413 = x51412 * x15;
          Fp x51414 = x51411 + x51413;
          Fp x51415 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x51416 = x51415 * x31;
          Fp x51417 = x51414 + x51416;
          Fp x51418 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x51419 = x51418 * x16;
          Fp x51420 = x51417 + x51419;
          Fp x51421 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x51422 = x51421 * x32;
          Fp x51423 = x51420 + x51422;
          Fp x51424 = x51330 - x51423;
          Fp x51425 = x51424 * x33;
          if (x51425 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          {
            Fp x51426 = Fp(x51331.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x51426;
            Fp x51427 = x51331 - x51426;
            Fp x51428 = x51427 * x26;
            Fp x51429 = Fp(x51428.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x51429;
            Fp x51430 = x51428 - x51429;
            Fp x51431 = x51430 * x26;
            Fp x51432 = Fp(x51431.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x51432;
            Fp x51433 = x51431 - x51432;
            Fp x51434 = x51433 * x26;
            Fp x51435 = Fp(x51434.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x51435;
            Fp x51436 = x51434 - x51435;
            Fp x51437 = x51436 * x26;
            Fp x51438 = Fp(x51437.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x51438;
            Fp x51439 = x51437 - x51438;
            Fp x51440 = x51439 * x26;
            Fp x51441 = Fp(x51440.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x51441;
            Fp x51442 = x51440 - x51441;
            Fp x51443 = x51442 * x26;
            Fp x51444 = Fp(x51443.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x51444;
            Fp x51445 = x51443 - x51444;
            Fp x51446 = x51445 * x26;
            Fp x51447 = Fp(x51446.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x51447;
            Fp x51448 = x51446 - x51447;
            Fp x51449 = x51448 * x26;
            Fp x51450 = Fp(x51449.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x51450;
            Fp x51451 = x51449 - x51450;
            Fp x51452 = x51451 * x26;
            Fp x51453 = Fp(x51452.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x51453;
            Fp x51454 = x51452 - x51453;
            Fp x51455 = x51454 * x26;
            Fp x51456 = Fp(x51455.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x51456;
            Fp x51457 = x51455 - x51456;
            Fp x51458 = x51457 * x26;
            Fp x51459 = Fp(x51458.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x51459;
            Fp x51460 = x51458 - x51459;
            Fp x51461 = x51460 * x26;
            Fp x51462 = Fp(x51461.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x51462;
            Fp x51463 = x51461 - x51462;
            Fp x51464 = x51463 * x26;
            Fp x51465 = Fp(x51464.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x51465;
            Fp x51466 = x51464 - x51465;
            Fp x51467 = x51466 * x26;
            Fp x51468 = Fp(x51467.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x51468;
            Fp x51469 = x51467 - x51468;
            Fp x51470 = x51469 * x26;
            Fp x51471 = Fp(x51470.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x51471;
          }
          Fp x51472 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x51473 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x51474 = x51473 * x1;
          Fp x51475 = x51472 + x51474;
          Fp x51476 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x51477 = x51476 * x3;
          Fp x51478 = x51475 + x51477;
          Fp x51479 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x51480 = x51479 * x6;
          Fp x51481 = x51478 + x51480;
          Fp x51482 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x51483 = x51482 * x11;
          Fp x51484 = x51481 + x51483;
          Fp x51485 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x51486 = x51485 * x27;
          Fp x51487 = x51484 + x51486;
          Fp x51488 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x51489 = x51488 * x12;
          Fp x51490 = x51487 + x51489;
          Fp x51491 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x51492 = x51491 * x28;
          Fp x51493 = x51490 + x51492;
          Fp x51494 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x51495 = x51494 * x13;
          Fp x51496 = x51493 + x51495;
          Fp x51497 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x51498 = x51497 * x29;
          Fp x51499 = x51496 + x51498;
          Fp x51500 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x51501 = x51500 * x14;
          Fp x51502 = x51499 + x51501;
          Fp x51503 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x51504 = x51503 * x30;
          Fp x51505 = x51502 + x51504;
          Fp x51506 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x51507 = x51506 * x15;
          Fp x51508 = x51505 + x51507;
          Fp x51509 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x51510 = x51509 * x31;
          Fp x51511 = x51508 + x51510;
          Fp x51512 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x51513 = x51512 * x16;
          Fp x51514 = x51511 + x51513;
          Fp x51515 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x51516 = x51515 * x32;
          Fp x51517 = x51514 + x51516;
          Fp x51518 = x51331 - x51517;
          Fp x51519 = x51518 * x33;
          if (x51519 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          host_args[0] = x51327;
          host_args[1] = x51233;
          host_args[2] = x51517;
          host_args[3] = x51423;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        args[2][127 * steps + cycle] = x8;
        Fp x51520 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x51521 = x51520 - x71;
        Fp x51522 = x51520 * x51521;
        if (x51522 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:106");
        Fp x51523 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x51524 = x51523 - x71;
        Fp x51525 = x51523 * x51524;
        if (x51525 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:107");
        Fp x51526 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x51527 = x51526 - x71;
        Fp x51528 = x51526 * x51527;
        if (x51528 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:108");
        Fp x51529 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x51530 = x51529 - x71;
        Fp x51531 = x51529 * x51530;
        if (x51531 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:109");
      }
      Fp x51532 = x47604 + x47607;
      Fp x51533 = x51532 + x47610;
      Fp x51534 = x51533 + x47613;
      if (x51534 != 0) {
        Fp x51535 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x51535;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x51535;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x51536 = host_outs[0];
          Fp x51537 = host_outs[1];
          args[2][129 * steps + cycle] = x51536;
          args[2][130 * steps + cycle] = x51537;
        }
        Fp x51538 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][122 * steps + cycle] = x51538;
        Fp x51539 = args[2][96 * steps + ((cycle - 1) & mask)];
        args[2][96 * steps + cycle] = x51539;
        Fp x51540 = args[2][124 * steps + ((cycle - 1) & mask)];
        args[2][124 * steps + cycle] = x51540;
        Fp x51541 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x51541;
        Fp x51542 = args[2][123 * steps + ((cycle - 1) & mask)];
        args[2][123 * steps + cycle] = x51542;
        Fp x51543 = args[2][0 * steps + ((cycle - 4) & mask)];
        Fp x51544 = args[2][1 * steps + ((cycle - 4) & mask)];
        Fp x51545 = args[2][2 * steps + ((cycle - 4) & mask)];
        Fp x51546 = args[2][3 * steps + ((cycle - 4) & mask)];
        Fp x51547 = args[2][4 * steps + ((cycle - 4) & mask)];
        Fp x51548 = args[2][5 * steps + ((cycle - 4) & mask)];
        Fp x51549 = args[2][6 * steps + ((cycle - 4) & mask)];
        Fp x51550 = args[2][7 * steps + ((cycle - 4) & mask)];
        Fp x51551 = args[2][8 * steps + ((cycle - 4) & mask)];
        Fp x51552 = args[2][9 * steps + ((cycle - 4) & mask)];
        Fp x51553 = args[2][10 * steps + ((cycle - 4) & mask)];
        Fp x51554 = args[2][11 * steps + ((cycle - 4) & mask)];
        Fp x51555 = args[2][12 * steps + ((cycle - 4) & mask)];
        Fp x51556 = args[2][13 * steps + ((cycle - 4) & mask)];
        Fp x51557 = args[2][14 * steps + ((cycle - 4) & mask)];
        Fp x51558 = args[2][15 * steps + ((cycle - 4) & mask)];
        Fp x51559 = args[2][16 * steps + ((cycle - 4) & mask)];
        Fp x51560 = args[2][17 * steps + ((cycle - 4) & mask)];
        Fp x51561 = args[2][18 * steps + ((cycle - 4) & mask)];
        Fp x51562 = args[2][19 * steps + ((cycle - 4) & mask)];
        Fp x51563 = args[2][20 * steps + ((cycle - 4) & mask)];
        Fp x51564 = args[2][21 * steps + ((cycle - 4) & mask)];
        Fp x51565 = args[2][22 * steps + ((cycle - 4) & mask)];
        Fp x51566 = args[2][23 * steps + ((cycle - 4) & mask)];
        Fp x51567 = args[2][24 * steps + ((cycle - 4) & mask)];
        Fp x51568 = args[2][25 * steps + ((cycle - 4) & mask)];
        Fp x51569 = args[2][26 * steps + ((cycle - 4) & mask)];
        Fp x51570 = args[2][27 * steps + ((cycle - 4) & mask)];
        Fp x51571 = args[2][28 * steps + ((cycle - 4) & mask)];
        Fp x51572 = args[2][29 * steps + ((cycle - 4) & mask)];
        Fp x51573 = args[2][30 * steps + ((cycle - 4) & mask)];
        Fp x51574 = args[2][31 * steps + ((cycle - 4) & mask)];
        Fp x51575 = args[2][0 * steps + ((cycle - 68) & mask)];
        Fp x51576 = args[2][1 * steps + ((cycle - 68) & mask)];
        Fp x51577 = args[2][2 * steps + ((cycle - 68) & mask)];
        Fp x51578 = args[2][3 * steps + ((cycle - 68) & mask)];
        Fp x51579 = args[2][4 * steps + ((cycle - 68) & mask)];
        Fp x51580 = args[2][5 * steps + ((cycle - 68) & mask)];
        Fp x51581 = args[2][6 * steps + ((cycle - 68) & mask)];
        Fp x51582 = args[2][7 * steps + ((cycle - 68) & mask)];
        Fp x51583 = args[2][8 * steps + ((cycle - 68) & mask)];
        Fp x51584 = args[2][9 * steps + ((cycle - 68) & mask)];
        Fp x51585 = args[2][10 * steps + ((cycle - 68) & mask)];
        Fp x51586 = args[2][11 * steps + ((cycle - 68) & mask)];
        Fp x51587 = args[2][12 * steps + ((cycle - 68) & mask)];
        Fp x51588 = args[2][13 * steps + ((cycle - 68) & mask)];
        Fp x51589 = args[2][14 * steps + ((cycle - 68) & mask)];
        Fp x51590 = args[2][15 * steps + ((cycle - 68) & mask)];
        Fp x51591 = args[2][16 * steps + ((cycle - 68) & mask)];
        Fp x51592 = args[2][17 * steps + ((cycle - 68) & mask)];
        Fp x51593 = args[2][18 * steps + ((cycle - 68) & mask)];
        Fp x51594 = args[2][19 * steps + ((cycle - 68) & mask)];
        Fp x51595 = args[2][20 * steps + ((cycle - 68) & mask)];
        Fp x51596 = args[2][21 * steps + ((cycle - 68) & mask)];
        Fp x51597 = args[2][22 * steps + ((cycle - 68) & mask)];
        Fp x51598 = args[2][23 * steps + ((cycle - 68) & mask)];
        Fp x51599 = args[2][24 * steps + ((cycle - 68) & mask)];
        Fp x51600 = args[2][25 * steps + ((cycle - 68) & mask)];
        Fp x51601 = args[2][26 * steps + ((cycle - 68) & mask)];
        Fp x51602 = args[2][27 * steps + ((cycle - 68) & mask)];
        Fp x51603 = args[2][28 * steps + ((cycle - 68) & mask)];
        Fp x51604 = args[2][29 * steps + ((cycle - 68) & mask)];
        Fp x51605 = args[2][30 * steps + ((cycle - 68) & mask)];
        Fp x51606 = args[2][31 * steps + ((cycle - 68) & mask)];
        Fp x51607 = args[2][32 * steps + ((cycle - 4) & mask)];
        Fp x51608 = args[2][33 * steps + ((cycle - 4) & mask)];
        Fp x51609 = args[2][34 * steps + ((cycle - 4) & mask)];
        Fp x51610 = args[2][35 * steps + ((cycle - 4) & mask)];
        Fp x51611 = args[2][36 * steps + ((cycle - 4) & mask)];
        Fp x51612 = args[2][37 * steps + ((cycle - 4) & mask)];
        Fp x51613 = args[2][38 * steps + ((cycle - 4) & mask)];
        Fp x51614 = args[2][39 * steps + ((cycle - 4) & mask)];
        Fp x51615 = args[2][40 * steps + ((cycle - 4) & mask)];
        Fp x51616 = args[2][41 * steps + ((cycle - 4) & mask)];
        Fp x51617 = args[2][42 * steps + ((cycle - 4) & mask)];
        Fp x51618 = args[2][43 * steps + ((cycle - 4) & mask)];
        Fp x51619 = args[2][44 * steps + ((cycle - 4) & mask)];
        Fp x51620 = args[2][45 * steps + ((cycle - 4) & mask)];
        Fp x51621 = args[2][46 * steps + ((cycle - 4) & mask)];
        Fp x51622 = args[2][47 * steps + ((cycle - 4) & mask)];
        Fp x51623 = args[2][48 * steps + ((cycle - 4) & mask)];
        Fp x51624 = args[2][49 * steps + ((cycle - 4) & mask)];
        Fp x51625 = args[2][50 * steps + ((cycle - 4) & mask)];
        Fp x51626 = args[2][51 * steps + ((cycle - 4) & mask)];
        Fp x51627 = args[2][52 * steps + ((cycle - 4) & mask)];
        Fp x51628 = args[2][53 * steps + ((cycle - 4) & mask)];
        Fp x51629 = args[2][54 * steps + ((cycle - 4) & mask)];
        Fp x51630 = args[2][55 * steps + ((cycle - 4) & mask)];
        Fp x51631 = args[2][56 * steps + ((cycle - 4) & mask)];
        Fp x51632 = args[2][57 * steps + ((cycle - 4) & mask)];
        Fp x51633 = args[2][58 * steps + ((cycle - 4) & mask)];
        Fp x51634 = args[2][59 * steps + ((cycle - 4) & mask)];
        Fp x51635 = args[2][60 * steps + ((cycle - 4) & mask)];
        Fp x51636 = args[2][61 * steps + ((cycle - 4) & mask)];
        Fp x51637 = args[2][62 * steps + ((cycle - 4) & mask)];
        Fp x51638 = args[2][63 * steps + ((cycle - 4) & mask)];
        Fp x51639 = args[2][32 * steps + ((cycle - 68) & mask)];
        Fp x51640 = args[2][33 * steps + ((cycle - 68) & mask)];
        Fp x51641 = args[2][34 * steps + ((cycle - 68) & mask)];
        Fp x51642 = args[2][35 * steps + ((cycle - 68) & mask)];
        Fp x51643 = args[2][36 * steps + ((cycle - 68) & mask)];
        Fp x51644 = args[2][37 * steps + ((cycle - 68) & mask)];
        Fp x51645 = args[2][38 * steps + ((cycle - 68) & mask)];
        Fp x51646 = args[2][39 * steps + ((cycle - 68) & mask)];
        Fp x51647 = args[2][40 * steps + ((cycle - 68) & mask)];
        Fp x51648 = args[2][41 * steps + ((cycle - 68) & mask)];
        Fp x51649 = args[2][42 * steps + ((cycle - 68) & mask)];
        Fp x51650 = args[2][43 * steps + ((cycle - 68) & mask)];
        Fp x51651 = args[2][44 * steps + ((cycle - 68) & mask)];
        Fp x51652 = args[2][45 * steps + ((cycle - 68) & mask)];
        Fp x51653 = args[2][46 * steps + ((cycle - 68) & mask)];
        Fp x51654 = args[2][47 * steps + ((cycle - 68) & mask)];
        Fp x51655 = args[2][48 * steps + ((cycle - 68) & mask)];
        Fp x51656 = args[2][49 * steps + ((cycle - 68) & mask)];
        Fp x51657 = args[2][50 * steps + ((cycle - 68) & mask)];
        Fp x51658 = args[2][51 * steps + ((cycle - 68) & mask)];
        Fp x51659 = args[2][52 * steps + ((cycle - 68) & mask)];
        Fp x51660 = args[2][53 * steps + ((cycle - 68) & mask)];
        Fp x51661 = args[2][54 * steps + ((cycle - 68) & mask)];
        Fp x51662 = args[2][55 * steps + ((cycle - 68) & mask)];
        Fp x51663 = args[2][56 * steps + ((cycle - 68) & mask)];
        Fp x51664 = args[2][57 * steps + ((cycle - 68) & mask)];
        Fp x51665 = args[2][58 * steps + ((cycle - 68) & mask)];
        Fp x51666 = args[2][59 * steps + ((cycle - 68) & mask)];
        Fp x51667 = args[2][60 * steps + ((cycle - 68) & mask)];
        Fp x51668 = args[2][61 * steps + ((cycle - 68) & mask)];
        Fp x51669 = args[2][62 * steps + ((cycle - 68) & mask)];
        Fp x51670 = args[2][63 * steps + ((cycle - 68) & mask)];
        Fp x51671 = x51544 * x1;
        Fp x51672 = x51543 + x51671;
        Fp x51673 = x51545 * x3;
        Fp x51674 = x51672 + x51673;
        Fp x51675 = x51546 * x6;
        Fp x51676 = x51674 + x51675;
        Fp x51677 = x51547 * x11;
        Fp x51678 = x51676 + x51677;
        Fp x51679 = x51548 * x27;
        Fp x51680 = x51678 + x51679;
        Fp x51681 = x51549 * x12;
        Fp x51682 = x51680 + x51681;
        Fp x51683 = x51550 * x28;
        Fp x51684 = x51682 + x51683;
        Fp x51685 = x51551 * x13;
        Fp x51686 = x51684 + x51685;
        Fp x51687 = x51552 * x29;
        Fp x51688 = x51686 + x51687;
        Fp x51689 = x51553 * x14;
        Fp x51690 = x51688 + x51689;
        Fp x51691 = x51554 * x30;
        Fp x51692 = x51690 + x51691;
        Fp x51693 = x51555 * x15;
        Fp x51694 = x51692 + x51693;
        Fp x51695 = x51556 * x31;
        Fp x51696 = x51694 + x51695;
        Fp x51697 = x51557 * x16;
        Fp x51698 = x51696 + x51697;
        Fp x51699 = x51558 * x32;
        Fp x51700 = x51698 + x51699;
        Fp x51701 = x51560 * x1;
        Fp x51702 = x51559 + x51701;
        Fp x51703 = x51561 * x3;
        Fp x51704 = x51702 + x51703;
        Fp x51705 = x51562 * x6;
        Fp x51706 = x51704 + x51705;
        Fp x51707 = x51563 * x11;
        Fp x51708 = x51706 + x51707;
        Fp x51709 = x51564 * x27;
        Fp x51710 = x51708 + x51709;
        Fp x51711 = x51565 * x12;
        Fp x51712 = x51710 + x51711;
        Fp x51713 = x51566 * x28;
        Fp x51714 = x51712 + x51713;
        Fp x51715 = x51567 * x13;
        Fp x51716 = x51714 + x51715;
        Fp x51717 = x51568 * x29;
        Fp x51718 = x51716 + x51717;
        Fp x51719 = x51569 * x14;
        Fp x51720 = x51718 + x51719;
        Fp x51721 = x51570 * x30;
        Fp x51722 = x51720 + x51721;
        Fp x51723 = x51571 * x15;
        Fp x51724 = x51722 + x51723;
        Fp x51725 = x51572 * x31;
        Fp x51726 = x51724 + x51725;
        Fp x51727 = x51573 * x16;
        Fp x51728 = x51726 + x51727;
        Fp x51729 = x51574 * x32;
        Fp x51730 = x51728 + x51729;
        Fp x51731 = x51576 * x1;
        Fp x51732 = x51575 + x51731;
        Fp x51733 = x51577 * x3;
        Fp x51734 = x51732 + x51733;
        Fp x51735 = x51578 * x6;
        Fp x51736 = x51734 + x51735;
        Fp x51737 = x51579 * x11;
        Fp x51738 = x51736 + x51737;
        Fp x51739 = x51580 * x27;
        Fp x51740 = x51738 + x51739;
        Fp x51741 = x51581 * x12;
        Fp x51742 = x51740 + x51741;
        Fp x51743 = x51582 * x28;
        Fp x51744 = x51742 + x51743;
        Fp x51745 = x51583 * x13;
        Fp x51746 = x51744 + x51745;
        Fp x51747 = x51584 * x29;
        Fp x51748 = x51746 + x51747;
        Fp x51749 = x51585 * x14;
        Fp x51750 = x51748 + x51749;
        Fp x51751 = x51586 * x30;
        Fp x51752 = x51750 + x51751;
        Fp x51753 = x51587 * x15;
        Fp x51754 = x51752 + x51753;
        Fp x51755 = x51588 * x31;
        Fp x51756 = x51754 + x51755;
        Fp x51757 = x51589 * x16;
        Fp x51758 = x51756 + x51757;
        Fp x51759 = x51590 * x32;
        Fp x51760 = x51758 + x51759;
        Fp x51761 = x51592 * x1;
        Fp x51762 = x51591 + x51761;
        Fp x51763 = x51593 * x3;
        Fp x51764 = x51762 + x51763;
        Fp x51765 = x51594 * x6;
        Fp x51766 = x51764 + x51765;
        Fp x51767 = x51595 * x11;
        Fp x51768 = x51766 + x51767;
        Fp x51769 = x51596 * x27;
        Fp x51770 = x51768 + x51769;
        Fp x51771 = x51597 * x12;
        Fp x51772 = x51770 + x51771;
        Fp x51773 = x51598 * x28;
        Fp x51774 = x51772 + x51773;
        Fp x51775 = x51599 * x13;
        Fp x51776 = x51774 + x51775;
        Fp x51777 = x51600 * x29;
        Fp x51778 = x51776 + x51777;
        Fp x51779 = x51601 * x14;
        Fp x51780 = x51778 + x51779;
        Fp x51781 = x51602 * x30;
        Fp x51782 = x51780 + x51781;
        Fp x51783 = x51603 * x15;
        Fp x51784 = x51782 + x51783;
        Fp x51785 = x51604 * x31;
        Fp x51786 = x51784 + x51785;
        Fp x51787 = x51605 * x16;
        Fp x51788 = x51786 + x51787;
        Fp x51789 = x51606 * x32;
        Fp x51790 = x51788 + x51789;
        Fp x51791 = x51700 + x51760;
        Fp x51792 = x51730 + x51790;
        args[2][116 * steps + cycle] = x51791;
        args[2][117 * steps + cycle] = x51792;
        Fp x51793 = x51608 * x1;
        Fp x51794 = x51607 + x51793;
        Fp x51795 = x51609 * x3;
        Fp x51796 = x51794 + x51795;
        Fp x51797 = x51610 * x6;
        Fp x51798 = x51796 + x51797;
        Fp x51799 = x51611 * x11;
        Fp x51800 = x51798 + x51799;
        Fp x51801 = x51612 * x27;
        Fp x51802 = x51800 + x51801;
        Fp x51803 = x51613 * x12;
        Fp x51804 = x51802 + x51803;
        Fp x51805 = x51614 * x28;
        Fp x51806 = x51804 + x51805;
        Fp x51807 = x51615 * x13;
        Fp x51808 = x51806 + x51807;
        Fp x51809 = x51616 * x29;
        Fp x51810 = x51808 + x51809;
        Fp x51811 = x51617 * x14;
        Fp x51812 = x51810 + x51811;
        Fp x51813 = x51618 * x30;
        Fp x51814 = x51812 + x51813;
        Fp x51815 = x51619 * x15;
        Fp x51816 = x51814 + x51815;
        Fp x51817 = x51620 * x31;
        Fp x51818 = x51816 + x51817;
        Fp x51819 = x51621 * x16;
        Fp x51820 = x51818 + x51819;
        Fp x51821 = x51622 * x32;
        Fp x51822 = x51820 + x51821;
        Fp x51823 = x51624 * x1;
        Fp x51824 = x51623 + x51823;
        Fp x51825 = x51625 * x3;
        Fp x51826 = x51824 + x51825;
        Fp x51827 = x51626 * x6;
        Fp x51828 = x51826 + x51827;
        Fp x51829 = x51627 * x11;
        Fp x51830 = x51828 + x51829;
        Fp x51831 = x51628 * x27;
        Fp x51832 = x51830 + x51831;
        Fp x51833 = x51629 * x12;
        Fp x51834 = x51832 + x51833;
        Fp x51835 = x51630 * x28;
        Fp x51836 = x51834 + x51835;
        Fp x51837 = x51631 * x13;
        Fp x51838 = x51836 + x51837;
        Fp x51839 = x51632 * x29;
        Fp x51840 = x51838 + x51839;
        Fp x51841 = x51633 * x14;
        Fp x51842 = x51840 + x51841;
        Fp x51843 = x51634 * x30;
        Fp x51844 = x51842 + x51843;
        Fp x51845 = x51635 * x15;
        Fp x51846 = x51844 + x51845;
        Fp x51847 = x51636 * x31;
        Fp x51848 = x51846 + x51847;
        Fp x51849 = x51637 * x16;
        Fp x51850 = x51848 + x51849;
        Fp x51851 = x51638 * x32;
        Fp x51852 = x51850 + x51851;
        Fp x51853 = x51640 * x1;
        Fp x51854 = x51639 + x51853;
        Fp x51855 = x51641 * x3;
        Fp x51856 = x51854 + x51855;
        Fp x51857 = x51642 * x6;
        Fp x51858 = x51856 + x51857;
        Fp x51859 = x51643 * x11;
        Fp x51860 = x51858 + x51859;
        Fp x51861 = x51644 * x27;
        Fp x51862 = x51860 + x51861;
        Fp x51863 = x51645 * x12;
        Fp x51864 = x51862 + x51863;
        Fp x51865 = x51646 * x28;
        Fp x51866 = x51864 + x51865;
        Fp x51867 = x51647 * x13;
        Fp x51868 = x51866 + x51867;
        Fp x51869 = x51648 * x29;
        Fp x51870 = x51868 + x51869;
        Fp x51871 = x51649 * x14;
        Fp x51872 = x51870 + x51871;
        Fp x51873 = x51650 * x30;
        Fp x51874 = x51872 + x51873;
        Fp x51875 = x51651 * x15;
        Fp x51876 = x51874 + x51875;
        Fp x51877 = x51652 * x31;
        Fp x51878 = x51876 + x51877;
        Fp x51879 = x51653 * x16;
        Fp x51880 = x51878 + x51879;
        Fp x51881 = x51654 * x32;
        Fp x51882 = x51880 + x51881;
        Fp x51883 = x51656 * x1;
        Fp x51884 = x51655 + x51883;
        Fp x51885 = x51657 * x3;
        Fp x51886 = x51884 + x51885;
        Fp x51887 = x51658 * x6;
        Fp x51888 = x51886 + x51887;
        Fp x51889 = x51659 * x11;
        Fp x51890 = x51888 + x51889;
        Fp x51891 = x51660 * x27;
        Fp x51892 = x51890 + x51891;
        Fp x51893 = x51661 * x12;
        Fp x51894 = x51892 + x51893;
        Fp x51895 = x51662 * x28;
        Fp x51896 = x51894 + x51895;
        Fp x51897 = x51663 * x13;
        Fp x51898 = x51896 + x51897;
        Fp x51899 = x51664 * x29;
        Fp x51900 = x51898 + x51899;
        Fp x51901 = x51665 * x14;
        Fp x51902 = x51900 + x51901;
        Fp x51903 = x51666 * x30;
        Fp x51904 = x51902 + x51903;
        Fp x51905 = x51667 * x15;
        Fp x51906 = x51904 + x51905;
        Fp x51907 = x51668 * x31;
        Fp x51908 = x51906 + x51907;
        Fp x51909 = x51669 * x16;
        Fp x51910 = x51908 + x51909;
        Fp x51911 = x51670 * x32;
        Fp x51912 = x51910 + x51911;
        Fp x51913 = x51822 + x51882;
        Fp x51914 = x51852 + x51912;
        args[2][118 * steps + cycle] = x51913;
        args[2][119 * steps + cycle] = x51914;
        Fp x51915 = x51542 - x71;
        {
          Fp x51916 = (x51915 == 0) ? Fp(1) : Fp(0);
          Fp x51917 = x71 - x51916;
          args[2][112 * steps + cycle] = x51917;
          Fp x51918 = inv(x51915);
          args[2][113 * steps + cycle] = x51918;
        }
        Fp x51919 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x51920 = x51915 * x51919;
        Fp x51921 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x51922 = x51920 - x51921;
        if (x51922 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x51923 = x71 - x51921;
        Fp x51924 = x51923 * x51915;
        if (x51924 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x51925 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x51926 = args[2][117 * steps + ((cycle - 0) & mask)];
        {
          Fp x51927 = Fp(x51925.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x51927;
          Fp x51928 = x51925 - x51927;
          Fp x51929 = x51928 * x26;
          Fp x51930 = Fp(x51929.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x51930;
          Fp x51931 = x51929 - x51930;
          Fp x51932 = x51931 * x26;
          Fp x51933 = Fp(x51932.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x51933;
          Fp x51934 = x51932 - x51933;
          Fp x51935 = x51934 * x26;
          Fp x51936 = Fp(x51935.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x51936;
          Fp x51937 = x51935 - x51936;
          Fp x51938 = x51937 * x26;
          Fp x51939 = Fp(x51938.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x51939;
          Fp x51940 = x51938 - x51939;
          Fp x51941 = x51940 * x26;
          Fp x51942 = Fp(x51941.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x51942;
          Fp x51943 = x51941 - x51942;
          Fp x51944 = x51943 * x26;
          Fp x51945 = Fp(x51944.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x51945;
          Fp x51946 = x51944 - x51945;
          Fp x51947 = x51946 * x26;
          Fp x51948 = Fp(x51947.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x51948;
          Fp x51949 = x51947 - x51948;
          Fp x51950 = x51949 * x26;
          Fp x51951 = Fp(x51950.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x51951;
          Fp x51952 = x51950 - x51951;
          Fp x51953 = x51952 * x26;
          Fp x51954 = Fp(x51953.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x51954;
          Fp x51955 = x51953 - x51954;
          Fp x51956 = x51955 * x26;
          Fp x51957 = Fp(x51956.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x51957;
          Fp x51958 = x51956 - x51957;
          Fp x51959 = x51958 * x26;
          Fp x51960 = Fp(x51959.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x51960;
          Fp x51961 = x51959 - x51960;
          Fp x51962 = x51961 * x26;
          Fp x51963 = Fp(x51962.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x51963;
          Fp x51964 = x51962 - x51963;
          Fp x51965 = x51964 * x26;
          Fp x51966 = Fp(x51965.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x51966;
          Fp x51967 = x51965 - x51966;
          Fp x51968 = x51967 * x26;
          Fp x51969 = Fp(x51968.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x51969;
          Fp x51970 = x51968 - x51969;
          Fp x51971 = x51970 * x26;
          Fp x51972 = Fp(x51971.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x51972;
        }
        Fp x51973 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x51974 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x51975 = x51974 * x1;
        Fp x51976 = x51973 + x51975;
        Fp x51977 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x51978 = x51977 * x3;
        Fp x51979 = x51976 + x51978;
        Fp x51980 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x51981 = x51980 * x6;
        Fp x51982 = x51979 + x51981;
        Fp x51983 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x51984 = x51983 * x11;
        Fp x51985 = x51982 + x51984;
        Fp x51986 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x51987 = x51986 * x27;
        Fp x51988 = x51985 + x51987;
        Fp x51989 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x51990 = x51989 * x12;
        Fp x51991 = x51988 + x51990;
        Fp x51992 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x51993 = x51992 * x28;
        Fp x51994 = x51991 + x51993;
        Fp x51995 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x51996 = x51995 * x13;
        Fp x51997 = x51994 + x51996;
        Fp x51998 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x51999 = x51998 * x29;
        Fp x52000 = x51997 + x51999;
        Fp x52001 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x52002 = x52001 * x14;
        Fp x52003 = x52000 + x52002;
        Fp x52004 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x52005 = x52004 * x30;
        Fp x52006 = x52003 + x52005;
        Fp x52007 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x52008 = x52007 * x15;
        Fp x52009 = x52006 + x52008;
        Fp x52010 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x52011 = x52010 * x31;
        Fp x52012 = x52009 + x52011;
        Fp x52013 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x52014 = x52013 * x16;
        Fp x52015 = x52012 + x52014;
        Fp x52016 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x52017 = x52016 * x32;
        Fp x52018 = x52015 + x52017;
        Fp x52019 = x51925 - x52018;
        Fp x52020 = x52019 * x33;
        args[2][108 * steps + cycle] = x52020;
        Fp x52021 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x52022 = x51926 + x52021;
        {
          Fp x52023 = Fp(x52022.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x52023;
          Fp x52024 = x52022 - x52023;
          Fp x52025 = x52024 * x26;
          Fp x52026 = Fp(x52025.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x52026;
          Fp x52027 = x52025 - x52026;
          Fp x52028 = x52027 * x26;
          Fp x52029 = Fp(x52028.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x52029;
          Fp x52030 = x52028 - x52029;
          Fp x52031 = x52030 * x26;
          Fp x52032 = Fp(x52031.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x52032;
          Fp x52033 = x52031 - x52032;
          Fp x52034 = x52033 * x26;
          Fp x52035 = Fp(x52034.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x52035;
          Fp x52036 = x52034 - x52035;
          Fp x52037 = x52036 * x26;
          Fp x52038 = Fp(x52037.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x52038;
          Fp x52039 = x52037 - x52038;
          Fp x52040 = x52039 * x26;
          Fp x52041 = Fp(x52040.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x52041;
          Fp x52042 = x52040 - x52041;
          Fp x52043 = x52042 * x26;
          Fp x52044 = Fp(x52043.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x52044;
          Fp x52045 = x52043 - x52044;
          Fp x52046 = x52045 * x26;
          Fp x52047 = Fp(x52046.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x52047;
          Fp x52048 = x52046 - x52047;
          Fp x52049 = x52048 * x26;
          Fp x52050 = Fp(x52049.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x52050;
          Fp x52051 = x52049 - x52050;
          Fp x52052 = x52051 * x26;
          Fp x52053 = Fp(x52052.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x52053;
          Fp x52054 = x52052 - x52053;
          Fp x52055 = x52054 * x26;
          Fp x52056 = Fp(x52055.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x52056;
          Fp x52057 = x52055 - x52056;
          Fp x52058 = x52057 * x26;
          Fp x52059 = Fp(x52058.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x52059;
          Fp x52060 = x52058 - x52059;
          Fp x52061 = x52060 * x26;
          Fp x52062 = Fp(x52061.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x52062;
          Fp x52063 = x52061 - x52062;
          Fp x52064 = x52063 * x26;
          Fp x52065 = Fp(x52064.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x52065;
          Fp x52066 = x52064 - x52065;
          Fp x52067 = x52066 * x26;
          Fp x52068 = Fp(x52067.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x52068;
        }
        Fp x52069 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x52070 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x52071 = x52070 * x1;
        Fp x52072 = x52069 + x52071;
        Fp x52073 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x52074 = x52073 * x3;
        Fp x52075 = x52072 + x52074;
        Fp x52076 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x52077 = x52076 * x6;
        Fp x52078 = x52075 + x52077;
        Fp x52079 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x52080 = x52079 * x11;
        Fp x52081 = x52078 + x52080;
        Fp x52082 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x52083 = x52082 * x27;
        Fp x52084 = x52081 + x52083;
        Fp x52085 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x52086 = x52085 * x12;
        Fp x52087 = x52084 + x52086;
        Fp x52088 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x52089 = x52088 * x28;
        Fp x52090 = x52087 + x52089;
        Fp x52091 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x52092 = x52091 * x13;
        Fp x52093 = x52090 + x52092;
        Fp x52094 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x52095 = x52094 * x29;
        Fp x52096 = x52093 + x52095;
        Fp x52097 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x52098 = x52097 * x14;
        Fp x52099 = x52096 + x52098;
        Fp x52100 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x52101 = x52100 * x30;
        Fp x52102 = x52099 + x52101;
        Fp x52103 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x52104 = x52103 * x15;
        Fp x52105 = x52102 + x52104;
        Fp x52106 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x52107 = x52106 * x31;
        Fp x52108 = x52105 + x52107;
        Fp x52109 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x52110 = x52109 * x16;
        Fp x52111 = x52108 + x52110;
        Fp x52112 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x52113 = x52112 * x32;
        Fp x52114 = x52111 + x52113;
        Fp x52115 = x52022 - x52114;
        Fp x52116 = x52115 * x33;
        args[2][109 * steps + cycle] = x52116;
        Fp x52117 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x52118 = args[2][119 * steps + ((cycle - 0) & mask)];
        {
          Fp x52119 = Fp(x52117.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x52119;
          Fp x52120 = x52117 - x52119;
          Fp x52121 = x52120 * x26;
          Fp x52122 = Fp(x52121.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x52122;
          Fp x52123 = x52121 - x52122;
          Fp x52124 = x52123 * x26;
          Fp x52125 = Fp(x52124.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x52125;
          Fp x52126 = x52124 - x52125;
          Fp x52127 = x52126 * x26;
          Fp x52128 = Fp(x52127.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x52128;
          Fp x52129 = x52127 - x52128;
          Fp x52130 = x52129 * x26;
          Fp x52131 = Fp(x52130.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x52131;
          Fp x52132 = x52130 - x52131;
          Fp x52133 = x52132 * x26;
          Fp x52134 = Fp(x52133.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x52134;
          Fp x52135 = x52133 - x52134;
          Fp x52136 = x52135 * x26;
          Fp x52137 = Fp(x52136.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x52137;
          Fp x52138 = x52136 - x52137;
          Fp x52139 = x52138 * x26;
          Fp x52140 = Fp(x52139.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x52140;
          Fp x52141 = x52139 - x52140;
          Fp x52142 = x52141 * x26;
          Fp x52143 = Fp(x52142.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x52143;
          Fp x52144 = x52142 - x52143;
          Fp x52145 = x52144 * x26;
          Fp x52146 = Fp(x52145.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x52146;
          Fp x52147 = x52145 - x52146;
          Fp x52148 = x52147 * x26;
          Fp x52149 = Fp(x52148.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x52149;
          Fp x52150 = x52148 - x52149;
          Fp x52151 = x52150 * x26;
          Fp x52152 = Fp(x52151.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x52152;
          Fp x52153 = x52151 - x52152;
          Fp x52154 = x52153 * x26;
          Fp x52155 = Fp(x52154.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x52155;
          Fp x52156 = x52154 - x52155;
          Fp x52157 = x52156 * x26;
          Fp x52158 = Fp(x52157.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x52158;
          Fp x52159 = x52157 - x52158;
          Fp x52160 = x52159 * x26;
          Fp x52161 = Fp(x52160.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x52161;
          Fp x52162 = x52160 - x52161;
          Fp x52163 = x52162 * x26;
          Fp x52164 = Fp(x52163.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x52164;
        }
        Fp x52165 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x52166 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x52167 = x52166 * x1;
        Fp x52168 = x52165 + x52167;
        Fp x52169 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x52170 = x52169 * x3;
        Fp x52171 = x52168 + x52170;
        Fp x52172 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x52173 = x52172 * x6;
        Fp x52174 = x52171 + x52173;
        Fp x52175 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x52176 = x52175 * x11;
        Fp x52177 = x52174 + x52176;
        Fp x52178 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x52179 = x52178 * x27;
        Fp x52180 = x52177 + x52179;
        Fp x52181 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x52182 = x52181 * x12;
        Fp x52183 = x52180 + x52182;
        Fp x52184 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x52185 = x52184 * x28;
        Fp x52186 = x52183 + x52185;
        Fp x52187 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x52188 = x52187 * x13;
        Fp x52189 = x52186 + x52188;
        Fp x52190 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x52191 = x52190 * x29;
        Fp x52192 = x52189 + x52191;
        Fp x52193 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x52194 = x52193 * x14;
        Fp x52195 = x52192 + x52194;
        Fp x52196 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x52197 = x52196 * x30;
        Fp x52198 = x52195 + x52197;
        Fp x52199 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x52200 = x52199 * x15;
        Fp x52201 = x52198 + x52200;
        Fp x52202 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x52203 = x52202 * x31;
        Fp x52204 = x52201 + x52203;
        Fp x52205 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x52206 = x52205 * x16;
        Fp x52207 = x52204 + x52206;
        Fp x52208 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x52209 = x52208 * x32;
        Fp x52210 = x52207 + x52209;
        Fp x52211 = x52117 - x52210;
        Fp x52212 = x52211 * x33;
        args[2][110 * steps + cycle] = x52212;
        Fp x52213 = args[2][110 * steps + ((cycle - 0) & mask)];
        Fp x52214 = x52118 + x52213;
        {
          Fp x52215 = Fp(x52214.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x52215;
          Fp x52216 = x52214 - x52215;
          Fp x52217 = x52216 * x26;
          Fp x52218 = Fp(x52217.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x52218;
          Fp x52219 = x52217 - x52218;
          Fp x52220 = x52219 * x26;
          Fp x52221 = Fp(x52220.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x52221;
          Fp x52222 = x52220 - x52221;
          Fp x52223 = x52222 * x26;
          Fp x52224 = Fp(x52223.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x52224;
          Fp x52225 = x52223 - x52224;
          Fp x52226 = x52225 * x26;
          Fp x52227 = Fp(x52226.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x52227;
          Fp x52228 = x52226 - x52227;
          Fp x52229 = x52228 * x26;
          Fp x52230 = Fp(x52229.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x52230;
          Fp x52231 = x52229 - x52230;
          Fp x52232 = x52231 * x26;
          Fp x52233 = Fp(x52232.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x52233;
          Fp x52234 = x52232 - x52233;
          Fp x52235 = x52234 * x26;
          Fp x52236 = Fp(x52235.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x52236;
          Fp x52237 = x52235 - x52236;
          Fp x52238 = x52237 * x26;
          Fp x52239 = Fp(x52238.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x52239;
          Fp x52240 = x52238 - x52239;
          Fp x52241 = x52240 * x26;
          Fp x52242 = Fp(x52241.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x52242;
          Fp x52243 = x52241 - x52242;
          Fp x52244 = x52243 * x26;
          Fp x52245 = Fp(x52244.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x52245;
          Fp x52246 = x52244 - x52245;
          Fp x52247 = x52246 * x26;
          Fp x52248 = Fp(x52247.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x52248;
          Fp x52249 = x52247 - x52248;
          Fp x52250 = x52249 * x26;
          Fp x52251 = Fp(x52250.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x52251;
          Fp x52252 = x52250 - x52251;
          Fp x52253 = x52252 * x26;
          Fp x52254 = Fp(x52253.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x52254;
          Fp x52255 = x52253 - x52254;
          Fp x52256 = x52255 * x26;
          Fp x52257 = Fp(x52256.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x52257;
          Fp x52258 = x52256 - x52257;
          Fp x52259 = x52258 * x26;
          Fp x52260 = Fp(x52259.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x52260;
        }
        Fp x52261 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x52262 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x52263 = x52262 * x1;
        Fp x52264 = x52261 + x52263;
        Fp x52265 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x52266 = x52265 * x3;
        Fp x52267 = x52264 + x52266;
        Fp x52268 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x52269 = x52268 * x6;
        Fp x52270 = x52267 + x52269;
        Fp x52271 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x52272 = x52271 * x11;
        Fp x52273 = x52270 + x52272;
        Fp x52274 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x52275 = x52274 * x27;
        Fp x52276 = x52273 + x52275;
        Fp x52277 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x52278 = x52277 * x12;
        Fp x52279 = x52276 + x52278;
        Fp x52280 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x52281 = x52280 * x28;
        Fp x52282 = x52279 + x52281;
        Fp x52283 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x52284 = x52283 * x13;
        Fp x52285 = x52282 + x52284;
        Fp x52286 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x52287 = x52286 * x29;
        Fp x52288 = x52285 + x52287;
        Fp x52289 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x52290 = x52289 * x14;
        Fp x52291 = x52288 + x52290;
        Fp x52292 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x52293 = x52292 * x30;
        Fp x52294 = x52291 + x52293;
        Fp x52295 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x52296 = x52295 * x15;
        Fp x52297 = x52294 + x52296;
        Fp x52298 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x52299 = x52298 * x31;
        Fp x52300 = x52297 + x52299;
        Fp x52301 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x52302 = x52301 * x16;
        Fp x52303 = x52300 + x52302;
        Fp x52304 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x52305 = x52304 * x32;
        Fp x52306 = x52303 + x52305;
        Fp x52307 = x52214 - x52306;
        Fp x52308 = x52307 * x33;
        args[2][111 * steps + cycle] = x52308;
        Fp x52309 = args[2][128 * steps + ((cycle - 0) & mask)];
        Fp x52310 = x52309 * x3;
        Fp x52311 = args[2][130 * steps + ((cycle - 0) & mask)];
        Fp x52312 = args[2][129 * steps + ((cycle - 0) & mask)];
        host_args[0] = x52310;
        host_args[1] = x52311;
        host_args[2] = x52312;
        host(ctx, "log", "  FINI, load, addr = %x, val = 0x%04x%04x", host_args.data(), 3, host_outs.data(), 0);
        args[2][127 * steps + cycle] = x7;
        if (x51921 != 0) {
          Fp x52313 = x51535 + x71;
          args[2][126 * steps + cycle] = x52313;
        }
        if (x51923 != 0) {
          Fp x52314 = args[2][130 * steps + ((cycle - 4) & mask)];
          Fp x52315 = args[2][129 * steps + ((cycle - 4) & mask)];
          host_args[0] = x52114;
          host_args[1] = x52018;
          host_args[2] = x52311;
          host_args[3] = x52312;
          host_args[4] = x52306;
          host_args[5] = x52210;
          host_args[6] = x52314;
          host_args[7] = x52315;
          host(ctx, "log", "  VERIFY, 0x%04x%04x == 0x%04x%04x, 0x%04x%04x == 0x%04x%04x", host_args.data(), 8, host_outs.data(), 0);
          Fp x52316 = x51535 - x71;
          args[2][126 * steps + cycle] = x52316;
          Fp x52317 = x52114 - x52311;
          if (x52317 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:300");
          Fp x52318 = x52018 - x52312;
          if (x52318 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:301");
          Fp x52319 = x52306 - x52314;
          if (x52319 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:302");
          Fp x52320 = x52210 - x52315;
          if (x52320 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:303");
        }
        Fp x52321 = x52021 - x71;
        Fp x52322 = x52021 * x52321;
        if (x52322 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:272");
        Fp x52323 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x52324 = x52323 - x71;
        Fp x52325 = x52323 * x52324;
        if (x52325 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:273");
        Fp x52326 = x52213 - x71;
        Fp x52327 = x52213 * x52326;
        if (x52327 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:274");
        Fp x52328 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x52329 = x52328 - x71;
        Fp x52330 = x52328 * x52329;
        if (x52330 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:275");
        Fp x52331 = x51921 - x71;
        Fp x52332 = x51921 * x52331;
        if (x52332 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:276");
      }
      Fp x52333 = args[2][122 * steps + ((cycle - 0) & mask)];
      Fp x52334 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x52335 = args[2][123 * steps + ((cycle - 0) & mask)];
      Fp x52336 = args[2][124 * steps + ((cycle - 0) & mask)];
      Fp x52337 = args[2][125 * steps + ((cycle - 0) & mask)];
      Fp x52338 = args[2][126 * steps + ((cycle - 0) & mask)];
      Fp x52339 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x52340 = args[2][98 * steps + ((cycle - 0) & mask)];
      host_args[0] = x52333;
      host_args[1] = x52334;
      host_args[2] = x52335;
      host_args[3] = x52336;
      host_args[4] = x52337;
      host_args[5] = x52338;
      host_args[6] = x52339;
      host_args[7] = x52340;
      host(ctx, "log", "  descriptor=%x, isMerkle=%d, count=%d, index=%x, source=%x, digest=%x, contOp=%d, contHash=%d", host_args.data(), 8, host_outs.data(), 0);
      Fp x52341 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x52342 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x52343 = x52342 * x1;
      Fp x52344 = x52341 + x52343;
      Fp x52345 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x52346 = x52345 * x3;
      Fp x52347 = x52344 + x52346;
      Fp x52348 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x52349 = x52348 * x6;
      Fp x52350 = x52347 + x52349;
      Fp x52351 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x52352 = x52351 * x11;
      Fp x52353 = x52350 + x52352;
      Fp x52354 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x52355 = x52354 * x27;
      Fp x52356 = x52353 + x52355;
      Fp x52357 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x52358 = x52357 * x12;
      Fp x52359 = x52356 + x52358;
      Fp x52360 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x52361 = x52360 * x28;
      Fp x52362 = x52359 + x52361;
      Fp x52363 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x52364 = x52363 * x13;
      Fp x52365 = x52362 + x52364;
      Fp x52366 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x52367 = x52366 * x29;
      Fp x52368 = x52365 + x52367;
      Fp x52369 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x52370 = x52369 * x14;
      Fp x52371 = x52368 + x52370;
      Fp x52372 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x52373 = x52372 * x30;
      Fp x52374 = x52371 + x52373;
      Fp x52375 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x52376 = x52375 * x15;
      Fp x52377 = x52374 + x52376;
      Fp x52378 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x52379 = x52378 * x31;
      Fp x52380 = x52377 + x52379;
      Fp x52381 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x52382 = x52381 * x16;
      Fp x52383 = x52380 + x52382;
      Fp x52384 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x52385 = x52384 * x32;
      Fp x52386 = x52383 + x52385;
      Fp x52387 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x52388 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x52389 = x52388 * x1;
      Fp x52390 = x52387 + x52389;
      Fp x52391 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x52392 = x52391 * x3;
      Fp x52393 = x52390 + x52392;
      Fp x52394 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x52395 = x52394 * x6;
      Fp x52396 = x52393 + x52395;
      Fp x52397 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x52398 = x52397 * x11;
      Fp x52399 = x52396 + x52398;
      Fp x52400 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x52401 = x52400 * x27;
      Fp x52402 = x52399 + x52401;
      Fp x52403 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x52404 = x52403 * x12;
      Fp x52405 = x52402 + x52404;
      Fp x52406 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x52407 = x52406 * x28;
      Fp x52408 = x52405 + x52407;
      Fp x52409 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x52410 = x52409 * x13;
      Fp x52411 = x52408 + x52410;
      Fp x52412 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x52413 = x52412 * x29;
      Fp x52414 = x52411 + x52413;
      Fp x52415 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x52416 = x52415 * x14;
      Fp x52417 = x52414 + x52416;
      Fp x52418 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x52419 = x52418 * x30;
      Fp x52420 = x52417 + x52419;
      Fp x52421 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x52422 = x52421 * x15;
      Fp x52423 = x52420 + x52422;
      Fp x52424 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x52425 = x52424 * x31;
      Fp x52426 = x52423 + x52425;
      Fp x52427 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x52428 = x52427 * x16;
      Fp x52429 = x52426 + x52428;
      Fp x52430 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x52431 = x52430 * x32;
      Fp x52432 = x52429 + x52431;
      Fp x52433 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x52434 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x52435 = x52434 * x1;
      Fp x52436 = x52433 + x52435;
      Fp x52437 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x52438 = x52437 * x3;
      Fp x52439 = x52436 + x52438;
      Fp x52440 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x52441 = x52440 * x6;
      Fp x52442 = x52439 + x52441;
      Fp x52443 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x52444 = x52443 * x11;
      Fp x52445 = x52442 + x52444;
      Fp x52446 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x52447 = x52446 * x27;
      Fp x52448 = x52445 + x52447;
      Fp x52449 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x52450 = x52449 * x12;
      Fp x52451 = x52448 + x52450;
      Fp x52452 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x52453 = x52452 * x28;
      Fp x52454 = x52451 + x52453;
      Fp x52455 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x52456 = x52455 * x13;
      Fp x52457 = x52454 + x52456;
      Fp x52458 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x52459 = x52458 * x29;
      Fp x52460 = x52457 + x52459;
      Fp x52461 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x52462 = x52461 * x14;
      Fp x52463 = x52460 + x52462;
      Fp x52464 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x52465 = x52464 * x30;
      Fp x52466 = x52463 + x52465;
      Fp x52467 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x52468 = x52467 * x15;
      Fp x52469 = x52466 + x52468;
      Fp x52470 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x52471 = x52470 * x31;
      Fp x52472 = x52469 + x52471;
      Fp x52473 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x52474 = x52473 * x16;
      Fp x52475 = x52472 + x52474;
      Fp x52476 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x52477 = x52476 * x32;
      Fp x52478 = x52475 + x52477;
      Fp x52479 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x52480 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x52481 = x52480 * x1;
      Fp x52482 = x52479 + x52481;
      Fp x52483 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x52484 = x52483 * x3;
      Fp x52485 = x52482 + x52484;
      Fp x52486 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x52487 = x52486 * x6;
      Fp x52488 = x52485 + x52487;
      Fp x52489 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x52490 = x52489 * x11;
      Fp x52491 = x52488 + x52490;
      Fp x52492 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x52493 = x52492 * x27;
      Fp x52494 = x52491 + x52493;
      Fp x52495 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x52496 = x52495 * x12;
      Fp x52497 = x52494 + x52496;
      Fp x52498 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x52499 = x52498 * x28;
      Fp x52500 = x52497 + x52499;
      Fp x52501 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x52502 = x52501 * x13;
      Fp x52503 = x52500 + x52502;
      Fp x52504 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x52505 = x52504 * x29;
      Fp x52506 = x52503 + x52505;
      Fp x52507 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x52508 = x52507 * x14;
      Fp x52509 = x52506 + x52508;
      Fp x52510 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x52511 = x52510 * x30;
      Fp x52512 = x52509 + x52511;
      Fp x52513 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x52514 = x52513 * x15;
      Fp x52515 = x52512 + x52514;
      Fp x52516 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x52517 = x52516 * x31;
      Fp x52518 = x52515 + x52517;
      Fp x52519 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x52520 = x52519 * x16;
      Fp x52521 = x52518 + x52520;
      Fp x52522 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x52523 = x52522 * x32;
      Fp x52524 = x52521 + x52523;
      host_args[0] = x52386;
      host_args[1] = x52432;
      host_args[2] = x52478;
      host_args[3] = x52524;
      host(ctx, "log", "  a=%04x%04x, e=%04x%04x", host_args.data(), 4, host_outs.data(), 0);
      Fp x52525 = x52387 - x71;
      Fp x52526 = x52387 * x52525;
      if (x52526 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52527 = x52388 - x71;
      Fp x52528 = x52388 * x52527;
      if (x52528 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52529 = x52391 - x71;
      Fp x52530 = x52391 * x52529;
      if (x52530 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52531 = x52394 - x71;
      Fp x52532 = x52394 * x52531;
      if (x52532 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52533 = x52397 - x71;
      Fp x52534 = x52397 * x52533;
      if (x52534 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52535 = x52400 - x71;
      Fp x52536 = x52400 * x52535;
      if (x52536 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52537 = x52403 - x71;
      Fp x52538 = x52403 * x52537;
      if (x52538 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52539 = x52406 - x71;
      Fp x52540 = x52406 * x52539;
      if (x52540 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52541 = x52409 - x71;
      Fp x52542 = x52409 * x52541;
      if (x52542 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52543 = x52412 - x71;
      Fp x52544 = x52412 * x52543;
      if (x52544 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52545 = x52415 - x71;
      Fp x52546 = x52415 * x52545;
      if (x52546 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52547 = x52418 - x71;
      Fp x52548 = x52418 * x52547;
      if (x52548 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52549 = x52421 - x71;
      Fp x52550 = x52421 * x52549;
      if (x52550 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52551 = x52424 - x71;
      Fp x52552 = x52424 * x52551;
      if (x52552 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52553 = x52427 - x71;
      Fp x52554 = x52427 * x52553;
      if (x52554 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52555 = x52430 - x71;
      Fp x52556 = x52430 * x52555;
      if (x52556 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52557 = x52341 - x71;
      Fp x52558 = x52341 * x52557;
      if (x52558 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52559 = x52342 - x71;
      Fp x52560 = x52342 * x52559;
      if (x52560 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52561 = x52345 - x71;
      Fp x52562 = x52345 * x52561;
      if (x52562 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52563 = x52348 - x71;
      Fp x52564 = x52348 * x52563;
      if (x52564 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52565 = x52351 - x71;
      Fp x52566 = x52351 * x52565;
      if (x52566 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52567 = x52354 - x71;
      Fp x52568 = x52354 * x52567;
      if (x52568 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52569 = x52357 - x71;
      Fp x52570 = x52357 * x52569;
      if (x52570 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52571 = x52360 - x71;
      Fp x52572 = x52360 * x52571;
      if (x52572 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52573 = x52363 - x71;
      Fp x52574 = x52363 * x52573;
      if (x52574 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52575 = x52366 - x71;
      Fp x52576 = x52366 * x52575;
      if (x52576 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52577 = x52369 - x71;
      Fp x52578 = x52369 * x52577;
      if (x52578 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52579 = x52372 - x71;
      Fp x52580 = x52372 * x52579;
      if (x52580 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52581 = x52375 - x71;
      Fp x52582 = x52375 * x52581;
      if (x52582 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52583 = x52378 - x71;
      Fp x52584 = x52378 * x52583;
      if (x52584 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52585 = x52381 - x71;
      Fp x52586 = x52381 * x52585;
      if (x52586 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52587 = x52384 - x71;
      Fp x52588 = x52384 * x52587;
      if (x52588 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52589 = x52479 - x71;
      Fp x52590 = x52479 * x52589;
      if (x52590 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52591 = x52480 - x71;
      Fp x52592 = x52480 * x52591;
      if (x52592 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52593 = x52483 - x71;
      Fp x52594 = x52483 * x52593;
      if (x52594 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52595 = x52486 - x71;
      Fp x52596 = x52486 * x52595;
      if (x52596 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52597 = x52489 - x71;
      Fp x52598 = x52489 * x52597;
      if (x52598 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52599 = x52492 - x71;
      Fp x52600 = x52492 * x52599;
      if (x52600 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52601 = x52495 - x71;
      Fp x52602 = x52495 * x52601;
      if (x52602 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52603 = x52498 - x71;
      Fp x52604 = x52498 * x52603;
      if (x52604 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52605 = x52501 - x71;
      Fp x52606 = x52501 * x52605;
      if (x52606 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52607 = x52504 - x71;
      Fp x52608 = x52504 * x52607;
      if (x52608 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52609 = x52507 - x71;
      Fp x52610 = x52507 * x52609;
      if (x52610 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52611 = x52510 - x71;
      Fp x52612 = x52510 * x52611;
      if (x52612 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52613 = x52513 - x71;
      Fp x52614 = x52513 * x52613;
      if (x52614 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52615 = x52516 - x71;
      Fp x52616 = x52516 * x52615;
      if (x52616 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52617 = x52519 - x71;
      Fp x52618 = x52519 * x52617;
      if (x52618 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52619 = x52522 - x71;
      Fp x52620 = x52522 * x52619;
      if (x52620 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52621 = x52433 - x71;
      Fp x52622 = x52433 * x52621;
      if (x52622 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52623 = x52434 - x71;
      Fp x52624 = x52434 * x52623;
      if (x52624 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52625 = x52437 - x71;
      Fp x52626 = x52437 * x52625;
      if (x52626 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52627 = x52440 - x71;
      Fp x52628 = x52440 * x52627;
      if (x52628 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52629 = x52443 - x71;
      Fp x52630 = x52443 * x52629;
      if (x52630 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52631 = x52446 - x71;
      Fp x52632 = x52446 * x52631;
      if (x52632 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52633 = x52449 - x71;
      Fp x52634 = x52449 * x52633;
      if (x52634 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52635 = x52452 - x71;
      Fp x52636 = x52452 * x52635;
      if (x52636 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52637 = x52455 - x71;
      Fp x52638 = x52455 * x52637;
      if (x52638 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52639 = x52458 - x71;
      Fp x52640 = x52458 * x52639;
      if (x52640 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52641 = x52461 - x71;
      Fp x52642 = x52461 * x52641;
      if (x52642 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52643 = x52464 - x71;
      Fp x52644 = x52464 * x52643;
      if (x52644 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52645 = x52467 - x71;
      Fp x52646 = x52467 * x52645;
      if (x52646 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52647 = x52470 - x71;
      Fp x52648 = x52470 * x52647;
      if (x52648 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52649 = x52473 - x71;
      Fp x52650 = x52473 * x52649;
      if (x52650 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52651 = x52476 - x71;
      Fp x52652 = x52476 * x52651;
      if (x52652 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52653 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x52654 = x52653 - x71;
      Fp x52655 = x52653 * x52654;
      if (x52655 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52656 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x52657 = x52656 - x71;
      Fp x52658 = x52656 * x52657;
      if (x52658 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52659 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x52660 = x52659 - x71;
      Fp x52661 = x52659 * x52660;
      if (x52661 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52662 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x52663 = x52662 - x71;
      Fp x52664 = x52662 * x52663;
      if (x52664 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52665 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x52666 = x52665 - x71;
      Fp x52667 = x52665 * x52666;
      if (x52667 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52668 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x52669 = x52668 - x71;
      Fp x52670 = x52668 * x52669;
      if (x52670 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52671 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x52672 = x52671 - x71;
      Fp x52673 = x52671 * x52672;
      if (x52673 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52674 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x52675 = x52674 - x71;
      Fp x52676 = x52674 * x52675;
      if (x52676 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52677 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x52678 = x52677 - x71;
      Fp x52679 = x52677 * x52678;
      if (x52679 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52680 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x52681 = x52680 - x71;
      Fp x52682 = x52680 * x52681;
      if (x52682 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52683 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x52684 = x52683 - x71;
      Fp x52685 = x52683 * x52684;
      if (x52685 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52686 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x52687 = x52686 - x71;
      Fp x52688 = x52686 * x52687;
      if (x52688 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52689 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x52690 = x52689 - x71;
      Fp x52691 = x52689 * x52690;
      if (x52691 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52692 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x52693 = x52692 - x71;
      Fp x52694 = x52692 * x52693;
      if (x52694 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52695 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x52696 = x52695 - x71;
      Fp x52697 = x52695 * x52696;
      if (x52697 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52698 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x52699 = x52698 - x71;
      Fp x52700 = x52698 * x52699;
      if (x52700 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52701 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x52702 = x52701 - x71;
      Fp x52703 = x52701 * x52702;
      if (x52703 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52704 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x52705 = x52704 - x71;
      Fp x52706 = x52704 * x52705;
      if (x52706 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52707 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x52708 = x52707 - x71;
      Fp x52709 = x52707 * x52708;
      if (x52709 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52710 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x52711 = x52710 - x71;
      Fp x52712 = x52710 * x52711;
      if (x52712 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52713 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x52714 = x52713 - x71;
      Fp x52715 = x52713 * x52714;
      if (x52715 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52716 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x52717 = x52716 - x71;
      Fp x52718 = x52716 * x52717;
      if (x52718 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52719 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x52720 = x52719 - x71;
      Fp x52721 = x52719 * x52720;
      if (x52721 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52722 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x52723 = x52722 - x71;
      Fp x52724 = x52722 * x52723;
      if (x52724 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52725 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x52726 = x52725 - x71;
      Fp x52727 = x52725 * x52726;
      if (x52727 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52728 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x52729 = x52728 - x71;
      Fp x52730 = x52728 * x52729;
      if (x52730 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52731 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x52732 = x52731 - x71;
      Fp x52733 = x52731 * x52732;
      if (x52733 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52734 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x52735 = x52734 - x71;
      Fp x52736 = x52734 * x52735;
      if (x52736 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52737 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x52738 = x52737 - x71;
      Fp x52739 = x52737 * x52738;
      if (x52739 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52740 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x52741 = x52740 - x71;
      Fp x52742 = x52740 * x52741;
      if (x52742 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52743 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x52744 = x52743 - x71;
      Fp x52745 = x52743 * x52744;
      if (x52745 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52746 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x52747 = x52746 - x71;
      Fp x52748 = x52746 * x52747;
      if (x52748 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52749 = x52334 - x71;
      Fp x52750 = x52334 * x52749;
      if (x52750 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52751 = x52339 - x71;
      Fp x52752 = x52339 * x52751;
      if (x52752 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52753 = x52340 - x71;
      Fp x52754 = x52340 * x52753;
      if (x52754 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52755 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x52756 = x52755 - x71;
      Fp x52757 = x52755 * x52756;
      if (x52757 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x52758 = x47617 - x71;
      Fp x52759 = x47617 * x52758;
      if (x52759 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x52760 = x47597 - x71;
      Fp x52761 = x47597 * x52760;
      if (x52761 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x52762 = x47598 - x71;
      Fp x52763 = x47598 * x52762;
      if (x52763 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x52764 = x47601 - x71;
      Fp x52765 = x47601 * x52764;
      if (x52765 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x52766 = x47604 - x71;
      Fp x52767 = x47604 * x52766;
      if (x52767 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x52768 = x47607 - x71;
      Fp x52769 = x47607 * x52768;
      if (x52769 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x52770 = x47610 - x71;
      Fp x52771 = x47610 * x52770;
      if (x52771 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x52772 = x47613 - x71;
      Fp x52773 = x47613 * x52772;
      if (x52773 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x52774 = x47617 + x47597;
      Fp x52775 = x52774 + x47598;
      Fp x52776 = x52775 + x47601;
      Fp x52777 = x52776 + x47604;
      Fp x52778 = x52777 + x47607;
      Fp x52779 = x52778 + x47610;
      Fp x52780 = x52779 + x47613;
      Fp x52781 = x52780 - x71;
      if (x52781 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
    }
    Fp x52782 = args[2][142 * steps + ((cycle - 0) & mask)];
    if (x52782 != 0) {
      Fp x52783 = args[2][64 * steps + ((cycle - 2) & mask)];
      Fp x52784 = args[2][65 * steps + ((cycle - 2) & mask)];
      Fp x52785 = args[2][66 * steps + ((cycle - 2) & mask)];
      Fp x52786 = args[2][67 * steps + ((cycle - 2) & mask)];
      Fp x52787 = args[2][68 * steps + ((cycle - 2) & mask)];
      Fp x52788 = args[2][69 * steps + ((cycle - 2) & mask)];
      Fp x52789 = args[2][70 * steps + ((cycle - 2) & mask)];
      Fp x52790 = args[2][71 * steps + ((cycle - 2) & mask)];
      Fp x52791 = args[2][72 * steps + ((cycle - 2) & mask)];
      Fp x52792 = args[2][73 * steps + ((cycle - 2) & mask)];
      Fp x52793 = args[2][74 * steps + ((cycle - 2) & mask)];
      Fp x52794 = args[2][75 * steps + ((cycle - 2) & mask)];
      Fp x52795 = args[2][76 * steps + ((cycle - 2) & mask)];
      Fp x52796 = args[2][77 * steps + ((cycle - 2) & mask)];
      Fp x52797 = args[2][78 * steps + ((cycle - 2) & mask)];
      Fp x52798 = args[2][79 * steps + ((cycle - 2) & mask)];
      Fp x52799 = args[2][80 * steps + ((cycle - 2) & mask)];
      Fp x52800 = args[2][81 * steps + ((cycle - 2) & mask)];
      Fp x52801 = args[2][82 * steps + ((cycle - 2) & mask)];
      Fp x52802 = args[2][83 * steps + ((cycle - 2) & mask)];
      Fp x52803 = args[2][84 * steps + ((cycle - 2) & mask)];
      Fp x52804 = args[2][85 * steps + ((cycle - 2) & mask)];
      Fp x52805 = args[2][86 * steps + ((cycle - 2) & mask)];
      Fp x52806 = args[2][87 * steps + ((cycle - 2) & mask)];
      Fp x52807 = args[2][88 * steps + ((cycle - 2) & mask)];
      Fp x52808 = args[2][89 * steps + ((cycle - 2) & mask)];
      Fp x52809 = args[2][90 * steps + ((cycle - 2) & mask)];
      Fp x52810 = args[2][91 * steps + ((cycle - 2) & mask)];
      Fp x52811 = args[2][92 * steps + ((cycle - 2) & mask)];
      Fp x52812 = args[2][93 * steps + ((cycle - 2) & mask)];
      Fp x52813 = args[2][94 * steps + ((cycle - 2) & mask)];
      Fp x52814 = args[2][95 * steps + ((cycle - 2) & mask)];
      Fp x52815 = args[2][64 * steps + ((cycle - 7) & mask)];
      Fp x52816 = args[2][65 * steps + ((cycle - 7) & mask)];
      Fp x52817 = args[2][66 * steps + ((cycle - 7) & mask)];
      Fp x52818 = args[2][67 * steps + ((cycle - 7) & mask)];
      Fp x52819 = args[2][68 * steps + ((cycle - 7) & mask)];
      Fp x52820 = args[2][69 * steps + ((cycle - 7) & mask)];
      Fp x52821 = args[2][70 * steps + ((cycle - 7) & mask)];
      Fp x52822 = args[2][71 * steps + ((cycle - 7) & mask)];
      Fp x52823 = args[2][72 * steps + ((cycle - 7) & mask)];
      Fp x52824 = args[2][73 * steps + ((cycle - 7) & mask)];
      Fp x52825 = args[2][74 * steps + ((cycle - 7) & mask)];
      Fp x52826 = args[2][75 * steps + ((cycle - 7) & mask)];
      Fp x52827 = args[2][76 * steps + ((cycle - 7) & mask)];
      Fp x52828 = args[2][77 * steps + ((cycle - 7) & mask)];
      Fp x52829 = args[2][78 * steps + ((cycle - 7) & mask)];
      Fp x52830 = args[2][79 * steps + ((cycle - 7) & mask)];
      Fp x52831 = args[2][80 * steps + ((cycle - 7) & mask)];
      Fp x52832 = args[2][81 * steps + ((cycle - 7) & mask)];
      Fp x52833 = args[2][82 * steps + ((cycle - 7) & mask)];
      Fp x52834 = args[2][83 * steps + ((cycle - 7) & mask)];
      Fp x52835 = args[2][84 * steps + ((cycle - 7) & mask)];
      Fp x52836 = args[2][85 * steps + ((cycle - 7) & mask)];
      Fp x52837 = args[2][86 * steps + ((cycle - 7) & mask)];
      Fp x52838 = args[2][87 * steps + ((cycle - 7) & mask)];
      Fp x52839 = args[2][88 * steps + ((cycle - 7) & mask)];
      Fp x52840 = args[2][89 * steps + ((cycle - 7) & mask)];
      Fp x52841 = args[2][90 * steps + ((cycle - 7) & mask)];
      Fp x52842 = args[2][91 * steps + ((cycle - 7) & mask)];
      Fp x52843 = args[2][92 * steps + ((cycle - 7) & mask)];
      Fp x52844 = args[2][93 * steps + ((cycle - 7) & mask)];
      Fp x52845 = args[2][94 * steps + ((cycle - 7) & mask)];
      Fp x52846 = args[2][95 * steps + ((cycle - 7) & mask)];
      Fp x52847 = args[2][64 * steps + ((cycle - 15) & mask)];
      Fp x52848 = args[2][65 * steps + ((cycle - 15) & mask)];
      Fp x52849 = args[2][66 * steps + ((cycle - 15) & mask)];
      Fp x52850 = args[2][67 * steps + ((cycle - 15) & mask)];
      Fp x52851 = args[2][68 * steps + ((cycle - 15) & mask)];
      Fp x52852 = args[2][69 * steps + ((cycle - 15) & mask)];
      Fp x52853 = args[2][70 * steps + ((cycle - 15) & mask)];
      Fp x52854 = args[2][71 * steps + ((cycle - 15) & mask)];
      Fp x52855 = args[2][72 * steps + ((cycle - 15) & mask)];
      Fp x52856 = args[2][73 * steps + ((cycle - 15) & mask)];
      Fp x52857 = args[2][74 * steps + ((cycle - 15) & mask)];
      Fp x52858 = args[2][75 * steps + ((cycle - 15) & mask)];
      Fp x52859 = args[2][76 * steps + ((cycle - 15) & mask)];
      Fp x52860 = args[2][77 * steps + ((cycle - 15) & mask)];
      Fp x52861 = args[2][78 * steps + ((cycle - 15) & mask)];
      Fp x52862 = args[2][79 * steps + ((cycle - 15) & mask)];
      Fp x52863 = args[2][80 * steps + ((cycle - 15) & mask)];
      Fp x52864 = args[2][81 * steps + ((cycle - 15) & mask)];
      Fp x52865 = args[2][82 * steps + ((cycle - 15) & mask)];
      Fp x52866 = args[2][83 * steps + ((cycle - 15) & mask)];
      Fp x52867 = args[2][84 * steps + ((cycle - 15) & mask)];
      Fp x52868 = args[2][85 * steps + ((cycle - 15) & mask)];
      Fp x52869 = args[2][86 * steps + ((cycle - 15) & mask)];
      Fp x52870 = args[2][87 * steps + ((cycle - 15) & mask)];
      Fp x52871 = args[2][88 * steps + ((cycle - 15) & mask)];
      Fp x52872 = args[2][89 * steps + ((cycle - 15) & mask)];
      Fp x52873 = args[2][90 * steps + ((cycle - 15) & mask)];
      Fp x52874 = args[2][91 * steps + ((cycle - 15) & mask)];
      Fp x52875 = args[2][92 * steps + ((cycle - 15) & mask)];
      Fp x52876 = args[2][93 * steps + ((cycle - 15) & mask)];
      Fp x52877 = args[2][94 * steps + ((cycle - 15) & mask)];
      Fp x52878 = args[2][95 * steps + ((cycle - 15) & mask)];
      Fp x52879 = args[2][64 * steps + ((cycle - 16) & mask)];
      Fp x52880 = args[2][65 * steps + ((cycle - 16) & mask)];
      Fp x52881 = args[2][66 * steps + ((cycle - 16) & mask)];
      Fp x52882 = args[2][67 * steps + ((cycle - 16) & mask)];
      Fp x52883 = args[2][68 * steps + ((cycle - 16) & mask)];
      Fp x52884 = args[2][69 * steps + ((cycle - 16) & mask)];
      Fp x52885 = args[2][70 * steps + ((cycle - 16) & mask)];
      Fp x52886 = args[2][71 * steps + ((cycle - 16) & mask)];
      Fp x52887 = args[2][72 * steps + ((cycle - 16) & mask)];
      Fp x52888 = args[2][73 * steps + ((cycle - 16) & mask)];
      Fp x52889 = args[2][74 * steps + ((cycle - 16) & mask)];
      Fp x52890 = args[2][75 * steps + ((cycle - 16) & mask)];
      Fp x52891 = args[2][76 * steps + ((cycle - 16) & mask)];
      Fp x52892 = args[2][77 * steps + ((cycle - 16) & mask)];
      Fp x52893 = args[2][78 * steps + ((cycle - 16) & mask)];
      Fp x52894 = args[2][79 * steps + ((cycle - 16) & mask)];
      Fp x52895 = args[2][80 * steps + ((cycle - 16) & mask)];
      Fp x52896 = args[2][81 * steps + ((cycle - 16) & mask)];
      Fp x52897 = args[2][82 * steps + ((cycle - 16) & mask)];
      Fp x52898 = args[2][83 * steps + ((cycle - 16) & mask)];
      Fp x52899 = args[2][84 * steps + ((cycle - 16) & mask)];
      Fp x52900 = args[2][85 * steps + ((cycle - 16) & mask)];
      Fp x52901 = args[2][86 * steps + ((cycle - 16) & mask)];
      Fp x52902 = args[2][87 * steps + ((cycle - 16) & mask)];
      Fp x52903 = args[2][88 * steps + ((cycle - 16) & mask)];
      Fp x52904 = args[2][89 * steps + ((cycle - 16) & mask)];
      Fp x52905 = args[2][90 * steps + ((cycle - 16) & mask)];
      Fp x52906 = args[2][91 * steps + ((cycle - 16) & mask)];
      Fp x52907 = args[2][92 * steps + ((cycle - 16) & mask)];
      Fp x52908 = args[2][93 * steps + ((cycle - 16) & mask)];
      Fp x52909 = args[2][94 * steps + ((cycle - 16) & mask)];
      Fp x52910 = args[2][95 * steps + ((cycle - 16) & mask)];
      Fp x52911 = x52865 + x52850;
      Fp x52912 = x52865 * x1;
      Fp x52913 = x52912 * x52850;
      Fp x52914 = x52911 - x52913;
      Fp x52915 = x52866 + x52851;
      Fp x52916 = x52866 * x1;
      Fp x52917 = x52916 * x52851;
      Fp x52918 = x52915 - x52917;
      Fp x52919 = x52867 + x52852;
      Fp x52920 = x52867 * x1;
      Fp x52921 = x52920 * x52852;
      Fp x52922 = x52919 - x52921;
      Fp x52923 = x52868 + x52853;
      Fp x52924 = x52868 * x1;
      Fp x52925 = x52924 * x52853;
      Fp x52926 = x52923 - x52925;
      Fp x52927 = x52869 + x52854;
      Fp x52928 = x52869 * x1;
      Fp x52929 = x52928 * x52854;
      Fp x52930 = x52927 - x52929;
      Fp x52931 = x52870 + x52855;
      Fp x52932 = x52870 * x1;
      Fp x52933 = x52932 * x52855;
      Fp x52934 = x52931 - x52933;
      Fp x52935 = x52871 + x52856;
      Fp x52936 = x52871 * x1;
      Fp x52937 = x52936 * x52856;
      Fp x52938 = x52935 - x52937;
      Fp x52939 = x52872 + x52857;
      Fp x52940 = x52872 * x1;
      Fp x52941 = x52940 * x52857;
      Fp x52942 = x52939 - x52941;
      Fp x52943 = x52873 + x52858;
      Fp x52944 = x52873 * x1;
      Fp x52945 = x52944 * x52858;
      Fp x52946 = x52943 - x52945;
      Fp x52947 = x52874 + x52859;
      Fp x52948 = x52874 * x1;
      Fp x52949 = x52948 * x52859;
      Fp x52950 = x52947 - x52949;
      Fp x52951 = x52875 + x52860;
      Fp x52952 = x52875 * x1;
      Fp x52953 = x52952 * x52860;
      Fp x52954 = x52951 - x52953;
      Fp x52955 = x52876 + x52861;
      Fp x52956 = x52876 * x1;
      Fp x52957 = x52956 * x52861;
      Fp x52958 = x52955 - x52957;
      Fp x52959 = x52877 + x52862;
      Fp x52960 = x52877 * x1;
      Fp x52961 = x52960 * x52862;
      Fp x52962 = x52959 - x52961;
      Fp x52963 = x52878 + x52863;
      Fp x52964 = x52878 * x1;
      Fp x52965 = x52964 * x52863;
      Fp x52966 = x52963 - x52965;
      Fp x52967 = x52847 + x52864;
      Fp x52968 = x52847 * x1;
      Fp x52969 = x52968 * x52864;
      Fp x52970 = x52967 - x52969;
      Fp x52971 = x52848 + x52865;
      Fp x52972 = x52848 * x1;
      Fp x52973 = x52972 * x52865;
      Fp x52974 = x52971 - x52973;
      Fp x52975 = x52849 + x52866;
      Fp x52976 = x52849 * x1;
      Fp x52977 = x52976 * x52866;
      Fp x52978 = x52975 - x52977;
      Fp x52979 = x52850 + x52867;
      Fp x52980 = x52850 * x1;
      Fp x52981 = x52980 * x52867;
      Fp x52982 = x52979 - x52981;
      Fp x52983 = x52851 + x52868;
      Fp x52984 = x52851 * x1;
      Fp x52985 = x52984 * x52868;
      Fp x52986 = x52983 - x52985;
      Fp x52987 = x52852 + x52869;
      Fp x52988 = x52852 * x1;
      Fp x52989 = x52988 * x52869;
      Fp x52990 = x52987 - x52989;
      Fp x52991 = x52853 + x52870;
      Fp x52992 = x52853 * x1;
      Fp x52993 = x52992 * x52870;
      Fp x52994 = x52991 - x52993;
      Fp x52995 = x52854 + x52871;
      Fp x52996 = x52854 * x1;
      Fp x52997 = x52996 * x52871;
      Fp x52998 = x52995 - x52997;
      Fp x52999 = x52855 + x52872;
      Fp x53000 = x52855 * x1;
      Fp x53001 = x53000 * x52872;
      Fp x53002 = x52999 - x53001;
      Fp x53003 = x52856 + x52873;
      Fp x53004 = x52856 * x1;
      Fp x53005 = x53004 * x52873;
      Fp x53006 = x53003 - x53005;
      Fp x53007 = x52857 + x52874;
      Fp x53008 = x52857 * x1;
      Fp x53009 = x53008 * x52874;
      Fp x53010 = x53007 - x53009;
      Fp x53011 = x52858 + x52875;
      Fp x53012 = x52858 * x1;
      Fp x53013 = x53012 * x52875;
      Fp x53014 = x53011 - x53013;
      Fp x53015 = x52859 + x52876;
      Fp x53016 = x52859 * x1;
      Fp x53017 = x53016 * x52876;
      Fp x53018 = x53015 - x53017;
      Fp x53019 = x52860 + x52877;
      Fp x53020 = x52860 * x1;
      Fp x53021 = x53020 * x52877;
      Fp x53022 = x53019 - x53021;
      Fp x53023 = x52861 + x52878;
      Fp x53024 = x52861 * x1;
      Fp x53025 = x53024 * x52878;
      Fp x53026 = x53023 - x53025;
      Fp x53027 = x52854 + x52914;
      Fp x53028 = x52996 * x52914;
      Fp x53029 = x53027 - x53028;
      Fp x53030 = x52855 + x52918;
      Fp x53031 = x53000 * x52918;
      Fp x53032 = x53030 - x53031;
      Fp x53033 = x52856 + x52922;
      Fp x53034 = x53004 * x52922;
      Fp x53035 = x53033 - x53034;
      Fp x53036 = x52857 + x52926;
      Fp x53037 = x53008 * x52926;
      Fp x53038 = x53036 - x53037;
      Fp x53039 = x52858 + x52930;
      Fp x53040 = x53012 * x52930;
      Fp x53041 = x53039 - x53040;
      Fp x53042 = x52859 + x52934;
      Fp x53043 = x53016 * x52934;
      Fp x53044 = x53042 - x53043;
      Fp x53045 = x52860 + x52938;
      Fp x53046 = x53020 * x52938;
      Fp x53047 = x53045 - x53046;
      Fp x53048 = x52861 + x52942;
      Fp x53049 = x53024 * x52942;
      Fp x53050 = x53048 - x53049;
      Fp x53051 = x52862 + x52946;
      Fp x53052 = x52862 * x1;
      Fp x53053 = x53052 * x52946;
      Fp x53054 = x53051 - x53053;
      Fp x53055 = x52863 + x52950;
      Fp x53056 = x52863 * x1;
      Fp x53057 = x53056 * x52950;
      Fp x53058 = x53055 - x53057;
      Fp x53059 = x52864 + x52954;
      Fp x53060 = x52864 * x1;
      Fp x53061 = x53060 * x52954;
      Fp x53062 = x53059 - x53061;
      Fp x53063 = x52865 + x52958;
      Fp x53064 = x52912 * x52958;
      Fp x53065 = x53063 - x53064;
      Fp x53066 = x52866 + x52962;
      Fp x53067 = x52916 * x52962;
      Fp x53068 = x53066 - x53067;
      Fp x53069 = x52867 + x52966;
      Fp x53070 = x52920 * x52966;
      Fp x53071 = x53069 - x53070;
      Fp x53072 = x52868 + x52970;
      Fp x53073 = x52924 * x52970;
      Fp x53074 = x53072 - x53073;
      Fp x53075 = x52869 + x52974;
      Fp x53076 = x52928 * x52974;
      Fp x53077 = x53075 - x53076;
      Fp x53078 = x52870 + x52978;
      Fp x53079 = x52932 * x52978;
      Fp x53080 = x53078 - x53079;
      Fp x53081 = x52871 + x52982;
      Fp x53082 = x52936 * x52982;
      Fp x53083 = x53081 - x53082;
      Fp x53084 = x52872 + x52986;
      Fp x53085 = x52940 * x52986;
      Fp x53086 = x53084 - x53085;
      Fp x53087 = x52873 + x52990;
      Fp x53088 = x52944 * x52990;
      Fp x53089 = x53087 - x53088;
      Fp x53090 = x52874 + x52994;
      Fp x53091 = x52948 * x52994;
      Fp x53092 = x53090 - x53091;
      Fp x53093 = x52875 + x52998;
      Fp x53094 = x52952 * x52998;
      Fp x53095 = x53093 - x53094;
      Fp x53096 = x52876 + x53002;
      Fp x53097 = x52956 * x53002;
      Fp x53098 = x53096 - x53097;
      Fp x53099 = x52877 + x53006;
      Fp x53100 = x52960 * x53006;
      Fp x53101 = x53099 - x53100;
      Fp x53102 = x52878 + x53010;
      Fp x53103 = x52964 * x53010;
      Fp x53104 = x53102 - x53103;
      Fp x53105 = x52847 + x53014;
      Fp x53106 = x52968 * x53014;
      Fp x53107 = x53105 - x53106;
      Fp x53108 = x52848 + x53018;
      Fp x53109 = x52972 * x53018;
      Fp x53110 = x53108 - x53109;
      Fp x53111 = x52849 + x53022;
      Fp x53112 = x52976 * x53022;
      Fp x53113 = x53111 - x53112;
      Fp x53114 = x52850 + x53026;
      Fp x53115 = x52980 * x53026;
      Fp x53116 = x53114 - x53115;
      Fp x53117 = x52851 + x52862;
      Fp x53118 = x52984 * x52862;
      Fp x53119 = x53117 - x53118;
      Fp x53120 = x52852 + x52863;
      Fp x53121 = x52988 * x52863;
      Fp x53122 = x53120 - x53121;
      Fp x53123 = x52853 + x52864;
      Fp x53124 = x52992 * x52864;
      Fp x53125 = x53123 - x53124;
      Fp x53126 = x52802 + x52793;
      Fp x53127 = x52802 * x1;
      Fp x53128 = x53127 * x52793;
      Fp x53129 = x53126 - x53128;
      Fp x53130 = x52803 + x52794;
      Fp x53131 = x52803 * x1;
      Fp x53132 = x53131 * x52794;
      Fp x53133 = x53130 - x53132;
      Fp x53134 = x52804 + x52795;
      Fp x53135 = x52804 * x1;
      Fp x53136 = x53135 * x52795;
      Fp x53137 = x53134 - x53136;
      Fp x53138 = x52805 + x52796;
      Fp x53139 = x52805 * x1;
      Fp x53140 = x53139 * x52796;
      Fp x53141 = x53138 - x53140;
      Fp x53142 = x52806 + x52797;
      Fp x53143 = x52806 * x1;
      Fp x53144 = x53143 * x52797;
      Fp x53145 = x53142 - x53144;
      Fp x53146 = x52807 + x52798;
      Fp x53147 = x52807 * x1;
      Fp x53148 = x53147 * x52798;
      Fp x53149 = x53146 - x53148;
      Fp x53150 = x52808 + x52799;
      Fp x53151 = x52808 * x1;
      Fp x53152 = x53151 * x52799;
      Fp x53153 = x53150 - x53152;
      Fp x53154 = x52809 + x52800;
      Fp x53155 = x52809 * x1;
      Fp x53156 = x53155 * x52800;
      Fp x53157 = x53154 - x53156;
      Fp x53158 = x52810 + x52801;
      Fp x53159 = x52810 * x1;
      Fp x53160 = x53159 * x52801;
      Fp x53161 = x53158 - x53160;
      Fp x53162 = x52811 + x52802;
      Fp x53163 = x52811 * x1;
      Fp x53164 = x53163 * x52802;
      Fp x53165 = x53162 - x53164;
      Fp x53166 = x52812 + x52803;
      Fp x53167 = x52812 * x1;
      Fp x53168 = x53167 * x52803;
      Fp x53169 = x53166 - x53168;
      Fp x53170 = x52813 + x52804;
      Fp x53171 = x52813 * x1;
      Fp x53172 = x53171 * x52804;
      Fp x53173 = x53170 - x53172;
      Fp x53174 = x52814 + x52805;
      Fp x53175 = x52814 * x1;
      Fp x53176 = x53175 * x52805;
      Fp x53177 = x53174 - x53176;
      Fp x53178 = x52783 + x52806;
      Fp x53179 = x52783 * x1;
      Fp x53180 = x53179 * x52806;
      Fp x53181 = x53178 - x53180;
      Fp x53182 = x52784 + x52807;
      Fp x53183 = x52784 * x1;
      Fp x53184 = x53183 * x52807;
      Fp x53185 = x53182 - x53184;
      Fp x53186 = x52785 + x52808;
      Fp x53187 = x52785 * x1;
      Fp x53188 = x53187 * x52808;
      Fp x53189 = x53186 - x53188;
      Fp x53190 = x52786 + x52809;
      Fp x53191 = x52786 * x1;
      Fp x53192 = x53191 * x52809;
      Fp x53193 = x53190 - x53192;
      Fp x53194 = x52787 + x52810;
      Fp x53195 = x52787 * x1;
      Fp x53196 = x53195 * x52810;
      Fp x53197 = x53194 - x53196;
      Fp x53198 = x52788 + x52811;
      Fp x53199 = x52788 * x1;
      Fp x53200 = x53199 * x52811;
      Fp x53201 = x53198 - x53200;
      Fp x53202 = x52789 + x52812;
      Fp x53203 = x52789 * x1;
      Fp x53204 = x53203 * x52812;
      Fp x53205 = x53202 - x53204;
      Fp x53206 = x52790 + x52813;
      Fp x53207 = x52790 * x1;
      Fp x53208 = x53207 * x52813;
      Fp x53209 = x53206 - x53208;
      Fp x53210 = x52791 + x52814;
      Fp x53211 = x52791 * x1;
      Fp x53212 = x53211 * x52814;
      Fp x53213 = x53210 - x53212;
      Fp x53214 = x52800 + x53129;
      Fp x53215 = x52800 * x1;
      Fp x53216 = x53215 * x53129;
      Fp x53217 = x53214 - x53216;
      Fp x53218 = x52801 + x53133;
      Fp x53219 = x52801 * x1;
      Fp x53220 = x53219 * x53133;
      Fp x53221 = x53218 - x53220;
      Fp x53222 = x52802 + x53137;
      Fp x53223 = x53127 * x53137;
      Fp x53224 = x53222 - x53223;
      Fp x53225 = x52803 + x53141;
      Fp x53226 = x53131 * x53141;
      Fp x53227 = x53225 - x53226;
      Fp x53228 = x52804 + x53145;
      Fp x53229 = x53135 * x53145;
      Fp x53230 = x53228 - x53229;
      Fp x53231 = x52805 + x53149;
      Fp x53232 = x53139 * x53149;
      Fp x53233 = x53231 - x53232;
      Fp x53234 = x52806 + x53153;
      Fp x53235 = x53143 * x53153;
      Fp x53236 = x53234 - x53235;
      Fp x53237 = x52807 + x53157;
      Fp x53238 = x53147 * x53157;
      Fp x53239 = x53237 - x53238;
      Fp x53240 = x52808 + x53161;
      Fp x53241 = x53151 * x53161;
      Fp x53242 = x53240 - x53241;
      Fp x53243 = x52809 + x53165;
      Fp x53244 = x53155 * x53165;
      Fp x53245 = x53243 - x53244;
      Fp x53246 = x52810 + x53169;
      Fp x53247 = x53159 * x53169;
      Fp x53248 = x53246 - x53247;
      Fp x53249 = x52811 + x53173;
      Fp x53250 = x53163 * x53173;
      Fp x53251 = x53249 - x53250;
      Fp x53252 = x52812 + x53177;
      Fp x53253 = x53167 * x53177;
      Fp x53254 = x53252 - x53253;
      Fp x53255 = x52813 + x53181;
      Fp x53256 = x53171 * x53181;
      Fp x53257 = x53255 - x53256;
      Fp x53258 = x52814 + x53185;
      Fp x53259 = x53175 * x53185;
      Fp x53260 = x53258 - x53259;
      Fp x53261 = x52783 + x53189;
      Fp x53262 = x53179 * x53189;
      Fp x53263 = x53261 - x53262;
      Fp x53264 = x52784 + x53193;
      Fp x53265 = x53183 * x53193;
      Fp x53266 = x53264 - x53265;
      Fp x53267 = x52785 + x53197;
      Fp x53268 = x53187 * x53197;
      Fp x53269 = x53267 - x53268;
      Fp x53270 = x52786 + x53201;
      Fp x53271 = x53191 * x53201;
      Fp x53272 = x53270 - x53271;
      Fp x53273 = x52787 + x53205;
      Fp x53274 = x53195 * x53205;
      Fp x53275 = x53273 - x53274;
      Fp x53276 = x52788 + x53209;
      Fp x53277 = x53199 * x53209;
      Fp x53278 = x53276 - x53277;
      Fp x53279 = x52789 + x53213;
      Fp x53280 = x53203 * x53213;
      Fp x53281 = x53279 - x53280;
      Fp x53282 = x52790 + x52792;
      Fp x53283 = x53207 * x52792;
      Fp x53284 = x53282 - x53283;
      Fp x53285 = x52791 + x52793;
      Fp x53286 = x53211 * x52793;
      Fp x53287 = x53285 - x53286;
      Fp x53288 = x52792 + x52794;
      Fp x53289 = x52792 * x1;
      Fp x53290 = x53289 * x52794;
      Fp x53291 = x53288 - x53290;
      Fp x53292 = x52793 + x52795;
      Fp x53293 = x52793 * x1;
      Fp x53294 = x53293 * x52795;
      Fp x53295 = x53292 - x53294;
      Fp x53296 = x52794 + x52796;
      Fp x53297 = x52794 * x1;
      Fp x53298 = x53297 * x52796;
      Fp x53299 = x53296 - x53298;
      Fp x53300 = x52795 + x52797;
      Fp x53301 = x52795 * x1;
      Fp x53302 = x53301 * x52797;
      Fp x53303 = x53300 - x53302;
      Fp x53304 = x52796 + x52798;
      Fp x53305 = x52796 * x1;
      Fp x53306 = x53305 * x52798;
      Fp x53307 = x53304 - x53306;
      Fp x53308 = x52797 + x52799;
      Fp x53309 = x52797 * x1;
      Fp x53310 = x53309 * x52799;
      Fp x53311 = x53308 - x53310;
      Fp x53312 = x52798 + x52800;
      Fp x53313 = x52798 * x1;
      Fp x53314 = x53313 * x52800;
      Fp x53315 = x53312 - x53314;
      Fp x53316 = x52799 + x52801;
      Fp x53317 = x52799 * x1;
      Fp x53318 = x53317 * x52801;
      Fp x53319 = x53316 - x53318;
      Fp x53320 = x52880 * x1;
      Fp x53321 = x52879 + x53320;
      Fp x53322 = x52881 * x3;
      Fp x53323 = x53321 + x53322;
      Fp x53324 = x52882 * x6;
      Fp x53325 = x53323 + x53324;
      Fp x53326 = x52883 * x11;
      Fp x53327 = x53325 + x53326;
      Fp x53328 = x52884 * x27;
      Fp x53329 = x53327 + x53328;
      Fp x53330 = x52885 * x12;
      Fp x53331 = x53329 + x53330;
      Fp x53332 = x52886 * x28;
      Fp x53333 = x53331 + x53332;
      Fp x53334 = x52887 * x13;
      Fp x53335 = x53333 + x53334;
      Fp x53336 = x52888 * x29;
      Fp x53337 = x53335 + x53336;
      Fp x53338 = x52889 * x14;
      Fp x53339 = x53337 + x53338;
      Fp x53340 = x52890 * x30;
      Fp x53341 = x53339 + x53340;
      Fp x53342 = x52891 * x15;
      Fp x53343 = x53341 + x53342;
      Fp x53344 = x52892 * x31;
      Fp x53345 = x53343 + x53344;
      Fp x53346 = x52893 * x16;
      Fp x53347 = x53345 + x53346;
      Fp x53348 = x52894 * x32;
      Fp x53349 = x53347 + x53348;
      Fp x53350 = x52896 * x1;
      Fp x53351 = x52895 + x53350;
      Fp x53352 = x52897 * x3;
      Fp x53353 = x53351 + x53352;
      Fp x53354 = x52898 * x6;
      Fp x53355 = x53353 + x53354;
      Fp x53356 = x52899 * x11;
      Fp x53357 = x53355 + x53356;
      Fp x53358 = x52900 * x27;
      Fp x53359 = x53357 + x53358;
      Fp x53360 = x52901 * x12;
      Fp x53361 = x53359 + x53360;
      Fp x53362 = x52902 * x28;
      Fp x53363 = x53361 + x53362;
      Fp x53364 = x52903 * x13;
      Fp x53365 = x53363 + x53364;
      Fp x53366 = x52904 * x29;
      Fp x53367 = x53365 + x53366;
      Fp x53368 = x52905 * x14;
      Fp x53369 = x53367 + x53368;
      Fp x53370 = x52906 * x30;
      Fp x53371 = x53369 + x53370;
      Fp x53372 = x52907 * x15;
      Fp x53373 = x53371 + x53372;
      Fp x53374 = x52908 * x31;
      Fp x53375 = x53373 + x53374;
      Fp x53376 = x52909 * x16;
      Fp x53377 = x53375 + x53376;
      Fp x53378 = x52910 * x32;
      Fp x53379 = x53377 + x53378;
      Fp x53380 = x53032 * x1;
      Fp x53381 = x53029 + x53380;
      Fp x53382 = x53035 * x3;
      Fp x53383 = x53381 + x53382;
      Fp x53384 = x53038 * x6;
      Fp x53385 = x53383 + x53384;
      Fp x53386 = x53041 * x11;
      Fp x53387 = x53385 + x53386;
      Fp x53388 = x53044 * x27;
      Fp x53389 = x53387 + x53388;
      Fp x53390 = x53047 * x12;
      Fp x53391 = x53389 + x53390;
      Fp x53392 = x53050 * x28;
      Fp x53393 = x53391 + x53392;
      Fp x53394 = x53054 * x13;
      Fp x53395 = x53393 + x53394;
      Fp x53396 = x53058 * x29;
      Fp x53397 = x53395 + x53396;
      Fp x53398 = x53062 * x14;
      Fp x53399 = x53397 + x53398;
      Fp x53400 = x53065 * x30;
      Fp x53401 = x53399 + x53400;
      Fp x53402 = x53068 * x15;
      Fp x53403 = x53401 + x53402;
      Fp x53404 = x53071 * x31;
      Fp x53405 = x53403 + x53404;
      Fp x53406 = x53074 * x16;
      Fp x53407 = x53405 + x53406;
      Fp x53408 = x53077 * x32;
      Fp x53409 = x53407 + x53408;
      Fp x53410 = x53083 * x1;
      Fp x53411 = x53080 + x53410;
      Fp x53412 = x53086 * x3;
      Fp x53413 = x53411 + x53412;
      Fp x53414 = x53089 * x6;
      Fp x53415 = x53413 + x53414;
      Fp x53416 = x53092 * x11;
      Fp x53417 = x53415 + x53416;
      Fp x53418 = x53095 * x27;
      Fp x53419 = x53417 + x53418;
      Fp x53420 = x53098 * x12;
      Fp x53421 = x53419 + x53420;
      Fp x53422 = x53101 * x28;
      Fp x53423 = x53421 + x53422;
      Fp x53424 = x53104 * x13;
      Fp x53425 = x53423 + x53424;
      Fp x53426 = x53107 * x29;
      Fp x53427 = x53425 + x53426;
      Fp x53428 = x53110 * x14;
      Fp x53429 = x53427 + x53428;
      Fp x53430 = x53113 * x30;
      Fp x53431 = x53429 + x53430;
      Fp x53432 = x53116 * x15;
      Fp x53433 = x53431 + x53432;
      Fp x53434 = x53119 * x31;
      Fp x53435 = x53433 + x53434;
      Fp x53436 = x53122 * x16;
      Fp x53437 = x53435 + x53436;
      Fp x53438 = x53125 * x32;
      Fp x53439 = x53437 + x53438;
      Fp x53440 = x53349 + x53409;
      Fp x53441 = x53379 + x53439;
      Fp x53442 = x52816 * x1;
      Fp x53443 = x52815 + x53442;
      Fp x53444 = x52817 * x3;
      Fp x53445 = x53443 + x53444;
      Fp x53446 = x52818 * x6;
      Fp x53447 = x53445 + x53446;
      Fp x53448 = x52819 * x11;
      Fp x53449 = x53447 + x53448;
      Fp x53450 = x52820 * x27;
      Fp x53451 = x53449 + x53450;
      Fp x53452 = x52821 * x12;
      Fp x53453 = x53451 + x53452;
      Fp x53454 = x52822 * x28;
      Fp x53455 = x53453 + x53454;
      Fp x53456 = x52823 * x13;
      Fp x53457 = x53455 + x53456;
      Fp x53458 = x52824 * x29;
      Fp x53459 = x53457 + x53458;
      Fp x53460 = x52825 * x14;
      Fp x53461 = x53459 + x53460;
      Fp x53462 = x52826 * x30;
      Fp x53463 = x53461 + x53462;
      Fp x53464 = x52827 * x15;
      Fp x53465 = x53463 + x53464;
      Fp x53466 = x52828 * x31;
      Fp x53467 = x53465 + x53466;
      Fp x53468 = x52829 * x16;
      Fp x53469 = x53467 + x53468;
      Fp x53470 = x52830 * x32;
      Fp x53471 = x53469 + x53470;
      Fp x53472 = x52832 * x1;
      Fp x53473 = x52831 + x53472;
      Fp x53474 = x52833 * x3;
      Fp x53475 = x53473 + x53474;
      Fp x53476 = x52834 * x6;
      Fp x53477 = x53475 + x53476;
      Fp x53478 = x52835 * x11;
      Fp x53479 = x53477 + x53478;
      Fp x53480 = x52836 * x27;
      Fp x53481 = x53479 + x53480;
      Fp x53482 = x52837 * x12;
      Fp x53483 = x53481 + x53482;
      Fp x53484 = x52838 * x28;
      Fp x53485 = x53483 + x53484;
      Fp x53486 = x52839 * x13;
      Fp x53487 = x53485 + x53486;
      Fp x53488 = x52840 * x29;
      Fp x53489 = x53487 + x53488;
      Fp x53490 = x52841 * x14;
      Fp x53491 = x53489 + x53490;
      Fp x53492 = x52842 * x30;
      Fp x53493 = x53491 + x53492;
      Fp x53494 = x52843 * x15;
      Fp x53495 = x53493 + x53494;
      Fp x53496 = x52844 * x31;
      Fp x53497 = x53495 + x53496;
      Fp x53498 = x52845 * x16;
      Fp x53499 = x53497 + x53498;
      Fp x53500 = x52846 * x32;
      Fp x53501 = x53499 + x53500;
      Fp x53502 = x53440 + x53471;
      Fp x53503 = x53441 + x53501;
      Fp x53504 = x53221 * x1;
      Fp x53505 = x53217 + x53504;
      Fp x53506 = x53224 * x3;
      Fp x53507 = x53505 + x53506;
      Fp x53508 = x53227 * x6;
      Fp x53509 = x53507 + x53508;
      Fp x53510 = x53230 * x11;
      Fp x53511 = x53509 + x53510;
      Fp x53512 = x53233 * x27;
      Fp x53513 = x53511 + x53512;
      Fp x53514 = x53236 * x12;
      Fp x53515 = x53513 + x53514;
      Fp x53516 = x53239 * x28;
      Fp x53517 = x53515 + x53516;
      Fp x53518 = x53242 * x13;
      Fp x53519 = x53517 + x53518;
      Fp x53520 = x53245 * x29;
      Fp x53521 = x53519 + x53520;
      Fp x53522 = x53248 * x14;
      Fp x53523 = x53521 + x53522;
      Fp x53524 = x53251 * x30;
      Fp x53525 = x53523 + x53524;
      Fp x53526 = x53254 * x15;
      Fp x53527 = x53525 + x53526;
      Fp x53528 = x53257 * x31;
      Fp x53529 = x53527 + x53528;
      Fp x53530 = x53260 * x16;
      Fp x53531 = x53529 + x53530;
      Fp x53532 = x53263 * x32;
      Fp x53533 = x53531 + x53532;
      Fp x53534 = x53269 * x1;
      Fp x53535 = x53266 + x53534;
      Fp x53536 = x53272 * x3;
      Fp x53537 = x53535 + x53536;
      Fp x53538 = x53275 * x6;
      Fp x53539 = x53537 + x53538;
      Fp x53540 = x53278 * x11;
      Fp x53541 = x53539 + x53540;
      Fp x53542 = x53281 * x27;
      Fp x53543 = x53541 + x53542;
      Fp x53544 = x53284 * x12;
      Fp x53545 = x53543 + x53544;
      Fp x53546 = x53287 * x28;
      Fp x53547 = x53545 + x53546;
      Fp x53548 = x53291 * x13;
      Fp x53549 = x53547 + x53548;
      Fp x53550 = x53295 * x29;
      Fp x53551 = x53549 + x53550;
      Fp x53552 = x53299 * x14;
      Fp x53553 = x53551 + x53552;
      Fp x53554 = x53303 * x30;
      Fp x53555 = x53553 + x53554;
      Fp x53556 = x53307 * x15;
      Fp x53557 = x53555 + x53556;
      Fp x53558 = x53311 * x31;
      Fp x53559 = x53557 + x53558;
      Fp x53560 = x53315 * x16;
      Fp x53561 = x53559 + x53560;
      Fp x53562 = x53319 * x32;
      Fp x53563 = x53561 + x53562;
      Fp x53564 = x53502 + x53533;
      Fp x53565 = x53503 + x53563;
      args[2][120 * steps + cycle] = x53564;
      args[2][121 * steps + cycle] = x53565;
      Fp x53566 = args[2][122 * steps + ((cycle - 1) & mask)];
      args[2][122 * steps + cycle] = x53566;
      Fp x53567 = args[2][96 * steps + ((cycle - 1) & mask)];
      args[2][96 * steps + cycle] = x53567;
      Fp x53568 = args[2][123 * steps + ((cycle - 1) & mask)];
      args[2][123 * steps + cycle] = x53568;
      Fp x53569 = args[2][124 * steps + ((cycle - 1) & mask)];
      args[2][124 * steps + cycle] = x53569;
      Fp x53570 = args[0][8 * steps + ((cycle - 0) & mask)];
      if (x53570 != 0) {
        Fp x53571 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x53571;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x53571;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x53572 = host_outs[0];
          Fp x53573 = host_outs[1];
          args[2][129 * steps + cycle] = x53572;
          args[2][130 * steps + cycle] = x53573;
        }
        Fp x53574 = args[2][128 * steps + ((cycle - 0) & mask)];
        Fp x53575 = x53574 * x3;
        Fp x53576 = args[2][130 * steps + ((cycle - 0) & mask)];
        Fp x53577 = args[2][129 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x53575;
        host_args[2] = x53576;
        host_args[3] = x53577;
        host(ctx, "log", "C%u: Sha Load: M[%x] = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x53578 = Fp(x53576.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x53578;
          Fp x53579 = x53576 - x53578;
          Fp x53580 = x53579 * x26;
          Fp x53581 = Fp(x53580.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x53581;
          Fp x53582 = x53580 - x53581;
          Fp x53583 = x53582 * x26;
          Fp x53584 = Fp(x53583.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x53584;
          Fp x53585 = x53583 - x53584;
          Fp x53586 = x53585 * x26;
          Fp x53587 = Fp(x53586.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x53587;
          Fp x53588 = x53586 - x53587;
          Fp x53589 = x53588 * x26;
          Fp x53590 = Fp(x53589.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x53590;
          Fp x53591 = x53589 - x53590;
          Fp x53592 = x53591 * x26;
          Fp x53593 = Fp(x53592.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x53593;
          Fp x53594 = x53592 - x53593;
          Fp x53595 = x53594 * x26;
          Fp x53596 = Fp(x53595.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x53596;
          Fp x53597 = x53595 - x53596;
          Fp x53598 = x53597 * x26;
          Fp x53599 = Fp(x53598.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x53599;
        }
        Fp x53600 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x53601 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x53602 = x53601 * x1;
        Fp x53603 = x53600 + x53602;
        Fp x53604 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x53605 = x53604 * x3;
        Fp x53606 = x53603 + x53605;
        Fp x53607 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x53608 = x53607 * x6;
        Fp x53609 = x53606 + x53608;
        Fp x53610 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x53611 = x53610 * x11;
        Fp x53612 = x53609 + x53611;
        Fp x53613 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x53614 = x53613 * x27;
        Fp x53615 = x53612 + x53614;
        Fp x53616 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x53617 = x53616 * x12;
        Fp x53618 = x53615 + x53617;
        Fp x53619 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x53620 = x53619 * x28;
        Fp x53621 = x53618 + x53620;
        Fp x53622 = x53576 - x53621;
        Fp x53623 = x53622 * x67;
        {
          Fp x53624 = Fp(x53623.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x53624;
          Fp x53625 = x53623 - x53624;
          Fp x53626 = x53625 * x26;
          Fp x53627 = Fp(x53626.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x53627;
          Fp x53628 = x53626 - x53627;
          Fp x53629 = x53628 * x26;
          Fp x53630 = Fp(x53629.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x53630;
          Fp x53631 = x53629 - x53630;
          Fp x53632 = x53631 * x26;
          Fp x53633 = Fp(x53632.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x53633;
          Fp x53634 = x53632 - x53633;
          Fp x53635 = x53634 * x26;
          Fp x53636 = Fp(x53635.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x53636;
          Fp x53637 = x53635 - x53636;
          Fp x53638 = x53637 * x26;
          Fp x53639 = Fp(x53638.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x53639;
          Fp x53640 = x53638 - x53639;
          Fp x53641 = x53640 * x26;
          Fp x53642 = Fp(x53641.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x53642;
          Fp x53643 = x53641 - x53642;
          Fp x53644 = x53643 * x26;
          Fp x53645 = Fp(x53644.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x53645;
        }
        Fp x53646 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x53647 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x53648 = x53647 * x1;
        Fp x53649 = x53646 + x53648;
        Fp x53650 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x53651 = x53650 * x3;
        Fp x53652 = x53649 + x53651;
        Fp x53653 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x53654 = x53653 * x6;
        Fp x53655 = x53652 + x53654;
        Fp x53656 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x53657 = x53656 * x11;
        Fp x53658 = x53655 + x53657;
        Fp x53659 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x53660 = x53659 * x27;
        Fp x53661 = x53658 + x53660;
        Fp x53662 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x53663 = x53662 * x12;
        Fp x53664 = x53661 + x53663;
        Fp x53665 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x53666 = x53665 * x28;
        Fp x53667 = x53664 + x53666;
        Fp x53668 = x53623 - x53667;
        Fp x53669 = x53668 * x67;
        if (x53669 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:380");
        {
          Fp x53670 = Fp(x53577.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x53670;
          Fp x53671 = x53577 - x53670;
          Fp x53672 = x53671 * x26;
          Fp x53673 = Fp(x53672.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x53673;
          Fp x53674 = x53672 - x53673;
          Fp x53675 = x53674 * x26;
          Fp x53676 = Fp(x53675.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x53676;
          Fp x53677 = x53675 - x53676;
          Fp x53678 = x53677 * x26;
          Fp x53679 = Fp(x53678.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x53679;
          Fp x53680 = x53678 - x53679;
          Fp x53681 = x53680 * x26;
          Fp x53682 = Fp(x53681.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x53682;
          Fp x53683 = x53681 - x53682;
          Fp x53684 = x53683 * x26;
          Fp x53685 = Fp(x53684.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x53685;
          Fp x53686 = x53684 - x53685;
          Fp x53687 = x53686 * x26;
          Fp x53688 = Fp(x53687.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x53688;
          Fp x53689 = x53687 - x53688;
          Fp x53690 = x53689 * x26;
          Fp x53691 = Fp(x53690.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x53691;
        }
        Fp x53692 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x53693 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x53694 = x53693 * x1;
        Fp x53695 = x53692 + x53694;
        Fp x53696 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x53697 = x53696 * x3;
        Fp x53698 = x53695 + x53697;
        Fp x53699 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x53700 = x53699 * x6;
        Fp x53701 = x53698 + x53700;
        Fp x53702 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x53703 = x53702 * x11;
        Fp x53704 = x53701 + x53703;
        Fp x53705 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x53706 = x53705 * x27;
        Fp x53707 = x53704 + x53706;
        Fp x53708 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x53709 = x53708 * x12;
        Fp x53710 = x53707 + x53709;
        Fp x53711 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x53712 = x53711 * x28;
        Fp x53713 = x53710 + x53712;
        Fp x53714 = x53577 - x53713;
        Fp x53715 = x53714 * x67;
        {
          Fp x53716 = Fp(x53715.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x53716;
          Fp x53717 = x53715 - x53716;
          Fp x53718 = x53717 * x26;
          Fp x53719 = Fp(x53718.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x53719;
          Fp x53720 = x53718 - x53719;
          Fp x53721 = x53720 * x26;
          Fp x53722 = Fp(x53721.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x53722;
          Fp x53723 = x53721 - x53722;
          Fp x53724 = x53723 * x26;
          Fp x53725 = Fp(x53724.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x53725;
          Fp x53726 = x53724 - x53725;
          Fp x53727 = x53726 * x26;
          Fp x53728 = Fp(x53727.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x53728;
          Fp x53729 = x53727 - x53728;
          Fp x53730 = x53729 * x26;
          Fp x53731 = Fp(x53730.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x53731;
          Fp x53732 = x53730 - x53731;
          Fp x53733 = x53732 * x26;
          Fp x53734 = Fp(x53733.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x53734;
          Fp x53735 = x53733 - x53734;
          Fp x53736 = x53735 * x26;
          Fp x53737 = Fp(x53736.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x53737;
        }
        Fp x53738 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x53739 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x53740 = x53739 * x1;
        Fp x53741 = x53738 + x53740;
        Fp x53742 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x53743 = x53742 * x3;
        Fp x53744 = x53741 + x53743;
        Fp x53745 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x53746 = x53745 * x6;
        Fp x53747 = x53744 + x53746;
        Fp x53748 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x53749 = x53748 * x11;
        Fp x53750 = x53747 + x53749;
        Fp x53751 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x53752 = x53751 * x27;
        Fp x53753 = x53750 + x53752;
        Fp x53754 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x53755 = x53754 * x12;
        Fp x53756 = x53753 + x53755;
        Fp x53757 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x53758 = x53757 * x28;
        Fp x53759 = x53756 + x53758;
        Fp x53760 = x53715 - x53759;
        Fp x53761 = x53760 * x67;
        if (x53761 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:380");
        Fp x53762 = x53571 + x71;
        args[2][125 * steps + cycle] = x53762;
        Fp x53763 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][126 * steps + cycle] = x53763;
      }
      Fp x53764 = args[0][9 * steps + ((cycle - 0) & mask)];
      if (x53764 != 0) {
        host_args[0] = x72;
        host(ctx, "log", "C%u: Sha Mix", host_args.data(), 1, host_outs.data(), 0);
        Fp x53765 = args[0][10 * steps + ((cycle - 0) & mask)];
        if (x53765 != 0) {
          Fp x53766 = args[2][126 * steps + ((cycle - 1) & mask)];
          args[2][128 * steps + cycle] = x53766;
          args[2][131 * steps + cycle] = x70;
          {
            host_args[0] = x72;
            host_args[1] = x53766;
            host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
            Fp x53767 = host_outs[0];
            Fp x53768 = host_outs[1];
            args[2][129 * steps + cycle] = x53767;
            args[2][130 * steps + cycle] = x53768;
          }
          Fp x53769 = args[2][128 * steps + ((cycle - 0) & mask)];
          Fp x53770 = x53769 * x3;
          Fp x53771 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x53772 = args[2][129 * steps + ((cycle - 0) & mask)];
          host_args[0] = x53770;
          host_args[1] = x53771;
          host_args[2] = x53772;
          host(ctx, "log", "  Load digest: M[%x] = %04x%04x", host_args.data(), 3, host_outs.data(), 0);
          Fp x53773 = x53766 - x71;
          args[2][126 * steps + cycle] = x53773;
        }
        Fp x53774 = x71 - x53765;
        if (x53774 != 0) {
          args[2][128 * steps + cycle] = x70;
          args[2][131 * steps + cycle] = x70;
          {
            host_args[0] = x72;
            host_args[1] = x70;
            host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
            Fp x53775 = host_outs[0];
            Fp x53776 = host_outs[1];
            args[2][129 * steps + cycle] = x53775;
            args[2][130 * steps + cycle] = x53776;
          }
          Fp x53777 = args[2][126 * steps + ((cycle - 1) & mask)];
          args[2][126 * steps + cycle] = x53777;
        }
        Fp x53778 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x53779 = args[2][121 * steps + ((cycle - 0) & mask)];
        {
          Fp x53780 = Fp(x53778.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x53780;
          Fp x53781 = x53778 - x53780;
          Fp x53782 = x53781 * x26;
          Fp x53783 = Fp(x53782.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x53783;
          Fp x53784 = x53782 - x53783;
          Fp x53785 = x53784 * x26;
          Fp x53786 = Fp(x53785.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x53786;
          Fp x53787 = x53785 - x53786;
          Fp x53788 = x53787 * x26;
          Fp x53789 = Fp(x53788.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x53789;
          Fp x53790 = x53788 - x53789;
          Fp x53791 = x53790 * x26;
          Fp x53792 = Fp(x53791.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x53792;
          Fp x53793 = x53791 - x53792;
          Fp x53794 = x53793 * x26;
          Fp x53795 = Fp(x53794.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x53795;
          Fp x53796 = x53794 - x53795;
          Fp x53797 = x53796 * x26;
          Fp x53798 = Fp(x53797.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x53798;
          Fp x53799 = x53797 - x53798;
          Fp x53800 = x53799 * x26;
          Fp x53801 = Fp(x53800.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x53801;
          Fp x53802 = x53800 - x53801;
          Fp x53803 = x53802 * x26;
          Fp x53804 = Fp(x53803.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x53804;
          Fp x53805 = x53803 - x53804;
          Fp x53806 = x53805 * x26;
          Fp x53807 = Fp(x53806.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x53807;
          Fp x53808 = x53806 - x53807;
          Fp x53809 = x53808 * x26;
          Fp x53810 = Fp(x53809.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x53810;
          Fp x53811 = x53809 - x53810;
          Fp x53812 = x53811 * x26;
          Fp x53813 = Fp(x53812.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x53813;
          Fp x53814 = x53812 - x53813;
          Fp x53815 = x53814 * x26;
          Fp x53816 = Fp(x53815.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x53816;
          Fp x53817 = x53815 - x53816;
          Fp x53818 = x53817 * x26;
          Fp x53819 = Fp(x53818.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x53819;
          Fp x53820 = x53818 - x53819;
          Fp x53821 = x53820 * x26;
          Fp x53822 = Fp(x53821.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x53822;
          Fp x53823 = x53821 - x53822;
          Fp x53824 = x53823 * x26;
          Fp x53825 = Fp(x53824.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x53825;
        }
        Fp x53826 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x53827 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x53828 = x53827 * x1;
        Fp x53829 = x53826 + x53828;
        Fp x53830 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x53831 = x53830 * x3;
        Fp x53832 = x53829 + x53831;
        Fp x53833 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x53834 = x53833 * x6;
        Fp x53835 = x53832 + x53834;
        Fp x53836 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x53837 = x53836 * x11;
        Fp x53838 = x53835 + x53837;
        Fp x53839 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x53840 = x53839 * x27;
        Fp x53841 = x53838 + x53840;
        Fp x53842 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x53843 = x53842 * x12;
        Fp x53844 = x53841 + x53843;
        Fp x53845 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x53846 = x53845 * x28;
        Fp x53847 = x53844 + x53846;
        Fp x53848 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x53849 = x53848 * x13;
        Fp x53850 = x53847 + x53849;
        Fp x53851 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x53852 = x53851 * x29;
        Fp x53853 = x53850 + x53852;
        Fp x53854 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x53855 = x53854 * x14;
        Fp x53856 = x53853 + x53855;
        Fp x53857 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x53858 = x53857 * x30;
        Fp x53859 = x53856 + x53858;
        Fp x53860 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x53861 = x53860 * x15;
        Fp x53862 = x53859 + x53861;
        Fp x53863 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x53864 = x53863 * x31;
        Fp x53865 = x53862 + x53864;
        Fp x53866 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x53867 = x53866 * x16;
        Fp x53868 = x53865 + x53867;
        Fp x53869 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x53870 = x53869 * x32;
        Fp x53871 = x53868 + x53870;
        Fp x53872 = x53778 - x53871;
        Fp x53873 = x53872 * x33;
        {
          Fp x53874 = Fp(x53873.asUInt32() & x71.asUInt32());
          args[2][112 * steps + cycle] = x53874;
          Fp x53875 = x53873 - x53874;
          Fp x53876 = x53875 * x26;
          Fp x53877 = Fp(x53876.asUInt32() & x71.asUInt32());
          args[2][113 * steps + cycle] = x53877;
        }
        Fp x53878 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x53879 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x53880 = x53879 * x1;
        Fp x53881 = x53878 + x53880;
        Fp x53882 = x53873 - x53881;
        Fp x53883 = x53882 * x10;
        if (x53883 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:140");
        Fp x53884 = x53779 + x53881;
        {
          Fp x53885 = Fp(x53884.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x53885;
          Fp x53886 = x53884 - x53885;
          Fp x53887 = x53886 * x26;
          Fp x53888 = Fp(x53887.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x53888;
          Fp x53889 = x53887 - x53888;
          Fp x53890 = x53889 * x26;
          Fp x53891 = Fp(x53890.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x53891;
          Fp x53892 = x53890 - x53891;
          Fp x53893 = x53892 * x26;
          Fp x53894 = Fp(x53893.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x53894;
          Fp x53895 = x53893 - x53894;
          Fp x53896 = x53895 * x26;
          Fp x53897 = Fp(x53896.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x53897;
          Fp x53898 = x53896 - x53897;
          Fp x53899 = x53898 * x26;
          Fp x53900 = Fp(x53899.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x53900;
          Fp x53901 = x53899 - x53900;
          Fp x53902 = x53901 * x26;
          Fp x53903 = Fp(x53902.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x53903;
          Fp x53904 = x53902 - x53903;
          Fp x53905 = x53904 * x26;
          Fp x53906 = Fp(x53905.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x53906;
          Fp x53907 = x53905 - x53906;
          Fp x53908 = x53907 * x26;
          Fp x53909 = Fp(x53908.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x53909;
          Fp x53910 = x53908 - x53909;
          Fp x53911 = x53910 * x26;
          Fp x53912 = Fp(x53911.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x53912;
          Fp x53913 = x53911 - x53912;
          Fp x53914 = x53913 * x26;
          Fp x53915 = Fp(x53914.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x53915;
          Fp x53916 = x53914 - x53915;
          Fp x53917 = x53916 * x26;
          Fp x53918 = Fp(x53917.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x53918;
          Fp x53919 = x53917 - x53918;
          Fp x53920 = x53919 * x26;
          Fp x53921 = Fp(x53920.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x53921;
          Fp x53922 = x53920 - x53921;
          Fp x53923 = x53922 * x26;
          Fp x53924 = Fp(x53923.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x53924;
          Fp x53925 = x53923 - x53924;
          Fp x53926 = x53925 * x26;
          Fp x53927 = Fp(x53926.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x53927;
          Fp x53928 = x53926 - x53927;
          Fp x53929 = x53928 * x26;
          Fp x53930 = Fp(x53929.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x53930;
        }
        Fp x53931 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x53932 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x53933 = x53932 * x1;
        Fp x53934 = x53931 + x53933;
        Fp x53935 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x53936 = x53935 * x3;
        Fp x53937 = x53934 + x53936;
        Fp x53938 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x53939 = x53938 * x6;
        Fp x53940 = x53937 + x53939;
        Fp x53941 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x53942 = x53941 * x11;
        Fp x53943 = x53940 + x53942;
        Fp x53944 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x53945 = x53944 * x27;
        Fp x53946 = x53943 + x53945;
        Fp x53947 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x53948 = x53947 * x12;
        Fp x53949 = x53946 + x53948;
        Fp x53950 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x53951 = x53950 * x28;
        Fp x53952 = x53949 + x53951;
        Fp x53953 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x53954 = x53953 * x13;
        Fp x53955 = x53952 + x53954;
        Fp x53956 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x53957 = x53956 * x29;
        Fp x53958 = x53955 + x53957;
        Fp x53959 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x53960 = x53959 * x14;
        Fp x53961 = x53958 + x53960;
        Fp x53962 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x53963 = x53962 * x30;
        Fp x53964 = x53961 + x53963;
        Fp x53965 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x53966 = x53965 * x15;
        Fp x53967 = x53964 + x53966;
        Fp x53968 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x53969 = x53968 * x31;
        Fp x53970 = x53967 + x53969;
        Fp x53971 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x53972 = x53971 * x16;
        Fp x53973 = x53970 + x53972;
        Fp x53974 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x53975 = x53974 * x32;
        Fp x53976 = x53973 + x53975;
        Fp x53977 = x53884 - x53976;
        Fp x53978 = x53977 * x33;
        {
          Fp x53979 = Fp(x53978.asUInt32() & x71.asUInt32());
          args[2][114 * steps + cycle] = x53979;
          Fp x53980 = x53978 - x53979;
          Fp x53981 = x53980 * x26;
          Fp x53982 = Fp(x53981.asUInt32() & x71.asUInt32());
          args[2][115 * steps + cycle] = x53982;
        }
        Fp x53983 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x53984 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x53985 = x53984 * x1;
        Fp x53986 = x53983 + x53985;
        Fp x53987 = x53978 - x53986;
        Fp x53988 = x53987 * x10;
        if (x53988 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:141");
        Fp x53989 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x53989;
      }
      Fp x53990 = args[2][0 * steps + ((cycle - 1) & mask)];
      Fp x53991 = args[2][1 * steps + ((cycle - 1) & mask)];
      Fp x53992 = args[2][2 * steps + ((cycle - 1) & mask)];
      Fp x53993 = args[2][3 * steps + ((cycle - 1) & mask)];
      Fp x53994 = args[2][4 * steps + ((cycle - 1) & mask)];
      Fp x53995 = args[2][5 * steps + ((cycle - 1) & mask)];
      Fp x53996 = args[2][6 * steps + ((cycle - 1) & mask)];
      Fp x53997 = args[2][7 * steps + ((cycle - 1) & mask)];
      Fp x53998 = args[2][8 * steps + ((cycle - 1) & mask)];
      Fp x53999 = args[2][9 * steps + ((cycle - 1) & mask)];
      Fp x54000 = args[2][10 * steps + ((cycle - 1) & mask)];
      Fp x54001 = args[2][11 * steps + ((cycle - 1) & mask)];
      Fp x54002 = args[2][12 * steps + ((cycle - 1) & mask)];
      Fp x54003 = args[2][13 * steps + ((cycle - 1) & mask)];
      Fp x54004 = args[2][14 * steps + ((cycle - 1) & mask)];
      Fp x54005 = args[2][15 * steps + ((cycle - 1) & mask)];
      Fp x54006 = args[2][16 * steps + ((cycle - 1) & mask)];
      Fp x54007 = args[2][17 * steps + ((cycle - 1) & mask)];
      Fp x54008 = args[2][18 * steps + ((cycle - 1) & mask)];
      Fp x54009 = args[2][19 * steps + ((cycle - 1) & mask)];
      Fp x54010 = args[2][20 * steps + ((cycle - 1) & mask)];
      Fp x54011 = args[2][21 * steps + ((cycle - 1) & mask)];
      Fp x54012 = args[2][22 * steps + ((cycle - 1) & mask)];
      Fp x54013 = args[2][23 * steps + ((cycle - 1) & mask)];
      Fp x54014 = args[2][24 * steps + ((cycle - 1) & mask)];
      Fp x54015 = args[2][25 * steps + ((cycle - 1) & mask)];
      Fp x54016 = args[2][26 * steps + ((cycle - 1) & mask)];
      Fp x54017 = args[2][27 * steps + ((cycle - 1) & mask)];
      Fp x54018 = args[2][28 * steps + ((cycle - 1) & mask)];
      Fp x54019 = args[2][29 * steps + ((cycle - 1) & mask)];
      Fp x54020 = args[2][30 * steps + ((cycle - 1) & mask)];
      Fp x54021 = args[2][31 * steps + ((cycle - 1) & mask)];
      Fp x54022 = args[2][0 * steps + ((cycle - 2) & mask)];
      Fp x54023 = args[2][1 * steps + ((cycle - 2) & mask)];
      Fp x54024 = args[2][2 * steps + ((cycle - 2) & mask)];
      Fp x54025 = args[2][3 * steps + ((cycle - 2) & mask)];
      Fp x54026 = args[2][4 * steps + ((cycle - 2) & mask)];
      Fp x54027 = args[2][5 * steps + ((cycle - 2) & mask)];
      Fp x54028 = args[2][6 * steps + ((cycle - 2) & mask)];
      Fp x54029 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x54030 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x54031 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x54032 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x54033 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x54034 = args[2][12 * steps + ((cycle - 2) & mask)];
      Fp x54035 = args[2][13 * steps + ((cycle - 2) & mask)];
      Fp x54036 = args[2][14 * steps + ((cycle - 2) & mask)];
      Fp x54037 = args[2][15 * steps + ((cycle - 2) & mask)];
      Fp x54038 = args[2][16 * steps + ((cycle - 2) & mask)];
      Fp x54039 = args[2][17 * steps + ((cycle - 2) & mask)];
      Fp x54040 = args[2][18 * steps + ((cycle - 2) & mask)];
      Fp x54041 = args[2][19 * steps + ((cycle - 2) & mask)];
      Fp x54042 = args[2][20 * steps + ((cycle - 2) & mask)];
      Fp x54043 = args[2][21 * steps + ((cycle - 2) & mask)];
      Fp x54044 = args[2][22 * steps + ((cycle - 2) & mask)];
      Fp x54045 = args[2][23 * steps + ((cycle - 2) & mask)];
      Fp x54046 = args[2][24 * steps + ((cycle - 2) & mask)];
      Fp x54047 = args[2][25 * steps + ((cycle - 2) & mask)];
      Fp x54048 = args[2][26 * steps + ((cycle - 2) & mask)];
      Fp x54049 = args[2][27 * steps + ((cycle - 2) & mask)];
      Fp x54050 = args[2][28 * steps + ((cycle - 2) & mask)];
      Fp x54051 = args[2][29 * steps + ((cycle - 2) & mask)];
      Fp x54052 = args[2][30 * steps + ((cycle - 2) & mask)];
      Fp x54053 = args[2][31 * steps + ((cycle - 2) & mask)];
      Fp x54054 = args[2][0 * steps + ((cycle - 3) & mask)];
      Fp x54055 = args[2][1 * steps + ((cycle - 3) & mask)];
      Fp x54056 = args[2][2 * steps + ((cycle - 3) & mask)];
      Fp x54057 = args[2][3 * steps + ((cycle - 3) & mask)];
      Fp x54058 = args[2][4 * steps + ((cycle - 3) & mask)];
      Fp x54059 = args[2][5 * steps + ((cycle - 3) & mask)];
      Fp x54060 = args[2][6 * steps + ((cycle - 3) & mask)];
      Fp x54061 = args[2][7 * steps + ((cycle - 3) & mask)];
      Fp x54062 = args[2][8 * steps + ((cycle - 3) & mask)];
      Fp x54063 = args[2][9 * steps + ((cycle - 3) & mask)];
      Fp x54064 = args[2][10 * steps + ((cycle - 3) & mask)];
      Fp x54065 = args[2][11 * steps + ((cycle - 3) & mask)];
      Fp x54066 = args[2][12 * steps + ((cycle - 3) & mask)];
      Fp x54067 = args[2][13 * steps + ((cycle - 3) & mask)];
      Fp x54068 = args[2][14 * steps + ((cycle - 3) & mask)];
      Fp x54069 = args[2][15 * steps + ((cycle - 3) & mask)];
      Fp x54070 = args[2][16 * steps + ((cycle - 3) & mask)];
      Fp x54071 = args[2][17 * steps + ((cycle - 3) & mask)];
      Fp x54072 = args[2][18 * steps + ((cycle - 3) & mask)];
      Fp x54073 = args[2][19 * steps + ((cycle - 3) & mask)];
      Fp x54074 = args[2][20 * steps + ((cycle - 3) & mask)];
      Fp x54075 = args[2][21 * steps + ((cycle - 3) & mask)];
      Fp x54076 = args[2][22 * steps + ((cycle - 3) & mask)];
      Fp x54077 = args[2][23 * steps + ((cycle - 3) & mask)];
      Fp x54078 = args[2][24 * steps + ((cycle - 3) & mask)];
      Fp x54079 = args[2][25 * steps + ((cycle - 3) & mask)];
      Fp x54080 = args[2][26 * steps + ((cycle - 3) & mask)];
      Fp x54081 = args[2][27 * steps + ((cycle - 3) & mask)];
      Fp x54082 = args[2][28 * steps + ((cycle - 3) & mask)];
      Fp x54083 = args[2][29 * steps + ((cycle - 3) & mask)];
      Fp x54084 = args[2][30 * steps + ((cycle - 3) & mask)];
      Fp x54085 = args[2][31 * steps + ((cycle - 3) & mask)];
      Fp x54086 = args[2][0 * steps + ((cycle - 4) & mask)];
      Fp x54087 = args[2][1 * steps + ((cycle - 4) & mask)];
      Fp x54088 = args[2][2 * steps + ((cycle - 4) & mask)];
      Fp x54089 = args[2][3 * steps + ((cycle - 4) & mask)];
      Fp x54090 = args[2][4 * steps + ((cycle - 4) & mask)];
      Fp x54091 = args[2][5 * steps + ((cycle - 4) & mask)];
      Fp x54092 = args[2][6 * steps + ((cycle - 4) & mask)];
      Fp x54093 = args[2][7 * steps + ((cycle - 4) & mask)];
      Fp x54094 = args[2][8 * steps + ((cycle - 4) & mask)];
      Fp x54095 = args[2][9 * steps + ((cycle - 4) & mask)];
      Fp x54096 = args[2][10 * steps + ((cycle - 4) & mask)];
      Fp x54097 = args[2][11 * steps + ((cycle - 4) & mask)];
      Fp x54098 = args[2][12 * steps + ((cycle - 4) & mask)];
      Fp x54099 = args[2][13 * steps + ((cycle - 4) & mask)];
      Fp x54100 = args[2][14 * steps + ((cycle - 4) & mask)];
      Fp x54101 = args[2][15 * steps + ((cycle - 4) & mask)];
      Fp x54102 = args[2][16 * steps + ((cycle - 4) & mask)];
      Fp x54103 = args[2][17 * steps + ((cycle - 4) & mask)];
      Fp x54104 = args[2][18 * steps + ((cycle - 4) & mask)];
      Fp x54105 = args[2][19 * steps + ((cycle - 4) & mask)];
      Fp x54106 = args[2][20 * steps + ((cycle - 4) & mask)];
      Fp x54107 = args[2][21 * steps + ((cycle - 4) & mask)];
      Fp x54108 = args[2][22 * steps + ((cycle - 4) & mask)];
      Fp x54109 = args[2][23 * steps + ((cycle - 4) & mask)];
      Fp x54110 = args[2][24 * steps + ((cycle - 4) & mask)];
      Fp x54111 = args[2][25 * steps + ((cycle - 4) & mask)];
      Fp x54112 = args[2][26 * steps + ((cycle - 4) & mask)];
      Fp x54113 = args[2][27 * steps + ((cycle - 4) & mask)];
      Fp x54114 = args[2][28 * steps + ((cycle - 4) & mask)];
      Fp x54115 = args[2][29 * steps + ((cycle - 4) & mask)];
      Fp x54116 = args[2][30 * steps + ((cycle - 4) & mask)];
      Fp x54117 = args[2][31 * steps + ((cycle - 4) & mask)];
      Fp x54118 = args[2][32 * steps + ((cycle - 1) & mask)];
      Fp x54119 = args[2][33 * steps + ((cycle - 1) & mask)];
      Fp x54120 = args[2][34 * steps + ((cycle - 1) & mask)];
      Fp x54121 = args[2][35 * steps + ((cycle - 1) & mask)];
      Fp x54122 = args[2][36 * steps + ((cycle - 1) & mask)];
      Fp x54123 = args[2][37 * steps + ((cycle - 1) & mask)];
      Fp x54124 = args[2][38 * steps + ((cycle - 1) & mask)];
      Fp x54125 = args[2][39 * steps + ((cycle - 1) & mask)];
      Fp x54126 = args[2][40 * steps + ((cycle - 1) & mask)];
      Fp x54127 = args[2][41 * steps + ((cycle - 1) & mask)];
      Fp x54128 = args[2][42 * steps + ((cycle - 1) & mask)];
      Fp x54129 = args[2][43 * steps + ((cycle - 1) & mask)];
      Fp x54130 = args[2][44 * steps + ((cycle - 1) & mask)];
      Fp x54131 = args[2][45 * steps + ((cycle - 1) & mask)];
      Fp x54132 = args[2][46 * steps + ((cycle - 1) & mask)];
      Fp x54133 = args[2][47 * steps + ((cycle - 1) & mask)];
      Fp x54134 = args[2][48 * steps + ((cycle - 1) & mask)];
      Fp x54135 = args[2][49 * steps + ((cycle - 1) & mask)];
      Fp x54136 = args[2][50 * steps + ((cycle - 1) & mask)];
      Fp x54137 = args[2][51 * steps + ((cycle - 1) & mask)];
      Fp x54138 = args[2][52 * steps + ((cycle - 1) & mask)];
      Fp x54139 = args[2][53 * steps + ((cycle - 1) & mask)];
      Fp x54140 = args[2][54 * steps + ((cycle - 1) & mask)];
      Fp x54141 = args[2][55 * steps + ((cycle - 1) & mask)];
      Fp x54142 = args[2][56 * steps + ((cycle - 1) & mask)];
      Fp x54143 = args[2][57 * steps + ((cycle - 1) & mask)];
      Fp x54144 = args[2][58 * steps + ((cycle - 1) & mask)];
      Fp x54145 = args[2][59 * steps + ((cycle - 1) & mask)];
      Fp x54146 = args[2][60 * steps + ((cycle - 1) & mask)];
      Fp x54147 = args[2][61 * steps + ((cycle - 1) & mask)];
      Fp x54148 = args[2][62 * steps + ((cycle - 1) & mask)];
      Fp x54149 = args[2][63 * steps + ((cycle - 1) & mask)];
      Fp x54150 = args[2][32 * steps + ((cycle - 2) & mask)];
      Fp x54151 = args[2][33 * steps + ((cycle - 2) & mask)];
      Fp x54152 = args[2][34 * steps + ((cycle - 2) & mask)];
      Fp x54153 = args[2][35 * steps + ((cycle - 2) & mask)];
      Fp x54154 = args[2][36 * steps + ((cycle - 2) & mask)];
      Fp x54155 = args[2][37 * steps + ((cycle - 2) & mask)];
      Fp x54156 = args[2][38 * steps + ((cycle - 2) & mask)];
      Fp x54157 = args[2][39 * steps + ((cycle - 2) & mask)];
      Fp x54158 = args[2][40 * steps + ((cycle - 2) & mask)];
      Fp x54159 = args[2][41 * steps + ((cycle - 2) & mask)];
      Fp x54160 = args[2][42 * steps + ((cycle - 2) & mask)];
      Fp x54161 = args[2][43 * steps + ((cycle - 2) & mask)];
      Fp x54162 = args[2][44 * steps + ((cycle - 2) & mask)];
      Fp x54163 = args[2][45 * steps + ((cycle - 2) & mask)];
      Fp x54164 = args[2][46 * steps + ((cycle - 2) & mask)];
      Fp x54165 = args[2][47 * steps + ((cycle - 2) & mask)];
      Fp x54166 = args[2][48 * steps + ((cycle - 2) & mask)];
      Fp x54167 = args[2][49 * steps + ((cycle - 2) & mask)];
      Fp x54168 = args[2][50 * steps + ((cycle - 2) & mask)];
      Fp x54169 = args[2][51 * steps + ((cycle - 2) & mask)];
      Fp x54170 = args[2][52 * steps + ((cycle - 2) & mask)];
      Fp x54171 = args[2][53 * steps + ((cycle - 2) & mask)];
      Fp x54172 = args[2][54 * steps + ((cycle - 2) & mask)];
      Fp x54173 = args[2][55 * steps + ((cycle - 2) & mask)];
      Fp x54174 = args[2][56 * steps + ((cycle - 2) & mask)];
      Fp x54175 = args[2][57 * steps + ((cycle - 2) & mask)];
      Fp x54176 = args[2][58 * steps + ((cycle - 2) & mask)];
      Fp x54177 = args[2][59 * steps + ((cycle - 2) & mask)];
      Fp x54178 = args[2][60 * steps + ((cycle - 2) & mask)];
      Fp x54179 = args[2][61 * steps + ((cycle - 2) & mask)];
      Fp x54180 = args[2][62 * steps + ((cycle - 2) & mask)];
      Fp x54181 = args[2][63 * steps + ((cycle - 2) & mask)];
      Fp x54182 = args[2][32 * steps + ((cycle - 3) & mask)];
      Fp x54183 = args[2][33 * steps + ((cycle - 3) & mask)];
      Fp x54184 = args[2][34 * steps + ((cycle - 3) & mask)];
      Fp x54185 = args[2][35 * steps + ((cycle - 3) & mask)];
      Fp x54186 = args[2][36 * steps + ((cycle - 3) & mask)];
      Fp x54187 = args[2][37 * steps + ((cycle - 3) & mask)];
      Fp x54188 = args[2][38 * steps + ((cycle - 3) & mask)];
      Fp x54189 = args[2][39 * steps + ((cycle - 3) & mask)];
      Fp x54190 = args[2][40 * steps + ((cycle - 3) & mask)];
      Fp x54191 = args[2][41 * steps + ((cycle - 3) & mask)];
      Fp x54192 = args[2][42 * steps + ((cycle - 3) & mask)];
      Fp x54193 = args[2][43 * steps + ((cycle - 3) & mask)];
      Fp x54194 = args[2][44 * steps + ((cycle - 3) & mask)];
      Fp x54195 = args[2][45 * steps + ((cycle - 3) & mask)];
      Fp x54196 = args[2][46 * steps + ((cycle - 3) & mask)];
      Fp x54197 = args[2][47 * steps + ((cycle - 3) & mask)];
      Fp x54198 = args[2][48 * steps + ((cycle - 3) & mask)];
      Fp x54199 = args[2][49 * steps + ((cycle - 3) & mask)];
      Fp x54200 = args[2][50 * steps + ((cycle - 3) & mask)];
      Fp x54201 = args[2][51 * steps + ((cycle - 3) & mask)];
      Fp x54202 = args[2][52 * steps + ((cycle - 3) & mask)];
      Fp x54203 = args[2][53 * steps + ((cycle - 3) & mask)];
      Fp x54204 = args[2][54 * steps + ((cycle - 3) & mask)];
      Fp x54205 = args[2][55 * steps + ((cycle - 3) & mask)];
      Fp x54206 = args[2][56 * steps + ((cycle - 3) & mask)];
      Fp x54207 = args[2][57 * steps + ((cycle - 3) & mask)];
      Fp x54208 = args[2][58 * steps + ((cycle - 3) & mask)];
      Fp x54209 = args[2][59 * steps + ((cycle - 3) & mask)];
      Fp x54210 = args[2][60 * steps + ((cycle - 3) & mask)];
      Fp x54211 = args[2][61 * steps + ((cycle - 3) & mask)];
      Fp x54212 = args[2][62 * steps + ((cycle - 3) & mask)];
      Fp x54213 = args[2][63 * steps + ((cycle - 3) & mask)];
      Fp x54214 = args[2][32 * steps + ((cycle - 4) & mask)];
      Fp x54215 = args[2][33 * steps + ((cycle - 4) & mask)];
      Fp x54216 = args[2][34 * steps + ((cycle - 4) & mask)];
      Fp x54217 = args[2][35 * steps + ((cycle - 4) & mask)];
      Fp x54218 = args[2][36 * steps + ((cycle - 4) & mask)];
      Fp x54219 = args[2][37 * steps + ((cycle - 4) & mask)];
      Fp x54220 = args[2][38 * steps + ((cycle - 4) & mask)];
      Fp x54221 = args[2][39 * steps + ((cycle - 4) & mask)];
      Fp x54222 = args[2][40 * steps + ((cycle - 4) & mask)];
      Fp x54223 = args[2][41 * steps + ((cycle - 4) & mask)];
      Fp x54224 = args[2][42 * steps + ((cycle - 4) & mask)];
      Fp x54225 = args[2][43 * steps + ((cycle - 4) & mask)];
      Fp x54226 = args[2][44 * steps + ((cycle - 4) & mask)];
      Fp x54227 = args[2][45 * steps + ((cycle - 4) & mask)];
      Fp x54228 = args[2][46 * steps + ((cycle - 4) & mask)];
      Fp x54229 = args[2][47 * steps + ((cycle - 4) & mask)];
      Fp x54230 = args[2][48 * steps + ((cycle - 4) & mask)];
      Fp x54231 = args[2][49 * steps + ((cycle - 4) & mask)];
      Fp x54232 = args[2][50 * steps + ((cycle - 4) & mask)];
      Fp x54233 = args[2][51 * steps + ((cycle - 4) & mask)];
      Fp x54234 = args[2][52 * steps + ((cycle - 4) & mask)];
      Fp x54235 = args[2][53 * steps + ((cycle - 4) & mask)];
      Fp x54236 = args[2][54 * steps + ((cycle - 4) & mask)];
      Fp x54237 = args[2][55 * steps + ((cycle - 4) & mask)];
      Fp x54238 = args[2][56 * steps + ((cycle - 4) & mask)];
      Fp x54239 = args[2][57 * steps + ((cycle - 4) & mask)];
      Fp x54240 = args[2][58 * steps + ((cycle - 4) & mask)];
      Fp x54241 = args[2][59 * steps + ((cycle - 4) & mask)];
      Fp x54242 = args[2][60 * steps + ((cycle - 4) & mask)];
      Fp x54243 = args[2][61 * steps + ((cycle - 4) & mask)];
      Fp x54244 = args[2][62 * steps + ((cycle - 4) & mask)];
      Fp x54245 = args[2][63 * steps + ((cycle - 4) & mask)];
      Fp x54246 = args[0][12 * steps + ((cycle - 0) & mask)];
      Fp x54247 = args[0][13 * steps + ((cycle - 0) & mask)];
      Fp x54248 = x54003 + x54012;
      Fp x54249 = x54003 * x1;
      Fp x54250 = x54249 * x54012;
      Fp x54251 = x54248 - x54250;
      Fp x54252 = x54004 + x54013;
      Fp x54253 = x54004 * x1;
      Fp x54254 = x54253 * x54013;
      Fp x54255 = x54252 - x54254;
      Fp x54256 = x54005 + x54014;
      Fp x54257 = x54005 * x1;
      Fp x54258 = x54257 * x54014;
      Fp x54259 = x54256 - x54258;
      Fp x54260 = x54006 + x54015;
      Fp x54261 = x54006 * x1;
      Fp x54262 = x54261 * x54015;
      Fp x54263 = x54260 - x54262;
      Fp x54264 = x54007 + x54016;
      Fp x54265 = x54007 * x1;
      Fp x54266 = x54265 * x54016;
      Fp x54267 = x54264 - x54266;
      Fp x54268 = x54008 + x54017;
      Fp x54269 = x54008 * x1;
      Fp x54270 = x54269 * x54017;
      Fp x54271 = x54268 - x54270;
      Fp x54272 = x54009 + x54018;
      Fp x54273 = x54009 * x1;
      Fp x54274 = x54273 * x54018;
      Fp x54275 = x54272 - x54274;
      Fp x54276 = x54010 + x54019;
      Fp x54277 = x54010 * x1;
      Fp x54278 = x54277 * x54019;
      Fp x54279 = x54276 - x54278;
      Fp x54280 = x54011 + x54020;
      Fp x54281 = x54011 * x1;
      Fp x54282 = x54281 * x54020;
      Fp x54283 = x54280 - x54282;
      Fp x54284 = x54012 + x54021;
      Fp x54285 = x54012 * x1;
      Fp x54286 = x54285 * x54021;
      Fp x54287 = x54284 - x54286;
      Fp x54288 = x54013 + x53990;
      Fp x54289 = x54013 * x1;
      Fp x54290 = x54289 * x53990;
      Fp x54291 = x54288 - x54290;
      Fp x54292 = x54014 + x53991;
      Fp x54293 = x54014 * x1;
      Fp x54294 = x54293 * x53991;
      Fp x54295 = x54292 - x54294;
      Fp x54296 = x54015 + x53992;
      Fp x54297 = x54015 * x1;
      Fp x54298 = x54297 * x53992;
      Fp x54299 = x54296 - x54298;
      Fp x54300 = x54016 + x53993;
      Fp x54301 = x54016 * x1;
      Fp x54302 = x54301 * x53993;
      Fp x54303 = x54300 - x54302;
      Fp x54304 = x54017 + x53994;
      Fp x54305 = x54017 * x1;
      Fp x54306 = x54305 * x53994;
      Fp x54307 = x54304 - x54306;
      Fp x54308 = x54018 + x53995;
      Fp x54309 = x54018 * x1;
      Fp x54310 = x54309 * x53995;
      Fp x54311 = x54308 - x54310;
      Fp x54312 = x54019 + x53996;
      Fp x54313 = x54019 * x1;
      Fp x54314 = x54313 * x53996;
      Fp x54315 = x54312 - x54314;
      Fp x54316 = x54020 + x53997;
      Fp x54317 = x54020 * x1;
      Fp x54318 = x54317 * x53997;
      Fp x54319 = x54316 - x54318;
      Fp x54320 = x54021 + x53998;
      Fp x54321 = x54021 * x1;
      Fp x54322 = x54321 * x53998;
      Fp x54323 = x54320 - x54322;
      Fp x54324 = x53990 + x53999;
      Fp x54325 = x53990 * x1;
      Fp x54326 = x54325 * x53999;
      Fp x54327 = x54324 - x54326;
      Fp x54328 = x53991 + x54000;
      Fp x54329 = x53991 * x1;
      Fp x54330 = x54329 * x54000;
      Fp x54331 = x54328 - x54330;
      Fp x54332 = x53992 + x54001;
      Fp x54333 = x53992 * x1;
      Fp x54334 = x54333 * x54001;
      Fp x54335 = x54332 - x54334;
      Fp x54336 = x53993 + x54002;
      Fp x54337 = x53993 * x1;
      Fp x54338 = x54337 * x54002;
      Fp x54339 = x54336 - x54338;
      Fp x54340 = x53994 + x54003;
      Fp x54341 = x53994 * x1;
      Fp x54342 = x54341 * x54003;
      Fp x54343 = x54340 - x54342;
      Fp x54344 = x53995 + x54004;
      Fp x54345 = x53995 * x1;
      Fp x54346 = x54345 * x54004;
      Fp x54347 = x54344 - x54346;
      Fp x54348 = x53996 + x54005;
      Fp x54349 = x53996 * x1;
      Fp x54350 = x54349 * x54005;
      Fp x54351 = x54348 - x54350;
      Fp x54352 = x53997 + x54006;
      Fp x54353 = x53997 * x1;
      Fp x54354 = x54353 * x54006;
      Fp x54355 = x54352 - x54354;
      Fp x54356 = x53998 + x54007;
      Fp x54357 = x53998 * x1;
      Fp x54358 = x54357 * x54007;
      Fp x54359 = x54356 - x54358;
      Fp x54360 = x53999 + x54008;
      Fp x54361 = x53999 * x1;
      Fp x54362 = x54361 * x54008;
      Fp x54363 = x54360 - x54362;
      Fp x54364 = x54000 + x54009;
      Fp x54365 = x54000 * x1;
      Fp x54366 = x54365 * x54009;
      Fp x54367 = x54364 - x54366;
      Fp x54368 = x54001 + x54010;
      Fp x54369 = x54001 * x1;
      Fp x54370 = x54369 * x54010;
      Fp x54371 = x54368 - x54370;
      Fp x54372 = x54002 + x54011;
      Fp x54373 = x54002 * x1;
      Fp x54374 = x54373 * x54011;
      Fp x54375 = x54372 - x54374;
      Fp x54376 = x53992 + x54251;
      Fp x54377 = x54333 * x54251;
      Fp x54378 = x54376 - x54377;
      Fp x54379 = x53993 + x54255;
      Fp x54380 = x54337 * x54255;
      Fp x54381 = x54379 - x54380;
      Fp x54382 = x53994 + x54259;
      Fp x54383 = x54341 * x54259;
      Fp x54384 = x54382 - x54383;
      Fp x54385 = x53995 + x54263;
      Fp x54386 = x54345 * x54263;
      Fp x54387 = x54385 - x54386;
      Fp x54388 = x53996 + x54267;
      Fp x54389 = x54349 * x54267;
      Fp x54390 = x54388 - x54389;
      Fp x54391 = x53997 + x54271;
      Fp x54392 = x54353 * x54271;
      Fp x54393 = x54391 - x54392;
      Fp x54394 = x53998 + x54275;
      Fp x54395 = x54357 * x54275;
      Fp x54396 = x54394 - x54395;
      Fp x54397 = x53999 + x54279;
      Fp x54398 = x54361 * x54279;
      Fp x54399 = x54397 - x54398;
      Fp x54400 = x54000 + x54283;
      Fp x54401 = x54365 * x54283;
      Fp x54402 = x54400 - x54401;
      Fp x54403 = x54001 + x54287;
      Fp x54404 = x54369 * x54287;
      Fp x54405 = x54403 - x54404;
      Fp x54406 = x54002 + x54291;
      Fp x54407 = x54373 * x54291;
      Fp x54408 = x54406 - x54407;
      Fp x54409 = x54003 + x54295;
      Fp x54410 = x54249 * x54295;
      Fp x54411 = x54409 - x54410;
      Fp x54412 = x54004 + x54299;
      Fp x54413 = x54253 * x54299;
      Fp x54414 = x54412 - x54413;
      Fp x54415 = x54005 + x54303;
      Fp x54416 = x54257 * x54303;
      Fp x54417 = x54415 - x54416;
      Fp x54418 = x54006 + x54307;
      Fp x54419 = x54261 * x54307;
      Fp x54420 = x54418 - x54419;
      Fp x54421 = x54007 + x54311;
      Fp x54422 = x54265 * x54311;
      Fp x54423 = x54421 - x54422;
      Fp x54424 = x54008 + x54315;
      Fp x54425 = x54269 * x54315;
      Fp x54426 = x54424 - x54425;
      Fp x54427 = x54009 + x54319;
      Fp x54428 = x54273 * x54319;
      Fp x54429 = x54427 - x54428;
      Fp x54430 = x54010 + x54323;
      Fp x54431 = x54277 * x54323;
      Fp x54432 = x54430 - x54431;
      Fp x54433 = x54011 + x54327;
      Fp x54434 = x54281 * x54327;
      Fp x54435 = x54433 - x54434;
      Fp x54436 = x54012 + x54331;
      Fp x54437 = x54285 * x54331;
      Fp x54438 = x54436 - x54437;
      Fp x54439 = x54013 + x54335;
      Fp x54440 = x54289 * x54335;
      Fp x54441 = x54439 - x54440;
      Fp x54442 = x54014 + x54339;
      Fp x54443 = x54293 * x54339;
      Fp x54444 = x54442 - x54443;
      Fp x54445 = x54015 + x54343;
      Fp x54446 = x54297 * x54343;
      Fp x54447 = x54445 - x54446;
      Fp x54448 = x54016 + x54347;
      Fp x54449 = x54301 * x54347;
      Fp x54450 = x54448 - x54449;
      Fp x54451 = x54017 + x54351;
      Fp x54452 = x54305 * x54351;
      Fp x54453 = x54451 - x54452;
      Fp x54454 = x54018 + x54355;
      Fp x54455 = x54309 * x54355;
      Fp x54456 = x54454 - x54455;
      Fp x54457 = x54019 + x54359;
      Fp x54458 = x54313 * x54359;
      Fp x54459 = x54457 - x54458;
      Fp x54460 = x54020 + x54363;
      Fp x54461 = x54317 * x54363;
      Fp x54462 = x54460 - x54461;
      Fp x54463 = x54021 + x54367;
      Fp x54464 = x54321 * x54367;
      Fp x54465 = x54463 - x54464;
      Fp x54466 = x53990 + x54371;
      Fp x54467 = x54325 * x54371;
      Fp x54468 = x54466 - x54467;
      Fp x54469 = x53991 + x54375;
      Fp x54470 = x54329 * x54375;
      Fp x54471 = x54469 - x54470;
      Fp x54472 = x54129 + x54143;
      Fp x54473 = x54129 * x1;
      Fp x54474 = x54473 * x54143;
      Fp x54475 = x54472 - x54474;
      Fp x54476 = x54130 + x54144;
      Fp x54477 = x54130 * x1;
      Fp x54478 = x54477 * x54144;
      Fp x54479 = x54476 - x54478;
      Fp x54480 = x54131 + x54145;
      Fp x54481 = x54131 * x1;
      Fp x54482 = x54481 * x54145;
      Fp x54483 = x54480 - x54482;
      Fp x54484 = x54132 + x54146;
      Fp x54485 = x54132 * x1;
      Fp x54486 = x54485 * x54146;
      Fp x54487 = x54484 - x54486;
      Fp x54488 = x54133 + x54147;
      Fp x54489 = x54133 * x1;
      Fp x54490 = x54489 * x54147;
      Fp x54491 = x54488 - x54490;
      Fp x54492 = x54134 + x54148;
      Fp x54493 = x54134 * x1;
      Fp x54494 = x54493 * x54148;
      Fp x54495 = x54492 - x54494;
      Fp x54496 = x54135 + x54149;
      Fp x54497 = x54135 * x1;
      Fp x54498 = x54497 * x54149;
      Fp x54499 = x54496 - x54498;
      Fp x54500 = x54136 + x54118;
      Fp x54501 = x54136 * x1;
      Fp x54502 = x54501 * x54118;
      Fp x54503 = x54500 - x54502;
      Fp x54504 = x54137 + x54119;
      Fp x54505 = x54137 * x1;
      Fp x54506 = x54505 * x54119;
      Fp x54507 = x54504 - x54506;
      Fp x54508 = x54138 + x54120;
      Fp x54509 = x54138 * x1;
      Fp x54510 = x54509 * x54120;
      Fp x54511 = x54508 - x54510;
      Fp x54512 = x54139 + x54121;
      Fp x54513 = x54139 * x1;
      Fp x54514 = x54513 * x54121;
      Fp x54515 = x54512 - x54514;
      Fp x54516 = x54140 + x54122;
      Fp x54517 = x54140 * x1;
      Fp x54518 = x54517 * x54122;
      Fp x54519 = x54516 - x54518;
      Fp x54520 = x54141 + x54123;
      Fp x54521 = x54141 * x1;
      Fp x54522 = x54521 * x54123;
      Fp x54523 = x54520 - x54522;
      Fp x54524 = x54142 + x54124;
      Fp x54525 = x54142 * x1;
      Fp x54526 = x54525 * x54124;
      Fp x54527 = x54524 - x54526;
      Fp x54528 = x54143 + x54125;
      Fp x54529 = x54143 * x1;
      Fp x54530 = x54529 * x54125;
      Fp x54531 = x54528 - x54530;
      Fp x54532 = x54144 + x54126;
      Fp x54533 = x54144 * x1;
      Fp x54534 = x54533 * x54126;
      Fp x54535 = x54532 - x54534;
      Fp x54536 = x54145 + x54127;
      Fp x54537 = x54145 * x1;
      Fp x54538 = x54537 * x54127;
      Fp x54539 = x54536 - x54538;
      Fp x54540 = x54146 + x54128;
      Fp x54541 = x54146 * x1;
      Fp x54542 = x54541 * x54128;
      Fp x54543 = x54540 - x54542;
      Fp x54544 = x54147 + x54129;
      Fp x54545 = x54147 * x1;
      Fp x54546 = x54545 * x54129;
      Fp x54547 = x54544 - x54546;
      Fp x54548 = x54148 + x54130;
      Fp x54549 = x54148 * x1;
      Fp x54550 = x54549 * x54130;
      Fp x54551 = x54548 - x54550;
      Fp x54552 = x54149 + x54131;
      Fp x54553 = x54149 * x1;
      Fp x54554 = x54553 * x54131;
      Fp x54555 = x54552 - x54554;
      Fp x54556 = x54118 + x54132;
      Fp x54557 = x54118 * x1;
      Fp x54558 = x54557 * x54132;
      Fp x54559 = x54556 - x54558;
      Fp x54560 = x54119 + x54133;
      Fp x54561 = x54119 * x1;
      Fp x54562 = x54561 * x54133;
      Fp x54563 = x54560 - x54562;
      Fp x54564 = x54120 + x54134;
      Fp x54565 = x54120 * x1;
      Fp x54566 = x54565 * x54134;
      Fp x54567 = x54564 - x54566;
      Fp x54568 = x54121 + x54135;
      Fp x54569 = x54121 * x1;
      Fp x54570 = x54569 * x54135;
      Fp x54571 = x54568 - x54570;
      Fp x54572 = x54122 + x54136;
      Fp x54573 = x54122 * x1;
      Fp x54574 = x54573 * x54136;
      Fp x54575 = x54572 - x54574;
      Fp x54576 = x54123 + x54137;
      Fp x54577 = x54123 * x1;
      Fp x54578 = x54577 * x54137;
      Fp x54579 = x54576 - x54578;
      Fp x54580 = x54124 + x54138;
      Fp x54581 = x54124 * x1;
      Fp x54582 = x54581 * x54138;
      Fp x54583 = x54580 - x54582;
      Fp x54584 = x54125 + x54139;
      Fp x54585 = x54125 * x1;
      Fp x54586 = x54585 * x54139;
      Fp x54587 = x54584 - x54586;
      Fp x54588 = x54126 + x54140;
      Fp x54589 = x54126 * x1;
      Fp x54590 = x54589 * x54140;
      Fp x54591 = x54588 - x54590;
      Fp x54592 = x54127 + x54141;
      Fp x54593 = x54127 * x1;
      Fp x54594 = x54593 * x54141;
      Fp x54595 = x54592 - x54594;
      Fp x54596 = x54128 + x54142;
      Fp x54597 = x54128 * x1;
      Fp x54598 = x54597 * x54142;
      Fp x54599 = x54596 - x54598;
      Fp x54600 = x54124 + x54475;
      Fp x54601 = x54581 * x54475;
      Fp x54602 = x54600 - x54601;
      Fp x54603 = x54125 + x54479;
      Fp x54604 = x54585 * x54479;
      Fp x54605 = x54603 - x54604;
      Fp x54606 = x54126 + x54483;
      Fp x54607 = x54589 * x54483;
      Fp x54608 = x54606 - x54607;
      Fp x54609 = x54127 + x54487;
      Fp x54610 = x54593 * x54487;
      Fp x54611 = x54609 - x54610;
      Fp x54612 = x54128 + x54491;
      Fp x54613 = x54597 * x54491;
      Fp x54614 = x54612 - x54613;
      Fp x54615 = x54129 + x54495;
      Fp x54616 = x54473 * x54495;
      Fp x54617 = x54615 - x54616;
      Fp x54618 = x54130 + x54499;
      Fp x54619 = x54477 * x54499;
      Fp x54620 = x54618 - x54619;
      Fp x54621 = x54131 + x54503;
      Fp x54622 = x54481 * x54503;
      Fp x54623 = x54621 - x54622;
      Fp x54624 = x54132 + x54507;
      Fp x54625 = x54485 * x54507;
      Fp x54626 = x54624 - x54625;
      Fp x54627 = x54133 + x54511;
      Fp x54628 = x54489 * x54511;
      Fp x54629 = x54627 - x54628;
      Fp x54630 = x54134 + x54515;
      Fp x54631 = x54493 * x54515;
      Fp x54632 = x54630 - x54631;
      Fp x54633 = x54135 + x54519;
      Fp x54634 = x54497 * x54519;
      Fp x54635 = x54633 - x54634;
      Fp x54636 = x54136 + x54523;
      Fp x54637 = x54501 * x54523;
      Fp x54638 = x54636 - x54637;
      Fp x54639 = x54137 + x54527;
      Fp x54640 = x54505 * x54527;
      Fp x54641 = x54639 - x54640;
      Fp x54642 = x54138 + x54531;
      Fp x54643 = x54509 * x54531;
      Fp x54644 = x54642 - x54643;
      Fp x54645 = x54139 + x54535;
      Fp x54646 = x54513 * x54535;
      Fp x54647 = x54645 - x54646;
      Fp x54648 = x54140 + x54539;
      Fp x54649 = x54517 * x54539;
      Fp x54650 = x54648 - x54649;
      Fp x54651 = x54141 + x54543;
      Fp x54652 = x54521 * x54543;
      Fp x54653 = x54651 - x54652;
      Fp x54654 = x54142 + x54547;
      Fp x54655 = x54525 * x54547;
      Fp x54656 = x54654 - x54655;
      Fp x54657 = x54143 + x54551;
      Fp x54658 = x54529 * x54551;
      Fp x54659 = x54657 - x54658;
      Fp x54660 = x54144 + x54555;
      Fp x54661 = x54533 * x54555;
      Fp x54662 = x54660 - x54661;
      Fp x54663 = x54145 + x54559;
      Fp x54664 = x54537 * x54559;
      Fp x54665 = x54663 - x54664;
      Fp x54666 = x54146 + x54563;
      Fp x54667 = x54541 * x54563;
      Fp x54668 = x54666 - x54667;
      Fp x54669 = x54147 + x54567;
      Fp x54670 = x54545 * x54567;
      Fp x54671 = x54669 - x54670;
      Fp x54672 = x54148 + x54571;
      Fp x54673 = x54549 * x54571;
      Fp x54674 = x54672 - x54673;
      Fp x54675 = x54149 + x54575;
      Fp x54676 = x54553 * x54575;
      Fp x54677 = x54675 - x54676;
      Fp x54678 = x54118 + x54579;
      Fp x54679 = x54557 * x54579;
      Fp x54680 = x54678 - x54679;
      Fp x54681 = x54119 + x54583;
      Fp x54682 = x54561 * x54583;
      Fp x54683 = x54681 - x54682;
      Fp x54684 = x54120 + x54587;
      Fp x54685 = x54565 * x54587;
      Fp x54686 = x54684 - x54685;
      Fp x54687 = x54121 + x54591;
      Fp x54688 = x54569 * x54591;
      Fp x54689 = x54687 - x54688;
      Fp x54690 = x54122 + x54595;
      Fp x54691 = x54573 * x54595;
      Fp x54692 = x54690 - x54691;
      Fp x54693 = x54123 + x54599;
      Fp x54694 = x54577 * x54599;
      Fp x54695 = x54693 - x54694;
      Fp x54696 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x54697 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x54698 = x54697 * x1;
      Fp x54699 = x54696 + x54698;
      Fp x54700 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x54701 = x54700 * x3;
      Fp x54702 = x54699 + x54701;
      Fp x54703 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x54704 = x54703 * x6;
      Fp x54705 = x54702 + x54704;
      Fp x54706 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x54707 = x54706 * x11;
      Fp x54708 = x54705 + x54707;
      Fp x54709 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x54710 = x54709 * x27;
      Fp x54711 = x54708 + x54710;
      Fp x54712 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x54713 = x54712 * x12;
      Fp x54714 = x54711 + x54713;
      Fp x54715 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x54716 = x54715 * x28;
      Fp x54717 = x54714 + x54716;
      Fp x54718 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x54719 = x54718 * x13;
      Fp x54720 = x54717 + x54719;
      Fp x54721 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x54722 = x54721 * x29;
      Fp x54723 = x54720 + x54722;
      Fp x54724 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x54725 = x54724 * x14;
      Fp x54726 = x54723 + x54725;
      Fp x54727 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x54728 = x54727 * x30;
      Fp x54729 = x54726 + x54728;
      Fp x54730 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x54731 = x54730 * x15;
      Fp x54732 = x54729 + x54731;
      Fp x54733 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x54734 = x54733 * x31;
      Fp x54735 = x54732 + x54734;
      Fp x54736 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x54737 = x54736 * x16;
      Fp x54738 = x54735 + x54737;
      Fp x54739 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x54740 = x54739 * x32;
      Fp x54741 = x54738 + x54740;
      Fp x54742 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x54743 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x54744 = x54743 * x1;
      Fp x54745 = x54742 + x54744;
      Fp x54746 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x54747 = x54746 * x3;
      Fp x54748 = x54745 + x54747;
      Fp x54749 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x54750 = x54749 * x6;
      Fp x54751 = x54748 + x54750;
      Fp x54752 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x54753 = x54752 * x11;
      Fp x54754 = x54751 + x54753;
      Fp x54755 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x54756 = x54755 * x27;
      Fp x54757 = x54754 + x54756;
      Fp x54758 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x54759 = x54758 * x12;
      Fp x54760 = x54757 + x54759;
      Fp x54761 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x54762 = x54761 * x28;
      Fp x54763 = x54760 + x54762;
      Fp x54764 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x54765 = x54764 * x13;
      Fp x54766 = x54763 + x54765;
      Fp x54767 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x54768 = x54767 * x29;
      Fp x54769 = x54766 + x54768;
      Fp x54770 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x54771 = x54770 * x14;
      Fp x54772 = x54769 + x54771;
      Fp x54773 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x54774 = x54773 * x30;
      Fp x54775 = x54772 + x54774;
      Fp x54776 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x54777 = x54776 * x15;
      Fp x54778 = x54775 + x54777;
      Fp x54779 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x54780 = x54779 * x31;
      Fp x54781 = x54778 + x54780;
      Fp x54782 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x54783 = x54782 * x16;
      Fp x54784 = x54781 + x54783;
      Fp x54785 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x54786 = x54785 * x32;
      Fp x54787 = x54784 + x54786;
      Fp x54788 = x54741 + x54246;
      Fp x54789 = x54787 + x54247;
      Fp x54790 = x54215 * x1;
      Fp x54791 = x54214 + x54790;
      Fp x54792 = x54216 * x3;
      Fp x54793 = x54791 + x54792;
      Fp x54794 = x54217 * x6;
      Fp x54795 = x54793 + x54794;
      Fp x54796 = x54218 * x11;
      Fp x54797 = x54795 + x54796;
      Fp x54798 = x54219 * x27;
      Fp x54799 = x54797 + x54798;
      Fp x54800 = x54220 * x12;
      Fp x54801 = x54799 + x54800;
      Fp x54802 = x54221 * x28;
      Fp x54803 = x54801 + x54802;
      Fp x54804 = x54222 * x13;
      Fp x54805 = x54803 + x54804;
      Fp x54806 = x54223 * x29;
      Fp x54807 = x54805 + x54806;
      Fp x54808 = x54224 * x14;
      Fp x54809 = x54807 + x54808;
      Fp x54810 = x54225 * x30;
      Fp x54811 = x54809 + x54810;
      Fp x54812 = x54226 * x15;
      Fp x54813 = x54811 + x54812;
      Fp x54814 = x54227 * x31;
      Fp x54815 = x54813 + x54814;
      Fp x54816 = x54228 * x16;
      Fp x54817 = x54815 + x54816;
      Fp x54818 = x54229 * x32;
      Fp x54819 = x54817 + x54818;
      Fp x54820 = x54231 * x1;
      Fp x54821 = x54230 + x54820;
      Fp x54822 = x54232 * x3;
      Fp x54823 = x54821 + x54822;
      Fp x54824 = x54233 * x6;
      Fp x54825 = x54823 + x54824;
      Fp x54826 = x54234 * x11;
      Fp x54827 = x54825 + x54826;
      Fp x54828 = x54235 * x27;
      Fp x54829 = x54827 + x54828;
      Fp x54830 = x54236 * x12;
      Fp x54831 = x54829 + x54830;
      Fp x54832 = x54237 * x28;
      Fp x54833 = x54831 + x54832;
      Fp x54834 = x54238 * x13;
      Fp x54835 = x54833 + x54834;
      Fp x54836 = x54239 * x29;
      Fp x54837 = x54835 + x54836;
      Fp x54838 = x54240 * x14;
      Fp x54839 = x54837 + x54838;
      Fp x54840 = x54241 * x30;
      Fp x54841 = x54839 + x54840;
      Fp x54842 = x54242 * x15;
      Fp x54843 = x54841 + x54842;
      Fp x54844 = x54243 * x31;
      Fp x54845 = x54843 + x54844;
      Fp x54846 = x54244 * x16;
      Fp x54847 = x54845 + x54846;
      Fp x54848 = x54245 * x32;
      Fp x54849 = x54847 + x54848;
      Fp x54850 = x54788 + x54819;
      Fp x54851 = x54789 + x54849;
      Fp x54852 = x54118 * x54150;
      Fp x54853 = x71 - x54118;
      Fp x54854 = x54853 * x54182;
      Fp x54855 = x54852 + x54854;
      Fp x54856 = x54119 * x54151;
      Fp x54857 = x71 - x54119;
      Fp x54858 = x54857 * x54183;
      Fp x54859 = x54856 + x54858;
      Fp x54860 = x54120 * x54152;
      Fp x54861 = x71 - x54120;
      Fp x54862 = x54861 * x54184;
      Fp x54863 = x54860 + x54862;
      Fp x54864 = x54121 * x54153;
      Fp x54865 = x71 - x54121;
      Fp x54866 = x54865 * x54185;
      Fp x54867 = x54864 + x54866;
      Fp x54868 = x54122 * x54154;
      Fp x54869 = x71 - x54122;
      Fp x54870 = x54869 * x54186;
      Fp x54871 = x54868 + x54870;
      Fp x54872 = x54123 * x54155;
      Fp x54873 = x71 - x54123;
      Fp x54874 = x54873 * x54187;
      Fp x54875 = x54872 + x54874;
      Fp x54876 = x54124 * x54156;
      Fp x54877 = x71 - x54124;
      Fp x54878 = x54877 * x54188;
      Fp x54879 = x54876 + x54878;
      Fp x54880 = x54125 * x54157;
      Fp x54881 = x71 - x54125;
      Fp x54882 = x54881 * x54189;
      Fp x54883 = x54880 + x54882;
      Fp x54884 = x54126 * x54158;
      Fp x54885 = x71 - x54126;
      Fp x54886 = x54885 * x54190;
      Fp x54887 = x54884 + x54886;
      Fp x54888 = x54127 * x54159;
      Fp x54889 = x71 - x54127;
      Fp x54890 = x54889 * x54191;
      Fp x54891 = x54888 + x54890;
      Fp x54892 = x54128 * x54160;
      Fp x54893 = x71 - x54128;
      Fp x54894 = x54893 * x54192;
      Fp x54895 = x54892 + x54894;
      Fp x54896 = x54129 * x54161;
      Fp x54897 = x71 - x54129;
      Fp x54898 = x54897 * x54193;
      Fp x54899 = x54896 + x54898;
      Fp x54900 = x54130 * x54162;
      Fp x54901 = x71 - x54130;
      Fp x54902 = x54901 * x54194;
      Fp x54903 = x54900 + x54902;
      Fp x54904 = x54131 * x54163;
      Fp x54905 = x71 - x54131;
      Fp x54906 = x54905 * x54195;
      Fp x54907 = x54904 + x54906;
      Fp x54908 = x54132 * x54164;
      Fp x54909 = x71 - x54132;
      Fp x54910 = x54909 * x54196;
      Fp x54911 = x54908 + x54910;
      Fp x54912 = x54133 * x54165;
      Fp x54913 = x71 - x54133;
      Fp x54914 = x54913 * x54197;
      Fp x54915 = x54912 + x54914;
      Fp x54916 = x54134 * x54166;
      Fp x54917 = x71 - x54134;
      Fp x54918 = x54917 * x54198;
      Fp x54919 = x54916 + x54918;
      Fp x54920 = x54135 * x54167;
      Fp x54921 = x71 - x54135;
      Fp x54922 = x54921 * x54199;
      Fp x54923 = x54920 + x54922;
      Fp x54924 = x54136 * x54168;
      Fp x54925 = x71 - x54136;
      Fp x54926 = x54925 * x54200;
      Fp x54927 = x54924 + x54926;
      Fp x54928 = x54137 * x54169;
      Fp x54929 = x71 - x54137;
      Fp x54930 = x54929 * x54201;
      Fp x54931 = x54928 + x54930;
      Fp x54932 = x54138 * x54170;
      Fp x54933 = x71 - x54138;
      Fp x54934 = x54933 * x54202;
      Fp x54935 = x54932 + x54934;
      Fp x54936 = x54139 * x54171;
      Fp x54937 = x71 - x54139;
      Fp x54938 = x54937 * x54203;
      Fp x54939 = x54936 + x54938;
      Fp x54940 = x54140 * x54172;
      Fp x54941 = x71 - x54140;
      Fp x54942 = x54941 * x54204;
      Fp x54943 = x54940 + x54942;
      Fp x54944 = x54141 * x54173;
      Fp x54945 = x71 - x54141;
      Fp x54946 = x54945 * x54205;
      Fp x54947 = x54944 + x54946;
      Fp x54948 = x54142 * x54174;
      Fp x54949 = x71 - x54142;
      Fp x54950 = x54949 * x54206;
      Fp x54951 = x54948 + x54950;
      Fp x54952 = x54143 * x54175;
      Fp x54953 = x71 - x54143;
      Fp x54954 = x54953 * x54207;
      Fp x54955 = x54952 + x54954;
      Fp x54956 = x54144 * x54176;
      Fp x54957 = x71 - x54144;
      Fp x54958 = x54957 * x54208;
      Fp x54959 = x54956 + x54958;
      Fp x54960 = x54145 * x54177;
      Fp x54961 = x71 - x54145;
      Fp x54962 = x54961 * x54209;
      Fp x54963 = x54960 + x54962;
      Fp x54964 = x54146 * x54178;
      Fp x54965 = x71 - x54146;
      Fp x54966 = x54965 * x54210;
      Fp x54967 = x54964 + x54966;
      Fp x54968 = x54147 * x54179;
      Fp x54969 = x71 - x54147;
      Fp x54970 = x54969 * x54211;
      Fp x54971 = x54968 + x54970;
      Fp x54972 = x54148 * x54180;
      Fp x54973 = x71 - x54148;
      Fp x54974 = x54973 * x54212;
      Fp x54975 = x54972 + x54974;
      Fp x54976 = x54149 * x54181;
      Fp x54977 = x71 - x54149;
      Fp x54978 = x54977 * x54213;
      Fp x54979 = x54976 + x54978;
      Fp x54980 = x54859 * x1;
      Fp x54981 = x54855 + x54980;
      Fp x54982 = x54863 * x3;
      Fp x54983 = x54981 + x54982;
      Fp x54984 = x54867 * x6;
      Fp x54985 = x54983 + x54984;
      Fp x54986 = x54871 * x11;
      Fp x54987 = x54985 + x54986;
      Fp x54988 = x54875 * x27;
      Fp x54989 = x54987 + x54988;
      Fp x54990 = x54879 * x12;
      Fp x54991 = x54989 + x54990;
      Fp x54992 = x54883 * x28;
      Fp x54993 = x54991 + x54992;
      Fp x54994 = x54887 * x13;
      Fp x54995 = x54993 + x54994;
      Fp x54996 = x54891 * x29;
      Fp x54997 = x54995 + x54996;
      Fp x54998 = x54895 * x14;
      Fp x54999 = x54997 + x54998;
      Fp x55000 = x54899 * x30;
      Fp x55001 = x54999 + x55000;
      Fp x55002 = x54903 * x15;
      Fp x55003 = x55001 + x55002;
      Fp x55004 = x54907 * x31;
      Fp x55005 = x55003 + x55004;
      Fp x55006 = x54911 * x16;
      Fp x55007 = x55005 + x55006;
      Fp x55008 = x54915 * x32;
      Fp x55009 = x55007 + x55008;
      Fp x55010 = x54923 * x1;
      Fp x55011 = x54919 + x55010;
      Fp x55012 = x54927 * x3;
      Fp x55013 = x55011 + x55012;
      Fp x55014 = x54931 * x6;
      Fp x55015 = x55013 + x55014;
      Fp x55016 = x54935 * x11;
      Fp x55017 = x55015 + x55016;
      Fp x55018 = x54939 * x27;
      Fp x55019 = x55017 + x55018;
      Fp x55020 = x54943 * x12;
      Fp x55021 = x55019 + x55020;
      Fp x55022 = x54947 * x28;
      Fp x55023 = x55021 + x55022;
      Fp x55024 = x54951 * x13;
      Fp x55025 = x55023 + x55024;
      Fp x55026 = x54955 * x29;
      Fp x55027 = x55025 + x55026;
      Fp x55028 = x54959 * x14;
      Fp x55029 = x55027 + x55028;
      Fp x55030 = x54963 * x30;
      Fp x55031 = x55029 + x55030;
      Fp x55032 = x54967 * x15;
      Fp x55033 = x55031 + x55032;
      Fp x55034 = x54971 * x31;
      Fp x55035 = x55033 + x55034;
      Fp x55036 = x54975 * x16;
      Fp x55037 = x55035 + x55036;
      Fp x55038 = x54979 * x32;
      Fp x55039 = x55037 + x55038;
      Fp x55040 = x54850 + x55009;
      Fp x55041 = x54851 + x55039;
      Fp x55042 = x54605 * x1;
      Fp x55043 = x54602 + x55042;
      Fp x55044 = x54608 * x3;
      Fp x55045 = x55043 + x55044;
      Fp x55046 = x54611 * x6;
      Fp x55047 = x55045 + x55046;
      Fp x55048 = x54614 * x11;
      Fp x55049 = x55047 + x55048;
      Fp x55050 = x54617 * x27;
      Fp x55051 = x55049 + x55050;
      Fp x55052 = x54620 * x12;
      Fp x55053 = x55051 + x55052;
      Fp x55054 = x54623 * x28;
      Fp x55055 = x55053 + x55054;
      Fp x55056 = x54626 * x13;
      Fp x55057 = x55055 + x55056;
      Fp x55058 = x54629 * x29;
      Fp x55059 = x55057 + x55058;
      Fp x55060 = x54632 * x14;
      Fp x55061 = x55059 + x55060;
      Fp x55062 = x54635 * x30;
      Fp x55063 = x55061 + x55062;
      Fp x55064 = x54638 * x15;
      Fp x55065 = x55063 + x55064;
      Fp x55066 = x54641 * x31;
      Fp x55067 = x55065 + x55066;
      Fp x55068 = x54644 * x16;
      Fp x55069 = x55067 + x55068;
      Fp x55070 = x54647 * x32;
      Fp x55071 = x55069 + x55070;
      Fp x55072 = x54653 * x1;
      Fp x55073 = x54650 + x55072;
      Fp x55074 = x54656 * x3;
      Fp x55075 = x55073 + x55074;
      Fp x55076 = x54659 * x6;
      Fp x55077 = x55075 + x55076;
      Fp x55078 = x54662 * x11;
      Fp x55079 = x55077 + x55078;
      Fp x55080 = x54665 * x27;
      Fp x55081 = x55079 + x55080;
      Fp x55082 = x54668 * x12;
      Fp x55083 = x55081 + x55082;
      Fp x55084 = x54671 * x28;
      Fp x55085 = x55083 + x55084;
      Fp x55086 = x54674 * x13;
      Fp x55087 = x55085 + x55086;
      Fp x55088 = x54677 * x29;
      Fp x55089 = x55087 + x55088;
      Fp x55090 = x54680 * x14;
      Fp x55091 = x55089 + x55090;
      Fp x55092 = x54683 * x30;
      Fp x55093 = x55091 + x55092;
      Fp x55094 = x54686 * x15;
      Fp x55095 = x55093 + x55094;
      Fp x55096 = x54689 * x31;
      Fp x55097 = x55095 + x55096;
      Fp x55098 = x54692 * x16;
      Fp x55099 = x55097 + x55098;
      Fp x55100 = x54695 * x32;
      Fp x55101 = x55099 + x55100;
      Fp x55102 = x55040 + x55071;
      Fp x55103 = x55041 + x55101;
      Fp x55104 = x53990 * x54022;
      Fp x55105 = x71 - x54054;
      Fp x55106 = x55104 * x55105;
      Fp x55107 = x71 - x54022;
      Fp x55108 = x53990 * x55107;
      Fp x55109 = x55108 * x54054;
      Fp x55110 = x55106 + x55109;
      Fp x55111 = x71 - x53990;
      Fp x55112 = x55111 * x54022;
      Fp x55113 = x55112 * x54054;
      Fp x55114 = x55110 + x55113;
      Fp x55115 = x55104 * x54054;
      Fp x55116 = x55114 + x55115;
      Fp x55117 = x53991 * x54023;
      Fp x55118 = x71 - x54055;
      Fp x55119 = x55117 * x55118;
      Fp x55120 = x71 - x54023;
      Fp x55121 = x53991 * x55120;
      Fp x55122 = x55121 * x54055;
      Fp x55123 = x55119 + x55122;
      Fp x55124 = x71 - x53991;
      Fp x55125 = x55124 * x54023;
      Fp x55126 = x55125 * x54055;
      Fp x55127 = x55123 + x55126;
      Fp x55128 = x55117 * x54055;
      Fp x55129 = x55127 + x55128;
      Fp x55130 = x53992 * x54024;
      Fp x55131 = x71 - x54056;
      Fp x55132 = x55130 * x55131;
      Fp x55133 = x71 - x54024;
      Fp x55134 = x53992 * x55133;
      Fp x55135 = x55134 * x54056;
      Fp x55136 = x55132 + x55135;
      Fp x55137 = x71 - x53992;
      Fp x55138 = x55137 * x54024;
      Fp x55139 = x55138 * x54056;
      Fp x55140 = x55136 + x55139;
      Fp x55141 = x55130 * x54056;
      Fp x55142 = x55140 + x55141;
      Fp x55143 = x53993 * x54025;
      Fp x55144 = x71 - x54057;
      Fp x55145 = x55143 * x55144;
      Fp x55146 = x71 - x54025;
      Fp x55147 = x53993 * x55146;
      Fp x55148 = x55147 * x54057;
      Fp x55149 = x55145 + x55148;
      Fp x55150 = x71 - x53993;
      Fp x55151 = x55150 * x54025;
      Fp x55152 = x55151 * x54057;
      Fp x55153 = x55149 + x55152;
      Fp x55154 = x55143 * x54057;
      Fp x55155 = x55153 + x55154;
      Fp x55156 = x53994 * x54026;
      Fp x55157 = x71 - x54058;
      Fp x55158 = x55156 * x55157;
      Fp x55159 = x71 - x54026;
      Fp x55160 = x53994 * x55159;
      Fp x55161 = x55160 * x54058;
      Fp x55162 = x55158 + x55161;
      Fp x55163 = x71 - x53994;
      Fp x55164 = x55163 * x54026;
      Fp x55165 = x55164 * x54058;
      Fp x55166 = x55162 + x55165;
      Fp x55167 = x55156 * x54058;
      Fp x55168 = x55166 + x55167;
      Fp x55169 = x53995 * x54027;
      Fp x55170 = x71 - x54059;
      Fp x55171 = x55169 * x55170;
      Fp x55172 = x71 - x54027;
      Fp x55173 = x53995 * x55172;
      Fp x55174 = x55173 * x54059;
      Fp x55175 = x55171 + x55174;
      Fp x55176 = x71 - x53995;
      Fp x55177 = x55176 * x54027;
      Fp x55178 = x55177 * x54059;
      Fp x55179 = x55175 + x55178;
      Fp x55180 = x55169 * x54059;
      Fp x55181 = x55179 + x55180;
      Fp x55182 = x53996 * x54028;
      Fp x55183 = x71 - x54060;
      Fp x55184 = x55182 * x55183;
      Fp x55185 = x71 - x54028;
      Fp x55186 = x53996 * x55185;
      Fp x55187 = x55186 * x54060;
      Fp x55188 = x55184 + x55187;
      Fp x55189 = x71 - x53996;
      Fp x55190 = x55189 * x54028;
      Fp x55191 = x55190 * x54060;
      Fp x55192 = x55188 + x55191;
      Fp x55193 = x55182 * x54060;
      Fp x55194 = x55192 + x55193;
      Fp x55195 = x53997 * x54029;
      Fp x55196 = x71 - x54061;
      Fp x55197 = x55195 * x55196;
      Fp x55198 = x71 - x54029;
      Fp x55199 = x53997 * x55198;
      Fp x55200 = x55199 * x54061;
      Fp x55201 = x55197 + x55200;
      Fp x55202 = x71 - x53997;
      Fp x55203 = x55202 * x54029;
      Fp x55204 = x55203 * x54061;
      Fp x55205 = x55201 + x55204;
      Fp x55206 = x55195 * x54061;
      Fp x55207 = x55205 + x55206;
      Fp x55208 = x53998 * x54030;
      Fp x55209 = x71 - x54062;
      Fp x55210 = x55208 * x55209;
      Fp x55211 = x71 - x54030;
      Fp x55212 = x53998 * x55211;
      Fp x55213 = x55212 * x54062;
      Fp x55214 = x55210 + x55213;
      Fp x55215 = x71 - x53998;
      Fp x55216 = x55215 * x54030;
      Fp x55217 = x55216 * x54062;
      Fp x55218 = x55214 + x55217;
      Fp x55219 = x55208 * x54062;
      Fp x55220 = x55218 + x55219;
      Fp x55221 = x53999 * x54031;
      Fp x55222 = x71 - x54063;
      Fp x55223 = x55221 * x55222;
      Fp x55224 = x71 - x54031;
      Fp x55225 = x53999 * x55224;
      Fp x55226 = x55225 * x54063;
      Fp x55227 = x55223 + x55226;
      Fp x55228 = x71 - x53999;
      Fp x55229 = x55228 * x54031;
      Fp x55230 = x55229 * x54063;
      Fp x55231 = x55227 + x55230;
      Fp x55232 = x55221 * x54063;
      Fp x55233 = x55231 + x55232;
      Fp x55234 = x54000 * x54032;
      Fp x55235 = x71 - x54064;
      Fp x55236 = x55234 * x55235;
      Fp x55237 = x71 - x54032;
      Fp x55238 = x54000 * x55237;
      Fp x55239 = x55238 * x54064;
      Fp x55240 = x55236 + x55239;
      Fp x55241 = x71 - x54000;
      Fp x55242 = x55241 * x54032;
      Fp x55243 = x55242 * x54064;
      Fp x55244 = x55240 + x55243;
      Fp x55245 = x55234 * x54064;
      Fp x55246 = x55244 + x55245;
      Fp x55247 = x54001 * x54033;
      Fp x55248 = x71 - x54065;
      Fp x55249 = x55247 * x55248;
      Fp x55250 = x71 - x54033;
      Fp x55251 = x54001 * x55250;
      Fp x55252 = x55251 * x54065;
      Fp x55253 = x55249 + x55252;
      Fp x55254 = x71 - x54001;
      Fp x55255 = x55254 * x54033;
      Fp x55256 = x55255 * x54065;
      Fp x55257 = x55253 + x55256;
      Fp x55258 = x55247 * x54065;
      Fp x55259 = x55257 + x55258;
      Fp x55260 = x54002 * x54034;
      Fp x55261 = x71 - x54066;
      Fp x55262 = x55260 * x55261;
      Fp x55263 = x71 - x54034;
      Fp x55264 = x54002 * x55263;
      Fp x55265 = x55264 * x54066;
      Fp x55266 = x55262 + x55265;
      Fp x55267 = x71 - x54002;
      Fp x55268 = x55267 * x54034;
      Fp x55269 = x55268 * x54066;
      Fp x55270 = x55266 + x55269;
      Fp x55271 = x55260 * x54066;
      Fp x55272 = x55270 + x55271;
      Fp x55273 = x54003 * x54035;
      Fp x55274 = x71 - x54067;
      Fp x55275 = x55273 * x55274;
      Fp x55276 = x71 - x54035;
      Fp x55277 = x54003 * x55276;
      Fp x55278 = x55277 * x54067;
      Fp x55279 = x55275 + x55278;
      Fp x55280 = x71 - x54003;
      Fp x55281 = x55280 * x54035;
      Fp x55282 = x55281 * x54067;
      Fp x55283 = x55279 + x55282;
      Fp x55284 = x55273 * x54067;
      Fp x55285 = x55283 + x55284;
      Fp x55286 = x54004 * x54036;
      Fp x55287 = x71 - x54068;
      Fp x55288 = x55286 * x55287;
      Fp x55289 = x71 - x54036;
      Fp x55290 = x54004 * x55289;
      Fp x55291 = x55290 * x54068;
      Fp x55292 = x55288 + x55291;
      Fp x55293 = x71 - x54004;
      Fp x55294 = x55293 * x54036;
      Fp x55295 = x55294 * x54068;
      Fp x55296 = x55292 + x55295;
      Fp x55297 = x55286 * x54068;
      Fp x55298 = x55296 + x55297;
      Fp x55299 = x54005 * x54037;
      Fp x55300 = x71 - x54069;
      Fp x55301 = x55299 * x55300;
      Fp x55302 = x71 - x54037;
      Fp x55303 = x54005 * x55302;
      Fp x55304 = x55303 * x54069;
      Fp x55305 = x55301 + x55304;
      Fp x55306 = x71 - x54005;
      Fp x55307 = x55306 * x54037;
      Fp x55308 = x55307 * x54069;
      Fp x55309 = x55305 + x55308;
      Fp x55310 = x55299 * x54069;
      Fp x55311 = x55309 + x55310;
      Fp x55312 = x54006 * x54038;
      Fp x55313 = x71 - x54070;
      Fp x55314 = x55312 * x55313;
      Fp x55315 = x71 - x54038;
      Fp x55316 = x54006 * x55315;
      Fp x55317 = x55316 * x54070;
      Fp x55318 = x55314 + x55317;
      Fp x55319 = x71 - x54006;
      Fp x55320 = x55319 * x54038;
      Fp x55321 = x55320 * x54070;
      Fp x55322 = x55318 + x55321;
      Fp x55323 = x55312 * x54070;
      Fp x55324 = x55322 + x55323;
      Fp x55325 = x54007 * x54039;
      Fp x55326 = x71 - x54071;
      Fp x55327 = x55325 * x55326;
      Fp x55328 = x71 - x54039;
      Fp x55329 = x54007 * x55328;
      Fp x55330 = x55329 * x54071;
      Fp x55331 = x55327 + x55330;
      Fp x55332 = x71 - x54007;
      Fp x55333 = x55332 * x54039;
      Fp x55334 = x55333 * x54071;
      Fp x55335 = x55331 + x55334;
      Fp x55336 = x55325 * x54071;
      Fp x55337 = x55335 + x55336;
      Fp x55338 = x54008 * x54040;
      Fp x55339 = x71 - x54072;
      Fp x55340 = x55338 * x55339;
      Fp x55341 = x71 - x54040;
      Fp x55342 = x54008 * x55341;
      Fp x55343 = x55342 * x54072;
      Fp x55344 = x55340 + x55343;
      Fp x55345 = x71 - x54008;
      Fp x55346 = x55345 * x54040;
      Fp x55347 = x55346 * x54072;
      Fp x55348 = x55344 + x55347;
      Fp x55349 = x55338 * x54072;
      Fp x55350 = x55348 + x55349;
      Fp x55351 = x54009 * x54041;
      Fp x55352 = x71 - x54073;
      Fp x55353 = x55351 * x55352;
      Fp x55354 = x71 - x54041;
      Fp x55355 = x54009 * x55354;
      Fp x55356 = x55355 * x54073;
      Fp x55357 = x55353 + x55356;
      Fp x55358 = x71 - x54009;
      Fp x55359 = x55358 * x54041;
      Fp x55360 = x55359 * x54073;
      Fp x55361 = x55357 + x55360;
      Fp x55362 = x55351 * x54073;
      Fp x55363 = x55361 + x55362;
      Fp x55364 = x54010 * x54042;
      Fp x55365 = x71 - x54074;
      Fp x55366 = x55364 * x55365;
      Fp x55367 = x71 - x54042;
      Fp x55368 = x54010 * x55367;
      Fp x55369 = x55368 * x54074;
      Fp x55370 = x55366 + x55369;
      Fp x55371 = x71 - x54010;
      Fp x55372 = x55371 * x54042;
      Fp x55373 = x55372 * x54074;
      Fp x55374 = x55370 + x55373;
      Fp x55375 = x55364 * x54074;
      Fp x55376 = x55374 + x55375;
      Fp x55377 = x54011 * x54043;
      Fp x55378 = x71 - x54075;
      Fp x55379 = x55377 * x55378;
      Fp x55380 = x71 - x54043;
      Fp x55381 = x54011 * x55380;
      Fp x55382 = x55381 * x54075;
      Fp x55383 = x55379 + x55382;
      Fp x55384 = x71 - x54011;
      Fp x55385 = x55384 * x54043;
      Fp x55386 = x55385 * x54075;
      Fp x55387 = x55383 + x55386;
      Fp x55388 = x55377 * x54075;
      Fp x55389 = x55387 + x55388;
      Fp x55390 = x54012 * x54044;
      Fp x55391 = x71 - x54076;
      Fp x55392 = x55390 * x55391;
      Fp x55393 = x71 - x54044;
      Fp x55394 = x54012 * x55393;
      Fp x55395 = x55394 * x54076;
      Fp x55396 = x55392 + x55395;
      Fp x55397 = x71 - x54012;
      Fp x55398 = x55397 * x54044;
      Fp x55399 = x55398 * x54076;
      Fp x55400 = x55396 + x55399;
      Fp x55401 = x55390 * x54076;
      Fp x55402 = x55400 + x55401;
      Fp x55403 = x54013 * x54045;
      Fp x55404 = x71 - x54077;
      Fp x55405 = x55403 * x55404;
      Fp x55406 = x71 - x54045;
      Fp x55407 = x54013 * x55406;
      Fp x55408 = x55407 * x54077;
      Fp x55409 = x55405 + x55408;
      Fp x55410 = x71 - x54013;
      Fp x55411 = x55410 * x54045;
      Fp x55412 = x55411 * x54077;
      Fp x55413 = x55409 + x55412;
      Fp x55414 = x55403 * x54077;
      Fp x55415 = x55413 + x55414;
      Fp x55416 = x54014 * x54046;
      Fp x55417 = x71 - x54078;
      Fp x55418 = x55416 * x55417;
      Fp x55419 = x71 - x54046;
      Fp x55420 = x54014 * x55419;
      Fp x55421 = x55420 * x54078;
      Fp x55422 = x55418 + x55421;
      Fp x55423 = x71 - x54014;
      Fp x55424 = x55423 * x54046;
      Fp x55425 = x55424 * x54078;
      Fp x55426 = x55422 + x55425;
      Fp x55427 = x55416 * x54078;
      Fp x55428 = x55426 + x55427;
      Fp x55429 = x54015 * x54047;
      Fp x55430 = x71 - x54079;
      Fp x55431 = x55429 * x55430;
      Fp x55432 = x71 - x54047;
      Fp x55433 = x54015 * x55432;
      Fp x55434 = x55433 * x54079;
      Fp x55435 = x55431 + x55434;
      Fp x55436 = x71 - x54015;
      Fp x55437 = x55436 * x54047;
      Fp x55438 = x55437 * x54079;
      Fp x55439 = x55435 + x55438;
      Fp x55440 = x55429 * x54079;
      Fp x55441 = x55439 + x55440;
      Fp x55442 = x54016 * x54048;
      Fp x55443 = x71 - x54080;
      Fp x55444 = x55442 * x55443;
      Fp x55445 = x71 - x54048;
      Fp x55446 = x54016 * x55445;
      Fp x55447 = x55446 * x54080;
      Fp x55448 = x55444 + x55447;
      Fp x55449 = x71 - x54016;
      Fp x55450 = x55449 * x54048;
      Fp x55451 = x55450 * x54080;
      Fp x55452 = x55448 + x55451;
      Fp x55453 = x55442 * x54080;
      Fp x55454 = x55452 + x55453;
      Fp x55455 = x54017 * x54049;
      Fp x55456 = x71 - x54081;
      Fp x55457 = x55455 * x55456;
      Fp x55458 = x71 - x54049;
      Fp x55459 = x54017 * x55458;
      Fp x55460 = x55459 * x54081;
      Fp x55461 = x55457 + x55460;
      Fp x55462 = x71 - x54017;
      Fp x55463 = x55462 * x54049;
      Fp x55464 = x55463 * x54081;
      Fp x55465 = x55461 + x55464;
      Fp x55466 = x55455 * x54081;
      Fp x55467 = x55465 + x55466;
      Fp x55468 = x54018 * x54050;
      Fp x55469 = x71 - x54082;
      Fp x55470 = x55468 * x55469;
      Fp x55471 = x71 - x54050;
      Fp x55472 = x54018 * x55471;
      Fp x55473 = x55472 * x54082;
      Fp x55474 = x55470 + x55473;
      Fp x55475 = x71 - x54018;
      Fp x55476 = x55475 * x54050;
      Fp x55477 = x55476 * x54082;
      Fp x55478 = x55474 + x55477;
      Fp x55479 = x55468 * x54082;
      Fp x55480 = x55478 + x55479;
      Fp x55481 = x54019 * x54051;
      Fp x55482 = x71 - x54083;
      Fp x55483 = x55481 * x55482;
      Fp x55484 = x71 - x54051;
      Fp x55485 = x54019 * x55484;
      Fp x55486 = x55485 * x54083;
      Fp x55487 = x55483 + x55486;
      Fp x55488 = x71 - x54019;
      Fp x55489 = x55488 * x54051;
      Fp x55490 = x55489 * x54083;
      Fp x55491 = x55487 + x55490;
      Fp x55492 = x55481 * x54083;
      Fp x55493 = x55491 + x55492;
      Fp x55494 = x54020 * x54052;
      Fp x55495 = x71 - x54084;
      Fp x55496 = x55494 * x55495;
      Fp x55497 = x71 - x54052;
      Fp x55498 = x54020 * x55497;
      Fp x55499 = x55498 * x54084;
      Fp x55500 = x55496 + x55499;
      Fp x55501 = x71 - x54020;
      Fp x55502 = x55501 * x54052;
      Fp x55503 = x55502 * x54084;
      Fp x55504 = x55500 + x55503;
      Fp x55505 = x55494 * x54084;
      Fp x55506 = x55504 + x55505;
      Fp x55507 = x54021 * x54053;
      Fp x55508 = x71 - x54085;
      Fp x55509 = x55507 * x55508;
      Fp x55510 = x71 - x54053;
      Fp x55511 = x54021 * x55510;
      Fp x55512 = x55511 * x54085;
      Fp x55513 = x55509 + x55512;
      Fp x55514 = x71 - x54021;
      Fp x55515 = x55514 * x54053;
      Fp x55516 = x55515 * x54085;
      Fp x55517 = x55513 + x55516;
      Fp x55518 = x55507 * x54085;
      Fp x55519 = x55517 + x55518;
      Fp x55520 = x55129 * x1;
      Fp x55521 = x55116 + x55520;
      Fp x55522 = x55142 * x3;
      Fp x55523 = x55521 + x55522;
      Fp x55524 = x55155 * x6;
      Fp x55525 = x55523 + x55524;
      Fp x55526 = x55168 * x11;
      Fp x55527 = x55525 + x55526;
      Fp x55528 = x55181 * x27;
      Fp x55529 = x55527 + x55528;
      Fp x55530 = x55194 * x12;
      Fp x55531 = x55529 + x55530;
      Fp x55532 = x55207 * x28;
      Fp x55533 = x55531 + x55532;
      Fp x55534 = x55220 * x13;
      Fp x55535 = x55533 + x55534;
      Fp x55536 = x55233 * x29;
      Fp x55537 = x55535 + x55536;
      Fp x55538 = x55246 * x14;
      Fp x55539 = x55537 + x55538;
      Fp x55540 = x55259 * x30;
      Fp x55541 = x55539 + x55540;
      Fp x55542 = x55272 * x15;
      Fp x55543 = x55541 + x55542;
      Fp x55544 = x55285 * x31;
      Fp x55545 = x55543 + x55544;
      Fp x55546 = x55298 * x16;
      Fp x55547 = x55545 + x55546;
      Fp x55548 = x55311 * x32;
      Fp x55549 = x55547 + x55548;
      Fp x55550 = x55337 * x1;
      Fp x55551 = x55324 + x55550;
      Fp x55552 = x55350 * x3;
      Fp x55553 = x55551 + x55552;
      Fp x55554 = x55363 * x6;
      Fp x55555 = x55553 + x55554;
      Fp x55556 = x55376 * x11;
      Fp x55557 = x55555 + x55556;
      Fp x55558 = x55389 * x27;
      Fp x55559 = x55557 + x55558;
      Fp x55560 = x55402 * x12;
      Fp x55561 = x55559 + x55560;
      Fp x55562 = x55415 * x28;
      Fp x55563 = x55561 + x55562;
      Fp x55564 = x55428 * x13;
      Fp x55565 = x55563 + x55564;
      Fp x55566 = x55441 * x29;
      Fp x55567 = x55565 + x55566;
      Fp x55568 = x55454 * x14;
      Fp x55569 = x55567 + x55568;
      Fp x55570 = x55467 * x30;
      Fp x55571 = x55569 + x55570;
      Fp x55572 = x55480 * x15;
      Fp x55573 = x55571 + x55572;
      Fp x55574 = x55493 * x31;
      Fp x55575 = x55573 + x55574;
      Fp x55576 = x55506 * x16;
      Fp x55577 = x55575 + x55576;
      Fp x55578 = x55519 * x32;
      Fp x55579 = x55577 + x55578;
      Fp x55580 = x55102 + x55549;
      Fp x55581 = x55103 + x55579;
      Fp x55582 = x54381 * x1;
      Fp x55583 = x54378 + x55582;
      Fp x55584 = x54384 * x3;
      Fp x55585 = x55583 + x55584;
      Fp x55586 = x54387 * x6;
      Fp x55587 = x55585 + x55586;
      Fp x55588 = x54390 * x11;
      Fp x55589 = x55587 + x55588;
      Fp x55590 = x54393 * x27;
      Fp x55591 = x55589 + x55590;
      Fp x55592 = x54396 * x12;
      Fp x55593 = x55591 + x55592;
      Fp x55594 = x54399 * x28;
      Fp x55595 = x55593 + x55594;
      Fp x55596 = x54402 * x13;
      Fp x55597 = x55595 + x55596;
      Fp x55598 = x54405 * x29;
      Fp x55599 = x55597 + x55598;
      Fp x55600 = x54408 * x14;
      Fp x55601 = x55599 + x55600;
      Fp x55602 = x54411 * x30;
      Fp x55603 = x55601 + x55602;
      Fp x55604 = x54414 * x15;
      Fp x55605 = x55603 + x55604;
      Fp x55606 = x54417 * x31;
      Fp x55607 = x55605 + x55606;
      Fp x55608 = x54420 * x16;
      Fp x55609 = x55607 + x55608;
      Fp x55610 = x54423 * x32;
      Fp x55611 = x55609 + x55610;
      Fp x55612 = x54429 * x1;
      Fp x55613 = x54426 + x55612;
      Fp x55614 = x54432 * x3;
      Fp x55615 = x55613 + x55614;
      Fp x55616 = x54435 * x6;
      Fp x55617 = x55615 + x55616;
      Fp x55618 = x54438 * x11;
      Fp x55619 = x55617 + x55618;
      Fp x55620 = x54441 * x27;
      Fp x55621 = x55619 + x55620;
      Fp x55622 = x54444 * x12;
      Fp x55623 = x55621 + x55622;
      Fp x55624 = x54447 * x28;
      Fp x55625 = x55623 + x55624;
      Fp x55626 = x54450 * x13;
      Fp x55627 = x55625 + x55626;
      Fp x55628 = x54453 * x29;
      Fp x55629 = x55627 + x55628;
      Fp x55630 = x54456 * x14;
      Fp x55631 = x55629 + x55630;
      Fp x55632 = x54459 * x30;
      Fp x55633 = x55631 + x55632;
      Fp x55634 = x54462 * x15;
      Fp x55635 = x55633 + x55634;
      Fp x55636 = x54465 * x31;
      Fp x55637 = x55635 + x55636;
      Fp x55638 = x54468 * x16;
      Fp x55639 = x55637 + x55638;
      Fp x55640 = x54471 * x32;
      Fp x55641 = x55639 + x55640;
      Fp x55642 = x55580 + x55611;
      Fp x55643 = x55581 + x55641;
      args[2][116 * steps + cycle] = x55642;
      args[2][117 * steps + cycle] = x55643;
      Fp x55644 = x54087 * x1;
      Fp x55645 = x54086 + x55644;
      Fp x55646 = x54088 * x3;
      Fp x55647 = x55645 + x55646;
      Fp x55648 = x54089 * x6;
      Fp x55649 = x55647 + x55648;
      Fp x55650 = x54090 * x11;
      Fp x55651 = x55649 + x55650;
      Fp x55652 = x54091 * x27;
      Fp x55653 = x55651 + x55652;
      Fp x55654 = x54092 * x12;
      Fp x55655 = x55653 + x55654;
      Fp x55656 = x54093 * x28;
      Fp x55657 = x55655 + x55656;
      Fp x55658 = x54094 * x13;
      Fp x55659 = x55657 + x55658;
      Fp x55660 = x54095 * x29;
      Fp x55661 = x55659 + x55660;
      Fp x55662 = x54096 * x14;
      Fp x55663 = x55661 + x55662;
      Fp x55664 = x54097 * x30;
      Fp x55665 = x55663 + x55664;
      Fp x55666 = x54098 * x15;
      Fp x55667 = x55665 + x55666;
      Fp x55668 = x54099 * x31;
      Fp x55669 = x55667 + x55668;
      Fp x55670 = x54100 * x16;
      Fp x55671 = x55669 + x55670;
      Fp x55672 = x54101 * x32;
      Fp x55673 = x55671 + x55672;
      Fp x55674 = x54103 * x1;
      Fp x55675 = x54102 + x55674;
      Fp x55676 = x54104 * x3;
      Fp x55677 = x55675 + x55676;
      Fp x55678 = x54105 * x6;
      Fp x55679 = x55677 + x55678;
      Fp x55680 = x54106 * x11;
      Fp x55681 = x55679 + x55680;
      Fp x55682 = x54107 * x27;
      Fp x55683 = x55681 + x55682;
      Fp x55684 = x54108 * x12;
      Fp x55685 = x55683 + x55684;
      Fp x55686 = x54109 * x28;
      Fp x55687 = x55685 + x55686;
      Fp x55688 = x54110 * x13;
      Fp x55689 = x55687 + x55688;
      Fp x55690 = x54111 * x29;
      Fp x55691 = x55689 + x55690;
      Fp x55692 = x54112 * x14;
      Fp x55693 = x55691 + x55692;
      Fp x55694 = x54113 * x30;
      Fp x55695 = x55693 + x55694;
      Fp x55696 = x54114 * x15;
      Fp x55697 = x55695 + x55696;
      Fp x55698 = x54115 * x31;
      Fp x55699 = x55697 + x55698;
      Fp x55700 = x54116 * x16;
      Fp x55701 = x55699 + x55700;
      Fp x55702 = x54117 * x32;
      Fp x55703 = x55701 + x55702;
      Fp x55704 = x55102 + x55673;
      Fp x55705 = x55103 + x55703;
      args[2][118 * steps + cycle] = x55704;
      args[2][119 * steps + cycle] = x55705;
      Fp x55706 = args[2][116 * steps + ((cycle - 0) & mask)];
      Fp x55707 = args[2][117 * steps + ((cycle - 0) & mask)];
      {
        Fp x55708 = Fp(x55706.asUInt32() & x71.asUInt32());
        args[2][0 * steps + cycle] = x55708;
        Fp x55709 = x55706 - x55708;
        Fp x55710 = x55709 * x26;
        Fp x55711 = Fp(x55710.asUInt32() & x71.asUInt32());
        args[2][1 * steps + cycle] = x55711;
        Fp x55712 = x55710 - x55711;
        Fp x55713 = x55712 * x26;
        Fp x55714 = Fp(x55713.asUInt32() & x71.asUInt32());
        args[2][2 * steps + cycle] = x55714;
        Fp x55715 = x55713 - x55714;
        Fp x55716 = x55715 * x26;
        Fp x55717 = Fp(x55716.asUInt32() & x71.asUInt32());
        args[2][3 * steps + cycle] = x55717;
        Fp x55718 = x55716 - x55717;
        Fp x55719 = x55718 * x26;
        Fp x55720 = Fp(x55719.asUInt32() & x71.asUInt32());
        args[2][4 * steps + cycle] = x55720;
        Fp x55721 = x55719 - x55720;
        Fp x55722 = x55721 * x26;
        Fp x55723 = Fp(x55722.asUInt32() & x71.asUInt32());
        args[2][5 * steps + cycle] = x55723;
        Fp x55724 = x55722 - x55723;
        Fp x55725 = x55724 * x26;
        Fp x55726 = Fp(x55725.asUInt32() & x71.asUInt32());
        args[2][6 * steps + cycle] = x55726;
        Fp x55727 = x55725 - x55726;
        Fp x55728 = x55727 * x26;
        Fp x55729 = Fp(x55728.asUInt32() & x71.asUInt32());
        args[2][7 * steps + cycle] = x55729;
        Fp x55730 = x55728 - x55729;
        Fp x55731 = x55730 * x26;
        Fp x55732 = Fp(x55731.asUInt32() & x71.asUInt32());
        args[2][8 * steps + cycle] = x55732;
        Fp x55733 = x55731 - x55732;
        Fp x55734 = x55733 * x26;
        Fp x55735 = Fp(x55734.asUInt32() & x71.asUInt32());
        args[2][9 * steps + cycle] = x55735;
        Fp x55736 = x55734 - x55735;
        Fp x55737 = x55736 * x26;
        Fp x55738 = Fp(x55737.asUInt32() & x71.asUInt32());
        args[2][10 * steps + cycle] = x55738;
        Fp x55739 = x55737 - x55738;
        Fp x55740 = x55739 * x26;
        Fp x55741 = Fp(x55740.asUInt32() & x71.asUInt32());
        args[2][11 * steps + cycle] = x55741;
        Fp x55742 = x55740 - x55741;
        Fp x55743 = x55742 * x26;
        Fp x55744 = Fp(x55743.asUInt32() & x71.asUInt32());
        args[2][12 * steps + cycle] = x55744;
        Fp x55745 = x55743 - x55744;
        Fp x55746 = x55745 * x26;
        Fp x55747 = Fp(x55746.asUInt32() & x71.asUInt32());
        args[2][13 * steps + cycle] = x55747;
        Fp x55748 = x55746 - x55747;
        Fp x55749 = x55748 * x26;
        Fp x55750 = Fp(x55749.asUInt32() & x71.asUInt32());
        args[2][14 * steps + cycle] = x55750;
        Fp x55751 = x55749 - x55750;
        Fp x55752 = x55751 * x26;
        Fp x55753 = Fp(x55752.asUInt32() & x71.asUInt32());
        args[2][15 * steps + cycle] = x55753;
      }
      Fp x55754 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x55755 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x55756 = x55755 * x1;
      Fp x55757 = x55754 + x55756;
      Fp x55758 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x55759 = x55758 * x3;
      Fp x55760 = x55757 + x55759;
      Fp x55761 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x55762 = x55761 * x6;
      Fp x55763 = x55760 + x55762;
      Fp x55764 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x55765 = x55764 * x11;
      Fp x55766 = x55763 + x55765;
      Fp x55767 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x55768 = x55767 * x27;
      Fp x55769 = x55766 + x55768;
      Fp x55770 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x55771 = x55770 * x12;
      Fp x55772 = x55769 + x55771;
      Fp x55773 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x55774 = x55773 * x28;
      Fp x55775 = x55772 + x55774;
      Fp x55776 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x55777 = x55776 * x13;
      Fp x55778 = x55775 + x55777;
      Fp x55779 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x55780 = x55779 * x29;
      Fp x55781 = x55778 + x55780;
      Fp x55782 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x55783 = x55782 * x14;
      Fp x55784 = x55781 + x55783;
      Fp x55785 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x55786 = x55785 * x30;
      Fp x55787 = x55784 + x55786;
      Fp x55788 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x55789 = x55788 * x15;
      Fp x55790 = x55787 + x55789;
      Fp x55791 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x55792 = x55791 * x31;
      Fp x55793 = x55790 + x55792;
      Fp x55794 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x55795 = x55794 * x16;
      Fp x55796 = x55793 + x55795;
      Fp x55797 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x55798 = x55797 * x32;
      Fp x55799 = x55796 + x55798;
      Fp x55800 = x55706 - x55799;
      Fp x55801 = x55800 * x33;
      {
        Fp x55802 = Fp(x55801.asUInt32() & x71.asUInt32());
        args[2][100 * steps + cycle] = x55802;
        Fp x55803 = x55801 - x55802;
        Fp x55804 = x55803 * x26;
        Fp x55805 = Fp(x55804.asUInt32() & x71.asUInt32());
        args[2][101 * steps + cycle] = x55805;
        Fp x55806 = x55804 - x55805;
        Fp x55807 = x55806 * x26;
        Fp x55808 = Fp(x55807.asUInt32() & x71.asUInt32());
        args[2][102 * steps + cycle] = x55808;
      }
      Fp x55809 = args[2][100 * steps + ((cycle - 0) & mask)];
      Fp x55810 = args[2][101 * steps + ((cycle - 0) & mask)];
      Fp x55811 = x55810 * x1;
      Fp x55812 = x55809 + x55811;
      Fp x55813 = args[2][102 * steps + ((cycle - 0) & mask)];
      Fp x55814 = x55813 * x3;
      Fp x55815 = x55812 + x55814;
      Fp x55816 = x55801 - x55815;
      Fp x55817 = x55816 * x69;
      if (x55817 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:140");
      Fp x55818 = x55707 + x55815;
      {
        Fp x55819 = Fp(x55818.asUInt32() & x71.asUInt32());
        args[2][16 * steps + cycle] = x55819;
        Fp x55820 = x55818 - x55819;
        Fp x55821 = x55820 * x26;
        Fp x55822 = Fp(x55821.asUInt32() & x71.asUInt32());
        args[2][17 * steps + cycle] = x55822;
        Fp x55823 = x55821 - x55822;
        Fp x55824 = x55823 * x26;
        Fp x55825 = Fp(x55824.asUInt32() & x71.asUInt32());
        args[2][18 * steps + cycle] = x55825;
        Fp x55826 = x55824 - x55825;
        Fp x55827 = x55826 * x26;
        Fp x55828 = Fp(x55827.asUInt32() & x71.asUInt32());
        args[2][19 * steps + cycle] = x55828;
        Fp x55829 = x55827 - x55828;
        Fp x55830 = x55829 * x26;
        Fp x55831 = Fp(x55830.asUInt32() & x71.asUInt32());
        args[2][20 * steps + cycle] = x55831;
        Fp x55832 = x55830 - x55831;
        Fp x55833 = x55832 * x26;
        Fp x55834 = Fp(x55833.asUInt32() & x71.asUInt32());
        args[2][21 * steps + cycle] = x55834;
        Fp x55835 = x55833 - x55834;
        Fp x55836 = x55835 * x26;
        Fp x55837 = Fp(x55836.asUInt32() & x71.asUInt32());
        args[2][22 * steps + cycle] = x55837;
        Fp x55838 = x55836 - x55837;
        Fp x55839 = x55838 * x26;
        Fp x55840 = Fp(x55839.asUInt32() & x71.asUInt32());
        args[2][23 * steps + cycle] = x55840;
        Fp x55841 = x55839 - x55840;
        Fp x55842 = x55841 * x26;
        Fp x55843 = Fp(x55842.asUInt32() & x71.asUInt32());
        args[2][24 * steps + cycle] = x55843;
        Fp x55844 = x55842 - x55843;
        Fp x55845 = x55844 * x26;
        Fp x55846 = Fp(x55845.asUInt32() & x71.asUInt32());
        args[2][25 * steps + cycle] = x55846;
        Fp x55847 = x55845 - x55846;
        Fp x55848 = x55847 * x26;
        Fp x55849 = Fp(x55848.asUInt32() & x71.asUInt32());
        args[2][26 * steps + cycle] = x55849;
        Fp x55850 = x55848 - x55849;
        Fp x55851 = x55850 * x26;
        Fp x55852 = Fp(x55851.asUInt32() & x71.asUInt32());
        args[2][27 * steps + cycle] = x55852;
        Fp x55853 = x55851 - x55852;
        Fp x55854 = x55853 * x26;
        Fp x55855 = Fp(x55854.asUInt32() & x71.asUInt32());
        args[2][28 * steps + cycle] = x55855;
        Fp x55856 = x55854 - x55855;
        Fp x55857 = x55856 * x26;
        Fp x55858 = Fp(x55857.asUInt32() & x71.asUInt32());
        args[2][29 * steps + cycle] = x55858;
        Fp x55859 = x55857 - x55858;
        Fp x55860 = x55859 * x26;
        Fp x55861 = Fp(x55860.asUInt32() & x71.asUInt32());
        args[2][30 * steps + cycle] = x55861;
        Fp x55862 = x55860 - x55861;
        Fp x55863 = x55862 * x26;
        Fp x55864 = Fp(x55863.asUInt32() & x71.asUInt32());
        args[2][31 * steps + cycle] = x55864;
      }
      Fp x55865 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x55866 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x55867 = x55866 * x1;
      Fp x55868 = x55865 + x55867;
      Fp x55869 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x55870 = x55869 * x3;
      Fp x55871 = x55868 + x55870;
      Fp x55872 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x55873 = x55872 * x6;
      Fp x55874 = x55871 + x55873;
      Fp x55875 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x55876 = x55875 * x11;
      Fp x55877 = x55874 + x55876;
      Fp x55878 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x55879 = x55878 * x27;
      Fp x55880 = x55877 + x55879;
      Fp x55881 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x55882 = x55881 * x12;
      Fp x55883 = x55880 + x55882;
      Fp x55884 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x55885 = x55884 * x28;
      Fp x55886 = x55883 + x55885;
      Fp x55887 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x55888 = x55887 * x13;
      Fp x55889 = x55886 + x55888;
      Fp x55890 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x55891 = x55890 * x29;
      Fp x55892 = x55889 + x55891;
      Fp x55893 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x55894 = x55893 * x14;
      Fp x55895 = x55892 + x55894;
      Fp x55896 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x55897 = x55896 * x30;
      Fp x55898 = x55895 + x55897;
      Fp x55899 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x55900 = x55899 * x15;
      Fp x55901 = x55898 + x55900;
      Fp x55902 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x55903 = x55902 * x31;
      Fp x55904 = x55901 + x55903;
      Fp x55905 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x55906 = x55905 * x16;
      Fp x55907 = x55904 + x55906;
      Fp x55908 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x55909 = x55908 * x32;
      Fp x55910 = x55907 + x55909;
      Fp x55911 = x55818 - x55910;
      Fp x55912 = x55911 * x33;
      {
        Fp x55913 = Fp(x55912.asUInt32() & x71.asUInt32());
        args[2][103 * steps + cycle] = x55913;
        Fp x55914 = x55912 - x55913;
        Fp x55915 = x55914 * x26;
        Fp x55916 = Fp(x55915.asUInt32() & x71.asUInt32());
        args[2][104 * steps + cycle] = x55916;
        Fp x55917 = x55915 - x55916;
        Fp x55918 = x55917 * x26;
        Fp x55919 = Fp(x55918.asUInt32() & x71.asUInt32());
        args[2][105 * steps + cycle] = x55919;
      }
      Fp x55920 = args[2][103 * steps + ((cycle - 0) & mask)];
      Fp x55921 = args[2][104 * steps + ((cycle - 0) & mask)];
      Fp x55922 = x55921 * x1;
      Fp x55923 = x55920 + x55922;
      Fp x55924 = args[2][105 * steps + ((cycle - 0) & mask)];
      Fp x55925 = x55924 * x3;
      Fp x55926 = x55923 + x55925;
      Fp x55927 = x55912 - x55926;
      Fp x55928 = x55927 * x69;
      if (x55928 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:141");
      Fp x55929 = args[2][118 * steps + ((cycle - 0) & mask)];
      Fp x55930 = args[2][119 * steps + ((cycle - 0) & mask)];
      {
        Fp x55931 = Fp(x55929.asUInt32() & x71.asUInt32());
        args[2][32 * steps + cycle] = x55931;
        Fp x55932 = x55929 - x55931;
        Fp x55933 = x55932 * x26;
        Fp x55934 = Fp(x55933.asUInt32() & x71.asUInt32());
        args[2][33 * steps + cycle] = x55934;
        Fp x55935 = x55933 - x55934;
        Fp x55936 = x55935 * x26;
        Fp x55937 = Fp(x55936.asUInt32() & x71.asUInt32());
        args[2][34 * steps + cycle] = x55937;
        Fp x55938 = x55936 - x55937;
        Fp x55939 = x55938 * x26;
        Fp x55940 = Fp(x55939.asUInt32() & x71.asUInt32());
        args[2][35 * steps + cycle] = x55940;
        Fp x55941 = x55939 - x55940;
        Fp x55942 = x55941 * x26;
        Fp x55943 = Fp(x55942.asUInt32() & x71.asUInt32());
        args[2][36 * steps + cycle] = x55943;
        Fp x55944 = x55942 - x55943;
        Fp x55945 = x55944 * x26;
        Fp x55946 = Fp(x55945.asUInt32() & x71.asUInt32());
        args[2][37 * steps + cycle] = x55946;
        Fp x55947 = x55945 - x55946;
        Fp x55948 = x55947 * x26;
        Fp x55949 = Fp(x55948.asUInt32() & x71.asUInt32());
        args[2][38 * steps + cycle] = x55949;
        Fp x55950 = x55948 - x55949;
        Fp x55951 = x55950 * x26;
        Fp x55952 = Fp(x55951.asUInt32() & x71.asUInt32());
        args[2][39 * steps + cycle] = x55952;
        Fp x55953 = x55951 - x55952;
        Fp x55954 = x55953 * x26;
        Fp x55955 = Fp(x55954.asUInt32() & x71.asUInt32());
        args[2][40 * steps + cycle] = x55955;
        Fp x55956 = x55954 - x55955;
        Fp x55957 = x55956 * x26;
        Fp x55958 = Fp(x55957.asUInt32() & x71.asUInt32());
        args[2][41 * steps + cycle] = x55958;
        Fp x55959 = x55957 - x55958;
        Fp x55960 = x55959 * x26;
        Fp x55961 = Fp(x55960.asUInt32() & x71.asUInt32());
        args[2][42 * steps + cycle] = x55961;
        Fp x55962 = x55960 - x55961;
        Fp x55963 = x55962 * x26;
        Fp x55964 = Fp(x55963.asUInt32() & x71.asUInt32());
        args[2][43 * steps + cycle] = x55964;
        Fp x55965 = x55963 - x55964;
        Fp x55966 = x55965 * x26;
        Fp x55967 = Fp(x55966.asUInt32() & x71.asUInt32());
        args[2][44 * steps + cycle] = x55967;
        Fp x55968 = x55966 - x55967;
        Fp x55969 = x55968 * x26;
        Fp x55970 = Fp(x55969.asUInt32() & x71.asUInt32());
        args[2][45 * steps + cycle] = x55970;
        Fp x55971 = x55969 - x55970;
        Fp x55972 = x55971 * x26;
        Fp x55973 = Fp(x55972.asUInt32() & x71.asUInt32());
        args[2][46 * steps + cycle] = x55973;
        Fp x55974 = x55972 - x55973;
        Fp x55975 = x55974 * x26;
        Fp x55976 = Fp(x55975.asUInt32() & x71.asUInt32());
        args[2][47 * steps + cycle] = x55976;
      }
      Fp x55977 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x55978 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x55979 = x55978 * x1;
      Fp x55980 = x55977 + x55979;
      Fp x55981 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x55982 = x55981 * x3;
      Fp x55983 = x55980 + x55982;
      Fp x55984 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x55985 = x55984 * x6;
      Fp x55986 = x55983 + x55985;
      Fp x55987 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x55988 = x55987 * x11;
      Fp x55989 = x55986 + x55988;
      Fp x55990 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x55991 = x55990 * x27;
      Fp x55992 = x55989 + x55991;
      Fp x55993 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x55994 = x55993 * x12;
      Fp x55995 = x55992 + x55994;
      Fp x55996 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x55997 = x55996 * x28;
      Fp x55998 = x55995 + x55997;
      Fp x55999 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x56000 = x55999 * x13;
      Fp x56001 = x55998 + x56000;
      Fp x56002 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x56003 = x56002 * x29;
      Fp x56004 = x56001 + x56003;
      Fp x56005 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x56006 = x56005 * x14;
      Fp x56007 = x56004 + x56006;
      Fp x56008 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x56009 = x56008 * x30;
      Fp x56010 = x56007 + x56009;
      Fp x56011 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x56012 = x56011 * x15;
      Fp x56013 = x56010 + x56012;
      Fp x56014 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x56015 = x56014 * x31;
      Fp x56016 = x56013 + x56015;
      Fp x56017 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x56018 = x56017 * x16;
      Fp x56019 = x56016 + x56018;
      Fp x56020 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x56021 = x56020 * x32;
      Fp x56022 = x56019 + x56021;
      Fp x56023 = x55929 - x56022;
      Fp x56024 = x56023 * x33;
      {
        Fp x56025 = Fp(x56024.asUInt32() & x71.asUInt32());
        args[2][106 * steps + cycle] = x56025;
        Fp x56026 = x56024 - x56025;
        Fp x56027 = x56026 * x26;
        Fp x56028 = Fp(x56027.asUInt32() & x71.asUInt32());
        args[2][107 * steps + cycle] = x56028;
        Fp x56029 = x56027 - x56028;
        Fp x56030 = x56029 * x26;
        Fp x56031 = Fp(x56030.asUInt32() & x71.asUInt32());
        args[2][108 * steps + cycle] = x56031;
      }
      Fp x56032 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x56033 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x56034 = x56033 * x1;
      Fp x56035 = x56032 + x56034;
      Fp x56036 = args[2][108 * steps + ((cycle - 0) & mask)];
      Fp x56037 = x56036 * x3;
      Fp x56038 = x56035 + x56037;
      Fp x56039 = x56024 - x56038;
      Fp x56040 = x56039 * x69;
      if (x56040 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:140");
      Fp x56041 = x55930 + x56038;
      {
        Fp x56042 = Fp(x56041.asUInt32() & x71.asUInt32());
        args[2][48 * steps + cycle] = x56042;
        Fp x56043 = x56041 - x56042;
        Fp x56044 = x56043 * x26;
        Fp x56045 = Fp(x56044.asUInt32() & x71.asUInt32());
        args[2][49 * steps + cycle] = x56045;
        Fp x56046 = x56044 - x56045;
        Fp x56047 = x56046 * x26;
        Fp x56048 = Fp(x56047.asUInt32() & x71.asUInt32());
        args[2][50 * steps + cycle] = x56048;
        Fp x56049 = x56047 - x56048;
        Fp x56050 = x56049 * x26;
        Fp x56051 = Fp(x56050.asUInt32() & x71.asUInt32());
        args[2][51 * steps + cycle] = x56051;
        Fp x56052 = x56050 - x56051;
        Fp x56053 = x56052 * x26;
        Fp x56054 = Fp(x56053.asUInt32() & x71.asUInt32());
        args[2][52 * steps + cycle] = x56054;
        Fp x56055 = x56053 - x56054;
        Fp x56056 = x56055 * x26;
        Fp x56057 = Fp(x56056.asUInt32() & x71.asUInt32());
        args[2][53 * steps + cycle] = x56057;
        Fp x56058 = x56056 - x56057;
        Fp x56059 = x56058 * x26;
        Fp x56060 = Fp(x56059.asUInt32() & x71.asUInt32());
        args[2][54 * steps + cycle] = x56060;
        Fp x56061 = x56059 - x56060;
        Fp x56062 = x56061 * x26;
        Fp x56063 = Fp(x56062.asUInt32() & x71.asUInt32());
        args[2][55 * steps + cycle] = x56063;
        Fp x56064 = x56062 - x56063;
        Fp x56065 = x56064 * x26;
        Fp x56066 = Fp(x56065.asUInt32() & x71.asUInt32());
        args[2][56 * steps + cycle] = x56066;
        Fp x56067 = x56065 - x56066;
        Fp x56068 = x56067 * x26;
        Fp x56069 = Fp(x56068.asUInt32() & x71.asUInt32());
        args[2][57 * steps + cycle] = x56069;
        Fp x56070 = x56068 - x56069;
        Fp x56071 = x56070 * x26;
        Fp x56072 = Fp(x56071.asUInt32() & x71.asUInt32());
        args[2][58 * steps + cycle] = x56072;
        Fp x56073 = x56071 - x56072;
        Fp x56074 = x56073 * x26;
        Fp x56075 = Fp(x56074.asUInt32() & x71.asUInt32());
        args[2][59 * steps + cycle] = x56075;
        Fp x56076 = x56074 - x56075;
        Fp x56077 = x56076 * x26;
        Fp x56078 = Fp(x56077.asUInt32() & x71.asUInt32());
        args[2][60 * steps + cycle] = x56078;
        Fp x56079 = x56077 - x56078;
        Fp x56080 = x56079 * x26;
        Fp x56081 = Fp(x56080.asUInt32() & x71.asUInt32());
        args[2][61 * steps + cycle] = x56081;
        Fp x56082 = x56080 - x56081;
        Fp x56083 = x56082 * x26;
        Fp x56084 = Fp(x56083.asUInt32() & x71.asUInt32());
        args[2][62 * steps + cycle] = x56084;
        Fp x56085 = x56083 - x56084;
        Fp x56086 = x56085 * x26;
        Fp x56087 = Fp(x56086.asUInt32() & x71.asUInt32());
        args[2][63 * steps + cycle] = x56087;
      }
      Fp x56088 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x56089 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x56090 = x56089 * x1;
      Fp x56091 = x56088 + x56090;
      Fp x56092 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x56093 = x56092 * x3;
      Fp x56094 = x56091 + x56093;
      Fp x56095 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x56096 = x56095 * x6;
      Fp x56097 = x56094 + x56096;
      Fp x56098 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x56099 = x56098 * x11;
      Fp x56100 = x56097 + x56099;
      Fp x56101 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x56102 = x56101 * x27;
      Fp x56103 = x56100 + x56102;
      Fp x56104 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x56105 = x56104 * x12;
      Fp x56106 = x56103 + x56105;
      Fp x56107 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x56108 = x56107 * x28;
      Fp x56109 = x56106 + x56108;
      Fp x56110 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x56111 = x56110 * x13;
      Fp x56112 = x56109 + x56111;
      Fp x56113 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x56114 = x56113 * x29;
      Fp x56115 = x56112 + x56114;
      Fp x56116 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x56117 = x56116 * x14;
      Fp x56118 = x56115 + x56117;
      Fp x56119 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x56120 = x56119 * x30;
      Fp x56121 = x56118 + x56120;
      Fp x56122 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x56123 = x56122 * x15;
      Fp x56124 = x56121 + x56123;
      Fp x56125 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x56126 = x56125 * x31;
      Fp x56127 = x56124 + x56126;
      Fp x56128 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x56129 = x56128 * x16;
      Fp x56130 = x56127 + x56129;
      Fp x56131 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x56132 = x56131 * x32;
      Fp x56133 = x56130 + x56132;
      Fp x56134 = x56041 - x56133;
      Fp x56135 = x56134 * x33;
      {
        Fp x56136 = Fp(x56135.asUInt32() & x71.asUInt32());
        args[2][109 * steps + cycle] = x56136;
        Fp x56137 = x56135 - x56136;
        Fp x56138 = x56137 * x26;
        Fp x56139 = Fp(x56138.asUInt32() & x71.asUInt32());
        args[2][110 * steps + cycle] = x56139;
        Fp x56140 = x56138 - x56139;
        Fp x56141 = x56140 * x26;
        Fp x56142 = Fp(x56141.asUInt32() & x71.asUInt32());
        args[2][111 * steps + cycle] = x56142;
      }
      Fp x56143 = args[2][109 * steps + ((cycle - 0) & mask)];
      Fp x56144 = args[2][110 * steps + ((cycle - 0) & mask)];
      Fp x56145 = x56144 * x1;
      Fp x56146 = x56143 + x56145;
      Fp x56147 = args[2][111 * steps + ((cycle - 0) & mask)];
      Fp x56148 = x56147 * x3;
      Fp x56149 = x56146 + x56148;
      Fp x56150 = x56135 - x56149;
      Fp x56151 = x56150 * x69;
      if (x56151 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:141");
      host_args[0] = x55910;
      host_args[1] = x55799;
      host_args[2] = x56133;
      host_args[3] = x56022;
      host_args[4] = x54787;
      host_args[5] = x54741;
      host(ctx, "log", "  a=%04x%04x, e=%04x%04x, w=%04x%04x", host_args.data(), 6, host_outs.data(), 0);
      Fp x56152 = x71 - x702;
      if (x56152 != 0) {
        args[2][127 * steps + cycle] = x8;
      }
      if (x702 != 0) {
        args[2][127 * steps + cycle] = x7;
      }
      Fp x56153 = x55754 - x71;
      Fp x56154 = x55754 * x56153;
      if (x56154 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56155 = x55755 - x71;
      Fp x56156 = x55755 * x56155;
      if (x56156 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56157 = x55758 - x71;
      Fp x56158 = x55758 * x56157;
      if (x56158 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56159 = x55761 - x71;
      Fp x56160 = x55761 * x56159;
      if (x56160 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56161 = x55764 - x71;
      Fp x56162 = x55764 * x56161;
      if (x56162 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56163 = x55767 - x71;
      Fp x56164 = x55767 * x56163;
      if (x56164 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56165 = x55770 - x71;
      Fp x56166 = x55770 * x56165;
      if (x56166 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56167 = x55773 - x71;
      Fp x56168 = x55773 * x56167;
      if (x56168 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56169 = x55776 - x71;
      Fp x56170 = x55776 * x56169;
      if (x56170 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56171 = x55779 - x71;
      Fp x56172 = x55779 * x56171;
      if (x56172 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56173 = x55782 - x71;
      Fp x56174 = x55782 * x56173;
      if (x56174 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56175 = x55785 - x71;
      Fp x56176 = x55785 * x56175;
      if (x56176 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56177 = x55788 - x71;
      Fp x56178 = x55788 * x56177;
      if (x56178 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56179 = x55791 - x71;
      Fp x56180 = x55791 * x56179;
      if (x56180 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56181 = x55794 - x71;
      Fp x56182 = x55794 * x56181;
      if (x56182 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56183 = x55797 - x71;
      Fp x56184 = x55797 * x56183;
      if (x56184 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56185 = x55865 - x71;
      Fp x56186 = x55865 * x56185;
      if (x56186 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56187 = x55866 - x71;
      Fp x56188 = x55866 * x56187;
      if (x56188 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56189 = x55869 - x71;
      Fp x56190 = x55869 * x56189;
      if (x56190 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56191 = x55872 - x71;
      Fp x56192 = x55872 * x56191;
      if (x56192 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56193 = x55875 - x71;
      Fp x56194 = x55875 * x56193;
      if (x56194 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56195 = x55878 - x71;
      Fp x56196 = x55878 * x56195;
      if (x56196 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56197 = x55881 - x71;
      Fp x56198 = x55881 * x56197;
      if (x56198 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56199 = x55884 - x71;
      Fp x56200 = x55884 * x56199;
      if (x56200 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56201 = x55887 - x71;
      Fp x56202 = x55887 * x56201;
      if (x56202 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56203 = x55890 - x71;
      Fp x56204 = x55890 * x56203;
      if (x56204 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56205 = x55893 - x71;
      Fp x56206 = x55893 * x56205;
      if (x56206 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56207 = x55896 - x71;
      Fp x56208 = x55896 * x56207;
      if (x56208 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56209 = x55899 - x71;
      Fp x56210 = x55899 * x56209;
      if (x56210 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56211 = x55902 - x71;
      Fp x56212 = x55902 * x56211;
      if (x56212 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56213 = x55905 - x71;
      Fp x56214 = x55905 * x56213;
      if (x56214 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56215 = x55908 - x71;
      Fp x56216 = x55908 * x56215;
      if (x56216 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56217 = x55977 - x71;
      Fp x56218 = x55977 * x56217;
      if (x56218 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56219 = x55978 - x71;
      Fp x56220 = x55978 * x56219;
      if (x56220 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56221 = x55981 - x71;
      Fp x56222 = x55981 * x56221;
      if (x56222 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56223 = x55984 - x71;
      Fp x56224 = x55984 * x56223;
      if (x56224 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56225 = x55987 - x71;
      Fp x56226 = x55987 * x56225;
      if (x56226 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56227 = x55990 - x71;
      Fp x56228 = x55990 * x56227;
      if (x56228 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56229 = x55993 - x71;
      Fp x56230 = x55993 * x56229;
      if (x56230 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56231 = x55996 - x71;
      Fp x56232 = x55996 * x56231;
      if (x56232 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56233 = x55999 - x71;
      Fp x56234 = x55999 * x56233;
      if (x56234 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56235 = x56002 - x71;
      Fp x56236 = x56002 * x56235;
      if (x56236 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56237 = x56005 - x71;
      Fp x56238 = x56005 * x56237;
      if (x56238 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56239 = x56008 - x71;
      Fp x56240 = x56008 * x56239;
      if (x56240 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56241 = x56011 - x71;
      Fp x56242 = x56011 * x56241;
      if (x56242 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56243 = x56014 - x71;
      Fp x56244 = x56014 * x56243;
      if (x56244 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56245 = x56017 - x71;
      Fp x56246 = x56017 * x56245;
      if (x56246 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56247 = x56020 - x71;
      Fp x56248 = x56020 * x56247;
      if (x56248 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56249 = x56088 - x71;
      Fp x56250 = x56088 * x56249;
      if (x56250 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56251 = x56089 - x71;
      Fp x56252 = x56089 * x56251;
      if (x56252 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56253 = x56092 - x71;
      Fp x56254 = x56092 * x56253;
      if (x56254 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56255 = x56095 - x71;
      Fp x56256 = x56095 * x56255;
      if (x56256 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56257 = x56098 - x71;
      Fp x56258 = x56098 * x56257;
      if (x56258 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56259 = x56101 - x71;
      Fp x56260 = x56101 * x56259;
      if (x56260 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56261 = x56104 - x71;
      Fp x56262 = x56104 * x56261;
      if (x56262 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56263 = x56107 - x71;
      Fp x56264 = x56107 * x56263;
      if (x56264 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56265 = x56110 - x71;
      Fp x56266 = x56110 * x56265;
      if (x56266 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56267 = x56113 - x71;
      Fp x56268 = x56113 * x56267;
      if (x56268 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56269 = x56116 - x71;
      Fp x56270 = x56116 * x56269;
      if (x56270 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56271 = x56119 - x71;
      Fp x56272 = x56119 * x56271;
      if (x56272 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56273 = x56122 - x71;
      Fp x56274 = x56122 * x56273;
      if (x56274 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56275 = x56125 - x71;
      Fp x56276 = x56125 * x56275;
      if (x56276 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56277 = x56128 - x71;
      Fp x56278 = x56128 * x56277;
      if (x56278 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56279 = x56131 - x71;
      Fp x56280 = x56131 * x56279;
      if (x56280 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56281 = x54696 - x71;
      Fp x56282 = x54696 * x56281;
      if (x56282 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56283 = x54697 - x71;
      Fp x56284 = x54697 * x56283;
      if (x56284 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56285 = x54700 - x71;
      Fp x56286 = x54700 * x56285;
      if (x56286 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56287 = x54703 - x71;
      Fp x56288 = x54703 * x56287;
      if (x56288 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56289 = x54706 - x71;
      Fp x56290 = x54706 * x56289;
      if (x56290 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56291 = x54709 - x71;
      Fp x56292 = x54709 * x56291;
      if (x56292 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56293 = x54712 - x71;
      Fp x56294 = x54712 * x56293;
      if (x56294 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56295 = x54715 - x71;
      Fp x56296 = x54715 * x56295;
      if (x56296 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56297 = x54718 - x71;
      Fp x56298 = x54718 * x56297;
      if (x56298 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56299 = x54721 - x71;
      Fp x56300 = x54721 * x56299;
      if (x56300 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56301 = x54724 - x71;
      Fp x56302 = x54724 * x56301;
      if (x56302 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56303 = x54727 - x71;
      Fp x56304 = x54727 * x56303;
      if (x56304 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56305 = x54730 - x71;
      Fp x56306 = x54730 * x56305;
      if (x56306 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56307 = x54733 - x71;
      Fp x56308 = x54733 * x56307;
      if (x56308 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56309 = x54736 - x71;
      Fp x56310 = x54736 * x56309;
      if (x56310 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56311 = x54739 - x71;
      Fp x56312 = x54739 * x56311;
      if (x56312 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56313 = x54742 - x71;
      Fp x56314 = x54742 * x56313;
      if (x56314 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56315 = x54743 - x71;
      Fp x56316 = x54743 * x56315;
      if (x56316 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56317 = x54746 - x71;
      Fp x56318 = x54746 * x56317;
      if (x56318 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56319 = x54749 - x71;
      Fp x56320 = x54749 * x56319;
      if (x56320 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56321 = x54752 - x71;
      Fp x56322 = x54752 * x56321;
      if (x56322 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56323 = x54755 - x71;
      Fp x56324 = x54755 * x56323;
      if (x56324 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56325 = x54758 - x71;
      Fp x56326 = x54758 * x56325;
      if (x56326 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56327 = x54761 - x71;
      Fp x56328 = x54761 * x56327;
      if (x56328 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56329 = x54764 - x71;
      Fp x56330 = x54764 * x56329;
      if (x56330 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56331 = x54767 - x71;
      Fp x56332 = x54767 * x56331;
      if (x56332 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56333 = x54770 - x71;
      Fp x56334 = x54770 * x56333;
      if (x56334 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56335 = x54773 - x71;
      Fp x56336 = x54773 * x56335;
      if (x56336 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56337 = x54776 - x71;
      Fp x56338 = x54776 * x56337;
      if (x56338 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56339 = x54779 - x71;
      Fp x56340 = x54779 * x56339;
      if (x56340 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56341 = x54782 - x71;
      Fp x56342 = x54782 * x56341;
      if (x56342 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56343 = x54785 - x71;
      Fp x56344 = x54785 * x56343;
      if (x56344 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56345 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x56346 = x56345 - x71;
      Fp x56347 = x56345 * x56346;
      if (x56347 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56348 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x56349 = x56348 - x71;
      Fp x56350 = x56348 * x56349;
      if (x56350 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56351 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x56352 = x56351 - x71;
      Fp x56353 = x56351 * x56352;
      if (x56353 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56354 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x56355 = x56354 - x71;
      Fp x56356 = x56354 * x56355;
      if (x56356 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x56357 = x55809 - x71;
      Fp x56358 = x55809 * x56357;
      if (x56358 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:370");
      Fp x56359 = x55810 - x71;
      Fp x56360 = x55810 * x56359;
      if (x56360 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:370");
      Fp x56361 = x55813 - x71;
      Fp x56362 = x55813 * x56361;
      if (x56362 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:370");
      Fp x56363 = x55920 - x71;
      Fp x56364 = x55920 * x56363;
      if (x56364 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:371");
      Fp x56365 = x55921 - x71;
      Fp x56366 = x55921 * x56365;
      if (x56366 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:371");
      Fp x56367 = x55924 - x71;
      Fp x56368 = x55924 * x56367;
      if (x56368 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:371");
      Fp x56369 = x56032 - x71;
      Fp x56370 = x56032 * x56369;
      if (x56370 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:372");
      Fp x56371 = x56033 - x71;
      Fp x56372 = x56033 * x56371;
      if (x56372 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:372");
      Fp x56373 = x56036 - x71;
      Fp x56374 = x56036 * x56373;
      if (x56374 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:372");
      Fp x56375 = x56143 - x71;
      Fp x56376 = x56143 * x56375;
      if (x56376 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:373");
      Fp x56377 = x56144 - x71;
      Fp x56378 = x56144 * x56377;
      if (x56378 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:373");
      Fp x56379 = x56147 - x71;
      Fp x56380 = x56147 * x56379;
      if (x56380 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:373");
      Fp x56381 = args[2][112 * steps + ((cycle - 0) & mask)];
      Fp x56382 = x56381 - x71;
      Fp x56383 = x56381 * x56382;
      if (x56383 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:374");
      Fp x56384 = args[2][113 * steps + ((cycle - 0) & mask)];
      Fp x56385 = x56384 - x71;
      Fp x56386 = x56384 * x56385;
      if (x56386 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:374");
      Fp x56387 = args[2][114 * steps + ((cycle - 0) & mask)];
      Fp x56388 = x56387 - x71;
      Fp x56389 = x56387 * x56388;
      if (x56389 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:375");
      Fp x56390 = args[2][115 * steps + ((cycle - 0) & mask)];
      Fp x56391 = x56390 - x71;
      Fp x56392 = x56390 * x56391;
      if (x56392 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:375");
    }
    Fp x56393 = args[2][143 * steps + ((cycle - 0) & mask)];
    if (x56393 != 0) {
      args[2][128 * steps + cycle] = x70;
      args[2][131 * steps + cycle] = x70;
      {
        host_args[0] = x72;
        host_args[1] = x70;
        host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
        Fp x56394 = host_outs[0];
        Fp x56395 = host_outs[1];
        args[2][129 * steps + cycle] = x56394;
        args[2][130 * steps + cycle] = x56395;
      }
    }
    Fp x56396 = args[2][0 * steps + ((cycle - 0) & mask)];
    Fp x56397 = x56396 - x71;
    Fp x56398 = x56396 * x56397;
    Fp x56399 = x56396 - x1;
    Fp x56400 = x56398 * x56399;
    Fp x56401 = x56396 - x2;
    Fp x56402 = x56400 * x56401;
    if (x56402 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56403 = args[2][1 * steps + ((cycle - 0) & mask)];
    Fp x56404 = x56403 - x71;
    Fp x56405 = x56403 * x56404;
    Fp x56406 = x56403 - x1;
    Fp x56407 = x56405 * x56406;
    Fp x56408 = x56403 - x2;
    Fp x56409 = x56407 * x56408;
    if (x56409 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56410 = args[2][2 * steps + ((cycle - 0) & mask)];
    Fp x56411 = x56410 - x71;
    Fp x56412 = x56410 * x56411;
    Fp x56413 = x56410 - x1;
    Fp x56414 = x56412 * x56413;
    Fp x56415 = x56410 - x2;
    Fp x56416 = x56414 * x56415;
    if (x56416 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56417 = args[2][3 * steps + ((cycle - 0) & mask)];
    Fp x56418 = x56417 - x71;
    Fp x56419 = x56417 * x56418;
    Fp x56420 = x56417 - x1;
    Fp x56421 = x56419 * x56420;
    Fp x56422 = x56417 - x2;
    Fp x56423 = x56421 * x56422;
    if (x56423 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56424 = args[2][4 * steps + ((cycle - 0) & mask)];
    Fp x56425 = x56424 - x71;
    Fp x56426 = x56424 * x56425;
    Fp x56427 = x56424 - x1;
    Fp x56428 = x56426 * x56427;
    Fp x56429 = x56424 - x2;
    Fp x56430 = x56428 * x56429;
    if (x56430 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56431 = args[2][5 * steps + ((cycle - 0) & mask)];
    Fp x56432 = x56431 - x71;
    Fp x56433 = x56431 * x56432;
    Fp x56434 = x56431 - x1;
    Fp x56435 = x56433 * x56434;
    Fp x56436 = x56431 - x2;
    Fp x56437 = x56435 * x56436;
    if (x56437 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56438 = args[2][6 * steps + ((cycle - 0) & mask)];
    Fp x56439 = x56438 - x71;
    Fp x56440 = x56438 * x56439;
    Fp x56441 = x56438 - x1;
    Fp x56442 = x56440 * x56441;
    Fp x56443 = x56438 - x2;
    Fp x56444 = x56442 * x56443;
    if (x56444 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56445 = args[2][7 * steps + ((cycle - 0) & mask)];
    Fp x56446 = x56445 - x71;
    Fp x56447 = x56445 * x56446;
    Fp x56448 = x56445 - x1;
    Fp x56449 = x56447 * x56448;
    Fp x56450 = x56445 - x2;
    Fp x56451 = x56449 * x56450;
    if (x56451 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56452 = args[2][8 * steps + ((cycle - 0) & mask)];
    Fp x56453 = x56452 - x71;
    Fp x56454 = x56452 * x56453;
    Fp x56455 = x56452 - x1;
    Fp x56456 = x56454 * x56455;
    Fp x56457 = x56452 - x2;
    Fp x56458 = x56456 * x56457;
    if (x56458 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56459 = args[2][9 * steps + ((cycle - 0) & mask)];
    Fp x56460 = x56459 - x71;
    Fp x56461 = x56459 * x56460;
    Fp x56462 = x56459 - x1;
    Fp x56463 = x56461 * x56462;
    Fp x56464 = x56459 - x2;
    Fp x56465 = x56463 * x56464;
    if (x56465 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56466 = args[2][10 * steps + ((cycle - 0) & mask)];
    Fp x56467 = x56466 - x71;
    Fp x56468 = x56466 * x56467;
    Fp x56469 = x56466 - x1;
    Fp x56470 = x56468 * x56469;
    Fp x56471 = x56466 - x2;
    Fp x56472 = x56470 * x56471;
    if (x56472 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56473 = args[2][11 * steps + ((cycle - 0) & mask)];
    Fp x56474 = x56473 - x71;
    Fp x56475 = x56473 * x56474;
    Fp x56476 = x56473 - x1;
    Fp x56477 = x56475 * x56476;
    Fp x56478 = x56473 - x2;
    Fp x56479 = x56477 * x56478;
    if (x56479 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56480 = args[2][12 * steps + ((cycle - 0) & mask)];
    Fp x56481 = x56480 - x71;
    Fp x56482 = x56480 * x56481;
    Fp x56483 = x56480 - x1;
    Fp x56484 = x56482 * x56483;
    Fp x56485 = x56480 - x2;
    Fp x56486 = x56484 * x56485;
    if (x56486 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56487 = args[2][13 * steps + ((cycle - 0) & mask)];
    Fp x56488 = x56487 - x71;
    Fp x56489 = x56487 * x56488;
    Fp x56490 = x56487 - x1;
    Fp x56491 = x56489 * x56490;
    Fp x56492 = x56487 - x2;
    Fp x56493 = x56491 * x56492;
    if (x56493 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56494 = args[2][14 * steps + ((cycle - 0) & mask)];
    Fp x56495 = x56494 - x71;
    Fp x56496 = x56494 * x56495;
    Fp x56497 = x56494 - x1;
    Fp x56498 = x56496 * x56497;
    Fp x56499 = x56494 - x2;
    Fp x56500 = x56498 * x56499;
    if (x56500 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56501 = args[2][15 * steps + ((cycle - 0) & mask)];
    Fp x56502 = x56501 - x71;
    Fp x56503 = x56501 * x56502;
    Fp x56504 = x56501 - x1;
    Fp x56505 = x56503 * x56504;
    Fp x56506 = x56501 - x2;
    Fp x56507 = x56505 * x56506;
    if (x56507 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56508 = args[2][16 * steps + ((cycle - 0) & mask)];
    Fp x56509 = x56508 - x71;
    Fp x56510 = x56508 * x56509;
    Fp x56511 = x56508 - x1;
    Fp x56512 = x56510 * x56511;
    Fp x56513 = x56508 - x2;
    Fp x56514 = x56512 * x56513;
    if (x56514 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56515 = args[2][17 * steps + ((cycle - 0) & mask)];
    Fp x56516 = x56515 - x71;
    Fp x56517 = x56515 * x56516;
    Fp x56518 = x56515 - x1;
    Fp x56519 = x56517 * x56518;
    Fp x56520 = x56515 - x2;
    Fp x56521 = x56519 * x56520;
    if (x56521 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56522 = args[2][18 * steps + ((cycle - 0) & mask)];
    Fp x56523 = x56522 - x71;
    Fp x56524 = x56522 * x56523;
    Fp x56525 = x56522 - x1;
    Fp x56526 = x56524 * x56525;
    Fp x56527 = x56522 - x2;
    Fp x56528 = x56526 * x56527;
    if (x56528 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56529 = args[2][19 * steps + ((cycle - 0) & mask)];
    Fp x56530 = x56529 - x71;
    Fp x56531 = x56529 * x56530;
    Fp x56532 = x56529 - x1;
    Fp x56533 = x56531 * x56532;
    Fp x56534 = x56529 - x2;
    Fp x56535 = x56533 * x56534;
    if (x56535 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56536 = args[2][20 * steps + ((cycle - 0) & mask)];
    Fp x56537 = x56536 - x71;
    Fp x56538 = x56536 * x56537;
    Fp x56539 = x56536 - x1;
    Fp x56540 = x56538 * x56539;
    Fp x56541 = x56536 - x2;
    Fp x56542 = x56540 * x56541;
    if (x56542 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56543 = args[2][21 * steps + ((cycle - 0) & mask)];
    Fp x56544 = x56543 - x71;
    Fp x56545 = x56543 * x56544;
    Fp x56546 = x56543 - x1;
    Fp x56547 = x56545 * x56546;
    Fp x56548 = x56543 - x2;
    Fp x56549 = x56547 * x56548;
    if (x56549 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56550 = args[2][22 * steps + ((cycle - 0) & mask)];
    Fp x56551 = x56550 - x71;
    Fp x56552 = x56550 * x56551;
    Fp x56553 = x56550 - x1;
    Fp x56554 = x56552 * x56553;
    Fp x56555 = x56550 - x2;
    Fp x56556 = x56554 * x56555;
    if (x56556 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56557 = args[2][23 * steps + ((cycle - 0) & mask)];
    Fp x56558 = x56557 - x71;
    Fp x56559 = x56557 * x56558;
    Fp x56560 = x56557 - x1;
    Fp x56561 = x56559 * x56560;
    Fp x56562 = x56557 - x2;
    Fp x56563 = x56561 * x56562;
    if (x56563 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56564 = args[2][24 * steps + ((cycle - 0) & mask)];
    Fp x56565 = x56564 - x71;
    Fp x56566 = x56564 * x56565;
    Fp x56567 = x56564 - x1;
    Fp x56568 = x56566 * x56567;
    Fp x56569 = x56564 - x2;
    Fp x56570 = x56568 * x56569;
    if (x56570 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56571 = args[2][25 * steps + ((cycle - 0) & mask)];
    Fp x56572 = x56571 - x71;
    Fp x56573 = x56571 * x56572;
    Fp x56574 = x56571 - x1;
    Fp x56575 = x56573 * x56574;
    Fp x56576 = x56571 - x2;
    Fp x56577 = x56575 * x56576;
    if (x56577 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56578 = args[2][26 * steps + ((cycle - 0) & mask)];
    Fp x56579 = x56578 - x71;
    Fp x56580 = x56578 * x56579;
    Fp x56581 = x56578 - x1;
    Fp x56582 = x56580 * x56581;
    Fp x56583 = x56578 - x2;
    Fp x56584 = x56582 * x56583;
    if (x56584 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56585 = args[2][27 * steps + ((cycle - 0) & mask)];
    Fp x56586 = x56585 - x71;
    Fp x56587 = x56585 * x56586;
    Fp x56588 = x56585 - x1;
    Fp x56589 = x56587 * x56588;
    Fp x56590 = x56585 - x2;
    Fp x56591 = x56589 * x56590;
    if (x56591 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56592 = args[2][28 * steps + ((cycle - 0) & mask)];
    Fp x56593 = x56592 - x71;
    Fp x56594 = x56592 * x56593;
    Fp x56595 = x56592 - x1;
    Fp x56596 = x56594 * x56595;
    Fp x56597 = x56592 - x2;
    Fp x56598 = x56596 * x56597;
    if (x56598 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56599 = args[2][29 * steps + ((cycle - 0) & mask)];
    Fp x56600 = x56599 - x71;
    Fp x56601 = x56599 * x56600;
    Fp x56602 = x56599 - x1;
    Fp x56603 = x56601 * x56602;
    Fp x56604 = x56599 - x2;
    Fp x56605 = x56603 * x56604;
    if (x56605 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56606 = args[2][30 * steps + ((cycle - 0) & mask)];
    Fp x56607 = x56606 - x71;
    Fp x56608 = x56606 * x56607;
    Fp x56609 = x56606 - x1;
    Fp x56610 = x56608 * x56609;
    Fp x56611 = x56606 - x2;
    Fp x56612 = x56610 * x56611;
    if (x56612 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56613 = args[2][31 * steps + ((cycle - 0) & mask)];
    Fp x56614 = x56613 - x71;
    Fp x56615 = x56613 * x56614;
    Fp x56616 = x56613 - x1;
    Fp x56617 = x56615 * x56616;
    Fp x56618 = x56613 - x2;
    Fp x56619 = x56617 * x56618;
    if (x56619 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56620 = args[2][32 * steps + ((cycle - 0) & mask)];
    Fp x56621 = x56620 - x71;
    Fp x56622 = x56620 * x56621;
    Fp x56623 = x56620 - x1;
    Fp x56624 = x56622 * x56623;
    Fp x56625 = x56620 - x2;
    Fp x56626 = x56624 * x56625;
    if (x56626 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56627 = args[2][33 * steps + ((cycle - 0) & mask)];
    Fp x56628 = x56627 - x71;
    Fp x56629 = x56627 * x56628;
    Fp x56630 = x56627 - x1;
    Fp x56631 = x56629 * x56630;
    Fp x56632 = x56627 - x2;
    Fp x56633 = x56631 * x56632;
    if (x56633 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56634 = args[2][34 * steps + ((cycle - 0) & mask)];
    Fp x56635 = x56634 - x71;
    Fp x56636 = x56634 * x56635;
    Fp x56637 = x56634 - x1;
    Fp x56638 = x56636 * x56637;
    Fp x56639 = x56634 - x2;
    Fp x56640 = x56638 * x56639;
    if (x56640 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56641 = args[2][35 * steps + ((cycle - 0) & mask)];
    Fp x56642 = x56641 - x71;
    Fp x56643 = x56641 * x56642;
    Fp x56644 = x56641 - x1;
    Fp x56645 = x56643 * x56644;
    Fp x56646 = x56641 - x2;
    Fp x56647 = x56645 * x56646;
    if (x56647 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56648 = args[2][36 * steps + ((cycle - 0) & mask)];
    Fp x56649 = x56648 - x71;
    Fp x56650 = x56648 * x56649;
    Fp x56651 = x56648 - x1;
    Fp x56652 = x56650 * x56651;
    Fp x56653 = x56648 - x2;
    Fp x56654 = x56652 * x56653;
    if (x56654 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56655 = args[2][37 * steps + ((cycle - 0) & mask)];
    Fp x56656 = x56655 - x71;
    Fp x56657 = x56655 * x56656;
    Fp x56658 = x56655 - x1;
    Fp x56659 = x56657 * x56658;
    Fp x56660 = x56655 - x2;
    Fp x56661 = x56659 * x56660;
    if (x56661 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56662 = args[2][38 * steps + ((cycle - 0) & mask)];
    Fp x56663 = x56662 - x71;
    Fp x56664 = x56662 * x56663;
    Fp x56665 = x56662 - x1;
    Fp x56666 = x56664 * x56665;
    Fp x56667 = x56662 - x2;
    Fp x56668 = x56666 * x56667;
    if (x56668 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56669 = args[2][39 * steps + ((cycle - 0) & mask)];
    Fp x56670 = x56669 - x71;
    Fp x56671 = x56669 * x56670;
    Fp x56672 = x56669 - x1;
    Fp x56673 = x56671 * x56672;
    Fp x56674 = x56669 - x2;
    Fp x56675 = x56673 * x56674;
    if (x56675 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56676 = args[2][40 * steps + ((cycle - 0) & mask)];
    Fp x56677 = x56676 - x71;
    Fp x56678 = x56676 * x56677;
    Fp x56679 = x56676 - x1;
    Fp x56680 = x56678 * x56679;
    Fp x56681 = x56676 - x2;
    Fp x56682 = x56680 * x56681;
    if (x56682 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56683 = args[2][41 * steps + ((cycle - 0) & mask)];
    Fp x56684 = x56683 - x71;
    Fp x56685 = x56683 * x56684;
    Fp x56686 = x56683 - x1;
    Fp x56687 = x56685 * x56686;
    Fp x56688 = x56683 - x2;
    Fp x56689 = x56687 * x56688;
    if (x56689 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56690 = args[2][42 * steps + ((cycle - 0) & mask)];
    Fp x56691 = x56690 - x71;
    Fp x56692 = x56690 * x56691;
    Fp x56693 = x56690 - x1;
    Fp x56694 = x56692 * x56693;
    Fp x56695 = x56690 - x2;
    Fp x56696 = x56694 * x56695;
    if (x56696 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56697 = args[2][43 * steps + ((cycle - 0) & mask)];
    Fp x56698 = x56697 - x71;
    Fp x56699 = x56697 * x56698;
    Fp x56700 = x56697 - x1;
    Fp x56701 = x56699 * x56700;
    Fp x56702 = x56697 - x2;
    Fp x56703 = x56701 * x56702;
    if (x56703 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56704 = args[2][44 * steps + ((cycle - 0) & mask)];
    Fp x56705 = x56704 - x71;
    Fp x56706 = x56704 * x56705;
    Fp x56707 = x56704 - x1;
    Fp x56708 = x56706 * x56707;
    Fp x56709 = x56704 - x2;
    Fp x56710 = x56708 * x56709;
    if (x56710 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56711 = args[2][45 * steps + ((cycle - 0) & mask)];
    Fp x56712 = x56711 - x71;
    Fp x56713 = x56711 * x56712;
    Fp x56714 = x56711 - x1;
    Fp x56715 = x56713 * x56714;
    Fp x56716 = x56711 - x2;
    Fp x56717 = x56715 * x56716;
    if (x56717 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56718 = args[2][46 * steps + ((cycle - 0) & mask)];
    Fp x56719 = x56718 - x71;
    Fp x56720 = x56718 * x56719;
    Fp x56721 = x56718 - x1;
    Fp x56722 = x56720 * x56721;
    Fp x56723 = x56718 - x2;
    Fp x56724 = x56722 * x56723;
    if (x56724 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56725 = args[2][47 * steps + ((cycle - 0) & mask)];
    Fp x56726 = x56725 - x71;
    Fp x56727 = x56725 * x56726;
    Fp x56728 = x56725 - x1;
    Fp x56729 = x56727 * x56728;
    Fp x56730 = x56725 - x2;
    Fp x56731 = x56729 * x56730;
    if (x56731 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56732 = args[2][48 * steps + ((cycle - 0) & mask)];
    Fp x56733 = x56732 - x71;
    Fp x56734 = x56732 * x56733;
    Fp x56735 = x56732 - x1;
    Fp x56736 = x56734 * x56735;
    Fp x56737 = x56732 - x2;
    Fp x56738 = x56736 * x56737;
    if (x56738 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56739 = args[2][49 * steps + ((cycle - 0) & mask)];
    Fp x56740 = x56739 - x71;
    Fp x56741 = x56739 * x56740;
    Fp x56742 = x56739 - x1;
    Fp x56743 = x56741 * x56742;
    Fp x56744 = x56739 - x2;
    Fp x56745 = x56743 * x56744;
    if (x56745 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56746 = args[2][50 * steps + ((cycle - 0) & mask)];
    Fp x56747 = x56746 - x71;
    Fp x56748 = x56746 * x56747;
    Fp x56749 = x56746 - x1;
    Fp x56750 = x56748 * x56749;
    Fp x56751 = x56746 - x2;
    Fp x56752 = x56750 * x56751;
    if (x56752 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56753 = args[2][51 * steps + ((cycle - 0) & mask)];
    Fp x56754 = x56753 - x71;
    Fp x56755 = x56753 * x56754;
    Fp x56756 = x56753 - x1;
    Fp x56757 = x56755 * x56756;
    Fp x56758 = x56753 - x2;
    Fp x56759 = x56757 * x56758;
    if (x56759 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56760 = args[2][52 * steps + ((cycle - 0) & mask)];
    Fp x56761 = x56760 - x71;
    Fp x56762 = x56760 * x56761;
    Fp x56763 = x56760 - x1;
    Fp x56764 = x56762 * x56763;
    Fp x56765 = x56760 - x2;
    Fp x56766 = x56764 * x56765;
    if (x56766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56767 = args[2][53 * steps + ((cycle - 0) & mask)];
    Fp x56768 = x56767 - x71;
    Fp x56769 = x56767 * x56768;
    Fp x56770 = x56767 - x1;
    Fp x56771 = x56769 * x56770;
    Fp x56772 = x56767 - x2;
    Fp x56773 = x56771 * x56772;
    if (x56773 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56774 = args[2][54 * steps + ((cycle - 0) & mask)];
    Fp x56775 = x56774 - x71;
    Fp x56776 = x56774 * x56775;
    Fp x56777 = x56774 - x1;
    Fp x56778 = x56776 * x56777;
    Fp x56779 = x56774 - x2;
    Fp x56780 = x56778 * x56779;
    if (x56780 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56781 = args[2][55 * steps + ((cycle - 0) & mask)];
    Fp x56782 = x56781 - x71;
    Fp x56783 = x56781 * x56782;
    Fp x56784 = x56781 - x1;
    Fp x56785 = x56783 * x56784;
    Fp x56786 = x56781 - x2;
    Fp x56787 = x56785 * x56786;
    if (x56787 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56788 = args[2][56 * steps + ((cycle - 0) & mask)];
    Fp x56789 = x56788 - x71;
    Fp x56790 = x56788 * x56789;
    Fp x56791 = x56788 - x1;
    Fp x56792 = x56790 * x56791;
    Fp x56793 = x56788 - x2;
    Fp x56794 = x56792 * x56793;
    if (x56794 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56795 = args[2][57 * steps + ((cycle - 0) & mask)];
    Fp x56796 = x56795 - x71;
    Fp x56797 = x56795 * x56796;
    Fp x56798 = x56795 - x1;
    Fp x56799 = x56797 * x56798;
    Fp x56800 = x56795 - x2;
    Fp x56801 = x56799 * x56800;
    if (x56801 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56802 = args[2][58 * steps + ((cycle - 0) & mask)];
    Fp x56803 = x56802 - x71;
    Fp x56804 = x56802 * x56803;
    Fp x56805 = x56802 - x1;
    Fp x56806 = x56804 * x56805;
    Fp x56807 = x56802 - x2;
    Fp x56808 = x56806 * x56807;
    if (x56808 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56809 = args[2][59 * steps + ((cycle - 0) & mask)];
    Fp x56810 = x56809 - x71;
    Fp x56811 = x56809 * x56810;
    Fp x56812 = x56809 - x1;
    Fp x56813 = x56811 * x56812;
    Fp x56814 = x56809 - x2;
    Fp x56815 = x56813 * x56814;
    if (x56815 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56816 = args[2][60 * steps + ((cycle - 0) & mask)];
    Fp x56817 = x56816 - x71;
    Fp x56818 = x56816 * x56817;
    Fp x56819 = x56816 - x1;
    Fp x56820 = x56818 * x56819;
    Fp x56821 = x56816 - x2;
    Fp x56822 = x56820 * x56821;
    if (x56822 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56823 = args[2][61 * steps + ((cycle - 0) & mask)];
    Fp x56824 = x56823 - x71;
    Fp x56825 = x56823 * x56824;
    Fp x56826 = x56823 - x1;
    Fp x56827 = x56825 * x56826;
    Fp x56828 = x56823 - x2;
    Fp x56829 = x56827 * x56828;
    if (x56829 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56830 = args[2][62 * steps + ((cycle - 0) & mask)];
    Fp x56831 = x56830 - x71;
    Fp x56832 = x56830 * x56831;
    Fp x56833 = x56830 - x1;
    Fp x56834 = x56832 * x56833;
    Fp x56835 = x56830 - x2;
    Fp x56836 = x56834 * x56835;
    if (x56836 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56837 = args[2][63 * steps + ((cycle - 0) & mask)];
    Fp x56838 = x56837 - x71;
    Fp x56839 = x56837 * x56838;
    Fp x56840 = x56837 - x1;
    Fp x56841 = x56839 * x56840;
    Fp x56842 = x56837 - x2;
    Fp x56843 = x56841 * x56842;
    if (x56843 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56844 = args[2][64 * steps + ((cycle - 0) & mask)];
    Fp x56845 = x56844 - x71;
    Fp x56846 = x56844 * x56845;
    Fp x56847 = x56844 - x1;
    Fp x56848 = x56846 * x56847;
    Fp x56849 = x56844 - x2;
    Fp x56850 = x56848 * x56849;
    if (x56850 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56851 = args[2][65 * steps + ((cycle - 0) & mask)];
    Fp x56852 = x56851 - x71;
    Fp x56853 = x56851 * x56852;
    Fp x56854 = x56851 - x1;
    Fp x56855 = x56853 * x56854;
    Fp x56856 = x56851 - x2;
    Fp x56857 = x56855 * x56856;
    if (x56857 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56858 = args[2][66 * steps + ((cycle - 0) & mask)];
    Fp x56859 = x56858 - x71;
    Fp x56860 = x56858 * x56859;
    Fp x56861 = x56858 - x1;
    Fp x56862 = x56860 * x56861;
    Fp x56863 = x56858 - x2;
    Fp x56864 = x56862 * x56863;
    if (x56864 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56865 = args[2][67 * steps + ((cycle - 0) & mask)];
    Fp x56866 = x56865 - x71;
    Fp x56867 = x56865 * x56866;
    Fp x56868 = x56865 - x1;
    Fp x56869 = x56867 * x56868;
    Fp x56870 = x56865 - x2;
    Fp x56871 = x56869 * x56870;
    if (x56871 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56872 = args[2][68 * steps + ((cycle - 0) & mask)];
    Fp x56873 = x56872 - x71;
    Fp x56874 = x56872 * x56873;
    Fp x56875 = x56872 - x1;
    Fp x56876 = x56874 * x56875;
    Fp x56877 = x56872 - x2;
    Fp x56878 = x56876 * x56877;
    if (x56878 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56879 = args[2][69 * steps + ((cycle - 0) & mask)];
    Fp x56880 = x56879 - x71;
    Fp x56881 = x56879 * x56880;
    Fp x56882 = x56879 - x1;
    Fp x56883 = x56881 * x56882;
    Fp x56884 = x56879 - x2;
    Fp x56885 = x56883 * x56884;
    if (x56885 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56886 = args[2][70 * steps + ((cycle - 0) & mask)];
    Fp x56887 = x56886 - x71;
    Fp x56888 = x56886 * x56887;
    Fp x56889 = x56886 - x1;
    Fp x56890 = x56888 * x56889;
    Fp x56891 = x56886 - x2;
    Fp x56892 = x56890 * x56891;
    if (x56892 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56893 = args[2][71 * steps + ((cycle - 0) & mask)];
    Fp x56894 = x56893 - x71;
    Fp x56895 = x56893 * x56894;
    Fp x56896 = x56893 - x1;
    Fp x56897 = x56895 * x56896;
    Fp x56898 = x56893 - x2;
    Fp x56899 = x56897 * x56898;
    if (x56899 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56900 = args[2][72 * steps + ((cycle - 0) & mask)];
    Fp x56901 = x56900 - x71;
    Fp x56902 = x56900 * x56901;
    Fp x56903 = x56900 - x1;
    Fp x56904 = x56902 * x56903;
    Fp x56905 = x56900 - x2;
    Fp x56906 = x56904 * x56905;
    if (x56906 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56907 = args[2][73 * steps + ((cycle - 0) & mask)];
    Fp x56908 = x56907 - x71;
    Fp x56909 = x56907 * x56908;
    Fp x56910 = x56907 - x1;
    Fp x56911 = x56909 * x56910;
    Fp x56912 = x56907 - x2;
    Fp x56913 = x56911 * x56912;
    if (x56913 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56914 = args[2][74 * steps + ((cycle - 0) & mask)];
    Fp x56915 = x56914 - x71;
    Fp x56916 = x56914 * x56915;
    Fp x56917 = x56914 - x1;
    Fp x56918 = x56916 * x56917;
    Fp x56919 = x56914 - x2;
    Fp x56920 = x56918 * x56919;
    if (x56920 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56921 = args[2][75 * steps + ((cycle - 0) & mask)];
    Fp x56922 = x56921 - x71;
    Fp x56923 = x56921 * x56922;
    Fp x56924 = x56921 - x1;
    Fp x56925 = x56923 * x56924;
    Fp x56926 = x56921 - x2;
    Fp x56927 = x56925 * x56926;
    if (x56927 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56928 = args[2][76 * steps + ((cycle - 0) & mask)];
    Fp x56929 = x56928 - x71;
    Fp x56930 = x56928 * x56929;
    Fp x56931 = x56928 - x1;
    Fp x56932 = x56930 * x56931;
    Fp x56933 = x56928 - x2;
    Fp x56934 = x56932 * x56933;
    if (x56934 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56935 = args[2][77 * steps + ((cycle - 0) & mask)];
    Fp x56936 = x56935 - x71;
    Fp x56937 = x56935 * x56936;
    Fp x56938 = x56935 - x1;
    Fp x56939 = x56937 * x56938;
    Fp x56940 = x56935 - x2;
    Fp x56941 = x56939 * x56940;
    if (x56941 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56942 = args[2][78 * steps + ((cycle - 0) & mask)];
    Fp x56943 = x56942 - x71;
    Fp x56944 = x56942 * x56943;
    Fp x56945 = x56942 - x1;
    Fp x56946 = x56944 * x56945;
    Fp x56947 = x56942 - x2;
    Fp x56948 = x56946 * x56947;
    if (x56948 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56949 = args[2][79 * steps + ((cycle - 0) & mask)];
    Fp x56950 = x56949 - x71;
    Fp x56951 = x56949 * x56950;
    Fp x56952 = x56949 - x1;
    Fp x56953 = x56951 * x56952;
    Fp x56954 = x56949 - x2;
    Fp x56955 = x56953 * x56954;
    if (x56955 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56956 = args[2][80 * steps + ((cycle - 0) & mask)];
    Fp x56957 = x56956 - x71;
    Fp x56958 = x56956 * x56957;
    Fp x56959 = x56956 - x1;
    Fp x56960 = x56958 * x56959;
    Fp x56961 = x56956 - x2;
    Fp x56962 = x56960 * x56961;
    if (x56962 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56963 = args[2][81 * steps + ((cycle - 0) & mask)];
    Fp x56964 = x56963 - x71;
    Fp x56965 = x56963 * x56964;
    Fp x56966 = x56963 - x1;
    Fp x56967 = x56965 * x56966;
    Fp x56968 = x56963 - x2;
    Fp x56969 = x56967 * x56968;
    if (x56969 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56970 = args[2][82 * steps + ((cycle - 0) & mask)];
    Fp x56971 = x56970 - x71;
    Fp x56972 = x56970 * x56971;
    Fp x56973 = x56970 - x1;
    Fp x56974 = x56972 * x56973;
    Fp x56975 = x56970 - x2;
    Fp x56976 = x56974 * x56975;
    if (x56976 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56977 = args[2][83 * steps + ((cycle - 0) & mask)];
    Fp x56978 = x56977 - x71;
    Fp x56979 = x56977 * x56978;
    Fp x56980 = x56977 - x1;
    Fp x56981 = x56979 * x56980;
    Fp x56982 = x56977 - x2;
    Fp x56983 = x56981 * x56982;
    if (x56983 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56984 = args[2][84 * steps + ((cycle - 0) & mask)];
    Fp x56985 = x56984 - x71;
    Fp x56986 = x56984 * x56985;
    Fp x56987 = x56984 - x1;
    Fp x56988 = x56986 * x56987;
    Fp x56989 = x56984 - x2;
    Fp x56990 = x56988 * x56989;
    if (x56990 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56991 = args[2][85 * steps + ((cycle - 0) & mask)];
    Fp x56992 = x56991 - x71;
    Fp x56993 = x56991 * x56992;
    Fp x56994 = x56991 - x1;
    Fp x56995 = x56993 * x56994;
    Fp x56996 = x56991 - x2;
    Fp x56997 = x56995 * x56996;
    if (x56997 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x56998 = args[2][86 * steps + ((cycle - 0) & mask)];
    Fp x56999 = x56998 - x71;
    Fp x57000 = x56998 * x56999;
    Fp x57001 = x56998 - x1;
    Fp x57002 = x57000 * x57001;
    Fp x57003 = x56998 - x2;
    Fp x57004 = x57002 * x57003;
    if (x57004 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57005 = args[2][87 * steps + ((cycle - 0) & mask)];
    Fp x57006 = x57005 - x71;
    Fp x57007 = x57005 * x57006;
    Fp x57008 = x57005 - x1;
    Fp x57009 = x57007 * x57008;
    Fp x57010 = x57005 - x2;
    Fp x57011 = x57009 * x57010;
    if (x57011 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57012 = args[2][88 * steps + ((cycle - 0) & mask)];
    Fp x57013 = x57012 - x71;
    Fp x57014 = x57012 * x57013;
    Fp x57015 = x57012 - x1;
    Fp x57016 = x57014 * x57015;
    Fp x57017 = x57012 - x2;
    Fp x57018 = x57016 * x57017;
    if (x57018 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57019 = args[2][89 * steps + ((cycle - 0) & mask)];
    Fp x57020 = x57019 - x71;
    Fp x57021 = x57019 * x57020;
    Fp x57022 = x57019 - x1;
    Fp x57023 = x57021 * x57022;
    Fp x57024 = x57019 - x2;
    Fp x57025 = x57023 * x57024;
    if (x57025 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57026 = args[2][90 * steps + ((cycle - 0) & mask)];
    Fp x57027 = x57026 - x71;
    Fp x57028 = x57026 * x57027;
    Fp x57029 = x57026 - x1;
    Fp x57030 = x57028 * x57029;
    Fp x57031 = x57026 - x2;
    Fp x57032 = x57030 * x57031;
    if (x57032 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57033 = args[2][91 * steps + ((cycle - 0) & mask)];
    Fp x57034 = x57033 - x71;
    Fp x57035 = x57033 * x57034;
    Fp x57036 = x57033 - x1;
    Fp x57037 = x57035 * x57036;
    Fp x57038 = x57033 - x2;
    Fp x57039 = x57037 * x57038;
    if (x57039 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57040 = args[2][92 * steps + ((cycle - 0) & mask)];
    Fp x57041 = x57040 - x71;
    Fp x57042 = x57040 * x57041;
    Fp x57043 = x57040 - x1;
    Fp x57044 = x57042 * x57043;
    Fp x57045 = x57040 - x2;
    Fp x57046 = x57044 * x57045;
    if (x57046 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57047 = args[2][93 * steps + ((cycle - 0) & mask)];
    Fp x57048 = x57047 - x71;
    Fp x57049 = x57047 * x57048;
    Fp x57050 = x57047 - x1;
    Fp x57051 = x57049 * x57050;
    Fp x57052 = x57047 - x2;
    Fp x57053 = x57051 * x57052;
    if (x57053 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57054 = args[2][94 * steps + ((cycle - 0) & mask)];
    Fp x57055 = x57054 - x71;
    Fp x57056 = x57054 * x57055;
    Fp x57057 = x57054 - x1;
    Fp x57058 = x57056 * x57057;
    Fp x57059 = x57054 - x2;
    Fp x57060 = x57058 * x57059;
    if (x57060 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57061 = args[2][95 * steps + ((cycle - 0) & mask)];
    Fp x57062 = x57061 - x71;
    Fp x57063 = x57061 * x57062;
    Fp x57064 = x57061 - x1;
    Fp x57065 = x57063 * x57064;
    Fp x57066 = x57061 - x2;
    Fp x57067 = x57065 * x57066;
    if (x57067 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57068 = args[2][96 * steps + ((cycle - 0) & mask)];
    Fp x57069 = x57068 - x71;
    Fp x57070 = x57068 * x57069;
    Fp x57071 = x57068 - x1;
    Fp x57072 = x57070 * x57071;
    Fp x57073 = x57068 - x2;
    Fp x57074 = x57072 * x57073;
    if (x57074 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57075 = args[2][97 * steps + ((cycle - 0) & mask)];
    Fp x57076 = x57075 - x71;
    Fp x57077 = x57075 * x57076;
    Fp x57078 = x57075 - x1;
    Fp x57079 = x57077 * x57078;
    Fp x57080 = x57075 - x2;
    Fp x57081 = x57079 * x57080;
    if (x57081 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57082 = args[2][98 * steps + ((cycle - 0) & mask)];
    Fp x57083 = x57082 - x71;
    Fp x57084 = x57082 * x57083;
    Fp x57085 = x57082 - x1;
    Fp x57086 = x57084 * x57085;
    Fp x57087 = x57082 - x2;
    Fp x57088 = x57086 * x57087;
    if (x57088 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57089 = args[2][99 * steps + ((cycle - 0) & mask)];
    Fp x57090 = x57089 - x71;
    Fp x57091 = x57089 * x57090;
    Fp x57092 = x57089 - x1;
    Fp x57093 = x57091 * x57092;
    Fp x57094 = x57089 - x2;
    Fp x57095 = x57093 * x57094;
    if (x57095 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:46");
    Fp x57096 = x970 - x71;
    Fp x57097 = x970 * x57096;
    if (x57097 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57098 = x14361 - x71;
    Fp x57099 = x14361 * x57098;
    if (x57099 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57100 = x20296 - x71;
    Fp x57101 = x20296 * x57100;
    if (x57101 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57102 = x25757 - x71;
    Fp x57103 = x25757 * x57102;
    if (x57103 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57104 = x31642 - x71;
    Fp x57105 = x31642 * x57104;
    if (x57105 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57106 = x37178 - x71;
    Fp x57107 = x37178 * x57106;
    if (x57107 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57108 = x41452 - x71;
    Fp x57109 = x41452 * x57108;
    if (x57109 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57110 = args[2][139 * steps + ((cycle - 0) & mask)];
    Fp x57111 = x57110 - x71;
    Fp x57112 = x57110 * x57111;
    if (x57112 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57113 = x47277 - x71;
    Fp x57114 = x47277 * x57113;
    if (x57114 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57115 = x47580 - x71;
    Fp x57116 = x47580 * x57115;
    if (x57116 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57117 = x52782 - x71;
    Fp x57118 = x52782 * x57117;
    if (x57118 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57119 = x56393 - x71;
    Fp x57120 = x56393 * x57119;
    if (x57120 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x57121 = x970 + x14361;
    Fp x57122 = x57121 + x20296;
    Fp x57123 = x57122 + x25757;
    Fp x57124 = x57123 + x31642;
    Fp x57125 = x57124 + x37178;
    Fp x57126 = x57125 + x41452;
    Fp x57127 = x57126 + x57110;
    Fp x57128 = x57127 + x47277;
    Fp x57129 = x57128 + x47580;
    Fp x57130 = x57129 + x52782;
    Fp x57131 = x57130 + x56393;
    Fp x57132 = x57131 - x71;
    if (x57132 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
  }
  Fp x57133 = args[0][2 * steps + ((cycle - 0) & mask)];
  if (x57133 != 0) {
    Fp x57134 = args[2][143 * steps + ((cycle - 1) & mask)];
    Fp x57135 = x71 - x57134;
    Fp x57136 = args[2][140 * steps + ((cycle - 1) & mask)];
    Fp x57137 = x57135 - x57136;
    Fp x57138 = args[2][141 * steps + ((cycle - 1) & mask)];
    Fp x57139 = x57137 - x57138;
    Fp x57140 = args[2][142 * steps + ((cycle - 1) & mask)];
    Fp x57141 = x57139 - x57140;
    if (x57141 != 0) {
      {
        args[2][132 * steps + cycle] = x70;
        args[2][133 * steps + cycle] = x70;
        args[2][134 * steps + cycle] = x70;
        args[2][135 * steps + cycle] = x70;
        args[2][136 * steps + cycle] = x70;
        args[2][137 * steps + cycle] = x70;
        args[2][138 * steps + cycle] = x70;
        args[2][139 * steps + cycle] = x71;
        args[2][140 * steps + cycle] = x70;
        args[2][141 * steps + cycle] = x70;
        args[2][142 * steps + cycle] = x70;
        args[2][143 * steps + cycle] = x70;
      }
      Fp x57142 = args[2][133 * steps + ((cycle - 0) & mask)];
      Fp x57143 = args[2][134 * steps + ((cycle - 0) & mask)];
      Fp x57144 = x57143 * x1;
      Fp x57145 = x57142 + x57144;
      Fp x57146 = args[2][135 * steps + ((cycle - 0) & mask)];
      Fp x57147 = x57146 * x2;
      Fp x57148 = x57145 + x57147;
      Fp x57149 = args[2][136 * steps + ((cycle - 0) & mask)];
      Fp x57150 = x57149 * x3;
      Fp x57151 = x57148 + x57150;
      Fp x57152 = args[2][137 * steps + ((cycle - 0) & mask)];
      Fp x57153 = x57152 * x4;
      Fp x57154 = x57151 + x57153;
      Fp x57155 = args[2][138 * steps + ((cycle - 0) & mask)];
      Fp x57156 = x57155 * x5;
      Fp x57157 = x57154 + x57156;
      Fp x57158 = args[2][139 * steps + ((cycle - 0) & mask)];
      Fp x57159 = x57158 * x0;
      Fp x57160 = x57157 + x57159;
      Fp x57161 = args[2][140 * steps + ((cycle - 0) & mask)];
      Fp x57162 = x57161 * x6;
      Fp x57163 = x57160 + x57162;
      Fp x57164 = args[2][141 * steps + ((cycle - 0) & mask)];
      Fp x57165 = x57164 * x7;
      Fp x57166 = x57163 + x57165;
      Fp x57167 = args[2][142 * steps + ((cycle - 0) & mask)];
      Fp x57168 = x57167 * x8;
      Fp x57169 = x57166 + x57168;
      Fp x57170 = args[2][143 * steps + ((cycle - 0) & mask)];
      Fp x57171 = x57170 * x9;
      Fp x57172 = x57169 + x57171;
      Fp x57173 = x57172 - x0;
      if (x57173 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    }
    if (x57136 != 0) {
      if (x703 != 0) {
        {
          args[2][132 * steps + cycle] = x70;
          args[2][133 * steps + cycle] = x70;
          args[2][134 * steps + cycle] = x70;
          args[2][135 * steps + cycle] = x70;
          args[2][136 * steps + cycle] = x70;
          args[2][137 * steps + cycle] = x70;
          args[2][138 * steps + cycle] = x70;
          args[2][139 * steps + cycle] = x70;
          args[2][140 * steps + cycle] = x70;
          args[2][141 * steps + cycle] = x71;
          args[2][142 * steps + cycle] = x70;
          args[2][143 * steps + cycle] = x70;
        }
        Fp x57174 = args[2][133 * steps + ((cycle - 0) & mask)];
        Fp x57175 = args[2][134 * steps + ((cycle - 0) & mask)];
        Fp x57176 = x57175 * x1;
        Fp x57177 = x57174 + x57176;
        Fp x57178 = args[2][135 * steps + ((cycle - 0) & mask)];
        Fp x57179 = x57178 * x2;
        Fp x57180 = x57177 + x57179;
        Fp x57181 = args[2][136 * steps + ((cycle - 0) & mask)];
        Fp x57182 = x57181 * x3;
        Fp x57183 = x57180 + x57182;
        Fp x57184 = args[2][137 * steps + ((cycle - 0) & mask)];
        Fp x57185 = x57184 * x4;
        Fp x57186 = x57183 + x57185;
        Fp x57187 = args[2][138 * steps + ((cycle - 0) & mask)];
        Fp x57188 = x57187 * x5;
        Fp x57189 = x57186 + x57188;
        Fp x57190 = args[2][139 * steps + ((cycle - 0) & mask)];
        Fp x57191 = x57190 * x0;
        Fp x57192 = x57189 + x57191;
        Fp x57193 = args[2][140 * steps + ((cycle - 0) & mask)];
        Fp x57194 = x57193 * x6;
        Fp x57195 = x57192 + x57194;
        Fp x57196 = args[2][141 * steps + ((cycle - 0) & mask)];
        Fp x57197 = x57196 * x7;
        Fp x57198 = x57195 + x57197;
        Fp x57199 = args[2][142 * steps + ((cycle - 0) & mask)];
        Fp x57200 = x57199 * x8;
        Fp x57201 = x57198 + x57200;
        Fp x57202 = args[2][143 * steps + ((cycle - 0) & mask)];
        Fp x57203 = x57202 * x9;
        Fp x57204 = x57201 + x57203;
        Fp x57205 = x57204 - x7;
        if (x57205 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      }
      Fp x57206 = x71 - x703;
      if (x57206 != 0) {
        {
          args[2][132 * steps + cycle] = x70;
          args[2][133 * steps + cycle] = x70;
          args[2][134 * steps + cycle] = x70;
          args[2][135 * steps + cycle] = x70;
          args[2][136 * steps + cycle] = x70;
          args[2][137 * steps + cycle] = x70;
          args[2][138 * steps + cycle] = x70;
          args[2][139 * steps + cycle] = x70;
          args[2][140 * steps + cycle] = x71;
          args[2][141 * steps + cycle] = x70;
          args[2][142 * steps + cycle] = x70;
          args[2][143 * steps + cycle] = x70;
        }
        Fp x57207 = args[2][133 * steps + ((cycle - 0) & mask)];
        Fp x57208 = args[2][134 * steps + ((cycle - 0) & mask)];
        Fp x57209 = x57208 * x1;
        Fp x57210 = x57207 + x57209;
        Fp x57211 = args[2][135 * steps + ((cycle - 0) & mask)];
        Fp x57212 = x57211 * x2;
        Fp x57213 = x57210 + x57212;
        Fp x57214 = args[2][136 * steps + ((cycle - 0) & mask)];
        Fp x57215 = x57214 * x3;
        Fp x57216 = x57213 + x57215;
        Fp x57217 = args[2][137 * steps + ((cycle - 0) & mask)];
        Fp x57218 = x57217 * x4;
        Fp x57219 = x57216 + x57218;
        Fp x57220 = args[2][138 * steps + ((cycle - 0) & mask)];
        Fp x57221 = x57220 * x5;
        Fp x57222 = x57219 + x57221;
        Fp x57223 = args[2][139 * steps + ((cycle - 0) & mask)];
        Fp x57224 = x57223 * x0;
        Fp x57225 = x57222 + x57224;
        Fp x57226 = args[2][140 * steps + ((cycle - 0) & mask)];
        Fp x57227 = x57226 * x6;
        Fp x57228 = x57225 + x57227;
        Fp x57229 = args[2][141 * steps + ((cycle - 0) & mask)];
        Fp x57230 = x57229 * x7;
        Fp x57231 = x57228 + x57230;
        Fp x57232 = args[2][142 * steps + ((cycle - 0) & mask)];
        Fp x57233 = x57232 * x8;
        Fp x57234 = x57231 + x57233;
        Fp x57235 = args[2][143 * steps + ((cycle - 0) & mask)];
        Fp x57236 = x57235 * x9;
        Fp x57237 = x57234 + x57236;
        Fp x57238 = x57237 - x6;
        if (x57238 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      }
    }
    Fp x57239 = x57138 + x57140;
    if (x57239 != 0) {
      Fp x57240 = args[2][127 * steps + ((cycle - 1) & mask)];
      {
        Fp x57241 = (x57240 == 0) ? Fp(1) : Fp(0);
        args[2][132 * steps + cycle] = x57241;
        Fp x57242 = x57240 - x71;
        Fp x57243 = (x57242 == 0) ? Fp(1) : Fp(0);
        args[2][133 * steps + cycle] = x57243;
        Fp x57244 = x57240 - x1;
        Fp x57245 = (x57244 == 0) ? Fp(1) : Fp(0);
        args[2][134 * steps + cycle] = x57245;
        Fp x57246 = x57240 - x2;
        Fp x57247 = (x57246 == 0) ? Fp(1) : Fp(0);
        args[2][135 * steps + cycle] = x57247;
        Fp x57248 = x57240 - x3;
        Fp x57249 = (x57248 == 0) ? Fp(1) : Fp(0);
        args[2][136 * steps + cycle] = x57249;
        Fp x57250 = x57240 - x4;
        Fp x57251 = (x57250 == 0) ? Fp(1) : Fp(0);
        args[2][137 * steps + cycle] = x57251;
        Fp x57252 = x57240 - x5;
        Fp x57253 = (x57252 == 0) ? Fp(1) : Fp(0);
        args[2][138 * steps + cycle] = x57253;
        Fp x57254 = x57240 - x0;
        Fp x57255 = (x57254 == 0) ? Fp(1) : Fp(0);
        args[2][139 * steps + cycle] = x57255;
        Fp x57256 = x57240 - x6;
        Fp x57257 = (x57256 == 0) ? Fp(1) : Fp(0);
        args[2][140 * steps + cycle] = x57257;
        Fp x57258 = x57240 - x7;
        Fp x57259 = (x57258 == 0) ? Fp(1) : Fp(0);
        args[2][141 * steps + cycle] = x57259;
        Fp x57260 = x57240 - x8;
        Fp x57261 = (x57260 == 0) ? Fp(1) : Fp(0);
        args[2][142 * steps + cycle] = x57261;
        Fp x57262 = x57240 - x9;
        Fp x57263 = (x57262 == 0) ? Fp(1) : Fp(0);
        args[2][143 * steps + cycle] = x57263;
      }
      Fp x57264 = args[2][133 * steps + ((cycle - 0) & mask)];
      Fp x57265 = args[2][134 * steps + ((cycle - 0) & mask)];
      Fp x57266 = x57265 * x1;
      Fp x57267 = x57264 + x57266;
      Fp x57268 = args[2][135 * steps + ((cycle - 0) & mask)];
      Fp x57269 = x57268 * x2;
      Fp x57270 = x57267 + x57269;
      Fp x57271 = args[2][136 * steps + ((cycle - 0) & mask)];
      Fp x57272 = x57271 * x3;
      Fp x57273 = x57270 + x57272;
      Fp x57274 = args[2][137 * steps + ((cycle - 0) & mask)];
      Fp x57275 = x57274 * x4;
      Fp x57276 = x57273 + x57275;
      Fp x57277 = args[2][138 * steps + ((cycle - 0) & mask)];
      Fp x57278 = x57277 * x5;
      Fp x57279 = x57276 + x57278;
      Fp x57280 = args[2][139 * steps + ((cycle - 0) & mask)];
      Fp x57281 = x57280 * x0;
      Fp x57282 = x57279 + x57281;
      Fp x57283 = args[2][140 * steps + ((cycle - 0) & mask)];
      Fp x57284 = x57283 * x6;
      Fp x57285 = x57282 + x57284;
      Fp x57286 = args[2][141 * steps + ((cycle - 0) & mask)];
      Fp x57287 = x57286 * x7;
      Fp x57288 = x57285 + x57287;
      Fp x57289 = args[2][142 * steps + ((cycle - 0) & mask)];
      Fp x57290 = x57289 * x8;
      Fp x57291 = x57288 + x57290;
      Fp x57292 = args[2][143 * steps + ((cycle - 0) & mask)];
      Fp x57293 = x57292 * x9;
      Fp x57294 = x57291 + x57293;
      Fp x57295 = x57294 - x57240;
      if (x57295 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    }
    if (x57134 != 0) {
      {
        args[2][132 * steps + cycle] = x70;
        args[2][133 * steps + cycle] = x70;
        args[2][134 * steps + cycle] = x70;
        args[2][135 * steps + cycle] = x70;
        args[2][136 * steps + cycle] = x70;
        args[2][137 * steps + cycle] = x70;
        args[2][138 * steps + cycle] = x70;
        args[2][139 * steps + cycle] = x70;
        args[2][140 * steps + cycle] = x70;
        args[2][141 * steps + cycle] = x70;
        args[2][142 * steps + cycle] = x70;
        args[2][143 * steps + cycle] = x71;
      }
      Fp x57296 = args[2][133 * steps + ((cycle - 0) & mask)];
      Fp x57297 = args[2][134 * steps + ((cycle - 0) & mask)];
      Fp x57298 = x57297 * x1;
      Fp x57299 = x57296 + x57298;
      Fp x57300 = args[2][135 * steps + ((cycle - 0) & mask)];
      Fp x57301 = x57300 * x2;
      Fp x57302 = x57299 + x57301;
      Fp x57303 = args[2][136 * steps + ((cycle - 0) & mask)];
      Fp x57304 = x57303 * x3;
      Fp x57305 = x57302 + x57304;
      Fp x57306 = args[2][137 * steps + ((cycle - 0) & mask)];
      Fp x57307 = x57306 * x4;
      Fp x57308 = x57305 + x57307;
      Fp x57309 = args[2][138 * steps + ((cycle - 0) & mask)];
      Fp x57310 = x57309 * x5;
      Fp x57311 = x57308 + x57310;
      Fp x57312 = args[2][139 * steps + ((cycle - 0) & mask)];
      Fp x57313 = x57312 * x0;
      Fp x57314 = x57311 + x57313;
      Fp x57315 = args[2][140 * steps + ((cycle - 0) & mask)];
      Fp x57316 = x57315 * x6;
      Fp x57317 = x57314 + x57316;
      Fp x57318 = args[2][141 * steps + ((cycle - 0) & mask)];
      Fp x57319 = x57318 * x7;
      Fp x57320 = x57317 + x57319;
      Fp x57321 = args[2][142 * steps + ((cycle - 0) & mask)];
      Fp x57322 = x57321 * x8;
      Fp x57323 = x57320 + x57322;
      Fp x57324 = args[2][143 * steps + ((cycle - 0) & mask)];
      Fp x57325 = x57324 * x9;
      Fp x57326 = x57323 + x57325;
      Fp x57327 = x57326 - x9;
      if (x57327 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
    }
    Fp x57328 = args[2][139 * steps + ((cycle - 0) & mask)];
    if (x57328 != 0) {
      Fp x57329 = args[2][100 * steps + ((cycle - 1) & mask)];
      Fp x57330 = args[2][101 * steps + ((cycle - 1) & mask)];
      Fp x57331 = args[2][103 * steps + ((cycle - 1) & mask)];
      if (x57331 != 0) {
        Fp x57332 = args[2][25 * steps + ((cycle - 1) & mask)];
        Fp x57333 = args[2][2 * steps + ((cycle - 1) & mask)];
        Fp x57334 = args[2][3 * steps + ((cycle - 1) & mask)];
        Fp x57335 = x57334 * x1;
        Fp x57336 = x57333 + x57335;
        Fp x57337 = args[2][4 * steps + ((cycle - 1) & mask)];
        Fp x57338 = x57337 * x3;
        Fp x57339 = x57336 + x57338;
        Fp x57340 = args[2][5 * steps + ((cycle - 1) & mask)];
        Fp x57341 = x57340 * x6;
        Fp x57342 = x57339 + x57341;
        Fp x57343 = args[2][6 * steps + ((cycle - 1) & mask)];
        Fp x57344 = x57343 * x11;
        Fp x57345 = x57342 + x57344;
        Fp x57346 = args[2][7 * steps + ((cycle - 1) & mask)];
        Fp x57347 = x57346 * x27;
        Fp x57348 = x57345 + x57347;
        Fp x57349 = args[2][8 * steps + ((cycle - 1) & mask)];
        Fp x57350 = x57349 * x12;
        Fp x57351 = x57348 + x57350;
        Fp x57352 = args[2][9 * steps + ((cycle - 1) & mask)];
        Fp x57353 = x57352 * x28;
        Fp x57354 = x57351 + x57353;
        Fp x57355 = args[2][10 * steps + ((cycle - 1) & mask)];
        Fp x57356 = x57355 * x13;
        Fp x57357 = x57354 + x57356;
        Fp x57358 = args[2][11 * steps + ((cycle - 1) & mask)];
        Fp x57359 = x57358 * x29;
        Fp x57360 = x57357 + x57359;
        Fp x57361 = args[2][12 * steps + ((cycle - 1) & mask)];
        Fp x57362 = x57361 * x14;
        Fp x57363 = x57360 + x57362;
        Fp x57364 = args[2][13 * steps + ((cycle - 1) & mask)];
        Fp x57365 = x57364 * x30;
        Fp x57366 = x57363 + x57365;
        Fp x57367 = args[2][14 * steps + ((cycle - 1) & mask)];
        Fp x57368 = x57367 * x15;
        Fp x57369 = x57366 + x57368;
        Fp x57370 = args[2][15 * steps + ((cycle - 1) & mask)];
        Fp x57371 = x57370 * x31;
        Fp x57372 = x57369 + x57371;
        Fp x57373 = args[2][16 * steps + ((cycle - 1) & mask)];
        Fp x57374 = x57373 * x16;
        Fp x57375 = x57372 + x57374;
        Fp x57376 = args[2][17 * steps + ((cycle - 1) & mask)];
        Fp x57377 = x57376 * x32;
        Fp x57378 = x57375 + x57377;
        Fp x57379 = args[2][18 * steps + ((cycle - 1) & mask)];
        Fp x57380 = x57379 * x17;
        Fp x57381 = x57378 + x57380;
        Fp x57382 = args[2][19 * steps + ((cycle - 1) & mask)];
        Fp x57383 = x57382 * x57;
        Fp x57384 = x57381 + x57383;
        Fp x57385 = args[2][20 * steps + ((cycle - 1) & mask)];
        Fp x57386 = x57385 * x18;
        Fp x57387 = x57384 + x57386;
        Fp x57388 = args[2][21 * steps + ((cycle - 1) & mask)];
        Fp x57389 = x57388 * x58;
        Fp x57390 = x57387 + x57389;
        Fp x57391 = args[2][22 * steps + ((cycle - 1) & mask)];
        Fp x57392 = x57391 * x19;
        Fp x57393 = x57390 + x57392;
        Fp x57394 = args[2][23 * steps + ((cycle - 1) & mask)];
        Fp x57395 = x57394 * x59;
        Fp x57396 = x57393 + x57395;
        Fp x57397 = args[2][24 * steps + ((cycle - 1) & mask)];
        Fp x57398 = x57397 * x20;
        Fp x57399 = x57396 + x57398;
        Fp x57400 = x57332 * x60;
        Fp x57401 = x57399 + x57400;
        Fp x57402 = args[2][26 * steps + ((cycle - 1) & mask)];
        Fp x57403 = args[2][27 * steps + ((cycle - 1) & mask)];
        Fp x57404 = x57403 * x1;
        Fp x57405 = x57402 + x57404;
        Fp x57406 = args[2][28 * steps + ((cycle - 1) & mask)];
        Fp x57407 = x57406 * x3;
        Fp x57408 = x57405 + x57407;
        Fp x57409 = args[2][29 * steps + ((cycle - 1) & mask)];
        Fp x57410 = x57409 * x6;
        Fp x57411 = x57408 + x57410;
        Fp x57412 = args[2][30 * steps + ((cycle - 1) & mask)];
        Fp x57413 = x57412 * x11;
        Fp x57414 = x57411 + x57413;
        Fp x57415 = args[2][31 * steps + ((cycle - 1) & mask)];
        Fp x57416 = x57415 * x27;
        Fp x57417 = x57414 + x57416;
        if (x57417 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.cpp:31");
        {
          host_args[0] = x72;
          host_args[1] = x57401;
          host_args[2] = x57329;
          host_args[3] = x57330;
          host(ctx, "memWrite", "", host_args.data(), 4, host_outs.data(), 0);
        }
        args[2][128 * steps + cycle] = x57401;
        Fp x57418 = x71 - x57332;
        args[2][131 * steps + cycle] = x57418;
        args[2][129 * steps + cycle] = x57329;
        args[2][130 * steps + cycle] = x57330;
      }
      Fp x57419 = x71 - x57331;
      if (x57419 != 0) {
        args[2][128 * steps + cycle] = x70;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x70;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x57420 = host_outs[0];
          Fp x57421 = host_outs[1];
          args[2][129 * steps + cycle] = x57420;
          args[2][130 * steps + cycle] = x57421;
        }
      }
      Fp x57422 = args[2][102 * steps + ((cycle - 1) & mask)];
      Fp x57423 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x57424 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x57425 = x57424 * x1;
      Fp x57426 = x57423 + x57425;
      Fp x57427 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x57428 = x57427 * x3;
      Fp x57429 = x57426 + x57428;
      Fp x57430 = x57422 * x57429;
      {
        Fp x57431 = (x57430 == 0) ? Fp(1) : Fp(0);
        args[2][16 * steps + cycle] = x57431;
        Fp x57432 = x57430 - x71;
        Fp x57433 = (x57432 == 0) ? Fp(1) : Fp(0);
        args[2][17 * steps + cycle] = x57433;
        Fp x57434 = x57430 - x1;
        Fp x57435 = (x57434 == 0) ? Fp(1) : Fp(0);
        args[2][18 * steps + cycle] = x57435;
        Fp x57436 = x57430 - x2;
        Fp x57437 = (x57436 == 0) ? Fp(1) : Fp(0);
        args[2][19 * steps + cycle] = x57437;
        Fp x57438 = x57430 - x3;
        Fp x57439 = (x57438 == 0) ? Fp(1) : Fp(0);
        args[2][20 * steps + cycle] = x57439;
        Fp x57440 = x57430 - x4;
        Fp x57441 = (x57440 == 0) ? Fp(1) : Fp(0);
        args[2][21 * steps + cycle] = x57441;
        Fp x57442 = x57430 - x5;
        Fp x57443 = (x57442 == 0) ? Fp(1) : Fp(0);
        args[2][22 * steps + cycle] = x57443;
        Fp x57444 = x57430 - x0;
        Fp x57445 = (x57444 == 0) ? Fp(1) : Fp(0);
        args[2][23 * steps + cycle] = x57445;
      }
      Fp x57446 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x57447 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x57448 = x57447 * x1;
      Fp x57449 = x57446 + x57448;
      Fp x57450 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x57451 = x57450 * x2;
      Fp x57452 = x57449 + x57451;
      Fp x57453 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x57454 = x57453 * x3;
      Fp x57455 = x57452 + x57454;
      Fp x57456 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x57457 = x57456 * x4;
      Fp x57458 = x57455 + x57457;
      Fp x57459 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x57460 = x57459 * x5;
      Fp x57461 = x57458 + x57460;
      Fp x57462 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x57463 = x57462 * x0;
      Fp x57464 = x57461 + x57463;
      Fp x57465 = x57464 - x57430;
      if (x57465 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      Fp x57466 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x57467 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x57468 = x57467 * x1;
      Fp x57469 = x57466 + x57468;
      Fp x57470 = x57422 * x57469;
      {
        Fp x57471 = (x57470 == 0) ? Fp(1) : Fp(0);
        args[2][24 * steps + cycle] = x57471;
        Fp x57472 = x57470 - x71;
        Fp x57473 = (x57472 == 0) ? Fp(1) : Fp(0);
        args[2][25 * steps + cycle] = x57473;
        Fp x57474 = x57470 - x1;
        Fp x57475 = (x57474 == 0) ? Fp(1) : Fp(0);
        args[2][26 * steps + cycle] = x57475;
        Fp x57476 = x57470 - x2;
        Fp x57477 = (x57476 == 0) ? Fp(1) : Fp(0);
        args[2][27 * steps + cycle] = x57477;
      }
      Fp x57478 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x57479 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x57480 = x57479 * x1;
      Fp x57481 = x57478 + x57480;
      Fp x57482 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x57483 = x57482 * x2;
      Fp x57484 = x57481 + x57483;
      Fp x57485 = x57484 - x57470;
      if (x57485 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      Fp x57486 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x57487 = x57446 * x57486;
      Fp x57488 = x71 - x57487;
      Fp x57489 = args[2][34 * steps + ((cycle - 3) & mask)];
      Fp x57490 = args[2][35 * steps + ((cycle - 3) & mask)];
      Fp x57491 = x57488 * x57489;
      Fp x57492 = x57488 * x57490;
      Fp x57493 = x57487 * x57329;
      Fp x57494 = x57487 * x57330;
      Fp x57495 = x57491 + x57493;
      Fp x57496 = x57492 + x57494;
      args[2][34 * steps + cycle] = x57495;
      args[2][35 * steps + cycle] = x57496;
      Fp x57497 = x57447 * x57486;
      Fp x57498 = x71 - x57497;
      Fp x57499 = args[2][36 * steps + ((cycle - 3) & mask)];
      Fp x57500 = args[2][37 * steps + ((cycle - 3) & mask)];
      Fp x57501 = x57498 * x57499;
      Fp x57502 = x57498 * x57500;
      Fp x57503 = x57497 * x57329;
      Fp x57504 = x57497 * x57330;
      Fp x57505 = x57501 + x57503;
      Fp x57506 = x57502 + x57504;
      args[2][36 * steps + cycle] = x57505;
      args[2][37 * steps + cycle] = x57506;
      Fp x57507 = x57450 * x57486;
      Fp x57508 = x71 - x57507;
      Fp x57509 = args[2][38 * steps + ((cycle - 3) & mask)];
      Fp x57510 = args[2][39 * steps + ((cycle - 3) & mask)];
      Fp x57511 = x57508 * x57509;
      Fp x57512 = x57508 * x57510;
      Fp x57513 = x57507 * x57329;
      Fp x57514 = x57507 * x57330;
      Fp x57515 = x57511 + x57513;
      Fp x57516 = x57512 + x57514;
      args[2][38 * steps + cycle] = x57515;
      args[2][39 * steps + cycle] = x57516;
      Fp x57517 = x57453 * x57486;
      Fp x57518 = x71 - x57517;
      Fp x57519 = args[2][40 * steps + ((cycle - 3) & mask)];
      Fp x57520 = args[2][41 * steps + ((cycle - 3) & mask)];
      Fp x57521 = x57518 * x57519;
      Fp x57522 = x57518 * x57520;
      Fp x57523 = x57517 * x57329;
      Fp x57524 = x57517 * x57330;
      Fp x57525 = x57521 + x57523;
      Fp x57526 = x57522 + x57524;
      args[2][40 * steps + cycle] = x57525;
      args[2][41 * steps + cycle] = x57526;
      Fp x57527 = x57456 * x57486;
      Fp x57528 = x71 - x57527;
      Fp x57529 = args[2][42 * steps + ((cycle - 3) & mask)];
      Fp x57530 = args[2][43 * steps + ((cycle - 3) & mask)];
      Fp x57531 = x57528 * x57529;
      Fp x57532 = x57528 * x57530;
      Fp x57533 = x57527 * x57329;
      Fp x57534 = x57527 * x57330;
      Fp x57535 = x57531 + x57533;
      Fp x57536 = x57532 + x57534;
      args[2][42 * steps + cycle] = x57535;
      args[2][43 * steps + cycle] = x57536;
      Fp x57537 = x57459 * x57486;
      Fp x57538 = x71 - x57537;
      Fp x57539 = args[2][44 * steps + ((cycle - 3) & mask)];
      Fp x57540 = args[2][45 * steps + ((cycle - 3) & mask)];
      Fp x57541 = x57538 * x57539;
      Fp x57542 = x57538 * x57540;
      Fp x57543 = x57537 * x57329;
      Fp x57544 = x57537 * x57330;
      Fp x57545 = x57541 + x57543;
      Fp x57546 = x57542 + x57544;
      args[2][44 * steps + cycle] = x57545;
      args[2][45 * steps + cycle] = x57546;
      Fp x57547 = x57462 * x57486;
      Fp x57548 = x71 - x57547;
      Fp x57549 = args[2][46 * steps + ((cycle - 3) & mask)];
      Fp x57550 = args[2][47 * steps + ((cycle - 3) & mask)];
      Fp x57551 = x57548 * x57549;
      Fp x57552 = x57548 * x57550;
      Fp x57553 = x57547 * x57329;
      Fp x57554 = x57547 * x57330;
      Fp x57555 = x57551 + x57553;
      Fp x57556 = x57552 + x57554;
      args[2][46 * steps + cycle] = x57555;
      args[2][47 * steps + cycle] = x57556;
      Fp x57557 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x57558 = x57557 * x57478;
      Fp x57559 = x71 - x57558;
      Fp x57560 = args[2][48 * steps + ((cycle - 3) & mask)];
      Fp x57561 = args[2][49 * steps + ((cycle - 3) & mask)];
      Fp x57562 = x57559 * x57560;
      Fp x57563 = x57559 * x57561;
      Fp x57564 = x57558 * x57329;
      Fp x57565 = x57558 * x57330;
      Fp x57566 = x57562 + x57564;
      Fp x57567 = x57563 + x57565;
      args[2][48 * steps + cycle] = x57566;
      args[2][49 * steps + cycle] = x57567;
      Fp x57568 = x57446 * x57478;
      Fp x57569 = x71 - x57568;
      Fp x57570 = args[2][50 * steps + ((cycle - 3) & mask)];
      Fp x57571 = args[2][51 * steps + ((cycle - 3) & mask)];
      Fp x57572 = x57569 * x57570;
      Fp x57573 = x57569 * x57571;
      Fp x57574 = x57568 * x57329;
      Fp x57575 = x57568 * x57330;
      Fp x57576 = x57572 + x57574;
      Fp x57577 = x57573 + x57575;
      args[2][50 * steps + cycle] = x57576;
      args[2][51 * steps + cycle] = x57577;
      Fp x57578 = x57447 * x57478;
      Fp x57579 = x71 - x57578;
      Fp x57580 = args[2][52 * steps + ((cycle - 3) & mask)];
      Fp x57581 = args[2][53 * steps + ((cycle - 3) & mask)];
      Fp x57582 = x57579 * x57580;
      Fp x57583 = x57579 * x57581;
      Fp x57584 = x57578 * x57329;
      Fp x57585 = x57578 * x57330;
      Fp x57586 = x57582 + x57584;
      Fp x57587 = x57583 + x57585;
      args[2][52 * steps + cycle] = x57586;
      args[2][53 * steps + cycle] = x57587;
      Fp x57588 = x57450 * x57478;
      Fp x57589 = x71 - x57588;
      Fp x57590 = args[2][54 * steps + ((cycle - 3) & mask)];
      Fp x57591 = args[2][55 * steps + ((cycle - 3) & mask)];
      Fp x57592 = x57589 * x57590;
      Fp x57593 = x57589 * x57591;
      Fp x57594 = x57588 * x57329;
      Fp x57595 = x57588 * x57330;
      Fp x57596 = x57592 + x57594;
      Fp x57597 = x57593 + x57595;
      args[2][54 * steps + cycle] = x57596;
      args[2][55 * steps + cycle] = x57597;
      Fp x57598 = x57453 * x57478;
      Fp x57599 = x71 - x57598;
      Fp x57600 = args[2][56 * steps + ((cycle - 3) & mask)];
      Fp x57601 = args[2][57 * steps + ((cycle - 3) & mask)];
      Fp x57602 = x57599 * x57600;
      Fp x57603 = x57599 * x57601;
      Fp x57604 = x57598 * x57329;
      Fp x57605 = x57598 * x57330;
      Fp x57606 = x57602 + x57604;
      Fp x57607 = x57603 + x57605;
      args[2][56 * steps + cycle] = x57606;
      args[2][57 * steps + cycle] = x57607;
      Fp x57608 = x57456 * x57478;
      Fp x57609 = x71 - x57608;
      Fp x57610 = args[2][58 * steps + ((cycle - 3) & mask)];
      Fp x57611 = args[2][59 * steps + ((cycle - 3) & mask)];
      Fp x57612 = x57609 * x57610;
      Fp x57613 = x57609 * x57611;
      Fp x57614 = x57608 * x57329;
      Fp x57615 = x57608 * x57330;
      Fp x57616 = x57612 + x57614;
      Fp x57617 = x57613 + x57615;
      args[2][58 * steps + cycle] = x57616;
      args[2][59 * steps + cycle] = x57617;
      Fp x57618 = x57459 * x57478;
      Fp x57619 = x71 - x57618;
      Fp x57620 = args[2][60 * steps + ((cycle - 3) & mask)];
      Fp x57621 = args[2][61 * steps + ((cycle - 3) & mask)];
      Fp x57622 = x57619 * x57620;
      Fp x57623 = x57619 * x57621;
      Fp x57624 = x57618 * x57329;
      Fp x57625 = x57618 * x57330;
      Fp x57626 = x57622 + x57624;
      Fp x57627 = x57623 + x57625;
      args[2][60 * steps + cycle] = x57626;
      args[2][61 * steps + cycle] = x57627;
      Fp x57628 = x57462 * x57478;
      Fp x57629 = x71 - x57628;
      Fp x57630 = args[2][62 * steps + ((cycle - 3) & mask)];
      Fp x57631 = args[2][63 * steps + ((cycle - 3) & mask)];
      Fp x57632 = x57629 * x57630;
      Fp x57633 = x57629 * x57631;
      Fp x57634 = x57628 * x57329;
      Fp x57635 = x57628 * x57330;
      Fp x57636 = x57632 + x57634;
      Fp x57637 = x57633 + x57635;
      args[2][62 * steps + cycle] = x57636;
      args[2][63 * steps + cycle] = x57637;
      Fp x57638 = x57557 * x57479;
      Fp x57639 = x71 - x57638;
      Fp x57640 = args[2][64 * steps + ((cycle - 3) & mask)];
      Fp x57641 = args[2][65 * steps + ((cycle - 3) & mask)];
      Fp x57642 = x57639 * x57640;
      Fp x57643 = x57639 * x57641;
      Fp x57644 = x57638 * x57329;
      Fp x57645 = x57638 * x57330;
      Fp x57646 = x57642 + x57644;
      Fp x57647 = x57643 + x57645;
      args[2][64 * steps + cycle] = x57646;
      args[2][65 * steps + cycle] = x57647;
      Fp x57648 = x57446 * x57479;
      Fp x57649 = x71 - x57648;
      Fp x57650 = args[2][66 * steps + ((cycle - 3) & mask)];
      Fp x57651 = args[2][67 * steps + ((cycle - 3) & mask)];
      Fp x57652 = x57649 * x57650;
      Fp x57653 = x57649 * x57651;
      Fp x57654 = x57648 * x57329;
      Fp x57655 = x57648 * x57330;
      Fp x57656 = x57652 + x57654;
      Fp x57657 = x57653 + x57655;
      args[2][66 * steps + cycle] = x57656;
      args[2][67 * steps + cycle] = x57657;
      Fp x57658 = x57447 * x57479;
      Fp x57659 = x71 - x57658;
      Fp x57660 = args[2][68 * steps + ((cycle - 3) & mask)];
      Fp x57661 = args[2][69 * steps + ((cycle - 3) & mask)];
      Fp x57662 = x57659 * x57660;
      Fp x57663 = x57659 * x57661;
      Fp x57664 = x57658 * x57329;
      Fp x57665 = x57658 * x57330;
      Fp x57666 = x57662 + x57664;
      Fp x57667 = x57663 + x57665;
      args[2][68 * steps + cycle] = x57666;
      args[2][69 * steps + cycle] = x57667;
      Fp x57668 = x57450 * x57479;
      Fp x57669 = x71 - x57668;
      Fp x57670 = args[2][70 * steps + ((cycle - 3) & mask)];
      Fp x57671 = args[2][71 * steps + ((cycle - 3) & mask)];
      Fp x57672 = x57669 * x57670;
      Fp x57673 = x57669 * x57671;
      Fp x57674 = x57668 * x57329;
      Fp x57675 = x57668 * x57330;
      Fp x57676 = x57672 + x57674;
      Fp x57677 = x57673 + x57675;
      args[2][70 * steps + cycle] = x57676;
      args[2][71 * steps + cycle] = x57677;
      Fp x57678 = x57453 * x57479;
      Fp x57679 = x71 - x57678;
      Fp x57680 = args[2][72 * steps + ((cycle - 3) & mask)];
      Fp x57681 = args[2][73 * steps + ((cycle - 3) & mask)];
      Fp x57682 = x57679 * x57680;
      Fp x57683 = x57679 * x57681;
      Fp x57684 = x57678 * x57329;
      Fp x57685 = x57678 * x57330;
      Fp x57686 = x57682 + x57684;
      Fp x57687 = x57683 + x57685;
      args[2][72 * steps + cycle] = x57686;
      args[2][73 * steps + cycle] = x57687;
      Fp x57688 = x57456 * x57479;
      Fp x57689 = x71 - x57688;
      Fp x57690 = args[2][74 * steps + ((cycle - 3) & mask)];
      Fp x57691 = args[2][75 * steps + ((cycle - 3) & mask)];
      Fp x57692 = x57689 * x57690;
      Fp x57693 = x57689 * x57691;
      Fp x57694 = x57688 * x57329;
      Fp x57695 = x57688 * x57330;
      Fp x57696 = x57692 + x57694;
      Fp x57697 = x57693 + x57695;
      args[2][74 * steps + cycle] = x57696;
      args[2][75 * steps + cycle] = x57697;
      Fp x57698 = x57459 * x57479;
      Fp x57699 = x71 - x57698;
      Fp x57700 = args[2][76 * steps + ((cycle - 3) & mask)];
      Fp x57701 = args[2][77 * steps + ((cycle - 3) & mask)];
      Fp x57702 = x57699 * x57700;
      Fp x57703 = x57699 * x57701;
      Fp x57704 = x57698 * x57329;
      Fp x57705 = x57698 * x57330;
      Fp x57706 = x57702 + x57704;
      Fp x57707 = x57703 + x57705;
      args[2][76 * steps + cycle] = x57706;
      args[2][77 * steps + cycle] = x57707;
      Fp x57708 = x57462 * x57479;
      Fp x57709 = x71 - x57708;
      Fp x57710 = args[2][78 * steps + ((cycle - 3) & mask)];
      Fp x57711 = args[2][79 * steps + ((cycle - 3) & mask)];
      Fp x57712 = x57709 * x57710;
      Fp x57713 = x57709 * x57711;
      Fp x57714 = x57708 * x57329;
      Fp x57715 = x57708 * x57330;
      Fp x57716 = x57712 + x57714;
      Fp x57717 = x57713 + x57715;
      args[2][78 * steps + cycle] = x57716;
      args[2][79 * steps + cycle] = x57717;
      Fp x57718 = x57557 * x57482;
      Fp x57719 = x71 - x57718;
      Fp x57720 = args[2][80 * steps + ((cycle - 3) & mask)];
      Fp x57721 = args[2][81 * steps + ((cycle - 3) & mask)];
      Fp x57722 = x57719 * x57720;
      Fp x57723 = x57719 * x57721;
      Fp x57724 = x57718 * x57329;
      Fp x57725 = x57718 * x57330;
      Fp x57726 = x57722 + x57724;
      Fp x57727 = x57723 + x57725;
      args[2][80 * steps + cycle] = x57726;
      args[2][81 * steps + cycle] = x57727;
      Fp x57728 = x57446 * x57482;
      Fp x57729 = x71 - x57728;
      Fp x57730 = args[2][82 * steps + ((cycle - 3) & mask)];
      Fp x57731 = args[2][83 * steps + ((cycle - 3) & mask)];
      Fp x57732 = x57729 * x57730;
      Fp x57733 = x57729 * x57731;
      Fp x57734 = x57728 * x57329;
      Fp x57735 = x57728 * x57330;
      Fp x57736 = x57732 + x57734;
      Fp x57737 = x57733 + x57735;
      args[2][82 * steps + cycle] = x57736;
      args[2][83 * steps + cycle] = x57737;
      Fp x57738 = x57447 * x57482;
      Fp x57739 = x71 - x57738;
      Fp x57740 = args[2][84 * steps + ((cycle - 3) & mask)];
      Fp x57741 = args[2][85 * steps + ((cycle - 3) & mask)];
      Fp x57742 = x57739 * x57740;
      Fp x57743 = x57739 * x57741;
      Fp x57744 = x57738 * x57329;
      Fp x57745 = x57738 * x57330;
      Fp x57746 = x57742 + x57744;
      Fp x57747 = x57743 + x57745;
      args[2][84 * steps + cycle] = x57746;
      args[2][85 * steps + cycle] = x57747;
      Fp x57748 = x57450 * x57482;
      Fp x57749 = x71 - x57748;
      Fp x57750 = args[2][86 * steps + ((cycle - 3) & mask)];
      Fp x57751 = args[2][87 * steps + ((cycle - 3) & mask)];
      Fp x57752 = x57749 * x57750;
      Fp x57753 = x57749 * x57751;
      Fp x57754 = x57748 * x57329;
      Fp x57755 = x57748 * x57330;
      Fp x57756 = x57752 + x57754;
      Fp x57757 = x57753 + x57755;
      args[2][86 * steps + cycle] = x57756;
      args[2][87 * steps + cycle] = x57757;
      Fp x57758 = x57453 * x57482;
      Fp x57759 = x71 - x57758;
      Fp x57760 = args[2][88 * steps + ((cycle - 3) & mask)];
      Fp x57761 = args[2][89 * steps + ((cycle - 3) & mask)];
      Fp x57762 = x57759 * x57760;
      Fp x57763 = x57759 * x57761;
      Fp x57764 = x57758 * x57329;
      Fp x57765 = x57758 * x57330;
      Fp x57766 = x57762 + x57764;
      Fp x57767 = x57763 + x57765;
      args[2][88 * steps + cycle] = x57766;
      args[2][89 * steps + cycle] = x57767;
      Fp x57768 = x57456 * x57482;
      Fp x57769 = x71 - x57768;
      Fp x57770 = args[2][90 * steps + ((cycle - 3) & mask)];
      Fp x57771 = args[2][91 * steps + ((cycle - 3) & mask)];
      Fp x57772 = x57769 * x57770;
      Fp x57773 = x57769 * x57771;
      Fp x57774 = x57768 * x57329;
      Fp x57775 = x57768 * x57330;
      Fp x57776 = x57772 + x57774;
      Fp x57777 = x57773 + x57775;
      args[2][90 * steps + cycle] = x57776;
      args[2][91 * steps + cycle] = x57777;
      Fp x57778 = x57459 * x57482;
      Fp x57779 = x71 - x57778;
      Fp x57780 = args[2][92 * steps + ((cycle - 3) & mask)];
      Fp x57781 = args[2][93 * steps + ((cycle - 3) & mask)];
      Fp x57782 = x57779 * x57780;
      Fp x57783 = x57779 * x57781;
      Fp x57784 = x57778 * x57329;
      Fp x57785 = x57778 * x57330;
      Fp x57786 = x57782 + x57784;
      Fp x57787 = x57783 + x57785;
      args[2][92 * steps + cycle] = x57786;
      args[2][93 * steps + cycle] = x57787;
      Fp x57788 = x57462 * x57482;
      Fp x57789 = x71 - x57788;
      Fp x57790 = args[2][94 * steps + ((cycle - 3) & mask)];
      Fp x57791 = args[2][95 * steps + ((cycle - 3) & mask)];
      Fp x57792 = x57789 * x57790;
      Fp x57793 = x57789 * x57791;
      Fp x57794 = x57788 * x57329;
      Fp x57795 = x57788 * x57330;
      Fp x57796 = x57792 + x57794;
      Fp x57797 = x57793 + x57795;
      args[2][94 * steps + cycle] = x57796;
      args[2][95 * steps + cycle] = x57797;
      {
        args[2][30 * steps + cycle] = x70;
        args[2][31 * steps + cycle] = x70;
      }
      Fp x57798 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x57799 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x57800 = x57799 * x3;
      Fp x57801 = x57798 + x57800;
      Fp x57802 = x70 - x57801;
      Fp x57803 = x57802 * x25;
      if (x57803 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.cpp:42");
      Fp x57804 = args[2][104 * steps + ((cycle - 1) & mask)];
      {
        Fp x57805 = Fp(x57804.asUInt32() & x2.asUInt32());
        args[2][0 * steps + cycle] = x57805;
        Fp x57806 = x57804 - x57805;
        Fp x57807 = x57806 * x10;
        Fp x57808 = Fp(x57807.asUInt32() & x2.asUInt32());
        args[2][1 * steps + cycle] = x57808;
        Fp x57809 = x57807 - x57808;
        Fp x57810 = x57809 * x10;
        Fp x57811 = Fp(x57810.asUInt32() & x2.asUInt32());
        args[2][2 * steps + cycle] = x57811;
        Fp x57812 = x57810 - x57811;
        Fp x57813 = x57812 * x10;
        Fp x57814 = Fp(x57813.asUInt32() & x2.asUInt32());
        args[2][3 * steps + cycle] = x57814;
        Fp x57815 = x57813 - x57814;
        Fp x57816 = x57815 * x10;
        Fp x57817 = Fp(x57816.asUInt32() & x2.asUInt32());
        args[2][4 * steps + cycle] = x57817;
        Fp x57818 = x57816 - x57817;
        Fp x57819 = x57818 * x10;
        Fp x57820 = Fp(x57819.asUInt32() & x2.asUInt32());
        args[2][5 * steps + cycle] = x57820;
        Fp x57821 = x57819 - x57820;
        Fp x57822 = x57821 * x10;
        Fp x57823 = Fp(x57822.asUInt32() & x2.asUInt32());
        args[2][6 * steps + cycle] = x57823;
        Fp x57824 = x57822 - x57823;
        Fp x57825 = x57824 * x10;
        Fp x57826 = Fp(x57825.asUInt32() & x2.asUInt32());
        args[2][7 * steps + cycle] = x57826;
      }
      Fp x57827 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x57828 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x57829 = x57828 * x3;
      Fp x57830 = x57827 + x57829;
      Fp x57831 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x57832 = x57831 * x11;
      Fp x57833 = x57830 + x57832;
      Fp x57834 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x57835 = x57834 * x12;
      Fp x57836 = x57833 + x57835;
      Fp x57837 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x57838 = x57837 * x13;
      Fp x57839 = x57836 + x57838;
      Fp x57840 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x57841 = x57840 * x14;
      Fp x57842 = x57839 + x57841;
      Fp x57843 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x57844 = x57843 * x15;
      Fp x57845 = x57842 + x57844;
      Fp x57846 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x57847 = x57846 * x16;
      Fp x57848 = x57845 + x57847;
      Fp x57849 = x57804 - x57848;
      Fp x57850 = x57849 * x33;
      args[2][28 * steps + cycle] = x57850;
      Fp x57851 = args[2][105 * steps + ((cycle - 1) & mask)];
      Fp x57852 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x57853 = x57851 + x57852;
      {
        Fp x57854 = Fp(x57853.asUInt32() & x2.asUInt32());
        args[2][8 * steps + cycle] = x57854;
        Fp x57855 = x57853 - x57854;
        Fp x57856 = x57855 * x10;
        Fp x57857 = Fp(x57856.asUInt32() & x2.asUInt32());
        args[2][9 * steps + cycle] = x57857;
        Fp x57858 = x57856 - x57857;
        Fp x57859 = x57858 * x10;
        Fp x57860 = Fp(x57859.asUInt32() & x2.asUInt32());
        args[2][10 * steps + cycle] = x57860;
        Fp x57861 = x57859 - x57860;
        Fp x57862 = x57861 * x10;
        Fp x57863 = Fp(x57862.asUInt32() & x2.asUInt32());
        args[2][11 * steps + cycle] = x57863;
        Fp x57864 = x57862 - x57863;
        Fp x57865 = x57864 * x10;
        Fp x57866 = Fp(x57865.asUInt32() & x2.asUInt32());
        args[2][12 * steps + cycle] = x57866;
        Fp x57867 = x57865 - x57866;
        Fp x57868 = x57867 * x10;
        Fp x57869 = Fp(x57868.asUInt32() & x2.asUInt32());
        args[2][13 * steps + cycle] = x57869;
        Fp x57870 = x57868 - x57869;
        Fp x57871 = x57870 * x10;
        Fp x57872 = Fp(x57871.asUInt32() & x2.asUInt32());
        args[2][14 * steps + cycle] = x57872;
        Fp x57873 = x57871 - x57872;
        Fp x57874 = x57873 * x10;
        Fp x57875 = Fp(x57874.asUInt32() & x2.asUInt32());
        args[2][15 * steps + cycle] = x57875;
      }
      Fp x57876 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x57877 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x57878 = x57877 * x3;
      Fp x57879 = x57876 + x57878;
      Fp x57880 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x57881 = x57880 * x11;
      Fp x57882 = x57879 + x57881;
      Fp x57883 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x57884 = x57883 * x12;
      Fp x57885 = x57882 + x57884;
      Fp x57886 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x57887 = x57886 * x13;
      Fp x57888 = x57885 + x57887;
      Fp x57889 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x57890 = x57889 * x14;
      Fp x57891 = x57888 + x57890;
      Fp x57892 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x57893 = x57892 * x15;
      Fp x57894 = x57891 + x57893;
      Fp x57895 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x57896 = x57895 * x16;
      Fp x57897 = x57894 + x57896;
      Fp x57898 = x57853 - x57897;
      Fp x57899 = x57898 * x33;
      args[2][29 * steps + cycle] = x57899;
      Fp x57900 = args[2][1 * steps + ((cycle - 3) & mask)];
      Fp x57901 = args[2][2 * steps + ((cycle - 3) & mask)];
      Fp x57902 = x57901 * x3;
      Fp x57903 = x57900 + x57902;
      Fp x57904 = args[2][3 * steps + ((cycle - 3) & mask)];
      Fp x57905 = x57904 * x11;
      Fp x57906 = x57903 + x57905;
      Fp x57907 = args[2][4 * steps + ((cycle - 3) & mask)];
      Fp x57908 = x57907 * x12;
      Fp x57909 = x57906 + x57908;
      Fp x57910 = args[2][5 * steps + ((cycle - 3) & mask)];
      Fp x57911 = x57910 * x13;
      Fp x57912 = x57909 + x57911;
      Fp x57913 = args[2][6 * steps + ((cycle - 3) & mask)];
      Fp x57914 = x57913 * x14;
      Fp x57915 = x57912 + x57914;
      Fp x57916 = args[2][7 * steps + ((cycle - 3) & mask)];
      Fp x57917 = x57916 * x15;
      Fp x57918 = x57915 + x57917;
      Fp x57919 = args[2][8 * steps + ((cycle - 3) & mask)];
      Fp x57920 = x57919 * x16;
      Fp x57921 = x57918 + x57920;
      Fp x57922 = args[2][9 * steps + ((cycle - 3) & mask)];
      Fp x57923 = x57922 * x17;
      Fp x57924 = x57921 + x57923;
      Fp x57925 = args[2][10 * steps + ((cycle - 3) & mask)];
      Fp x57926 = x57925 * x18;
      Fp x57927 = x57924 + x57926;
      Fp x57928 = args[2][11 * steps + ((cycle - 3) & mask)];
      Fp x57929 = x57928 * x19;
      Fp x57930 = x57927 + x57929;
      Fp x57931 = args[2][12 * steps + ((cycle - 3) & mask)];
      Fp x57932 = x57931 * x20;
      Fp x57933 = x57930 + x57932;
      Fp x57934 = x57933 * x3;
      Fp x57935 = x57466 * x6;
      Fp x57936 = x57429 + x57935;
      Fp x57937 = x57467 * x11;
      Fp x57938 = x57936 + x57937;
      Fp x57939 = x57831 * x3;
      Fp x57940 = x57828 + x57939;
      Fp x57941 = x57834 * x11;
      Fp x57942 = x57940 + x57941;
      Fp x57943 = x57837 * x12;
      Fp x57944 = x57942 + x57943;
      Fp x57945 = x57840 * x13;
      Fp x57946 = x57944 + x57945;
      Fp x57947 = x57843 * x14;
      Fp x57948 = x57946 + x57947;
      Fp x57949 = x57846 * x15;
      Fp x57950 = x57948 + x57949;
      Fp x57951 = x57876 * x16;
      Fp x57952 = x57950 + x57951;
      Fp x57953 = x57877 * x17;
      Fp x57954 = x57952 + x57953;
      Fp x57955 = x57880 * x18;
      Fp x57956 = x57954 + x57955;
      Fp x57957 = x57883 * x19;
      Fp x57958 = x57956 + x57957;
      Fp x57959 = x57886 * x20;
      Fp x57960 = x57958 + x57959;
      Fp x57961 = x57960 * x3;
      host_args[0] = x72;
      host_args[1] = x57934;
      host_args[2] = x57330;
      host_args[3] = x57329;
      host_args[4] = x57938;
      host_args[5] = x57961;
      host(ctx, "log", "C%u: pc: %08x Final: 0x%04x%04x -> r%u, next: %08x", host_args.data(), 6, host_outs.data(), 0);
      Fp x57962 = x57557 - x71;
      Fp x57963 = x57557 * x57962;
      if (x57963 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57964 = x57446 - x71;
      Fp x57965 = x57446 * x57964;
      if (x57965 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57966 = x57447 - x71;
      Fp x57967 = x57447 * x57966;
      if (x57967 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57968 = x57450 - x71;
      Fp x57969 = x57450 * x57968;
      if (x57969 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57970 = x57453 - x71;
      Fp x57971 = x57453 * x57970;
      if (x57971 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57972 = x57456 - x71;
      Fp x57973 = x57456 * x57972;
      if (x57973 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57974 = x57459 - x71;
      Fp x57975 = x57459 * x57974;
      if (x57975 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57976 = x57462 - x71;
      Fp x57977 = x57462 * x57976;
      if (x57977 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57978 = x57557 + x57446;
      Fp x57979 = x57978 + x57447;
      Fp x57980 = x57979 + x57450;
      Fp x57981 = x57980 + x57453;
      Fp x57982 = x57981 + x57456;
      Fp x57983 = x57982 + x57459;
      Fp x57984 = x57983 + x57462;
      Fp x57985 = x57984 - x71;
      if (x57985 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:32");
      Fp x57986 = x57486 - x71;
      Fp x57987 = x57486 * x57986;
      if (x57987 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
      Fp x57988 = x57478 - x71;
      Fp x57989 = x57478 * x57988;
      if (x57989 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
      Fp x57990 = x57479 - x71;
      Fp x57991 = x57479 * x57990;
      if (x57991 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
      Fp x57992 = x57482 - x71;
      Fp x57993 = x57482 * x57992;
      if (x57993 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
      Fp x57994 = x57486 + x57478;
      Fp x57995 = x57994 + x57479;
      Fp x57996 = x57995 + x57482;
      Fp x57997 = x57996 - x71;
      if (x57997 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:33");
      Fp x57998 = x57852 - x71;
      Fp x57999 = x57852 * x57998;
      if (x57999 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:34");
      Fp x58000 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x58001 = x58000 - x71;
      Fp x58002 = x58000 * x58001;
      if (x58002 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/final_cycle.h:35");
    }
    Fp x58003 = args[2][140 * steps + ((cycle - 0) & mask)];
    if (x58003 != 0) {
      host_args[0] = x72;
      host(ctx, "log", "C%u: Sha Sync", host_args.data(), 1, host_outs.data(), 0);
      args[2][128 * steps + cycle] = x70;
      args[2][131 * steps + cycle] = x70;
      {
        host_args[0] = x72;
        host_args[1] = x70;
        host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
        Fp x58004 = host_outs[0];
        Fp x58005 = host_outs[1];
        args[2][129 * steps + cycle] = x58004;
        args[2][130 * steps + cycle] = x58005;
      }
      args[2][122 * steps + cycle] = x68;
      args[2][123 * steps + cycle] = x70;
      args[2][124 * steps + cycle] = x70;
      args[2][125 * steps + cycle] = x70;
      args[2][126 * steps + cycle] = x70;
      Fp x58006 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x58007 = x58006 - x71;
      Fp x58008 = x58006 * x58007;
      if (x58008 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58009 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x58010 = x58009 - x71;
      Fp x58011 = x58009 * x58010;
      if (x58011 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58012 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x58013 = x58012 - x71;
      Fp x58014 = x58012 * x58013;
      if (x58014 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58015 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x58016 = x58015 - x71;
      Fp x58017 = x58015 * x58016;
      if (x58017 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58018 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x58019 = x58018 - x71;
      Fp x58020 = x58018 * x58019;
      if (x58020 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58021 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x58022 = x58021 - x71;
      Fp x58023 = x58021 * x58022;
      if (x58023 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58024 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x58025 = x58024 - x71;
      Fp x58026 = x58024 * x58025;
      if (x58026 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58027 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x58028 = x58027 - x71;
      Fp x58029 = x58027 * x58028;
      if (x58029 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58030 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x58031 = x58030 - x71;
      Fp x58032 = x58030 * x58031;
      if (x58032 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58033 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x58034 = x58033 - x71;
      Fp x58035 = x58033 * x58034;
      if (x58035 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58036 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x58037 = x58036 - x71;
      Fp x58038 = x58036 * x58037;
      if (x58038 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58039 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x58040 = x58039 - x71;
      Fp x58041 = x58039 * x58040;
      if (x58041 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58042 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x58043 = x58042 - x71;
      Fp x58044 = x58042 * x58043;
      if (x58044 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58045 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x58046 = x58045 - x71;
      Fp x58047 = x58045 * x58046;
      if (x58047 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58048 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x58049 = x58048 - x71;
      Fp x58050 = x58048 * x58049;
      if (x58050 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58051 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x58052 = x58051 - x71;
      Fp x58053 = x58051 * x58052;
      if (x58053 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58054 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x58055 = x58054 - x71;
      Fp x58056 = x58054 * x58055;
      if (x58056 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58057 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x58058 = x58057 - x71;
      Fp x58059 = x58057 * x58058;
      if (x58059 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58060 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x58061 = x58060 - x71;
      Fp x58062 = x58060 * x58061;
      if (x58062 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58063 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x58064 = x58063 - x71;
      Fp x58065 = x58063 * x58064;
      if (x58065 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58066 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x58067 = x58066 - x71;
      Fp x58068 = x58066 * x58067;
      if (x58068 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58069 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x58070 = x58069 - x71;
      Fp x58071 = x58069 * x58070;
      if (x58071 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58072 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x58073 = x58072 - x71;
      Fp x58074 = x58072 * x58073;
      if (x58074 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58075 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x58076 = x58075 - x71;
      Fp x58077 = x58075 * x58076;
      if (x58077 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58078 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x58079 = x58078 - x71;
      Fp x58080 = x58078 * x58079;
      if (x58080 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58081 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x58082 = x58081 - x71;
      Fp x58083 = x58081 * x58082;
      if (x58083 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58084 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x58085 = x58084 - x71;
      Fp x58086 = x58084 * x58085;
      if (x58086 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58087 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x58088 = x58087 - x71;
      Fp x58089 = x58087 * x58088;
      if (x58089 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58090 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x58091 = x58090 - x71;
      Fp x58092 = x58090 * x58091;
      if (x58092 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58093 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x58094 = x58093 - x71;
      Fp x58095 = x58093 * x58094;
      if (x58095 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58096 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x58097 = x58096 - x71;
      Fp x58098 = x58096 * x58097;
      if (x58098 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58099 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x58100 = x58099 - x71;
      Fp x58101 = x58099 * x58100;
      if (x58101 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58102 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x58103 = x58102 - x71;
      Fp x58104 = x58102 * x58103;
      if (x58104 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58105 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x58106 = x58105 - x71;
      Fp x58107 = x58105 * x58106;
      if (x58107 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58108 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x58109 = x58108 - x71;
      Fp x58110 = x58108 * x58109;
      if (x58110 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58111 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x58112 = x58111 - x71;
      Fp x58113 = x58111 * x58112;
      if (x58113 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58114 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x58115 = x58114 - x71;
      Fp x58116 = x58114 * x58115;
      if (x58116 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58117 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x58118 = x58117 - x71;
      Fp x58119 = x58117 * x58118;
      if (x58119 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58120 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x58121 = x58120 - x71;
      Fp x58122 = x58120 * x58121;
      if (x58122 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58123 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x58124 = x58123 - x71;
      Fp x58125 = x58123 * x58124;
      if (x58125 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58126 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x58127 = x58126 - x71;
      Fp x58128 = x58126 * x58127;
      if (x58128 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58129 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x58130 = x58129 - x71;
      Fp x58131 = x58129 * x58130;
      if (x58131 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58132 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x58133 = x58132 - x71;
      Fp x58134 = x58132 * x58133;
      if (x58134 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58135 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x58136 = x58135 - x71;
      Fp x58137 = x58135 * x58136;
      if (x58137 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58138 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x58139 = x58138 - x71;
      Fp x58140 = x58138 * x58139;
      if (x58140 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58141 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x58142 = x58141 - x71;
      Fp x58143 = x58141 * x58142;
      if (x58143 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58144 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x58145 = x58144 - x71;
      Fp x58146 = x58144 * x58145;
      if (x58146 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58147 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x58148 = x58147 - x71;
      Fp x58149 = x58147 * x58148;
      if (x58149 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58150 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x58151 = x58150 - x71;
      Fp x58152 = x58150 * x58151;
      if (x58152 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58153 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x58154 = x58153 - x71;
      Fp x58155 = x58153 * x58154;
      if (x58155 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58156 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x58157 = x58156 - x71;
      Fp x58158 = x58156 * x58157;
      if (x58158 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58159 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x58160 = x58159 - x71;
      Fp x58161 = x58159 * x58160;
      if (x58161 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58162 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x58163 = x58162 - x71;
      Fp x58164 = x58162 * x58163;
      if (x58164 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58165 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x58166 = x58165 - x71;
      Fp x58167 = x58165 * x58166;
      if (x58167 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58168 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x58169 = x58168 - x71;
      Fp x58170 = x58168 * x58169;
      if (x58170 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58171 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x58172 = x58171 - x71;
      Fp x58173 = x58171 * x58172;
      if (x58173 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58174 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x58175 = x58174 - x71;
      Fp x58176 = x58174 * x58175;
      if (x58176 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58177 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x58178 = x58177 - x71;
      Fp x58179 = x58177 * x58178;
      if (x58179 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58180 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x58181 = x58180 - x71;
      Fp x58182 = x58180 * x58181;
      if (x58182 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58183 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x58184 = x58183 - x71;
      Fp x58185 = x58183 * x58184;
      if (x58185 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58186 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x58187 = x58186 - x71;
      Fp x58188 = x58186 * x58187;
      if (x58188 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58189 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x58190 = x58189 - x71;
      Fp x58191 = x58189 * x58190;
      if (x58191 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58192 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x58193 = x58192 - x71;
      Fp x58194 = x58192 * x58193;
      if (x58194 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58195 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x58196 = x58195 - x71;
      Fp x58197 = x58195 * x58196;
      if (x58197 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58198 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x58199 = x58198 - x71;
      Fp x58200 = x58198 * x58199;
      if (x58200 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58201 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x58202 = x58201 - x71;
      Fp x58203 = x58201 * x58202;
      if (x58203 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58204 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x58205 = x58204 - x71;
      Fp x58206 = x58204 * x58205;
      if (x58206 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58207 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x58208 = x58207 - x71;
      Fp x58209 = x58207 * x58208;
      if (x58209 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58210 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x58211 = x58210 - x71;
      Fp x58212 = x58210 * x58211;
      if (x58212 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58213 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x58214 = x58213 - x71;
      Fp x58215 = x58213 * x58214;
      if (x58215 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58216 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x58217 = x58216 - x71;
      Fp x58218 = x58216 * x58217;
      if (x58218 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58219 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x58220 = x58219 - x71;
      Fp x58221 = x58219 * x58220;
      if (x58221 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58222 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x58223 = x58222 - x71;
      Fp x58224 = x58222 * x58223;
      if (x58224 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58225 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x58226 = x58225 - x71;
      Fp x58227 = x58225 * x58226;
      if (x58227 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58228 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x58229 = x58228 - x71;
      Fp x58230 = x58228 * x58229;
      if (x58230 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58231 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x58232 = x58231 - x71;
      Fp x58233 = x58231 * x58232;
      if (x58233 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58234 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x58235 = x58234 - x71;
      Fp x58236 = x58234 * x58235;
      if (x58236 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58237 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x58238 = x58237 - x71;
      Fp x58239 = x58237 * x58238;
      if (x58239 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58240 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x58241 = x58240 - x71;
      Fp x58242 = x58240 * x58241;
      if (x58242 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58243 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x58244 = x58243 - x71;
      Fp x58245 = x58243 * x58244;
      if (x58245 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58246 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x58247 = x58246 - x71;
      Fp x58248 = x58246 * x58247;
      if (x58248 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58249 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x58250 = x58249 - x71;
      Fp x58251 = x58249 * x58250;
      if (x58251 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58252 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x58253 = x58252 - x71;
      Fp x58254 = x58252 * x58253;
      if (x58254 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58255 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x58256 = x58255 - x71;
      Fp x58257 = x58255 * x58256;
      if (x58257 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58258 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x58259 = x58258 - x71;
      Fp x58260 = x58258 * x58259;
      if (x58260 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58261 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x58262 = x58261 - x71;
      Fp x58263 = x58261 * x58262;
      if (x58263 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58264 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x58265 = x58264 - x71;
      Fp x58266 = x58264 * x58265;
      if (x58266 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58267 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x58268 = x58267 - x71;
      Fp x58269 = x58267 * x58268;
      if (x58269 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58270 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x58271 = x58270 - x71;
      Fp x58272 = x58270 * x58271;
      if (x58272 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58273 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x58274 = x58273 - x71;
      Fp x58275 = x58273 * x58274;
      if (x58275 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58276 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x58277 = x58276 - x71;
      Fp x58278 = x58276 * x58277;
      if (x58278 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58279 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x58280 = x58279 - x71;
      Fp x58281 = x58279 * x58280;
      if (x58281 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58282 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x58283 = x58282 - x71;
      Fp x58284 = x58282 * x58283;
      if (x58284 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58285 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x58286 = x58285 - x71;
      Fp x58287 = x58285 * x58286;
      if (x58287 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58288 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x58289 = x58288 - x71;
      Fp x58290 = x58288 * x58289;
      if (x58290 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58291 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x58292 = x58291 - x71;
      Fp x58293 = x58291 * x58292;
      if (x58293 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58294 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x58295 = x58294 - x71;
      Fp x58296 = x58294 * x58295;
      if (x58296 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58297 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x58298 = x58297 - x71;
      Fp x58299 = x58297 * x58298;
      if (x58299 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58300 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x58301 = x58300 - x71;
      Fp x58302 = x58300 * x58301;
      if (x58302 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x58303 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x58304 = x58303 - x71;
      Fp x58305 = x58303 * x58304;
      if (x58305 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
    }
    Fp x58306 = args[2][141 * steps + ((cycle - 0) & mask)];
    if (x58306 != 0) {
      Fp x58307 = args[0][10 * steps + ((cycle - 0) & mask)];
      {
        Fp x58308 = (x58307 == 0) ? Fp(1) : Fp(0);
        args[2][100 * steps + cycle] = x58308;
        Fp x58309 = x58307 - x71;
        Fp x58310 = (x58309 == 0) ? Fp(1) : Fp(0);
        args[2][101 * steps + cycle] = x58310;
        Fp x58311 = x58307 - x1;
        Fp x58312 = (x58311 == 0) ? Fp(1) : Fp(0);
        args[2][102 * steps + cycle] = x58312;
        Fp x58313 = x58307 - x2;
        Fp x58314 = (x58313 == 0) ? Fp(1) : Fp(0);
        args[2][103 * steps + cycle] = x58314;
        Fp x58315 = x58307 - x3;
        Fp x58316 = (x58315 == 0) ? Fp(1) : Fp(0);
        args[2][104 * steps + cycle] = x58316;
        Fp x58317 = x58307 - x4;
        Fp x58318 = (x58317 == 0) ? Fp(1) : Fp(0);
        args[2][105 * steps + cycle] = x58318;
        Fp x58319 = x58307 - x5;
        Fp x58320 = (x58319 == 0) ? Fp(1) : Fp(0);
        args[2][106 * steps + cycle] = x58320;
        Fp x58321 = x58307 - x0;
        Fp x58322 = (x58321 == 0) ? Fp(1) : Fp(0);
        args[2][107 * steps + cycle] = x58322;
      }
      Fp x58323 = args[2][101 * steps + ((cycle - 0) & mask)];
      Fp x58324 = args[2][102 * steps + ((cycle - 0) & mask)];
      Fp x58325 = x58324 * x1;
      Fp x58326 = x58323 + x58325;
      Fp x58327 = args[2][103 * steps + ((cycle - 0) & mask)];
      Fp x58328 = x58327 * x2;
      Fp x58329 = x58326 + x58328;
      Fp x58330 = args[2][104 * steps + ((cycle - 0) & mask)];
      Fp x58331 = x58330 * x3;
      Fp x58332 = x58329 + x58331;
      Fp x58333 = args[2][105 * steps + ((cycle - 0) & mask)];
      Fp x58334 = x58333 * x4;
      Fp x58335 = x58332 + x58334;
      Fp x58336 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x58337 = x58336 * x5;
      Fp x58338 = x58335 + x58337;
      Fp x58339 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x58340 = x58339 * x0;
      Fp x58341 = x58338 + x58340;
      Fp x58342 = x58341 - x58307;
      if (x58342 != 0) throw std::runtime_error("eqz failed at: circuits/rv32im-legacy/port.cpp:211");
      host_args[0] = x72;
      host(ctx, "log", "C%u: Sha Control", host_args.data(), 1, host_outs.data(), 0);
      Fp x58343 = args[2][100 * steps + ((cycle - 0) & mask)];
      if (x58343 != 0) {
        Fp x58344 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x58344;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x58344;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x58345 = host_outs[0];
          Fp x58346 = host_outs[1];
          args[2][129 * steps + cycle] = x58345;
          args[2][130 * steps + cycle] = x58346;
        }
        Fp x58347 = args[2][123 * steps + ((cycle - 1) & mask)];
        {
          Fp x58348 = (x58347 == 0) ? Fp(1) : Fp(0);
          Fp x58349 = x71 - x58348;
          args[2][108 * steps + cycle] = x58349;
          Fp x58350 = inv(x58347);
          args[2][109 * steps + cycle] = x58350;
        }
        Fp x58351 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x58352 = x58347 * x58351;
        Fp x58353 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x58354 = x58352 - x58353;
        if (x58354 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x58355 = x71 - x58353;
        Fp x58356 = x58355 * x58347;
        if (x58356 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        if (x58353 != 0) {
          args[2][122 * steps + cycle] = x58344;
          Fp x58357 = args[2][96 * steps + ((cycle - 1) & mask)];
          args[2][96 * steps + cycle] = x58357;
          Fp x58358 = x58347 - x71;
          args[2][123 * steps + cycle] = x58358;
          host(ctx, "log", "  INIT0, cont", host_args.data(), 0, host_outs.data(), 0);
          args[2][97 * steps + cycle] = x71;
        }
        if (x58355 != 0) {
          Fp x58359 = args[2][128 * steps + ((cycle - 0) & mask)];
          Fp x58360 = x58359 * x3;
          Fp x58361 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x58362 = args[2][129 * steps + ((cycle - 0) & mask)];
          host_args[0] = x58360;
          host_args[1] = x58361;
          host_args[2] = x58362;
          host(ctx, "log", "  INIT0, load, addr = %x, val = 0x%04x%04x", host_args.data(), 3, host_outs.data(), 0);
          Fp x58363 = x58344 + x71;
          args[2][122 * steps + cycle] = x58363;
          args[2][96 * steps + cycle] = x58361;
          args[2][123 * steps + cycle] = x58362;
          args[2][97 * steps + cycle] = x70;
        }
        Fp x58364 = args[2][124 * steps + ((cycle - 1) & mask)];
        args[2][124 * steps + cycle] = x58364;
        Fp x58365 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x58365;
        Fp x58366 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][126 * steps + cycle] = x58366;
        Fp x58367 = args[2][123 * steps + ((cycle - 0) & mask)];
        {
          Fp x58368 = (x58367 == 0) ? Fp(1) : Fp(0);
          Fp x58369 = x71 - x58368;
          args[2][110 * steps + cycle] = x58369;
          Fp x58370 = inv(x58367);
          args[2][111 * steps + cycle] = x58370;
        }
        Fp x58371 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x58372 = x58367 * x58371;
        Fp x58373 = args[2][110 * steps + ((cycle - 0) & mask)];
        Fp x58374 = x58372 - x58373;
        if (x58374 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x58375 = x71 - x58373;
        Fp x58376 = x58375 * x58367;
        if (x58376 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        if (x58373 != 0) {
          args[2][127 * steps + cycle] = x7;
        }
        if (x58375 != 0) {
          args[2][127 * steps + cycle] = x9;
        }
        Fp x58377 = args[2][96 * steps + ((cycle - 0) & mask)];
        Fp x58378 = x71 - x58377;
        Fp x58379 = x58378 * x58353;
        args[2][98 * steps + cycle] = x58379;
        Fp x58380 = args[2][98 * steps + ((cycle - 0) & mask)];
        if (x58380 != 0) {
          Fp x58381 = args[2][0 * steps + ((cycle - 4) & mask)];
          Fp x58382 = args[2][1 * steps + ((cycle - 4) & mask)];
          Fp x58383 = x58382 * x1;
          Fp x58384 = x58381 + x58383;
          Fp x58385 = args[2][2 * steps + ((cycle - 4) & mask)];
          Fp x58386 = x58385 * x3;
          Fp x58387 = x58384 + x58386;
          Fp x58388 = args[2][3 * steps + ((cycle - 4) & mask)];
          Fp x58389 = x58388 * x6;
          Fp x58390 = x58387 + x58389;
          Fp x58391 = args[2][4 * steps + ((cycle - 4) & mask)];
          Fp x58392 = x58391 * x11;
          Fp x58393 = x58390 + x58392;
          Fp x58394 = args[2][5 * steps + ((cycle - 4) & mask)];
          Fp x58395 = x58394 * x27;
          Fp x58396 = x58393 + x58395;
          Fp x58397 = args[2][6 * steps + ((cycle - 4) & mask)];
          Fp x58398 = x58397 * x12;
          Fp x58399 = x58396 + x58398;
          Fp x58400 = args[2][7 * steps + ((cycle - 4) & mask)];
          Fp x58401 = x58400 * x28;
          Fp x58402 = x58399 + x58401;
          Fp x58403 = args[2][8 * steps + ((cycle - 4) & mask)];
          Fp x58404 = x58403 * x13;
          Fp x58405 = x58402 + x58404;
          Fp x58406 = args[2][9 * steps + ((cycle - 4) & mask)];
          Fp x58407 = x58406 * x29;
          Fp x58408 = x58405 + x58407;
          Fp x58409 = args[2][10 * steps + ((cycle - 4) & mask)];
          Fp x58410 = x58409 * x14;
          Fp x58411 = x58408 + x58410;
          Fp x58412 = args[2][11 * steps + ((cycle - 4) & mask)];
          Fp x58413 = x58412 * x30;
          Fp x58414 = x58411 + x58413;
          Fp x58415 = args[2][12 * steps + ((cycle - 4) & mask)];
          Fp x58416 = x58415 * x15;
          Fp x58417 = x58414 + x58416;
          Fp x58418 = args[2][13 * steps + ((cycle - 4) & mask)];
          Fp x58419 = x58418 * x31;
          Fp x58420 = x58417 + x58419;
          Fp x58421 = args[2][14 * steps + ((cycle - 4) & mask)];
          Fp x58422 = x58421 * x16;
          Fp x58423 = x58420 + x58422;
          Fp x58424 = args[2][15 * steps + ((cycle - 4) & mask)];
          Fp x58425 = x58424 * x32;
          Fp x58426 = x58423 + x58425;
          Fp x58427 = args[2][16 * steps + ((cycle - 4) & mask)];
          Fp x58428 = args[2][17 * steps + ((cycle - 4) & mask)];
          Fp x58429 = x58428 * x1;
          Fp x58430 = x58427 + x58429;
          Fp x58431 = args[2][18 * steps + ((cycle - 4) & mask)];
          Fp x58432 = x58431 * x3;
          Fp x58433 = x58430 + x58432;
          Fp x58434 = args[2][19 * steps + ((cycle - 4) & mask)];
          Fp x58435 = x58434 * x6;
          Fp x58436 = x58433 + x58435;
          Fp x58437 = args[2][20 * steps + ((cycle - 4) & mask)];
          Fp x58438 = x58437 * x11;
          Fp x58439 = x58436 + x58438;
          Fp x58440 = args[2][21 * steps + ((cycle - 4) & mask)];
          Fp x58441 = x58440 * x27;
          Fp x58442 = x58439 + x58441;
          Fp x58443 = args[2][22 * steps + ((cycle - 4) & mask)];
          Fp x58444 = x58443 * x12;
          Fp x58445 = x58442 + x58444;
          Fp x58446 = args[2][23 * steps + ((cycle - 4) & mask)];
          Fp x58447 = x58446 * x28;
          Fp x58448 = x58445 + x58447;
          Fp x58449 = args[2][24 * steps + ((cycle - 4) & mask)];
          Fp x58450 = x58449 * x13;
          Fp x58451 = x58448 + x58450;
          Fp x58452 = args[2][25 * steps + ((cycle - 4) & mask)];
          Fp x58453 = x58452 * x29;
          Fp x58454 = x58451 + x58453;
          Fp x58455 = args[2][26 * steps + ((cycle - 4) & mask)];
          Fp x58456 = x58455 * x14;
          Fp x58457 = x58454 + x58456;
          Fp x58458 = args[2][27 * steps + ((cycle - 4) & mask)];
          Fp x58459 = x58458 * x30;
          Fp x58460 = x58457 + x58459;
          Fp x58461 = args[2][28 * steps + ((cycle - 4) & mask)];
          Fp x58462 = x58461 * x15;
          Fp x58463 = x58460 + x58462;
          Fp x58464 = args[2][29 * steps + ((cycle - 4) & mask)];
          Fp x58465 = x58464 * x31;
          Fp x58466 = x58463 + x58465;
          Fp x58467 = args[2][30 * steps + ((cycle - 4) & mask)];
          Fp x58468 = x58467 * x16;
          Fp x58469 = x58466 + x58468;
          Fp x58470 = args[2][31 * steps + ((cycle - 4) & mask)];
          Fp x58471 = x58470 * x32;
          Fp x58472 = x58469 + x58471;
          {
            Fp x58473 = Fp(x58426.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x58473;
            Fp x58474 = x58426 - x58473;
            Fp x58475 = x58474 * x26;
            Fp x58476 = Fp(x58475.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x58476;
            Fp x58477 = x58475 - x58476;
            Fp x58478 = x58477 * x26;
            Fp x58479 = Fp(x58478.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x58479;
            Fp x58480 = x58478 - x58479;
            Fp x58481 = x58480 * x26;
            Fp x58482 = Fp(x58481.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x58482;
            Fp x58483 = x58481 - x58482;
            Fp x58484 = x58483 * x26;
            Fp x58485 = Fp(x58484.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x58485;
            Fp x58486 = x58484 - x58485;
            Fp x58487 = x58486 * x26;
            Fp x58488 = Fp(x58487.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x58488;
            Fp x58489 = x58487 - x58488;
            Fp x58490 = x58489 * x26;
            Fp x58491 = Fp(x58490.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x58491;
            Fp x58492 = x58490 - x58491;
            Fp x58493 = x58492 * x26;
            Fp x58494 = Fp(x58493.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x58494;
            Fp x58495 = x58493 - x58494;
            Fp x58496 = x58495 * x26;
            Fp x58497 = Fp(x58496.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x58497;
            Fp x58498 = x58496 - x58497;
            Fp x58499 = x58498 * x26;
            Fp x58500 = Fp(x58499.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x58500;
            Fp x58501 = x58499 - x58500;
            Fp x58502 = x58501 * x26;
            Fp x58503 = Fp(x58502.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x58503;
            Fp x58504 = x58502 - x58503;
            Fp x58505 = x58504 * x26;
            Fp x58506 = Fp(x58505.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x58506;
            Fp x58507 = x58505 - x58506;
            Fp x58508 = x58507 * x26;
            Fp x58509 = Fp(x58508.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x58509;
            Fp x58510 = x58508 - x58509;
            Fp x58511 = x58510 * x26;
            Fp x58512 = Fp(x58511.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x58512;
            Fp x58513 = x58511 - x58512;
            Fp x58514 = x58513 * x26;
            Fp x58515 = Fp(x58514.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x58515;
            Fp x58516 = x58514 - x58515;
            Fp x58517 = x58516 * x26;
            Fp x58518 = Fp(x58517.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x58518;
          }
          Fp x58519 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x58520 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x58521 = x58520 * x1;
          Fp x58522 = x58519 + x58521;
          Fp x58523 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x58524 = x58523 * x3;
          Fp x58525 = x58522 + x58524;
          Fp x58526 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x58527 = x58526 * x6;
          Fp x58528 = x58525 + x58527;
          Fp x58529 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x58530 = x58529 * x11;
          Fp x58531 = x58528 + x58530;
          Fp x58532 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x58533 = x58532 * x27;
          Fp x58534 = x58531 + x58533;
          Fp x58535 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x58536 = x58535 * x12;
          Fp x58537 = x58534 + x58536;
          Fp x58538 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x58539 = x58538 * x28;
          Fp x58540 = x58537 + x58539;
          Fp x58541 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x58542 = x58541 * x13;
          Fp x58543 = x58540 + x58542;
          Fp x58544 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x58545 = x58544 * x29;
          Fp x58546 = x58543 + x58545;
          Fp x58547 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x58548 = x58547 * x14;
          Fp x58549 = x58546 + x58548;
          Fp x58550 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x58551 = x58550 * x30;
          Fp x58552 = x58549 + x58551;
          Fp x58553 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x58554 = x58553 * x15;
          Fp x58555 = x58552 + x58554;
          Fp x58556 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x58557 = x58556 * x31;
          Fp x58558 = x58555 + x58557;
          Fp x58559 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x58560 = x58559 * x16;
          Fp x58561 = x58558 + x58560;
          Fp x58562 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x58563 = x58562 * x32;
          Fp x58564 = x58561 + x58563;
          Fp x58565 = x58426 - x58564;
          Fp x58566 = x58565 * x33;
          if (x58566 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          {
            Fp x58567 = Fp(x58472.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x58567;
            Fp x58568 = x58472 - x58567;
            Fp x58569 = x58568 * x26;
            Fp x58570 = Fp(x58569.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x58570;
            Fp x58571 = x58569 - x58570;
            Fp x58572 = x58571 * x26;
            Fp x58573 = Fp(x58572.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x58573;
            Fp x58574 = x58572 - x58573;
            Fp x58575 = x58574 * x26;
            Fp x58576 = Fp(x58575.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x58576;
            Fp x58577 = x58575 - x58576;
            Fp x58578 = x58577 * x26;
            Fp x58579 = Fp(x58578.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x58579;
            Fp x58580 = x58578 - x58579;
            Fp x58581 = x58580 * x26;
            Fp x58582 = Fp(x58581.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x58582;
            Fp x58583 = x58581 - x58582;
            Fp x58584 = x58583 * x26;
            Fp x58585 = Fp(x58584.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x58585;
            Fp x58586 = x58584 - x58585;
            Fp x58587 = x58586 * x26;
            Fp x58588 = Fp(x58587.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x58588;
            Fp x58589 = x58587 - x58588;
            Fp x58590 = x58589 * x26;
            Fp x58591 = Fp(x58590.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x58591;
            Fp x58592 = x58590 - x58591;
            Fp x58593 = x58592 * x26;
            Fp x58594 = Fp(x58593.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x58594;
            Fp x58595 = x58593 - x58594;
            Fp x58596 = x58595 * x26;
            Fp x58597 = Fp(x58596.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x58597;
            Fp x58598 = x58596 - x58597;
            Fp x58599 = x58598 * x26;
            Fp x58600 = Fp(x58599.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x58600;
            Fp x58601 = x58599 - x58600;
            Fp x58602 = x58601 * x26;
            Fp x58603 = Fp(x58602.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x58603;
            Fp x58604 = x58602 - x58603;
            Fp x58605 = x58604 * x26;
            Fp x58606 = Fp(x58605.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x58606;
            Fp x58607 = x58605 - x58606;
            Fp x58608 = x58607 * x26;
            Fp x58609 = Fp(x58608.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x58609;
            Fp x58610 = x58608 - x58609;
            Fp x58611 = x58610 * x26;
            Fp x58612 = Fp(x58611.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x58612;
          }
          Fp x58613 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x58614 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x58615 = x58614 * x1;
          Fp x58616 = x58613 + x58615;
          Fp x58617 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x58618 = x58617 * x3;
          Fp x58619 = x58616 + x58618;
          Fp x58620 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x58621 = x58620 * x6;
          Fp x58622 = x58619 + x58621;
          Fp x58623 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x58624 = x58623 * x11;
          Fp x58625 = x58622 + x58624;
          Fp x58626 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x58627 = x58626 * x27;
          Fp x58628 = x58625 + x58627;
          Fp x58629 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x58630 = x58629 * x12;
          Fp x58631 = x58628 + x58630;
          Fp x58632 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x58633 = x58632 * x28;
          Fp x58634 = x58631 + x58633;
          Fp x58635 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x58636 = x58635 * x13;
          Fp x58637 = x58634 + x58636;
          Fp x58638 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x58639 = x58638 * x29;
          Fp x58640 = x58637 + x58639;
          Fp x58641 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x58642 = x58641 * x14;
          Fp x58643 = x58640 + x58642;
          Fp x58644 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x58645 = x58644 * x30;
          Fp x58646 = x58643 + x58645;
          Fp x58647 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x58648 = x58647 * x15;
          Fp x58649 = x58646 + x58648;
          Fp x58650 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x58651 = x58650 * x31;
          Fp x58652 = x58649 + x58651;
          Fp x58653 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x58654 = x58653 * x16;
          Fp x58655 = x58652 + x58654;
          Fp x58656 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x58657 = x58656 * x32;
          Fp x58658 = x58655 + x58657;
          Fp x58659 = x58472 - x58658;
          Fp x58660 = x58659 * x33;
          if (x58660 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          Fp x58661 = args[2][32 * steps + ((cycle - 4) & mask)];
          Fp x58662 = args[2][33 * steps + ((cycle - 4) & mask)];
          Fp x58663 = x58662 * x1;
          Fp x58664 = x58661 + x58663;
          Fp x58665 = args[2][34 * steps + ((cycle - 4) & mask)];
          Fp x58666 = x58665 * x3;
          Fp x58667 = x58664 + x58666;
          Fp x58668 = args[2][35 * steps + ((cycle - 4) & mask)];
          Fp x58669 = x58668 * x6;
          Fp x58670 = x58667 + x58669;
          Fp x58671 = args[2][36 * steps + ((cycle - 4) & mask)];
          Fp x58672 = x58671 * x11;
          Fp x58673 = x58670 + x58672;
          Fp x58674 = args[2][37 * steps + ((cycle - 4) & mask)];
          Fp x58675 = x58674 * x27;
          Fp x58676 = x58673 + x58675;
          Fp x58677 = args[2][38 * steps + ((cycle - 4) & mask)];
          Fp x58678 = x58677 * x12;
          Fp x58679 = x58676 + x58678;
          Fp x58680 = args[2][39 * steps + ((cycle - 4) & mask)];
          Fp x58681 = x58680 * x28;
          Fp x58682 = x58679 + x58681;
          Fp x58683 = args[2][40 * steps + ((cycle - 4) & mask)];
          Fp x58684 = x58683 * x13;
          Fp x58685 = x58682 + x58684;
          Fp x58686 = args[2][41 * steps + ((cycle - 4) & mask)];
          Fp x58687 = x58686 * x29;
          Fp x58688 = x58685 + x58687;
          Fp x58689 = args[2][42 * steps + ((cycle - 4) & mask)];
          Fp x58690 = x58689 * x14;
          Fp x58691 = x58688 + x58690;
          Fp x58692 = args[2][43 * steps + ((cycle - 4) & mask)];
          Fp x58693 = x58692 * x30;
          Fp x58694 = x58691 + x58693;
          Fp x58695 = args[2][44 * steps + ((cycle - 4) & mask)];
          Fp x58696 = x58695 * x15;
          Fp x58697 = x58694 + x58696;
          Fp x58698 = args[2][45 * steps + ((cycle - 4) & mask)];
          Fp x58699 = x58698 * x31;
          Fp x58700 = x58697 + x58699;
          Fp x58701 = args[2][46 * steps + ((cycle - 4) & mask)];
          Fp x58702 = x58701 * x16;
          Fp x58703 = x58700 + x58702;
          Fp x58704 = args[2][47 * steps + ((cycle - 4) & mask)];
          Fp x58705 = x58704 * x32;
          Fp x58706 = x58703 + x58705;
          Fp x58707 = args[2][48 * steps + ((cycle - 4) & mask)];
          Fp x58708 = args[2][49 * steps + ((cycle - 4) & mask)];
          Fp x58709 = x58708 * x1;
          Fp x58710 = x58707 + x58709;
          Fp x58711 = args[2][50 * steps + ((cycle - 4) & mask)];
          Fp x58712 = x58711 * x3;
          Fp x58713 = x58710 + x58712;
          Fp x58714 = args[2][51 * steps + ((cycle - 4) & mask)];
          Fp x58715 = x58714 * x6;
          Fp x58716 = x58713 + x58715;
          Fp x58717 = args[2][52 * steps + ((cycle - 4) & mask)];
          Fp x58718 = x58717 * x11;
          Fp x58719 = x58716 + x58718;
          Fp x58720 = args[2][53 * steps + ((cycle - 4) & mask)];
          Fp x58721 = x58720 * x27;
          Fp x58722 = x58719 + x58721;
          Fp x58723 = args[2][54 * steps + ((cycle - 4) & mask)];
          Fp x58724 = x58723 * x12;
          Fp x58725 = x58722 + x58724;
          Fp x58726 = args[2][55 * steps + ((cycle - 4) & mask)];
          Fp x58727 = x58726 * x28;
          Fp x58728 = x58725 + x58727;
          Fp x58729 = args[2][56 * steps + ((cycle - 4) & mask)];
          Fp x58730 = x58729 * x13;
          Fp x58731 = x58728 + x58730;
          Fp x58732 = args[2][57 * steps + ((cycle - 4) & mask)];
          Fp x58733 = x58732 * x29;
          Fp x58734 = x58731 + x58733;
          Fp x58735 = args[2][58 * steps + ((cycle - 4) & mask)];
          Fp x58736 = x58735 * x14;
          Fp x58737 = x58734 + x58736;
          Fp x58738 = args[2][59 * steps + ((cycle - 4) & mask)];
          Fp x58739 = x58738 * x30;
          Fp x58740 = x58737 + x58739;
          Fp x58741 = args[2][60 * steps + ((cycle - 4) & mask)];
          Fp x58742 = x58741 * x15;
          Fp x58743 = x58740 + x58742;
          Fp x58744 = args[2][61 * steps + ((cycle - 4) & mask)];
          Fp x58745 = x58744 * x31;
          Fp x58746 = x58743 + x58745;
          Fp x58747 = args[2][62 * steps + ((cycle - 4) & mask)];
          Fp x58748 = x58747 * x16;
          Fp x58749 = x58746 + x58748;
          Fp x58750 = args[2][63 * steps + ((cycle - 4) & mask)];
          Fp x58751 = x58750 * x32;
          Fp x58752 = x58749 + x58751;
          {
            Fp x58753 = Fp(x58706.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x58753;
            Fp x58754 = x58706 - x58753;
            Fp x58755 = x58754 * x26;
            Fp x58756 = Fp(x58755.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x58756;
            Fp x58757 = x58755 - x58756;
            Fp x58758 = x58757 * x26;
            Fp x58759 = Fp(x58758.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x58759;
            Fp x58760 = x58758 - x58759;
            Fp x58761 = x58760 * x26;
            Fp x58762 = Fp(x58761.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x58762;
            Fp x58763 = x58761 - x58762;
            Fp x58764 = x58763 * x26;
            Fp x58765 = Fp(x58764.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x58765;
            Fp x58766 = x58764 - x58765;
            Fp x58767 = x58766 * x26;
            Fp x58768 = Fp(x58767.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x58768;
            Fp x58769 = x58767 - x58768;
            Fp x58770 = x58769 * x26;
            Fp x58771 = Fp(x58770.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x58771;
            Fp x58772 = x58770 - x58771;
            Fp x58773 = x58772 * x26;
            Fp x58774 = Fp(x58773.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x58774;
            Fp x58775 = x58773 - x58774;
            Fp x58776 = x58775 * x26;
            Fp x58777 = Fp(x58776.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x58777;
            Fp x58778 = x58776 - x58777;
            Fp x58779 = x58778 * x26;
            Fp x58780 = Fp(x58779.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x58780;
            Fp x58781 = x58779 - x58780;
            Fp x58782 = x58781 * x26;
            Fp x58783 = Fp(x58782.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x58783;
            Fp x58784 = x58782 - x58783;
            Fp x58785 = x58784 * x26;
            Fp x58786 = Fp(x58785.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x58786;
            Fp x58787 = x58785 - x58786;
            Fp x58788 = x58787 * x26;
            Fp x58789 = Fp(x58788.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x58789;
            Fp x58790 = x58788 - x58789;
            Fp x58791 = x58790 * x26;
            Fp x58792 = Fp(x58791.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x58792;
            Fp x58793 = x58791 - x58792;
            Fp x58794 = x58793 * x26;
            Fp x58795 = Fp(x58794.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x58795;
            Fp x58796 = x58794 - x58795;
            Fp x58797 = x58796 * x26;
            Fp x58798 = Fp(x58797.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x58798;
          }
          Fp x58799 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x58800 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x58801 = x58800 * x1;
          Fp x58802 = x58799 + x58801;
          Fp x58803 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x58804 = x58803 * x3;
          Fp x58805 = x58802 + x58804;
          Fp x58806 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x58807 = x58806 * x6;
          Fp x58808 = x58805 + x58807;
          Fp x58809 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x58810 = x58809 * x11;
          Fp x58811 = x58808 + x58810;
          Fp x58812 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x58813 = x58812 * x27;
          Fp x58814 = x58811 + x58813;
          Fp x58815 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x58816 = x58815 * x12;
          Fp x58817 = x58814 + x58816;
          Fp x58818 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x58819 = x58818 * x28;
          Fp x58820 = x58817 + x58819;
          Fp x58821 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x58822 = x58821 * x13;
          Fp x58823 = x58820 + x58822;
          Fp x58824 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x58825 = x58824 * x29;
          Fp x58826 = x58823 + x58825;
          Fp x58827 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x58828 = x58827 * x14;
          Fp x58829 = x58826 + x58828;
          Fp x58830 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x58831 = x58830 * x30;
          Fp x58832 = x58829 + x58831;
          Fp x58833 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x58834 = x58833 * x15;
          Fp x58835 = x58832 + x58834;
          Fp x58836 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x58837 = x58836 * x31;
          Fp x58838 = x58835 + x58837;
          Fp x58839 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x58840 = x58839 * x16;
          Fp x58841 = x58838 + x58840;
          Fp x58842 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x58843 = x58842 * x32;
          Fp x58844 = x58841 + x58843;
          Fp x58845 = x58706 - x58844;
          Fp x58846 = x58845 * x33;
          if (x58846 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          {
            Fp x58847 = Fp(x58752.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x58847;
            Fp x58848 = x58752 - x58847;
            Fp x58849 = x58848 * x26;
            Fp x58850 = Fp(x58849.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x58850;
            Fp x58851 = x58849 - x58850;
            Fp x58852 = x58851 * x26;
            Fp x58853 = Fp(x58852.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x58853;
            Fp x58854 = x58852 - x58853;
            Fp x58855 = x58854 * x26;
            Fp x58856 = Fp(x58855.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x58856;
            Fp x58857 = x58855 - x58856;
            Fp x58858 = x58857 * x26;
            Fp x58859 = Fp(x58858.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x58859;
            Fp x58860 = x58858 - x58859;
            Fp x58861 = x58860 * x26;
            Fp x58862 = Fp(x58861.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x58862;
            Fp x58863 = x58861 - x58862;
            Fp x58864 = x58863 * x26;
            Fp x58865 = Fp(x58864.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x58865;
            Fp x58866 = x58864 - x58865;
            Fp x58867 = x58866 * x26;
            Fp x58868 = Fp(x58867.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x58868;
            Fp x58869 = x58867 - x58868;
            Fp x58870 = x58869 * x26;
            Fp x58871 = Fp(x58870.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x58871;
            Fp x58872 = x58870 - x58871;
            Fp x58873 = x58872 * x26;
            Fp x58874 = Fp(x58873.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x58874;
            Fp x58875 = x58873 - x58874;
            Fp x58876 = x58875 * x26;
            Fp x58877 = Fp(x58876.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x58877;
            Fp x58878 = x58876 - x58877;
            Fp x58879 = x58878 * x26;
            Fp x58880 = Fp(x58879.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x58880;
            Fp x58881 = x58879 - x58880;
            Fp x58882 = x58881 * x26;
            Fp x58883 = Fp(x58882.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x58883;
            Fp x58884 = x58882 - x58883;
            Fp x58885 = x58884 * x26;
            Fp x58886 = Fp(x58885.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x58886;
            Fp x58887 = x58885 - x58886;
            Fp x58888 = x58887 * x26;
            Fp x58889 = Fp(x58888.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x58889;
            Fp x58890 = x58888 - x58889;
            Fp x58891 = x58890 * x26;
            Fp x58892 = Fp(x58891.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x58892;
          }
          Fp x58893 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x58894 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x58895 = x58894 * x1;
          Fp x58896 = x58893 + x58895;
          Fp x58897 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x58898 = x58897 * x3;
          Fp x58899 = x58896 + x58898;
          Fp x58900 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x58901 = x58900 * x6;
          Fp x58902 = x58899 + x58901;
          Fp x58903 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x58904 = x58903 * x11;
          Fp x58905 = x58902 + x58904;
          Fp x58906 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x58907 = x58906 * x27;
          Fp x58908 = x58905 + x58907;
          Fp x58909 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x58910 = x58909 * x12;
          Fp x58911 = x58908 + x58910;
          Fp x58912 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x58913 = x58912 * x28;
          Fp x58914 = x58911 + x58913;
          Fp x58915 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x58916 = x58915 * x13;
          Fp x58917 = x58914 + x58916;
          Fp x58918 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x58919 = x58918 * x29;
          Fp x58920 = x58917 + x58919;
          Fp x58921 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x58922 = x58921 * x14;
          Fp x58923 = x58920 + x58922;
          Fp x58924 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x58925 = x58924 * x30;
          Fp x58926 = x58923 + x58925;
          Fp x58927 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x58928 = x58927 * x15;
          Fp x58929 = x58926 + x58928;
          Fp x58930 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x58931 = x58930 * x31;
          Fp x58932 = x58929 + x58931;
          Fp x58933 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x58934 = x58933 * x16;
          Fp x58935 = x58932 + x58934;
          Fp x58936 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x58937 = x58936 * x32;
          Fp x58938 = x58935 + x58937;
          Fp x58939 = x58752 - x58938;
          Fp x58940 = x58939 * x33;
          if (x58940 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          host_args[0] = x58658;
          host_args[1] = x58564;
          host_args[2] = x58938;
          host_args[3] = x58844;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%0x04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x58941 = x71 - x58380;
        if (x58941 != 0) {
          Fp x58942 = args[0][12 * steps + ((cycle - 0) & mask)];
          Fp x58943 = args[0][13 * steps + ((cycle - 0) & mask)];
          {
            Fp x58944 = Fp(x58942.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x58944;
            Fp x58945 = x58942 - x58944;
            Fp x58946 = x58945 * x26;
            Fp x58947 = Fp(x58946.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x58947;
            Fp x58948 = x58946 - x58947;
            Fp x58949 = x58948 * x26;
            Fp x58950 = Fp(x58949.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x58950;
            Fp x58951 = x58949 - x58950;
            Fp x58952 = x58951 * x26;
            Fp x58953 = Fp(x58952.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x58953;
            Fp x58954 = x58952 - x58953;
            Fp x58955 = x58954 * x26;
            Fp x58956 = Fp(x58955.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x58956;
            Fp x58957 = x58955 - x58956;
            Fp x58958 = x58957 * x26;
            Fp x58959 = Fp(x58958.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x58959;
            Fp x58960 = x58958 - x58959;
            Fp x58961 = x58960 * x26;
            Fp x58962 = Fp(x58961.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x58962;
            Fp x58963 = x58961 - x58962;
            Fp x58964 = x58963 * x26;
            Fp x58965 = Fp(x58964.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x58965;
            Fp x58966 = x58964 - x58965;
            Fp x58967 = x58966 * x26;
            Fp x58968 = Fp(x58967.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x58968;
            Fp x58969 = x58967 - x58968;
            Fp x58970 = x58969 * x26;
            Fp x58971 = Fp(x58970.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x58971;
            Fp x58972 = x58970 - x58971;
            Fp x58973 = x58972 * x26;
            Fp x58974 = Fp(x58973.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x58974;
            Fp x58975 = x58973 - x58974;
            Fp x58976 = x58975 * x26;
            Fp x58977 = Fp(x58976.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x58977;
            Fp x58978 = x58976 - x58977;
            Fp x58979 = x58978 * x26;
            Fp x58980 = Fp(x58979.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x58980;
            Fp x58981 = x58979 - x58980;
            Fp x58982 = x58981 * x26;
            Fp x58983 = Fp(x58982.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x58983;
            Fp x58984 = x58982 - x58983;
            Fp x58985 = x58984 * x26;
            Fp x58986 = Fp(x58985.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x58986;
            Fp x58987 = x58985 - x58986;
            Fp x58988 = x58987 * x26;
            Fp x58989 = Fp(x58988.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x58989;
          }
          Fp x58990 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x58991 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x58992 = x58991 * x1;
          Fp x58993 = x58990 + x58992;
          Fp x58994 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x58995 = x58994 * x3;
          Fp x58996 = x58993 + x58995;
          Fp x58997 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x58998 = x58997 * x6;
          Fp x58999 = x58996 + x58998;
          Fp x59000 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x59001 = x59000 * x11;
          Fp x59002 = x58999 + x59001;
          Fp x59003 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x59004 = x59003 * x27;
          Fp x59005 = x59002 + x59004;
          Fp x59006 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x59007 = x59006 * x12;
          Fp x59008 = x59005 + x59007;
          Fp x59009 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x59010 = x59009 * x28;
          Fp x59011 = x59008 + x59010;
          Fp x59012 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x59013 = x59012 * x13;
          Fp x59014 = x59011 + x59013;
          Fp x59015 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x59016 = x59015 * x29;
          Fp x59017 = x59014 + x59016;
          Fp x59018 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x59019 = x59018 * x14;
          Fp x59020 = x59017 + x59019;
          Fp x59021 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x59022 = x59021 * x30;
          Fp x59023 = x59020 + x59022;
          Fp x59024 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x59025 = x59024 * x15;
          Fp x59026 = x59023 + x59025;
          Fp x59027 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x59028 = x59027 * x31;
          Fp x59029 = x59026 + x59028;
          Fp x59030 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x59031 = x59030 * x16;
          Fp x59032 = x59029 + x59031;
          Fp x59033 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x59034 = x59033 * x32;
          Fp x59035 = x59032 + x59034;
          Fp x59036 = x58942 - x59035;
          Fp x59037 = x59036 * x33;
          if (x59037 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          {
            Fp x59038 = Fp(x58943.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x59038;
            Fp x59039 = x58943 - x59038;
            Fp x59040 = x59039 * x26;
            Fp x59041 = Fp(x59040.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x59041;
            Fp x59042 = x59040 - x59041;
            Fp x59043 = x59042 * x26;
            Fp x59044 = Fp(x59043.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x59044;
            Fp x59045 = x59043 - x59044;
            Fp x59046 = x59045 * x26;
            Fp x59047 = Fp(x59046.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x59047;
            Fp x59048 = x59046 - x59047;
            Fp x59049 = x59048 * x26;
            Fp x59050 = Fp(x59049.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x59050;
            Fp x59051 = x59049 - x59050;
            Fp x59052 = x59051 * x26;
            Fp x59053 = Fp(x59052.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x59053;
            Fp x59054 = x59052 - x59053;
            Fp x59055 = x59054 * x26;
            Fp x59056 = Fp(x59055.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x59056;
            Fp x59057 = x59055 - x59056;
            Fp x59058 = x59057 * x26;
            Fp x59059 = Fp(x59058.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x59059;
            Fp x59060 = x59058 - x59059;
            Fp x59061 = x59060 * x26;
            Fp x59062 = Fp(x59061.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x59062;
            Fp x59063 = x59061 - x59062;
            Fp x59064 = x59063 * x26;
            Fp x59065 = Fp(x59064.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x59065;
            Fp x59066 = x59064 - x59065;
            Fp x59067 = x59066 * x26;
            Fp x59068 = Fp(x59067.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x59068;
            Fp x59069 = x59067 - x59068;
            Fp x59070 = x59069 * x26;
            Fp x59071 = Fp(x59070.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x59071;
            Fp x59072 = x59070 - x59071;
            Fp x59073 = x59072 * x26;
            Fp x59074 = Fp(x59073.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x59074;
            Fp x59075 = x59073 - x59074;
            Fp x59076 = x59075 * x26;
            Fp x59077 = Fp(x59076.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x59077;
            Fp x59078 = x59076 - x59077;
            Fp x59079 = x59078 * x26;
            Fp x59080 = Fp(x59079.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x59080;
            Fp x59081 = x59079 - x59080;
            Fp x59082 = x59081 * x26;
            Fp x59083 = Fp(x59082.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x59083;
          }
          Fp x59084 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x59085 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x59086 = x59085 * x1;
          Fp x59087 = x59084 + x59086;
          Fp x59088 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x59089 = x59088 * x3;
          Fp x59090 = x59087 + x59089;
          Fp x59091 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x59092 = x59091 * x6;
          Fp x59093 = x59090 + x59092;
          Fp x59094 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x59095 = x59094 * x11;
          Fp x59096 = x59093 + x59095;
          Fp x59097 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x59098 = x59097 * x27;
          Fp x59099 = x59096 + x59098;
          Fp x59100 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x59101 = x59100 * x12;
          Fp x59102 = x59099 + x59101;
          Fp x59103 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x59104 = x59103 * x28;
          Fp x59105 = x59102 + x59104;
          Fp x59106 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x59107 = x59106 * x13;
          Fp x59108 = x59105 + x59107;
          Fp x59109 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x59110 = x59109 * x29;
          Fp x59111 = x59108 + x59110;
          Fp x59112 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x59113 = x59112 * x14;
          Fp x59114 = x59111 + x59113;
          Fp x59115 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x59116 = x59115 * x30;
          Fp x59117 = x59114 + x59116;
          Fp x59118 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x59119 = x59118 * x15;
          Fp x59120 = x59117 + x59119;
          Fp x59121 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x59122 = x59121 * x31;
          Fp x59123 = x59120 + x59122;
          Fp x59124 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x59125 = x59124 * x16;
          Fp x59126 = x59123 + x59125;
          Fp x59127 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x59128 = x59127 * x32;
          Fp x59129 = x59126 + x59128;
          Fp x59130 = x58943 - x59129;
          Fp x59131 = x59130 * x33;
          if (x59131 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          Fp x59132 = args[0][14 * steps + ((cycle - 0) & mask)];
          Fp x59133 = args[0][15 * steps + ((cycle - 0) & mask)];
          {
            Fp x59134 = Fp(x59132.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x59134;
            Fp x59135 = x59132 - x59134;
            Fp x59136 = x59135 * x26;
            Fp x59137 = Fp(x59136.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x59137;
            Fp x59138 = x59136 - x59137;
            Fp x59139 = x59138 * x26;
            Fp x59140 = Fp(x59139.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x59140;
            Fp x59141 = x59139 - x59140;
            Fp x59142 = x59141 * x26;
            Fp x59143 = Fp(x59142.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x59143;
            Fp x59144 = x59142 - x59143;
            Fp x59145 = x59144 * x26;
            Fp x59146 = Fp(x59145.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x59146;
            Fp x59147 = x59145 - x59146;
            Fp x59148 = x59147 * x26;
            Fp x59149 = Fp(x59148.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x59149;
            Fp x59150 = x59148 - x59149;
            Fp x59151 = x59150 * x26;
            Fp x59152 = Fp(x59151.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x59152;
            Fp x59153 = x59151 - x59152;
            Fp x59154 = x59153 * x26;
            Fp x59155 = Fp(x59154.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x59155;
            Fp x59156 = x59154 - x59155;
            Fp x59157 = x59156 * x26;
            Fp x59158 = Fp(x59157.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x59158;
            Fp x59159 = x59157 - x59158;
            Fp x59160 = x59159 * x26;
            Fp x59161 = Fp(x59160.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x59161;
            Fp x59162 = x59160 - x59161;
            Fp x59163 = x59162 * x26;
            Fp x59164 = Fp(x59163.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x59164;
            Fp x59165 = x59163 - x59164;
            Fp x59166 = x59165 * x26;
            Fp x59167 = Fp(x59166.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x59167;
            Fp x59168 = x59166 - x59167;
            Fp x59169 = x59168 * x26;
            Fp x59170 = Fp(x59169.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x59170;
            Fp x59171 = x59169 - x59170;
            Fp x59172 = x59171 * x26;
            Fp x59173 = Fp(x59172.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x59173;
            Fp x59174 = x59172 - x59173;
            Fp x59175 = x59174 * x26;
            Fp x59176 = Fp(x59175.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x59176;
            Fp x59177 = x59175 - x59176;
            Fp x59178 = x59177 * x26;
            Fp x59179 = Fp(x59178.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x59179;
          }
          Fp x59180 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x59181 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x59182 = x59181 * x1;
          Fp x59183 = x59180 + x59182;
          Fp x59184 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x59185 = x59184 * x3;
          Fp x59186 = x59183 + x59185;
          Fp x59187 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x59188 = x59187 * x6;
          Fp x59189 = x59186 + x59188;
          Fp x59190 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x59191 = x59190 * x11;
          Fp x59192 = x59189 + x59191;
          Fp x59193 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x59194 = x59193 * x27;
          Fp x59195 = x59192 + x59194;
          Fp x59196 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x59197 = x59196 * x12;
          Fp x59198 = x59195 + x59197;
          Fp x59199 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x59200 = x59199 * x28;
          Fp x59201 = x59198 + x59200;
          Fp x59202 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x59203 = x59202 * x13;
          Fp x59204 = x59201 + x59203;
          Fp x59205 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x59206 = x59205 * x29;
          Fp x59207 = x59204 + x59206;
          Fp x59208 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x59209 = x59208 * x14;
          Fp x59210 = x59207 + x59209;
          Fp x59211 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x59212 = x59211 * x30;
          Fp x59213 = x59210 + x59212;
          Fp x59214 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x59215 = x59214 * x15;
          Fp x59216 = x59213 + x59215;
          Fp x59217 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x59218 = x59217 * x31;
          Fp x59219 = x59216 + x59218;
          Fp x59220 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x59221 = x59220 * x16;
          Fp x59222 = x59219 + x59221;
          Fp x59223 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x59224 = x59223 * x32;
          Fp x59225 = x59222 + x59224;
          Fp x59226 = x59132 - x59225;
          Fp x59227 = x59226 * x33;
          if (x59227 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          {
            Fp x59228 = Fp(x59133.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x59228;
            Fp x59229 = x59133 - x59228;
            Fp x59230 = x59229 * x26;
            Fp x59231 = Fp(x59230.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x59231;
            Fp x59232 = x59230 - x59231;
            Fp x59233 = x59232 * x26;
            Fp x59234 = Fp(x59233.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x59234;
            Fp x59235 = x59233 - x59234;
            Fp x59236 = x59235 * x26;
            Fp x59237 = Fp(x59236.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x59237;
            Fp x59238 = x59236 - x59237;
            Fp x59239 = x59238 * x26;
            Fp x59240 = Fp(x59239.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x59240;
            Fp x59241 = x59239 - x59240;
            Fp x59242 = x59241 * x26;
            Fp x59243 = Fp(x59242.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x59243;
            Fp x59244 = x59242 - x59243;
            Fp x59245 = x59244 * x26;
            Fp x59246 = Fp(x59245.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x59246;
            Fp x59247 = x59245 - x59246;
            Fp x59248 = x59247 * x26;
            Fp x59249 = Fp(x59248.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x59249;
            Fp x59250 = x59248 - x59249;
            Fp x59251 = x59250 * x26;
            Fp x59252 = Fp(x59251.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x59252;
            Fp x59253 = x59251 - x59252;
            Fp x59254 = x59253 * x26;
            Fp x59255 = Fp(x59254.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x59255;
            Fp x59256 = x59254 - x59255;
            Fp x59257 = x59256 * x26;
            Fp x59258 = Fp(x59257.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x59258;
            Fp x59259 = x59257 - x59258;
            Fp x59260 = x59259 * x26;
            Fp x59261 = Fp(x59260.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x59261;
            Fp x59262 = x59260 - x59261;
            Fp x59263 = x59262 * x26;
            Fp x59264 = Fp(x59263.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x59264;
            Fp x59265 = x59263 - x59264;
            Fp x59266 = x59265 * x26;
            Fp x59267 = Fp(x59266.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x59267;
            Fp x59268 = x59266 - x59267;
            Fp x59269 = x59268 * x26;
            Fp x59270 = Fp(x59269.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x59270;
            Fp x59271 = x59269 - x59270;
            Fp x59272 = x59271 * x26;
            Fp x59273 = Fp(x59272.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x59273;
          }
          Fp x59274 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x59275 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x59276 = x59275 * x1;
          Fp x59277 = x59274 + x59276;
          Fp x59278 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x59279 = x59278 * x3;
          Fp x59280 = x59277 + x59279;
          Fp x59281 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x59282 = x59281 * x6;
          Fp x59283 = x59280 + x59282;
          Fp x59284 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x59285 = x59284 * x11;
          Fp x59286 = x59283 + x59285;
          Fp x59287 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x59288 = x59287 * x27;
          Fp x59289 = x59286 + x59288;
          Fp x59290 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x59291 = x59290 * x12;
          Fp x59292 = x59289 + x59291;
          Fp x59293 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x59294 = x59293 * x28;
          Fp x59295 = x59292 + x59294;
          Fp x59296 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x59297 = x59296 * x13;
          Fp x59298 = x59295 + x59297;
          Fp x59299 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x59300 = x59299 * x29;
          Fp x59301 = x59298 + x59300;
          Fp x59302 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x59303 = x59302 * x14;
          Fp x59304 = x59301 + x59303;
          Fp x59305 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x59306 = x59305 * x30;
          Fp x59307 = x59304 + x59306;
          Fp x59308 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x59309 = x59308 * x15;
          Fp x59310 = x59307 + x59309;
          Fp x59311 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x59312 = x59311 * x31;
          Fp x59313 = x59310 + x59312;
          Fp x59314 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x59315 = x59314 * x16;
          Fp x59316 = x59313 + x59315;
          Fp x59317 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x59318 = x59317 * x32;
          Fp x59319 = x59316 + x59318;
          Fp x59320 = x59133 - x59319;
          Fp x59321 = x59320 * x33;
          if (x59321 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          host_args[0] = x59129;
          host_args[1] = x59035;
          host_args[2] = x59319;
          host_args[3] = x59225;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x59322 = x58353 - x71;
        Fp x59323 = x58353 * x59322;
        if (x59323 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:131");
        Fp x59324 = x58373 - x71;
        Fp x59325 = x58373 * x59324;
        if (x59325 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:155");
        Fp x59326 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x59327 = x59326 - x71;
        Fp x59328 = x59326 * x59327;
        if (x59328 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:106");
        Fp x59329 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x59330 = x59329 - x71;
        Fp x59331 = x59329 * x59330;
        if (x59331 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:107");
        Fp x59332 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x59333 = x59332 - x71;
        Fp x59334 = x59332 * x59333;
        if (x59334 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:108");
        Fp x59335 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x59336 = x59335 - x71;
        Fp x59337 = x59335 * x59336;
        if (x59337 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:109");
      }
      if (x58323 != 0) {
        Fp x59338 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x59338;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x59338;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x59339 = host_outs[0];
          Fp x59340 = host_outs[1];
          args[2][129 * steps + cycle] = x59339;
          args[2][130 * steps + cycle] = x59340;
        }
        Fp x59341 = args[2][97 * steps + ((cycle - 1) & mask)];
        args[2][97 * steps + cycle] = x59341;
        Fp x59342 = args[2][98 * steps + ((cycle - 1) & mask)];
        args[2][98 * steps + cycle] = x59342;
        Fp x59343 = args[2][96 * steps + ((cycle - 1) & mask)];
        args[2][96 * steps + cycle] = x59343;
        Fp x59344 = args[2][123 * steps + ((cycle - 1) & mask)];
        args[2][123 * steps + cycle] = x59344;
        Fp x59345 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x59345;
        Fp x59346 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][126 * steps + cycle] = x59346;
        Fp x59347 = args[2][97 * steps + ((cycle - 0) & mask)];
        if (x59347 != 0) {
          host(ctx, "log", "  INIT2, cont", host_args.data(), 0, host_outs.data(), 0);
          Fp x59348 = args[2][124 * steps + ((cycle - 1) & mask)];
          args[2][124 * steps + cycle] = x59348;
          args[2][122 * steps + cycle] = x59338;
        }
        Fp x59349 = x71 - x59347;
        if (x59349 != 0) {
          Fp x59350 = args[2][128 * steps + ((cycle - 0) & mask)];
          Fp x59351 = x59350 * x3;
          Fp x59352 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x59353 = args[2][129 * steps + ((cycle - 0) & mask)];
          host_args[0] = x59351;
          host_args[1] = x59352;
          host_args[2] = x59353;
          host(ctx, "log", "  INIT1, load, addr = %x, val = 0x%04x%04x", host_args.data(), 3, host_outs.data(), 0);
          Fp x59354 = x59352 * x17;
          Fp x59355 = x59354 + x59353;
          args[2][124 * steps + cycle] = x59355;
          Fp x59356 = x59338 + x71;
          args[2][122 * steps + cycle] = x59356;
        }
        Fp x59357 = args[2][98 * steps + ((cycle - 0) & mask)];
        if (x59357 != 0) {
          Fp x59358 = args[2][0 * steps + ((cycle - 4) & mask)];
          Fp x59359 = args[2][1 * steps + ((cycle - 4) & mask)];
          Fp x59360 = x59359 * x1;
          Fp x59361 = x59358 + x59360;
          Fp x59362 = args[2][2 * steps + ((cycle - 4) & mask)];
          Fp x59363 = x59362 * x3;
          Fp x59364 = x59361 + x59363;
          Fp x59365 = args[2][3 * steps + ((cycle - 4) & mask)];
          Fp x59366 = x59365 * x6;
          Fp x59367 = x59364 + x59366;
          Fp x59368 = args[2][4 * steps + ((cycle - 4) & mask)];
          Fp x59369 = x59368 * x11;
          Fp x59370 = x59367 + x59369;
          Fp x59371 = args[2][5 * steps + ((cycle - 4) & mask)];
          Fp x59372 = x59371 * x27;
          Fp x59373 = x59370 + x59372;
          Fp x59374 = args[2][6 * steps + ((cycle - 4) & mask)];
          Fp x59375 = x59374 * x12;
          Fp x59376 = x59373 + x59375;
          Fp x59377 = args[2][7 * steps + ((cycle - 4) & mask)];
          Fp x59378 = x59377 * x28;
          Fp x59379 = x59376 + x59378;
          Fp x59380 = args[2][8 * steps + ((cycle - 4) & mask)];
          Fp x59381 = x59380 * x13;
          Fp x59382 = x59379 + x59381;
          Fp x59383 = args[2][9 * steps + ((cycle - 4) & mask)];
          Fp x59384 = x59383 * x29;
          Fp x59385 = x59382 + x59384;
          Fp x59386 = args[2][10 * steps + ((cycle - 4) & mask)];
          Fp x59387 = x59386 * x14;
          Fp x59388 = x59385 + x59387;
          Fp x59389 = args[2][11 * steps + ((cycle - 4) & mask)];
          Fp x59390 = x59389 * x30;
          Fp x59391 = x59388 + x59390;
          Fp x59392 = args[2][12 * steps + ((cycle - 4) & mask)];
          Fp x59393 = x59392 * x15;
          Fp x59394 = x59391 + x59393;
          Fp x59395 = args[2][13 * steps + ((cycle - 4) & mask)];
          Fp x59396 = x59395 * x31;
          Fp x59397 = x59394 + x59396;
          Fp x59398 = args[2][14 * steps + ((cycle - 4) & mask)];
          Fp x59399 = x59398 * x16;
          Fp x59400 = x59397 + x59399;
          Fp x59401 = args[2][15 * steps + ((cycle - 4) & mask)];
          Fp x59402 = x59401 * x32;
          Fp x59403 = x59400 + x59402;
          Fp x59404 = args[2][16 * steps + ((cycle - 4) & mask)];
          Fp x59405 = args[2][17 * steps + ((cycle - 4) & mask)];
          Fp x59406 = x59405 * x1;
          Fp x59407 = x59404 + x59406;
          Fp x59408 = args[2][18 * steps + ((cycle - 4) & mask)];
          Fp x59409 = x59408 * x3;
          Fp x59410 = x59407 + x59409;
          Fp x59411 = args[2][19 * steps + ((cycle - 4) & mask)];
          Fp x59412 = x59411 * x6;
          Fp x59413 = x59410 + x59412;
          Fp x59414 = args[2][20 * steps + ((cycle - 4) & mask)];
          Fp x59415 = x59414 * x11;
          Fp x59416 = x59413 + x59415;
          Fp x59417 = args[2][21 * steps + ((cycle - 4) & mask)];
          Fp x59418 = x59417 * x27;
          Fp x59419 = x59416 + x59418;
          Fp x59420 = args[2][22 * steps + ((cycle - 4) & mask)];
          Fp x59421 = x59420 * x12;
          Fp x59422 = x59419 + x59421;
          Fp x59423 = args[2][23 * steps + ((cycle - 4) & mask)];
          Fp x59424 = x59423 * x28;
          Fp x59425 = x59422 + x59424;
          Fp x59426 = args[2][24 * steps + ((cycle - 4) & mask)];
          Fp x59427 = x59426 * x13;
          Fp x59428 = x59425 + x59427;
          Fp x59429 = args[2][25 * steps + ((cycle - 4) & mask)];
          Fp x59430 = x59429 * x29;
          Fp x59431 = x59428 + x59430;
          Fp x59432 = args[2][26 * steps + ((cycle - 4) & mask)];
          Fp x59433 = x59432 * x14;
          Fp x59434 = x59431 + x59433;
          Fp x59435 = args[2][27 * steps + ((cycle - 4) & mask)];
          Fp x59436 = x59435 * x30;
          Fp x59437 = x59434 + x59436;
          Fp x59438 = args[2][28 * steps + ((cycle - 4) & mask)];
          Fp x59439 = x59438 * x15;
          Fp x59440 = x59437 + x59439;
          Fp x59441 = args[2][29 * steps + ((cycle - 4) & mask)];
          Fp x59442 = x59441 * x31;
          Fp x59443 = x59440 + x59442;
          Fp x59444 = args[2][30 * steps + ((cycle - 4) & mask)];
          Fp x59445 = x59444 * x16;
          Fp x59446 = x59443 + x59445;
          Fp x59447 = args[2][31 * steps + ((cycle - 4) & mask)];
          Fp x59448 = x59447 * x32;
          Fp x59449 = x59446 + x59448;
          {
            Fp x59450 = Fp(x59403.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x59450;
            Fp x59451 = x59403 - x59450;
            Fp x59452 = x59451 * x26;
            Fp x59453 = Fp(x59452.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x59453;
            Fp x59454 = x59452 - x59453;
            Fp x59455 = x59454 * x26;
            Fp x59456 = Fp(x59455.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x59456;
            Fp x59457 = x59455 - x59456;
            Fp x59458 = x59457 * x26;
            Fp x59459 = Fp(x59458.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x59459;
            Fp x59460 = x59458 - x59459;
            Fp x59461 = x59460 * x26;
            Fp x59462 = Fp(x59461.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x59462;
            Fp x59463 = x59461 - x59462;
            Fp x59464 = x59463 * x26;
            Fp x59465 = Fp(x59464.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x59465;
            Fp x59466 = x59464 - x59465;
            Fp x59467 = x59466 * x26;
            Fp x59468 = Fp(x59467.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x59468;
            Fp x59469 = x59467 - x59468;
            Fp x59470 = x59469 * x26;
            Fp x59471 = Fp(x59470.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x59471;
            Fp x59472 = x59470 - x59471;
            Fp x59473 = x59472 * x26;
            Fp x59474 = Fp(x59473.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x59474;
            Fp x59475 = x59473 - x59474;
            Fp x59476 = x59475 * x26;
            Fp x59477 = Fp(x59476.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x59477;
            Fp x59478 = x59476 - x59477;
            Fp x59479 = x59478 * x26;
            Fp x59480 = Fp(x59479.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x59480;
            Fp x59481 = x59479 - x59480;
            Fp x59482 = x59481 * x26;
            Fp x59483 = Fp(x59482.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x59483;
            Fp x59484 = x59482 - x59483;
            Fp x59485 = x59484 * x26;
            Fp x59486 = Fp(x59485.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x59486;
            Fp x59487 = x59485 - x59486;
            Fp x59488 = x59487 * x26;
            Fp x59489 = Fp(x59488.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x59489;
            Fp x59490 = x59488 - x59489;
            Fp x59491 = x59490 * x26;
            Fp x59492 = Fp(x59491.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x59492;
            Fp x59493 = x59491 - x59492;
            Fp x59494 = x59493 * x26;
            Fp x59495 = Fp(x59494.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x59495;
          }
          Fp x59496 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x59497 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x59498 = x59497 * x1;
          Fp x59499 = x59496 + x59498;
          Fp x59500 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x59501 = x59500 * x3;
          Fp x59502 = x59499 + x59501;
          Fp x59503 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x59504 = x59503 * x6;
          Fp x59505 = x59502 + x59504;
          Fp x59506 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x59507 = x59506 * x11;
          Fp x59508 = x59505 + x59507;
          Fp x59509 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x59510 = x59509 * x27;
          Fp x59511 = x59508 + x59510;
          Fp x59512 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x59513 = x59512 * x12;
          Fp x59514 = x59511 + x59513;
          Fp x59515 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x59516 = x59515 * x28;
          Fp x59517 = x59514 + x59516;
          Fp x59518 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x59519 = x59518 * x13;
          Fp x59520 = x59517 + x59519;
          Fp x59521 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x59522 = x59521 * x29;
          Fp x59523 = x59520 + x59522;
          Fp x59524 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x59525 = x59524 * x14;
          Fp x59526 = x59523 + x59525;
          Fp x59527 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x59528 = x59527 * x30;
          Fp x59529 = x59526 + x59528;
          Fp x59530 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x59531 = x59530 * x15;
          Fp x59532 = x59529 + x59531;
          Fp x59533 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x59534 = x59533 * x31;
          Fp x59535 = x59532 + x59534;
          Fp x59536 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x59537 = x59536 * x16;
          Fp x59538 = x59535 + x59537;
          Fp x59539 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x59540 = x59539 * x32;
          Fp x59541 = x59538 + x59540;
          Fp x59542 = x59403 - x59541;
          Fp x59543 = x59542 * x33;
          if (x59543 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          {
            Fp x59544 = Fp(x59449.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x59544;
            Fp x59545 = x59449 - x59544;
            Fp x59546 = x59545 * x26;
            Fp x59547 = Fp(x59546.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x59547;
            Fp x59548 = x59546 - x59547;
            Fp x59549 = x59548 * x26;
            Fp x59550 = Fp(x59549.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x59550;
            Fp x59551 = x59549 - x59550;
            Fp x59552 = x59551 * x26;
            Fp x59553 = Fp(x59552.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x59553;
            Fp x59554 = x59552 - x59553;
            Fp x59555 = x59554 * x26;
            Fp x59556 = Fp(x59555.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x59556;
            Fp x59557 = x59555 - x59556;
            Fp x59558 = x59557 * x26;
            Fp x59559 = Fp(x59558.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x59559;
            Fp x59560 = x59558 - x59559;
            Fp x59561 = x59560 * x26;
            Fp x59562 = Fp(x59561.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x59562;
            Fp x59563 = x59561 - x59562;
            Fp x59564 = x59563 * x26;
            Fp x59565 = Fp(x59564.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x59565;
            Fp x59566 = x59564 - x59565;
            Fp x59567 = x59566 * x26;
            Fp x59568 = Fp(x59567.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x59568;
            Fp x59569 = x59567 - x59568;
            Fp x59570 = x59569 * x26;
            Fp x59571 = Fp(x59570.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x59571;
            Fp x59572 = x59570 - x59571;
            Fp x59573 = x59572 * x26;
            Fp x59574 = Fp(x59573.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x59574;
            Fp x59575 = x59573 - x59574;
            Fp x59576 = x59575 * x26;
            Fp x59577 = Fp(x59576.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x59577;
            Fp x59578 = x59576 - x59577;
            Fp x59579 = x59578 * x26;
            Fp x59580 = Fp(x59579.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x59580;
            Fp x59581 = x59579 - x59580;
            Fp x59582 = x59581 * x26;
            Fp x59583 = Fp(x59582.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x59583;
            Fp x59584 = x59582 - x59583;
            Fp x59585 = x59584 * x26;
            Fp x59586 = Fp(x59585.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x59586;
            Fp x59587 = x59585 - x59586;
            Fp x59588 = x59587 * x26;
            Fp x59589 = Fp(x59588.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x59589;
          }
          Fp x59590 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x59591 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x59592 = x59591 * x1;
          Fp x59593 = x59590 + x59592;
          Fp x59594 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x59595 = x59594 * x3;
          Fp x59596 = x59593 + x59595;
          Fp x59597 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x59598 = x59597 * x6;
          Fp x59599 = x59596 + x59598;
          Fp x59600 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x59601 = x59600 * x11;
          Fp x59602 = x59599 + x59601;
          Fp x59603 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x59604 = x59603 * x27;
          Fp x59605 = x59602 + x59604;
          Fp x59606 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x59607 = x59606 * x12;
          Fp x59608 = x59605 + x59607;
          Fp x59609 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x59610 = x59609 * x28;
          Fp x59611 = x59608 + x59610;
          Fp x59612 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x59613 = x59612 * x13;
          Fp x59614 = x59611 + x59613;
          Fp x59615 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x59616 = x59615 * x29;
          Fp x59617 = x59614 + x59616;
          Fp x59618 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x59619 = x59618 * x14;
          Fp x59620 = x59617 + x59619;
          Fp x59621 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x59622 = x59621 * x30;
          Fp x59623 = x59620 + x59622;
          Fp x59624 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x59625 = x59624 * x15;
          Fp x59626 = x59623 + x59625;
          Fp x59627 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x59628 = x59627 * x31;
          Fp x59629 = x59626 + x59628;
          Fp x59630 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x59631 = x59630 * x16;
          Fp x59632 = x59629 + x59631;
          Fp x59633 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x59634 = x59633 * x32;
          Fp x59635 = x59632 + x59634;
          Fp x59636 = x59449 - x59635;
          Fp x59637 = x59636 * x33;
          if (x59637 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          Fp x59638 = args[2][32 * steps + ((cycle - 4) & mask)];
          Fp x59639 = args[2][33 * steps + ((cycle - 4) & mask)];
          Fp x59640 = x59639 * x1;
          Fp x59641 = x59638 + x59640;
          Fp x59642 = args[2][34 * steps + ((cycle - 4) & mask)];
          Fp x59643 = x59642 * x3;
          Fp x59644 = x59641 + x59643;
          Fp x59645 = args[2][35 * steps + ((cycle - 4) & mask)];
          Fp x59646 = x59645 * x6;
          Fp x59647 = x59644 + x59646;
          Fp x59648 = args[2][36 * steps + ((cycle - 4) & mask)];
          Fp x59649 = x59648 * x11;
          Fp x59650 = x59647 + x59649;
          Fp x59651 = args[2][37 * steps + ((cycle - 4) & mask)];
          Fp x59652 = x59651 * x27;
          Fp x59653 = x59650 + x59652;
          Fp x59654 = args[2][38 * steps + ((cycle - 4) & mask)];
          Fp x59655 = x59654 * x12;
          Fp x59656 = x59653 + x59655;
          Fp x59657 = args[2][39 * steps + ((cycle - 4) & mask)];
          Fp x59658 = x59657 * x28;
          Fp x59659 = x59656 + x59658;
          Fp x59660 = args[2][40 * steps + ((cycle - 4) & mask)];
          Fp x59661 = x59660 * x13;
          Fp x59662 = x59659 + x59661;
          Fp x59663 = args[2][41 * steps + ((cycle - 4) & mask)];
          Fp x59664 = x59663 * x29;
          Fp x59665 = x59662 + x59664;
          Fp x59666 = args[2][42 * steps + ((cycle - 4) & mask)];
          Fp x59667 = x59666 * x14;
          Fp x59668 = x59665 + x59667;
          Fp x59669 = args[2][43 * steps + ((cycle - 4) & mask)];
          Fp x59670 = x59669 * x30;
          Fp x59671 = x59668 + x59670;
          Fp x59672 = args[2][44 * steps + ((cycle - 4) & mask)];
          Fp x59673 = x59672 * x15;
          Fp x59674 = x59671 + x59673;
          Fp x59675 = args[2][45 * steps + ((cycle - 4) & mask)];
          Fp x59676 = x59675 * x31;
          Fp x59677 = x59674 + x59676;
          Fp x59678 = args[2][46 * steps + ((cycle - 4) & mask)];
          Fp x59679 = x59678 * x16;
          Fp x59680 = x59677 + x59679;
          Fp x59681 = args[2][47 * steps + ((cycle - 4) & mask)];
          Fp x59682 = x59681 * x32;
          Fp x59683 = x59680 + x59682;
          Fp x59684 = args[2][48 * steps + ((cycle - 4) & mask)];
          Fp x59685 = args[2][49 * steps + ((cycle - 4) & mask)];
          Fp x59686 = x59685 * x1;
          Fp x59687 = x59684 + x59686;
          Fp x59688 = args[2][50 * steps + ((cycle - 4) & mask)];
          Fp x59689 = x59688 * x3;
          Fp x59690 = x59687 + x59689;
          Fp x59691 = args[2][51 * steps + ((cycle - 4) & mask)];
          Fp x59692 = x59691 * x6;
          Fp x59693 = x59690 + x59692;
          Fp x59694 = args[2][52 * steps + ((cycle - 4) & mask)];
          Fp x59695 = x59694 * x11;
          Fp x59696 = x59693 + x59695;
          Fp x59697 = args[2][53 * steps + ((cycle - 4) & mask)];
          Fp x59698 = x59697 * x27;
          Fp x59699 = x59696 + x59698;
          Fp x59700 = args[2][54 * steps + ((cycle - 4) & mask)];
          Fp x59701 = x59700 * x12;
          Fp x59702 = x59699 + x59701;
          Fp x59703 = args[2][55 * steps + ((cycle - 4) & mask)];
          Fp x59704 = x59703 * x28;
          Fp x59705 = x59702 + x59704;
          Fp x59706 = args[2][56 * steps + ((cycle - 4) & mask)];
          Fp x59707 = x59706 * x13;
          Fp x59708 = x59705 + x59707;
          Fp x59709 = args[2][57 * steps + ((cycle - 4) & mask)];
          Fp x59710 = x59709 * x29;
          Fp x59711 = x59708 + x59710;
          Fp x59712 = args[2][58 * steps + ((cycle - 4) & mask)];
          Fp x59713 = x59712 * x14;
          Fp x59714 = x59711 + x59713;
          Fp x59715 = args[2][59 * steps + ((cycle - 4) & mask)];
          Fp x59716 = x59715 * x30;
          Fp x59717 = x59714 + x59716;
          Fp x59718 = args[2][60 * steps + ((cycle - 4) & mask)];
          Fp x59719 = x59718 * x15;
          Fp x59720 = x59717 + x59719;
          Fp x59721 = args[2][61 * steps + ((cycle - 4) & mask)];
          Fp x59722 = x59721 * x31;
          Fp x59723 = x59720 + x59722;
          Fp x59724 = args[2][62 * steps + ((cycle - 4) & mask)];
          Fp x59725 = x59724 * x16;
          Fp x59726 = x59723 + x59725;
          Fp x59727 = args[2][63 * steps + ((cycle - 4) & mask)];
          Fp x59728 = x59727 * x32;
          Fp x59729 = x59726 + x59728;
          {
            Fp x59730 = Fp(x59683.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x59730;
            Fp x59731 = x59683 - x59730;
            Fp x59732 = x59731 * x26;
            Fp x59733 = Fp(x59732.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x59733;
            Fp x59734 = x59732 - x59733;
            Fp x59735 = x59734 * x26;
            Fp x59736 = Fp(x59735.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x59736;
            Fp x59737 = x59735 - x59736;
            Fp x59738 = x59737 * x26;
            Fp x59739 = Fp(x59738.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x59739;
            Fp x59740 = x59738 - x59739;
            Fp x59741 = x59740 * x26;
            Fp x59742 = Fp(x59741.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x59742;
            Fp x59743 = x59741 - x59742;
            Fp x59744 = x59743 * x26;
            Fp x59745 = Fp(x59744.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x59745;
            Fp x59746 = x59744 - x59745;
            Fp x59747 = x59746 * x26;
            Fp x59748 = Fp(x59747.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x59748;
            Fp x59749 = x59747 - x59748;
            Fp x59750 = x59749 * x26;
            Fp x59751 = Fp(x59750.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x59751;
            Fp x59752 = x59750 - x59751;
            Fp x59753 = x59752 * x26;
            Fp x59754 = Fp(x59753.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x59754;
            Fp x59755 = x59753 - x59754;
            Fp x59756 = x59755 * x26;
            Fp x59757 = Fp(x59756.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x59757;
            Fp x59758 = x59756 - x59757;
            Fp x59759 = x59758 * x26;
            Fp x59760 = Fp(x59759.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x59760;
            Fp x59761 = x59759 - x59760;
            Fp x59762 = x59761 * x26;
            Fp x59763 = Fp(x59762.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x59763;
            Fp x59764 = x59762 - x59763;
            Fp x59765 = x59764 * x26;
            Fp x59766 = Fp(x59765.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x59766;
            Fp x59767 = x59765 - x59766;
            Fp x59768 = x59767 * x26;
            Fp x59769 = Fp(x59768.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x59769;
            Fp x59770 = x59768 - x59769;
            Fp x59771 = x59770 * x26;
            Fp x59772 = Fp(x59771.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x59772;
            Fp x59773 = x59771 - x59772;
            Fp x59774 = x59773 * x26;
            Fp x59775 = Fp(x59774.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x59775;
          }
          Fp x59776 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x59777 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x59778 = x59777 * x1;
          Fp x59779 = x59776 + x59778;
          Fp x59780 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x59781 = x59780 * x3;
          Fp x59782 = x59779 + x59781;
          Fp x59783 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x59784 = x59783 * x6;
          Fp x59785 = x59782 + x59784;
          Fp x59786 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x59787 = x59786 * x11;
          Fp x59788 = x59785 + x59787;
          Fp x59789 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x59790 = x59789 * x27;
          Fp x59791 = x59788 + x59790;
          Fp x59792 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x59793 = x59792 * x12;
          Fp x59794 = x59791 + x59793;
          Fp x59795 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x59796 = x59795 * x28;
          Fp x59797 = x59794 + x59796;
          Fp x59798 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x59799 = x59798 * x13;
          Fp x59800 = x59797 + x59799;
          Fp x59801 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x59802 = x59801 * x29;
          Fp x59803 = x59800 + x59802;
          Fp x59804 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x59805 = x59804 * x14;
          Fp x59806 = x59803 + x59805;
          Fp x59807 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x59808 = x59807 * x30;
          Fp x59809 = x59806 + x59808;
          Fp x59810 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x59811 = x59810 * x15;
          Fp x59812 = x59809 + x59811;
          Fp x59813 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x59814 = x59813 * x31;
          Fp x59815 = x59812 + x59814;
          Fp x59816 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x59817 = x59816 * x16;
          Fp x59818 = x59815 + x59817;
          Fp x59819 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x59820 = x59819 * x32;
          Fp x59821 = x59818 + x59820;
          Fp x59822 = x59683 - x59821;
          Fp x59823 = x59822 * x33;
          if (x59823 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          {
            Fp x59824 = Fp(x59729.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x59824;
            Fp x59825 = x59729 - x59824;
            Fp x59826 = x59825 * x26;
            Fp x59827 = Fp(x59826.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x59827;
            Fp x59828 = x59826 - x59827;
            Fp x59829 = x59828 * x26;
            Fp x59830 = Fp(x59829.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x59830;
            Fp x59831 = x59829 - x59830;
            Fp x59832 = x59831 * x26;
            Fp x59833 = Fp(x59832.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x59833;
            Fp x59834 = x59832 - x59833;
            Fp x59835 = x59834 * x26;
            Fp x59836 = Fp(x59835.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x59836;
            Fp x59837 = x59835 - x59836;
            Fp x59838 = x59837 * x26;
            Fp x59839 = Fp(x59838.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x59839;
            Fp x59840 = x59838 - x59839;
            Fp x59841 = x59840 * x26;
            Fp x59842 = Fp(x59841.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x59842;
            Fp x59843 = x59841 - x59842;
            Fp x59844 = x59843 * x26;
            Fp x59845 = Fp(x59844.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x59845;
            Fp x59846 = x59844 - x59845;
            Fp x59847 = x59846 * x26;
            Fp x59848 = Fp(x59847.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x59848;
            Fp x59849 = x59847 - x59848;
            Fp x59850 = x59849 * x26;
            Fp x59851 = Fp(x59850.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x59851;
            Fp x59852 = x59850 - x59851;
            Fp x59853 = x59852 * x26;
            Fp x59854 = Fp(x59853.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x59854;
            Fp x59855 = x59853 - x59854;
            Fp x59856 = x59855 * x26;
            Fp x59857 = Fp(x59856.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x59857;
            Fp x59858 = x59856 - x59857;
            Fp x59859 = x59858 * x26;
            Fp x59860 = Fp(x59859.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x59860;
            Fp x59861 = x59859 - x59860;
            Fp x59862 = x59861 * x26;
            Fp x59863 = Fp(x59862.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x59863;
            Fp x59864 = x59862 - x59863;
            Fp x59865 = x59864 * x26;
            Fp x59866 = Fp(x59865.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x59866;
            Fp x59867 = x59865 - x59866;
            Fp x59868 = x59867 * x26;
            Fp x59869 = Fp(x59868.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x59869;
          }
          Fp x59870 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x59871 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x59872 = x59871 * x1;
          Fp x59873 = x59870 + x59872;
          Fp x59874 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x59875 = x59874 * x3;
          Fp x59876 = x59873 + x59875;
          Fp x59877 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x59878 = x59877 * x6;
          Fp x59879 = x59876 + x59878;
          Fp x59880 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x59881 = x59880 * x11;
          Fp x59882 = x59879 + x59881;
          Fp x59883 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x59884 = x59883 * x27;
          Fp x59885 = x59882 + x59884;
          Fp x59886 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x59887 = x59886 * x12;
          Fp x59888 = x59885 + x59887;
          Fp x59889 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x59890 = x59889 * x28;
          Fp x59891 = x59888 + x59890;
          Fp x59892 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x59893 = x59892 * x13;
          Fp x59894 = x59891 + x59893;
          Fp x59895 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x59896 = x59895 * x29;
          Fp x59897 = x59894 + x59896;
          Fp x59898 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x59899 = x59898 * x14;
          Fp x59900 = x59897 + x59899;
          Fp x59901 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x59902 = x59901 * x30;
          Fp x59903 = x59900 + x59902;
          Fp x59904 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x59905 = x59904 * x15;
          Fp x59906 = x59903 + x59905;
          Fp x59907 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x59908 = x59907 * x31;
          Fp x59909 = x59906 + x59908;
          Fp x59910 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x59911 = x59910 * x16;
          Fp x59912 = x59909 + x59911;
          Fp x59913 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x59914 = x59913 * x32;
          Fp x59915 = x59912 + x59914;
          Fp x59916 = x59729 - x59915;
          Fp x59917 = x59916 * x33;
          if (x59917 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          host_args[0] = x59635;
          host_args[1] = x59541;
          host_args[2] = x59915;
          host_args[3] = x59821;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%0x04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x59918 = x71 - x59357;
        if (x59918 != 0) {
          Fp x59919 = args[0][12 * steps + ((cycle - 0) & mask)];
          Fp x59920 = args[0][13 * steps + ((cycle - 0) & mask)];
          {
            Fp x59921 = Fp(x59919.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x59921;
            Fp x59922 = x59919 - x59921;
            Fp x59923 = x59922 * x26;
            Fp x59924 = Fp(x59923.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x59924;
            Fp x59925 = x59923 - x59924;
            Fp x59926 = x59925 * x26;
            Fp x59927 = Fp(x59926.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x59927;
            Fp x59928 = x59926 - x59927;
            Fp x59929 = x59928 * x26;
            Fp x59930 = Fp(x59929.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x59930;
            Fp x59931 = x59929 - x59930;
            Fp x59932 = x59931 * x26;
            Fp x59933 = Fp(x59932.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x59933;
            Fp x59934 = x59932 - x59933;
            Fp x59935 = x59934 * x26;
            Fp x59936 = Fp(x59935.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x59936;
            Fp x59937 = x59935 - x59936;
            Fp x59938 = x59937 * x26;
            Fp x59939 = Fp(x59938.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x59939;
            Fp x59940 = x59938 - x59939;
            Fp x59941 = x59940 * x26;
            Fp x59942 = Fp(x59941.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x59942;
            Fp x59943 = x59941 - x59942;
            Fp x59944 = x59943 * x26;
            Fp x59945 = Fp(x59944.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x59945;
            Fp x59946 = x59944 - x59945;
            Fp x59947 = x59946 * x26;
            Fp x59948 = Fp(x59947.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x59948;
            Fp x59949 = x59947 - x59948;
            Fp x59950 = x59949 * x26;
            Fp x59951 = Fp(x59950.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x59951;
            Fp x59952 = x59950 - x59951;
            Fp x59953 = x59952 * x26;
            Fp x59954 = Fp(x59953.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x59954;
            Fp x59955 = x59953 - x59954;
            Fp x59956 = x59955 * x26;
            Fp x59957 = Fp(x59956.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x59957;
            Fp x59958 = x59956 - x59957;
            Fp x59959 = x59958 * x26;
            Fp x59960 = Fp(x59959.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x59960;
            Fp x59961 = x59959 - x59960;
            Fp x59962 = x59961 * x26;
            Fp x59963 = Fp(x59962.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x59963;
            Fp x59964 = x59962 - x59963;
            Fp x59965 = x59964 * x26;
            Fp x59966 = Fp(x59965.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x59966;
          }
          Fp x59967 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x59968 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x59969 = x59968 * x1;
          Fp x59970 = x59967 + x59969;
          Fp x59971 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x59972 = x59971 * x3;
          Fp x59973 = x59970 + x59972;
          Fp x59974 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x59975 = x59974 * x6;
          Fp x59976 = x59973 + x59975;
          Fp x59977 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x59978 = x59977 * x11;
          Fp x59979 = x59976 + x59978;
          Fp x59980 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x59981 = x59980 * x27;
          Fp x59982 = x59979 + x59981;
          Fp x59983 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x59984 = x59983 * x12;
          Fp x59985 = x59982 + x59984;
          Fp x59986 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x59987 = x59986 * x28;
          Fp x59988 = x59985 + x59987;
          Fp x59989 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x59990 = x59989 * x13;
          Fp x59991 = x59988 + x59990;
          Fp x59992 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x59993 = x59992 * x29;
          Fp x59994 = x59991 + x59993;
          Fp x59995 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x59996 = x59995 * x14;
          Fp x59997 = x59994 + x59996;
          Fp x59998 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x59999 = x59998 * x30;
          Fp x60000 = x59997 + x59999;
          Fp x60001 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x60002 = x60001 * x15;
          Fp x60003 = x60000 + x60002;
          Fp x60004 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x60005 = x60004 * x31;
          Fp x60006 = x60003 + x60005;
          Fp x60007 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x60008 = x60007 * x16;
          Fp x60009 = x60006 + x60008;
          Fp x60010 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x60011 = x60010 * x32;
          Fp x60012 = x60009 + x60011;
          Fp x60013 = x59919 - x60012;
          Fp x60014 = x60013 * x33;
          if (x60014 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          {
            Fp x60015 = Fp(x59920.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x60015;
            Fp x60016 = x59920 - x60015;
            Fp x60017 = x60016 * x26;
            Fp x60018 = Fp(x60017.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x60018;
            Fp x60019 = x60017 - x60018;
            Fp x60020 = x60019 * x26;
            Fp x60021 = Fp(x60020.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x60021;
            Fp x60022 = x60020 - x60021;
            Fp x60023 = x60022 * x26;
            Fp x60024 = Fp(x60023.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x60024;
            Fp x60025 = x60023 - x60024;
            Fp x60026 = x60025 * x26;
            Fp x60027 = Fp(x60026.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x60027;
            Fp x60028 = x60026 - x60027;
            Fp x60029 = x60028 * x26;
            Fp x60030 = Fp(x60029.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x60030;
            Fp x60031 = x60029 - x60030;
            Fp x60032 = x60031 * x26;
            Fp x60033 = Fp(x60032.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x60033;
            Fp x60034 = x60032 - x60033;
            Fp x60035 = x60034 * x26;
            Fp x60036 = Fp(x60035.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x60036;
            Fp x60037 = x60035 - x60036;
            Fp x60038 = x60037 * x26;
            Fp x60039 = Fp(x60038.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x60039;
            Fp x60040 = x60038 - x60039;
            Fp x60041 = x60040 * x26;
            Fp x60042 = Fp(x60041.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x60042;
            Fp x60043 = x60041 - x60042;
            Fp x60044 = x60043 * x26;
            Fp x60045 = Fp(x60044.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x60045;
            Fp x60046 = x60044 - x60045;
            Fp x60047 = x60046 * x26;
            Fp x60048 = Fp(x60047.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x60048;
            Fp x60049 = x60047 - x60048;
            Fp x60050 = x60049 * x26;
            Fp x60051 = Fp(x60050.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x60051;
            Fp x60052 = x60050 - x60051;
            Fp x60053 = x60052 * x26;
            Fp x60054 = Fp(x60053.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x60054;
            Fp x60055 = x60053 - x60054;
            Fp x60056 = x60055 * x26;
            Fp x60057 = Fp(x60056.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x60057;
            Fp x60058 = x60056 - x60057;
            Fp x60059 = x60058 * x26;
            Fp x60060 = Fp(x60059.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x60060;
          }
          Fp x60061 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x60062 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x60063 = x60062 * x1;
          Fp x60064 = x60061 + x60063;
          Fp x60065 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x60066 = x60065 * x3;
          Fp x60067 = x60064 + x60066;
          Fp x60068 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x60069 = x60068 * x6;
          Fp x60070 = x60067 + x60069;
          Fp x60071 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x60072 = x60071 * x11;
          Fp x60073 = x60070 + x60072;
          Fp x60074 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x60075 = x60074 * x27;
          Fp x60076 = x60073 + x60075;
          Fp x60077 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x60078 = x60077 * x12;
          Fp x60079 = x60076 + x60078;
          Fp x60080 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x60081 = x60080 * x28;
          Fp x60082 = x60079 + x60081;
          Fp x60083 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x60084 = x60083 * x13;
          Fp x60085 = x60082 + x60084;
          Fp x60086 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x60087 = x60086 * x29;
          Fp x60088 = x60085 + x60087;
          Fp x60089 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x60090 = x60089 * x14;
          Fp x60091 = x60088 + x60090;
          Fp x60092 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x60093 = x60092 * x30;
          Fp x60094 = x60091 + x60093;
          Fp x60095 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x60096 = x60095 * x15;
          Fp x60097 = x60094 + x60096;
          Fp x60098 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x60099 = x60098 * x31;
          Fp x60100 = x60097 + x60099;
          Fp x60101 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x60102 = x60101 * x16;
          Fp x60103 = x60100 + x60102;
          Fp x60104 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x60105 = x60104 * x32;
          Fp x60106 = x60103 + x60105;
          Fp x60107 = x59920 - x60106;
          Fp x60108 = x60107 * x33;
          if (x60108 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          Fp x60109 = args[0][14 * steps + ((cycle - 0) & mask)];
          Fp x60110 = args[0][15 * steps + ((cycle - 0) & mask)];
          {
            Fp x60111 = Fp(x60109.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x60111;
            Fp x60112 = x60109 - x60111;
            Fp x60113 = x60112 * x26;
            Fp x60114 = Fp(x60113.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x60114;
            Fp x60115 = x60113 - x60114;
            Fp x60116 = x60115 * x26;
            Fp x60117 = Fp(x60116.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x60117;
            Fp x60118 = x60116 - x60117;
            Fp x60119 = x60118 * x26;
            Fp x60120 = Fp(x60119.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x60120;
            Fp x60121 = x60119 - x60120;
            Fp x60122 = x60121 * x26;
            Fp x60123 = Fp(x60122.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x60123;
            Fp x60124 = x60122 - x60123;
            Fp x60125 = x60124 * x26;
            Fp x60126 = Fp(x60125.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x60126;
            Fp x60127 = x60125 - x60126;
            Fp x60128 = x60127 * x26;
            Fp x60129 = Fp(x60128.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x60129;
            Fp x60130 = x60128 - x60129;
            Fp x60131 = x60130 * x26;
            Fp x60132 = Fp(x60131.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x60132;
            Fp x60133 = x60131 - x60132;
            Fp x60134 = x60133 * x26;
            Fp x60135 = Fp(x60134.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x60135;
            Fp x60136 = x60134 - x60135;
            Fp x60137 = x60136 * x26;
            Fp x60138 = Fp(x60137.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x60138;
            Fp x60139 = x60137 - x60138;
            Fp x60140 = x60139 * x26;
            Fp x60141 = Fp(x60140.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x60141;
            Fp x60142 = x60140 - x60141;
            Fp x60143 = x60142 * x26;
            Fp x60144 = Fp(x60143.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x60144;
            Fp x60145 = x60143 - x60144;
            Fp x60146 = x60145 * x26;
            Fp x60147 = Fp(x60146.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x60147;
            Fp x60148 = x60146 - x60147;
            Fp x60149 = x60148 * x26;
            Fp x60150 = Fp(x60149.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x60150;
            Fp x60151 = x60149 - x60150;
            Fp x60152 = x60151 * x26;
            Fp x60153 = Fp(x60152.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x60153;
            Fp x60154 = x60152 - x60153;
            Fp x60155 = x60154 * x26;
            Fp x60156 = Fp(x60155.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x60156;
          }
          Fp x60157 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x60158 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x60159 = x60158 * x1;
          Fp x60160 = x60157 + x60159;
          Fp x60161 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x60162 = x60161 * x3;
          Fp x60163 = x60160 + x60162;
          Fp x60164 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x60165 = x60164 * x6;
          Fp x60166 = x60163 + x60165;
          Fp x60167 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x60168 = x60167 * x11;
          Fp x60169 = x60166 + x60168;
          Fp x60170 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x60171 = x60170 * x27;
          Fp x60172 = x60169 + x60171;
          Fp x60173 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x60174 = x60173 * x12;
          Fp x60175 = x60172 + x60174;
          Fp x60176 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x60177 = x60176 * x28;
          Fp x60178 = x60175 + x60177;
          Fp x60179 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x60180 = x60179 * x13;
          Fp x60181 = x60178 + x60180;
          Fp x60182 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x60183 = x60182 * x29;
          Fp x60184 = x60181 + x60183;
          Fp x60185 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x60186 = x60185 * x14;
          Fp x60187 = x60184 + x60186;
          Fp x60188 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x60189 = x60188 * x30;
          Fp x60190 = x60187 + x60189;
          Fp x60191 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x60192 = x60191 * x15;
          Fp x60193 = x60190 + x60192;
          Fp x60194 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x60195 = x60194 * x31;
          Fp x60196 = x60193 + x60195;
          Fp x60197 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x60198 = x60197 * x16;
          Fp x60199 = x60196 + x60198;
          Fp x60200 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x60201 = x60200 * x32;
          Fp x60202 = x60199 + x60201;
          Fp x60203 = x60109 - x60202;
          Fp x60204 = x60203 * x33;
          if (x60204 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          {
            Fp x60205 = Fp(x60110.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x60205;
            Fp x60206 = x60110 - x60205;
            Fp x60207 = x60206 * x26;
            Fp x60208 = Fp(x60207.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x60208;
            Fp x60209 = x60207 - x60208;
            Fp x60210 = x60209 * x26;
            Fp x60211 = Fp(x60210.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x60211;
            Fp x60212 = x60210 - x60211;
            Fp x60213 = x60212 * x26;
            Fp x60214 = Fp(x60213.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x60214;
            Fp x60215 = x60213 - x60214;
            Fp x60216 = x60215 * x26;
            Fp x60217 = Fp(x60216.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x60217;
            Fp x60218 = x60216 - x60217;
            Fp x60219 = x60218 * x26;
            Fp x60220 = Fp(x60219.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x60220;
            Fp x60221 = x60219 - x60220;
            Fp x60222 = x60221 * x26;
            Fp x60223 = Fp(x60222.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x60223;
            Fp x60224 = x60222 - x60223;
            Fp x60225 = x60224 * x26;
            Fp x60226 = Fp(x60225.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x60226;
            Fp x60227 = x60225 - x60226;
            Fp x60228 = x60227 * x26;
            Fp x60229 = Fp(x60228.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x60229;
            Fp x60230 = x60228 - x60229;
            Fp x60231 = x60230 * x26;
            Fp x60232 = Fp(x60231.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x60232;
            Fp x60233 = x60231 - x60232;
            Fp x60234 = x60233 * x26;
            Fp x60235 = Fp(x60234.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x60235;
            Fp x60236 = x60234 - x60235;
            Fp x60237 = x60236 * x26;
            Fp x60238 = Fp(x60237.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x60238;
            Fp x60239 = x60237 - x60238;
            Fp x60240 = x60239 * x26;
            Fp x60241 = Fp(x60240.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x60241;
            Fp x60242 = x60240 - x60241;
            Fp x60243 = x60242 * x26;
            Fp x60244 = Fp(x60243.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x60244;
            Fp x60245 = x60243 - x60244;
            Fp x60246 = x60245 * x26;
            Fp x60247 = Fp(x60246.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x60247;
            Fp x60248 = x60246 - x60247;
            Fp x60249 = x60248 * x26;
            Fp x60250 = Fp(x60249.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x60250;
          }
          Fp x60251 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x60252 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x60253 = x60252 * x1;
          Fp x60254 = x60251 + x60253;
          Fp x60255 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x60256 = x60255 * x3;
          Fp x60257 = x60254 + x60256;
          Fp x60258 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x60259 = x60258 * x6;
          Fp x60260 = x60257 + x60259;
          Fp x60261 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x60262 = x60261 * x11;
          Fp x60263 = x60260 + x60262;
          Fp x60264 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x60265 = x60264 * x27;
          Fp x60266 = x60263 + x60265;
          Fp x60267 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x60268 = x60267 * x12;
          Fp x60269 = x60266 + x60268;
          Fp x60270 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x60271 = x60270 * x28;
          Fp x60272 = x60269 + x60271;
          Fp x60273 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x60274 = x60273 * x13;
          Fp x60275 = x60272 + x60274;
          Fp x60276 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x60277 = x60276 * x29;
          Fp x60278 = x60275 + x60277;
          Fp x60279 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x60280 = x60279 * x14;
          Fp x60281 = x60278 + x60280;
          Fp x60282 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x60283 = x60282 * x30;
          Fp x60284 = x60281 + x60283;
          Fp x60285 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x60286 = x60285 * x15;
          Fp x60287 = x60284 + x60286;
          Fp x60288 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x60289 = x60288 * x31;
          Fp x60290 = x60287 + x60289;
          Fp x60291 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x60292 = x60291 * x16;
          Fp x60293 = x60290 + x60292;
          Fp x60294 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x60295 = x60294 * x32;
          Fp x60296 = x60293 + x60295;
          Fp x60297 = x60110 - x60296;
          Fp x60298 = x60297 * x33;
          if (x60298 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          host_args[0] = x60106;
          host_args[1] = x60012;
          host_args[2] = x60296;
          host_args[3] = x60202;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        args[2][127 * steps + cycle] = x7;
        Fp x60299 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x60300 = x60299 - x71;
        Fp x60301 = x60299 * x60300;
        if (x60301 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:106");
        Fp x60302 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x60303 = x60302 - x71;
        Fp x60304 = x60302 * x60303;
        if (x60304 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:107");
        Fp x60305 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x60306 = x60305 - x71;
        Fp x60307 = x60305 * x60306;
        if (x60307 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:108");
        Fp x60308 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x60309 = x60308 - x71;
        Fp x60310 = x60308 * x60309;
        if (x60310 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:109");
      }
      if (x58324 != 0) {
        Fp x60311 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x60311;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x60311;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x60312 = host_outs[0];
          Fp x60313 = host_outs[1];
          args[2][129 * steps + cycle] = x60312;
          args[2][130 * steps + cycle] = x60313;
        }
        Fp x60314 = args[2][97 * steps + ((cycle - 1) & mask)];
        args[2][97 * steps + cycle] = x60314;
        Fp x60315 = args[2][98 * steps + ((cycle - 1) & mask)];
        args[2][98 * steps + cycle] = x60315;
        Fp x60316 = args[2][96 * steps + ((cycle - 1) & mask)];
        args[2][96 * steps + cycle] = x60316;
        Fp x60317 = args[2][123 * steps + ((cycle - 1) & mask)];
        args[2][123 * steps + cycle] = x60317;
        Fp x60318 = args[2][124 * steps + ((cycle - 1) & mask)];
        args[2][124 * steps + cycle] = x60318;
        Fp x60319 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][126 * steps + cycle] = x60319;
        Fp x60320 = args[2][97 * steps + ((cycle - 0) & mask)];
        if (x60320 != 0) {
          host(ctx, "log", "  INIT2, cont", host_args.data(), 0, host_outs.data(), 0);
          Fp x60321 = args[2][125 * steps + ((cycle - 1) & mask)];
          args[2][125 * steps + cycle] = x60321;
          args[2][122 * steps + cycle] = x60311;
        }
        Fp x60322 = x71 - x60320;
        if (x60322 != 0) {
          Fp x60323 = args[2][128 * steps + ((cycle - 0) & mask)];
          Fp x60324 = x60323 * x3;
          Fp x60325 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x60326 = args[2][129 * steps + ((cycle - 0) & mask)];
          host_args[0] = x60324;
          host_args[1] = x60325;
          host_args[2] = x60326;
          host(ctx, "log", "  INIT2, load, addr = %x, val = 0x%04x%04x", host_args.data(), 3, host_outs.data(), 0);
          Fp x60327 = x60325 * x17;
          Fp x60328 = x60327 + x60326;
          Fp x60329 = x60328 * x10;
          args[2][125 * steps + cycle] = x60329;
          Fp x60330 = x60311 + x71;
          args[2][122 * steps + cycle] = x60330;
        }
        Fp x60331 = args[2][98 * steps + ((cycle - 0) & mask)];
        if (x60331 != 0) {
          Fp x60332 = args[2][0 * steps + ((cycle - 4) & mask)];
          Fp x60333 = args[2][1 * steps + ((cycle - 4) & mask)];
          Fp x60334 = x60333 * x1;
          Fp x60335 = x60332 + x60334;
          Fp x60336 = args[2][2 * steps + ((cycle - 4) & mask)];
          Fp x60337 = x60336 * x3;
          Fp x60338 = x60335 + x60337;
          Fp x60339 = args[2][3 * steps + ((cycle - 4) & mask)];
          Fp x60340 = x60339 * x6;
          Fp x60341 = x60338 + x60340;
          Fp x60342 = args[2][4 * steps + ((cycle - 4) & mask)];
          Fp x60343 = x60342 * x11;
          Fp x60344 = x60341 + x60343;
          Fp x60345 = args[2][5 * steps + ((cycle - 4) & mask)];
          Fp x60346 = x60345 * x27;
          Fp x60347 = x60344 + x60346;
          Fp x60348 = args[2][6 * steps + ((cycle - 4) & mask)];
          Fp x60349 = x60348 * x12;
          Fp x60350 = x60347 + x60349;
          Fp x60351 = args[2][7 * steps + ((cycle - 4) & mask)];
          Fp x60352 = x60351 * x28;
          Fp x60353 = x60350 + x60352;
          Fp x60354 = args[2][8 * steps + ((cycle - 4) & mask)];
          Fp x60355 = x60354 * x13;
          Fp x60356 = x60353 + x60355;
          Fp x60357 = args[2][9 * steps + ((cycle - 4) & mask)];
          Fp x60358 = x60357 * x29;
          Fp x60359 = x60356 + x60358;
          Fp x60360 = args[2][10 * steps + ((cycle - 4) & mask)];
          Fp x60361 = x60360 * x14;
          Fp x60362 = x60359 + x60361;
          Fp x60363 = args[2][11 * steps + ((cycle - 4) & mask)];
          Fp x60364 = x60363 * x30;
          Fp x60365 = x60362 + x60364;
          Fp x60366 = args[2][12 * steps + ((cycle - 4) & mask)];
          Fp x60367 = x60366 * x15;
          Fp x60368 = x60365 + x60367;
          Fp x60369 = args[2][13 * steps + ((cycle - 4) & mask)];
          Fp x60370 = x60369 * x31;
          Fp x60371 = x60368 + x60370;
          Fp x60372 = args[2][14 * steps + ((cycle - 4) & mask)];
          Fp x60373 = x60372 * x16;
          Fp x60374 = x60371 + x60373;
          Fp x60375 = args[2][15 * steps + ((cycle - 4) & mask)];
          Fp x60376 = x60375 * x32;
          Fp x60377 = x60374 + x60376;
          Fp x60378 = args[2][16 * steps + ((cycle - 4) & mask)];
          Fp x60379 = args[2][17 * steps + ((cycle - 4) & mask)];
          Fp x60380 = x60379 * x1;
          Fp x60381 = x60378 + x60380;
          Fp x60382 = args[2][18 * steps + ((cycle - 4) & mask)];
          Fp x60383 = x60382 * x3;
          Fp x60384 = x60381 + x60383;
          Fp x60385 = args[2][19 * steps + ((cycle - 4) & mask)];
          Fp x60386 = x60385 * x6;
          Fp x60387 = x60384 + x60386;
          Fp x60388 = args[2][20 * steps + ((cycle - 4) & mask)];
          Fp x60389 = x60388 * x11;
          Fp x60390 = x60387 + x60389;
          Fp x60391 = args[2][21 * steps + ((cycle - 4) & mask)];
          Fp x60392 = x60391 * x27;
          Fp x60393 = x60390 + x60392;
          Fp x60394 = args[2][22 * steps + ((cycle - 4) & mask)];
          Fp x60395 = x60394 * x12;
          Fp x60396 = x60393 + x60395;
          Fp x60397 = args[2][23 * steps + ((cycle - 4) & mask)];
          Fp x60398 = x60397 * x28;
          Fp x60399 = x60396 + x60398;
          Fp x60400 = args[2][24 * steps + ((cycle - 4) & mask)];
          Fp x60401 = x60400 * x13;
          Fp x60402 = x60399 + x60401;
          Fp x60403 = args[2][25 * steps + ((cycle - 4) & mask)];
          Fp x60404 = x60403 * x29;
          Fp x60405 = x60402 + x60404;
          Fp x60406 = args[2][26 * steps + ((cycle - 4) & mask)];
          Fp x60407 = x60406 * x14;
          Fp x60408 = x60405 + x60407;
          Fp x60409 = args[2][27 * steps + ((cycle - 4) & mask)];
          Fp x60410 = x60409 * x30;
          Fp x60411 = x60408 + x60410;
          Fp x60412 = args[2][28 * steps + ((cycle - 4) & mask)];
          Fp x60413 = x60412 * x15;
          Fp x60414 = x60411 + x60413;
          Fp x60415 = args[2][29 * steps + ((cycle - 4) & mask)];
          Fp x60416 = x60415 * x31;
          Fp x60417 = x60414 + x60416;
          Fp x60418 = args[2][30 * steps + ((cycle - 4) & mask)];
          Fp x60419 = x60418 * x16;
          Fp x60420 = x60417 + x60419;
          Fp x60421 = args[2][31 * steps + ((cycle - 4) & mask)];
          Fp x60422 = x60421 * x32;
          Fp x60423 = x60420 + x60422;
          {
            Fp x60424 = Fp(x60377.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x60424;
            Fp x60425 = x60377 - x60424;
            Fp x60426 = x60425 * x26;
            Fp x60427 = Fp(x60426.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x60427;
            Fp x60428 = x60426 - x60427;
            Fp x60429 = x60428 * x26;
            Fp x60430 = Fp(x60429.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x60430;
            Fp x60431 = x60429 - x60430;
            Fp x60432 = x60431 * x26;
            Fp x60433 = Fp(x60432.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x60433;
            Fp x60434 = x60432 - x60433;
            Fp x60435 = x60434 * x26;
            Fp x60436 = Fp(x60435.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x60436;
            Fp x60437 = x60435 - x60436;
            Fp x60438 = x60437 * x26;
            Fp x60439 = Fp(x60438.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x60439;
            Fp x60440 = x60438 - x60439;
            Fp x60441 = x60440 * x26;
            Fp x60442 = Fp(x60441.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x60442;
            Fp x60443 = x60441 - x60442;
            Fp x60444 = x60443 * x26;
            Fp x60445 = Fp(x60444.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x60445;
            Fp x60446 = x60444 - x60445;
            Fp x60447 = x60446 * x26;
            Fp x60448 = Fp(x60447.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x60448;
            Fp x60449 = x60447 - x60448;
            Fp x60450 = x60449 * x26;
            Fp x60451 = Fp(x60450.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x60451;
            Fp x60452 = x60450 - x60451;
            Fp x60453 = x60452 * x26;
            Fp x60454 = Fp(x60453.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x60454;
            Fp x60455 = x60453 - x60454;
            Fp x60456 = x60455 * x26;
            Fp x60457 = Fp(x60456.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x60457;
            Fp x60458 = x60456 - x60457;
            Fp x60459 = x60458 * x26;
            Fp x60460 = Fp(x60459.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x60460;
            Fp x60461 = x60459 - x60460;
            Fp x60462 = x60461 * x26;
            Fp x60463 = Fp(x60462.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x60463;
            Fp x60464 = x60462 - x60463;
            Fp x60465 = x60464 * x26;
            Fp x60466 = Fp(x60465.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x60466;
            Fp x60467 = x60465 - x60466;
            Fp x60468 = x60467 * x26;
            Fp x60469 = Fp(x60468.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x60469;
          }
          Fp x60470 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x60471 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x60472 = x60471 * x1;
          Fp x60473 = x60470 + x60472;
          Fp x60474 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x60475 = x60474 * x3;
          Fp x60476 = x60473 + x60475;
          Fp x60477 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x60478 = x60477 * x6;
          Fp x60479 = x60476 + x60478;
          Fp x60480 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x60481 = x60480 * x11;
          Fp x60482 = x60479 + x60481;
          Fp x60483 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x60484 = x60483 * x27;
          Fp x60485 = x60482 + x60484;
          Fp x60486 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x60487 = x60486 * x12;
          Fp x60488 = x60485 + x60487;
          Fp x60489 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x60490 = x60489 * x28;
          Fp x60491 = x60488 + x60490;
          Fp x60492 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x60493 = x60492 * x13;
          Fp x60494 = x60491 + x60493;
          Fp x60495 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x60496 = x60495 * x29;
          Fp x60497 = x60494 + x60496;
          Fp x60498 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x60499 = x60498 * x14;
          Fp x60500 = x60497 + x60499;
          Fp x60501 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x60502 = x60501 * x30;
          Fp x60503 = x60500 + x60502;
          Fp x60504 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x60505 = x60504 * x15;
          Fp x60506 = x60503 + x60505;
          Fp x60507 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x60508 = x60507 * x31;
          Fp x60509 = x60506 + x60508;
          Fp x60510 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x60511 = x60510 * x16;
          Fp x60512 = x60509 + x60511;
          Fp x60513 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x60514 = x60513 * x32;
          Fp x60515 = x60512 + x60514;
          Fp x60516 = x60377 - x60515;
          Fp x60517 = x60516 * x33;
          if (x60517 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          {
            Fp x60518 = Fp(x60423.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x60518;
            Fp x60519 = x60423 - x60518;
            Fp x60520 = x60519 * x26;
            Fp x60521 = Fp(x60520.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x60521;
            Fp x60522 = x60520 - x60521;
            Fp x60523 = x60522 * x26;
            Fp x60524 = Fp(x60523.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x60524;
            Fp x60525 = x60523 - x60524;
            Fp x60526 = x60525 * x26;
            Fp x60527 = Fp(x60526.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x60527;
            Fp x60528 = x60526 - x60527;
            Fp x60529 = x60528 * x26;
            Fp x60530 = Fp(x60529.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x60530;
            Fp x60531 = x60529 - x60530;
            Fp x60532 = x60531 * x26;
            Fp x60533 = Fp(x60532.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x60533;
            Fp x60534 = x60532 - x60533;
            Fp x60535 = x60534 * x26;
            Fp x60536 = Fp(x60535.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x60536;
            Fp x60537 = x60535 - x60536;
            Fp x60538 = x60537 * x26;
            Fp x60539 = Fp(x60538.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x60539;
            Fp x60540 = x60538 - x60539;
            Fp x60541 = x60540 * x26;
            Fp x60542 = Fp(x60541.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x60542;
            Fp x60543 = x60541 - x60542;
            Fp x60544 = x60543 * x26;
            Fp x60545 = Fp(x60544.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x60545;
            Fp x60546 = x60544 - x60545;
            Fp x60547 = x60546 * x26;
            Fp x60548 = Fp(x60547.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x60548;
            Fp x60549 = x60547 - x60548;
            Fp x60550 = x60549 * x26;
            Fp x60551 = Fp(x60550.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x60551;
            Fp x60552 = x60550 - x60551;
            Fp x60553 = x60552 * x26;
            Fp x60554 = Fp(x60553.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x60554;
            Fp x60555 = x60553 - x60554;
            Fp x60556 = x60555 * x26;
            Fp x60557 = Fp(x60556.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x60557;
            Fp x60558 = x60556 - x60557;
            Fp x60559 = x60558 * x26;
            Fp x60560 = Fp(x60559.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x60560;
            Fp x60561 = x60559 - x60560;
            Fp x60562 = x60561 * x26;
            Fp x60563 = Fp(x60562.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x60563;
          }
          Fp x60564 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x60565 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x60566 = x60565 * x1;
          Fp x60567 = x60564 + x60566;
          Fp x60568 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x60569 = x60568 * x3;
          Fp x60570 = x60567 + x60569;
          Fp x60571 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x60572 = x60571 * x6;
          Fp x60573 = x60570 + x60572;
          Fp x60574 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x60575 = x60574 * x11;
          Fp x60576 = x60573 + x60575;
          Fp x60577 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x60578 = x60577 * x27;
          Fp x60579 = x60576 + x60578;
          Fp x60580 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x60581 = x60580 * x12;
          Fp x60582 = x60579 + x60581;
          Fp x60583 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x60584 = x60583 * x28;
          Fp x60585 = x60582 + x60584;
          Fp x60586 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x60587 = x60586 * x13;
          Fp x60588 = x60585 + x60587;
          Fp x60589 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x60590 = x60589 * x29;
          Fp x60591 = x60588 + x60590;
          Fp x60592 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x60593 = x60592 * x14;
          Fp x60594 = x60591 + x60593;
          Fp x60595 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x60596 = x60595 * x30;
          Fp x60597 = x60594 + x60596;
          Fp x60598 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x60599 = x60598 * x15;
          Fp x60600 = x60597 + x60599;
          Fp x60601 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x60602 = x60601 * x31;
          Fp x60603 = x60600 + x60602;
          Fp x60604 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x60605 = x60604 * x16;
          Fp x60606 = x60603 + x60605;
          Fp x60607 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x60608 = x60607 * x32;
          Fp x60609 = x60606 + x60608;
          Fp x60610 = x60423 - x60609;
          Fp x60611 = x60610 * x33;
          if (x60611 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          Fp x60612 = args[2][32 * steps + ((cycle - 4) & mask)];
          Fp x60613 = args[2][33 * steps + ((cycle - 4) & mask)];
          Fp x60614 = x60613 * x1;
          Fp x60615 = x60612 + x60614;
          Fp x60616 = args[2][34 * steps + ((cycle - 4) & mask)];
          Fp x60617 = x60616 * x3;
          Fp x60618 = x60615 + x60617;
          Fp x60619 = args[2][35 * steps + ((cycle - 4) & mask)];
          Fp x60620 = x60619 * x6;
          Fp x60621 = x60618 + x60620;
          Fp x60622 = args[2][36 * steps + ((cycle - 4) & mask)];
          Fp x60623 = x60622 * x11;
          Fp x60624 = x60621 + x60623;
          Fp x60625 = args[2][37 * steps + ((cycle - 4) & mask)];
          Fp x60626 = x60625 * x27;
          Fp x60627 = x60624 + x60626;
          Fp x60628 = args[2][38 * steps + ((cycle - 4) & mask)];
          Fp x60629 = x60628 * x12;
          Fp x60630 = x60627 + x60629;
          Fp x60631 = args[2][39 * steps + ((cycle - 4) & mask)];
          Fp x60632 = x60631 * x28;
          Fp x60633 = x60630 + x60632;
          Fp x60634 = args[2][40 * steps + ((cycle - 4) & mask)];
          Fp x60635 = x60634 * x13;
          Fp x60636 = x60633 + x60635;
          Fp x60637 = args[2][41 * steps + ((cycle - 4) & mask)];
          Fp x60638 = x60637 * x29;
          Fp x60639 = x60636 + x60638;
          Fp x60640 = args[2][42 * steps + ((cycle - 4) & mask)];
          Fp x60641 = x60640 * x14;
          Fp x60642 = x60639 + x60641;
          Fp x60643 = args[2][43 * steps + ((cycle - 4) & mask)];
          Fp x60644 = x60643 * x30;
          Fp x60645 = x60642 + x60644;
          Fp x60646 = args[2][44 * steps + ((cycle - 4) & mask)];
          Fp x60647 = x60646 * x15;
          Fp x60648 = x60645 + x60647;
          Fp x60649 = args[2][45 * steps + ((cycle - 4) & mask)];
          Fp x60650 = x60649 * x31;
          Fp x60651 = x60648 + x60650;
          Fp x60652 = args[2][46 * steps + ((cycle - 4) & mask)];
          Fp x60653 = x60652 * x16;
          Fp x60654 = x60651 + x60653;
          Fp x60655 = args[2][47 * steps + ((cycle - 4) & mask)];
          Fp x60656 = x60655 * x32;
          Fp x60657 = x60654 + x60656;
          Fp x60658 = args[2][48 * steps + ((cycle - 4) & mask)];
          Fp x60659 = args[2][49 * steps + ((cycle - 4) & mask)];
          Fp x60660 = x60659 * x1;
          Fp x60661 = x60658 + x60660;
          Fp x60662 = args[2][50 * steps + ((cycle - 4) & mask)];
          Fp x60663 = x60662 * x3;
          Fp x60664 = x60661 + x60663;
          Fp x60665 = args[2][51 * steps + ((cycle - 4) & mask)];
          Fp x60666 = x60665 * x6;
          Fp x60667 = x60664 + x60666;
          Fp x60668 = args[2][52 * steps + ((cycle - 4) & mask)];
          Fp x60669 = x60668 * x11;
          Fp x60670 = x60667 + x60669;
          Fp x60671 = args[2][53 * steps + ((cycle - 4) & mask)];
          Fp x60672 = x60671 * x27;
          Fp x60673 = x60670 + x60672;
          Fp x60674 = args[2][54 * steps + ((cycle - 4) & mask)];
          Fp x60675 = x60674 * x12;
          Fp x60676 = x60673 + x60675;
          Fp x60677 = args[2][55 * steps + ((cycle - 4) & mask)];
          Fp x60678 = x60677 * x28;
          Fp x60679 = x60676 + x60678;
          Fp x60680 = args[2][56 * steps + ((cycle - 4) & mask)];
          Fp x60681 = x60680 * x13;
          Fp x60682 = x60679 + x60681;
          Fp x60683 = args[2][57 * steps + ((cycle - 4) & mask)];
          Fp x60684 = x60683 * x29;
          Fp x60685 = x60682 + x60684;
          Fp x60686 = args[2][58 * steps + ((cycle - 4) & mask)];
          Fp x60687 = x60686 * x14;
          Fp x60688 = x60685 + x60687;
          Fp x60689 = args[2][59 * steps + ((cycle - 4) & mask)];
          Fp x60690 = x60689 * x30;
          Fp x60691 = x60688 + x60690;
          Fp x60692 = args[2][60 * steps + ((cycle - 4) & mask)];
          Fp x60693 = x60692 * x15;
          Fp x60694 = x60691 + x60693;
          Fp x60695 = args[2][61 * steps + ((cycle - 4) & mask)];
          Fp x60696 = x60695 * x31;
          Fp x60697 = x60694 + x60696;
          Fp x60698 = args[2][62 * steps + ((cycle - 4) & mask)];
          Fp x60699 = x60698 * x16;
          Fp x60700 = x60697 + x60699;
          Fp x60701 = args[2][63 * steps + ((cycle - 4) & mask)];
          Fp x60702 = x60701 * x32;
          Fp x60703 = x60700 + x60702;
          {
            Fp x60704 = Fp(x60657.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x60704;
            Fp x60705 = x60657 - x60704;
            Fp x60706 = x60705 * x26;
            Fp x60707 = Fp(x60706.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x60707;
            Fp x60708 = x60706 - x60707;
            Fp x60709 = x60708 * x26;
            Fp x60710 = Fp(x60709.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x60710;
            Fp x60711 = x60709 - x60710;
            Fp x60712 = x60711 * x26;
            Fp x60713 = Fp(x60712.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x60713;
            Fp x60714 = x60712 - x60713;
            Fp x60715 = x60714 * x26;
            Fp x60716 = Fp(x60715.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x60716;
            Fp x60717 = x60715 - x60716;
            Fp x60718 = x60717 * x26;
            Fp x60719 = Fp(x60718.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x60719;
            Fp x60720 = x60718 - x60719;
            Fp x60721 = x60720 * x26;
            Fp x60722 = Fp(x60721.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x60722;
            Fp x60723 = x60721 - x60722;
            Fp x60724 = x60723 * x26;
            Fp x60725 = Fp(x60724.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x60725;
            Fp x60726 = x60724 - x60725;
            Fp x60727 = x60726 * x26;
            Fp x60728 = Fp(x60727.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x60728;
            Fp x60729 = x60727 - x60728;
            Fp x60730 = x60729 * x26;
            Fp x60731 = Fp(x60730.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x60731;
            Fp x60732 = x60730 - x60731;
            Fp x60733 = x60732 * x26;
            Fp x60734 = Fp(x60733.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x60734;
            Fp x60735 = x60733 - x60734;
            Fp x60736 = x60735 * x26;
            Fp x60737 = Fp(x60736.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x60737;
            Fp x60738 = x60736 - x60737;
            Fp x60739 = x60738 * x26;
            Fp x60740 = Fp(x60739.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x60740;
            Fp x60741 = x60739 - x60740;
            Fp x60742 = x60741 * x26;
            Fp x60743 = Fp(x60742.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x60743;
            Fp x60744 = x60742 - x60743;
            Fp x60745 = x60744 * x26;
            Fp x60746 = Fp(x60745.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x60746;
            Fp x60747 = x60745 - x60746;
            Fp x60748 = x60747 * x26;
            Fp x60749 = Fp(x60748.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x60749;
          }
          Fp x60750 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x60751 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x60752 = x60751 * x1;
          Fp x60753 = x60750 + x60752;
          Fp x60754 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x60755 = x60754 * x3;
          Fp x60756 = x60753 + x60755;
          Fp x60757 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x60758 = x60757 * x6;
          Fp x60759 = x60756 + x60758;
          Fp x60760 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x60761 = x60760 * x11;
          Fp x60762 = x60759 + x60761;
          Fp x60763 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x60764 = x60763 * x27;
          Fp x60765 = x60762 + x60764;
          Fp x60766 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x60767 = x60766 * x12;
          Fp x60768 = x60765 + x60767;
          Fp x60769 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x60770 = x60769 * x28;
          Fp x60771 = x60768 + x60770;
          Fp x60772 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x60773 = x60772 * x13;
          Fp x60774 = x60771 + x60773;
          Fp x60775 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x60776 = x60775 * x29;
          Fp x60777 = x60774 + x60776;
          Fp x60778 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x60779 = x60778 * x14;
          Fp x60780 = x60777 + x60779;
          Fp x60781 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x60782 = x60781 * x30;
          Fp x60783 = x60780 + x60782;
          Fp x60784 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x60785 = x60784 * x15;
          Fp x60786 = x60783 + x60785;
          Fp x60787 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x60788 = x60787 * x31;
          Fp x60789 = x60786 + x60788;
          Fp x60790 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x60791 = x60790 * x16;
          Fp x60792 = x60789 + x60791;
          Fp x60793 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x60794 = x60793 * x32;
          Fp x60795 = x60792 + x60794;
          Fp x60796 = x60657 - x60795;
          Fp x60797 = x60796 * x33;
          if (x60797 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          {
            Fp x60798 = Fp(x60703.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x60798;
            Fp x60799 = x60703 - x60798;
            Fp x60800 = x60799 * x26;
            Fp x60801 = Fp(x60800.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x60801;
            Fp x60802 = x60800 - x60801;
            Fp x60803 = x60802 * x26;
            Fp x60804 = Fp(x60803.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x60804;
            Fp x60805 = x60803 - x60804;
            Fp x60806 = x60805 * x26;
            Fp x60807 = Fp(x60806.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x60807;
            Fp x60808 = x60806 - x60807;
            Fp x60809 = x60808 * x26;
            Fp x60810 = Fp(x60809.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x60810;
            Fp x60811 = x60809 - x60810;
            Fp x60812 = x60811 * x26;
            Fp x60813 = Fp(x60812.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x60813;
            Fp x60814 = x60812 - x60813;
            Fp x60815 = x60814 * x26;
            Fp x60816 = Fp(x60815.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x60816;
            Fp x60817 = x60815 - x60816;
            Fp x60818 = x60817 * x26;
            Fp x60819 = Fp(x60818.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x60819;
            Fp x60820 = x60818 - x60819;
            Fp x60821 = x60820 * x26;
            Fp x60822 = Fp(x60821.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x60822;
            Fp x60823 = x60821 - x60822;
            Fp x60824 = x60823 * x26;
            Fp x60825 = Fp(x60824.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x60825;
            Fp x60826 = x60824 - x60825;
            Fp x60827 = x60826 * x26;
            Fp x60828 = Fp(x60827.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x60828;
            Fp x60829 = x60827 - x60828;
            Fp x60830 = x60829 * x26;
            Fp x60831 = Fp(x60830.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x60831;
            Fp x60832 = x60830 - x60831;
            Fp x60833 = x60832 * x26;
            Fp x60834 = Fp(x60833.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x60834;
            Fp x60835 = x60833 - x60834;
            Fp x60836 = x60835 * x26;
            Fp x60837 = Fp(x60836.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x60837;
            Fp x60838 = x60836 - x60837;
            Fp x60839 = x60838 * x26;
            Fp x60840 = Fp(x60839.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x60840;
            Fp x60841 = x60839 - x60840;
            Fp x60842 = x60841 * x26;
            Fp x60843 = Fp(x60842.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x60843;
          }
          Fp x60844 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x60845 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x60846 = x60845 * x1;
          Fp x60847 = x60844 + x60846;
          Fp x60848 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x60849 = x60848 * x3;
          Fp x60850 = x60847 + x60849;
          Fp x60851 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x60852 = x60851 * x6;
          Fp x60853 = x60850 + x60852;
          Fp x60854 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x60855 = x60854 * x11;
          Fp x60856 = x60853 + x60855;
          Fp x60857 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x60858 = x60857 * x27;
          Fp x60859 = x60856 + x60858;
          Fp x60860 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x60861 = x60860 * x12;
          Fp x60862 = x60859 + x60861;
          Fp x60863 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x60864 = x60863 * x28;
          Fp x60865 = x60862 + x60864;
          Fp x60866 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x60867 = x60866 * x13;
          Fp x60868 = x60865 + x60867;
          Fp x60869 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x60870 = x60869 * x29;
          Fp x60871 = x60868 + x60870;
          Fp x60872 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x60873 = x60872 * x14;
          Fp x60874 = x60871 + x60873;
          Fp x60875 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x60876 = x60875 * x30;
          Fp x60877 = x60874 + x60876;
          Fp x60878 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x60879 = x60878 * x15;
          Fp x60880 = x60877 + x60879;
          Fp x60881 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x60882 = x60881 * x31;
          Fp x60883 = x60880 + x60882;
          Fp x60884 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x60885 = x60884 * x16;
          Fp x60886 = x60883 + x60885;
          Fp x60887 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x60888 = x60887 * x32;
          Fp x60889 = x60886 + x60888;
          Fp x60890 = x60703 - x60889;
          Fp x60891 = x60890 * x33;
          if (x60891 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          host_args[0] = x60609;
          host_args[1] = x60515;
          host_args[2] = x60889;
          host_args[3] = x60795;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%0x04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x60892 = x71 - x60331;
        if (x60892 != 0) {
          Fp x60893 = args[0][12 * steps + ((cycle - 0) & mask)];
          Fp x60894 = args[0][13 * steps + ((cycle - 0) & mask)];
          {
            Fp x60895 = Fp(x60893.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x60895;
            Fp x60896 = x60893 - x60895;
            Fp x60897 = x60896 * x26;
            Fp x60898 = Fp(x60897.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x60898;
            Fp x60899 = x60897 - x60898;
            Fp x60900 = x60899 * x26;
            Fp x60901 = Fp(x60900.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x60901;
            Fp x60902 = x60900 - x60901;
            Fp x60903 = x60902 * x26;
            Fp x60904 = Fp(x60903.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x60904;
            Fp x60905 = x60903 - x60904;
            Fp x60906 = x60905 * x26;
            Fp x60907 = Fp(x60906.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x60907;
            Fp x60908 = x60906 - x60907;
            Fp x60909 = x60908 * x26;
            Fp x60910 = Fp(x60909.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x60910;
            Fp x60911 = x60909 - x60910;
            Fp x60912 = x60911 * x26;
            Fp x60913 = Fp(x60912.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x60913;
            Fp x60914 = x60912 - x60913;
            Fp x60915 = x60914 * x26;
            Fp x60916 = Fp(x60915.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x60916;
            Fp x60917 = x60915 - x60916;
            Fp x60918 = x60917 * x26;
            Fp x60919 = Fp(x60918.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x60919;
            Fp x60920 = x60918 - x60919;
            Fp x60921 = x60920 * x26;
            Fp x60922 = Fp(x60921.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x60922;
            Fp x60923 = x60921 - x60922;
            Fp x60924 = x60923 * x26;
            Fp x60925 = Fp(x60924.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x60925;
            Fp x60926 = x60924 - x60925;
            Fp x60927 = x60926 * x26;
            Fp x60928 = Fp(x60927.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x60928;
            Fp x60929 = x60927 - x60928;
            Fp x60930 = x60929 * x26;
            Fp x60931 = Fp(x60930.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x60931;
            Fp x60932 = x60930 - x60931;
            Fp x60933 = x60932 * x26;
            Fp x60934 = Fp(x60933.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x60934;
            Fp x60935 = x60933 - x60934;
            Fp x60936 = x60935 * x26;
            Fp x60937 = Fp(x60936.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x60937;
            Fp x60938 = x60936 - x60937;
            Fp x60939 = x60938 * x26;
            Fp x60940 = Fp(x60939.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x60940;
          }
          Fp x60941 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x60942 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x60943 = x60942 * x1;
          Fp x60944 = x60941 + x60943;
          Fp x60945 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x60946 = x60945 * x3;
          Fp x60947 = x60944 + x60946;
          Fp x60948 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x60949 = x60948 * x6;
          Fp x60950 = x60947 + x60949;
          Fp x60951 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x60952 = x60951 * x11;
          Fp x60953 = x60950 + x60952;
          Fp x60954 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x60955 = x60954 * x27;
          Fp x60956 = x60953 + x60955;
          Fp x60957 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x60958 = x60957 * x12;
          Fp x60959 = x60956 + x60958;
          Fp x60960 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x60961 = x60960 * x28;
          Fp x60962 = x60959 + x60961;
          Fp x60963 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x60964 = x60963 * x13;
          Fp x60965 = x60962 + x60964;
          Fp x60966 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x60967 = x60966 * x29;
          Fp x60968 = x60965 + x60967;
          Fp x60969 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x60970 = x60969 * x14;
          Fp x60971 = x60968 + x60970;
          Fp x60972 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x60973 = x60972 * x30;
          Fp x60974 = x60971 + x60973;
          Fp x60975 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x60976 = x60975 * x15;
          Fp x60977 = x60974 + x60976;
          Fp x60978 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x60979 = x60978 * x31;
          Fp x60980 = x60977 + x60979;
          Fp x60981 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x60982 = x60981 * x16;
          Fp x60983 = x60980 + x60982;
          Fp x60984 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x60985 = x60984 * x32;
          Fp x60986 = x60983 + x60985;
          Fp x60987 = x60893 - x60986;
          Fp x60988 = x60987 * x33;
          if (x60988 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          {
            Fp x60989 = Fp(x60894.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x60989;
            Fp x60990 = x60894 - x60989;
            Fp x60991 = x60990 * x26;
            Fp x60992 = Fp(x60991.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x60992;
            Fp x60993 = x60991 - x60992;
            Fp x60994 = x60993 * x26;
            Fp x60995 = Fp(x60994.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x60995;
            Fp x60996 = x60994 - x60995;
            Fp x60997 = x60996 * x26;
            Fp x60998 = Fp(x60997.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x60998;
            Fp x60999 = x60997 - x60998;
            Fp x61000 = x60999 * x26;
            Fp x61001 = Fp(x61000.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x61001;
            Fp x61002 = x61000 - x61001;
            Fp x61003 = x61002 * x26;
            Fp x61004 = Fp(x61003.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x61004;
            Fp x61005 = x61003 - x61004;
            Fp x61006 = x61005 * x26;
            Fp x61007 = Fp(x61006.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x61007;
            Fp x61008 = x61006 - x61007;
            Fp x61009 = x61008 * x26;
            Fp x61010 = Fp(x61009.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x61010;
            Fp x61011 = x61009 - x61010;
            Fp x61012 = x61011 * x26;
            Fp x61013 = Fp(x61012.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x61013;
            Fp x61014 = x61012 - x61013;
            Fp x61015 = x61014 * x26;
            Fp x61016 = Fp(x61015.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x61016;
            Fp x61017 = x61015 - x61016;
            Fp x61018 = x61017 * x26;
            Fp x61019 = Fp(x61018.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x61019;
            Fp x61020 = x61018 - x61019;
            Fp x61021 = x61020 * x26;
            Fp x61022 = Fp(x61021.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x61022;
            Fp x61023 = x61021 - x61022;
            Fp x61024 = x61023 * x26;
            Fp x61025 = Fp(x61024.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x61025;
            Fp x61026 = x61024 - x61025;
            Fp x61027 = x61026 * x26;
            Fp x61028 = Fp(x61027.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x61028;
            Fp x61029 = x61027 - x61028;
            Fp x61030 = x61029 * x26;
            Fp x61031 = Fp(x61030.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x61031;
            Fp x61032 = x61030 - x61031;
            Fp x61033 = x61032 * x26;
            Fp x61034 = Fp(x61033.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x61034;
          }
          Fp x61035 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x61036 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x61037 = x61036 * x1;
          Fp x61038 = x61035 + x61037;
          Fp x61039 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x61040 = x61039 * x3;
          Fp x61041 = x61038 + x61040;
          Fp x61042 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x61043 = x61042 * x6;
          Fp x61044 = x61041 + x61043;
          Fp x61045 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x61046 = x61045 * x11;
          Fp x61047 = x61044 + x61046;
          Fp x61048 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x61049 = x61048 * x27;
          Fp x61050 = x61047 + x61049;
          Fp x61051 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x61052 = x61051 * x12;
          Fp x61053 = x61050 + x61052;
          Fp x61054 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x61055 = x61054 * x28;
          Fp x61056 = x61053 + x61055;
          Fp x61057 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x61058 = x61057 * x13;
          Fp x61059 = x61056 + x61058;
          Fp x61060 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x61061 = x61060 * x29;
          Fp x61062 = x61059 + x61061;
          Fp x61063 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x61064 = x61063 * x14;
          Fp x61065 = x61062 + x61064;
          Fp x61066 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x61067 = x61066 * x30;
          Fp x61068 = x61065 + x61067;
          Fp x61069 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x61070 = x61069 * x15;
          Fp x61071 = x61068 + x61070;
          Fp x61072 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x61073 = x61072 * x31;
          Fp x61074 = x61071 + x61073;
          Fp x61075 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x61076 = x61075 * x16;
          Fp x61077 = x61074 + x61076;
          Fp x61078 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x61079 = x61078 * x32;
          Fp x61080 = x61077 + x61079;
          Fp x61081 = x60894 - x61080;
          Fp x61082 = x61081 * x33;
          if (x61082 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          Fp x61083 = args[0][14 * steps + ((cycle - 0) & mask)];
          Fp x61084 = args[0][15 * steps + ((cycle - 0) & mask)];
          {
            Fp x61085 = Fp(x61083.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x61085;
            Fp x61086 = x61083 - x61085;
            Fp x61087 = x61086 * x26;
            Fp x61088 = Fp(x61087.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x61088;
            Fp x61089 = x61087 - x61088;
            Fp x61090 = x61089 * x26;
            Fp x61091 = Fp(x61090.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x61091;
            Fp x61092 = x61090 - x61091;
            Fp x61093 = x61092 * x26;
            Fp x61094 = Fp(x61093.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x61094;
            Fp x61095 = x61093 - x61094;
            Fp x61096 = x61095 * x26;
            Fp x61097 = Fp(x61096.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x61097;
            Fp x61098 = x61096 - x61097;
            Fp x61099 = x61098 * x26;
            Fp x61100 = Fp(x61099.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x61100;
            Fp x61101 = x61099 - x61100;
            Fp x61102 = x61101 * x26;
            Fp x61103 = Fp(x61102.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x61103;
            Fp x61104 = x61102 - x61103;
            Fp x61105 = x61104 * x26;
            Fp x61106 = Fp(x61105.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x61106;
            Fp x61107 = x61105 - x61106;
            Fp x61108 = x61107 * x26;
            Fp x61109 = Fp(x61108.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x61109;
            Fp x61110 = x61108 - x61109;
            Fp x61111 = x61110 * x26;
            Fp x61112 = Fp(x61111.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x61112;
            Fp x61113 = x61111 - x61112;
            Fp x61114 = x61113 * x26;
            Fp x61115 = Fp(x61114.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x61115;
            Fp x61116 = x61114 - x61115;
            Fp x61117 = x61116 * x26;
            Fp x61118 = Fp(x61117.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x61118;
            Fp x61119 = x61117 - x61118;
            Fp x61120 = x61119 * x26;
            Fp x61121 = Fp(x61120.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x61121;
            Fp x61122 = x61120 - x61121;
            Fp x61123 = x61122 * x26;
            Fp x61124 = Fp(x61123.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x61124;
            Fp x61125 = x61123 - x61124;
            Fp x61126 = x61125 * x26;
            Fp x61127 = Fp(x61126.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x61127;
            Fp x61128 = x61126 - x61127;
            Fp x61129 = x61128 * x26;
            Fp x61130 = Fp(x61129.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x61130;
          }
          Fp x61131 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x61132 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x61133 = x61132 * x1;
          Fp x61134 = x61131 + x61133;
          Fp x61135 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x61136 = x61135 * x3;
          Fp x61137 = x61134 + x61136;
          Fp x61138 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x61139 = x61138 * x6;
          Fp x61140 = x61137 + x61139;
          Fp x61141 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x61142 = x61141 * x11;
          Fp x61143 = x61140 + x61142;
          Fp x61144 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x61145 = x61144 * x27;
          Fp x61146 = x61143 + x61145;
          Fp x61147 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x61148 = x61147 * x12;
          Fp x61149 = x61146 + x61148;
          Fp x61150 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x61151 = x61150 * x28;
          Fp x61152 = x61149 + x61151;
          Fp x61153 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x61154 = x61153 * x13;
          Fp x61155 = x61152 + x61154;
          Fp x61156 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x61157 = x61156 * x29;
          Fp x61158 = x61155 + x61157;
          Fp x61159 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x61160 = x61159 * x14;
          Fp x61161 = x61158 + x61160;
          Fp x61162 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x61163 = x61162 * x30;
          Fp x61164 = x61161 + x61163;
          Fp x61165 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x61166 = x61165 * x15;
          Fp x61167 = x61164 + x61166;
          Fp x61168 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x61169 = x61168 * x31;
          Fp x61170 = x61167 + x61169;
          Fp x61171 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x61172 = x61171 * x16;
          Fp x61173 = x61170 + x61172;
          Fp x61174 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x61175 = x61174 * x32;
          Fp x61176 = x61173 + x61175;
          Fp x61177 = x61083 - x61176;
          Fp x61178 = x61177 * x33;
          if (x61178 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          {
            Fp x61179 = Fp(x61084.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x61179;
            Fp x61180 = x61084 - x61179;
            Fp x61181 = x61180 * x26;
            Fp x61182 = Fp(x61181.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x61182;
            Fp x61183 = x61181 - x61182;
            Fp x61184 = x61183 * x26;
            Fp x61185 = Fp(x61184.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x61185;
            Fp x61186 = x61184 - x61185;
            Fp x61187 = x61186 * x26;
            Fp x61188 = Fp(x61187.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x61188;
            Fp x61189 = x61187 - x61188;
            Fp x61190 = x61189 * x26;
            Fp x61191 = Fp(x61190.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x61191;
            Fp x61192 = x61190 - x61191;
            Fp x61193 = x61192 * x26;
            Fp x61194 = Fp(x61193.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x61194;
            Fp x61195 = x61193 - x61194;
            Fp x61196 = x61195 * x26;
            Fp x61197 = Fp(x61196.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x61197;
            Fp x61198 = x61196 - x61197;
            Fp x61199 = x61198 * x26;
            Fp x61200 = Fp(x61199.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x61200;
            Fp x61201 = x61199 - x61200;
            Fp x61202 = x61201 * x26;
            Fp x61203 = Fp(x61202.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x61203;
            Fp x61204 = x61202 - x61203;
            Fp x61205 = x61204 * x26;
            Fp x61206 = Fp(x61205.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x61206;
            Fp x61207 = x61205 - x61206;
            Fp x61208 = x61207 * x26;
            Fp x61209 = Fp(x61208.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x61209;
            Fp x61210 = x61208 - x61209;
            Fp x61211 = x61210 * x26;
            Fp x61212 = Fp(x61211.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x61212;
            Fp x61213 = x61211 - x61212;
            Fp x61214 = x61213 * x26;
            Fp x61215 = Fp(x61214.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x61215;
            Fp x61216 = x61214 - x61215;
            Fp x61217 = x61216 * x26;
            Fp x61218 = Fp(x61217.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x61218;
            Fp x61219 = x61217 - x61218;
            Fp x61220 = x61219 * x26;
            Fp x61221 = Fp(x61220.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x61221;
            Fp x61222 = x61220 - x61221;
            Fp x61223 = x61222 * x26;
            Fp x61224 = Fp(x61223.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x61224;
          }
          Fp x61225 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x61226 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x61227 = x61226 * x1;
          Fp x61228 = x61225 + x61227;
          Fp x61229 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x61230 = x61229 * x3;
          Fp x61231 = x61228 + x61230;
          Fp x61232 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x61233 = x61232 * x6;
          Fp x61234 = x61231 + x61233;
          Fp x61235 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x61236 = x61235 * x11;
          Fp x61237 = x61234 + x61236;
          Fp x61238 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x61239 = x61238 * x27;
          Fp x61240 = x61237 + x61239;
          Fp x61241 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x61242 = x61241 * x12;
          Fp x61243 = x61240 + x61242;
          Fp x61244 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x61245 = x61244 * x28;
          Fp x61246 = x61243 + x61245;
          Fp x61247 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x61248 = x61247 * x13;
          Fp x61249 = x61246 + x61248;
          Fp x61250 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x61251 = x61250 * x29;
          Fp x61252 = x61249 + x61251;
          Fp x61253 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x61254 = x61253 * x14;
          Fp x61255 = x61252 + x61254;
          Fp x61256 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x61257 = x61256 * x30;
          Fp x61258 = x61255 + x61257;
          Fp x61259 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x61260 = x61259 * x15;
          Fp x61261 = x61258 + x61260;
          Fp x61262 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x61263 = x61262 * x31;
          Fp x61264 = x61261 + x61263;
          Fp x61265 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x61266 = x61265 * x16;
          Fp x61267 = x61264 + x61266;
          Fp x61268 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x61269 = x61268 * x32;
          Fp x61270 = x61267 + x61269;
          Fp x61271 = x61084 - x61270;
          Fp x61272 = x61271 * x33;
          if (x61272 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          host_args[0] = x61080;
          host_args[1] = x60986;
          host_args[2] = x61270;
          host_args[3] = x61176;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        args[2][127 * steps + cycle] = x7;
        Fp x61273 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x61274 = x61273 - x71;
        Fp x61275 = x61273 * x61274;
        if (x61275 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:106");
        Fp x61276 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x61277 = x61276 - x71;
        Fp x61278 = x61276 * x61277;
        if (x61278 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:107");
        Fp x61279 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x61280 = x61279 - x71;
        Fp x61281 = x61279 * x61280;
        if (x61281 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:108");
        Fp x61282 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x61283 = x61282 - x71;
        Fp x61284 = x61282 * x61283;
        if (x61284 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:109");
      }
      if (x58327 != 0) {
        Fp x61285 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x61285;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x61285;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x61286 = host_outs[0];
          Fp x61287 = host_outs[1];
          args[2][129 * steps + cycle] = x61286;
          args[2][130 * steps + cycle] = x61287;
        }
        Fp x61288 = args[2][97 * steps + ((cycle - 1) & mask)];
        args[2][97 * steps + cycle] = x61288;
        Fp x61289 = args[2][98 * steps + ((cycle - 1) & mask)];
        args[2][98 * steps + cycle] = x61289;
        Fp x61290 = args[2][96 * steps + ((cycle - 1) & mask)];
        args[2][96 * steps + cycle] = x61290;
        Fp x61291 = args[2][123 * steps + ((cycle - 1) & mask)];
        args[2][123 * steps + cycle] = x61291;
        Fp x61292 = args[2][124 * steps + ((cycle - 1) & mask)];
        args[2][124 * steps + cycle] = x61292;
        Fp x61293 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x61293;
        Fp x61294 = args[2][97 * steps + ((cycle - 0) & mask)];
        if (x61294 != 0) {
          host(ctx, "log", "  INIT3, cont", host_args.data(), 0, host_outs.data(), 0);
          Fp x61295 = args[2][126 * steps + ((cycle - 1) & mask)];
          args[2][126 * steps + cycle] = x61295;
          args[2][122 * steps + cycle] = x61285;
        }
        Fp x61296 = x71 - x61294;
        if (x61296 != 0) {
          Fp x61297 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x61298 = x61297 * x17;
          Fp x61299 = args[2][129 * steps + ((cycle - 0) & mask)];
          Fp x61300 = x61298 + x61299;
          Fp x61301 = x61300 * x10;
          Fp x61302 = x61301 + x0;
          args[2][126 * steps + cycle] = x61302;
          Fp x61303 = x61285 + x71;
          args[2][122 * steps + cycle] = x61303;
        }
        Fp x61304 = args[2][98 * steps + ((cycle - 0) & mask)];
        if (x61304 != 0) {
          Fp x61305 = args[2][0 * steps + ((cycle - 4) & mask)];
          Fp x61306 = args[2][1 * steps + ((cycle - 4) & mask)];
          Fp x61307 = x61306 * x1;
          Fp x61308 = x61305 + x61307;
          Fp x61309 = args[2][2 * steps + ((cycle - 4) & mask)];
          Fp x61310 = x61309 * x3;
          Fp x61311 = x61308 + x61310;
          Fp x61312 = args[2][3 * steps + ((cycle - 4) & mask)];
          Fp x61313 = x61312 * x6;
          Fp x61314 = x61311 + x61313;
          Fp x61315 = args[2][4 * steps + ((cycle - 4) & mask)];
          Fp x61316 = x61315 * x11;
          Fp x61317 = x61314 + x61316;
          Fp x61318 = args[2][5 * steps + ((cycle - 4) & mask)];
          Fp x61319 = x61318 * x27;
          Fp x61320 = x61317 + x61319;
          Fp x61321 = args[2][6 * steps + ((cycle - 4) & mask)];
          Fp x61322 = x61321 * x12;
          Fp x61323 = x61320 + x61322;
          Fp x61324 = args[2][7 * steps + ((cycle - 4) & mask)];
          Fp x61325 = x61324 * x28;
          Fp x61326 = x61323 + x61325;
          Fp x61327 = args[2][8 * steps + ((cycle - 4) & mask)];
          Fp x61328 = x61327 * x13;
          Fp x61329 = x61326 + x61328;
          Fp x61330 = args[2][9 * steps + ((cycle - 4) & mask)];
          Fp x61331 = x61330 * x29;
          Fp x61332 = x61329 + x61331;
          Fp x61333 = args[2][10 * steps + ((cycle - 4) & mask)];
          Fp x61334 = x61333 * x14;
          Fp x61335 = x61332 + x61334;
          Fp x61336 = args[2][11 * steps + ((cycle - 4) & mask)];
          Fp x61337 = x61336 * x30;
          Fp x61338 = x61335 + x61337;
          Fp x61339 = args[2][12 * steps + ((cycle - 4) & mask)];
          Fp x61340 = x61339 * x15;
          Fp x61341 = x61338 + x61340;
          Fp x61342 = args[2][13 * steps + ((cycle - 4) & mask)];
          Fp x61343 = x61342 * x31;
          Fp x61344 = x61341 + x61343;
          Fp x61345 = args[2][14 * steps + ((cycle - 4) & mask)];
          Fp x61346 = x61345 * x16;
          Fp x61347 = x61344 + x61346;
          Fp x61348 = args[2][15 * steps + ((cycle - 4) & mask)];
          Fp x61349 = x61348 * x32;
          Fp x61350 = x61347 + x61349;
          Fp x61351 = args[2][16 * steps + ((cycle - 4) & mask)];
          Fp x61352 = args[2][17 * steps + ((cycle - 4) & mask)];
          Fp x61353 = x61352 * x1;
          Fp x61354 = x61351 + x61353;
          Fp x61355 = args[2][18 * steps + ((cycle - 4) & mask)];
          Fp x61356 = x61355 * x3;
          Fp x61357 = x61354 + x61356;
          Fp x61358 = args[2][19 * steps + ((cycle - 4) & mask)];
          Fp x61359 = x61358 * x6;
          Fp x61360 = x61357 + x61359;
          Fp x61361 = args[2][20 * steps + ((cycle - 4) & mask)];
          Fp x61362 = x61361 * x11;
          Fp x61363 = x61360 + x61362;
          Fp x61364 = args[2][21 * steps + ((cycle - 4) & mask)];
          Fp x61365 = x61364 * x27;
          Fp x61366 = x61363 + x61365;
          Fp x61367 = args[2][22 * steps + ((cycle - 4) & mask)];
          Fp x61368 = x61367 * x12;
          Fp x61369 = x61366 + x61368;
          Fp x61370 = args[2][23 * steps + ((cycle - 4) & mask)];
          Fp x61371 = x61370 * x28;
          Fp x61372 = x61369 + x61371;
          Fp x61373 = args[2][24 * steps + ((cycle - 4) & mask)];
          Fp x61374 = x61373 * x13;
          Fp x61375 = x61372 + x61374;
          Fp x61376 = args[2][25 * steps + ((cycle - 4) & mask)];
          Fp x61377 = x61376 * x29;
          Fp x61378 = x61375 + x61377;
          Fp x61379 = args[2][26 * steps + ((cycle - 4) & mask)];
          Fp x61380 = x61379 * x14;
          Fp x61381 = x61378 + x61380;
          Fp x61382 = args[2][27 * steps + ((cycle - 4) & mask)];
          Fp x61383 = x61382 * x30;
          Fp x61384 = x61381 + x61383;
          Fp x61385 = args[2][28 * steps + ((cycle - 4) & mask)];
          Fp x61386 = x61385 * x15;
          Fp x61387 = x61384 + x61386;
          Fp x61388 = args[2][29 * steps + ((cycle - 4) & mask)];
          Fp x61389 = x61388 * x31;
          Fp x61390 = x61387 + x61389;
          Fp x61391 = args[2][30 * steps + ((cycle - 4) & mask)];
          Fp x61392 = x61391 * x16;
          Fp x61393 = x61390 + x61392;
          Fp x61394 = args[2][31 * steps + ((cycle - 4) & mask)];
          Fp x61395 = x61394 * x32;
          Fp x61396 = x61393 + x61395;
          {
            Fp x61397 = Fp(x61350.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x61397;
            Fp x61398 = x61350 - x61397;
            Fp x61399 = x61398 * x26;
            Fp x61400 = Fp(x61399.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x61400;
            Fp x61401 = x61399 - x61400;
            Fp x61402 = x61401 * x26;
            Fp x61403 = Fp(x61402.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x61403;
            Fp x61404 = x61402 - x61403;
            Fp x61405 = x61404 * x26;
            Fp x61406 = Fp(x61405.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x61406;
            Fp x61407 = x61405 - x61406;
            Fp x61408 = x61407 * x26;
            Fp x61409 = Fp(x61408.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x61409;
            Fp x61410 = x61408 - x61409;
            Fp x61411 = x61410 * x26;
            Fp x61412 = Fp(x61411.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x61412;
            Fp x61413 = x61411 - x61412;
            Fp x61414 = x61413 * x26;
            Fp x61415 = Fp(x61414.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x61415;
            Fp x61416 = x61414 - x61415;
            Fp x61417 = x61416 * x26;
            Fp x61418 = Fp(x61417.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x61418;
            Fp x61419 = x61417 - x61418;
            Fp x61420 = x61419 * x26;
            Fp x61421 = Fp(x61420.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x61421;
            Fp x61422 = x61420 - x61421;
            Fp x61423 = x61422 * x26;
            Fp x61424 = Fp(x61423.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x61424;
            Fp x61425 = x61423 - x61424;
            Fp x61426 = x61425 * x26;
            Fp x61427 = Fp(x61426.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x61427;
            Fp x61428 = x61426 - x61427;
            Fp x61429 = x61428 * x26;
            Fp x61430 = Fp(x61429.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x61430;
            Fp x61431 = x61429 - x61430;
            Fp x61432 = x61431 * x26;
            Fp x61433 = Fp(x61432.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x61433;
            Fp x61434 = x61432 - x61433;
            Fp x61435 = x61434 * x26;
            Fp x61436 = Fp(x61435.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x61436;
            Fp x61437 = x61435 - x61436;
            Fp x61438 = x61437 * x26;
            Fp x61439 = Fp(x61438.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x61439;
            Fp x61440 = x61438 - x61439;
            Fp x61441 = x61440 * x26;
            Fp x61442 = Fp(x61441.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x61442;
          }
          Fp x61443 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x61444 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x61445 = x61444 * x1;
          Fp x61446 = x61443 + x61445;
          Fp x61447 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x61448 = x61447 * x3;
          Fp x61449 = x61446 + x61448;
          Fp x61450 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x61451 = x61450 * x6;
          Fp x61452 = x61449 + x61451;
          Fp x61453 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x61454 = x61453 * x11;
          Fp x61455 = x61452 + x61454;
          Fp x61456 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x61457 = x61456 * x27;
          Fp x61458 = x61455 + x61457;
          Fp x61459 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x61460 = x61459 * x12;
          Fp x61461 = x61458 + x61460;
          Fp x61462 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x61463 = x61462 * x28;
          Fp x61464 = x61461 + x61463;
          Fp x61465 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x61466 = x61465 * x13;
          Fp x61467 = x61464 + x61466;
          Fp x61468 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x61469 = x61468 * x29;
          Fp x61470 = x61467 + x61469;
          Fp x61471 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x61472 = x61471 * x14;
          Fp x61473 = x61470 + x61472;
          Fp x61474 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x61475 = x61474 * x30;
          Fp x61476 = x61473 + x61475;
          Fp x61477 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x61478 = x61477 * x15;
          Fp x61479 = x61476 + x61478;
          Fp x61480 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x61481 = x61480 * x31;
          Fp x61482 = x61479 + x61481;
          Fp x61483 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x61484 = x61483 * x16;
          Fp x61485 = x61482 + x61484;
          Fp x61486 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x61487 = x61486 * x32;
          Fp x61488 = x61485 + x61487;
          Fp x61489 = x61350 - x61488;
          Fp x61490 = x61489 * x33;
          if (x61490 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          {
            Fp x61491 = Fp(x61396.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x61491;
            Fp x61492 = x61396 - x61491;
            Fp x61493 = x61492 * x26;
            Fp x61494 = Fp(x61493.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x61494;
            Fp x61495 = x61493 - x61494;
            Fp x61496 = x61495 * x26;
            Fp x61497 = Fp(x61496.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x61497;
            Fp x61498 = x61496 - x61497;
            Fp x61499 = x61498 * x26;
            Fp x61500 = Fp(x61499.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x61500;
            Fp x61501 = x61499 - x61500;
            Fp x61502 = x61501 * x26;
            Fp x61503 = Fp(x61502.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x61503;
            Fp x61504 = x61502 - x61503;
            Fp x61505 = x61504 * x26;
            Fp x61506 = Fp(x61505.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x61506;
            Fp x61507 = x61505 - x61506;
            Fp x61508 = x61507 * x26;
            Fp x61509 = Fp(x61508.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x61509;
            Fp x61510 = x61508 - x61509;
            Fp x61511 = x61510 * x26;
            Fp x61512 = Fp(x61511.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x61512;
            Fp x61513 = x61511 - x61512;
            Fp x61514 = x61513 * x26;
            Fp x61515 = Fp(x61514.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x61515;
            Fp x61516 = x61514 - x61515;
            Fp x61517 = x61516 * x26;
            Fp x61518 = Fp(x61517.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x61518;
            Fp x61519 = x61517 - x61518;
            Fp x61520 = x61519 * x26;
            Fp x61521 = Fp(x61520.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x61521;
            Fp x61522 = x61520 - x61521;
            Fp x61523 = x61522 * x26;
            Fp x61524 = Fp(x61523.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x61524;
            Fp x61525 = x61523 - x61524;
            Fp x61526 = x61525 * x26;
            Fp x61527 = Fp(x61526.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x61527;
            Fp x61528 = x61526 - x61527;
            Fp x61529 = x61528 * x26;
            Fp x61530 = Fp(x61529.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x61530;
            Fp x61531 = x61529 - x61530;
            Fp x61532 = x61531 * x26;
            Fp x61533 = Fp(x61532.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x61533;
            Fp x61534 = x61532 - x61533;
            Fp x61535 = x61534 * x26;
            Fp x61536 = Fp(x61535.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x61536;
          }
          Fp x61537 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x61538 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x61539 = x61538 * x1;
          Fp x61540 = x61537 + x61539;
          Fp x61541 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x61542 = x61541 * x3;
          Fp x61543 = x61540 + x61542;
          Fp x61544 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x61545 = x61544 * x6;
          Fp x61546 = x61543 + x61545;
          Fp x61547 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x61548 = x61547 * x11;
          Fp x61549 = x61546 + x61548;
          Fp x61550 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x61551 = x61550 * x27;
          Fp x61552 = x61549 + x61551;
          Fp x61553 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x61554 = x61553 * x12;
          Fp x61555 = x61552 + x61554;
          Fp x61556 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x61557 = x61556 * x28;
          Fp x61558 = x61555 + x61557;
          Fp x61559 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x61560 = x61559 * x13;
          Fp x61561 = x61558 + x61560;
          Fp x61562 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x61563 = x61562 * x29;
          Fp x61564 = x61561 + x61563;
          Fp x61565 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x61566 = x61565 * x14;
          Fp x61567 = x61564 + x61566;
          Fp x61568 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x61569 = x61568 * x30;
          Fp x61570 = x61567 + x61569;
          Fp x61571 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x61572 = x61571 * x15;
          Fp x61573 = x61570 + x61572;
          Fp x61574 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x61575 = x61574 * x31;
          Fp x61576 = x61573 + x61575;
          Fp x61577 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x61578 = x61577 * x16;
          Fp x61579 = x61576 + x61578;
          Fp x61580 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x61581 = x61580 * x32;
          Fp x61582 = x61579 + x61581;
          Fp x61583 = x61396 - x61582;
          Fp x61584 = x61583 * x33;
          if (x61584 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:112");
          Fp x61585 = args[2][32 * steps + ((cycle - 4) & mask)];
          Fp x61586 = args[2][33 * steps + ((cycle - 4) & mask)];
          Fp x61587 = x61586 * x1;
          Fp x61588 = x61585 + x61587;
          Fp x61589 = args[2][34 * steps + ((cycle - 4) & mask)];
          Fp x61590 = x61589 * x3;
          Fp x61591 = x61588 + x61590;
          Fp x61592 = args[2][35 * steps + ((cycle - 4) & mask)];
          Fp x61593 = x61592 * x6;
          Fp x61594 = x61591 + x61593;
          Fp x61595 = args[2][36 * steps + ((cycle - 4) & mask)];
          Fp x61596 = x61595 * x11;
          Fp x61597 = x61594 + x61596;
          Fp x61598 = args[2][37 * steps + ((cycle - 4) & mask)];
          Fp x61599 = x61598 * x27;
          Fp x61600 = x61597 + x61599;
          Fp x61601 = args[2][38 * steps + ((cycle - 4) & mask)];
          Fp x61602 = x61601 * x12;
          Fp x61603 = x61600 + x61602;
          Fp x61604 = args[2][39 * steps + ((cycle - 4) & mask)];
          Fp x61605 = x61604 * x28;
          Fp x61606 = x61603 + x61605;
          Fp x61607 = args[2][40 * steps + ((cycle - 4) & mask)];
          Fp x61608 = x61607 * x13;
          Fp x61609 = x61606 + x61608;
          Fp x61610 = args[2][41 * steps + ((cycle - 4) & mask)];
          Fp x61611 = x61610 * x29;
          Fp x61612 = x61609 + x61611;
          Fp x61613 = args[2][42 * steps + ((cycle - 4) & mask)];
          Fp x61614 = x61613 * x14;
          Fp x61615 = x61612 + x61614;
          Fp x61616 = args[2][43 * steps + ((cycle - 4) & mask)];
          Fp x61617 = x61616 * x30;
          Fp x61618 = x61615 + x61617;
          Fp x61619 = args[2][44 * steps + ((cycle - 4) & mask)];
          Fp x61620 = x61619 * x15;
          Fp x61621 = x61618 + x61620;
          Fp x61622 = args[2][45 * steps + ((cycle - 4) & mask)];
          Fp x61623 = x61622 * x31;
          Fp x61624 = x61621 + x61623;
          Fp x61625 = args[2][46 * steps + ((cycle - 4) & mask)];
          Fp x61626 = x61625 * x16;
          Fp x61627 = x61624 + x61626;
          Fp x61628 = args[2][47 * steps + ((cycle - 4) & mask)];
          Fp x61629 = x61628 * x32;
          Fp x61630 = x61627 + x61629;
          Fp x61631 = args[2][48 * steps + ((cycle - 4) & mask)];
          Fp x61632 = args[2][49 * steps + ((cycle - 4) & mask)];
          Fp x61633 = x61632 * x1;
          Fp x61634 = x61631 + x61633;
          Fp x61635 = args[2][50 * steps + ((cycle - 4) & mask)];
          Fp x61636 = x61635 * x3;
          Fp x61637 = x61634 + x61636;
          Fp x61638 = args[2][51 * steps + ((cycle - 4) & mask)];
          Fp x61639 = x61638 * x6;
          Fp x61640 = x61637 + x61639;
          Fp x61641 = args[2][52 * steps + ((cycle - 4) & mask)];
          Fp x61642 = x61641 * x11;
          Fp x61643 = x61640 + x61642;
          Fp x61644 = args[2][53 * steps + ((cycle - 4) & mask)];
          Fp x61645 = x61644 * x27;
          Fp x61646 = x61643 + x61645;
          Fp x61647 = args[2][54 * steps + ((cycle - 4) & mask)];
          Fp x61648 = x61647 * x12;
          Fp x61649 = x61646 + x61648;
          Fp x61650 = args[2][55 * steps + ((cycle - 4) & mask)];
          Fp x61651 = x61650 * x28;
          Fp x61652 = x61649 + x61651;
          Fp x61653 = args[2][56 * steps + ((cycle - 4) & mask)];
          Fp x61654 = x61653 * x13;
          Fp x61655 = x61652 + x61654;
          Fp x61656 = args[2][57 * steps + ((cycle - 4) & mask)];
          Fp x61657 = x61656 * x29;
          Fp x61658 = x61655 + x61657;
          Fp x61659 = args[2][58 * steps + ((cycle - 4) & mask)];
          Fp x61660 = x61659 * x14;
          Fp x61661 = x61658 + x61660;
          Fp x61662 = args[2][59 * steps + ((cycle - 4) & mask)];
          Fp x61663 = x61662 * x30;
          Fp x61664 = x61661 + x61663;
          Fp x61665 = args[2][60 * steps + ((cycle - 4) & mask)];
          Fp x61666 = x61665 * x15;
          Fp x61667 = x61664 + x61666;
          Fp x61668 = args[2][61 * steps + ((cycle - 4) & mask)];
          Fp x61669 = x61668 * x31;
          Fp x61670 = x61667 + x61669;
          Fp x61671 = args[2][62 * steps + ((cycle - 4) & mask)];
          Fp x61672 = x61671 * x16;
          Fp x61673 = x61670 + x61672;
          Fp x61674 = args[2][63 * steps + ((cycle - 4) & mask)];
          Fp x61675 = x61674 * x32;
          Fp x61676 = x61673 + x61675;
          {
            Fp x61677 = Fp(x61630.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x61677;
            Fp x61678 = x61630 - x61677;
            Fp x61679 = x61678 * x26;
            Fp x61680 = Fp(x61679.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x61680;
            Fp x61681 = x61679 - x61680;
            Fp x61682 = x61681 * x26;
            Fp x61683 = Fp(x61682.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x61683;
            Fp x61684 = x61682 - x61683;
            Fp x61685 = x61684 * x26;
            Fp x61686 = Fp(x61685.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x61686;
            Fp x61687 = x61685 - x61686;
            Fp x61688 = x61687 * x26;
            Fp x61689 = Fp(x61688.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x61689;
            Fp x61690 = x61688 - x61689;
            Fp x61691 = x61690 * x26;
            Fp x61692 = Fp(x61691.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x61692;
            Fp x61693 = x61691 - x61692;
            Fp x61694 = x61693 * x26;
            Fp x61695 = Fp(x61694.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x61695;
            Fp x61696 = x61694 - x61695;
            Fp x61697 = x61696 * x26;
            Fp x61698 = Fp(x61697.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x61698;
            Fp x61699 = x61697 - x61698;
            Fp x61700 = x61699 * x26;
            Fp x61701 = Fp(x61700.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x61701;
            Fp x61702 = x61700 - x61701;
            Fp x61703 = x61702 * x26;
            Fp x61704 = Fp(x61703.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x61704;
            Fp x61705 = x61703 - x61704;
            Fp x61706 = x61705 * x26;
            Fp x61707 = Fp(x61706.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x61707;
            Fp x61708 = x61706 - x61707;
            Fp x61709 = x61708 * x26;
            Fp x61710 = Fp(x61709.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x61710;
            Fp x61711 = x61709 - x61710;
            Fp x61712 = x61711 * x26;
            Fp x61713 = Fp(x61712.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x61713;
            Fp x61714 = x61712 - x61713;
            Fp x61715 = x61714 * x26;
            Fp x61716 = Fp(x61715.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x61716;
            Fp x61717 = x61715 - x61716;
            Fp x61718 = x61717 * x26;
            Fp x61719 = Fp(x61718.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x61719;
            Fp x61720 = x61718 - x61719;
            Fp x61721 = x61720 * x26;
            Fp x61722 = Fp(x61721.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x61722;
          }
          Fp x61723 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x61724 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x61725 = x61724 * x1;
          Fp x61726 = x61723 + x61725;
          Fp x61727 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x61728 = x61727 * x3;
          Fp x61729 = x61726 + x61728;
          Fp x61730 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x61731 = x61730 * x6;
          Fp x61732 = x61729 + x61731;
          Fp x61733 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x61734 = x61733 * x11;
          Fp x61735 = x61732 + x61734;
          Fp x61736 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x61737 = x61736 * x27;
          Fp x61738 = x61735 + x61737;
          Fp x61739 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x61740 = x61739 * x12;
          Fp x61741 = x61738 + x61740;
          Fp x61742 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x61743 = x61742 * x28;
          Fp x61744 = x61741 + x61743;
          Fp x61745 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x61746 = x61745 * x13;
          Fp x61747 = x61744 + x61746;
          Fp x61748 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x61749 = x61748 * x29;
          Fp x61750 = x61747 + x61749;
          Fp x61751 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x61752 = x61751 * x14;
          Fp x61753 = x61750 + x61752;
          Fp x61754 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x61755 = x61754 * x30;
          Fp x61756 = x61753 + x61755;
          Fp x61757 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x61758 = x61757 * x15;
          Fp x61759 = x61756 + x61758;
          Fp x61760 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x61761 = x61760 * x31;
          Fp x61762 = x61759 + x61761;
          Fp x61763 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x61764 = x61763 * x16;
          Fp x61765 = x61762 + x61764;
          Fp x61766 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x61767 = x61766 * x32;
          Fp x61768 = x61765 + x61767;
          Fp x61769 = x61630 - x61768;
          Fp x61770 = x61769 * x33;
          if (x61770 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          {
            Fp x61771 = Fp(x61676.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x61771;
            Fp x61772 = x61676 - x61771;
            Fp x61773 = x61772 * x26;
            Fp x61774 = Fp(x61773.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x61774;
            Fp x61775 = x61773 - x61774;
            Fp x61776 = x61775 * x26;
            Fp x61777 = Fp(x61776.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x61777;
            Fp x61778 = x61776 - x61777;
            Fp x61779 = x61778 * x26;
            Fp x61780 = Fp(x61779.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x61780;
            Fp x61781 = x61779 - x61780;
            Fp x61782 = x61781 * x26;
            Fp x61783 = Fp(x61782.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x61783;
            Fp x61784 = x61782 - x61783;
            Fp x61785 = x61784 * x26;
            Fp x61786 = Fp(x61785.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x61786;
            Fp x61787 = x61785 - x61786;
            Fp x61788 = x61787 * x26;
            Fp x61789 = Fp(x61788.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x61789;
            Fp x61790 = x61788 - x61789;
            Fp x61791 = x61790 * x26;
            Fp x61792 = Fp(x61791.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x61792;
            Fp x61793 = x61791 - x61792;
            Fp x61794 = x61793 * x26;
            Fp x61795 = Fp(x61794.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x61795;
            Fp x61796 = x61794 - x61795;
            Fp x61797 = x61796 * x26;
            Fp x61798 = Fp(x61797.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x61798;
            Fp x61799 = x61797 - x61798;
            Fp x61800 = x61799 * x26;
            Fp x61801 = Fp(x61800.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x61801;
            Fp x61802 = x61800 - x61801;
            Fp x61803 = x61802 * x26;
            Fp x61804 = Fp(x61803.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x61804;
            Fp x61805 = x61803 - x61804;
            Fp x61806 = x61805 * x26;
            Fp x61807 = Fp(x61806.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x61807;
            Fp x61808 = x61806 - x61807;
            Fp x61809 = x61808 * x26;
            Fp x61810 = Fp(x61809.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x61810;
            Fp x61811 = x61809 - x61810;
            Fp x61812 = x61811 * x26;
            Fp x61813 = Fp(x61812.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x61813;
            Fp x61814 = x61812 - x61813;
            Fp x61815 = x61814 * x26;
            Fp x61816 = Fp(x61815.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x61816;
          }
          Fp x61817 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x61818 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x61819 = x61818 * x1;
          Fp x61820 = x61817 + x61819;
          Fp x61821 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x61822 = x61821 * x3;
          Fp x61823 = x61820 + x61822;
          Fp x61824 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x61825 = x61824 * x6;
          Fp x61826 = x61823 + x61825;
          Fp x61827 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x61828 = x61827 * x11;
          Fp x61829 = x61826 + x61828;
          Fp x61830 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x61831 = x61830 * x27;
          Fp x61832 = x61829 + x61831;
          Fp x61833 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x61834 = x61833 * x12;
          Fp x61835 = x61832 + x61834;
          Fp x61836 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x61837 = x61836 * x28;
          Fp x61838 = x61835 + x61837;
          Fp x61839 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x61840 = x61839 * x13;
          Fp x61841 = x61838 + x61840;
          Fp x61842 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x61843 = x61842 * x29;
          Fp x61844 = x61841 + x61843;
          Fp x61845 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x61846 = x61845 * x14;
          Fp x61847 = x61844 + x61846;
          Fp x61848 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x61849 = x61848 * x30;
          Fp x61850 = x61847 + x61849;
          Fp x61851 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x61852 = x61851 * x15;
          Fp x61853 = x61850 + x61852;
          Fp x61854 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x61855 = x61854 * x31;
          Fp x61856 = x61853 + x61855;
          Fp x61857 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x61858 = x61857 * x16;
          Fp x61859 = x61856 + x61858;
          Fp x61860 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x61861 = x61860 * x32;
          Fp x61862 = x61859 + x61861;
          Fp x61863 = x61676 - x61862;
          Fp x61864 = x61863 * x33;
          if (x61864 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:113");
          host_args[0] = x61582;
          host_args[1] = x61488;
          host_args[2] = x61862;
          host_args[3] = x61768;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%0x04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        Fp x61865 = x71 - x61304;
        if (x61865 != 0) {
          Fp x61866 = args[0][12 * steps + ((cycle - 0) & mask)];
          Fp x61867 = args[0][13 * steps + ((cycle - 0) & mask)];
          {
            Fp x61868 = Fp(x61866.asUInt32() & x71.asUInt32());
            args[2][0 * steps + cycle] = x61868;
            Fp x61869 = x61866 - x61868;
            Fp x61870 = x61869 * x26;
            Fp x61871 = Fp(x61870.asUInt32() & x71.asUInt32());
            args[2][1 * steps + cycle] = x61871;
            Fp x61872 = x61870 - x61871;
            Fp x61873 = x61872 * x26;
            Fp x61874 = Fp(x61873.asUInt32() & x71.asUInt32());
            args[2][2 * steps + cycle] = x61874;
            Fp x61875 = x61873 - x61874;
            Fp x61876 = x61875 * x26;
            Fp x61877 = Fp(x61876.asUInt32() & x71.asUInt32());
            args[2][3 * steps + cycle] = x61877;
            Fp x61878 = x61876 - x61877;
            Fp x61879 = x61878 * x26;
            Fp x61880 = Fp(x61879.asUInt32() & x71.asUInt32());
            args[2][4 * steps + cycle] = x61880;
            Fp x61881 = x61879 - x61880;
            Fp x61882 = x61881 * x26;
            Fp x61883 = Fp(x61882.asUInt32() & x71.asUInt32());
            args[2][5 * steps + cycle] = x61883;
            Fp x61884 = x61882 - x61883;
            Fp x61885 = x61884 * x26;
            Fp x61886 = Fp(x61885.asUInt32() & x71.asUInt32());
            args[2][6 * steps + cycle] = x61886;
            Fp x61887 = x61885 - x61886;
            Fp x61888 = x61887 * x26;
            Fp x61889 = Fp(x61888.asUInt32() & x71.asUInt32());
            args[2][7 * steps + cycle] = x61889;
            Fp x61890 = x61888 - x61889;
            Fp x61891 = x61890 * x26;
            Fp x61892 = Fp(x61891.asUInt32() & x71.asUInt32());
            args[2][8 * steps + cycle] = x61892;
            Fp x61893 = x61891 - x61892;
            Fp x61894 = x61893 * x26;
            Fp x61895 = Fp(x61894.asUInt32() & x71.asUInt32());
            args[2][9 * steps + cycle] = x61895;
            Fp x61896 = x61894 - x61895;
            Fp x61897 = x61896 * x26;
            Fp x61898 = Fp(x61897.asUInt32() & x71.asUInt32());
            args[2][10 * steps + cycle] = x61898;
            Fp x61899 = x61897 - x61898;
            Fp x61900 = x61899 * x26;
            Fp x61901 = Fp(x61900.asUInt32() & x71.asUInt32());
            args[2][11 * steps + cycle] = x61901;
            Fp x61902 = x61900 - x61901;
            Fp x61903 = x61902 * x26;
            Fp x61904 = Fp(x61903.asUInt32() & x71.asUInt32());
            args[2][12 * steps + cycle] = x61904;
            Fp x61905 = x61903 - x61904;
            Fp x61906 = x61905 * x26;
            Fp x61907 = Fp(x61906.asUInt32() & x71.asUInt32());
            args[2][13 * steps + cycle] = x61907;
            Fp x61908 = x61906 - x61907;
            Fp x61909 = x61908 * x26;
            Fp x61910 = Fp(x61909.asUInt32() & x71.asUInt32());
            args[2][14 * steps + cycle] = x61910;
            Fp x61911 = x61909 - x61910;
            Fp x61912 = x61911 * x26;
            Fp x61913 = Fp(x61912.asUInt32() & x71.asUInt32());
            args[2][15 * steps + cycle] = x61913;
          }
          Fp x61914 = args[2][0 * steps + ((cycle - 0) & mask)];
          Fp x61915 = args[2][1 * steps + ((cycle - 0) & mask)];
          Fp x61916 = x61915 * x1;
          Fp x61917 = x61914 + x61916;
          Fp x61918 = args[2][2 * steps + ((cycle - 0) & mask)];
          Fp x61919 = x61918 * x3;
          Fp x61920 = x61917 + x61919;
          Fp x61921 = args[2][3 * steps + ((cycle - 0) & mask)];
          Fp x61922 = x61921 * x6;
          Fp x61923 = x61920 + x61922;
          Fp x61924 = args[2][4 * steps + ((cycle - 0) & mask)];
          Fp x61925 = x61924 * x11;
          Fp x61926 = x61923 + x61925;
          Fp x61927 = args[2][5 * steps + ((cycle - 0) & mask)];
          Fp x61928 = x61927 * x27;
          Fp x61929 = x61926 + x61928;
          Fp x61930 = args[2][6 * steps + ((cycle - 0) & mask)];
          Fp x61931 = x61930 * x12;
          Fp x61932 = x61929 + x61931;
          Fp x61933 = args[2][7 * steps + ((cycle - 0) & mask)];
          Fp x61934 = x61933 * x28;
          Fp x61935 = x61932 + x61934;
          Fp x61936 = args[2][8 * steps + ((cycle - 0) & mask)];
          Fp x61937 = x61936 * x13;
          Fp x61938 = x61935 + x61937;
          Fp x61939 = args[2][9 * steps + ((cycle - 0) & mask)];
          Fp x61940 = x61939 * x29;
          Fp x61941 = x61938 + x61940;
          Fp x61942 = args[2][10 * steps + ((cycle - 0) & mask)];
          Fp x61943 = x61942 * x14;
          Fp x61944 = x61941 + x61943;
          Fp x61945 = args[2][11 * steps + ((cycle - 0) & mask)];
          Fp x61946 = x61945 * x30;
          Fp x61947 = x61944 + x61946;
          Fp x61948 = args[2][12 * steps + ((cycle - 0) & mask)];
          Fp x61949 = x61948 * x15;
          Fp x61950 = x61947 + x61949;
          Fp x61951 = args[2][13 * steps + ((cycle - 0) & mask)];
          Fp x61952 = x61951 * x31;
          Fp x61953 = x61950 + x61952;
          Fp x61954 = args[2][14 * steps + ((cycle - 0) & mask)];
          Fp x61955 = x61954 * x16;
          Fp x61956 = x61953 + x61955;
          Fp x61957 = args[2][15 * steps + ((cycle - 0) & mask)];
          Fp x61958 = x61957 * x32;
          Fp x61959 = x61956 + x61958;
          Fp x61960 = x61866 - x61959;
          Fp x61961 = x61960 * x33;
          if (x61961 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          {
            Fp x61962 = Fp(x61867.asUInt32() & x71.asUInt32());
            args[2][16 * steps + cycle] = x61962;
            Fp x61963 = x61867 - x61962;
            Fp x61964 = x61963 * x26;
            Fp x61965 = Fp(x61964.asUInt32() & x71.asUInt32());
            args[2][17 * steps + cycle] = x61965;
            Fp x61966 = x61964 - x61965;
            Fp x61967 = x61966 * x26;
            Fp x61968 = Fp(x61967.asUInt32() & x71.asUInt32());
            args[2][18 * steps + cycle] = x61968;
            Fp x61969 = x61967 - x61968;
            Fp x61970 = x61969 * x26;
            Fp x61971 = Fp(x61970.asUInt32() & x71.asUInt32());
            args[2][19 * steps + cycle] = x61971;
            Fp x61972 = x61970 - x61971;
            Fp x61973 = x61972 * x26;
            Fp x61974 = Fp(x61973.asUInt32() & x71.asUInt32());
            args[2][20 * steps + cycle] = x61974;
            Fp x61975 = x61973 - x61974;
            Fp x61976 = x61975 * x26;
            Fp x61977 = Fp(x61976.asUInt32() & x71.asUInt32());
            args[2][21 * steps + cycle] = x61977;
            Fp x61978 = x61976 - x61977;
            Fp x61979 = x61978 * x26;
            Fp x61980 = Fp(x61979.asUInt32() & x71.asUInt32());
            args[2][22 * steps + cycle] = x61980;
            Fp x61981 = x61979 - x61980;
            Fp x61982 = x61981 * x26;
            Fp x61983 = Fp(x61982.asUInt32() & x71.asUInt32());
            args[2][23 * steps + cycle] = x61983;
            Fp x61984 = x61982 - x61983;
            Fp x61985 = x61984 * x26;
            Fp x61986 = Fp(x61985.asUInt32() & x71.asUInt32());
            args[2][24 * steps + cycle] = x61986;
            Fp x61987 = x61985 - x61986;
            Fp x61988 = x61987 * x26;
            Fp x61989 = Fp(x61988.asUInt32() & x71.asUInt32());
            args[2][25 * steps + cycle] = x61989;
            Fp x61990 = x61988 - x61989;
            Fp x61991 = x61990 * x26;
            Fp x61992 = Fp(x61991.asUInt32() & x71.asUInt32());
            args[2][26 * steps + cycle] = x61992;
            Fp x61993 = x61991 - x61992;
            Fp x61994 = x61993 * x26;
            Fp x61995 = Fp(x61994.asUInt32() & x71.asUInt32());
            args[2][27 * steps + cycle] = x61995;
            Fp x61996 = x61994 - x61995;
            Fp x61997 = x61996 * x26;
            Fp x61998 = Fp(x61997.asUInt32() & x71.asUInt32());
            args[2][28 * steps + cycle] = x61998;
            Fp x61999 = x61997 - x61998;
            Fp x62000 = x61999 * x26;
            Fp x62001 = Fp(x62000.asUInt32() & x71.asUInt32());
            args[2][29 * steps + cycle] = x62001;
            Fp x62002 = x62000 - x62001;
            Fp x62003 = x62002 * x26;
            Fp x62004 = Fp(x62003.asUInt32() & x71.asUInt32());
            args[2][30 * steps + cycle] = x62004;
            Fp x62005 = x62003 - x62004;
            Fp x62006 = x62005 * x26;
            Fp x62007 = Fp(x62006.asUInt32() & x71.asUInt32());
            args[2][31 * steps + cycle] = x62007;
          }
          Fp x62008 = args[2][16 * steps + ((cycle - 0) & mask)];
          Fp x62009 = args[2][17 * steps + ((cycle - 0) & mask)];
          Fp x62010 = x62009 * x1;
          Fp x62011 = x62008 + x62010;
          Fp x62012 = args[2][18 * steps + ((cycle - 0) & mask)];
          Fp x62013 = x62012 * x3;
          Fp x62014 = x62011 + x62013;
          Fp x62015 = args[2][19 * steps + ((cycle - 0) & mask)];
          Fp x62016 = x62015 * x6;
          Fp x62017 = x62014 + x62016;
          Fp x62018 = args[2][20 * steps + ((cycle - 0) & mask)];
          Fp x62019 = x62018 * x11;
          Fp x62020 = x62017 + x62019;
          Fp x62021 = args[2][21 * steps + ((cycle - 0) & mask)];
          Fp x62022 = x62021 * x27;
          Fp x62023 = x62020 + x62022;
          Fp x62024 = args[2][22 * steps + ((cycle - 0) & mask)];
          Fp x62025 = x62024 * x12;
          Fp x62026 = x62023 + x62025;
          Fp x62027 = args[2][23 * steps + ((cycle - 0) & mask)];
          Fp x62028 = x62027 * x28;
          Fp x62029 = x62026 + x62028;
          Fp x62030 = args[2][24 * steps + ((cycle - 0) & mask)];
          Fp x62031 = x62030 * x13;
          Fp x62032 = x62029 + x62031;
          Fp x62033 = args[2][25 * steps + ((cycle - 0) & mask)];
          Fp x62034 = x62033 * x29;
          Fp x62035 = x62032 + x62034;
          Fp x62036 = args[2][26 * steps + ((cycle - 0) & mask)];
          Fp x62037 = x62036 * x14;
          Fp x62038 = x62035 + x62037;
          Fp x62039 = args[2][27 * steps + ((cycle - 0) & mask)];
          Fp x62040 = x62039 * x30;
          Fp x62041 = x62038 + x62040;
          Fp x62042 = args[2][28 * steps + ((cycle - 0) & mask)];
          Fp x62043 = x62042 * x15;
          Fp x62044 = x62041 + x62043;
          Fp x62045 = args[2][29 * steps + ((cycle - 0) & mask)];
          Fp x62046 = x62045 * x31;
          Fp x62047 = x62044 + x62046;
          Fp x62048 = args[2][30 * steps + ((cycle - 0) & mask)];
          Fp x62049 = x62048 * x16;
          Fp x62050 = x62047 + x62049;
          Fp x62051 = args[2][31 * steps + ((cycle - 0) & mask)];
          Fp x62052 = x62051 * x32;
          Fp x62053 = x62050 + x62052;
          Fp x62054 = x61867 - x62053;
          Fp x62055 = x62054 * x33;
          if (x62055 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:118");
          Fp x62056 = args[0][14 * steps + ((cycle - 0) & mask)];
          Fp x62057 = args[0][15 * steps + ((cycle - 0) & mask)];
          {
            Fp x62058 = Fp(x62056.asUInt32() & x71.asUInt32());
            args[2][32 * steps + cycle] = x62058;
            Fp x62059 = x62056 - x62058;
            Fp x62060 = x62059 * x26;
            Fp x62061 = Fp(x62060.asUInt32() & x71.asUInt32());
            args[2][33 * steps + cycle] = x62061;
            Fp x62062 = x62060 - x62061;
            Fp x62063 = x62062 * x26;
            Fp x62064 = Fp(x62063.asUInt32() & x71.asUInt32());
            args[2][34 * steps + cycle] = x62064;
            Fp x62065 = x62063 - x62064;
            Fp x62066 = x62065 * x26;
            Fp x62067 = Fp(x62066.asUInt32() & x71.asUInt32());
            args[2][35 * steps + cycle] = x62067;
            Fp x62068 = x62066 - x62067;
            Fp x62069 = x62068 * x26;
            Fp x62070 = Fp(x62069.asUInt32() & x71.asUInt32());
            args[2][36 * steps + cycle] = x62070;
            Fp x62071 = x62069 - x62070;
            Fp x62072 = x62071 * x26;
            Fp x62073 = Fp(x62072.asUInt32() & x71.asUInt32());
            args[2][37 * steps + cycle] = x62073;
            Fp x62074 = x62072 - x62073;
            Fp x62075 = x62074 * x26;
            Fp x62076 = Fp(x62075.asUInt32() & x71.asUInt32());
            args[2][38 * steps + cycle] = x62076;
            Fp x62077 = x62075 - x62076;
            Fp x62078 = x62077 * x26;
            Fp x62079 = Fp(x62078.asUInt32() & x71.asUInt32());
            args[2][39 * steps + cycle] = x62079;
            Fp x62080 = x62078 - x62079;
            Fp x62081 = x62080 * x26;
            Fp x62082 = Fp(x62081.asUInt32() & x71.asUInt32());
            args[2][40 * steps + cycle] = x62082;
            Fp x62083 = x62081 - x62082;
            Fp x62084 = x62083 * x26;
            Fp x62085 = Fp(x62084.asUInt32() & x71.asUInt32());
            args[2][41 * steps + cycle] = x62085;
            Fp x62086 = x62084 - x62085;
            Fp x62087 = x62086 * x26;
            Fp x62088 = Fp(x62087.asUInt32() & x71.asUInt32());
            args[2][42 * steps + cycle] = x62088;
            Fp x62089 = x62087 - x62088;
            Fp x62090 = x62089 * x26;
            Fp x62091 = Fp(x62090.asUInt32() & x71.asUInt32());
            args[2][43 * steps + cycle] = x62091;
            Fp x62092 = x62090 - x62091;
            Fp x62093 = x62092 * x26;
            Fp x62094 = Fp(x62093.asUInt32() & x71.asUInt32());
            args[2][44 * steps + cycle] = x62094;
            Fp x62095 = x62093 - x62094;
            Fp x62096 = x62095 * x26;
            Fp x62097 = Fp(x62096.asUInt32() & x71.asUInt32());
            args[2][45 * steps + cycle] = x62097;
            Fp x62098 = x62096 - x62097;
            Fp x62099 = x62098 * x26;
            Fp x62100 = Fp(x62099.asUInt32() & x71.asUInt32());
            args[2][46 * steps + cycle] = x62100;
            Fp x62101 = x62099 - x62100;
            Fp x62102 = x62101 * x26;
            Fp x62103 = Fp(x62102.asUInt32() & x71.asUInt32());
            args[2][47 * steps + cycle] = x62103;
          }
          Fp x62104 = args[2][32 * steps + ((cycle - 0) & mask)];
          Fp x62105 = args[2][33 * steps + ((cycle - 0) & mask)];
          Fp x62106 = x62105 * x1;
          Fp x62107 = x62104 + x62106;
          Fp x62108 = args[2][34 * steps + ((cycle - 0) & mask)];
          Fp x62109 = x62108 * x3;
          Fp x62110 = x62107 + x62109;
          Fp x62111 = args[2][35 * steps + ((cycle - 0) & mask)];
          Fp x62112 = x62111 * x6;
          Fp x62113 = x62110 + x62112;
          Fp x62114 = args[2][36 * steps + ((cycle - 0) & mask)];
          Fp x62115 = x62114 * x11;
          Fp x62116 = x62113 + x62115;
          Fp x62117 = args[2][37 * steps + ((cycle - 0) & mask)];
          Fp x62118 = x62117 * x27;
          Fp x62119 = x62116 + x62118;
          Fp x62120 = args[2][38 * steps + ((cycle - 0) & mask)];
          Fp x62121 = x62120 * x12;
          Fp x62122 = x62119 + x62121;
          Fp x62123 = args[2][39 * steps + ((cycle - 0) & mask)];
          Fp x62124 = x62123 * x28;
          Fp x62125 = x62122 + x62124;
          Fp x62126 = args[2][40 * steps + ((cycle - 0) & mask)];
          Fp x62127 = x62126 * x13;
          Fp x62128 = x62125 + x62127;
          Fp x62129 = args[2][41 * steps + ((cycle - 0) & mask)];
          Fp x62130 = x62129 * x29;
          Fp x62131 = x62128 + x62130;
          Fp x62132 = args[2][42 * steps + ((cycle - 0) & mask)];
          Fp x62133 = x62132 * x14;
          Fp x62134 = x62131 + x62133;
          Fp x62135 = args[2][43 * steps + ((cycle - 0) & mask)];
          Fp x62136 = x62135 * x30;
          Fp x62137 = x62134 + x62136;
          Fp x62138 = args[2][44 * steps + ((cycle - 0) & mask)];
          Fp x62139 = x62138 * x15;
          Fp x62140 = x62137 + x62139;
          Fp x62141 = args[2][45 * steps + ((cycle - 0) & mask)];
          Fp x62142 = x62141 * x31;
          Fp x62143 = x62140 + x62142;
          Fp x62144 = args[2][46 * steps + ((cycle - 0) & mask)];
          Fp x62145 = x62144 * x16;
          Fp x62146 = x62143 + x62145;
          Fp x62147 = args[2][47 * steps + ((cycle - 0) & mask)];
          Fp x62148 = x62147 * x32;
          Fp x62149 = x62146 + x62148;
          Fp x62150 = x62056 - x62149;
          Fp x62151 = x62150 * x33;
          if (x62151 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          {
            Fp x62152 = Fp(x62057.asUInt32() & x71.asUInt32());
            args[2][48 * steps + cycle] = x62152;
            Fp x62153 = x62057 - x62152;
            Fp x62154 = x62153 * x26;
            Fp x62155 = Fp(x62154.asUInt32() & x71.asUInt32());
            args[2][49 * steps + cycle] = x62155;
            Fp x62156 = x62154 - x62155;
            Fp x62157 = x62156 * x26;
            Fp x62158 = Fp(x62157.asUInt32() & x71.asUInt32());
            args[2][50 * steps + cycle] = x62158;
            Fp x62159 = x62157 - x62158;
            Fp x62160 = x62159 * x26;
            Fp x62161 = Fp(x62160.asUInt32() & x71.asUInt32());
            args[2][51 * steps + cycle] = x62161;
            Fp x62162 = x62160 - x62161;
            Fp x62163 = x62162 * x26;
            Fp x62164 = Fp(x62163.asUInt32() & x71.asUInt32());
            args[2][52 * steps + cycle] = x62164;
            Fp x62165 = x62163 - x62164;
            Fp x62166 = x62165 * x26;
            Fp x62167 = Fp(x62166.asUInt32() & x71.asUInt32());
            args[2][53 * steps + cycle] = x62167;
            Fp x62168 = x62166 - x62167;
            Fp x62169 = x62168 * x26;
            Fp x62170 = Fp(x62169.asUInt32() & x71.asUInt32());
            args[2][54 * steps + cycle] = x62170;
            Fp x62171 = x62169 - x62170;
            Fp x62172 = x62171 * x26;
            Fp x62173 = Fp(x62172.asUInt32() & x71.asUInt32());
            args[2][55 * steps + cycle] = x62173;
            Fp x62174 = x62172 - x62173;
            Fp x62175 = x62174 * x26;
            Fp x62176 = Fp(x62175.asUInt32() & x71.asUInt32());
            args[2][56 * steps + cycle] = x62176;
            Fp x62177 = x62175 - x62176;
            Fp x62178 = x62177 * x26;
            Fp x62179 = Fp(x62178.asUInt32() & x71.asUInt32());
            args[2][57 * steps + cycle] = x62179;
            Fp x62180 = x62178 - x62179;
            Fp x62181 = x62180 * x26;
            Fp x62182 = Fp(x62181.asUInt32() & x71.asUInt32());
            args[2][58 * steps + cycle] = x62182;
            Fp x62183 = x62181 - x62182;
            Fp x62184 = x62183 * x26;
            Fp x62185 = Fp(x62184.asUInt32() & x71.asUInt32());
            args[2][59 * steps + cycle] = x62185;
            Fp x62186 = x62184 - x62185;
            Fp x62187 = x62186 * x26;
            Fp x62188 = Fp(x62187.asUInt32() & x71.asUInt32());
            args[2][60 * steps + cycle] = x62188;
            Fp x62189 = x62187 - x62188;
            Fp x62190 = x62189 * x26;
            Fp x62191 = Fp(x62190.asUInt32() & x71.asUInt32());
            args[2][61 * steps + cycle] = x62191;
            Fp x62192 = x62190 - x62191;
            Fp x62193 = x62192 * x26;
            Fp x62194 = Fp(x62193.asUInt32() & x71.asUInt32());
            args[2][62 * steps + cycle] = x62194;
            Fp x62195 = x62193 - x62194;
            Fp x62196 = x62195 * x26;
            Fp x62197 = Fp(x62196.asUInt32() & x71.asUInt32());
            args[2][63 * steps + cycle] = x62197;
          }
          Fp x62198 = args[2][48 * steps + ((cycle - 0) & mask)];
          Fp x62199 = args[2][49 * steps + ((cycle - 0) & mask)];
          Fp x62200 = x62199 * x1;
          Fp x62201 = x62198 + x62200;
          Fp x62202 = args[2][50 * steps + ((cycle - 0) & mask)];
          Fp x62203 = x62202 * x3;
          Fp x62204 = x62201 + x62203;
          Fp x62205 = args[2][51 * steps + ((cycle - 0) & mask)];
          Fp x62206 = x62205 * x6;
          Fp x62207 = x62204 + x62206;
          Fp x62208 = args[2][52 * steps + ((cycle - 0) & mask)];
          Fp x62209 = x62208 * x11;
          Fp x62210 = x62207 + x62209;
          Fp x62211 = args[2][53 * steps + ((cycle - 0) & mask)];
          Fp x62212 = x62211 * x27;
          Fp x62213 = x62210 + x62212;
          Fp x62214 = args[2][54 * steps + ((cycle - 0) & mask)];
          Fp x62215 = x62214 * x12;
          Fp x62216 = x62213 + x62215;
          Fp x62217 = args[2][55 * steps + ((cycle - 0) & mask)];
          Fp x62218 = x62217 * x28;
          Fp x62219 = x62216 + x62218;
          Fp x62220 = args[2][56 * steps + ((cycle - 0) & mask)];
          Fp x62221 = x62220 * x13;
          Fp x62222 = x62219 + x62221;
          Fp x62223 = args[2][57 * steps + ((cycle - 0) & mask)];
          Fp x62224 = x62223 * x29;
          Fp x62225 = x62222 + x62224;
          Fp x62226 = args[2][58 * steps + ((cycle - 0) & mask)];
          Fp x62227 = x62226 * x14;
          Fp x62228 = x62225 + x62227;
          Fp x62229 = args[2][59 * steps + ((cycle - 0) & mask)];
          Fp x62230 = x62229 * x30;
          Fp x62231 = x62228 + x62230;
          Fp x62232 = args[2][60 * steps + ((cycle - 0) & mask)];
          Fp x62233 = x62232 * x15;
          Fp x62234 = x62231 + x62233;
          Fp x62235 = args[2][61 * steps + ((cycle - 0) & mask)];
          Fp x62236 = x62235 * x31;
          Fp x62237 = x62234 + x62236;
          Fp x62238 = args[2][62 * steps + ((cycle - 0) & mask)];
          Fp x62239 = x62238 * x16;
          Fp x62240 = x62237 + x62239;
          Fp x62241 = args[2][63 * steps + ((cycle - 0) & mask)];
          Fp x62242 = x62241 * x32;
          Fp x62243 = x62240 + x62242;
          Fp x62244 = x62057 - x62243;
          Fp x62245 = x62244 * x33;
          if (x62245 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:119");
          host_args[0] = x62053;
          host_args[1] = x61959;
          host_args[2] = x62243;
          host_args[3] = x62149;
          host(ctx, "log", "  InitRegs, a = 0x%04x%04x, e =  0x%04x%04x", host_args.data(), 4, host_outs.data(), 0);
        }
        args[2][127 * steps + cycle] = x8;
        Fp x62246 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x62247 = x62246 - x71;
        Fp x62248 = x62246 * x62247;
        if (x62248 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:106");
        Fp x62249 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x62250 = x62249 - x71;
        Fp x62251 = x62249 * x62250;
        if (x62251 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:107");
        Fp x62252 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x62253 = x62252 - x71;
        Fp x62254 = x62252 * x62253;
        if (x62254 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:108");
        Fp x62255 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x62256 = x62255 - x71;
        Fp x62257 = x62255 * x62256;
        if (x62257 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:109");
      }
      Fp x62258 = x58330 + x58333;
      Fp x62259 = x62258 + x58336;
      Fp x62260 = x62259 + x58339;
      if (x62260 != 0) {
        Fp x62261 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x62261;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x62261;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x62262 = host_outs[0];
          Fp x62263 = host_outs[1];
          args[2][129 * steps + cycle] = x62262;
          args[2][130 * steps + cycle] = x62263;
        }
        Fp x62264 = args[2][122 * steps + ((cycle - 1) & mask)];
        args[2][122 * steps + cycle] = x62264;
        Fp x62265 = args[2][96 * steps + ((cycle - 1) & mask)];
        args[2][96 * steps + cycle] = x62265;
        Fp x62266 = args[2][124 * steps + ((cycle - 1) & mask)];
        args[2][124 * steps + cycle] = x62266;
        Fp x62267 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x62267;
        Fp x62268 = args[2][123 * steps + ((cycle - 1) & mask)];
        args[2][123 * steps + cycle] = x62268;
        Fp x62269 = args[2][0 * steps + ((cycle - 4) & mask)];
        Fp x62270 = args[2][1 * steps + ((cycle - 4) & mask)];
        Fp x62271 = args[2][2 * steps + ((cycle - 4) & mask)];
        Fp x62272 = args[2][3 * steps + ((cycle - 4) & mask)];
        Fp x62273 = args[2][4 * steps + ((cycle - 4) & mask)];
        Fp x62274 = args[2][5 * steps + ((cycle - 4) & mask)];
        Fp x62275 = args[2][6 * steps + ((cycle - 4) & mask)];
        Fp x62276 = args[2][7 * steps + ((cycle - 4) & mask)];
        Fp x62277 = args[2][8 * steps + ((cycle - 4) & mask)];
        Fp x62278 = args[2][9 * steps + ((cycle - 4) & mask)];
        Fp x62279 = args[2][10 * steps + ((cycle - 4) & mask)];
        Fp x62280 = args[2][11 * steps + ((cycle - 4) & mask)];
        Fp x62281 = args[2][12 * steps + ((cycle - 4) & mask)];
        Fp x62282 = args[2][13 * steps + ((cycle - 4) & mask)];
        Fp x62283 = args[2][14 * steps + ((cycle - 4) & mask)];
        Fp x62284 = args[2][15 * steps + ((cycle - 4) & mask)];
        Fp x62285 = args[2][16 * steps + ((cycle - 4) & mask)];
        Fp x62286 = args[2][17 * steps + ((cycle - 4) & mask)];
        Fp x62287 = args[2][18 * steps + ((cycle - 4) & mask)];
        Fp x62288 = args[2][19 * steps + ((cycle - 4) & mask)];
        Fp x62289 = args[2][20 * steps + ((cycle - 4) & mask)];
        Fp x62290 = args[2][21 * steps + ((cycle - 4) & mask)];
        Fp x62291 = args[2][22 * steps + ((cycle - 4) & mask)];
        Fp x62292 = args[2][23 * steps + ((cycle - 4) & mask)];
        Fp x62293 = args[2][24 * steps + ((cycle - 4) & mask)];
        Fp x62294 = args[2][25 * steps + ((cycle - 4) & mask)];
        Fp x62295 = args[2][26 * steps + ((cycle - 4) & mask)];
        Fp x62296 = args[2][27 * steps + ((cycle - 4) & mask)];
        Fp x62297 = args[2][28 * steps + ((cycle - 4) & mask)];
        Fp x62298 = args[2][29 * steps + ((cycle - 4) & mask)];
        Fp x62299 = args[2][30 * steps + ((cycle - 4) & mask)];
        Fp x62300 = args[2][31 * steps + ((cycle - 4) & mask)];
        Fp x62301 = args[2][0 * steps + ((cycle - 68) & mask)];
        Fp x62302 = args[2][1 * steps + ((cycle - 68) & mask)];
        Fp x62303 = args[2][2 * steps + ((cycle - 68) & mask)];
        Fp x62304 = args[2][3 * steps + ((cycle - 68) & mask)];
        Fp x62305 = args[2][4 * steps + ((cycle - 68) & mask)];
        Fp x62306 = args[2][5 * steps + ((cycle - 68) & mask)];
        Fp x62307 = args[2][6 * steps + ((cycle - 68) & mask)];
        Fp x62308 = args[2][7 * steps + ((cycle - 68) & mask)];
        Fp x62309 = args[2][8 * steps + ((cycle - 68) & mask)];
        Fp x62310 = args[2][9 * steps + ((cycle - 68) & mask)];
        Fp x62311 = args[2][10 * steps + ((cycle - 68) & mask)];
        Fp x62312 = args[2][11 * steps + ((cycle - 68) & mask)];
        Fp x62313 = args[2][12 * steps + ((cycle - 68) & mask)];
        Fp x62314 = args[2][13 * steps + ((cycle - 68) & mask)];
        Fp x62315 = args[2][14 * steps + ((cycle - 68) & mask)];
        Fp x62316 = args[2][15 * steps + ((cycle - 68) & mask)];
        Fp x62317 = args[2][16 * steps + ((cycle - 68) & mask)];
        Fp x62318 = args[2][17 * steps + ((cycle - 68) & mask)];
        Fp x62319 = args[2][18 * steps + ((cycle - 68) & mask)];
        Fp x62320 = args[2][19 * steps + ((cycle - 68) & mask)];
        Fp x62321 = args[2][20 * steps + ((cycle - 68) & mask)];
        Fp x62322 = args[2][21 * steps + ((cycle - 68) & mask)];
        Fp x62323 = args[2][22 * steps + ((cycle - 68) & mask)];
        Fp x62324 = args[2][23 * steps + ((cycle - 68) & mask)];
        Fp x62325 = args[2][24 * steps + ((cycle - 68) & mask)];
        Fp x62326 = args[2][25 * steps + ((cycle - 68) & mask)];
        Fp x62327 = args[2][26 * steps + ((cycle - 68) & mask)];
        Fp x62328 = args[2][27 * steps + ((cycle - 68) & mask)];
        Fp x62329 = args[2][28 * steps + ((cycle - 68) & mask)];
        Fp x62330 = args[2][29 * steps + ((cycle - 68) & mask)];
        Fp x62331 = args[2][30 * steps + ((cycle - 68) & mask)];
        Fp x62332 = args[2][31 * steps + ((cycle - 68) & mask)];
        Fp x62333 = args[2][32 * steps + ((cycle - 4) & mask)];
        Fp x62334 = args[2][33 * steps + ((cycle - 4) & mask)];
        Fp x62335 = args[2][34 * steps + ((cycle - 4) & mask)];
        Fp x62336 = args[2][35 * steps + ((cycle - 4) & mask)];
        Fp x62337 = args[2][36 * steps + ((cycle - 4) & mask)];
        Fp x62338 = args[2][37 * steps + ((cycle - 4) & mask)];
        Fp x62339 = args[2][38 * steps + ((cycle - 4) & mask)];
        Fp x62340 = args[2][39 * steps + ((cycle - 4) & mask)];
        Fp x62341 = args[2][40 * steps + ((cycle - 4) & mask)];
        Fp x62342 = args[2][41 * steps + ((cycle - 4) & mask)];
        Fp x62343 = args[2][42 * steps + ((cycle - 4) & mask)];
        Fp x62344 = args[2][43 * steps + ((cycle - 4) & mask)];
        Fp x62345 = args[2][44 * steps + ((cycle - 4) & mask)];
        Fp x62346 = args[2][45 * steps + ((cycle - 4) & mask)];
        Fp x62347 = args[2][46 * steps + ((cycle - 4) & mask)];
        Fp x62348 = args[2][47 * steps + ((cycle - 4) & mask)];
        Fp x62349 = args[2][48 * steps + ((cycle - 4) & mask)];
        Fp x62350 = args[2][49 * steps + ((cycle - 4) & mask)];
        Fp x62351 = args[2][50 * steps + ((cycle - 4) & mask)];
        Fp x62352 = args[2][51 * steps + ((cycle - 4) & mask)];
        Fp x62353 = args[2][52 * steps + ((cycle - 4) & mask)];
        Fp x62354 = args[2][53 * steps + ((cycle - 4) & mask)];
        Fp x62355 = args[2][54 * steps + ((cycle - 4) & mask)];
        Fp x62356 = args[2][55 * steps + ((cycle - 4) & mask)];
        Fp x62357 = args[2][56 * steps + ((cycle - 4) & mask)];
        Fp x62358 = args[2][57 * steps + ((cycle - 4) & mask)];
        Fp x62359 = args[2][58 * steps + ((cycle - 4) & mask)];
        Fp x62360 = args[2][59 * steps + ((cycle - 4) & mask)];
        Fp x62361 = args[2][60 * steps + ((cycle - 4) & mask)];
        Fp x62362 = args[2][61 * steps + ((cycle - 4) & mask)];
        Fp x62363 = args[2][62 * steps + ((cycle - 4) & mask)];
        Fp x62364 = args[2][63 * steps + ((cycle - 4) & mask)];
        Fp x62365 = args[2][32 * steps + ((cycle - 68) & mask)];
        Fp x62366 = args[2][33 * steps + ((cycle - 68) & mask)];
        Fp x62367 = args[2][34 * steps + ((cycle - 68) & mask)];
        Fp x62368 = args[2][35 * steps + ((cycle - 68) & mask)];
        Fp x62369 = args[2][36 * steps + ((cycle - 68) & mask)];
        Fp x62370 = args[2][37 * steps + ((cycle - 68) & mask)];
        Fp x62371 = args[2][38 * steps + ((cycle - 68) & mask)];
        Fp x62372 = args[2][39 * steps + ((cycle - 68) & mask)];
        Fp x62373 = args[2][40 * steps + ((cycle - 68) & mask)];
        Fp x62374 = args[2][41 * steps + ((cycle - 68) & mask)];
        Fp x62375 = args[2][42 * steps + ((cycle - 68) & mask)];
        Fp x62376 = args[2][43 * steps + ((cycle - 68) & mask)];
        Fp x62377 = args[2][44 * steps + ((cycle - 68) & mask)];
        Fp x62378 = args[2][45 * steps + ((cycle - 68) & mask)];
        Fp x62379 = args[2][46 * steps + ((cycle - 68) & mask)];
        Fp x62380 = args[2][47 * steps + ((cycle - 68) & mask)];
        Fp x62381 = args[2][48 * steps + ((cycle - 68) & mask)];
        Fp x62382 = args[2][49 * steps + ((cycle - 68) & mask)];
        Fp x62383 = args[2][50 * steps + ((cycle - 68) & mask)];
        Fp x62384 = args[2][51 * steps + ((cycle - 68) & mask)];
        Fp x62385 = args[2][52 * steps + ((cycle - 68) & mask)];
        Fp x62386 = args[2][53 * steps + ((cycle - 68) & mask)];
        Fp x62387 = args[2][54 * steps + ((cycle - 68) & mask)];
        Fp x62388 = args[2][55 * steps + ((cycle - 68) & mask)];
        Fp x62389 = args[2][56 * steps + ((cycle - 68) & mask)];
        Fp x62390 = args[2][57 * steps + ((cycle - 68) & mask)];
        Fp x62391 = args[2][58 * steps + ((cycle - 68) & mask)];
        Fp x62392 = args[2][59 * steps + ((cycle - 68) & mask)];
        Fp x62393 = args[2][60 * steps + ((cycle - 68) & mask)];
        Fp x62394 = args[2][61 * steps + ((cycle - 68) & mask)];
        Fp x62395 = args[2][62 * steps + ((cycle - 68) & mask)];
        Fp x62396 = args[2][63 * steps + ((cycle - 68) & mask)];
        Fp x62397 = x62270 * x1;
        Fp x62398 = x62269 + x62397;
        Fp x62399 = x62271 * x3;
        Fp x62400 = x62398 + x62399;
        Fp x62401 = x62272 * x6;
        Fp x62402 = x62400 + x62401;
        Fp x62403 = x62273 * x11;
        Fp x62404 = x62402 + x62403;
        Fp x62405 = x62274 * x27;
        Fp x62406 = x62404 + x62405;
        Fp x62407 = x62275 * x12;
        Fp x62408 = x62406 + x62407;
        Fp x62409 = x62276 * x28;
        Fp x62410 = x62408 + x62409;
        Fp x62411 = x62277 * x13;
        Fp x62412 = x62410 + x62411;
        Fp x62413 = x62278 * x29;
        Fp x62414 = x62412 + x62413;
        Fp x62415 = x62279 * x14;
        Fp x62416 = x62414 + x62415;
        Fp x62417 = x62280 * x30;
        Fp x62418 = x62416 + x62417;
        Fp x62419 = x62281 * x15;
        Fp x62420 = x62418 + x62419;
        Fp x62421 = x62282 * x31;
        Fp x62422 = x62420 + x62421;
        Fp x62423 = x62283 * x16;
        Fp x62424 = x62422 + x62423;
        Fp x62425 = x62284 * x32;
        Fp x62426 = x62424 + x62425;
        Fp x62427 = x62286 * x1;
        Fp x62428 = x62285 + x62427;
        Fp x62429 = x62287 * x3;
        Fp x62430 = x62428 + x62429;
        Fp x62431 = x62288 * x6;
        Fp x62432 = x62430 + x62431;
        Fp x62433 = x62289 * x11;
        Fp x62434 = x62432 + x62433;
        Fp x62435 = x62290 * x27;
        Fp x62436 = x62434 + x62435;
        Fp x62437 = x62291 * x12;
        Fp x62438 = x62436 + x62437;
        Fp x62439 = x62292 * x28;
        Fp x62440 = x62438 + x62439;
        Fp x62441 = x62293 * x13;
        Fp x62442 = x62440 + x62441;
        Fp x62443 = x62294 * x29;
        Fp x62444 = x62442 + x62443;
        Fp x62445 = x62295 * x14;
        Fp x62446 = x62444 + x62445;
        Fp x62447 = x62296 * x30;
        Fp x62448 = x62446 + x62447;
        Fp x62449 = x62297 * x15;
        Fp x62450 = x62448 + x62449;
        Fp x62451 = x62298 * x31;
        Fp x62452 = x62450 + x62451;
        Fp x62453 = x62299 * x16;
        Fp x62454 = x62452 + x62453;
        Fp x62455 = x62300 * x32;
        Fp x62456 = x62454 + x62455;
        Fp x62457 = x62302 * x1;
        Fp x62458 = x62301 + x62457;
        Fp x62459 = x62303 * x3;
        Fp x62460 = x62458 + x62459;
        Fp x62461 = x62304 * x6;
        Fp x62462 = x62460 + x62461;
        Fp x62463 = x62305 * x11;
        Fp x62464 = x62462 + x62463;
        Fp x62465 = x62306 * x27;
        Fp x62466 = x62464 + x62465;
        Fp x62467 = x62307 * x12;
        Fp x62468 = x62466 + x62467;
        Fp x62469 = x62308 * x28;
        Fp x62470 = x62468 + x62469;
        Fp x62471 = x62309 * x13;
        Fp x62472 = x62470 + x62471;
        Fp x62473 = x62310 * x29;
        Fp x62474 = x62472 + x62473;
        Fp x62475 = x62311 * x14;
        Fp x62476 = x62474 + x62475;
        Fp x62477 = x62312 * x30;
        Fp x62478 = x62476 + x62477;
        Fp x62479 = x62313 * x15;
        Fp x62480 = x62478 + x62479;
        Fp x62481 = x62314 * x31;
        Fp x62482 = x62480 + x62481;
        Fp x62483 = x62315 * x16;
        Fp x62484 = x62482 + x62483;
        Fp x62485 = x62316 * x32;
        Fp x62486 = x62484 + x62485;
        Fp x62487 = x62318 * x1;
        Fp x62488 = x62317 + x62487;
        Fp x62489 = x62319 * x3;
        Fp x62490 = x62488 + x62489;
        Fp x62491 = x62320 * x6;
        Fp x62492 = x62490 + x62491;
        Fp x62493 = x62321 * x11;
        Fp x62494 = x62492 + x62493;
        Fp x62495 = x62322 * x27;
        Fp x62496 = x62494 + x62495;
        Fp x62497 = x62323 * x12;
        Fp x62498 = x62496 + x62497;
        Fp x62499 = x62324 * x28;
        Fp x62500 = x62498 + x62499;
        Fp x62501 = x62325 * x13;
        Fp x62502 = x62500 + x62501;
        Fp x62503 = x62326 * x29;
        Fp x62504 = x62502 + x62503;
        Fp x62505 = x62327 * x14;
        Fp x62506 = x62504 + x62505;
        Fp x62507 = x62328 * x30;
        Fp x62508 = x62506 + x62507;
        Fp x62509 = x62329 * x15;
        Fp x62510 = x62508 + x62509;
        Fp x62511 = x62330 * x31;
        Fp x62512 = x62510 + x62511;
        Fp x62513 = x62331 * x16;
        Fp x62514 = x62512 + x62513;
        Fp x62515 = x62332 * x32;
        Fp x62516 = x62514 + x62515;
        Fp x62517 = x62426 + x62486;
        Fp x62518 = x62456 + x62516;
        args[2][116 * steps + cycle] = x62517;
        args[2][117 * steps + cycle] = x62518;
        Fp x62519 = x62334 * x1;
        Fp x62520 = x62333 + x62519;
        Fp x62521 = x62335 * x3;
        Fp x62522 = x62520 + x62521;
        Fp x62523 = x62336 * x6;
        Fp x62524 = x62522 + x62523;
        Fp x62525 = x62337 * x11;
        Fp x62526 = x62524 + x62525;
        Fp x62527 = x62338 * x27;
        Fp x62528 = x62526 + x62527;
        Fp x62529 = x62339 * x12;
        Fp x62530 = x62528 + x62529;
        Fp x62531 = x62340 * x28;
        Fp x62532 = x62530 + x62531;
        Fp x62533 = x62341 * x13;
        Fp x62534 = x62532 + x62533;
        Fp x62535 = x62342 * x29;
        Fp x62536 = x62534 + x62535;
        Fp x62537 = x62343 * x14;
        Fp x62538 = x62536 + x62537;
        Fp x62539 = x62344 * x30;
        Fp x62540 = x62538 + x62539;
        Fp x62541 = x62345 * x15;
        Fp x62542 = x62540 + x62541;
        Fp x62543 = x62346 * x31;
        Fp x62544 = x62542 + x62543;
        Fp x62545 = x62347 * x16;
        Fp x62546 = x62544 + x62545;
        Fp x62547 = x62348 * x32;
        Fp x62548 = x62546 + x62547;
        Fp x62549 = x62350 * x1;
        Fp x62550 = x62349 + x62549;
        Fp x62551 = x62351 * x3;
        Fp x62552 = x62550 + x62551;
        Fp x62553 = x62352 * x6;
        Fp x62554 = x62552 + x62553;
        Fp x62555 = x62353 * x11;
        Fp x62556 = x62554 + x62555;
        Fp x62557 = x62354 * x27;
        Fp x62558 = x62556 + x62557;
        Fp x62559 = x62355 * x12;
        Fp x62560 = x62558 + x62559;
        Fp x62561 = x62356 * x28;
        Fp x62562 = x62560 + x62561;
        Fp x62563 = x62357 * x13;
        Fp x62564 = x62562 + x62563;
        Fp x62565 = x62358 * x29;
        Fp x62566 = x62564 + x62565;
        Fp x62567 = x62359 * x14;
        Fp x62568 = x62566 + x62567;
        Fp x62569 = x62360 * x30;
        Fp x62570 = x62568 + x62569;
        Fp x62571 = x62361 * x15;
        Fp x62572 = x62570 + x62571;
        Fp x62573 = x62362 * x31;
        Fp x62574 = x62572 + x62573;
        Fp x62575 = x62363 * x16;
        Fp x62576 = x62574 + x62575;
        Fp x62577 = x62364 * x32;
        Fp x62578 = x62576 + x62577;
        Fp x62579 = x62366 * x1;
        Fp x62580 = x62365 + x62579;
        Fp x62581 = x62367 * x3;
        Fp x62582 = x62580 + x62581;
        Fp x62583 = x62368 * x6;
        Fp x62584 = x62582 + x62583;
        Fp x62585 = x62369 * x11;
        Fp x62586 = x62584 + x62585;
        Fp x62587 = x62370 * x27;
        Fp x62588 = x62586 + x62587;
        Fp x62589 = x62371 * x12;
        Fp x62590 = x62588 + x62589;
        Fp x62591 = x62372 * x28;
        Fp x62592 = x62590 + x62591;
        Fp x62593 = x62373 * x13;
        Fp x62594 = x62592 + x62593;
        Fp x62595 = x62374 * x29;
        Fp x62596 = x62594 + x62595;
        Fp x62597 = x62375 * x14;
        Fp x62598 = x62596 + x62597;
        Fp x62599 = x62376 * x30;
        Fp x62600 = x62598 + x62599;
        Fp x62601 = x62377 * x15;
        Fp x62602 = x62600 + x62601;
        Fp x62603 = x62378 * x31;
        Fp x62604 = x62602 + x62603;
        Fp x62605 = x62379 * x16;
        Fp x62606 = x62604 + x62605;
        Fp x62607 = x62380 * x32;
        Fp x62608 = x62606 + x62607;
        Fp x62609 = x62382 * x1;
        Fp x62610 = x62381 + x62609;
        Fp x62611 = x62383 * x3;
        Fp x62612 = x62610 + x62611;
        Fp x62613 = x62384 * x6;
        Fp x62614 = x62612 + x62613;
        Fp x62615 = x62385 * x11;
        Fp x62616 = x62614 + x62615;
        Fp x62617 = x62386 * x27;
        Fp x62618 = x62616 + x62617;
        Fp x62619 = x62387 * x12;
        Fp x62620 = x62618 + x62619;
        Fp x62621 = x62388 * x28;
        Fp x62622 = x62620 + x62621;
        Fp x62623 = x62389 * x13;
        Fp x62624 = x62622 + x62623;
        Fp x62625 = x62390 * x29;
        Fp x62626 = x62624 + x62625;
        Fp x62627 = x62391 * x14;
        Fp x62628 = x62626 + x62627;
        Fp x62629 = x62392 * x30;
        Fp x62630 = x62628 + x62629;
        Fp x62631 = x62393 * x15;
        Fp x62632 = x62630 + x62631;
        Fp x62633 = x62394 * x31;
        Fp x62634 = x62632 + x62633;
        Fp x62635 = x62395 * x16;
        Fp x62636 = x62634 + x62635;
        Fp x62637 = x62396 * x32;
        Fp x62638 = x62636 + x62637;
        Fp x62639 = x62548 + x62608;
        Fp x62640 = x62578 + x62638;
        args[2][118 * steps + cycle] = x62639;
        args[2][119 * steps + cycle] = x62640;
        Fp x62641 = x62268 - x71;
        {
          Fp x62642 = (x62641 == 0) ? Fp(1) : Fp(0);
          Fp x62643 = x71 - x62642;
          args[2][112 * steps + cycle] = x62643;
          Fp x62644 = inv(x62641);
          args[2][113 * steps + cycle] = x62644;
        }
        Fp x62645 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x62646 = x62641 * x62645;
        Fp x62647 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x62648 = x62646 - x62647;
        if (x62648 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:220");
        Fp x62649 = x71 - x62647;
        Fp x62650 = x62649 * x62641;
        if (x62650 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:221");
        Fp x62651 = args[2][116 * steps + ((cycle - 0) & mask)];
        Fp x62652 = args[2][117 * steps + ((cycle - 0) & mask)];
        {
          Fp x62653 = Fp(x62651.asUInt32() & x71.asUInt32());
          args[2][0 * steps + cycle] = x62653;
          Fp x62654 = x62651 - x62653;
          Fp x62655 = x62654 * x26;
          Fp x62656 = Fp(x62655.asUInt32() & x71.asUInt32());
          args[2][1 * steps + cycle] = x62656;
          Fp x62657 = x62655 - x62656;
          Fp x62658 = x62657 * x26;
          Fp x62659 = Fp(x62658.asUInt32() & x71.asUInt32());
          args[2][2 * steps + cycle] = x62659;
          Fp x62660 = x62658 - x62659;
          Fp x62661 = x62660 * x26;
          Fp x62662 = Fp(x62661.asUInt32() & x71.asUInt32());
          args[2][3 * steps + cycle] = x62662;
          Fp x62663 = x62661 - x62662;
          Fp x62664 = x62663 * x26;
          Fp x62665 = Fp(x62664.asUInt32() & x71.asUInt32());
          args[2][4 * steps + cycle] = x62665;
          Fp x62666 = x62664 - x62665;
          Fp x62667 = x62666 * x26;
          Fp x62668 = Fp(x62667.asUInt32() & x71.asUInt32());
          args[2][5 * steps + cycle] = x62668;
          Fp x62669 = x62667 - x62668;
          Fp x62670 = x62669 * x26;
          Fp x62671 = Fp(x62670.asUInt32() & x71.asUInt32());
          args[2][6 * steps + cycle] = x62671;
          Fp x62672 = x62670 - x62671;
          Fp x62673 = x62672 * x26;
          Fp x62674 = Fp(x62673.asUInt32() & x71.asUInt32());
          args[2][7 * steps + cycle] = x62674;
          Fp x62675 = x62673 - x62674;
          Fp x62676 = x62675 * x26;
          Fp x62677 = Fp(x62676.asUInt32() & x71.asUInt32());
          args[2][8 * steps + cycle] = x62677;
          Fp x62678 = x62676 - x62677;
          Fp x62679 = x62678 * x26;
          Fp x62680 = Fp(x62679.asUInt32() & x71.asUInt32());
          args[2][9 * steps + cycle] = x62680;
          Fp x62681 = x62679 - x62680;
          Fp x62682 = x62681 * x26;
          Fp x62683 = Fp(x62682.asUInt32() & x71.asUInt32());
          args[2][10 * steps + cycle] = x62683;
          Fp x62684 = x62682 - x62683;
          Fp x62685 = x62684 * x26;
          Fp x62686 = Fp(x62685.asUInt32() & x71.asUInt32());
          args[2][11 * steps + cycle] = x62686;
          Fp x62687 = x62685 - x62686;
          Fp x62688 = x62687 * x26;
          Fp x62689 = Fp(x62688.asUInt32() & x71.asUInt32());
          args[2][12 * steps + cycle] = x62689;
          Fp x62690 = x62688 - x62689;
          Fp x62691 = x62690 * x26;
          Fp x62692 = Fp(x62691.asUInt32() & x71.asUInt32());
          args[2][13 * steps + cycle] = x62692;
          Fp x62693 = x62691 - x62692;
          Fp x62694 = x62693 * x26;
          Fp x62695 = Fp(x62694.asUInt32() & x71.asUInt32());
          args[2][14 * steps + cycle] = x62695;
          Fp x62696 = x62694 - x62695;
          Fp x62697 = x62696 * x26;
          Fp x62698 = Fp(x62697.asUInt32() & x71.asUInt32());
          args[2][15 * steps + cycle] = x62698;
        }
        Fp x62699 = args[2][0 * steps + ((cycle - 0) & mask)];
        Fp x62700 = args[2][1 * steps + ((cycle - 0) & mask)];
        Fp x62701 = x62700 * x1;
        Fp x62702 = x62699 + x62701;
        Fp x62703 = args[2][2 * steps + ((cycle - 0) & mask)];
        Fp x62704 = x62703 * x3;
        Fp x62705 = x62702 + x62704;
        Fp x62706 = args[2][3 * steps + ((cycle - 0) & mask)];
        Fp x62707 = x62706 * x6;
        Fp x62708 = x62705 + x62707;
        Fp x62709 = args[2][4 * steps + ((cycle - 0) & mask)];
        Fp x62710 = x62709 * x11;
        Fp x62711 = x62708 + x62710;
        Fp x62712 = args[2][5 * steps + ((cycle - 0) & mask)];
        Fp x62713 = x62712 * x27;
        Fp x62714 = x62711 + x62713;
        Fp x62715 = args[2][6 * steps + ((cycle - 0) & mask)];
        Fp x62716 = x62715 * x12;
        Fp x62717 = x62714 + x62716;
        Fp x62718 = args[2][7 * steps + ((cycle - 0) & mask)];
        Fp x62719 = x62718 * x28;
        Fp x62720 = x62717 + x62719;
        Fp x62721 = args[2][8 * steps + ((cycle - 0) & mask)];
        Fp x62722 = x62721 * x13;
        Fp x62723 = x62720 + x62722;
        Fp x62724 = args[2][9 * steps + ((cycle - 0) & mask)];
        Fp x62725 = x62724 * x29;
        Fp x62726 = x62723 + x62725;
        Fp x62727 = args[2][10 * steps + ((cycle - 0) & mask)];
        Fp x62728 = x62727 * x14;
        Fp x62729 = x62726 + x62728;
        Fp x62730 = args[2][11 * steps + ((cycle - 0) & mask)];
        Fp x62731 = x62730 * x30;
        Fp x62732 = x62729 + x62731;
        Fp x62733 = args[2][12 * steps + ((cycle - 0) & mask)];
        Fp x62734 = x62733 * x15;
        Fp x62735 = x62732 + x62734;
        Fp x62736 = args[2][13 * steps + ((cycle - 0) & mask)];
        Fp x62737 = x62736 * x31;
        Fp x62738 = x62735 + x62737;
        Fp x62739 = args[2][14 * steps + ((cycle - 0) & mask)];
        Fp x62740 = x62739 * x16;
        Fp x62741 = x62738 + x62740;
        Fp x62742 = args[2][15 * steps + ((cycle - 0) & mask)];
        Fp x62743 = x62742 * x32;
        Fp x62744 = x62741 + x62743;
        Fp x62745 = x62651 - x62744;
        Fp x62746 = x62745 * x33;
        args[2][108 * steps + cycle] = x62746;
        Fp x62747 = args[2][108 * steps + ((cycle - 0) & mask)];
        Fp x62748 = x62652 + x62747;
        {
          Fp x62749 = Fp(x62748.asUInt32() & x71.asUInt32());
          args[2][16 * steps + cycle] = x62749;
          Fp x62750 = x62748 - x62749;
          Fp x62751 = x62750 * x26;
          Fp x62752 = Fp(x62751.asUInt32() & x71.asUInt32());
          args[2][17 * steps + cycle] = x62752;
          Fp x62753 = x62751 - x62752;
          Fp x62754 = x62753 * x26;
          Fp x62755 = Fp(x62754.asUInt32() & x71.asUInt32());
          args[2][18 * steps + cycle] = x62755;
          Fp x62756 = x62754 - x62755;
          Fp x62757 = x62756 * x26;
          Fp x62758 = Fp(x62757.asUInt32() & x71.asUInt32());
          args[2][19 * steps + cycle] = x62758;
          Fp x62759 = x62757 - x62758;
          Fp x62760 = x62759 * x26;
          Fp x62761 = Fp(x62760.asUInt32() & x71.asUInt32());
          args[2][20 * steps + cycle] = x62761;
          Fp x62762 = x62760 - x62761;
          Fp x62763 = x62762 * x26;
          Fp x62764 = Fp(x62763.asUInt32() & x71.asUInt32());
          args[2][21 * steps + cycle] = x62764;
          Fp x62765 = x62763 - x62764;
          Fp x62766 = x62765 * x26;
          Fp x62767 = Fp(x62766.asUInt32() & x71.asUInt32());
          args[2][22 * steps + cycle] = x62767;
          Fp x62768 = x62766 - x62767;
          Fp x62769 = x62768 * x26;
          Fp x62770 = Fp(x62769.asUInt32() & x71.asUInt32());
          args[2][23 * steps + cycle] = x62770;
          Fp x62771 = x62769 - x62770;
          Fp x62772 = x62771 * x26;
          Fp x62773 = Fp(x62772.asUInt32() & x71.asUInt32());
          args[2][24 * steps + cycle] = x62773;
          Fp x62774 = x62772 - x62773;
          Fp x62775 = x62774 * x26;
          Fp x62776 = Fp(x62775.asUInt32() & x71.asUInt32());
          args[2][25 * steps + cycle] = x62776;
          Fp x62777 = x62775 - x62776;
          Fp x62778 = x62777 * x26;
          Fp x62779 = Fp(x62778.asUInt32() & x71.asUInt32());
          args[2][26 * steps + cycle] = x62779;
          Fp x62780 = x62778 - x62779;
          Fp x62781 = x62780 * x26;
          Fp x62782 = Fp(x62781.asUInt32() & x71.asUInt32());
          args[2][27 * steps + cycle] = x62782;
          Fp x62783 = x62781 - x62782;
          Fp x62784 = x62783 * x26;
          Fp x62785 = Fp(x62784.asUInt32() & x71.asUInt32());
          args[2][28 * steps + cycle] = x62785;
          Fp x62786 = x62784 - x62785;
          Fp x62787 = x62786 * x26;
          Fp x62788 = Fp(x62787.asUInt32() & x71.asUInt32());
          args[2][29 * steps + cycle] = x62788;
          Fp x62789 = x62787 - x62788;
          Fp x62790 = x62789 * x26;
          Fp x62791 = Fp(x62790.asUInt32() & x71.asUInt32());
          args[2][30 * steps + cycle] = x62791;
          Fp x62792 = x62790 - x62791;
          Fp x62793 = x62792 * x26;
          Fp x62794 = Fp(x62793.asUInt32() & x71.asUInt32());
          args[2][31 * steps + cycle] = x62794;
        }
        Fp x62795 = args[2][16 * steps + ((cycle - 0) & mask)];
        Fp x62796 = args[2][17 * steps + ((cycle - 0) & mask)];
        Fp x62797 = x62796 * x1;
        Fp x62798 = x62795 + x62797;
        Fp x62799 = args[2][18 * steps + ((cycle - 0) & mask)];
        Fp x62800 = x62799 * x3;
        Fp x62801 = x62798 + x62800;
        Fp x62802 = args[2][19 * steps + ((cycle - 0) & mask)];
        Fp x62803 = x62802 * x6;
        Fp x62804 = x62801 + x62803;
        Fp x62805 = args[2][20 * steps + ((cycle - 0) & mask)];
        Fp x62806 = x62805 * x11;
        Fp x62807 = x62804 + x62806;
        Fp x62808 = args[2][21 * steps + ((cycle - 0) & mask)];
        Fp x62809 = x62808 * x27;
        Fp x62810 = x62807 + x62809;
        Fp x62811 = args[2][22 * steps + ((cycle - 0) & mask)];
        Fp x62812 = x62811 * x12;
        Fp x62813 = x62810 + x62812;
        Fp x62814 = args[2][23 * steps + ((cycle - 0) & mask)];
        Fp x62815 = x62814 * x28;
        Fp x62816 = x62813 + x62815;
        Fp x62817 = args[2][24 * steps + ((cycle - 0) & mask)];
        Fp x62818 = x62817 * x13;
        Fp x62819 = x62816 + x62818;
        Fp x62820 = args[2][25 * steps + ((cycle - 0) & mask)];
        Fp x62821 = x62820 * x29;
        Fp x62822 = x62819 + x62821;
        Fp x62823 = args[2][26 * steps + ((cycle - 0) & mask)];
        Fp x62824 = x62823 * x14;
        Fp x62825 = x62822 + x62824;
        Fp x62826 = args[2][27 * steps + ((cycle - 0) & mask)];
        Fp x62827 = x62826 * x30;
        Fp x62828 = x62825 + x62827;
        Fp x62829 = args[2][28 * steps + ((cycle - 0) & mask)];
        Fp x62830 = x62829 * x15;
        Fp x62831 = x62828 + x62830;
        Fp x62832 = args[2][29 * steps + ((cycle - 0) & mask)];
        Fp x62833 = x62832 * x31;
        Fp x62834 = x62831 + x62833;
        Fp x62835 = args[2][30 * steps + ((cycle - 0) & mask)];
        Fp x62836 = x62835 * x16;
        Fp x62837 = x62834 + x62836;
        Fp x62838 = args[2][31 * steps + ((cycle - 0) & mask)];
        Fp x62839 = x62838 * x32;
        Fp x62840 = x62837 + x62839;
        Fp x62841 = x62748 - x62840;
        Fp x62842 = x62841 * x33;
        args[2][109 * steps + cycle] = x62842;
        Fp x62843 = args[2][118 * steps + ((cycle - 0) & mask)];
        Fp x62844 = args[2][119 * steps + ((cycle - 0) & mask)];
        {
          Fp x62845 = Fp(x62843.asUInt32() & x71.asUInt32());
          args[2][32 * steps + cycle] = x62845;
          Fp x62846 = x62843 - x62845;
          Fp x62847 = x62846 * x26;
          Fp x62848 = Fp(x62847.asUInt32() & x71.asUInt32());
          args[2][33 * steps + cycle] = x62848;
          Fp x62849 = x62847 - x62848;
          Fp x62850 = x62849 * x26;
          Fp x62851 = Fp(x62850.asUInt32() & x71.asUInt32());
          args[2][34 * steps + cycle] = x62851;
          Fp x62852 = x62850 - x62851;
          Fp x62853 = x62852 * x26;
          Fp x62854 = Fp(x62853.asUInt32() & x71.asUInt32());
          args[2][35 * steps + cycle] = x62854;
          Fp x62855 = x62853 - x62854;
          Fp x62856 = x62855 * x26;
          Fp x62857 = Fp(x62856.asUInt32() & x71.asUInt32());
          args[2][36 * steps + cycle] = x62857;
          Fp x62858 = x62856 - x62857;
          Fp x62859 = x62858 * x26;
          Fp x62860 = Fp(x62859.asUInt32() & x71.asUInt32());
          args[2][37 * steps + cycle] = x62860;
          Fp x62861 = x62859 - x62860;
          Fp x62862 = x62861 * x26;
          Fp x62863 = Fp(x62862.asUInt32() & x71.asUInt32());
          args[2][38 * steps + cycle] = x62863;
          Fp x62864 = x62862 - x62863;
          Fp x62865 = x62864 * x26;
          Fp x62866 = Fp(x62865.asUInt32() & x71.asUInt32());
          args[2][39 * steps + cycle] = x62866;
          Fp x62867 = x62865 - x62866;
          Fp x62868 = x62867 * x26;
          Fp x62869 = Fp(x62868.asUInt32() & x71.asUInt32());
          args[2][40 * steps + cycle] = x62869;
          Fp x62870 = x62868 - x62869;
          Fp x62871 = x62870 * x26;
          Fp x62872 = Fp(x62871.asUInt32() & x71.asUInt32());
          args[2][41 * steps + cycle] = x62872;
          Fp x62873 = x62871 - x62872;
          Fp x62874 = x62873 * x26;
          Fp x62875 = Fp(x62874.asUInt32() & x71.asUInt32());
          args[2][42 * steps + cycle] = x62875;
          Fp x62876 = x62874 - x62875;
          Fp x62877 = x62876 * x26;
          Fp x62878 = Fp(x62877.asUInt32() & x71.asUInt32());
          args[2][43 * steps + cycle] = x62878;
          Fp x62879 = x62877 - x62878;
          Fp x62880 = x62879 * x26;
          Fp x62881 = Fp(x62880.asUInt32() & x71.asUInt32());
          args[2][44 * steps + cycle] = x62881;
          Fp x62882 = x62880 - x62881;
          Fp x62883 = x62882 * x26;
          Fp x62884 = Fp(x62883.asUInt32() & x71.asUInt32());
          args[2][45 * steps + cycle] = x62884;
          Fp x62885 = x62883 - x62884;
          Fp x62886 = x62885 * x26;
          Fp x62887 = Fp(x62886.asUInt32() & x71.asUInt32());
          args[2][46 * steps + cycle] = x62887;
          Fp x62888 = x62886 - x62887;
          Fp x62889 = x62888 * x26;
          Fp x62890 = Fp(x62889.asUInt32() & x71.asUInt32());
          args[2][47 * steps + cycle] = x62890;
        }
        Fp x62891 = args[2][32 * steps + ((cycle - 0) & mask)];
        Fp x62892 = args[2][33 * steps + ((cycle - 0) & mask)];
        Fp x62893 = x62892 * x1;
        Fp x62894 = x62891 + x62893;
        Fp x62895 = args[2][34 * steps + ((cycle - 0) & mask)];
        Fp x62896 = x62895 * x3;
        Fp x62897 = x62894 + x62896;
        Fp x62898 = args[2][35 * steps + ((cycle - 0) & mask)];
        Fp x62899 = x62898 * x6;
        Fp x62900 = x62897 + x62899;
        Fp x62901 = args[2][36 * steps + ((cycle - 0) & mask)];
        Fp x62902 = x62901 * x11;
        Fp x62903 = x62900 + x62902;
        Fp x62904 = args[2][37 * steps + ((cycle - 0) & mask)];
        Fp x62905 = x62904 * x27;
        Fp x62906 = x62903 + x62905;
        Fp x62907 = args[2][38 * steps + ((cycle - 0) & mask)];
        Fp x62908 = x62907 * x12;
        Fp x62909 = x62906 + x62908;
        Fp x62910 = args[2][39 * steps + ((cycle - 0) & mask)];
        Fp x62911 = x62910 * x28;
        Fp x62912 = x62909 + x62911;
        Fp x62913 = args[2][40 * steps + ((cycle - 0) & mask)];
        Fp x62914 = x62913 * x13;
        Fp x62915 = x62912 + x62914;
        Fp x62916 = args[2][41 * steps + ((cycle - 0) & mask)];
        Fp x62917 = x62916 * x29;
        Fp x62918 = x62915 + x62917;
        Fp x62919 = args[2][42 * steps + ((cycle - 0) & mask)];
        Fp x62920 = x62919 * x14;
        Fp x62921 = x62918 + x62920;
        Fp x62922 = args[2][43 * steps + ((cycle - 0) & mask)];
        Fp x62923 = x62922 * x30;
        Fp x62924 = x62921 + x62923;
        Fp x62925 = args[2][44 * steps + ((cycle - 0) & mask)];
        Fp x62926 = x62925 * x15;
        Fp x62927 = x62924 + x62926;
        Fp x62928 = args[2][45 * steps + ((cycle - 0) & mask)];
        Fp x62929 = x62928 * x31;
        Fp x62930 = x62927 + x62929;
        Fp x62931 = args[2][46 * steps + ((cycle - 0) & mask)];
        Fp x62932 = x62931 * x16;
        Fp x62933 = x62930 + x62932;
        Fp x62934 = args[2][47 * steps + ((cycle - 0) & mask)];
        Fp x62935 = x62934 * x32;
        Fp x62936 = x62933 + x62935;
        Fp x62937 = x62843 - x62936;
        Fp x62938 = x62937 * x33;
        args[2][110 * steps + cycle] = x62938;
        Fp x62939 = args[2][110 * steps + ((cycle - 0) & mask)];
        Fp x62940 = x62844 + x62939;
        {
          Fp x62941 = Fp(x62940.asUInt32() & x71.asUInt32());
          args[2][48 * steps + cycle] = x62941;
          Fp x62942 = x62940 - x62941;
          Fp x62943 = x62942 * x26;
          Fp x62944 = Fp(x62943.asUInt32() & x71.asUInt32());
          args[2][49 * steps + cycle] = x62944;
          Fp x62945 = x62943 - x62944;
          Fp x62946 = x62945 * x26;
          Fp x62947 = Fp(x62946.asUInt32() & x71.asUInt32());
          args[2][50 * steps + cycle] = x62947;
          Fp x62948 = x62946 - x62947;
          Fp x62949 = x62948 * x26;
          Fp x62950 = Fp(x62949.asUInt32() & x71.asUInt32());
          args[2][51 * steps + cycle] = x62950;
          Fp x62951 = x62949 - x62950;
          Fp x62952 = x62951 * x26;
          Fp x62953 = Fp(x62952.asUInt32() & x71.asUInt32());
          args[2][52 * steps + cycle] = x62953;
          Fp x62954 = x62952 - x62953;
          Fp x62955 = x62954 * x26;
          Fp x62956 = Fp(x62955.asUInt32() & x71.asUInt32());
          args[2][53 * steps + cycle] = x62956;
          Fp x62957 = x62955 - x62956;
          Fp x62958 = x62957 * x26;
          Fp x62959 = Fp(x62958.asUInt32() & x71.asUInt32());
          args[2][54 * steps + cycle] = x62959;
          Fp x62960 = x62958 - x62959;
          Fp x62961 = x62960 * x26;
          Fp x62962 = Fp(x62961.asUInt32() & x71.asUInt32());
          args[2][55 * steps + cycle] = x62962;
          Fp x62963 = x62961 - x62962;
          Fp x62964 = x62963 * x26;
          Fp x62965 = Fp(x62964.asUInt32() & x71.asUInt32());
          args[2][56 * steps + cycle] = x62965;
          Fp x62966 = x62964 - x62965;
          Fp x62967 = x62966 * x26;
          Fp x62968 = Fp(x62967.asUInt32() & x71.asUInt32());
          args[2][57 * steps + cycle] = x62968;
          Fp x62969 = x62967 - x62968;
          Fp x62970 = x62969 * x26;
          Fp x62971 = Fp(x62970.asUInt32() & x71.asUInt32());
          args[2][58 * steps + cycle] = x62971;
          Fp x62972 = x62970 - x62971;
          Fp x62973 = x62972 * x26;
          Fp x62974 = Fp(x62973.asUInt32() & x71.asUInt32());
          args[2][59 * steps + cycle] = x62974;
          Fp x62975 = x62973 - x62974;
          Fp x62976 = x62975 * x26;
          Fp x62977 = Fp(x62976.asUInt32() & x71.asUInt32());
          args[2][60 * steps + cycle] = x62977;
          Fp x62978 = x62976 - x62977;
          Fp x62979 = x62978 * x26;
          Fp x62980 = Fp(x62979.asUInt32() & x71.asUInt32());
          args[2][61 * steps + cycle] = x62980;
          Fp x62981 = x62979 - x62980;
          Fp x62982 = x62981 * x26;
          Fp x62983 = Fp(x62982.asUInt32() & x71.asUInt32());
          args[2][62 * steps + cycle] = x62983;
          Fp x62984 = x62982 - x62983;
          Fp x62985 = x62984 * x26;
          Fp x62986 = Fp(x62985.asUInt32() & x71.asUInt32());
          args[2][63 * steps + cycle] = x62986;
        }
        Fp x62987 = args[2][48 * steps + ((cycle - 0) & mask)];
        Fp x62988 = args[2][49 * steps + ((cycle - 0) & mask)];
        Fp x62989 = x62988 * x1;
        Fp x62990 = x62987 + x62989;
        Fp x62991 = args[2][50 * steps + ((cycle - 0) & mask)];
        Fp x62992 = x62991 * x3;
        Fp x62993 = x62990 + x62992;
        Fp x62994 = args[2][51 * steps + ((cycle - 0) & mask)];
        Fp x62995 = x62994 * x6;
        Fp x62996 = x62993 + x62995;
        Fp x62997 = args[2][52 * steps + ((cycle - 0) & mask)];
        Fp x62998 = x62997 * x11;
        Fp x62999 = x62996 + x62998;
        Fp x63000 = args[2][53 * steps + ((cycle - 0) & mask)];
        Fp x63001 = x63000 * x27;
        Fp x63002 = x62999 + x63001;
        Fp x63003 = args[2][54 * steps + ((cycle - 0) & mask)];
        Fp x63004 = x63003 * x12;
        Fp x63005 = x63002 + x63004;
        Fp x63006 = args[2][55 * steps + ((cycle - 0) & mask)];
        Fp x63007 = x63006 * x28;
        Fp x63008 = x63005 + x63007;
        Fp x63009 = args[2][56 * steps + ((cycle - 0) & mask)];
        Fp x63010 = x63009 * x13;
        Fp x63011 = x63008 + x63010;
        Fp x63012 = args[2][57 * steps + ((cycle - 0) & mask)];
        Fp x63013 = x63012 * x29;
        Fp x63014 = x63011 + x63013;
        Fp x63015 = args[2][58 * steps + ((cycle - 0) & mask)];
        Fp x63016 = x63015 * x14;
        Fp x63017 = x63014 + x63016;
        Fp x63018 = args[2][59 * steps + ((cycle - 0) & mask)];
        Fp x63019 = x63018 * x30;
        Fp x63020 = x63017 + x63019;
        Fp x63021 = args[2][60 * steps + ((cycle - 0) & mask)];
        Fp x63022 = x63021 * x15;
        Fp x63023 = x63020 + x63022;
        Fp x63024 = args[2][61 * steps + ((cycle - 0) & mask)];
        Fp x63025 = x63024 * x31;
        Fp x63026 = x63023 + x63025;
        Fp x63027 = args[2][62 * steps + ((cycle - 0) & mask)];
        Fp x63028 = x63027 * x16;
        Fp x63029 = x63026 + x63028;
        Fp x63030 = args[2][63 * steps + ((cycle - 0) & mask)];
        Fp x63031 = x63030 * x32;
        Fp x63032 = x63029 + x63031;
        Fp x63033 = x62940 - x63032;
        Fp x63034 = x63033 * x33;
        args[2][111 * steps + cycle] = x63034;
        Fp x63035 = args[2][128 * steps + ((cycle - 0) & mask)];
        Fp x63036 = x63035 * x3;
        Fp x63037 = args[2][130 * steps + ((cycle - 0) & mask)];
        Fp x63038 = args[2][129 * steps + ((cycle - 0) & mask)];
        host_args[0] = x63036;
        host_args[1] = x63037;
        host_args[2] = x63038;
        host(ctx, "log", "  FINI, load, addr = %x, val = 0x%04x%04x", host_args.data(), 3, host_outs.data(), 0);
        args[2][127 * steps + cycle] = x7;
        if (x62647 != 0) {
          Fp x63039 = x62261 + x71;
          args[2][126 * steps + cycle] = x63039;
        }
        if (x62649 != 0) {
          Fp x63040 = args[2][130 * steps + ((cycle - 4) & mask)];
          Fp x63041 = args[2][129 * steps + ((cycle - 4) & mask)];
          host_args[0] = x62840;
          host_args[1] = x62744;
          host_args[2] = x63037;
          host_args[3] = x63038;
          host_args[4] = x63032;
          host_args[5] = x62936;
          host_args[6] = x63040;
          host_args[7] = x63041;
          host(ctx, "log", "  VERIFY, 0x%04x%04x == 0x%04x%04x, 0x%04x%04x == 0x%04x%04x", host_args.data(), 8, host_outs.data(), 0);
          Fp x63042 = x62261 - x71;
          args[2][126 * steps + cycle] = x63042;
          Fp x63043 = x62840 - x63037;
          if (x63043 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:300");
          Fp x63044 = x62744 - x63038;
          if (x63044 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:301");
          Fp x63045 = x63032 - x63040;
          if (x63045 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:302");
          Fp x63046 = x62936 - x63041;
          if (x63046 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:303");
        }
        Fp x63047 = x62747 - x71;
        Fp x63048 = x62747 * x63047;
        if (x63048 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:272");
        Fp x63049 = args[2][109 * steps + ((cycle - 0) & mask)];
        Fp x63050 = x63049 - x71;
        Fp x63051 = x63049 * x63050;
        if (x63051 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:273");
        Fp x63052 = x62939 - x71;
        Fp x63053 = x62939 * x63052;
        if (x63053 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:274");
        Fp x63054 = args[2][111 * steps + ((cycle - 0) & mask)];
        Fp x63055 = x63054 - x71;
        Fp x63056 = x63054 * x63055;
        if (x63056 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:275");
        Fp x63057 = x62647 - x71;
        Fp x63058 = x62647 * x63057;
        if (x63058 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:276");
      }
      Fp x63059 = args[2][122 * steps + ((cycle - 0) & mask)];
      Fp x63060 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x63061 = args[2][123 * steps + ((cycle - 0) & mask)];
      Fp x63062 = args[2][124 * steps + ((cycle - 0) & mask)];
      Fp x63063 = args[2][125 * steps + ((cycle - 0) & mask)];
      Fp x63064 = args[2][126 * steps + ((cycle - 0) & mask)];
      Fp x63065 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x63066 = args[2][98 * steps + ((cycle - 0) & mask)];
      host_args[0] = x63059;
      host_args[1] = x63060;
      host_args[2] = x63061;
      host_args[3] = x63062;
      host_args[4] = x63063;
      host_args[5] = x63064;
      host_args[6] = x63065;
      host_args[7] = x63066;
      host(ctx, "log", "  descriptor=%x, isMerkle=%d, count=%d, index=%x, source=%x, digest=%x, contOp=%d, contHash=%d", host_args.data(), 8, host_outs.data(), 0);
      Fp x63067 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x63068 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x63069 = x63068 * x1;
      Fp x63070 = x63067 + x63069;
      Fp x63071 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x63072 = x63071 * x3;
      Fp x63073 = x63070 + x63072;
      Fp x63074 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x63075 = x63074 * x6;
      Fp x63076 = x63073 + x63075;
      Fp x63077 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x63078 = x63077 * x11;
      Fp x63079 = x63076 + x63078;
      Fp x63080 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x63081 = x63080 * x27;
      Fp x63082 = x63079 + x63081;
      Fp x63083 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x63084 = x63083 * x12;
      Fp x63085 = x63082 + x63084;
      Fp x63086 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x63087 = x63086 * x28;
      Fp x63088 = x63085 + x63087;
      Fp x63089 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x63090 = x63089 * x13;
      Fp x63091 = x63088 + x63090;
      Fp x63092 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x63093 = x63092 * x29;
      Fp x63094 = x63091 + x63093;
      Fp x63095 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x63096 = x63095 * x14;
      Fp x63097 = x63094 + x63096;
      Fp x63098 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x63099 = x63098 * x30;
      Fp x63100 = x63097 + x63099;
      Fp x63101 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x63102 = x63101 * x15;
      Fp x63103 = x63100 + x63102;
      Fp x63104 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x63105 = x63104 * x31;
      Fp x63106 = x63103 + x63105;
      Fp x63107 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x63108 = x63107 * x16;
      Fp x63109 = x63106 + x63108;
      Fp x63110 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x63111 = x63110 * x32;
      Fp x63112 = x63109 + x63111;
      Fp x63113 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x63114 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x63115 = x63114 * x1;
      Fp x63116 = x63113 + x63115;
      Fp x63117 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x63118 = x63117 * x3;
      Fp x63119 = x63116 + x63118;
      Fp x63120 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x63121 = x63120 * x6;
      Fp x63122 = x63119 + x63121;
      Fp x63123 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x63124 = x63123 * x11;
      Fp x63125 = x63122 + x63124;
      Fp x63126 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x63127 = x63126 * x27;
      Fp x63128 = x63125 + x63127;
      Fp x63129 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x63130 = x63129 * x12;
      Fp x63131 = x63128 + x63130;
      Fp x63132 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x63133 = x63132 * x28;
      Fp x63134 = x63131 + x63133;
      Fp x63135 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x63136 = x63135 * x13;
      Fp x63137 = x63134 + x63136;
      Fp x63138 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x63139 = x63138 * x29;
      Fp x63140 = x63137 + x63139;
      Fp x63141 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x63142 = x63141 * x14;
      Fp x63143 = x63140 + x63142;
      Fp x63144 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x63145 = x63144 * x30;
      Fp x63146 = x63143 + x63145;
      Fp x63147 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x63148 = x63147 * x15;
      Fp x63149 = x63146 + x63148;
      Fp x63150 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x63151 = x63150 * x31;
      Fp x63152 = x63149 + x63151;
      Fp x63153 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x63154 = x63153 * x16;
      Fp x63155 = x63152 + x63154;
      Fp x63156 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x63157 = x63156 * x32;
      Fp x63158 = x63155 + x63157;
      Fp x63159 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x63160 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x63161 = x63160 * x1;
      Fp x63162 = x63159 + x63161;
      Fp x63163 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x63164 = x63163 * x3;
      Fp x63165 = x63162 + x63164;
      Fp x63166 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x63167 = x63166 * x6;
      Fp x63168 = x63165 + x63167;
      Fp x63169 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x63170 = x63169 * x11;
      Fp x63171 = x63168 + x63170;
      Fp x63172 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x63173 = x63172 * x27;
      Fp x63174 = x63171 + x63173;
      Fp x63175 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x63176 = x63175 * x12;
      Fp x63177 = x63174 + x63176;
      Fp x63178 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x63179 = x63178 * x28;
      Fp x63180 = x63177 + x63179;
      Fp x63181 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x63182 = x63181 * x13;
      Fp x63183 = x63180 + x63182;
      Fp x63184 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x63185 = x63184 * x29;
      Fp x63186 = x63183 + x63185;
      Fp x63187 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x63188 = x63187 * x14;
      Fp x63189 = x63186 + x63188;
      Fp x63190 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x63191 = x63190 * x30;
      Fp x63192 = x63189 + x63191;
      Fp x63193 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x63194 = x63193 * x15;
      Fp x63195 = x63192 + x63194;
      Fp x63196 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x63197 = x63196 * x31;
      Fp x63198 = x63195 + x63197;
      Fp x63199 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x63200 = x63199 * x16;
      Fp x63201 = x63198 + x63200;
      Fp x63202 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x63203 = x63202 * x32;
      Fp x63204 = x63201 + x63203;
      Fp x63205 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x63206 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x63207 = x63206 * x1;
      Fp x63208 = x63205 + x63207;
      Fp x63209 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x63210 = x63209 * x3;
      Fp x63211 = x63208 + x63210;
      Fp x63212 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x63213 = x63212 * x6;
      Fp x63214 = x63211 + x63213;
      Fp x63215 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x63216 = x63215 * x11;
      Fp x63217 = x63214 + x63216;
      Fp x63218 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x63219 = x63218 * x27;
      Fp x63220 = x63217 + x63219;
      Fp x63221 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x63222 = x63221 * x12;
      Fp x63223 = x63220 + x63222;
      Fp x63224 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x63225 = x63224 * x28;
      Fp x63226 = x63223 + x63225;
      Fp x63227 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x63228 = x63227 * x13;
      Fp x63229 = x63226 + x63228;
      Fp x63230 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x63231 = x63230 * x29;
      Fp x63232 = x63229 + x63231;
      Fp x63233 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x63234 = x63233 * x14;
      Fp x63235 = x63232 + x63234;
      Fp x63236 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x63237 = x63236 * x30;
      Fp x63238 = x63235 + x63237;
      Fp x63239 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x63240 = x63239 * x15;
      Fp x63241 = x63238 + x63240;
      Fp x63242 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x63243 = x63242 * x31;
      Fp x63244 = x63241 + x63243;
      Fp x63245 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x63246 = x63245 * x16;
      Fp x63247 = x63244 + x63246;
      Fp x63248 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x63249 = x63248 * x32;
      Fp x63250 = x63247 + x63249;
      host_args[0] = x63112;
      host_args[1] = x63158;
      host_args[2] = x63204;
      host_args[3] = x63250;
      host(ctx, "log", "  a=%04x%04x, e=%04x%04x", host_args.data(), 4, host_outs.data(), 0);
      Fp x63251 = x63113 - x71;
      Fp x63252 = x63113 * x63251;
      if (x63252 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63253 = x63114 - x71;
      Fp x63254 = x63114 * x63253;
      if (x63254 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63255 = x63117 - x71;
      Fp x63256 = x63117 * x63255;
      if (x63256 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63257 = x63120 - x71;
      Fp x63258 = x63120 * x63257;
      if (x63258 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63259 = x63123 - x71;
      Fp x63260 = x63123 * x63259;
      if (x63260 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63261 = x63126 - x71;
      Fp x63262 = x63126 * x63261;
      if (x63262 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63263 = x63129 - x71;
      Fp x63264 = x63129 * x63263;
      if (x63264 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63265 = x63132 - x71;
      Fp x63266 = x63132 * x63265;
      if (x63266 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63267 = x63135 - x71;
      Fp x63268 = x63135 * x63267;
      if (x63268 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63269 = x63138 - x71;
      Fp x63270 = x63138 * x63269;
      if (x63270 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63271 = x63141 - x71;
      Fp x63272 = x63141 * x63271;
      if (x63272 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63273 = x63144 - x71;
      Fp x63274 = x63144 * x63273;
      if (x63274 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63275 = x63147 - x71;
      Fp x63276 = x63147 * x63275;
      if (x63276 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63277 = x63150 - x71;
      Fp x63278 = x63150 * x63277;
      if (x63278 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63279 = x63153 - x71;
      Fp x63280 = x63153 * x63279;
      if (x63280 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63281 = x63156 - x71;
      Fp x63282 = x63156 * x63281;
      if (x63282 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63283 = x63067 - x71;
      Fp x63284 = x63067 * x63283;
      if (x63284 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63285 = x63068 - x71;
      Fp x63286 = x63068 * x63285;
      if (x63286 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63287 = x63071 - x71;
      Fp x63288 = x63071 * x63287;
      if (x63288 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63289 = x63074 - x71;
      Fp x63290 = x63074 * x63289;
      if (x63290 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63291 = x63077 - x71;
      Fp x63292 = x63077 * x63291;
      if (x63292 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63293 = x63080 - x71;
      Fp x63294 = x63080 * x63293;
      if (x63294 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63295 = x63083 - x71;
      Fp x63296 = x63083 * x63295;
      if (x63296 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63297 = x63086 - x71;
      Fp x63298 = x63086 * x63297;
      if (x63298 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63299 = x63089 - x71;
      Fp x63300 = x63089 * x63299;
      if (x63300 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63301 = x63092 - x71;
      Fp x63302 = x63092 * x63301;
      if (x63302 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63303 = x63095 - x71;
      Fp x63304 = x63095 * x63303;
      if (x63304 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63305 = x63098 - x71;
      Fp x63306 = x63098 * x63305;
      if (x63306 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63307 = x63101 - x71;
      Fp x63308 = x63101 * x63307;
      if (x63308 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63309 = x63104 - x71;
      Fp x63310 = x63104 * x63309;
      if (x63310 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63311 = x63107 - x71;
      Fp x63312 = x63107 * x63311;
      if (x63312 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63313 = x63110 - x71;
      Fp x63314 = x63110 * x63313;
      if (x63314 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63315 = x63205 - x71;
      Fp x63316 = x63205 * x63315;
      if (x63316 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63317 = x63206 - x71;
      Fp x63318 = x63206 * x63317;
      if (x63318 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63319 = x63209 - x71;
      Fp x63320 = x63209 * x63319;
      if (x63320 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63321 = x63212 - x71;
      Fp x63322 = x63212 * x63321;
      if (x63322 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63323 = x63215 - x71;
      Fp x63324 = x63215 * x63323;
      if (x63324 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63325 = x63218 - x71;
      Fp x63326 = x63218 * x63325;
      if (x63326 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63327 = x63221 - x71;
      Fp x63328 = x63221 * x63327;
      if (x63328 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63329 = x63224 - x71;
      Fp x63330 = x63224 * x63329;
      if (x63330 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63331 = x63227 - x71;
      Fp x63332 = x63227 * x63331;
      if (x63332 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63333 = x63230 - x71;
      Fp x63334 = x63230 * x63333;
      if (x63334 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63335 = x63233 - x71;
      Fp x63336 = x63233 * x63335;
      if (x63336 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63337 = x63236 - x71;
      Fp x63338 = x63236 * x63337;
      if (x63338 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63339 = x63239 - x71;
      Fp x63340 = x63239 * x63339;
      if (x63340 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63341 = x63242 - x71;
      Fp x63342 = x63242 * x63341;
      if (x63342 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63343 = x63245 - x71;
      Fp x63344 = x63245 * x63343;
      if (x63344 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63345 = x63248 - x71;
      Fp x63346 = x63248 * x63345;
      if (x63346 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63347 = x63159 - x71;
      Fp x63348 = x63159 * x63347;
      if (x63348 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63349 = x63160 - x71;
      Fp x63350 = x63160 * x63349;
      if (x63350 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63351 = x63163 - x71;
      Fp x63352 = x63163 * x63351;
      if (x63352 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63353 = x63166 - x71;
      Fp x63354 = x63166 * x63353;
      if (x63354 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63355 = x63169 - x71;
      Fp x63356 = x63169 * x63355;
      if (x63356 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63357 = x63172 - x71;
      Fp x63358 = x63172 * x63357;
      if (x63358 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63359 = x63175 - x71;
      Fp x63360 = x63175 * x63359;
      if (x63360 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63361 = x63178 - x71;
      Fp x63362 = x63178 * x63361;
      if (x63362 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63363 = x63181 - x71;
      Fp x63364 = x63181 * x63363;
      if (x63364 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63365 = x63184 - x71;
      Fp x63366 = x63184 * x63365;
      if (x63366 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63367 = x63187 - x71;
      Fp x63368 = x63187 * x63367;
      if (x63368 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63369 = x63190 - x71;
      Fp x63370 = x63190 * x63369;
      if (x63370 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63371 = x63193 - x71;
      Fp x63372 = x63193 * x63371;
      if (x63372 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63373 = x63196 - x71;
      Fp x63374 = x63196 * x63373;
      if (x63374 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63375 = x63199 - x71;
      Fp x63376 = x63199 * x63375;
      if (x63376 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63377 = x63202 - x71;
      Fp x63378 = x63202 * x63377;
      if (x63378 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63379 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x63380 = x63379 - x71;
      Fp x63381 = x63379 * x63380;
      if (x63381 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63382 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x63383 = x63382 - x71;
      Fp x63384 = x63382 * x63383;
      if (x63384 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63385 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x63386 = x63385 - x71;
      Fp x63387 = x63385 * x63386;
      if (x63387 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63388 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x63389 = x63388 - x71;
      Fp x63390 = x63388 * x63389;
      if (x63390 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63391 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x63392 = x63391 - x71;
      Fp x63393 = x63391 * x63392;
      if (x63393 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63394 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x63395 = x63394 - x71;
      Fp x63396 = x63394 * x63395;
      if (x63396 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63397 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x63398 = x63397 - x71;
      Fp x63399 = x63397 * x63398;
      if (x63399 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63400 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x63401 = x63400 - x71;
      Fp x63402 = x63400 * x63401;
      if (x63402 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63403 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x63404 = x63403 - x71;
      Fp x63405 = x63403 * x63404;
      if (x63405 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63406 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x63407 = x63406 - x71;
      Fp x63408 = x63406 * x63407;
      if (x63408 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63409 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x63410 = x63409 - x71;
      Fp x63411 = x63409 * x63410;
      if (x63411 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63412 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x63413 = x63412 - x71;
      Fp x63414 = x63412 * x63413;
      if (x63414 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63415 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x63416 = x63415 - x71;
      Fp x63417 = x63415 * x63416;
      if (x63417 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63418 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x63419 = x63418 - x71;
      Fp x63420 = x63418 * x63419;
      if (x63420 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63421 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x63422 = x63421 - x71;
      Fp x63423 = x63421 * x63422;
      if (x63423 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63424 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x63425 = x63424 - x71;
      Fp x63426 = x63424 * x63425;
      if (x63426 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63427 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x63428 = x63427 - x71;
      Fp x63429 = x63427 * x63428;
      if (x63429 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63430 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x63431 = x63430 - x71;
      Fp x63432 = x63430 * x63431;
      if (x63432 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63433 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x63434 = x63433 - x71;
      Fp x63435 = x63433 * x63434;
      if (x63435 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63436 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x63437 = x63436 - x71;
      Fp x63438 = x63436 * x63437;
      if (x63438 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63439 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x63440 = x63439 - x71;
      Fp x63441 = x63439 * x63440;
      if (x63441 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63442 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x63443 = x63442 - x71;
      Fp x63444 = x63442 * x63443;
      if (x63444 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63445 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x63446 = x63445 - x71;
      Fp x63447 = x63445 * x63446;
      if (x63447 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63448 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x63449 = x63448 - x71;
      Fp x63450 = x63448 * x63449;
      if (x63450 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63451 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x63452 = x63451 - x71;
      Fp x63453 = x63451 * x63452;
      if (x63453 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63454 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x63455 = x63454 - x71;
      Fp x63456 = x63454 * x63455;
      if (x63456 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63457 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x63458 = x63457 - x71;
      Fp x63459 = x63457 * x63458;
      if (x63459 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63460 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x63461 = x63460 - x71;
      Fp x63462 = x63460 * x63461;
      if (x63462 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63463 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x63464 = x63463 - x71;
      Fp x63465 = x63463 * x63464;
      if (x63465 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63466 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x63467 = x63466 - x71;
      Fp x63468 = x63466 * x63467;
      if (x63468 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63469 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x63470 = x63469 - x71;
      Fp x63471 = x63469 * x63470;
      if (x63471 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63472 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x63473 = x63472 - x71;
      Fp x63474 = x63472 * x63473;
      if (x63474 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63475 = x63060 - x71;
      Fp x63476 = x63060 * x63475;
      if (x63476 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63477 = x63065 - x71;
      Fp x63478 = x63065 * x63477;
      if (x63478 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63479 = x63066 - x71;
      Fp x63480 = x63066 * x63479;
      if (x63480 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63481 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x63482 = x63481 - x71;
      Fp x63483 = x63481 * x63482;
      if (x63483 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x63484 = x58343 - x71;
      Fp x63485 = x58343 * x63484;
      if (x63485 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x63486 = x58323 - x71;
      Fp x63487 = x58323 * x63486;
      if (x63487 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x63488 = x58324 - x71;
      Fp x63489 = x58324 * x63488;
      if (x63489 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x63490 = x58327 - x71;
      Fp x63491 = x58327 * x63490;
      if (x63491 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x63492 = x58330 - x71;
      Fp x63493 = x58330 * x63492;
      if (x63493 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x63494 = x58333 - x71;
      Fp x63495 = x58333 * x63494;
      if (x63495 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x63496 = x58336 - x71;
      Fp x63497 = x58336 * x63496;
      if (x63497 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x63498 = x58339 - x71;
      Fp x63499 = x58339 * x63498;
      if (x63499 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
      Fp x63500 = x58343 + x58323;
      Fp x63501 = x63500 + x58324;
      Fp x63502 = x63501 + x58327;
      Fp x63503 = x63502 + x58330;
      Fp x63504 = x63503 + x58333;
      Fp x63505 = x63504 + x58336;
      Fp x63506 = x63505 + x58339;
      Fp x63507 = x63506 - x71;
      if (x63507 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:182");
    }
    Fp x63508 = args[2][142 * steps + ((cycle - 0) & mask)];
    if (x63508 != 0) {
      Fp x63509 = args[2][64 * steps + ((cycle - 2) & mask)];
      Fp x63510 = args[2][65 * steps + ((cycle - 2) & mask)];
      Fp x63511 = args[2][66 * steps + ((cycle - 2) & mask)];
      Fp x63512 = args[2][67 * steps + ((cycle - 2) & mask)];
      Fp x63513 = args[2][68 * steps + ((cycle - 2) & mask)];
      Fp x63514 = args[2][69 * steps + ((cycle - 2) & mask)];
      Fp x63515 = args[2][70 * steps + ((cycle - 2) & mask)];
      Fp x63516 = args[2][71 * steps + ((cycle - 2) & mask)];
      Fp x63517 = args[2][72 * steps + ((cycle - 2) & mask)];
      Fp x63518 = args[2][73 * steps + ((cycle - 2) & mask)];
      Fp x63519 = args[2][74 * steps + ((cycle - 2) & mask)];
      Fp x63520 = args[2][75 * steps + ((cycle - 2) & mask)];
      Fp x63521 = args[2][76 * steps + ((cycle - 2) & mask)];
      Fp x63522 = args[2][77 * steps + ((cycle - 2) & mask)];
      Fp x63523 = args[2][78 * steps + ((cycle - 2) & mask)];
      Fp x63524 = args[2][79 * steps + ((cycle - 2) & mask)];
      Fp x63525 = args[2][80 * steps + ((cycle - 2) & mask)];
      Fp x63526 = args[2][81 * steps + ((cycle - 2) & mask)];
      Fp x63527 = args[2][82 * steps + ((cycle - 2) & mask)];
      Fp x63528 = args[2][83 * steps + ((cycle - 2) & mask)];
      Fp x63529 = args[2][84 * steps + ((cycle - 2) & mask)];
      Fp x63530 = args[2][85 * steps + ((cycle - 2) & mask)];
      Fp x63531 = args[2][86 * steps + ((cycle - 2) & mask)];
      Fp x63532 = args[2][87 * steps + ((cycle - 2) & mask)];
      Fp x63533 = args[2][88 * steps + ((cycle - 2) & mask)];
      Fp x63534 = args[2][89 * steps + ((cycle - 2) & mask)];
      Fp x63535 = args[2][90 * steps + ((cycle - 2) & mask)];
      Fp x63536 = args[2][91 * steps + ((cycle - 2) & mask)];
      Fp x63537 = args[2][92 * steps + ((cycle - 2) & mask)];
      Fp x63538 = args[2][93 * steps + ((cycle - 2) & mask)];
      Fp x63539 = args[2][94 * steps + ((cycle - 2) & mask)];
      Fp x63540 = args[2][95 * steps + ((cycle - 2) & mask)];
      Fp x63541 = args[2][64 * steps + ((cycle - 7) & mask)];
      Fp x63542 = args[2][65 * steps + ((cycle - 7) & mask)];
      Fp x63543 = args[2][66 * steps + ((cycle - 7) & mask)];
      Fp x63544 = args[2][67 * steps + ((cycle - 7) & mask)];
      Fp x63545 = args[2][68 * steps + ((cycle - 7) & mask)];
      Fp x63546 = args[2][69 * steps + ((cycle - 7) & mask)];
      Fp x63547 = args[2][70 * steps + ((cycle - 7) & mask)];
      Fp x63548 = args[2][71 * steps + ((cycle - 7) & mask)];
      Fp x63549 = args[2][72 * steps + ((cycle - 7) & mask)];
      Fp x63550 = args[2][73 * steps + ((cycle - 7) & mask)];
      Fp x63551 = args[2][74 * steps + ((cycle - 7) & mask)];
      Fp x63552 = args[2][75 * steps + ((cycle - 7) & mask)];
      Fp x63553 = args[2][76 * steps + ((cycle - 7) & mask)];
      Fp x63554 = args[2][77 * steps + ((cycle - 7) & mask)];
      Fp x63555 = args[2][78 * steps + ((cycle - 7) & mask)];
      Fp x63556 = args[2][79 * steps + ((cycle - 7) & mask)];
      Fp x63557 = args[2][80 * steps + ((cycle - 7) & mask)];
      Fp x63558 = args[2][81 * steps + ((cycle - 7) & mask)];
      Fp x63559 = args[2][82 * steps + ((cycle - 7) & mask)];
      Fp x63560 = args[2][83 * steps + ((cycle - 7) & mask)];
      Fp x63561 = args[2][84 * steps + ((cycle - 7) & mask)];
      Fp x63562 = args[2][85 * steps + ((cycle - 7) & mask)];
      Fp x63563 = args[2][86 * steps + ((cycle - 7) & mask)];
      Fp x63564 = args[2][87 * steps + ((cycle - 7) & mask)];
      Fp x63565 = args[2][88 * steps + ((cycle - 7) & mask)];
      Fp x63566 = args[2][89 * steps + ((cycle - 7) & mask)];
      Fp x63567 = args[2][90 * steps + ((cycle - 7) & mask)];
      Fp x63568 = args[2][91 * steps + ((cycle - 7) & mask)];
      Fp x63569 = args[2][92 * steps + ((cycle - 7) & mask)];
      Fp x63570 = args[2][93 * steps + ((cycle - 7) & mask)];
      Fp x63571 = args[2][94 * steps + ((cycle - 7) & mask)];
      Fp x63572 = args[2][95 * steps + ((cycle - 7) & mask)];
      Fp x63573 = args[2][64 * steps + ((cycle - 15) & mask)];
      Fp x63574 = args[2][65 * steps + ((cycle - 15) & mask)];
      Fp x63575 = args[2][66 * steps + ((cycle - 15) & mask)];
      Fp x63576 = args[2][67 * steps + ((cycle - 15) & mask)];
      Fp x63577 = args[2][68 * steps + ((cycle - 15) & mask)];
      Fp x63578 = args[2][69 * steps + ((cycle - 15) & mask)];
      Fp x63579 = args[2][70 * steps + ((cycle - 15) & mask)];
      Fp x63580 = args[2][71 * steps + ((cycle - 15) & mask)];
      Fp x63581 = args[2][72 * steps + ((cycle - 15) & mask)];
      Fp x63582 = args[2][73 * steps + ((cycle - 15) & mask)];
      Fp x63583 = args[2][74 * steps + ((cycle - 15) & mask)];
      Fp x63584 = args[2][75 * steps + ((cycle - 15) & mask)];
      Fp x63585 = args[2][76 * steps + ((cycle - 15) & mask)];
      Fp x63586 = args[2][77 * steps + ((cycle - 15) & mask)];
      Fp x63587 = args[2][78 * steps + ((cycle - 15) & mask)];
      Fp x63588 = args[2][79 * steps + ((cycle - 15) & mask)];
      Fp x63589 = args[2][80 * steps + ((cycle - 15) & mask)];
      Fp x63590 = args[2][81 * steps + ((cycle - 15) & mask)];
      Fp x63591 = args[2][82 * steps + ((cycle - 15) & mask)];
      Fp x63592 = args[2][83 * steps + ((cycle - 15) & mask)];
      Fp x63593 = args[2][84 * steps + ((cycle - 15) & mask)];
      Fp x63594 = args[2][85 * steps + ((cycle - 15) & mask)];
      Fp x63595 = args[2][86 * steps + ((cycle - 15) & mask)];
      Fp x63596 = args[2][87 * steps + ((cycle - 15) & mask)];
      Fp x63597 = args[2][88 * steps + ((cycle - 15) & mask)];
      Fp x63598 = args[2][89 * steps + ((cycle - 15) & mask)];
      Fp x63599 = args[2][90 * steps + ((cycle - 15) & mask)];
      Fp x63600 = args[2][91 * steps + ((cycle - 15) & mask)];
      Fp x63601 = args[2][92 * steps + ((cycle - 15) & mask)];
      Fp x63602 = args[2][93 * steps + ((cycle - 15) & mask)];
      Fp x63603 = args[2][94 * steps + ((cycle - 15) & mask)];
      Fp x63604 = args[2][95 * steps + ((cycle - 15) & mask)];
      Fp x63605 = args[2][64 * steps + ((cycle - 16) & mask)];
      Fp x63606 = args[2][65 * steps + ((cycle - 16) & mask)];
      Fp x63607 = args[2][66 * steps + ((cycle - 16) & mask)];
      Fp x63608 = args[2][67 * steps + ((cycle - 16) & mask)];
      Fp x63609 = args[2][68 * steps + ((cycle - 16) & mask)];
      Fp x63610 = args[2][69 * steps + ((cycle - 16) & mask)];
      Fp x63611 = args[2][70 * steps + ((cycle - 16) & mask)];
      Fp x63612 = args[2][71 * steps + ((cycle - 16) & mask)];
      Fp x63613 = args[2][72 * steps + ((cycle - 16) & mask)];
      Fp x63614 = args[2][73 * steps + ((cycle - 16) & mask)];
      Fp x63615 = args[2][74 * steps + ((cycle - 16) & mask)];
      Fp x63616 = args[2][75 * steps + ((cycle - 16) & mask)];
      Fp x63617 = args[2][76 * steps + ((cycle - 16) & mask)];
      Fp x63618 = args[2][77 * steps + ((cycle - 16) & mask)];
      Fp x63619 = args[2][78 * steps + ((cycle - 16) & mask)];
      Fp x63620 = args[2][79 * steps + ((cycle - 16) & mask)];
      Fp x63621 = args[2][80 * steps + ((cycle - 16) & mask)];
      Fp x63622 = args[2][81 * steps + ((cycle - 16) & mask)];
      Fp x63623 = args[2][82 * steps + ((cycle - 16) & mask)];
      Fp x63624 = args[2][83 * steps + ((cycle - 16) & mask)];
      Fp x63625 = args[2][84 * steps + ((cycle - 16) & mask)];
      Fp x63626 = args[2][85 * steps + ((cycle - 16) & mask)];
      Fp x63627 = args[2][86 * steps + ((cycle - 16) & mask)];
      Fp x63628 = args[2][87 * steps + ((cycle - 16) & mask)];
      Fp x63629 = args[2][88 * steps + ((cycle - 16) & mask)];
      Fp x63630 = args[2][89 * steps + ((cycle - 16) & mask)];
      Fp x63631 = args[2][90 * steps + ((cycle - 16) & mask)];
      Fp x63632 = args[2][91 * steps + ((cycle - 16) & mask)];
      Fp x63633 = args[2][92 * steps + ((cycle - 16) & mask)];
      Fp x63634 = args[2][93 * steps + ((cycle - 16) & mask)];
      Fp x63635 = args[2][94 * steps + ((cycle - 16) & mask)];
      Fp x63636 = args[2][95 * steps + ((cycle - 16) & mask)];
      Fp x63637 = x63591 + x63576;
      Fp x63638 = x63591 * x1;
      Fp x63639 = x63638 * x63576;
      Fp x63640 = x63637 - x63639;
      Fp x63641 = x63592 + x63577;
      Fp x63642 = x63592 * x1;
      Fp x63643 = x63642 * x63577;
      Fp x63644 = x63641 - x63643;
      Fp x63645 = x63593 + x63578;
      Fp x63646 = x63593 * x1;
      Fp x63647 = x63646 * x63578;
      Fp x63648 = x63645 - x63647;
      Fp x63649 = x63594 + x63579;
      Fp x63650 = x63594 * x1;
      Fp x63651 = x63650 * x63579;
      Fp x63652 = x63649 - x63651;
      Fp x63653 = x63595 + x63580;
      Fp x63654 = x63595 * x1;
      Fp x63655 = x63654 * x63580;
      Fp x63656 = x63653 - x63655;
      Fp x63657 = x63596 + x63581;
      Fp x63658 = x63596 * x1;
      Fp x63659 = x63658 * x63581;
      Fp x63660 = x63657 - x63659;
      Fp x63661 = x63597 + x63582;
      Fp x63662 = x63597 * x1;
      Fp x63663 = x63662 * x63582;
      Fp x63664 = x63661 - x63663;
      Fp x63665 = x63598 + x63583;
      Fp x63666 = x63598 * x1;
      Fp x63667 = x63666 * x63583;
      Fp x63668 = x63665 - x63667;
      Fp x63669 = x63599 + x63584;
      Fp x63670 = x63599 * x1;
      Fp x63671 = x63670 * x63584;
      Fp x63672 = x63669 - x63671;
      Fp x63673 = x63600 + x63585;
      Fp x63674 = x63600 * x1;
      Fp x63675 = x63674 * x63585;
      Fp x63676 = x63673 - x63675;
      Fp x63677 = x63601 + x63586;
      Fp x63678 = x63601 * x1;
      Fp x63679 = x63678 * x63586;
      Fp x63680 = x63677 - x63679;
      Fp x63681 = x63602 + x63587;
      Fp x63682 = x63602 * x1;
      Fp x63683 = x63682 * x63587;
      Fp x63684 = x63681 - x63683;
      Fp x63685 = x63603 + x63588;
      Fp x63686 = x63603 * x1;
      Fp x63687 = x63686 * x63588;
      Fp x63688 = x63685 - x63687;
      Fp x63689 = x63604 + x63589;
      Fp x63690 = x63604 * x1;
      Fp x63691 = x63690 * x63589;
      Fp x63692 = x63689 - x63691;
      Fp x63693 = x63573 + x63590;
      Fp x63694 = x63573 * x1;
      Fp x63695 = x63694 * x63590;
      Fp x63696 = x63693 - x63695;
      Fp x63697 = x63574 + x63591;
      Fp x63698 = x63574 * x1;
      Fp x63699 = x63698 * x63591;
      Fp x63700 = x63697 - x63699;
      Fp x63701 = x63575 + x63592;
      Fp x63702 = x63575 * x1;
      Fp x63703 = x63702 * x63592;
      Fp x63704 = x63701 - x63703;
      Fp x63705 = x63576 + x63593;
      Fp x63706 = x63576 * x1;
      Fp x63707 = x63706 * x63593;
      Fp x63708 = x63705 - x63707;
      Fp x63709 = x63577 + x63594;
      Fp x63710 = x63577 * x1;
      Fp x63711 = x63710 * x63594;
      Fp x63712 = x63709 - x63711;
      Fp x63713 = x63578 + x63595;
      Fp x63714 = x63578 * x1;
      Fp x63715 = x63714 * x63595;
      Fp x63716 = x63713 - x63715;
      Fp x63717 = x63579 + x63596;
      Fp x63718 = x63579 * x1;
      Fp x63719 = x63718 * x63596;
      Fp x63720 = x63717 - x63719;
      Fp x63721 = x63580 + x63597;
      Fp x63722 = x63580 * x1;
      Fp x63723 = x63722 * x63597;
      Fp x63724 = x63721 - x63723;
      Fp x63725 = x63581 + x63598;
      Fp x63726 = x63581 * x1;
      Fp x63727 = x63726 * x63598;
      Fp x63728 = x63725 - x63727;
      Fp x63729 = x63582 + x63599;
      Fp x63730 = x63582 * x1;
      Fp x63731 = x63730 * x63599;
      Fp x63732 = x63729 - x63731;
      Fp x63733 = x63583 + x63600;
      Fp x63734 = x63583 * x1;
      Fp x63735 = x63734 * x63600;
      Fp x63736 = x63733 - x63735;
      Fp x63737 = x63584 + x63601;
      Fp x63738 = x63584 * x1;
      Fp x63739 = x63738 * x63601;
      Fp x63740 = x63737 - x63739;
      Fp x63741 = x63585 + x63602;
      Fp x63742 = x63585 * x1;
      Fp x63743 = x63742 * x63602;
      Fp x63744 = x63741 - x63743;
      Fp x63745 = x63586 + x63603;
      Fp x63746 = x63586 * x1;
      Fp x63747 = x63746 * x63603;
      Fp x63748 = x63745 - x63747;
      Fp x63749 = x63587 + x63604;
      Fp x63750 = x63587 * x1;
      Fp x63751 = x63750 * x63604;
      Fp x63752 = x63749 - x63751;
      Fp x63753 = x63580 + x63640;
      Fp x63754 = x63722 * x63640;
      Fp x63755 = x63753 - x63754;
      Fp x63756 = x63581 + x63644;
      Fp x63757 = x63726 * x63644;
      Fp x63758 = x63756 - x63757;
      Fp x63759 = x63582 + x63648;
      Fp x63760 = x63730 * x63648;
      Fp x63761 = x63759 - x63760;
      Fp x63762 = x63583 + x63652;
      Fp x63763 = x63734 * x63652;
      Fp x63764 = x63762 - x63763;
      Fp x63765 = x63584 + x63656;
      Fp x63766 = x63738 * x63656;
      Fp x63767 = x63765 - x63766;
      Fp x63768 = x63585 + x63660;
      Fp x63769 = x63742 * x63660;
      Fp x63770 = x63768 - x63769;
      Fp x63771 = x63586 + x63664;
      Fp x63772 = x63746 * x63664;
      Fp x63773 = x63771 - x63772;
      Fp x63774 = x63587 + x63668;
      Fp x63775 = x63750 * x63668;
      Fp x63776 = x63774 - x63775;
      Fp x63777 = x63588 + x63672;
      Fp x63778 = x63588 * x1;
      Fp x63779 = x63778 * x63672;
      Fp x63780 = x63777 - x63779;
      Fp x63781 = x63589 + x63676;
      Fp x63782 = x63589 * x1;
      Fp x63783 = x63782 * x63676;
      Fp x63784 = x63781 - x63783;
      Fp x63785 = x63590 + x63680;
      Fp x63786 = x63590 * x1;
      Fp x63787 = x63786 * x63680;
      Fp x63788 = x63785 - x63787;
      Fp x63789 = x63591 + x63684;
      Fp x63790 = x63638 * x63684;
      Fp x63791 = x63789 - x63790;
      Fp x63792 = x63592 + x63688;
      Fp x63793 = x63642 * x63688;
      Fp x63794 = x63792 - x63793;
      Fp x63795 = x63593 + x63692;
      Fp x63796 = x63646 * x63692;
      Fp x63797 = x63795 - x63796;
      Fp x63798 = x63594 + x63696;
      Fp x63799 = x63650 * x63696;
      Fp x63800 = x63798 - x63799;
      Fp x63801 = x63595 + x63700;
      Fp x63802 = x63654 * x63700;
      Fp x63803 = x63801 - x63802;
      Fp x63804 = x63596 + x63704;
      Fp x63805 = x63658 * x63704;
      Fp x63806 = x63804 - x63805;
      Fp x63807 = x63597 + x63708;
      Fp x63808 = x63662 * x63708;
      Fp x63809 = x63807 - x63808;
      Fp x63810 = x63598 + x63712;
      Fp x63811 = x63666 * x63712;
      Fp x63812 = x63810 - x63811;
      Fp x63813 = x63599 + x63716;
      Fp x63814 = x63670 * x63716;
      Fp x63815 = x63813 - x63814;
      Fp x63816 = x63600 + x63720;
      Fp x63817 = x63674 * x63720;
      Fp x63818 = x63816 - x63817;
      Fp x63819 = x63601 + x63724;
      Fp x63820 = x63678 * x63724;
      Fp x63821 = x63819 - x63820;
      Fp x63822 = x63602 + x63728;
      Fp x63823 = x63682 * x63728;
      Fp x63824 = x63822 - x63823;
      Fp x63825 = x63603 + x63732;
      Fp x63826 = x63686 * x63732;
      Fp x63827 = x63825 - x63826;
      Fp x63828 = x63604 + x63736;
      Fp x63829 = x63690 * x63736;
      Fp x63830 = x63828 - x63829;
      Fp x63831 = x63573 + x63740;
      Fp x63832 = x63694 * x63740;
      Fp x63833 = x63831 - x63832;
      Fp x63834 = x63574 + x63744;
      Fp x63835 = x63698 * x63744;
      Fp x63836 = x63834 - x63835;
      Fp x63837 = x63575 + x63748;
      Fp x63838 = x63702 * x63748;
      Fp x63839 = x63837 - x63838;
      Fp x63840 = x63576 + x63752;
      Fp x63841 = x63706 * x63752;
      Fp x63842 = x63840 - x63841;
      Fp x63843 = x63577 + x63588;
      Fp x63844 = x63710 * x63588;
      Fp x63845 = x63843 - x63844;
      Fp x63846 = x63578 + x63589;
      Fp x63847 = x63714 * x63589;
      Fp x63848 = x63846 - x63847;
      Fp x63849 = x63579 + x63590;
      Fp x63850 = x63718 * x63590;
      Fp x63851 = x63849 - x63850;
      Fp x63852 = x63528 + x63519;
      Fp x63853 = x63528 * x1;
      Fp x63854 = x63853 * x63519;
      Fp x63855 = x63852 - x63854;
      Fp x63856 = x63529 + x63520;
      Fp x63857 = x63529 * x1;
      Fp x63858 = x63857 * x63520;
      Fp x63859 = x63856 - x63858;
      Fp x63860 = x63530 + x63521;
      Fp x63861 = x63530 * x1;
      Fp x63862 = x63861 * x63521;
      Fp x63863 = x63860 - x63862;
      Fp x63864 = x63531 + x63522;
      Fp x63865 = x63531 * x1;
      Fp x63866 = x63865 * x63522;
      Fp x63867 = x63864 - x63866;
      Fp x63868 = x63532 + x63523;
      Fp x63869 = x63532 * x1;
      Fp x63870 = x63869 * x63523;
      Fp x63871 = x63868 - x63870;
      Fp x63872 = x63533 + x63524;
      Fp x63873 = x63533 * x1;
      Fp x63874 = x63873 * x63524;
      Fp x63875 = x63872 - x63874;
      Fp x63876 = x63534 + x63525;
      Fp x63877 = x63534 * x1;
      Fp x63878 = x63877 * x63525;
      Fp x63879 = x63876 - x63878;
      Fp x63880 = x63535 + x63526;
      Fp x63881 = x63535 * x1;
      Fp x63882 = x63881 * x63526;
      Fp x63883 = x63880 - x63882;
      Fp x63884 = x63536 + x63527;
      Fp x63885 = x63536 * x1;
      Fp x63886 = x63885 * x63527;
      Fp x63887 = x63884 - x63886;
      Fp x63888 = x63537 + x63528;
      Fp x63889 = x63537 * x1;
      Fp x63890 = x63889 * x63528;
      Fp x63891 = x63888 - x63890;
      Fp x63892 = x63538 + x63529;
      Fp x63893 = x63538 * x1;
      Fp x63894 = x63893 * x63529;
      Fp x63895 = x63892 - x63894;
      Fp x63896 = x63539 + x63530;
      Fp x63897 = x63539 * x1;
      Fp x63898 = x63897 * x63530;
      Fp x63899 = x63896 - x63898;
      Fp x63900 = x63540 + x63531;
      Fp x63901 = x63540 * x1;
      Fp x63902 = x63901 * x63531;
      Fp x63903 = x63900 - x63902;
      Fp x63904 = x63509 + x63532;
      Fp x63905 = x63509 * x1;
      Fp x63906 = x63905 * x63532;
      Fp x63907 = x63904 - x63906;
      Fp x63908 = x63510 + x63533;
      Fp x63909 = x63510 * x1;
      Fp x63910 = x63909 * x63533;
      Fp x63911 = x63908 - x63910;
      Fp x63912 = x63511 + x63534;
      Fp x63913 = x63511 * x1;
      Fp x63914 = x63913 * x63534;
      Fp x63915 = x63912 - x63914;
      Fp x63916 = x63512 + x63535;
      Fp x63917 = x63512 * x1;
      Fp x63918 = x63917 * x63535;
      Fp x63919 = x63916 - x63918;
      Fp x63920 = x63513 + x63536;
      Fp x63921 = x63513 * x1;
      Fp x63922 = x63921 * x63536;
      Fp x63923 = x63920 - x63922;
      Fp x63924 = x63514 + x63537;
      Fp x63925 = x63514 * x1;
      Fp x63926 = x63925 * x63537;
      Fp x63927 = x63924 - x63926;
      Fp x63928 = x63515 + x63538;
      Fp x63929 = x63515 * x1;
      Fp x63930 = x63929 * x63538;
      Fp x63931 = x63928 - x63930;
      Fp x63932 = x63516 + x63539;
      Fp x63933 = x63516 * x1;
      Fp x63934 = x63933 * x63539;
      Fp x63935 = x63932 - x63934;
      Fp x63936 = x63517 + x63540;
      Fp x63937 = x63517 * x1;
      Fp x63938 = x63937 * x63540;
      Fp x63939 = x63936 - x63938;
      Fp x63940 = x63526 + x63855;
      Fp x63941 = x63526 * x1;
      Fp x63942 = x63941 * x63855;
      Fp x63943 = x63940 - x63942;
      Fp x63944 = x63527 + x63859;
      Fp x63945 = x63527 * x1;
      Fp x63946 = x63945 * x63859;
      Fp x63947 = x63944 - x63946;
      Fp x63948 = x63528 + x63863;
      Fp x63949 = x63853 * x63863;
      Fp x63950 = x63948 - x63949;
      Fp x63951 = x63529 + x63867;
      Fp x63952 = x63857 * x63867;
      Fp x63953 = x63951 - x63952;
      Fp x63954 = x63530 + x63871;
      Fp x63955 = x63861 * x63871;
      Fp x63956 = x63954 - x63955;
      Fp x63957 = x63531 + x63875;
      Fp x63958 = x63865 * x63875;
      Fp x63959 = x63957 - x63958;
      Fp x63960 = x63532 + x63879;
      Fp x63961 = x63869 * x63879;
      Fp x63962 = x63960 - x63961;
      Fp x63963 = x63533 + x63883;
      Fp x63964 = x63873 * x63883;
      Fp x63965 = x63963 - x63964;
      Fp x63966 = x63534 + x63887;
      Fp x63967 = x63877 * x63887;
      Fp x63968 = x63966 - x63967;
      Fp x63969 = x63535 + x63891;
      Fp x63970 = x63881 * x63891;
      Fp x63971 = x63969 - x63970;
      Fp x63972 = x63536 + x63895;
      Fp x63973 = x63885 * x63895;
      Fp x63974 = x63972 - x63973;
      Fp x63975 = x63537 + x63899;
      Fp x63976 = x63889 * x63899;
      Fp x63977 = x63975 - x63976;
      Fp x63978 = x63538 + x63903;
      Fp x63979 = x63893 * x63903;
      Fp x63980 = x63978 - x63979;
      Fp x63981 = x63539 + x63907;
      Fp x63982 = x63897 * x63907;
      Fp x63983 = x63981 - x63982;
      Fp x63984 = x63540 + x63911;
      Fp x63985 = x63901 * x63911;
      Fp x63986 = x63984 - x63985;
      Fp x63987 = x63509 + x63915;
      Fp x63988 = x63905 * x63915;
      Fp x63989 = x63987 - x63988;
      Fp x63990 = x63510 + x63919;
      Fp x63991 = x63909 * x63919;
      Fp x63992 = x63990 - x63991;
      Fp x63993 = x63511 + x63923;
      Fp x63994 = x63913 * x63923;
      Fp x63995 = x63993 - x63994;
      Fp x63996 = x63512 + x63927;
      Fp x63997 = x63917 * x63927;
      Fp x63998 = x63996 - x63997;
      Fp x63999 = x63513 + x63931;
      Fp x64000 = x63921 * x63931;
      Fp x64001 = x63999 - x64000;
      Fp x64002 = x63514 + x63935;
      Fp x64003 = x63925 * x63935;
      Fp x64004 = x64002 - x64003;
      Fp x64005 = x63515 + x63939;
      Fp x64006 = x63929 * x63939;
      Fp x64007 = x64005 - x64006;
      Fp x64008 = x63516 + x63518;
      Fp x64009 = x63933 * x63518;
      Fp x64010 = x64008 - x64009;
      Fp x64011 = x63517 + x63519;
      Fp x64012 = x63937 * x63519;
      Fp x64013 = x64011 - x64012;
      Fp x64014 = x63518 + x63520;
      Fp x64015 = x63518 * x1;
      Fp x64016 = x64015 * x63520;
      Fp x64017 = x64014 - x64016;
      Fp x64018 = x63519 + x63521;
      Fp x64019 = x63519 * x1;
      Fp x64020 = x64019 * x63521;
      Fp x64021 = x64018 - x64020;
      Fp x64022 = x63520 + x63522;
      Fp x64023 = x63520 * x1;
      Fp x64024 = x64023 * x63522;
      Fp x64025 = x64022 - x64024;
      Fp x64026 = x63521 + x63523;
      Fp x64027 = x63521 * x1;
      Fp x64028 = x64027 * x63523;
      Fp x64029 = x64026 - x64028;
      Fp x64030 = x63522 + x63524;
      Fp x64031 = x63522 * x1;
      Fp x64032 = x64031 * x63524;
      Fp x64033 = x64030 - x64032;
      Fp x64034 = x63523 + x63525;
      Fp x64035 = x63523 * x1;
      Fp x64036 = x64035 * x63525;
      Fp x64037 = x64034 - x64036;
      Fp x64038 = x63524 + x63526;
      Fp x64039 = x63524 * x1;
      Fp x64040 = x64039 * x63526;
      Fp x64041 = x64038 - x64040;
      Fp x64042 = x63525 + x63527;
      Fp x64043 = x63525 * x1;
      Fp x64044 = x64043 * x63527;
      Fp x64045 = x64042 - x64044;
      Fp x64046 = x63606 * x1;
      Fp x64047 = x63605 + x64046;
      Fp x64048 = x63607 * x3;
      Fp x64049 = x64047 + x64048;
      Fp x64050 = x63608 * x6;
      Fp x64051 = x64049 + x64050;
      Fp x64052 = x63609 * x11;
      Fp x64053 = x64051 + x64052;
      Fp x64054 = x63610 * x27;
      Fp x64055 = x64053 + x64054;
      Fp x64056 = x63611 * x12;
      Fp x64057 = x64055 + x64056;
      Fp x64058 = x63612 * x28;
      Fp x64059 = x64057 + x64058;
      Fp x64060 = x63613 * x13;
      Fp x64061 = x64059 + x64060;
      Fp x64062 = x63614 * x29;
      Fp x64063 = x64061 + x64062;
      Fp x64064 = x63615 * x14;
      Fp x64065 = x64063 + x64064;
      Fp x64066 = x63616 * x30;
      Fp x64067 = x64065 + x64066;
      Fp x64068 = x63617 * x15;
      Fp x64069 = x64067 + x64068;
      Fp x64070 = x63618 * x31;
      Fp x64071 = x64069 + x64070;
      Fp x64072 = x63619 * x16;
      Fp x64073 = x64071 + x64072;
      Fp x64074 = x63620 * x32;
      Fp x64075 = x64073 + x64074;
      Fp x64076 = x63622 * x1;
      Fp x64077 = x63621 + x64076;
      Fp x64078 = x63623 * x3;
      Fp x64079 = x64077 + x64078;
      Fp x64080 = x63624 * x6;
      Fp x64081 = x64079 + x64080;
      Fp x64082 = x63625 * x11;
      Fp x64083 = x64081 + x64082;
      Fp x64084 = x63626 * x27;
      Fp x64085 = x64083 + x64084;
      Fp x64086 = x63627 * x12;
      Fp x64087 = x64085 + x64086;
      Fp x64088 = x63628 * x28;
      Fp x64089 = x64087 + x64088;
      Fp x64090 = x63629 * x13;
      Fp x64091 = x64089 + x64090;
      Fp x64092 = x63630 * x29;
      Fp x64093 = x64091 + x64092;
      Fp x64094 = x63631 * x14;
      Fp x64095 = x64093 + x64094;
      Fp x64096 = x63632 * x30;
      Fp x64097 = x64095 + x64096;
      Fp x64098 = x63633 * x15;
      Fp x64099 = x64097 + x64098;
      Fp x64100 = x63634 * x31;
      Fp x64101 = x64099 + x64100;
      Fp x64102 = x63635 * x16;
      Fp x64103 = x64101 + x64102;
      Fp x64104 = x63636 * x32;
      Fp x64105 = x64103 + x64104;
      Fp x64106 = x63758 * x1;
      Fp x64107 = x63755 + x64106;
      Fp x64108 = x63761 * x3;
      Fp x64109 = x64107 + x64108;
      Fp x64110 = x63764 * x6;
      Fp x64111 = x64109 + x64110;
      Fp x64112 = x63767 * x11;
      Fp x64113 = x64111 + x64112;
      Fp x64114 = x63770 * x27;
      Fp x64115 = x64113 + x64114;
      Fp x64116 = x63773 * x12;
      Fp x64117 = x64115 + x64116;
      Fp x64118 = x63776 * x28;
      Fp x64119 = x64117 + x64118;
      Fp x64120 = x63780 * x13;
      Fp x64121 = x64119 + x64120;
      Fp x64122 = x63784 * x29;
      Fp x64123 = x64121 + x64122;
      Fp x64124 = x63788 * x14;
      Fp x64125 = x64123 + x64124;
      Fp x64126 = x63791 * x30;
      Fp x64127 = x64125 + x64126;
      Fp x64128 = x63794 * x15;
      Fp x64129 = x64127 + x64128;
      Fp x64130 = x63797 * x31;
      Fp x64131 = x64129 + x64130;
      Fp x64132 = x63800 * x16;
      Fp x64133 = x64131 + x64132;
      Fp x64134 = x63803 * x32;
      Fp x64135 = x64133 + x64134;
      Fp x64136 = x63809 * x1;
      Fp x64137 = x63806 + x64136;
      Fp x64138 = x63812 * x3;
      Fp x64139 = x64137 + x64138;
      Fp x64140 = x63815 * x6;
      Fp x64141 = x64139 + x64140;
      Fp x64142 = x63818 * x11;
      Fp x64143 = x64141 + x64142;
      Fp x64144 = x63821 * x27;
      Fp x64145 = x64143 + x64144;
      Fp x64146 = x63824 * x12;
      Fp x64147 = x64145 + x64146;
      Fp x64148 = x63827 * x28;
      Fp x64149 = x64147 + x64148;
      Fp x64150 = x63830 * x13;
      Fp x64151 = x64149 + x64150;
      Fp x64152 = x63833 * x29;
      Fp x64153 = x64151 + x64152;
      Fp x64154 = x63836 * x14;
      Fp x64155 = x64153 + x64154;
      Fp x64156 = x63839 * x30;
      Fp x64157 = x64155 + x64156;
      Fp x64158 = x63842 * x15;
      Fp x64159 = x64157 + x64158;
      Fp x64160 = x63845 * x31;
      Fp x64161 = x64159 + x64160;
      Fp x64162 = x63848 * x16;
      Fp x64163 = x64161 + x64162;
      Fp x64164 = x63851 * x32;
      Fp x64165 = x64163 + x64164;
      Fp x64166 = x64075 + x64135;
      Fp x64167 = x64105 + x64165;
      Fp x64168 = x63542 * x1;
      Fp x64169 = x63541 + x64168;
      Fp x64170 = x63543 * x3;
      Fp x64171 = x64169 + x64170;
      Fp x64172 = x63544 * x6;
      Fp x64173 = x64171 + x64172;
      Fp x64174 = x63545 * x11;
      Fp x64175 = x64173 + x64174;
      Fp x64176 = x63546 * x27;
      Fp x64177 = x64175 + x64176;
      Fp x64178 = x63547 * x12;
      Fp x64179 = x64177 + x64178;
      Fp x64180 = x63548 * x28;
      Fp x64181 = x64179 + x64180;
      Fp x64182 = x63549 * x13;
      Fp x64183 = x64181 + x64182;
      Fp x64184 = x63550 * x29;
      Fp x64185 = x64183 + x64184;
      Fp x64186 = x63551 * x14;
      Fp x64187 = x64185 + x64186;
      Fp x64188 = x63552 * x30;
      Fp x64189 = x64187 + x64188;
      Fp x64190 = x63553 * x15;
      Fp x64191 = x64189 + x64190;
      Fp x64192 = x63554 * x31;
      Fp x64193 = x64191 + x64192;
      Fp x64194 = x63555 * x16;
      Fp x64195 = x64193 + x64194;
      Fp x64196 = x63556 * x32;
      Fp x64197 = x64195 + x64196;
      Fp x64198 = x63558 * x1;
      Fp x64199 = x63557 + x64198;
      Fp x64200 = x63559 * x3;
      Fp x64201 = x64199 + x64200;
      Fp x64202 = x63560 * x6;
      Fp x64203 = x64201 + x64202;
      Fp x64204 = x63561 * x11;
      Fp x64205 = x64203 + x64204;
      Fp x64206 = x63562 * x27;
      Fp x64207 = x64205 + x64206;
      Fp x64208 = x63563 * x12;
      Fp x64209 = x64207 + x64208;
      Fp x64210 = x63564 * x28;
      Fp x64211 = x64209 + x64210;
      Fp x64212 = x63565 * x13;
      Fp x64213 = x64211 + x64212;
      Fp x64214 = x63566 * x29;
      Fp x64215 = x64213 + x64214;
      Fp x64216 = x63567 * x14;
      Fp x64217 = x64215 + x64216;
      Fp x64218 = x63568 * x30;
      Fp x64219 = x64217 + x64218;
      Fp x64220 = x63569 * x15;
      Fp x64221 = x64219 + x64220;
      Fp x64222 = x63570 * x31;
      Fp x64223 = x64221 + x64222;
      Fp x64224 = x63571 * x16;
      Fp x64225 = x64223 + x64224;
      Fp x64226 = x63572 * x32;
      Fp x64227 = x64225 + x64226;
      Fp x64228 = x64166 + x64197;
      Fp x64229 = x64167 + x64227;
      Fp x64230 = x63947 * x1;
      Fp x64231 = x63943 + x64230;
      Fp x64232 = x63950 * x3;
      Fp x64233 = x64231 + x64232;
      Fp x64234 = x63953 * x6;
      Fp x64235 = x64233 + x64234;
      Fp x64236 = x63956 * x11;
      Fp x64237 = x64235 + x64236;
      Fp x64238 = x63959 * x27;
      Fp x64239 = x64237 + x64238;
      Fp x64240 = x63962 * x12;
      Fp x64241 = x64239 + x64240;
      Fp x64242 = x63965 * x28;
      Fp x64243 = x64241 + x64242;
      Fp x64244 = x63968 * x13;
      Fp x64245 = x64243 + x64244;
      Fp x64246 = x63971 * x29;
      Fp x64247 = x64245 + x64246;
      Fp x64248 = x63974 * x14;
      Fp x64249 = x64247 + x64248;
      Fp x64250 = x63977 * x30;
      Fp x64251 = x64249 + x64250;
      Fp x64252 = x63980 * x15;
      Fp x64253 = x64251 + x64252;
      Fp x64254 = x63983 * x31;
      Fp x64255 = x64253 + x64254;
      Fp x64256 = x63986 * x16;
      Fp x64257 = x64255 + x64256;
      Fp x64258 = x63989 * x32;
      Fp x64259 = x64257 + x64258;
      Fp x64260 = x63995 * x1;
      Fp x64261 = x63992 + x64260;
      Fp x64262 = x63998 * x3;
      Fp x64263 = x64261 + x64262;
      Fp x64264 = x64001 * x6;
      Fp x64265 = x64263 + x64264;
      Fp x64266 = x64004 * x11;
      Fp x64267 = x64265 + x64266;
      Fp x64268 = x64007 * x27;
      Fp x64269 = x64267 + x64268;
      Fp x64270 = x64010 * x12;
      Fp x64271 = x64269 + x64270;
      Fp x64272 = x64013 * x28;
      Fp x64273 = x64271 + x64272;
      Fp x64274 = x64017 * x13;
      Fp x64275 = x64273 + x64274;
      Fp x64276 = x64021 * x29;
      Fp x64277 = x64275 + x64276;
      Fp x64278 = x64025 * x14;
      Fp x64279 = x64277 + x64278;
      Fp x64280 = x64029 * x30;
      Fp x64281 = x64279 + x64280;
      Fp x64282 = x64033 * x15;
      Fp x64283 = x64281 + x64282;
      Fp x64284 = x64037 * x31;
      Fp x64285 = x64283 + x64284;
      Fp x64286 = x64041 * x16;
      Fp x64287 = x64285 + x64286;
      Fp x64288 = x64045 * x32;
      Fp x64289 = x64287 + x64288;
      Fp x64290 = x64228 + x64259;
      Fp x64291 = x64229 + x64289;
      args[2][120 * steps + cycle] = x64290;
      args[2][121 * steps + cycle] = x64291;
      Fp x64292 = args[2][122 * steps + ((cycle - 1) & mask)];
      args[2][122 * steps + cycle] = x64292;
      Fp x64293 = args[2][96 * steps + ((cycle - 1) & mask)];
      args[2][96 * steps + cycle] = x64293;
      Fp x64294 = args[2][123 * steps + ((cycle - 1) & mask)];
      args[2][123 * steps + cycle] = x64294;
      Fp x64295 = args[2][124 * steps + ((cycle - 1) & mask)];
      args[2][124 * steps + cycle] = x64295;
      Fp x64296 = args[0][8 * steps + ((cycle - 0) & mask)];
      if (x64296 != 0) {
        Fp x64297 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][128 * steps + cycle] = x64297;
        args[2][131 * steps + cycle] = x70;
        {
          host_args[0] = x72;
          host_args[1] = x64297;
          host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
          Fp x64298 = host_outs[0];
          Fp x64299 = host_outs[1];
          args[2][129 * steps + cycle] = x64298;
          args[2][130 * steps + cycle] = x64299;
        }
        Fp x64300 = args[2][128 * steps + ((cycle - 0) & mask)];
        Fp x64301 = x64300 * x3;
        Fp x64302 = args[2][130 * steps + ((cycle - 0) & mask)];
        Fp x64303 = args[2][129 * steps + ((cycle - 0) & mask)];
        host_args[0] = x72;
        host_args[1] = x64301;
        host_args[2] = x64302;
        host_args[3] = x64303;
        host(ctx, "log", "C%u: Sha Load: M[%x] = %04x%04x", host_args.data(), 4, host_outs.data(), 0);
        {
          Fp x64304 = Fp(x64302.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x64304;
          Fp x64305 = x64302 - x64304;
          Fp x64306 = x64305 * x26;
          Fp x64307 = Fp(x64306.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x64307;
          Fp x64308 = x64306 - x64307;
          Fp x64309 = x64308 * x26;
          Fp x64310 = Fp(x64309.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x64310;
          Fp x64311 = x64309 - x64310;
          Fp x64312 = x64311 * x26;
          Fp x64313 = Fp(x64312.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x64313;
          Fp x64314 = x64312 - x64313;
          Fp x64315 = x64314 * x26;
          Fp x64316 = Fp(x64315.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x64316;
          Fp x64317 = x64315 - x64316;
          Fp x64318 = x64317 * x26;
          Fp x64319 = Fp(x64318.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x64319;
          Fp x64320 = x64318 - x64319;
          Fp x64321 = x64320 * x26;
          Fp x64322 = Fp(x64321.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x64322;
          Fp x64323 = x64321 - x64322;
          Fp x64324 = x64323 * x26;
          Fp x64325 = Fp(x64324.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x64325;
        }
        Fp x64326 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x64327 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x64328 = x64327 * x1;
        Fp x64329 = x64326 + x64328;
        Fp x64330 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x64331 = x64330 * x3;
        Fp x64332 = x64329 + x64331;
        Fp x64333 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x64334 = x64333 * x6;
        Fp x64335 = x64332 + x64334;
        Fp x64336 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x64337 = x64336 * x11;
        Fp x64338 = x64335 + x64337;
        Fp x64339 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x64340 = x64339 * x27;
        Fp x64341 = x64338 + x64340;
        Fp x64342 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x64343 = x64342 * x12;
        Fp x64344 = x64341 + x64343;
        Fp x64345 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x64346 = x64345 * x28;
        Fp x64347 = x64344 + x64346;
        Fp x64348 = x64302 - x64347;
        Fp x64349 = x64348 * x67;
        {
          Fp x64350 = Fp(x64349.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x64350;
          Fp x64351 = x64349 - x64350;
          Fp x64352 = x64351 * x26;
          Fp x64353 = Fp(x64352.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x64353;
          Fp x64354 = x64352 - x64353;
          Fp x64355 = x64354 * x26;
          Fp x64356 = Fp(x64355.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x64356;
          Fp x64357 = x64355 - x64356;
          Fp x64358 = x64357 * x26;
          Fp x64359 = Fp(x64358.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x64359;
          Fp x64360 = x64358 - x64359;
          Fp x64361 = x64360 * x26;
          Fp x64362 = Fp(x64361.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x64362;
          Fp x64363 = x64361 - x64362;
          Fp x64364 = x64363 * x26;
          Fp x64365 = Fp(x64364.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x64365;
          Fp x64366 = x64364 - x64365;
          Fp x64367 = x64366 * x26;
          Fp x64368 = Fp(x64367.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x64368;
          Fp x64369 = x64367 - x64368;
          Fp x64370 = x64369 * x26;
          Fp x64371 = Fp(x64370.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x64371;
        }
        Fp x64372 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x64373 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x64374 = x64373 * x1;
        Fp x64375 = x64372 + x64374;
        Fp x64376 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x64377 = x64376 * x3;
        Fp x64378 = x64375 + x64377;
        Fp x64379 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x64380 = x64379 * x6;
        Fp x64381 = x64378 + x64380;
        Fp x64382 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x64383 = x64382 * x11;
        Fp x64384 = x64381 + x64383;
        Fp x64385 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x64386 = x64385 * x27;
        Fp x64387 = x64384 + x64386;
        Fp x64388 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x64389 = x64388 * x12;
        Fp x64390 = x64387 + x64389;
        Fp x64391 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x64392 = x64391 * x28;
        Fp x64393 = x64390 + x64392;
        Fp x64394 = x64349 - x64393;
        Fp x64395 = x64394 * x67;
        if (x64395 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:380");
        {
          Fp x64396 = Fp(x64303.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x64396;
          Fp x64397 = x64303 - x64396;
          Fp x64398 = x64397 * x26;
          Fp x64399 = Fp(x64398.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x64399;
          Fp x64400 = x64398 - x64399;
          Fp x64401 = x64400 * x26;
          Fp x64402 = Fp(x64401.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x64402;
          Fp x64403 = x64401 - x64402;
          Fp x64404 = x64403 * x26;
          Fp x64405 = Fp(x64404.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x64405;
          Fp x64406 = x64404 - x64405;
          Fp x64407 = x64406 * x26;
          Fp x64408 = Fp(x64407.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x64408;
          Fp x64409 = x64407 - x64408;
          Fp x64410 = x64409 * x26;
          Fp x64411 = Fp(x64410.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x64411;
          Fp x64412 = x64410 - x64411;
          Fp x64413 = x64412 * x26;
          Fp x64414 = Fp(x64413.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x64414;
          Fp x64415 = x64413 - x64414;
          Fp x64416 = x64415 * x26;
          Fp x64417 = Fp(x64416.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x64417;
        }
        Fp x64418 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x64419 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x64420 = x64419 * x1;
        Fp x64421 = x64418 + x64420;
        Fp x64422 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x64423 = x64422 * x3;
        Fp x64424 = x64421 + x64423;
        Fp x64425 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x64426 = x64425 * x6;
        Fp x64427 = x64424 + x64426;
        Fp x64428 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x64429 = x64428 * x11;
        Fp x64430 = x64427 + x64429;
        Fp x64431 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x64432 = x64431 * x27;
        Fp x64433 = x64430 + x64432;
        Fp x64434 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x64435 = x64434 * x12;
        Fp x64436 = x64433 + x64435;
        Fp x64437 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x64438 = x64437 * x28;
        Fp x64439 = x64436 + x64438;
        Fp x64440 = x64303 - x64439;
        Fp x64441 = x64440 * x67;
        {
          Fp x64442 = Fp(x64441.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x64442;
          Fp x64443 = x64441 - x64442;
          Fp x64444 = x64443 * x26;
          Fp x64445 = Fp(x64444.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x64445;
          Fp x64446 = x64444 - x64445;
          Fp x64447 = x64446 * x26;
          Fp x64448 = Fp(x64447.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x64448;
          Fp x64449 = x64447 - x64448;
          Fp x64450 = x64449 * x26;
          Fp x64451 = Fp(x64450.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x64451;
          Fp x64452 = x64450 - x64451;
          Fp x64453 = x64452 * x26;
          Fp x64454 = Fp(x64453.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x64454;
          Fp x64455 = x64453 - x64454;
          Fp x64456 = x64455 * x26;
          Fp x64457 = Fp(x64456.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x64457;
          Fp x64458 = x64456 - x64457;
          Fp x64459 = x64458 * x26;
          Fp x64460 = Fp(x64459.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x64460;
          Fp x64461 = x64459 - x64460;
          Fp x64462 = x64461 * x26;
          Fp x64463 = Fp(x64462.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x64463;
        }
        Fp x64464 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x64465 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x64466 = x64465 * x1;
        Fp x64467 = x64464 + x64466;
        Fp x64468 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x64469 = x64468 * x3;
        Fp x64470 = x64467 + x64469;
        Fp x64471 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x64472 = x64471 * x6;
        Fp x64473 = x64470 + x64472;
        Fp x64474 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x64475 = x64474 * x11;
        Fp x64476 = x64473 + x64475;
        Fp x64477 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x64478 = x64477 * x27;
        Fp x64479 = x64476 + x64478;
        Fp x64480 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x64481 = x64480 * x12;
        Fp x64482 = x64479 + x64481;
        Fp x64483 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x64484 = x64483 * x28;
        Fp x64485 = x64482 + x64484;
        Fp x64486 = x64441 - x64485;
        Fp x64487 = x64486 * x67;
        if (x64487 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:380");
        Fp x64488 = x64297 + x71;
        args[2][125 * steps + cycle] = x64488;
        Fp x64489 = args[2][126 * steps + ((cycle - 1) & mask)];
        args[2][126 * steps + cycle] = x64489;
      }
      Fp x64490 = args[0][9 * steps + ((cycle - 0) & mask)];
      if (x64490 != 0) {
        host_args[0] = x72;
        host(ctx, "log", "C%u: Sha Mix", host_args.data(), 1, host_outs.data(), 0);
        Fp x64491 = args[0][10 * steps + ((cycle - 0) & mask)];
        if (x64491 != 0) {
          Fp x64492 = args[2][126 * steps + ((cycle - 1) & mask)];
          args[2][128 * steps + cycle] = x64492;
          args[2][131 * steps + cycle] = x70;
          {
            host_args[0] = x72;
            host_args[1] = x64492;
            host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
            Fp x64493 = host_outs[0];
            Fp x64494 = host_outs[1];
            args[2][129 * steps + cycle] = x64493;
            args[2][130 * steps + cycle] = x64494;
          }
          Fp x64495 = args[2][128 * steps + ((cycle - 0) & mask)];
          Fp x64496 = x64495 * x3;
          Fp x64497 = args[2][130 * steps + ((cycle - 0) & mask)];
          Fp x64498 = args[2][129 * steps + ((cycle - 0) & mask)];
          host_args[0] = x64496;
          host_args[1] = x64497;
          host_args[2] = x64498;
          host(ctx, "log", "  Load digest: M[%x] = %04x%04x", host_args.data(), 3, host_outs.data(), 0);
          Fp x64499 = x64492 - x71;
          args[2][126 * steps + cycle] = x64499;
        }
        Fp x64500 = x71 - x64491;
        if (x64500 != 0) {
          args[2][128 * steps + cycle] = x70;
          args[2][131 * steps + cycle] = x70;
          {
            host_args[0] = x72;
            host_args[1] = x70;
            host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
            Fp x64501 = host_outs[0];
            Fp x64502 = host_outs[1];
            args[2][129 * steps + cycle] = x64501;
            args[2][130 * steps + cycle] = x64502;
          }
          Fp x64503 = args[2][126 * steps + ((cycle - 1) & mask)];
          args[2][126 * steps + cycle] = x64503;
        }
        Fp x64504 = args[2][120 * steps + ((cycle - 0) & mask)];
        Fp x64505 = args[2][121 * steps + ((cycle - 0) & mask)];
        {
          Fp x64506 = Fp(x64504.asUInt32() & x71.asUInt32());
          args[2][64 * steps + cycle] = x64506;
          Fp x64507 = x64504 - x64506;
          Fp x64508 = x64507 * x26;
          Fp x64509 = Fp(x64508.asUInt32() & x71.asUInt32());
          args[2][65 * steps + cycle] = x64509;
          Fp x64510 = x64508 - x64509;
          Fp x64511 = x64510 * x26;
          Fp x64512 = Fp(x64511.asUInt32() & x71.asUInt32());
          args[2][66 * steps + cycle] = x64512;
          Fp x64513 = x64511 - x64512;
          Fp x64514 = x64513 * x26;
          Fp x64515 = Fp(x64514.asUInt32() & x71.asUInt32());
          args[2][67 * steps + cycle] = x64515;
          Fp x64516 = x64514 - x64515;
          Fp x64517 = x64516 * x26;
          Fp x64518 = Fp(x64517.asUInt32() & x71.asUInt32());
          args[2][68 * steps + cycle] = x64518;
          Fp x64519 = x64517 - x64518;
          Fp x64520 = x64519 * x26;
          Fp x64521 = Fp(x64520.asUInt32() & x71.asUInt32());
          args[2][69 * steps + cycle] = x64521;
          Fp x64522 = x64520 - x64521;
          Fp x64523 = x64522 * x26;
          Fp x64524 = Fp(x64523.asUInt32() & x71.asUInt32());
          args[2][70 * steps + cycle] = x64524;
          Fp x64525 = x64523 - x64524;
          Fp x64526 = x64525 * x26;
          Fp x64527 = Fp(x64526.asUInt32() & x71.asUInt32());
          args[2][71 * steps + cycle] = x64527;
          Fp x64528 = x64526 - x64527;
          Fp x64529 = x64528 * x26;
          Fp x64530 = Fp(x64529.asUInt32() & x71.asUInt32());
          args[2][72 * steps + cycle] = x64530;
          Fp x64531 = x64529 - x64530;
          Fp x64532 = x64531 * x26;
          Fp x64533 = Fp(x64532.asUInt32() & x71.asUInt32());
          args[2][73 * steps + cycle] = x64533;
          Fp x64534 = x64532 - x64533;
          Fp x64535 = x64534 * x26;
          Fp x64536 = Fp(x64535.asUInt32() & x71.asUInt32());
          args[2][74 * steps + cycle] = x64536;
          Fp x64537 = x64535 - x64536;
          Fp x64538 = x64537 * x26;
          Fp x64539 = Fp(x64538.asUInt32() & x71.asUInt32());
          args[2][75 * steps + cycle] = x64539;
          Fp x64540 = x64538 - x64539;
          Fp x64541 = x64540 * x26;
          Fp x64542 = Fp(x64541.asUInt32() & x71.asUInt32());
          args[2][76 * steps + cycle] = x64542;
          Fp x64543 = x64541 - x64542;
          Fp x64544 = x64543 * x26;
          Fp x64545 = Fp(x64544.asUInt32() & x71.asUInt32());
          args[2][77 * steps + cycle] = x64545;
          Fp x64546 = x64544 - x64545;
          Fp x64547 = x64546 * x26;
          Fp x64548 = Fp(x64547.asUInt32() & x71.asUInt32());
          args[2][78 * steps + cycle] = x64548;
          Fp x64549 = x64547 - x64548;
          Fp x64550 = x64549 * x26;
          Fp x64551 = Fp(x64550.asUInt32() & x71.asUInt32());
          args[2][79 * steps + cycle] = x64551;
        }
        Fp x64552 = args[2][64 * steps + ((cycle - 0) & mask)];
        Fp x64553 = args[2][65 * steps + ((cycle - 0) & mask)];
        Fp x64554 = x64553 * x1;
        Fp x64555 = x64552 + x64554;
        Fp x64556 = args[2][66 * steps + ((cycle - 0) & mask)];
        Fp x64557 = x64556 * x3;
        Fp x64558 = x64555 + x64557;
        Fp x64559 = args[2][67 * steps + ((cycle - 0) & mask)];
        Fp x64560 = x64559 * x6;
        Fp x64561 = x64558 + x64560;
        Fp x64562 = args[2][68 * steps + ((cycle - 0) & mask)];
        Fp x64563 = x64562 * x11;
        Fp x64564 = x64561 + x64563;
        Fp x64565 = args[2][69 * steps + ((cycle - 0) & mask)];
        Fp x64566 = x64565 * x27;
        Fp x64567 = x64564 + x64566;
        Fp x64568 = args[2][70 * steps + ((cycle - 0) & mask)];
        Fp x64569 = x64568 * x12;
        Fp x64570 = x64567 + x64569;
        Fp x64571 = args[2][71 * steps + ((cycle - 0) & mask)];
        Fp x64572 = x64571 * x28;
        Fp x64573 = x64570 + x64572;
        Fp x64574 = args[2][72 * steps + ((cycle - 0) & mask)];
        Fp x64575 = x64574 * x13;
        Fp x64576 = x64573 + x64575;
        Fp x64577 = args[2][73 * steps + ((cycle - 0) & mask)];
        Fp x64578 = x64577 * x29;
        Fp x64579 = x64576 + x64578;
        Fp x64580 = args[2][74 * steps + ((cycle - 0) & mask)];
        Fp x64581 = x64580 * x14;
        Fp x64582 = x64579 + x64581;
        Fp x64583 = args[2][75 * steps + ((cycle - 0) & mask)];
        Fp x64584 = x64583 * x30;
        Fp x64585 = x64582 + x64584;
        Fp x64586 = args[2][76 * steps + ((cycle - 0) & mask)];
        Fp x64587 = x64586 * x15;
        Fp x64588 = x64585 + x64587;
        Fp x64589 = args[2][77 * steps + ((cycle - 0) & mask)];
        Fp x64590 = x64589 * x31;
        Fp x64591 = x64588 + x64590;
        Fp x64592 = args[2][78 * steps + ((cycle - 0) & mask)];
        Fp x64593 = x64592 * x16;
        Fp x64594 = x64591 + x64593;
        Fp x64595 = args[2][79 * steps + ((cycle - 0) & mask)];
        Fp x64596 = x64595 * x32;
        Fp x64597 = x64594 + x64596;
        Fp x64598 = x64504 - x64597;
        Fp x64599 = x64598 * x33;
        {
          Fp x64600 = Fp(x64599.asUInt32() & x71.asUInt32());
          args[2][112 * steps + cycle] = x64600;
          Fp x64601 = x64599 - x64600;
          Fp x64602 = x64601 * x26;
          Fp x64603 = Fp(x64602.asUInt32() & x71.asUInt32());
          args[2][113 * steps + cycle] = x64603;
        }
        Fp x64604 = args[2][112 * steps + ((cycle - 0) & mask)];
        Fp x64605 = args[2][113 * steps + ((cycle - 0) & mask)];
        Fp x64606 = x64605 * x1;
        Fp x64607 = x64604 + x64606;
        Fp x64608 = x64599 - x64607;
        Fp x64609 = x64608 * x10;
        if (x64609 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:140");
        Fp x64610 = x64505 + x64607;
        {
          Fp x64611 = Fp(x64610.asUInt32() & x71.asUInt32());
          args[2][80 * steps + cycle] = x64611;
          Fp x64612 = x64610 - x64611;
          Fp x64613 = x64612 * x26;
          Fp x64614 = Fp(x64613.asUInt32() & x71.asUInt32());
          args[2][81 * steps + cycle] = x64614;
          Fp x64615 = x64613 - x64614;
          Fp x64616 = x64615 * x26;
          Fp x64617 = Fp(x64616.asUInt32() & x71.asUInt32());
          args[2][82 * steps + cycle] = x64617;
          Fp x64618 = x64616 - x64617;
          Fp x64619 = x64618 * x26;
          Fp x64620 = Fp(x64619.asUInt32() & x71.asUInt32());
          args[2][83 * steps + cycle] = x64620;
          Fp x64621 = x64619 - x64620;
          Fp x64622 = x64621 * x26;
          Fp x64623 = Fp(x64622.asUInt32() & x71.asUInt32());
          args[2][84 * steps + cycle] = x64623;
          Fp x64624 = x64622 - x64623;
          Fp x64625 = x64624 * x26;
          Fp x64626 = Fp(x64625.asUInt32() & x71.asUInt32());
          args[2][85 * steps + cycle] = x64626;
          Fp x64627 = x64625 - x64626;
          Fp x64628 = x64627 * x26;
          Fp x64629 = Fp(x64628.asUInt32() & x71.asUInt32());
          args[2][86 * steps + cycle] = x64629;
          Fp x64630 = x64628 - x64629;
          Fp x64631 = x64630 * x26;
          Fp x64632 = Fp(x64631.asUInt32() & x71.asUInt32());
          args[2][87 * steps + cycle] = x64632;
          Fp x64633 = x64631 - x64632;
          Fp x64634 = x64633 * x26;
          Fp x64635 = Fp(x64634.asUInt32() & x71.asUInt32());
          args[2][88 * steps + cycle] = x64635;
          Fp x64636 = x64634 - x64635;
          Fp x64637 = x64636 * x26;
          Fp x64638 = Fp(x64637.asUInt32() & x71.asUInt32());
          args[2][89 * steps + cycle] = x64638;
          Fp x64639 = x64637 - x64638;
          Fp x64640 = x64639 * x26;
          Fp x64641 = Fp(x64640.asUInt32() & x71.asUInt32());
          args[2][90 * steps + cycle] = x64641;
          Fp x64642 = x64640 - x64641;
          Fp x64643 = x64642 * x26;
          Fp x64644 = Fp(x64643.asUInt32() & x71.asUInt32());
          args[2][91 * steps + cycle] = x64644;
          Fp x64645 = x64643 - x64644;
          Fp x64646 = x64645 * x26;
          Fp x64647 = Fp(x64646.asUInt32() & x71.asUInt32());
          args[2][92 * steps + cycle] = x64647;
          Fp x64648 = x64646 - x64647;
          Fp x64649 = x64648 * x26;
          Fp x64650 = Fp(x64649.asUInt32() & x71.asUInt32());
          args[2][93 * steps + cycle] = x64650;
          Fp x64651 = x64649 - x64650;
          Fp x64652 = x64651 * x26;
          Fp x64653 = Fp(x64652.asUInt32() & x71.asUInt32());
          args[2][94 * steps + cycle] = x64653;
          Fp x64654 = x64652 - x64653;
          Fp x64655 = x64654 * x26;
          Fp x64656 = Fp(x64655.asUInt32() & x71.asUInt32());
          args[2][95 * steps + cycle] = x64656;
        }
        Fp x64657 = args[2][80 * steps + ((cycle - 0) & mask)];
        Fp x64658 = args[2][81 * steps + ((cycle - 0) & mask)];
        Fp x64659 = x64658 * x1;
        Fp x64660 = x64657 + x64659;
        Fp x64661 = args[2][82 * steps + ((cycle - 0) & mask)];
        Fp x64662 = x64661 * x3;
        Fp x64663 = x64660 + x64662;
        Fp x64664 = args[2][83 * steps + ((cycle - 0) & mask)];
        Fp x64665 = x64664 * x6;
        Fp x64666 = x64663 + x64665;
        Fp x64667 = args[2][84 * steps + ((cycle - 0) & mask)];
        Fp x64668 = x64667 * x11;
        Fp x64669 = x64666 + x64668;
        Fp x64670 = args[2][85 * steps + ((cycle - 0) & mask)];
        Fp x64671 = x64670 * x27;
        Fp x64672 = x64669 + x64671;
        Fp x64673 = args[2][86 * steps + ((cycle - 0) & mask)];
        Fp x64674 = x64673 * x12;
        Fp x64675 = x64672 + x64674;
        Fp x64676 = args[2][87 * steps + ((cycle - 0) & mask)];
        Fp x64677 = x64676 * x28;
        Fp x64678 = x64675 + x64677;
        Fp x64679 = args[2][88 * steps + ((cycle - 0) & mask)];
        Fp x64680 = x64679 * x13;
        Fp x64681 = x64678 + x64680;
        Fp x64682 = args[2][89 * steps + ((cycle - 0) & mask)];
        Fp x64683 = x64682 * x29;
        Fp x64684 = x64681 + x64683;
        Fp x64685 = args[2][90 * steps + ((cycle - 0) & mask)];
        Fp x64686 = x64685 * x14;
        Fp x64687 = x64684 + x64686;
        Fp x64688 = args[2][91 * steps + ((cycle - 0) & mask)];
        Fp x64689 = x64688 * x30;
        Fp x64690 = x64687 + x64689;
        Fp x64691 = args[2][92 * steps + ((cycle - 0) & mask)];
        Fp x64692 = x64691 * x15;
        Fp x64693 = x64690 + x64692;
        Fp x64694 = args[2][93 * steps + ((cycle - 0) & mask)];
        Fp x64695 = x64694 * x31;
        Fp x64696 = x64693 + x64695;
        Fp x64697 = args[2][94 * steps + ((cycle - 0) & mask)];
        Fp x64698 = x64697 * x16;
        Fp x64699 = x64696 + x64698;
        Fp x64700 = args[2][95 * steps + ((cycle - 0) & mask)];
        Fp x64701 = x64700 * x32;
        Fp x64702 = x64699 + x64701;
        Fp x64703 = x64610 - x64702;
        Fp x64704 = x64703 * x33;
        {
          Fp x64705 = Fp(x64704.asUInt32() & x71.asUInt32());
          args[2][114 * steps + cycle] = x64705;
          Fp x64706 = x64704 - x64705;
          Fp x64707 = x64706 * x26;
          Fp x64708 = Fp(x64707.asUInt32() & x71.asUInt32());
          args[2][115 * steps + cycle] = x64708;
        }
        Fp x64709 = args[2][114 * steps + ((cycle - 0) & mask)];
        Fp x64710 = args[2][115 * steps + ((cycle - 0) & mask)];
        Fp x64711 = x64710 * x1;
        Fp x64712 = x64709 + x64711;
        Fp x64713 = x64704 - x64712;
        Fp x64714 = x64713 * x10;
        if (x64714 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:141");
        Fp x64715 = args[2][125 * steps + ((cycle - 1) & mask)];
        args[2][125 * steps + cycle] = x64715;
      }
      Fp x64716 = args[2][0 * steps + ((cycle - 1) & mask)];
      Fp x64717 = args[2][1 * steps + ((cycle - 1) & mask)];
      Fp x64718 = args[2][2 * steps + ((cycle - 1) & mask)];
      Fp x64719 = args[2][3 * steps + ((cycle - 1) & mask)];
      Fp x64720 = args[2][4 * steps + ((cycle - 1) & mask)];
      Fp x64721 = args[2][5 * steps + ((cycle - 1) & mask)];
      Fp x64722 = args[2][6 * steps + ((cycle - 1) & mask)];
      Fp x64723 = args[2][7 * steps + ((cycle - 1) & mask)];
      Fp x64724 = args[2][8 * steps + ((cycle - 1) & mask)];
      Fp x64725 = args[2][9 * steps + ((cycle - 1) & mask)];
      Fp x64726 = args[2][10 * steps + ((cycle - 1) & mask)];
      Fp x64727 = args[2][11 * steps + ((cycle - 1) & mask)];
      Fp x64728 = args[2][12 * steps + ((cycle - 1) & mask)];
      Fp x64729 = args[2][13 * steps + ((cycle - 1) & mask)];
      Fp x64730 = args[2][14 * steps + ((cycle - 1) & mask)];
      Fp x64731 = args[2][15 * steps + ((cycle - 1) & mask)];
      Fp x64732 = args[2][16 * steps + ((cycle - 1) & mask)];
      Fp x64733 = args[2][17 * steps + ((cycle - 1) & mask)];
      Fp x64734 = args[2][18 * steps + ((cycle - 1) & mask)];
      Fp x64735 = args[2][19 * steps + ((cycle - 1) & mask)];
      Fp x64736 = args[2][20 * steps + ((cycle - 1) & mask)];
      Fp x64737 = args[2][21 * steps + ((cycle - 1) & mask)];
      Fp x64738 = args[2][22 * steps + ((cycle - 1) & mask)];
      Fp x64739 = args[2][23 * steps + ((cycle - 1) & mask)];
      Fp x64740 = args[2][24 * steps + ((cycle - 1) & mask)];
      Fp x64741 = args[2][25 * steps + ((cycle - 1) & mask)];
      Fp x64742 = args[2][26 * steps + ((cycle - 1) & mask)];
      Fp x64743 = args[2][27 * steps + ((cycle - 1) & mask)];
      Fp x64744 = args[2][28 * steps + ((cycle - 1) & mask)];
      Fp x64745 = args[2][29 * steps + ((cycle - 1) & mask)];
      Fp x64746 = args[2][30 * steps + ((cycle - 1) & mask)];
      Fp x64747 = args[2][31 * steps + ((cycle - 1) & mask)];
      Fp x64748 = args[2][0 * steps + ((cycle - 2) & mask)];
      Fp x64749 = args[2][1 * steps + ((cycle - 2) & mask)];
      Fp x64750 = args[2][2 * steps + ((cycle - 2) & mask)];
      Fp x64751 = args[2][3 * steps + ((cycle - 2) & mask)];
      Fp x64752 = args[2][4 * steps + ((cycle - 2) & mask)];
      Fp x64753 = args[2][5 * steps + ((cycle - 2) & mask)];
      Fp x64754 = args[2][6 * steps + ((cycle - 2) & mask)];
      Fp x64755 = args[2][7 * steps + ((cycle - 2) & mask)];
      Fp x64756 = args[2][8 * steps + ((cycle - 2) & mask)];
      Fp x64757 = args[2][9 * steps + ((cycle - 2) & mask)];
      Fp x64758 = args[2][10 * steps + ((cycle - 2) & mask)];
      Fp x64759 = args[2][11 * steps + ((cycle - 2) & mask)];
      Fp x64760 = args[2][12 * steps + ((cycle - 2) & mask)];
      Fp x64761 = args[2][13 * steps + ((cycle - 2) & mask)];
      Fp x64762 = args[2][14 * steps + ((cycle - 2) & mask)];
      Fp x64763 = args[2][15 * steps + ((cycle - 2) & mask)];
      Fp x64764 = args[2][16 * steps + ((cycle - 2) & mask)];
      Fp x64765 = args[2][17 * steps + ((cycle - 2) & mask)];
      Fp x64766 = args[2][18 * steps + ((cycle - 2) & mask)];
      Fp x64767 = args[2][19 * steps + ((cycle - 2) & mask)];
      Fp x64768 = args[2][20 * steps + ((cycle - 2) & mask)];
      Fp x64769 = args[2][21 * steps + ((cycle - 2) & mask)];
      Fp x64770 = args[2][22 * steps + ((cycle - 2) & mask)];
      Fp x64771 = args[2][23 * steps + ((cycle - 2) & mask)];
      Fp x64772 = args[2][24 * steps + ((cycle - 2) & mask)];
      Fp x64773 = args[2][25 * steps + ((cycle - 2) & mask)];
      Fp x64774 = args[2][26 * steps + ((cycle - 2) & mask)];
      Fp x64775 = args[2][27 * steps + ((cycle - 2) & mask)];
      Fp x64776 = args[2][28 * steps + ((cycle - 2) & mask)];
      Fp x64777 = args[2][29 * steps + ((cycle - 2) & mask)];
      Fp x64778 = args[2][30 * steps + ((cycle - 2) & mask)];
      Fp x64779 = args[2][31 * steps + ((cycle - 2) & mask)];
      Fp x64780 = args[2][0 * steps + ((cycle - 3) & mask)];
      Fp x64781 = args[2][1 * steps + ((cycle - 3) & mask)];
      Fp x64782 = args[2][2 * steps + ((cycle - 3) & mask)];
      Fp x64783 = args[2][3 * steps + ((cycle - 3) & mask)];
      Fp x64784 = args[2][4 * steps + ((cycle - 3) & mask)];
      Fp x64785 = args[2][5 * steps + ((cycle - 3) & mask)];
      Fp x64786 = args[2][6 * steps + ((cycle - 3) & mask)];
      Fp x64787 = args[2][7 * steps + ((cycle - 3) & mask)];
      Fp x64788 = args[2][8 * steps + ((cycle - 3) & mask)];
      Fp x64789 = args[2][9 * steps + ((cycle - 3) & mask)];
      Fp x64790 = args[2][10 * steps + ((cycle - 3) & mask)];
      Fp x64791 = args[2][11 * steps + ((cycle - 3) & mask)];
      Fp x64792 = args[2][12 * steps + ((cycle - 3) & mask)];
      Fp x64793 = args[2][13 * steps + ((cycle - 3) & mask)];
      Fp x64794 = args[2][14 * steps + ((cycle - 3) & mask)];
      Fp x64795 = args[2][15 * steps + ((cycle - 3) & mask)];
      Fp x64796 = args[2][16 * steps + ((cycle - 3) & mask)];
      Fp x64797 = args[2][17 * steps + ((cycle - 3) & mask)];
      Fp x64798 = args[2][18 * steps + ((cycle - 3) & mask)];
      Fp x64799 = args[2][19 * steps + ((cycle - 3) & mask)];
      Fp x64800 = args[2][20 * steps + ((cycle - 3) & mask)];
      Fp x64801 = args[2][21 * steps + ((cycle - 3) & mask)];
      Fp x64802 = args[2][22 * steps + ((cycle - 3) & mask)];
      Fp x64803 = args[2][23 * steps + ((cycle - 3) & mask)];
      Fp x64804 = args[2][24 * steps + ((cycle - 3) & mask)];
      Fp x64805 = args[2][25 * steps + ((cycle - 3) & mask)];
      Fp x64806 = args[2][26 * steps + ((cycle - 3) & mask)];
      Fp x64807 = args[2][27 * steps + ((cycle - 3) & mask)];
      Fp x64808 = args[2][28 * steps + ((cycle - 3) & mask)];
      Fp x64809 = args[2][29 * steps + ((cycle - 3) & mask)];
      Fp x64810 = args[2][30 * steps + ((cycle - 3) & mask)];
      Fp x64811 = args[2][31 * steps + ((cycle - 3) & mask)];
      Fp x64812 = args[2][0 * steps + ((cycle - 4) & mask)];
      Fp x64813 = args[2][1 * steps + ((cycle - 4) & mask)];
      Fp x64814 = args[2][2 * steps + ((cycle - 4) & mask)];
      Fp x64815 = args[2][3 * steps + ((cycle - 4) & mask)];
      Fp x64816 = args[2][4 * steps + ((cycle - 4) & mask)];
      Fp x64817 = args[2][5 * steps + ((cycle - 4) & mask)];
      Fp x64818 = args[2][6 * steps + ((cycle - 4) & mask)];
      Fp x64819 = args[2][7 * steps + ((cycle - 4) & mask)];
      Fp x64820 = args[2][8 * steps + ((cycle - 4) & mask)];
      Fp x64821 = args[2][9 * steps + ((cycle - 4) & mask)];
      Fp x64822 = args[2][10 * steps + ((cycle - 4) & mask)];
      Fp x64823 = args[2][11 * steps + ((cycle - 4) & mask)];
      Fp x64824 = args[2][12 * steps + ((cycle - 4) & mask)];
      Fp x64825 = args[2][13 * steps + ((cycle - 4) & mask)];
      Fp x64826 = args[2][14 * steps + ((cycle - 4) & mask)];
      Fp x64827 = args[2][15 * steps + ((cycle - 4) & mask)];
      Fp x64828 = args[2][16 * steps + ((cycle - 4) & mask)];
      Fp x64829 = args[2][17 * steps + ((cycle - 4) & mask)];
      Fp x64830 = args[2][18 * steps + ((cycle - 4) & mask)];
      Fp x64831 = args[2][19 * steps + ((cycle - 4) & mask)];
      Fp x64832 = args[2][20 * steps + ((cycle - 4) & mask)];
      Fp x64833 = args[2][21 * steps + ((cycle - 4) & mask)];
      Fp x64834 = args[2][22 * steps + ((cycle - 4) & mask)];
      Fp x64835 = args[2][23 * steps + ((cycle - 4) & mask)];
      Fp x64836 = args[2][24 * steps + ((cycle - 4) & mask)];
      Fp x64837 = args[2][25 * steps + ((cycle - 4) & mask)];
      Fp x64838 = args[2][26 * steps + ((cycle - 4) & mask)];
      Fp x64839 = args[2][27 * steps + ((cycle - 4) & mask)];
      Fp x64840 = args[2][28 * steps + ((cycle - 4) & mask)];
      Fp x64841 = args[2][29 * steps + ((cycle - 4) & mask)];
      Fp x64842 = args[2][30 * steps + ((cycle - 4) & mask)];
      Fp x64843 = args[2][31 * steps + ((cycle - 4) & mask)];
      Fp x64844 = args[2][32 * steps + ((cycle - 1) & mask)];
      Fp x64845 = args[2][33 * steps + ((cycle - 1) & mask)];
      Fp x64846 = args[2][34 * steps + ((cycle - 1) & mask)];
      Fp x64847 = args[2][35 * steps + ((cycle - 1) & mask)];
      Fp x64848 = args[2][36 * steps + ((cycle - 1) & mask)];
      Fp x64849 = args[2][37 * steps + ((cycle - 1) & mask)];
      Fp x64850 = args[2][38 * steps + ((cycle - 1) & mask)];
      Fp x64851 = args[2][39 * steps + ((cycle - 1) & mask)];
      Fp x64852 = args[2][40 * steps + ((cycle - 1) & mask)];
      Fp x64853 = args[2][41 * steps + ((cycle - 1) & mask)];
      Fp x64854 = args[2][42 * steps + ((cycle - 1) & mask)];
      Fp x64855 = args[2][43 * steps + ((cycle - 1) & mask)];
      Fp x64856 = args[2][44 * steps + ((cycle - 1) & mask)];
      Fp x64857 = args[2][45 * steps + ((cycle - 1) & mask)];
      Fp x64858 = args[2][46 * steps + ((cycle - 1) & mask)];
      Fp x64859 = args[2][47 * steps + ((cycle - 1) & mask)];
      Fp x64860 = args[2][48 * steps + ((cycle - 1) & mask)];
      Fp x64861 = args[2][49 * steps + ((cycle - 1) & mask)];
      Fp x64862 = args[2][50 * steps + ((cycle - 1) & mask)];
      Fp x64863 = args[2][51 * steps + ((cycle - 1) & mask)];
      Fp x64864 = args[2][52 * steps + ((cycle - 1) & mask)];
      Fp x64865 = args[2][53 * steps + ((cycle - 1) & mask)];
      Fp x64866 = args[2][54 * steps + ((cycle - 1) & mask)];
      Fp x64867 = args[2][55 * steps + ((cycle - 1) & mask)];
      Fp x64868 = args[2][56 * steps + ((cycle - 1) & mask)];
      Fp x64869 = args[2][57 * steps + ((cycle - 1) & mask)];
      Fp x64870 = args[2][58 * steps + ((cycle - 1) & mask)];
      Fp x64871 = args[2][59 * steps + ((cycle - 1) & mask)];
      Fp x64872 = args[2][60 * steps + ((cycle - 1) & mask)];
      Fp x64873 = args[2][61 * steps + ((cycle - 1) & mask)];
      Fp x64874 = args[2][62 * steps + ((cycle - 1) & mask)];
      Fp x64875 = args[2][63 * steps + ((cycle - 1) & mask)];
      Fp x64876 = args[2][32 * steps + ((cycle - 2) & mask)];
      Fp x64877 = args[2][33 * steps + ((cycle - 2) & mask)];
      Fp x64878 = args[2][34 * steps + ((cycle - 2) & mask)];
      Fp x64879 = args[2][35 * steps + ((cycle - 2) & mask)];
      Fp x64880 = args[2][36 * steps + ((cycle - 2) & mask)];
      Fp x64881 = args[2][37 * steps + ((cycle - 2) & mask)];
      Fp x64882 = args[2][38 * steps + ((cycle - 2) & mask)];
      Fp x64883 = args[2][39 * steps + ((cycle - 2) & mask)];
      Fp x64884 = args[2][40 * steps + ((cycle - 2) & mask)];
      Fp x64885 = args[2][41 * steps + ((cycle - 2) & mask)];
      Fp x64886 = args[2][42 * steps + ((cycle - 2) & mask)];
      Fp x64887 = args[2][43 * steps + ((cycle - 2) & mask)];
      Fp x64888 = args[2][44 * steps + ((cycle - 2) & mask)];
      Fp x64889 = args[2][45 * steps + ((cycle - 2) & mask)];
      Fp x64890 = args[2][46 * steps + ((cycle - 2) & mask)];
      Fp x64891 = args[2][47 * steps + ((cycle - 2) & mask)];
      Fp x64892 = args[2][48 * steps + ((cycle - 2) & mask)];
      Fp x64893 = args[2][49 * steps + ((cycle - 2) & mask)];
      Fp x64894 = args[2][50 * steps + ((cycle - 2) & mask)];
      Fp x64895 = args[2][51 * steps + ((cycle - 2) & mask)];
      Fp x64896 = args[2][52 * steps + ((cycle - 2) & mask)];
      Fp x64897 = args[2][53 * steps + ((cycle - 2) & mask)];
      Fp x64898 = args[2][54 * steps + ((cycle - 2) & mask)];
      Fp x64899 = args[2][55 * steps + ((cycle - 2) & mask)];
      Fp x64900 = args[2][56 * steps + ((cycle - 2) & mask)];
      Fp x64901 = args[2][57 * steps + ((cycle - 2) & mask)];
      Fp x64902 = args[2][58 * steps + ((cycle - 2) & mask)];
      Fp x64903 = args[2][59 * steps + ((cycle - 2) & mask)];
      Fp x64904 = args[2][60 * steps + ((cycle - 2) & mask)];
      Fp x64905 = args[2][61 * steps + ((cycle - 2) & mask)];
      Fp x64906 = args[2][62 * steps + ((cycle - 2) & mask)];
      Fp x64907 = args[2][63 * steps + ((cycle - 2) & mask)];
      Fp x64908 = args[2][32 * steps + ((cycle - 3) & mask)];
      Fp x64909 = args[2][33 * steps + ((cycle - 3) & mask)];
      Fp x64910 = args[2][34 * steps + ((cycle - 3) & mask)];
      Fp x64911 = args[2][35 * steps + ((cycle - 3) & mask)];
      Fp x64912 = args[2][36 * steps + ((cycle - 3) & mask)];
      Fp x64913 = args[2][37 * steps + ((cycle - 3) & mask)];
      Fp x64914 = args[2][38 * steps + ((cycle - 3) & mask)];
      Fp x64915 = args[2][39 * steps + ((cycle - 3) & mask)];
      Fp x64916 = args[2][40 * steps + ((cycle - 3) & mask)];
      Fp x64917 = args[2][41 * steps + ((cycle - 3) & mask)];
      Fp x64918 = args[2][42 * steps + ((cycle - 3) & mask)];
      Fp x64919 = args[2][43 * steps + ((cycle - 3) & mask)];
      Fp x64920 = args[2][44 * steps + ((cycle - 3) & mask)];
      Fp x64921 = args[2][45 * steps + ((cycle - 3) & mask)];
      Fp x64922 = args[2][46 * steps + ((cycle - 3) & mask)];
      Fp x64923 = args[2][47 * steps + ((cycle - 3) & mask)];
      Fp x64924 = args[2][48 * steps + ((cycle - 3) & mask)];
      Fp x64925 = args[2][49 * steps + ((cycle - 3) & mask)];
      Fp x64926 = args[2][50 * steps + ((cycle - 3) & mask)];
      Fp x64927 = args[2][51 * steps + ((cycle - 3) & mask)];
      Fp x64928 = args[2][52 * steps + ((cycle - 3) & mask)];
      Fp x64929 = args[2][53 * steps + ((cycle - 3) & mask)];
      Fp x64930 = args[2][54 * steps + ((cycle - 3) & mask)];
      Fp x64931 = args[2][55 * steps + ((cycle - 3) & mask)];
      Fp x64932 = args[2][56 * steps + ((cycle - 3) & mask)];
      Fp x64933 = args[2][57 * steps + ((cycle - 3) & mask)];
      Fp x64934 = args[2][58 * steps + ((cycle - 3) & mask)];
      Fp x64935 = args[2][59 * steps + ((cycle - 3) & mask)];
      Fp x64936 = args[2][60 * steps + ((cycle - 3) & mask)];
      Fp x64937 = args[2][61 * steps + ((cycle - 3) & mask)];
      Fp x64938 = args[2][62 * steps + ((cycle - 3) & mask)];
      Fp x64939 = args[2][63 * steps + ((cycle - 3) & mask)];
      Fp x64940 = args[2][32 * steps + ((cycle - 4) & mask)];
      Fp x64941 = args[2][33 * steps + ((cycle - 4) & mask)];
      Fp x64942 = args[2][34 * steps + ((cycle - 4) & mask)];
      Fp x64943 = args[2][35 * steps + ((cycle - 4) & mask)];
      Fp x64944 = args[2][36 * steps + ((cycle - 4) & mask)];
      Fp x64945 = args[2][37 * steps + ((cycle - 4) & mask)];
      Fp x64946 = args[2][38 * steps + ((cycle - 4) & mask)];
      Fp x64947 = args[2][39 * steps + ((cycle - 4) & mask)];
      Fp x64948 = args[2][40 * steps + ((cycle - 4) & mask)];
      Fp x64949 = args[2][41 * steps + ((cycle - 4) & mask)];
      Fp x64950 = args[2][42 * steps + ((cycle - 4) & mask)];
      Fp x64951 = args[2][43 * steps + ((cycle - 4) & mask)];
      Fp x64952 = args[2][44 * steps + ((cycle - 4) & mask)];
      Fp x64953 = args[2][45 * steps + ((cycle - 4) & mask)];
      Fp x64954 = args[2][46 * steps + ((cycle - 4) & mask)];
      Fp x64955 = args[2][47 * steps + ((cycle - 4) & mask)];
      Fp x64956 = args[2][48 * steps + ((cycle - 4) & mask)];
      Fp x64957 = args[2][49 * steps + ((cycle - 4) & mask)];
      Fp x64958 = args[2][50 * steps + ((cycle - 4) & mask)];
      Fp x64959 = args[2][51 * steps + ((cycle - 4) & mask)];
      Fp x64960 = args[2][52 * steps + ((cycle - 4) & mask)];
      Fp x64961 = args[2][53 * steps + ((cycle - 4) & mask)];
      Fp x64962 = args[2][54 * steps + ((cycle - 4) & mask)];
      Fp x64963 = args[2][55 * steps + ((cycle - 4) & mask)];
      Fp x64964 = args[2][56 * steps + ((cycle - 4) & mask)];
      Fp x64965 = args[2][57 * steps + ((cycle - 4) & mask)];
      Fp x64966 = args[2][58 * steps + ((cycle - 4) & mask)];
      Fp x64967 = args[2][59 * steps + ((cycle - 4) & mask)];
      Fp x64968 = args[2][60 * steps + ((cycle - 4) & mask)];
      Fp x64969 = args[2][61 * steps + ((cycle - 4) & mask)];
      Fp x64970 = args[2][62 * steps + ((cycle - 4) & mask)];
      Fp x64971 = args[2][63 * steps + ((cycle - 4) & mask)];
      Fp x64972 = args[0][12 * steps + ((cycle - 0) & mask)];
      Fp x64973 = args[0][13 * steps + ((cycle - 0) & mask)];
      Fp x64974 = x64729 + x64738;
      Fp x64975 = x64729 * x1;
      Fp x64976 = x64975 * x64738;
      Fp x64977 = x64974 - x64976;
      Fp x64978 = x64730 + x64739;
      Fp x64979 = x64730 * x1;
      Fp x64980 = x64979 * x64739;
      Fp x64981 = x64978 - x64980;
      Fp x64982 = x64731 + x64740;
      Fp x64983 = x64731 * x1;
      Fp x64984 = x64983 * x64740;
      Fp x64985 = x64982 - x64984;
      Fp x64986 = x64732 + x64741;
      Fp x64987 = x64732 * x1;
      Fp x64988 = x64987 * x64741;
      Fp x64989 = x64986 - x64988;
      Fp x64990 = x64733 + x64742;
      Fp x64991 = x64733 * x1;
      Fp x64992 = x64991 * x64742;
      Fp x64993 = x64990 - x64992;
      Fp x64994 = x64734 + x64743;
      Fp x64995 = x64734 * x1;
      Fp x64996 = x64995 * x64743;
      Fp x64997 = x64994 - x64996;
      Fp x64998 = x64735 + x64744;
      Fp x64999 = x64735 * x1;
      Fp x65000 = x64999 * x64744;
      Fp x65001 = x64998 - x65000;
      Fp x65002 = x64736 + x64745;
      Fp x65003 = x64736 * x1;
      Fp x65004 = x65003 * x64745;
      Fp x65005 = x65002 - x65004;
      Fp x65006 = x64737 + x64746;
      Fp x65007 = x64737 * x1;
      Fp x65008 = x65007 * x64746;
      Fp x65009 = x65006 - x65008;
      Fp x65010 = x64738 + x64747;
      Fp x65011 = x64738 * x1;
      Fp x65012 = x65011 * x64747;
      Fp x65013 = x65010 - x65012;
      Fp x65014 = x64739 + x64716;
      Fp x65015 = x64739 * x1;
      Fp x65016 = x65015 * x64716;
      Fp x65017 = x65014 - x65016;
      Fp x65018 = x64740 + x64717;
      Fp x65019 = x64740 * x1;
      Fp x65020 = x65019 * x64717;
      Fp x65021 = x65018 - x65020;
      Fp x65022 = x64741 + x64718;
      Fp x65023 = x64741 * x1;
      Fp x65024 = x65023 * x64718;
      Fp x65025 = x65022 - x65024;
      Fp x65026 = x64742 + x64719;
      Fp x65027 = x64742 * x1;
      Fp x65028 = x65027 * x64719;
      Fp x65029 = x65026 - x65028;
      Fp x65030 = x64743 + x64720;
      Fp x65031 = x64743 * x1;
      Fp x65032 = x65031 * x64720;
      Fp x65033 = x65030 - x65032;
      Fp x65034 = x64744 + x64721;
      Fp x65035 = x64744 * x1;
      Fp x65036 = x65035 * x64721;
      Fp x65037 = x65034 - x65036;
      Fp x65038 = x64745 + x64722;
      Fp x65039 = x64745 * x1;
      Fp x65040 = x65039 * x64722;
      Fp x65041 = x65038 - x65040;
      Fp x65042 = x64746 + x64723;
      Fp x65043 = x64746 * x1;
      Fp x65044 = x65043 * x64723;
      Fp x65045 = x65042 - x65044;
      Fp x65046 = x64747 + x64724;
      Fp x65047 = x64747 * x1;
      Fp x65048 = x65047 * x64724;
      Fp x65049 = x65046 - x65048;
      Fp x65050 = x64716 + x64725;
      Fp x65051 = x64716 * x1;
      Fp x65052 = x65051 * x64725;
      Fp x65053 = x65050 - x65052;
      Fp x65054 = x64717 + x64726;
      Fp x65055 = x64717 * x1;
      Fp x65056 = x65055 * x64726;
      Fp x65057 = x65054 - x65056;
      Fp x65058 = x64718 + x64727;
      Fp x65059 = x64718 * x1;
      Fp x65060 = x65059 * x64727;
      Fp x65061 = x65058 - x65060;
      Fp x65062 = x64719 + x64728;
      Fp x65063 = x64719 * x1;
      Fp x65064 = x65063 * x64728;
      Fp x65065 = x65062 - x65064;
      Fp x65066 = x64720 + x64729;
      Fp x65067 = x64720 * x1;
      Fp x65068 = x65067 * x64729;
      Fp x65069 = x65066 - x65068;
      Fp x65070 = x64721 + x64730;
      Fp x65071 = x64721 * x1;
      Fp x65072 = x65071 * x64730;
      Fp x65073 = x65070 - x65072;
      Fp x65074 = x64722 + x64731;
      Fp x65075 = x64722 * x1;
      Fp x65076 = x65075 * x64731;
      Fp x65077 = x65074 - x65076;
      Fp x65078 = x64723 + x64732;
      Fp x65079 = x64723 * x1;
      Fp x65080 = x65079 * x64732;
      Fp x65081 = x65078 - x65080;
      Fp x65082 = x64724 + x64733;
      Fp x65083 = x64724 * x1;
      Fp x65084 = x65083 * x64733;
      Fp x65085 = x65082 - x65084;
      Fp x65086 = x64725 + x64734;
      Fp x65087 = x64725 * x1;
      Fp x65088 = x65087 * x64734;
      Fp x65089 = x65086 - x65088;
      Fp x65090 = x64726 + x64735;
      Fp x65091 = x64726 * x1;
      Fp x65092 = x65091 * x64735;
      Fp x65093 = x65090 - x65092;
      Fp x65094 = x64727 + x64736;
      Fp x65095 = x64727 * x1;
      Fp x65096 = x65095 * x64736;
      Fp x65097 = x65094 - x65096;
      Fp x65098 = x64728 + x64737;
      Fp x65099 = x64728 * x1;
      Fp x65100 = x65099 * x64737;
      Fp x65101 = x65098 - x65100;
      Fp x65102 = x64718 + x64977;
      Fp x65103 = x65059 * x64977;
      Fp x65104 = x65102 - x65103;
      Fp x65105 = x64719 + x64981;
      Fp x65106 = x65063 * x64981;
      Fp x65107 = x65105 - x65106;
      Fp x65108 = x64720 + x64985;
      Fp x65109 = x65067 * x64985;
      Fp x65110 = x65108 - x65109;
      Fp x65111 = x64721 + x64989;
      Fp x65112 = x65071 * x64989;
      Fp x65113 = x65111 - x65112;
      Fp x65114 = x64722 + x64993;
      Fp x65115 = x65075 * x64993;
      Fp x65116 = x65114 - x65115;
      Fp x65117 = x64723 + x64997;
      Fp x65118 = x65079 * x64997;
      Fp x65119 = x65117 - x65118;
      Fp x65120 = x64724 + x65001;
      Fp x65121 = x65083 * x65001;
      Fp x65122 = x65120 - x65121;
      Fp x65123 = x64725 + x65005;
      Fp x65124 = x65087 * x65005;
      Fp x65125 = x65123 - x65124;
      Fp x65126 = x64726 + x65009;
      Fp x65127 = x65091 * x65009;
      Fp x65128 = x65126 - x65127;
      Fp x65129 = x64727 + x65013;
      Fp x65130 = x65095 * x65013;
      Fp x65131 = x65129 - x65130;
      Fp x65132 = x64728 + x65017;
      Fp x65133 = x65099 * x65017;
      Fp x65134 = x65132 - x65133;
      Fp x65135 = x64729 + x65021;
      Fp x65136 = x64975 * x65021;
      Fp x65137 = x65135 - x65136;
      Fp x65138 = x64730 + x65025;
      Fp x65139 = x64979 * x65025;
      Fp x65140 = x65138 - x65139;
      Fp x65141 = x64731 + x65029;
      Fp x65142 = x64983 * x65029;
      Fp x65143 = x65141 - x65142;
      Fp x65144 = x64732 + x65033;
      Fp x65145 = x64987 * x65033;
      Fp x65146 = x65144 - x65145;
      Fp x65147 = x64733 + x65037;
      Fp x65148 = x64991 * x65037;
      Fp x65149 = x65147 - x65148;
      Fp x65150 = x64734 + x65041;
      Fp x65151 = x64995 * x65041;
      Fp x65152 = x65150 - x65151;
      Fp x65153 = x64735 + x65045;
      Fp x65154 = x64999 * x65045;
      Fp x65155 = x65153 - x65154;
      Fp x65156 = x64736 + x65049;
      Fp x65157 = x65003 * x65049;
      Fp x65158 = x65156 - x65157;
      Fp x65159 = x64737 + x65053;
      Fp x65160 = x65007 * x65053;
      Fp x65161 = x65159 - x65160;
      Fp x65162 = x64738 + x65057;
      Fp x65163 = x65011 * x65057;
      Fp x65164 = x65162 - x65163;
      Fp x65165 = x64739 + x65061;
      Fp x65166 = x65015 * x65061;
      Fp x65167 = x65165 - x65166;
      Fp x65168 = x64740 + x65065;
      Fp x65169 = x65019 * x65065;
      Fp x65170 = x65168 - x65169;
      Fp x65171 = x64741 + x65069;
      Fp x65172 = x65023 * x65069;
      Fp x65173 = x65171 - x65172;
      Fp x65174 = x64742 + x65073;
      Fp x65175 = x65027 * x65073;
      Fp x65176 = x65174 - x65175;
      Fp x65177 = x64743 + x65077;
      Fp x65178 = x65031 * x65077;
      Fp x65179 = x65177 - x65178;
      Fp x65180 = x64744 + x65081;
      Fp x65181 = x65035 * x65081;
      Fp x65182 = x65180 - x65181;
      Fp x65183 = x64745 + x65085;
      Fp x65184 = x65039 * x65085;
      Fp x65185 = x65183 - x65184;
      Fp x65186 = x64746 + x65089;
      Fp x65187 = x65043 * x65089;
      Fp x65188 = x65186 - x65187;
      Fp x65189 = x64747 + x65093;
      Fp x65190 = x65047 * x65093;
      Fp x65191 = x65189 - x65190;
      Fp x65192 = x64716 + x65097;
      Fp x65193 = x65051 * x65097;
      Fp x65194 = x65192 - x65193;
      Fp x65195 = x64717 + x65101;
      Fp x65196 = x65055 * x65101;
      Fp x65197 = x65195 - x65196;
      Fp x65198 = x64855 + x64869;
      Fp x65199 = x64855 * x1;
      Fp x65200 = x65199 * x64869;
      Fp x65201 = x65198 - x65200;
      Fp x65202 = x64856 + x64870;
      Fp x65203 = x64856 * x1;
      Fp x65204 = x65203 * x64870;
      Fp x65205 = x65202 - x65204;
      Fp x65206 = x64857 + x64871;
      Fp x65207 = x64857 * x1;
      Fp x65208 = x65207 * x64871;
      Fp x65209 = x65206 - x65208;
      Fp x65210 = x64858 + x64872;
      Fp x65211 = x64858 * x1;
      Fp x65212 = x65211 * x64872;
      Fp x65213 = x65210 - x65212;
      Fp x65214 = x64859 + x64873;
      Fp x65215 = x64859 * x1;
      Fp x65216 = x65215 * x64873;
      Fp x65217 = x65214 - x65216;
      Fp x65218 = x64860 + x64874;
      Fp x65219 = x64860 * x1;
      Fp x65220 = x65219 * x64874;
      Fp x65221 = x65218 - x65220;
      Fp x65222 = x64861 + x64875;
      Fp x65223 = x64861 * x1;
      Fp x65224 = x65223 * x64875;
      Fp x65225 = x65222 - x65224;
      Fp x65226 = x64862 + x64844;
      Fp x65227 = x64862 * x1;
      Fp x65228 = x65227 * x64844;
      Fp x65229 = x65226 - x65228;
      Fp x65230 = x64863 + x64845;
      Fp x65231 = x64863 * x1;
      Fp x65232 = x65231 * x64845;
      Fp x65233 = x65230 - x65232;
      Fp x65234 = x64864 + x64846;
      Fp x65235 = x64864 * x1;
      Fp x65236 = x65235 * x64846;
      Fp x65237 = x65234 - x65236;
      Fp x65238 = x64865 + x64847;
      Fp x65239 = x64865 * x1;
      Fp x65240 = x65239 * x64847;
      Fp x65241 = x65238 - x65240;
      Fp x65242 = x64866 + x64848;
      Fp x65243 = x64866 * x1;
      Fp x65244 = x65243 * x64848;
      Fp x65245 = x65242 - x65244;
      Fp x65246 = x64867 + x64849;
      Fp x65247 = x64867 * x1;
      Fp x65248 = x65247 * x64849;
      Fp x65249 = x65246 - x65248;
      Fp x65250 = x64868 + x64850;
      Fp x65251 = x64868 * x1;
      Fp x65252 = x65251 * x64850;
      Fp x65253 = x65250 - x65252;
      Fp x65254 = x64869 + x64851;
      Fp x65255 = x64869 * x1;
      Fp x65256 = x65255 * x64851;
      Fp x65257 = x65254 - x65256;
      Fp x65258 = x64870 + x64852;
      Fp x65259 = x64870 * x1;
      Fp x65260 = x65259 * x64852;
      Fp x65261 = x65258 - x65260;
      Fp x65262 = x64871 + x64853;
      Fp x65263 = x64871 * x1;
      Fp x65264 = x65263 * x64853;
      Fp x65265 = x65262 - x65264;
      Fp x65266 = x64872 + x64854;
      Fp x65267 = x64872 * x1;
      Fp x65268 = x65267 * x64854;
      Fp x65269 = x65266 - x65268;
      Fp x65270 = x64873 + x64855;
      Fp x65271 = x64873 * x1;
      Fp x65272 = x65271 * x64855;
      Fp x65273 = x65270 - x65272;
      Fp x65274 = x64874 + x64856;
      Fp x65275 = x64874 * x1;
      Fp x65276 = x65275 * x64856;
      Fp x65277 = x65274 - x65276;
      Fp x65278 = x64875 + x64857;
      Fp x65279 = x64875 * x1;
      Fp x65280 = x65279 * x64857;
      Fp x65281 = x65278 - x65280;
      Fp x65282 = x64844 + x64858;
      Fp x65283 = x64844 * x1;
      Fp x65284 = x65283 * x64858;
      Fp x65285 = x65282 - x65284;
      Fp x65286 = x64845 + x64859;
      Fp x65287 = x64845 * x1;
      Fp x65288 = x65287 * x64859;
      Fp x65289 = x65286 - x65288;
      Fp x65290 = x64846 + x64860;
      Fp x65291 = x64846 * x1;
      Fp x65292 = x65291 * x64860;
      Fp x65293 = x65290 - x65292;
      Fp x65294 = x64847 + x64861;
      Fp x65295 = x64847 * x1;
      Fp x65296 = x65295 * x64861;
      Fp x65297 = x65294 - x65296;
      Fp x65298 = x64848 + x64862;
      Fp x65299 = x64848 * x1;
      Fp x65300 = x65299 * x64862;
      Fp x65301 = x65298 - x65300;
      Fp x65302 = x64849 + x64863;
      Fp x65303 = x64849 * x1;
      Fp x65304 = x65303 * x64863;
      Fp x65305 = x65302 - x65304;
      Fp x65306 = x64850 + x64864;
      Fp x65307 = x64850 * x1;
      Fp x65308 = x65307 * x64864;
      Fp x65309 = x65306 - x65308;
      Fp x65310 = x64851 + x64865;
      Fp x65311 = x64851 * x1;
      Fp x65312 = x65311 * x64865;
      Fp x65313 = x65310 - x65312;
      Fp x65314 = x64852 + x64866;
      Fp x65315 = x64852 * x1;
      Fp x65316 = x65315 * x64866;
      Fp x65317 = x65314 - x65316;
      Fp x65318 = x64853 + x64867;
      Fp x65319 = x64853 * x1;
      Fp x65320 = x65319 * x64867;
      Fp x65321 = x65318 - x65320;
      Fp x65322 = x64854 + x64868;
      Fp x65323 = x64854 * x1;
      Fp x65324 = x65323 * x64868;
      Fp x65325 = x65322 - x65324;
      Fp x65326 = x64850 + x65201;
      Fp x65327 = x65307 * x65201;
      Fp x65328 = x65326 - x65327;
      Fp x65329 = x64851 + x65205;
      Fp x65330 = x65311 * x65205;
      Fp x65331 = x65329 - x65330;
      Fp x65332 = x64852 + x65209;
      Fp x65333 = x65315 * x65209;
      Fp x65334 = x65332 - x65333;
      Fp x65335 = x64853 + x65213;
      Fp x65336 = x65319 * x65213;
      Fp x65337 = x65335 - x65336;
      Fp x65338 = x64854 + x65217;
      Fp x65339 = x65323 * x65217;
      Fp x65340 = x65338 - x65339;
      Fp x65341 = x64855 + x65221;
      Fp x65342 = x65199 * x65221;
      Fp x65343 = x65341 - x65342;
      Fp x65344 = x64856 + x65225;
      Fp x65345 = x65203 * x65225;
      Fp x65346 = x65344 - x65345;
      Fp x65347 = x64857 + x65229;
      Fp x65348 = x65207 * x65229;
      Fp x65349 = x65347 - x65348;
      Fp x65350 = x64858 + x65233;
      Fp x65351 = x65211 * x65233;
      Fp x65352 = x65350 - x65351;
      Fp x65353 = x64859 + x65237;
      Fp x65354 = x65215 * x65237;
      Fp x65355 = x65353 - x65354;
      Fp x65356 = x64860 + x65241;
      Fp x65357 = x65219 * x65241;
      Fp x65358 = x65356 - x65357;
      Fp x65359 = x64861 + x65245;
      Fp x65360 = x65223 * x65245;
      Fp x65361 = x65359 - x65360;
      Fp x65362 = x64862 + x65249;
      Fp x65363 = x65227 * x65249;
      Fp x65364 = x65362 - x65363;
      Fp x65365 = x64863 + x65253;
      Fp x65366 = x65231 * x65253;
      Fp x65367 = x65365 - x65366;
      Fp x65368 = x64864 + x65257;
      Fp x65369 = x65235 * x65257;
      Fp x65370 = x65368 - x65369;
      Fp x65371 = x64865 + x65261;
      Fp x65372 = x65239 * x65261;
      Fp x65373 = x65371 - x65372;
      Fp x65374 = x64866 + x65265;
      Fp x65375 = x65243 * x65265;
      Fp x65376 = x65374 - x65375;
      Fp x65377 = x64867 + x65269;
      Fp x65378 = x65247 * x65269;
      Fp x65379 = x65377 - x65378;
      Fp x65380 = x64868 + x65273;
      Fp x65381 = x65251 * x65273;
      Fp x65382 = x65380 - x65381;
      Fp x65383 = x64869 + x65277;
      Fp x65384 = x65255 * x65277;
      Fp x65385 = x65383 - x65384;
      Fp x65386 = x64870 + x65281;
      Fp x65387 = x65259 * x65281;
      Fp x65388 = x65386 - x65387;
      Fp x65389 = x64871 + x65285;
      Fp x65390 = x65263 * x65285;
      Fp x65391 = x65389 - x65390;
      Fp x65392 = x64872 + x65289;
      Fp x65393 = x65267 * x65289;
      Fp x65394 = x65392 - x65393;
      Fp x65395 = x64873 + x65293;
      Fp x65396 = x65271 * x65293;
      Fp x65397 = x65395 - x65396;
      Fp x65398 = x64874 + x65297;
      Fp x65399 = x65275 * x65297;
      Fp x65400 = x65398 - x65399;
      Fp x65401 = x64875 + x65301;
      Fp x65402 = x65279 * x65301;
      Fp x65403 = x65401 - x65402;
      Fp x65404 = x64844 + x65305;
      Fp x65405 = x65283 * x65305;
      Fp x65406 = x65404 - x65405;
      Fp x65407 = x64845 + x65309;
      Fp x65408 = x65287 * x65309;
      Fp x65409 = x65407 - x65408;
      Fp x65410 = x64846 + x65313;
      Fp x65411 = x65291 * x65313;
      Fp x65412 = x65410 - x65411;
      Fp x65413 = x64847 + x65317;
      Fp x65414 = x65295 * x65317;
      Fp x65415 = x65413 - x65414;
      Fp x65416 = x64848 + x65321;
      Fp x65417 = x65299 * x65321;
      Fp x65418 = x65416 - x65417;
      Fp x65419 = x64849 + x65325;
      Fp x65420 = x65303 * x65325;
      Fp x65421 = x65419 - x65420;
      Fp x65422 = args[2][64 * steps + ((cycle - 0) & mask)];
      Fp x65423 = args[2][65 * steps + ((cycle - 0) & mask)];
      Fp x65424 = x65423 * x1;
      Fp x65425 = x65422 + x65424;
      Fp x65426 = args[2][66 * steps + ((cycle - 0) & mask)];
      Fp x65427 = x65426 * x3;
      Fp x65428 = x65425 + x65427;
      Fp x65429 = args[2][67 * steps + ((cycle - 0) & mask)];
      Fp x65430 = x65429 * x6;
      Fp x65431 = x65428 + x65430;
      Fp x65432 = args[2][68 * steps + ((cycle - 0) & mask)];
      Fp x65433 = x65432 * x11;
      Fp x65434 = x65431 + x65433;
      Fp x65435 = args[2][69 * steps + ((cycle - 0) & mask)];
      Fp x65436 = x65435 * x27;
      Fp x65437 = x65434 + x65436;
      Fp x65438 = args[2][70 * steps + ((cycle - 0) & mask)];
      Fp x65439 = x65438 * x12;
      Fp x65440 = x65437 + x65439;
      Fp x65441 = args[2][71 * steps + ((cycle - 0) & mask)];
      Fp x65442 = x65441 * x28;
      Fp x65443 = x65440 + x65442;
      Fp x65444 = args[2][72 * steps + ((cycle - 0) & mask)];
      Fp x65445 = x65444 * x13;
      Fp x65446 = x65443 + x65445;
      Fp x65447 = args[2][73 * steps + ((cycle - 0) & mask)];
      Fp x65448 = x65447 * x29;
      Fp x65449 = x65446 + x65448;
      Fp x65450 = args[2][74 * steps + ((cycle - 0) & mask)];
      Fp x65451 = x65450 * x14;
      Fp x65452 = x65449 + x65451;
      Fp x65453 = args[2][75 * steps + ((cycle - 0) & mask)];
      Fp x65454 = x65453 * x30;
      Fp x65455 = x65452 + x65454;
      Fp x65456 = args[2][76 * steps + ((cycle - 0) & mask)];
      Fp x65457 = x65456 * x15;
      Fp x65458 = x65455 + x65457;
      Fp x65459 = args[2][77 * steps + ((cycle - 0) & mask)];
      Fp x65460 = x65459 * x31;
      Fp x65461 = x65458 + x65460;
      Fp x65462 = args[2][78 * steps + ((cycle - 0) & mask)];
      Fp x65463 = x65462 * x16;
      Fp x65464 = x65461 + x65463;
      Fp x65465 = args[2][79 * steps + ((cycle - 0) & mask)];
      Fp x65466 = x65465 * x32;
      Fp x65467 = x65464 + x65466;
      Fp x65468 = args[2][80 * steps + ((cycle - 0) & mask)];
      Fp x65469 = args[2][81 * steps + ((cycle - 0) & mask)];
      Fp x65470 = x65469 * x1;
      Fp x65471 = x65468 + x65470;
      Fp x65472 = args[2][82 * steps + ((cycle - 0) & mask)];
      Fp x65473 = x65472 * x3;
      Fp x65474 = x65471 + x65473;
      Fp x65475 = args[2][83 * steps + ((cycle - 0) & mask)];
      Fp x65476 = x65475 * x6;
      Fp x65477 = x65474 + x65476;
      Fp x65478 = args[2][84 * steps + ((cycle - 0) & mask)];
      Fp x65479 = x65478 * x11;
      Fp x65480 = x65477 + x65479;
      Fp x65481 = args[2][85 * steps + ((cycle - 0) & mask)];
      Fp x65482 = x65481 * x27;
      Fp x65483 = x65480 + x65482;
      Fp x65484 = args[2][86 * steps + ((cycle - 0) & mask)];
      Fp x65485 = x65484 * x12;
      Fp x65486 = x65483 + x65485;
      Fp x65487 = args[2][87 * steps + ((cycle - 0) & mask)];
      Fp x65488 = x65487 * x28;
      Fp x65489 = x65486 + x65488;
      Fp x65490 = args[2][88 * steps + ((cycle - 0) & mask)];
      Fp x65491 = x65490 * x13;
      Fp x65492 = x65489 + x65491;
      Fp x65493 = args[2][89 * steps + ((cycle - 0) & mask)];
      Fp x65494 = x65493 * x29;
      Fp x65495 = x65492 + x65494;
      Fp x65496 = args[2][90 * steps + ((cycle - 0) & mask)];
      Fp x65497 = x65496 * x14;
      Fp x65498 = x65495 + x65497;
      Fp x65499 = args[2][91 * steps + ((cycle - 0) & mask)];
      Fp x65500 = x65499 * x30;
      Fp x65501 = x65498 + x65500;
      Fp x65502 = args[2][92 * steps + ((cycle - 0) & mask)];
      Fp x65503 = x65502 * x15;
      Fp x65504 = x65501 + x65503;
      Fp x65505 = args[2][93 * steps + ((cycle - 0) & mask)];
      Fp x65506 = x65505 * x31;
      Fp x65507 = x65504 + x65506;
      Fp x65508 = args[2][94 * steps + ((cycle - 0) & mask)];
      Fp x65509 = x65508 * x16;
      Fp x65510 = x65507 + x65509;
      Fp x65511 = args[2][95 * steps + ((cycle - 0) & mask)];
      Fp x65512 = x65511 * x32;
      Fp x65513 = x65510 + x65512;
      Fp x65514 = x65467 + x64972;
      Fp x65515 = x65513 + x64973;
      Fp x65516 = x64941 * x1;
      Fp x65517 = x64940 + x65516;
      Fp x65518 = x64942 * x3;
      Fp x65519 = x65517 + x65518;
      Fp x65520 = x64943 * x6;
      Fp x65521 = x65519 + x65520;
      Fp x65522 = x64944 * x11;
      Fp x65523 = x65521 + x65522;
      Fp x65524 = x64945 * x27;
      Fp x65525 = x65523 + x65524;
      Fp x65526 = x64946 * x12;
      Fp x65527 = x65525 + x65526;
      Fp x65528 = x64947 * x28;
      Fp x65529 = x65527 + x65528;
      Fp x65530 = x64948 * x13;
      Fp x65531 = x65529 + x65530;
      Fp x65532 = x64949 * x29;
      Fp x65533 = x65531 + x65532;
      Fp x65534 = x64950 * x14;
      Fp x65535 = x65533 + x65534;
      Fp x65536 = x64951 * x30;
      Fp x65537 = x65535 + x65536;
      Fp x65538 = x64952 * x15;
      Fp x65539 = x65537 + x65538;
      Fp x65540 = x64953 * x31;
      Fp x65541 = x65539 + x65540;
      Fp x65542 = x64954 * x16;
      Fp x65543 = x65541 + x65542;
      Fp x65544 = x64955 * x32;
      Fp x65545 = x65543 + x65544;
      Fp x65546 = x64957 * x1;
      Fp x65547 = x64956 + x65546;
      Fp x65548 = x64958 * x3;
      Fp x65549 = x65547 + x65548;
      Fp x65550 = x64959 * x6;
      Fp x65551 = x65549 + x65550;
      Fp x65552 = x64960 * x11;
      Fp x65553 = x65551 + x65552;
      Fp x65554 = x64961 * x27;
      Fp x65555 = x65553 + x65554;
      Fp x65556 = x64962 * x12;
      Fp x65557 = x65555 + x65556;
      Fp x65558 = x64963 * x28;
      Fp x65559 = x65557 + x65558;
      Fp x65560 = x64964 * x13;
      Fp x65561 = x65559 + x65560;
      Fp x65562 = x64965 * x29;
      Fp x65563 = x65561 + x65562;
      Fp x65564 = x64966 * x14;
      Fp x65565 = x65563 + x65564;
      Fp x65566 = x64967 * x30;
      Fp x65567 = x65565 + x65566;
      Fp x65568 = x64968 * x15;
      Fp x65569 = x65567 + x65568;
      Fp x65570 = x64969 * x31;
      Fp x65571 = x65569 + x65570;
      Fp x65572 = x64970 * x16;
      Fp x65573 = x65571 + x65572;
      Fp x65574 = x64971 * x32;
      Fp x65575 = x65573 + x65574;
      Fp x65576 = x65514 + x65545;
      Fp x65577 = x65515 + x65575;
      Fp x65578 = x64844 * x64876;
      Fp x65579 = x71 - x64844;
      Fp x65580 = x65579 * x64908;
      Fp x65581 = x65578 + x65580;
      Fp x65582 = x64845 * x64877;
      Fp x65583 = x71 - x64845;
      Fp x65584 = x65583 * x64909;
      Fp x65585 = x65582 + x65584;
      Fp x65586 = x64846 * x64878;
      Fp x65587 = x71 - x64846;
      Fp x65588 = x65587 * x64910;
      Fp x65589 = x65586 + x65588;
      Fp x65590 = x64847 * x64879;
      Fp x65591 = x71 - x64847;
      Fp x65592 = x65591 * x64911;
      Fp x65593 = x65590 + x65592;
      Fp x65594 = x64848 * x64880;
      Fp x65595 = x71 - x64848;
      Fp x65596 = x65595 * x64912;
      Fp x65597 = x65594 + x65596;
      Fp x65598 = x64849 * x64881;
      Fp x65599 = x71 - x64849;
      Fp x65600 = x65599 * x64913;
      Fp x65601 = x65598 + x65600;
      Fp x65602 = x64850 * x64882;
      Fp x65603 = x71 - x64850;
      Fp x65604 = x65603 * x64914;
      Fp x65605 = x65602 + x65604;
      Fp x65606 = x64851 * x64883;
      Fp x65607 = x71 - x64851;
      Fp x65608 = x65607 * x64915;
      Fp x65609 = x65606 + x65608;
      Fp x65610 = x64852 * x64884;
      Fp x65611 = x71 - x64852;
      Fp x65612 = x65611 * x64916;
      Fp x65613 = x65610 + x65612;
      Fp x65614 = x64853 * x64885;
      Fp x65615 = x71 - x64853;
      Fp x65616 = x65615 * x64917;
      Fp x65617 = x65614 + x65616;
      Fp x65618 = x64854 * x64886;
      Fp x65619 = x71 - x64854;
      Fp x65620 = x65619 * x64918;
      Fp x65621 = x65618 + x65620;
      Fp x65622 = x64855 * x64887;
      Fp x65623 = x71 - x64855;
      Fp x65624 = x65623 * x64919;
      Fp x65625 = x65622 + x65624;
      Fp x65626 = x64856 * x64888;
      Fp x65627 = x71 - x64856;
      Fp x65628 = x65627 * x64920;
      Fp x65629 = x65626 + x65628;
      Fp x65630 = x64857 * x64889;
      Fp x65631 = x71 - x64857;
      Fp x65632 = x65631 * x64921;
      Fp x65633 = x65630 + x65632;
      Fp x65634 = x64858 * x64890;
      Fp x65635 = x71 - x64858;
      Fp x65636 = x65635 * x64922;
      Fp x65637 = x65634 + x65636;
      Fp x65638 = x64859 * x64891;
      Fp x65639 = x71 - x64859;
      Fp x65640 = x65639 * x64923;
      Fp x65641 = x65638 + x65640;
      Fp x65642 = x64860 * x64892;
      Fp x65643 = x71 - x64860;
      Fp x65644 = x65643 * x64924;
      Fp x65645 = x65642 + x65644;
      Fp x65646 = x64861 * x64893;
      Fp x65647 = x71 - x64861;
      Fp x65648 = x65647 * x64925;
      Fp x65649 = x65646 + x65648;
      Fp x65650 = x64862 * x64894;
      Fp x65651 = x71 - x64862;
      Fp x65652 = x65651 * x64926;
      Fp x65653 = x65650 + x65652;
      Fp x65654 = x64863 * x64895;
      Fp x65655 = x71 - x64863;
      Fp x65656 = x65655 * x64927;
      Fp x65657 = x65654 + x65656;
      Fp x65658 = x64864 * x64896;
      Fp x65659 = x71 - x64864;
      Fp x65660 = x65659 * x64928;
      Fp x65661 = x65658 + x65660;
      Fp x65662 = x64865 * x64897;
      Fp x65663 = x71 - x64865;
      Fp x65664 = x65663 * x64929;
      Fp x65665 = x65662 + x65664;
      Fp x65666 = x64866 * x64898;
      Fp x65667 = x71 - x64866;
      Fp x65668 = x65667 * x64930;
      Fp x65669 = x65666 + x65668;
      Fp x65670 = x64867 * x64899;
      Fp x65671 = x71 - x64867;
      Fp x65672 = x65671 * x64931;
      Fp x65673 = x65670 + x65672;
      Fp x65674 = x64868 * x64900;
      Fp x65675 = x71 - x64868;
      Fp x65676 = x65675 * x64932;
      Fp x65677 = x65674 + x65676;
      Fp x65678 = x64869 * x64901;
      Fp x65679 = x71 - x64869;
      Fp x65680 = x65679 * x64933;
      Fp x65681 = x65678 + x65680;
      Fp x65682 = x64870 * x64902;
      Fp x65683 = x71 - x64870;
      Fp x65684 = x65683 * x64934;
      Fp x65685 = x65682 + x65684;
      Fp x65686 = x64871 * x64903;
      Fp x65687 = x71 - x64871;
      Fp x65688 = x65687 * x64935;
      Fp x65689 = x65686 + x65688;
      Fp x65690 = x64872 * x64904;
      Fp x65691 = x71 - x64872;
      Fp x65692 = x65691 * x64936;
      Fp x65693 = x65690 + x65692;
      Fp x65694 = x64873 * x64905;
      Fp x65695 = x71 - x64873;
      Fp x65696 = x65695 * x64937;
      Fp x65697 = x65694 + x65696;
      Fp x65698 = x64874 * x64906;
      Fp x65699 = x71 - x64874;
      Fp x65700 = x65699 * x64938;
      Fp x65701 = x65698 + x65700;
      Fp x65702 = x64875 * x64907;
      Fp x65703 = x71 - x64875;
      Fp x65704 = x65703 * x64939;
      Fp x65705 = x65702 + x65704;
      Fp x65706 = x65585 * x1;
      Fp x65707 = x65581 + x65706;
      Fp x65708 = x65589 * x3;
      Fp x65709 = x65707 + x65708;
      Fp x65710 = x65593 * x6;
      Fp x65711 = x65709 + x65710;
      Fp x65712 = x65597 * x11;
      Fp x65713 = x65711 + x65712;
      Fp x65714 = x65601 * x27;
      Fp x65715 = x65713 + x65714;
      Fp x65716 = x65605 * x12;
      Fp x65717 = x65715 + x65716;
      Fp x65718 = x65609 * x28;
      Fp x65719 = x65717 + x65718;
      Fp x65720 = x65613 * x13;
      Fp x65721 = x65719 + x65720;
      Fp x65722 = x65617 * x29;
      Fp x65723 = x65721 + x65722;
      Fp x65724 = x65621 * x14;
      Fp x65725 = x65723 + x65724;
      Fp x65726 = x65625 * x30;
      Fp x65727 = x65725 + x65726;
      Fp x65728 = x65629 * x15;
      Fp x65729 = x65727 + x65728;
      Fp x65730 = x65633 * x31;
      Fp x65731 = x65729 + x65730;
      Fp x65732 = x65637 * x16;
      Fp x65733 = x65731 + x65732;
      Fp x65734 = x65641 * x32;
      Fp x65735 = x65733 + x65734;
      Fp x65736 = x65649 * x1;
      Fp x65737 = x65645 + x65736;
      Fp x65738 = x65653 * x3;
      Fp x65739 = x65737 + x65738;
      Fp x65740 = x65657 * x6;
      Fp x65741 = x65739 + x65740;
      Fp x65742 = x65661 * x11;
      Fp x65743 = x65741 + x65742;
      Fp x65744 = x65665 * x27;
      Fp x65745 = x65743 + x65744;
      Fp x65746 = x65669 * x12;
      Fp x65747 = x65745 + x65746;
      Fp x65748 = x65673 * x28;
      Fp x65749 = x65747 + x65748;
      Fp x65750 = x65677 * x13;
      Fp x65751 = x65749 + x65750;
      Fp x65752 = x65681 * x29;
      Fp x65753 = x65751 + x65752;
      Fp x65754 = x65685 * x14;
      Fp x65755 = x65753 + x65754;
      Fp x65756 = x65689 * x30;
      Fp x65757 = x65755 + x65756;
      Fp x65758 = x65693 * x15;
      Fp x65759 = x65757 + x65758;
      Fp x65760 = x65697 * x31;
      Fp x65761 = x65759 + x65760;
      Fp x65762 = x65701 * x16;
      Fp x65763 = x65761 + x65762;
      Fp x65764 = x65705 * x32;
      Fp x65765 = x65763 + x65764;
      Fp x65766 = x65576 + x65735;
      Fp x65767 = x65577 + x65765;
      Fp x65768 = x65331 * x1;
      Fp x65769 = x65328 + x65768;
      Fp x65770 = x65334 * x3;
      Fp x65771 = x65769 + x65770;
      Fp x65772 = x65337 * x6;
      Fp x65773 = x65771 + x65772;
      Fp x65774 = x65340 * x11;
      Fp x65775 = x65773 + x65774;
      Fp x65776 = x65343 * x27;
      Fp x65777 = x65775 + x65776;
      Fp x65778 = x65346 * x12;
      Fp x65779 = x65777 + x65778;
      Fp x65780 = x65349 * x28;
      Fp x65781 = x65779 + x65780;
      Fp x65782 = x65352 * x13;
      Fp x65783 = x65781 + x65782;
      Fp x65784 = x65355 * x29;
      Fp x65785 = x65783 + x65784;
      Fp x65786 = x65358 * x14;
      Fp x65787 = x65785 + x65786;
      Fp x65788 = x65361 * x30;
      Fp x65789 = x65787 + x65788;
      Fp x65790 = x65364 * x15;
      Fp x65791 = x65789 + x65790;
      Fp x65792 = x65367 * x31;
      Fp x65793 = x65791 + x65792;
      Fp x65794 = x65370 * x16;
      Fp x65795 = x65793 + x65794;
      Fp x65796 = x65373 * x32;
      Fp x65797 = x65795 + x65796;
      Fp x65798 = x65379 * x1;
      Fp x65799 = x65376 + x65798;
      Fp x65800 = x65382 * x3;
      Fp x65801 = x65799 + x65800;
      Fp x65802 = x65385 * x6;
      Fp x65803 = x65801 + x65802;
      Fp x65804 = x65388 * x11;
      Fp x65805 = x65803 + x65804;
      Fp x65806 = x65391 * x27;
      Fp x65807 = x65805 + x65806;
      Fp x65808 = x65394 * x12;
      Fp x65809 = x65807 + x65808;
      Fp x65810 = x65397 * x28;
      Fp x65811 = x65809 + x65810;
      Fp x65812 = x65400 * x13;
      Fp x65813 = x65811 + x65812;
      Fp x65814 = x65403 * x29;
      Fp x65815 = x65813 + x65814;
      Fp x65816 = x65406 * x14;
      Fp x65817 = x65815 + x65816;
      Fp x65818 = x65409 * x30;
      Fp x65819 = x65817 + x65818;
      Fp x65820 = x65412 * x15;
      Fp x65821 = x65819 + x65820;
      Fp x65822 = x65415 * x31;
      Fp x65823 = x65821 + x65822;
      Fp x65824 = x65418 * x16;
      Fp x65825 = x65823 + x65824;
      Fp x65826 = x65421 * x32;
      Fp x65827 = x65825 + x65826;
      Fp x65828 = x65766 + x65797;
      Fp x65829 = x65767 + x65827;
      Fp x65830 = x64716 * x64748;
      Fp x65831 = x71 - x64780;
      Fp x65832 = x65830 * x65831;
      Fp x65833 = x71 - x64748;
      Fp x65834 = x64716 * x65833;
      Fp x65835 = x65834 * x64780;
      Fp x65836 = x65832 + x65835;
      Fp x65837 = x71 - x64716;
      Fp x65838 = x65837 * x64748;
      Fp x65839 = x65838 * x64780;
      Fp x65840 = x65836 + x65839;
      Fp x65841 = x65830 * x64780;
      Fp x65842 = x65840 + x65841;
      Fp x65843 = x64717 * x64749;
      Fp x65844 = x71 - x64781;
      Fp x65845 = x65843 * x65844;
      Fp x65846 = x71 - x64749;
      Fp x65847 = x64717 * x65846;
      Fp x65848 = x65847 * x64781;
      Fp x65849 = x65845 + x65848;
      Fp x65850 = x71 - x64717;
      Fp x65851 = x65850 * x64749;
      Fp x65852 = x65851 * x64781;
      Fp x65853 = x65849 + x65852;
      Fp x65854 = x65843 * x64781;
      Fp x65855 = x65853 + x65854;
      Fp x65856 = x64718 * x64750;
      Fp x65857 = x71 - x64782;
      Fp x65858 = x65856 * x65857;
      Fp x65859 = x71 - x64750;
      Fp x65860 = x64718 * x65859;
      Fp x65861 = x65860 * x64782;
      Fp x65862 = x65858 + x65861;
      Fp x65863 = x71 - x64718;
      Fp x65864 = x65863 * x64750;
      Fp x65865 = x65864 * x64782;
      Fp x65866 = x65862 + x65865;
      Fp x65867 = x65856 * x64782;
      Fp x65868 = x65866 + x65867;
      Fp x65869 = x64719 * x64751;
      Fp x65870 = x71 - x64783;
      Fp x65871 = x65869 * x65870;
      Fp x65872 = x71 - x64751;
      Fp x65873 = x64719 * x65872;
      Fp x65874 = x65873 * x64783;
      Fp x65875 = x65871 + x65874;
      Fp x65876 = x71 - x64719;
      Fp x65877 = x65876 * x64751;
      Fp x65878 = x65877 * x64783;
      Fp x65879 = x65875 + x65878;
      Fp x65880 = x65869 * x64783;
      Fp x65881 = x65879 + x65880;
      Fp x65882 = x64720 * x64752;
      Fp x65883 = x71 - x64784;
      Fp x65884 = x65882 * x65883;
      Fp x65885 = x71 - x64752;
      Fp x65886 = x64720 * x65885;
      Fp x65887 = x65886 * x64784;
      Fp x65888 = x65884 + x65887;
      Fp x65889 = x71 - x64720;
      Fp x65890 = x65889 * x64752;
      Fp x65891 = x65890 * x64784;
      Fp x65892 = x65888 + x65891;
      Fp x65893 = x65882 * x64784;
      Fp x65894 = x65892 + x65893;
      Fp x65895 = x64721 * x64753;
      Fp x65896 = x71 - x64785;
      Fp x65897 = x65895 * x65896;
      Fp x65898 = x71 - x64753;
      Fp x65899 = x64721 * x65898;
      Fp x65900 = x65899 * x64785;
      Fp x65901 = x65897 + x65900;
      Fp x65902 = x71 - x64721;
      Fp x65903 = x65902 * x64753;
      Fp x65904 = x65903 * x64785;
      Fp x65905 = x65901 + x65904;
      Fp x65906 = x65895 * x64785;
      Fp x65907 = x65905 + x65906;
      Fp x65908 = x64722 * x64754;
      Fp x65909 = x71 - x64786;
      Fp x65910 = x65908 * x65909;
      Fp x65911 = x71 - x64754;
      Fp x65912 = x64722 * x65911;
      Fp x65913 = x65912 * x64786;
      Fp x65914 = x65910 + x65913;
      Fp x65915 = x71 - x64722;
      Fp x65916 = x65915 * x64754;
      Fp x65917 = x65916 * x64786;
      Fp x65918 = x65914 + x65917;
      Fp x65919 = x65908 * x64786;
      Fp x65920 = x65918 + x65919;
      Fp x65921 = x64723 * x64755;
      Fp x65922 = x71 - x64787;
      Fp x65923 = x65921 * x65922;
      Fp x65924 = x71 - x64755;
      Fp x65925 = x64723 * x65924;
      Fp x65926 = x65925 * x64787;
      Fp x65927 = x65923 + x65926;
      Fp x65928 = x71 - x64723;
      Fp x65929 = x65928 * x64755;
      Fp x65930 = x65929 * x64787;
      Fp x65931 = x65927 + x65930;
      Fp x65932 = x65921 * x64787;
      Fp x65933 = x65931 + x65932;
      Fp x65934 = x64724 * x64756;
      Fp x65935 = x71 - x64788;
      Fp x65936 = x65934 * x65935;
      Fp x65937 = x71 - x64756;
      Fp x65938 = x64724 * x65937;
      Fp x65939 = x65938 * x64788;
      Fp x65940 = x65936 + x65939;
      Fp x65941 = x71 - x64724;
      Fp x65942 = x65941 * x64756;
      Fp x65943 = x65942 * x64788;
      Fp x65944 = x65940 + x65943;
      Fp x65945 = x65934 * x64788;
      Fp x65946 = x65944 + x65945;
      Fp x65947 = x64725 * x64757;
      Fp x65948 = x71 - x64789;
      Fp x65949 = x65947 * x65948;
      Fp x65950 = x71 - x64757;
      Fp x65951 = x64725 * x65950;
      Fp x65952 = x65951 * x64789;
      Fp x65953 = x65949 + x65952;
      Fp x65954 = x71 - x64725;
      Fp x65955 = x65954 * x64757;
      Fp x65956 = x65955 * x64789;
      Fp x65957 = x65953 + x65956;
      Fp x65958 = x65947 * x64789;
      Fp x65959 = x65957 + x65958;
      Fp x65960 = x64726 * x64758;
      Fp x65961 = x71 - x64790;
      Fp x65962 = x65960 * x65961;
      Fp x65963 = x71 - x64758;
      Fp x65964 = x64726 * x65963;
      Fp x65965 = x65964 * x64790;
      Fp x65966 = x65962 + x65965;
      Fp x65967 = x71 - x64726;
      Fp x65968 = x65967 * x64758;
      Fp x65969 = x65968 * x64790;
      Fp x65970 = x65966 + x65969;
      Fp x65971 = x65960 * x64790;
      Fp x65972 = x65970 + x65971;
      Fp x65973 = x64727 * x64759;
      Fp x65974 = x71 - x64791;
      Fp x65975 = x65973 * x65974;
      Fp x65976 = x71 - x64759;
      Fp x65977 = x64727 * x65976;
      Fp x65978 = x65977 * x64791;
      Fp x65979 = x65975 + x65978;
      Fp x65980 = x71 - x64727;
      Fp x65981 = x65980 * x64759;
      Fp x65982 = x65981 * x64791;
      Fp x65983 = x65979 + x65982;
      Fp x65984 = x65973 * x64791;
      Fp x65985 = x65983 + x65984;
      Fp x65986 = x64728 * x64760;
      Fp x65987 = x71 - x64792;
      Fp x65988 = x65986 * x65987;
      Fp x65989 = x71 - x64760;
      Fp x65990 = x64728 * x65989;
      Fp x65991 = x65990 * x64792;
      Fp x65992 = x65988 + x65991;
      Fp x65993 = x71 - x64728;
      Fp x65994 = x65993 * x64760;
      Fp x65995 = x65994 * x64792;
      Fp x65996 = x65992 + x65995;
      Fp x65997 = x65986 * x64792;
      Fp x65998 = x65996 + x65997;
      Fp x65999 = x64729 * x64761;
      Fp x66000 = x71 - x64793;
      Fp x66001 = x65999 * x66000;
      Fp x66002 = x71 - x64761;
      Fp x66003 = x64729 * x66002;
      Fp x66004 = x66003 * x64793;
      Fp x66005 = x66001 + x66004;
      Fp x66006 = x71 - x64729;
      Fp x66007 = x66006 * x64761;
      Fp x66008 = x66007 * x64793;
      Fp x66009 = x66005 + x66008;
      Fp x66010 = x65999 * x64793;
      Fp x66011 = x66009 + x66010;
      Fp x66012 = x64730 * x64762;
      Fp x66013 = x71 - x64794;
      Fp x66014 = x66012 * x66013;
      Fp x66015 = x71 - x64762;
      Fp x66016 = x64730 * x66015;
      Fp x66017 = x66016 * x64794;
      Fp x66018 = x66014 + x66017;
      Fp x66019 = x71 - x64730;
      Fp x66020 = x66019 * x64762;
      Fp x66021 = x66020 * x64794;
      Fp x66022 = x66018 + x66021;
      Fp x66023 = x66012 * x64794;
      Fp x66024 = x66022 + x66023;
      Fp x66025 = x64731 * x64763;
      Fp x66026 = x71 - x64795;
      Fp x66027 = x66025 * x66026;
      Fp x66028 = x71 - x64763;
      Fp x66029 = x64731 * x66028;
      Fp x66030 = x66029 * x64795;
      Fp x66031 = x66027 + x66030;
      Fp x66032 = x71 - x64731;
      Fp x66033 = x66032 * x64763;
      Fp x66034 = x66033 * x64795;
      Fp x66035 = x66031 + x66034;
      Fp x66036 = x66025 * x64795;
      Fp x66037 = x66035 + x66036;
      Fp x66038 = x64732 * x64764;
      Fp x66039 = x71 - x64796;
      Fp x66040 = x66038 * x66039;
      Fp x66041 = x71 - x64764;
      Fp x66042 = x64732 * x66041;
      Fp x66043 = x66042 * x64796;
      Fp x66044 = x66040 + x66043;
      Fp x66045 = x71 - x64732;
      Fp x66046 = x66045 * x64764;
      Fp x66047 = x66046 * x64796;
      Fp x66048 = x66044 + x66047;
      Fp x66049 = x66038 * x64796;
      Fp x66050 = x66048 + x66049;
      Fp x66051 = x64733 * x64765;
      Fp x66052 = x71 - x64797;
      Fp x66053 = x66051 * x66052;
      Fp x66054 = x71 - x64765;
      Fp x66055 = x64733 * x66054;
      Fp x66056 = x66055 * x64797;
      Fp x66057 = x66053 + x66056;
      Fp x66058 = x71 - x64733;
      Fp x66059 = x66058 * x64765;
      Fp x66060 = x66059 * x64797;
      Fp x66061 = x66057 + x66060;
      Fp x66062 = x66051 * x64797;
      Fp x66063 = x66061 + x66062;
      Fp x66064 = x64734 * x64766;
      Fp x66065 = x71 - x64798;
      Fp x66066 = x66064 * x66065;
      Fp x66067 = x71 - x64766;
      Fp x66068 = x64734 * x66067;
      Fp x66069 = x66068 * x64798;
      Fp x66070 = x66066 + x66069;
      Fp x66071 = x71 - x64734;
      Fp x66072 = x66071 * x64766;
      Fp x66073 = x66072 * x64798;
      Fp x66074 = x66070 + x66073;
      Fp x66075 = x66064 * x64798;
      Fp x66076 = x66074 + x66075;
      Fp x66077 = x64735 * x64767;
      Fp x66078 = x71 - x64799;
      Fp x66079 = x66077 * x66078;
      Fp x66080 = x71 - x64767;
      Fp x66081 = x64735 * x66080;
      Fp x66082 = x66081 * x64799;
      Fp x66083 = x66079 + x66082;
      Fp x66084 = x71 - x64735;
      Fp x66085 = x66084 * x64767;
      Fp x66086 = x66085 * x64799;
      Fp x66087 = x66083 + x66086;
      Fp x66088 = x66077 * x64799;
      Fp x66089 = x66087 + x66088;
      Fp x66090 = x64736 * x64768;
      Fp x66091 = x71 - x64800;
      Fp x66092 = x66090 * x66091;
      Fp x66093 = x71 - x64768;
      Fp x66094 = x64736 * x66093;
      Fp x66095 = x66094 * x64800;
      Fp x66096 = x66092 + x66095;
      Fp x66097 = x71 - x64736;
      Fp x66098 = x66097 * x64768;
      Fp x66099 = x66098 * x64800;
      Fp x66100 = x66096 + x66099;
      Fp x66101 = x66090 * x64800;
      Fp x66102 = x66100 + x66101;
      Fp x66103 = x64737 * x64769;
      Fp x66104 = x71 - x64801;
      Fp x66105 = x66103 * x66104;
      Fp x66106 = x71 - x64769;
      Fp x66107 = x64737 * x66106;
      Fp x66108 = x66107 * x64801;
      Fp x66109 = x66105 + x66108;
      Fp x66110 = x71 - x64737;
      Fp x66111 = x66110 * x64769;
      Fp x66112 = x66111 * x64801;
      Fp x66113 = x66109 + x66112;
      Fp x66114 = x66103 * x64801;
      Fp x66115 = x66113 + x66114;
      Fp x66116 = x64738 * x64770;
      Fp x66117 = x71 - x64802;
      Fp x66118 = x66116 * x66117;
      Fp x66119 = x71 - x64770;
      Fp x66120 = x64738 * x66119;
      Fp x66121 = x66120 * x64802;
      Fp x66122 = x66118 + x66121;
      Fp x66123 = x71 - x64738;
      Fp x66124 = x66123 * x64770;
      Fp x66125 = x66124 * x64802;
      Fp x66126 = x66122 + x66125;
      Fp x66127 = x66116 * x64802;
      Fp x66128 = x66126 + x66127;
      Fp x66129 = x64739 * x64771;
      Fp x66130 = x71 - x64803;
      Fp x66131 = x66129 * x66130;
      Fp x66132 = x71 - x64771;
      Fp x66133 = x64739 * x66132;
      Fp x66134 = x66133 * x64803;
      Fp x66135 = x66131 + x66134;
      Fp x66136 = x71 - x64739;
      Fp x66137 = x66136 * x64771;
      Fp x66138 = x66137 * x64803;
      Fp x66139 = x66135 + x66138;
      Fp x66140 = x66129 * x64803;
      Fp x66141 = x66139 + x66140;
      Fp x66142 = x64740 * x64772;
      Fp x66143 = x71 - x64804;
      Fp x66144 = x66142 * x66143;
      Fp x66145 = x71 - x64772;
      Fp x66146 = x64740 * x66145;
      Fp x66147 = x66146 * x64804;
      Fp x66148 = x66144 + x66147;
      Fp x66149 = x71 - x64740;
      Fp x66150 = x66149 * x64772;
      Fp x66151 = x66150 * x64804;
      Fp x66152 = x66148 + x66151;
      Fp x66153 = x66142 * x64804;
      Fp x66154 = x66152 + x66153;
      Fp x66155 = x64741 * x64773;
      Fp x66156 = x71 - x64805;
      Fp x66157 = x66155 * x66156;
      Fp x66158 = x71 - x64773;
      Fp x66159 = x64741 * x66158;
      Fp x66160 = x66159 * x64805;
      Fp x66161 = x66157 + x66160;
      Fp x66162 = x71 - x64741;
      Fp x66163 = x66162 * x64773;
      Fp x66164 = x66163 * x64805;
      Fp x66165 = x66161 + x66164;
      Fp x66166 = x66155 * x64805;
      Fp x66167 = x66165 + x66166;
      Fp x66168 = x64742 * x64774;
      Fp x66169 = x71 - x64806;
      Fp x66170 = x66168 * x66169;
      Fp x66171 = x71 - x64774;
      Fp x66172 = x64742 * x66171;
      Fp x66173 = x66172 * x64806;
      Fp x66174 = x66170 + x66173;
      Fp x66175 = x71 - x64742;
      Fp x66176 = x66175 * x64774;
      Fp x66177 = x66176 * x64806;
      Fp x66178 = x66174 + x66177;
      Fp x66179 = x66168 * x64806;
      Fp x66180 = x66178 + x66179;
      Fp x66181 = x64743 * x64775;
      Fp x66182 = x71 - x64807;
      Fp x66183 = x66181 * x66182;
      Fp x66184 = x71 - x64775;
      Fp x66185 = x64743 * x66184;
      Fp x66186 = x66185 * x64807;
      Fp x66187 = x66183 + x66186;
      Fp x66188 = x71 - x64743;
      Fp x66189 = x66188 * x64775;
      Fp x66190 = x66189 * x64807;
      Fp x66191 = x66187 + x66190;
      Fp x66192 = x66181 * x64807;
      Fp x66193 = x66191 + x66192;
      Fp x66194 = x64744 * x64776;
      Fp x66195 = x71 - x64808;
      Fp x66196 = x66194 * x66195;
      Fp x66197 = x71 - x64776;
      Fp x66198 = x64744 * x66197;
      Fp x66199 = x66198 * x64808;
      Fp x66200 = x66196 + x66199;
      Fp x66201 = x71 - x64744;
      Fp x66202 = x66201 * x64776;
      Fp x66203 = x66202 * x64808;
      Fp x66204 = x66200 + x66203;
      Fp x66205 = x66194 * x64808;
      Fp x66206 = x66204 + x66205;
      Fp x66207 = x64745 * x64777;
      Fp x66208 = x71 - x64809;
      Fp x66209 = x66207 * x66208;
      Fp x66210 = x71 - x64777;
      Fp x66211 = x64745 * x66210;
      Fp x66212 = x66211 * x64809;
      Fp x66213 = x66209 + x66212;
      Fp x66214 = x71 - x64745;
      Fp x66215 = x66214 * x64777;
      Fp x66216 = x66215 * x64809;
      Fp x66217 = x66213 + x66216;
      Fp x66218 = x66207 * x64809;
      Fp x66219 = x66217 + x66218;
      Fp x66220 = x64746 * x64778;
      Fp x66221 = x71 - x64810;
      Fp x66222 = x66220 * x66221;
      Fp x66223 = x71 - x64778;
      Fp x66224 = x64746 * x66223;
      Fp x66225 = x66224 * x64810;
      Fp x66226 = x66222 + x66225;
      Fp x66227 = x71 - x64746;
      Fp x66228 = x66227 * x64778;
      Fp x66229 = x66228 * x64810;
      Fp x66230 = x66226 + x66229;
      Fp x66231 = x66220 * x64810;
      Fp x66232 = x66230 + x66231;
      Fp x66233 = x64747 * x64779;
      Fp x66234 = x71 - x64811;
      Fp x66235 = x66233 * x66234;
      Fp x66236 = x71 - x64779;
      Fp x66237 = x64747 * x66236;
      Fp x66238 = x66237 * x64811;
      Fp x66239 = x66235 + x66238;
      Fp x66240 = x71 - x64747;
      Fp x66241 = x66240 * x64779;
      Fp x66242 = x66241 * x64811;
      Fp x66243 = x66239 + x66242;
      Fp x66244 = x66233 * x64811;
      Fp x66245 = x66243 + x66244;
      Fp x66246 = x65855 * x1;
      Fp x66247 = x65842 + x66246;
      Fp x66248 = x65868 * x3;
      Fp x66249 = x66247 + x66248;
      Fp x66250 = x65881 * x6;
      Fp x66251 = x66249 + x66250;
      Fp x66252 = x65894 * x11;
      Fp x66253 = x66251 + x66252;
      Fp x66254 = x65907 * x27;
      Fp x66255 = x66253 + x66254;
      Fp x66256 = x65920 * x12;
      Fp x66257 = x66255 + x66256;
      Fp x66258 = x65933 * x28;
      Fp x66259 = x66257 + x66258;
      Fp x66260 = x65946 * x13;
      Fp x66261 = x66259 + x66260;
      Fp x66262 = x65959 * x29;
      Fp x66263 = x66261 + x66262;
      Fp x66264 = x65972 * x14;
      Fp x66265 = x66263 + x66264;
      Fp x66266 = x65985 * x30;
      Fp x66267 = x66265 + x66266;
      Fp x66268 = x65998 * x15;
      Fp x66269 = x66267 + x66268;
      Fp x66270 = x66011 * x31;
      Fp x66271 = x66269 + x66270;
      Fp x66272 = x66024 * x16;
      Fp x66273 = x66271 + x66272;
      Fp x66274 = x66037 * x32;
      Fp x66275 = x66273 + x66274;
      Fp x66276 = x66063 * x1;
      Fp x66277 = x66050 + x66276;
      Fp x66278 = x66076 * x3;
      Fp x66279 = x66277 + x66278;
      Fp x66280 = x66089 * x6;
      Fp x66281 = x66279 + x66280;
      Fp x66282 = x66102 * x11;
      Fp x66283 = x66281 + x66282;
      Fp x66284 = x66115 * x27;
      Fp x66285 = x66283 + x66284;
      Fp x66286 = x66128 * x12;
      Fp x66287 = x66285 + x66286;
      Fp x66288 = x66141 * x28;
      Fp x66289 = x66287 + x66288;
      Fp x66290 = x66154 * x13;
      Fp x66291 = x66289 + x66290;
      Fp x66292 = x66167 * x29;
      Fp x66293 = x66291 + x66292;
      Fp x66294 = x66180 * x14;
      Fp x66295 = x66293 + x66294;
      Fp x66296 = x66193 * x30;
      Fp x66297 = x66295 + x66296;
      Fp x66298 = x66206 * x15;
      Fp x66299 = x66297 + x66298;
      Fp x66300 = x66219 * x31;
      Fp x66301 = x66299 + x66300;
      Fp x66302 = x66232 * x16;
      Fp x66303 = x66301 + x66302;
      Fp x66304 = x66245 * x32;
      Fp x66305 = x66303 + x66304;
      Fp x66306 = x65828 + x66275;
      Fp x66307 = x65829 + x66305;
      Fp x66308 = x65107 * x1;
      Fp x66309 = x65104 + x66308;
      Fp x66310 = x65110 * x3;
      Fp x66311 = x66309 + x66310;
      Fp x66312 = x65113 * x6;
      Fp x66313 = x66311 + x66312;
      Fp x66314 = x65116 * x11;
      Fp x66315 = x66313 + x66314;
      Fp x66316 = x65119 * x27;
      Fp x66317 = x66315 + x66316;
      Fp x66318 = x65122 * x12;
      Fp x66319 = x66317 + x66318;
      Fp x66320 = x65125 * x28;
      Fp x66321 = x66319 + x66320;
      Fp x66322 = x65128 * x13;
      Fp x66323 = x66321 + x66322;
      Fp x66324 = x65131 * x29;
      Fp x66325 = x66323 + x66324;
      Fp x66326 = x65134 * x14;
      Fp x66327 = x66325 + x66326;
      Fp x66328 = x65137 * x30;
      Fp x66329 = x66327 + x66328;
      Fp x66330 = x65140 * x15;
      Fp x66331 = x66329 + x66330;
      Fp x66332 = x65143 * x31;
      Fp x66333 = x66331 + x66332;
      Fp x66334 = x65146 * x16;
      Fp x66335 = x66333 + x66334;
      Fp x66336 = x65149 * x32;
      Fp x66337 = x66335 + x66336;
      Fp x66338 = x65155 * x1;
      Fp x66339 = x65152 + x66338;
      Fp x66340 = x65158 * x3;
      Fp x66341 = x66339 + x66340;
      Fp x66342 = x65161 * x6;
      Fp x66343 = x66341 + x66342;
      Fp x66344 = x65164 * x11;
      Fp x66345 = x66343 + x66344;
      Fp x66346 = x65167 * x27;
      Fp x66347 = x66345 + x66346;
      Fp x66348 = x65170 * x12;
      Fp x66349 = x66347 + x66348;
      Fp x66350 = x65173 * x28;
      Fp x66351 = x66349 + x66350;
      Fp x66352 = x65176 * x13;
      Fp x66353 = x66351 + x66352;
      Fp x66354 = x65179 * x29;
      Fp x66355 = x66353 + x66354;
      Fp x66356 = x65182 * x14;
      Fp x66357 = x66355 + x66356;
      Fp x66358 = x65185 * x30;
      Fp x66359 = x66357 + x66358;
      Fp x66360 = x65188 * x15;
      Fp x66361 = x66359 + x66360;
      Fp x66362 = x65191 * x31;
      Fp x66363 = x66361 + x66362;
      Fp x66364 = x65194 * x16;
      Fp x66365 = x66363 + x66364;
      Fp x66366 = x65197 * x32;
      Fp x66367 = x66365 + x66366;
      Fp x66368 = x66306 + x66337;
      Fp x66369 = x66307 + x66367;
      args[2][116 * steps + cycle] = x66368;
      args[2][117 * steps + cycle] = x66369;
      Fp x66370 = x64813 * x1;
      Fp x66371 = x64812 + x66370;
      Fp x66372 = x64814 * x3;
      Fp x66373 = x66371 + x66372;
      Fp x66374 = x64815 * x6;
      Fp x66375 = x66373 + x66374;
      Fp x66376 = x64816 * x11;
      Fp x66377 = x66375 + x66376;
      Fp x66378 = x64817 * x27;
      Fp x66379 = x66377 + x66378;
      Fp x66380 = x64818 * x12;
      Fp x66381 = x66379 + x66380;
      Fp x66382 = x64819 * x28;
      Fp x66383 = x66381 + x66382;
      Fp x66384 = x64820 * x13;
      Fp x66385 = x66383 + x66384;
      Fp x66386 = x64821 * x29;
      Fp x66387 = x66385 + x66386;
      Fp x66388 = x64822 * x14;
      Fp x66389 = x66387 + x66388;
      Fp x66390 = x64823 * x30;
      Fp x66391 = x66389 + x66390;
      Fp x66392 = x64824 * x15;
      Fp x66393 = x66391 + x66392;
      Fp x66394 = x64825 * x31;
      Fp x66395 = x66393 + x66394;
      Fp x66396 = x64826 * x16;
      Fp x66397 = x66395 + x66396;
      Fp x66398 = x64827 * x32;
      Fp x66399 = x66397 + x66398;
      Fp x66400 = x64829 * x1;
      Fp x66401 = x64828 + x66400;
      Fp x66402 = x64830 * x3;
      Fp x66403 = x66401 + x66402;
      Fp x66404 = x64831 * x6;
      Fp x66405 = x66403 + x66404;
      Fp x66406 = x64832 * x11;
      Fp x66407 = x66405 + x66406;
      Fp x66408 = x64833 * x27;
      Fp x66409 = x66407 + x66408;
      Fp x66410 = x64834 * x12;
      Fp x66411 = x66409 + x66410;
      Fp x66412 = x64835 * x28;
      Fp x66413 = x66411 + x66412;
      Fp x66414 = x64836 * x13;
      Fp x66415 = x66413 + x66414;
      Fp x66416 = x64837 * x29;
      Fp x66417 = x66415 + x66416;
      Fp x66418 = x64838 * x14;
      Fp x66419 = x66417 + x66418;
      Fp x66420 = x64839 * x30;
      Fp x66421 = x66419 + x66420;
      Fp x66422 = x64840 * x15;
      Fp x66423 = x66421 + x66422;
      Fp x66424 = x64841 * x31;
      Fp x66425 = x66423 + x66424;
      Fp x66426 = x64842 * x16;
      Fp x66427 = x66425 + x66426;
      Fp x66428 = x64843 * x32;
      Fp x66429 = x66427 + x66428;
      Fp x66430 = x65828 + x66399;
      Fp x66431 = x65829 + x66429;
      args[2][118 * steps + cycle] = x66430;
      args[2][119 * steps + cycle] = x66431;
      Fp x66432 = args[2][116 * steps + ((cycle - 0) & mask)];
      Fp x66433 = args[2][117 * steps + ((cycle - 0) & mask)];
      {
        Fp x66434 = Fp(x66432.asUInt32() & x71.asUInt32());
        args[2][0 * steps + cycle] = x66434;
        Fp x66435 = x66432 - x66434;
        Fp x66436 = x66435 * x26;
        Fp x66437 = Fp(x66436.asUInt32() & x71.asUInt32());
        args[2][1 * steps + cycle] = x66437;
        Fp x66438 = x66436 - x66437;
        Fp x66439 = x66438 * x26;
        Fp x66440 = Fp(x66439.asUInt32() & x71.asUInt32());
        args[2][2 * steps + cycle] = x66440;
        Fp x66441 = x66439 - x66440;
        Fp x66442 = x66441 * x26;
        Fp x66443 = Fp(x66442.asUInt32() & x71.asUInt32());
        args[2][3 * steps + cycle] = x66443;
        Fp x66444 = x66442 - x66443;
        Fp x66445 = x66444 * x26;
        Fp x66446 = Fp(x66445.asUInt32() & x71.asUInt32());
        args[2][4 * steps + cycle] = x66446;
        Fp x66447 = x66445 - x66446;
        Fp x66448 = x66447 * x26;
        Fp x66449 = Fp(x66448.asUInt32() & x71.asUInt32());
        args[2][5 * steps + cycle] = x66449;
        Fp x66450 = x66448 - x66449;
        Fp x66451 = x66450 * x26;
        Fp x66452 = Fp(x66451.asUInt32() & x71.asUInt32());
        args[2][6 * steps + cycle] = x66452;
        Fp x66453 = x66451 - x66452;
        Fp x66454 = x66453 * x26;
        Fp x66455 = Fp(x66454.asUInt32() & x71.asUInt32());
        args[2][7 * steps + cycle] = x66455;
        Fp x66456 = x66454 - x66455;
        Fp x66457 = x66456 * x26;
        Fp x66458 = Fp(x66457.asUInt32() & x71.asUInt32());
        args[2][8 * steps + cycle] = x66458;
        Fp x66459 = x66457 - x66458;
        Fp x66460 = x66459 * x26;
        Fp x66461 = Fp(x66460.asUInt32() & x71.asUInt32());
        args[2][9 * steps + cycle] = x66461;
        Fp x66462 = x66460 - x66461;
        Fp x66463 = x66462 * x26;
        Fp x66464 = Fp(x66463.asUInt32() & x71.asUInt32());
        args[2][10 * steps + cycle] = x66464;
        Fp x66465 = x66463 - x66464;
        Fp x66466 = x66465 * x26;
        Fp x66467 = Fp(x66466.asUInt32() & x71.asUInt32());
        args[2][11 * steps + cycle] = x66467;
        Fp x66468 = x66466 - x66467;
        Fp x66469 = x66468 * x26;
        Fp x66470 = Fp(x66469.asUInt32() & x71.asUInt32());
        args[2][12 * steps + cycle] = x66470;
        Fp x66471 = x66469 - x66470;
        Fp x66472 = x66471 * x26;
        Fp x66473 = Fp(x66472.asUInt32() & x71.asUInt32());
        args[2][13 * steps + cycle] = x66473;
        Fp x66474 = x66472 - x66473;
        Fp x66475 = x66474 * x26;
        Fp x66476 = Fp(x66475.asUInt32() & x71.asUInt32());
        args[2][14 * steps + cycle] = x66476;
        Fp x66477 = x66475 - x66476;
        Fp x66478 = x66477 * x26;
        Fp x66479 = Fp(x66478.asUInt32() & x71.asUInt32());
        args[2][15 * steps + cycle] = x66479;
      }
      Fp x66480 = args[2][0 * steps + ((cycle - 0) & mask)];
      Fp x66481 = args[2][1 * steps + ((cycle - 0) & mask)];
      Fp x66482 = x66481 * x1;
      Fp x66483 = x66480 + x66482;
      Fp x66484 = args[2][2 * steps + ((cycle - 0) & mask)];
      Fp x66485 = x66484 * x3;
      Fp x66486 = x66483 + x66485;
      Fp x66487 = args[2][3 * steps + ((cycle - 0) & mask)];
      Fp x66488 = x66487 * x6;
      Fp x66489 = x66486 + x66488;
      Fp x66490 = args[2][4 * steps + ((cycle - 0) & mask)];
      Fp x66491 = x66490 * x11;
      Fp x66492 = x66489 + x66491;
      Fp x66493 = args[2][5 * steps + ((cycle - 0) & mask)];
      Fp x66494 = x66493 * x27;
      Fp x66495 = x66492 + x66494;
      Fp x66496 = args[2][6 * steps + ((cycle - 0) & mask)];
      Fp x66497 = x66496 * x12;
      Fp x66498 = x66495 + x66497;
      Fp x66499 = args[2][7 * steps + ((cycle - 0) & mask)];
      Fp x66500 = x66499 * x28;
      Fp x66501 = x66498 + x66500;
      Fp x66502 = args[2][8 * steps + ((cycle - 0) & mask)];
      Fp x66503 = x66502 * x13;
      Fp x66504 = x66501 + x66503;
      Fp x66505 = args[2][9 * steps + ((cycle - 0) & mask)];
      Fp x66506 = x66505 * x29;
      Fp x66507 = x66504 + x66506;
      Fp x66508 = args[2][10 * steps + ((cycle - 0) & mask)];
      Fp x66509 = x66508 * x14;
      Fp x66510 = x66507 + x66509;
      Fp x66511 = args[2][11 * steps + ((cycle - 0) & mask)];
      Fp x66512 = x66511 * x30;
      Fp x66513 = x66510 + x66512;
      Fp x66514 = args[2][12 * steps + ((cycle - 0) & mask)];
      Fp x66515 = x66514 * x15;
      Fp x66516 = x66513 + x66515;
      Fp x66517 = args[2][13 * steps + ((cycle - 0) & mask)];
      Fp x66518 = x66517 * x31;
      Fp x66519 = x66516 + x66518;
      Fp x66520 = args[2][14 * steps + ((cycle - 0) & mask)];
      Fp x66521 = x66520 * x16;
      Fp x66522 = x66519 + x66521;
      Fp x66523 = args[2][15 * steps + ((cycle - 0) & mask)];
      Fp x66524 = x66523 * x32;
      Fp x66525 = x66522 + x66524;
      Fp x66526 = x66432 - x66525;
      Fp x66527 = x66526 * x33;
      {
        Fp x66528 = Fp(x66527.asUInt32() & x71.asUInt32());
        args[2][100 * steps + cycle] = x66528;
        Fp x66529 = x66527 - x66528;
        Fp x66530 = x66529 * x26;
        Fp x66531 = Fp(x66530.asUInt32() & x71.asUInt32());
        args[2][101 * steps + cycle] = x66531;
        Fp x66532 = x66530 - x66531;
        Fp x66533 = x66532 * x26;
        Fp x66534 = Fp(x66533.asUInt32() & x71.asUInt32());
        args[2][102 * steps + cycle] = x66534;
      }
      Fp x66535 = args[2][100 * steps + ((cycle - 0) & mask)];
      Fp x66536 = args[2][101 * steps + ((cycle - 0) & mask)];
      Fp x66537 = x66536 * x1;
      Fp x66538 = x66535 + x66537;
      Fp x66539 = args[2][102 * steps + ((cycle - 0) & mask)];
      Fp x66540 = x66539 * x3;
      Fp x66541 = x66538 + x66540;
      Fp x66542 = x66527 - x66541;
      Fp x66543 = x66542 * x69;
      if (x66543 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:140");
      Fp x66544 = x66433 + x66541;
      {
        Fp x66545 = Fp(x66544.asUInt32() & x71.asUInt32());
        args[2][16 * steps + cycle] = x66545;
        Fp x66546 = x66544 - x66545;
        Fp x66547 = x66546 * x26;
        Fp x66548 = Fp(x66547.asUInt32() & x71.asUInt32());
        args[2][17 * steps + cycle] = x66548;
        Fp x66549 = x66547 - x66548;
        Fp x66550 = x66549 * x26;
        Fp x66551 = Fp(x66550.asUInt32() & x71.asUInt32());
        args[2][18 * steps + cycle] = x66551;
        Fp x66552 = x66550 - x66551;
        Fp x66553 = x66552 * x26;
        Fp x66554 = Fp(x66553.asUInt32() & x71.asUInt32());
        args[2][19 * steps + cycle] = x66554;
        Fp x66555 = x66553 - x66554;
        Fp x66556 = x66555 * x26;
        Fp x66557 = Fp(x66556.asUInt32() & x71.asUInt32());
        args[2][20 * steps + cycle] = x66557;
        Fp x66558 = x66556 - x66557;
        Fp x66559 = x66558 * x26;
        Fp x66560 = Fp(x66559.asUInt32() & x71.asUInt32());
        args[2][21 * steps + cycle] = x66560;
        Fp x66561 = x66559 - x66560;
        Fp x66562 = x66561 * x26;
        Fp x66563 = Fp(x66562.asUInt32() & x71.asUInt32());
        args[2][22 * steps + cycle] = x66563;
        Fp x66564 = x66562 - x66563;
        Fp x66565 = x66564 * x26;
        Fp x66566 = Fp(x66565.asUInt32() & x71.asUInt32());
        args[2][23 * steps + cycle] = x66566;
        Fp x66567 = x66565 - x66566;
        Fp x66568 = x66567 * x26;
        Fp x66569 = Fp(x66568.asUInt32() & x71.asUInt32());
        args[2][24 * steps + cycle] = x66569;
        Fp x66570 = x66568 - x66569;
        Fp x66571 = x66570 * x26;
        Fp x66572 = Fp(x66571.asUInt32() & x71.asUInt32());
        args[2][25 * steps + cycle] = x66572;
        Fp x66573 = x66571 - x66572;
        Fp x66574 = x66573 * x26;
        Fp x66575 = Fp(x66574.asUInt32() & x71.asUInt32());
        args[2][26 * steps + cycle] = x66575;
        Fp x66576 = x66574 - x66575;
        Fp x66577 = x66576 * x26;
        Fp x66578 = Fp(x66577.asUInt32() & x71.asUInt32());
        args[2][27 * steps + cycle] = x66578;
        Fp x66579 = x66577 - x66578;
        Fp x66580 = x66579 * x26;
        Fp x66581 = Fp(x66580.asUInt32() & x71.asUInt32());
        args[2][28 * steps + cycle] = x66581;
        Fp x66582 = x66580 - x66581;
        Fp x66583 = x66582 * x26;
        Fp x66584 = Fp(x66583.asUInt32() & x71.asUInt32());
        args[2][29 * steps + cycle] = x66584;
        Fp x66585 = x66583 - x66584;
        Fp x66586 = x66585 * x26;
        Fp x66587 = Fp(x66586.asUInt32() & x71.asUInt32());
        args[2][30 * steps + cycle] = x66587;
        Fp x66588 = x66586 - x66587;
        Fp x66589 = x66588 * x26;
        Fp x66590 = Fp(x66589.asUInt32() & x71.asUInt32());
        args[2][31 * steps + cycle] = x66590;
      }
      Fp x66591 = args[2][16 * steps + ((cycle - 0) & mask)];
      Fp x66592 = args[2][17 * steps + ((cycle - 0) & mask)];
      Fp x66593 = x66592 * x1;
      Fp x66594 = x66591 + x66593;
      Fp x66595 = args[2][18 * steps + ((cycle - 0) & mask)];
      Fp x66596 = x66595 * x3;
      Fp x66597 = x66594 + x66596;
      Fp x66598 = args[2][19 * steps + ((cycle - 0) & mask)];
      Fp x66599 = x66598 * x6;
      Fp x66600 = x66597 + x66599;
      Fp x66601 = args[2][20 * steps + ((cycle - 0) & mask)];
      Fp x66602 = x66601 * x11;
      Fp x66603 = x66600 + x66602;
      Fp x66604 = args[2][21 * steps + ((cycle - 0) & mask)];
      Fp x66605 = x66604 * x27;
      Fp x66606 = x66603 + x66605;
      Fp x66607 = args[2][22 * steps + ((cycle - 0) & mask)];
      Fp x66608 = x66607 * x12;
      Fp x66609 = x66606 + x66608;
      Fp x66610 = args[2][23 * steps + ((cycle - 0) & mask)];
      Fp x66611 = x66610 * x28;
      Fp x66612 = x66609 + x66611;
      Fp x66613 = args[2][24 * steps + ((cycle - 0) & mask)];
      Fp x66614 = x66613 * x13;
      Fp x66615 = x66612 + x66614;
      Fp x66616 = args[2][25 * steps + ((cycle - 0) & mask)];
      Fp x66617 = x66616 * x29;
      Fp x66618 = x66615 + x66617;
      Fp x66619 = args[2][26 * steps + ((cycle - 0) & mask)];
      Fp x66620 = x66619 * x14;
      Fp x66621 = x66618 + x66620;
      Fp x66622 = args[2][27 * steps + ((cycle - 0) & mask)];
      Fp x66623 = x66622 * x30;
      Fp x66624 = x66621 + x66623;
      Fp x66625 = args[2][28 * steps + ((cycle - 0) & mask)];
      Fp x66626 = x66625 * x15;
      Fp x66627 = x66624 + x66626;
      Fp x66628 = args[2][29 * steps + ((cycle - 0) & mask)];
      Fp x66629 = x66628 * x31;
      Fp x66630 = x66627 + x66629;
      Fp x66631 = args[2][30 * steps + ((cycle - 0) & mask)];
      Fp x66632 = x66631 * x16;
      Fp x66633 = x66630 + x66632;
      Fp x66634 = args[2][31 * steps + ((cycle - 0) & mask)];
      Fp x66635 = x66634 * x32;
      Fp x66636 = x66633 + x66635;
      Fp x66637 = x66544 - x66636;
      Fp x66638 = x66637 * x33;
      {
        Fp x66639 = Fp(x66638.asUInt32() & x71.asUInt32());
        args[2][103 * steps + cycle] = x66639;
        Fp x66640 = x66638 - x66639;
        Fp x66641 = x66640 * x26;
        Fp x66642 = Fp(x66641.asUInt32() & x71.asUInt32());
        args[2][104 * steps + cycle] = x66642;
        Fp x66643 = x66641 - x66642;
        Fp x66644 = x66643 * x26;
        Fp x66645 = Fp(x66644.asUInt32() & x71.asUInt32());
        args[2][105 * steps + cycle] = x66645;
      }
      Fp x66646 = args[2][103 * steps + ((cycle - 0) & mask)];
      Fp x66647 = args[2][104 * steps + ((cycle - 0) & mask)];
      Fp x66648 = x66647 * x1;
      Fp x66649 = x66646 + x66648;
      Fp x66650 = args[2][105 * steps + ((cycle - 0) & mask)];
      Fp x66651 = x66650 * x3;
      Fp x66652 = x66649 + x66651;
      Fp x66653 = x66638 - x66652;
      Fp x66654 = x66653 * x69;
      if (x66654 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:141");
      Fp x66655 = args[2][118 * steps + ((cycle - 0) & mask)];
      Fp x66656 = args[2][119 * steps + ((cycle - 0) & mask)];
      {
        Fp x66657 = Fp(x66655.asUInt32() & x71.asUInt32());
        args[2][32 * steps + cycle] = x66657;
        Fp x66658 = x66655 - x66657;
        Fp x66659 = x66658 * x26;
        Fp x66660 = Fp(x66659.asUInt32() & x71.asUInt32());
        args[2][33 * steps + cycle] = x66660;
        Fp x66661 = x66659 - x66660;
        Fp x66662 = x66661 * x26;
        Fp x66663 = Fp(x66662.asUInt32() & x71.asUInt32());
        args[2][34 * steps + cycle] = x66663;
        Fp x66664 = x66662 - x66663;
        Fp x66665 = x66664 * x26;
        Fp x66666 = Fp(x66665.asUInt32() & x71.asUInt32());
        args[2][35 * steps + cycle] = x66666;
        Fp x66667 = x66665 - x66666;
        Fp x66668 = x66667 * x26;
        Fp x66669 = Fp(x66668.asUInt32() & x71.asUInt32());
        args[2][36 * steps + cycle] = x66669;
        Fp x66670 = x66668 - x66669;
        Fp x66671 = x66670 * x26;
        Fp x66672 = Fp(x66671.asUInt32() & x71.asUInt32());
        args[2][37 * steps + cycle] = x66672;
        Fp x66673 = x66671 - x66672;
        Fp x66674 = x66673 * x26;
        Fp x66675 = Fp(x66674.asUInt32() & x71.asUInt32());
        args[2][38 * steps + cycle] = x66675;
        Fp x66676 = x66674 - x66675;
        Fp x66677 = x66676 * x26;
        Fp x66678 = Fp(x66677.asUInt32() & x71.asUInt32());
        args[2][39 * steps + cycle] = x66678;
        Fp x66679 = x66677 - x66678;
        Fp x66680 = x66679 * x26;
        Fp x66681 = Fp(x66680.asUInt32() & x71.asUInt32());
        args[2][40 * steps + cycle] = x66681;
        Fp x66682 = x66680 - x66681;
        Fp x66683 = x66682 * x26;
        Fp x66684 = Fp(x66683.asUInt32() & x71.asUInt32());
        args[2][41 * steps + cycle] = x66684;
        Fp x66685 = x66683 - x66684;
        Fp x66686 = x66685 * x26;
        Fp x66687 = Fp(x66686.asUInt32() & x71.asUInt32());
        args[2][42 * steps + cycle] = x66687;
        Fp x66688 = x66686 - x66687;
        Fp x66689 = x66688 * x26;
        Fp x66690 = Fp(x66689.asUInt32() & x71.asUInt32());
        args[2][43 * steps + cycle] = x66690;
        Fp x66691 = x66689 - x66690;
        Fp x66692 = x66691 * x26;
        Fp x66693 = Fp(x66692.asUInt32() & x71.asUInt32());
        args[2][44 * steps + cycle] = x66693;
        Fp x66694 = x66692 - x66693;
        Fp x66695 = x66694 * x26;
        Fp x66696 = Fp(x66695.asUInt32() & x71.asUInt32());
        args[2][45 * steps + cycle] = x66696;
        Fp x66697 = x66695 - x66696;
        Fp x66698 = x66697 * x26;
        Fp x66699 = Fp(x66698.asUInt32() & x71.asUInt32());
        args[2][46 * steps + cycle] = x66699;
        Fp x66700 = x66698 - x66699;
        Fp x66701 = x66700 * x26;
        Fp x66702 = Fp(x66701.asUInt32() & x71.asUInt32());
        args[2][47 * steps + cycle] = x66702;
      }
      Fp x66703 = args[2][32 * steps + ((cycle - 0) & mask)];
      Fp x66704 = args[2][33 * steps + ((cycle - 0) & mask)];
      Fp x66705 = x66704 * x1;
      Fp x66706 = x66703 + x66705;
      Fp x66707 = args[2][34 * steps + ((cycle - 0) & mask)];
      Fp x66708 = x66707 * x3;
      Fp x66709 = x66706 + x66708;
      Fp x66710 = args[2][35 * steps + ((cycle - 0) & mask)];
      Fp x66711 = x66710 * x6;
      Fp x66712 = x66709 + x66711;
      Fp x66713 = args[2][36 * steps + ((cycle - 0) & mask)];
      Fp x66714 = x66713 * x11;
      Fp x66715 = x66712 + x66714;
      Fp x66716 = args[2][37 * steps + ((cycle - 0) & mask)];
      Fp x66717 = x66716 * x27;
      Fp x66718 = x66715 + x66717;
      Fp x66719 = args[2][38 * steps + ((cycle - 0) & mask)];
      Fp x66720 = x66719 * x12;
      Fp x66721 = x66718 + x66720;
      Fp x66722 = args[2][39 * steps + ((cycle - 0) & mask)];
      Fp x66723 = x66722 * x28;
      Fp x66724 = x66721 + x66723;
      Fp x66725 = args[2][40 * steps + ((cycle - 0) & mask)];
      Fp x66726 = x66725 * x13;
      Fp x66727 = x66724 + x66726;
      Fp x66728 = args[2][41 * steps + ((cycle - 0) & mask)];
      Fp x66729 = x66728 * x29;
      Fp x66730 = x66727 + x66729;
      Fp x66731 = args[2][42 * steps + ((cycle - 0) & mask)];
      Fp x66732 = x66731 * x14;
      Fp x66733 = x66730 + x66732;
      Fp x66734 = args[2][43 * steps + ((cycle - 0) & mask)];
      Fp x66735 = x66734 * x30;
      Fp x66736 = x66733 + x66735;
      Fp x66737 = args[2][44 * steps + ((cycle - 0) & mask)];
      Fp x66738 = x66737 * x15;
      Fp x66739 = x66736 + x66738;
      Fp x66740 = args[2][45 * steps + ((cycle - 0) & mask)];
      Fp x66741 = x66740 * x31;
      Fp x66742 = x66739 + x66741;
      Fp x66743 = args[2][46 * steps + ((cycle - 0) & mask)];
      Fp x66744 = x66743 * x16;
      Fp x66745 = x66742 + x66744;
      Fp x66746 = args[2][47 * steps + ((cycle - 0) & mask)];
      Fp x66747 = x66746 * x32;
      Fp x66748 = x66745 + x66747;
      Fp x66749 = x66655 - x66748;
      Fp x66750 = x66749 * x33;
      {
        Fp x66751 = Fp(x66750.asUInt32() & x71.asUInt32());
        args[2][106 * steps + cycle] = x66751;
        Fp x66752 = x66750 - x66751;
        Fp x66753 = x66752 * x26;
        Fp x66754 = Fp(x66753.asUInt32() & x71.asUInt32());
        args[2][107 * steps + cycle] = x66754;
        Fp x66755 = x66753 - x66754;
        Fp x66756 = x66755 * x26;
        Fp x66757 = Fp(x66756.asUInt32() & x71.asUInt32());
        args[2][108 * steps + cycle] = x66757;
      }
      Fp x66758 = args[2][106 * steps + ((cycle - 0) & mask)];
      Fp x66759 = args[2][107 * steps + ((cycle - 0) & mask)];
      Fp x66760 = x66759 * x1;
      Fp x66761 = x66758 + x66760;
      Fp x66762 = args[2][108 * steps + ((cycle - 0) & mask)];
      Fp x66763 = x66762 * x3;
      Fp x66764 = x66761 + x66763;
      Fp x66765 = x66750 - x66764;
      Fp x66766 = x66765 * x69;
      if (x66766 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:140");
      Fp x66767 = x66656 + x66764;
      {
        Fp x66768 = Fp(x66767.asUInt32() & x71.asUInt32());
        args[2][48 * steps + cycle] = x66768;
        Fp x66769 = x66767 - x66768;
        Fp x66770 = x66769 * x26;
        Fp x66771 = Fp(x66770.asUInt32() & x71.asUInt32());
        args[2][49 * steps + cycle] = x66771;
        Fp x66772 = x66770 - x66771;
        Fp x66773 = x66772 * x26;
        Fp x66774 = Fp(x66773.asUInt32() & x71.asUInt32());
        args[2][50 * steps + cycle] = x66774;
        Fp x66775 = x66773 - x66774;
        Fp x66776 = x66775 * x26;
        Fp x66777 = Fp(x66776.asUInt32() & x71.asUInt32());
        args[2][51 * steps + cycle] = x66777;
        Fp x66778 = x66776 - x66777;
        Fp x66779 = x66778 * x26;
        Fp x66780 = Fp(x66779.asUInt32() & x71.asUInt32());
        args[2][52 * steps + cycle] = x66780;
        Fp x66781 = x66779 - x66780;
        Fp x66782 = x66781 * x26;
        Fp x66783 = Fp(x66782.asUInt32() & x71.asUInt32());
        args[2][53 * steps + cycle] = x66783;
        Fp x66784 = x66782 - x66783;
        Fp x66785 = x66784 * x26;
        Fp x66786 = Fp(x66785.asUInt32() & x71.asUInt32());
        args[2][54 * steps + cycle] = x66786;
        Fp x66787 = x66785 - x66786;
        Fp x66788 = x66787 * x26;
        Fp x66789 = Fp(x66788.asUInt32() & x71.asUInt32());
        args[2][55 * steps + cycle] = x66789;
        Fp x66790 = x66788 - x66789;
        Fp x66791 = x66790 * x26;
        Fp x66792 = Fp(x66791.asUInt32() & x71.asUInt32());
        args[2][56 * steps + cycle] = x66792;
        Fp x66793 = x66791 - x66792;
        Fp x66794 = x66793 * x26;
        Fp x66795 = Fp(x66794.asUInt32() & x71.asUInt32());
        args[2][57 * steps + cycle] = x66795;
        Fp x66796 = x66794 - x66795;
        Fp x66797 = x66796 * x26;
        Fp x66798 = Fp(x66797.asUInt32() & x71.asUInt32());
        args[2][58 * steps + cycle] = x66798;
        Fp x66799 = x66797 - x66798;
        Fp x66800 = x66799 * x26;
        Fp x66801 = Fp(x66800.asUInt32() & x71.asUInt32());
        args[2][59 * steps + cycle] = x66801;
        Fp x66802 = x66800 - x66801;
        Fp x66803 = x66802 * x26;
        Fp x66804 = Fp(x66803.asUInt32() & x71.asUInt32());
        args[2][60 * steps + cycle] = x66804;
        Fp x66805 = x66803 - x66804;
        Fp x66806 = x66805 * x26;
        Fp x66807 = Fp(x66806.asUInt32() & x71.asUInt32());
        args[2][61 * steps + cycle] = x66807;
        Fp x66808 = x66806 - x66807;
        Fp x66809 = x66808 * x26;
        Fp x66810 = Fp(x66809.asUInt32() & x71.asUInt32());
        args[2][62 * steps + cycle] = x66810;
        Fp x66811 = x66809 - x66810;
        Fp x66812 = x66811 * x26;
        Fp x66813 = Fp(x66812.asUInt32() & x71.asUInt32());
        args[2][63 * steps + cycle] = x66813;
      }
      Fp x66814 = args[2][48 * steps + ((cycle - 0) & mask)];
      Fp x66815 = args[2][49 * steps + ((cycle - 0) & mask)];
      Fp x66816 = x66815 * x1;
      Fp x66817 = x66814 + x66816;
      Fp x66818 = args[2][50 * steps + ((cycle - 0) & mask)];
      Fp x66819 = x66818 * x3;
      Fp x66820 = x66817 + x66819;
      Fp x66821 = args[2][51 * steps + ((cycle - 0) & mask)];
      Fp x66822 = x66821 * x6;
      Fp x66823 = x66820 + x66822;
      Fp x66824 = args[2][52 * steps + ((cycle - 0) & mask)];
      Fp x66825 = x66824 * x11;
      Fp x66826 = x66823 + x66825;
      Fp x66827 = args[2][53 * steps + ((cycle - 0) & mask)];
      Fp x66828 = x66827 * x27;
      Fp x66829 = x66826 + x66828;
      Fp x66830 = args[2][54 * steps + ((cycle - 0) & mask)];
      Fp x66831 = x66830 * x12;
      Fp x66832 = x66829 + x66831;
      Fp x66833 = args[2][55 * steps + ((cycle - 0) & mask)];
      Fp x66834 = x66833 * x28;
      Fp x66835 = x66832 + x66834;
      Fp x66836 = args[2][56 * steps + ((cycle - 0) & mask)];
      Fp x66837 = x66836 * x13;
      Fp x66838 = x66835 + x66837;
      Fp x66839 = args[2][57 * steps + ((cycle - 0) & mask)];
      Fp x66840 = x66839 * x29;
      Fp x66841 = x66838 + x66840;
      Fp x66842 = args[2][58 * steps + ((cycle - 0) & mask)];
      Fp x66843 = x66842 * x14;
      Fp x66844 = x66841 + x66843;
      Fp x66845 = args[2][59 * steps + ((cycle - 0) & mask)];
      Fp x66846 = x66845 * x30;
      Fp x66847 = x66844 + x66846;
      Fp x66848 = args[2][60 * steps + ((cycle - 0) & mask)];
      Fp x66849 = x66848 * x15;
      Fp x66850 = x66847 + x66849;
      Fp x66851 = args[2][61 * steps + ((cycle - 0) & mask)];
      Fp x66852 = x66851 * x31;
      Fp x66853 = x66850 + x66852;
      Fp x66854 = args[2][62 * steps + ((cycle - 0) & mask)];
      Fp x66855 = x66854 * x16;
      Fp x66856 = x66853 + x66855;
      Fp x66857 = args[2][63 * steps + ((cycle - 0) & mask)];
      Fp x66858 = x66857 * x32;
      Fp x66859 = x66856 + x66858;
      Fp x66860 = x66767 - x66859;
      Fp x66861 = x66860 * x33;
      {
        Fp x66862 = Fp(x66861.asUInt32() & x71.asUInt32());
        args[2][109 * steps + cycle] = x66862;
        Fp x66863 = x66861 - x66862;
        Fp x66864 = x66863 * x26;
        Fp x66865 = Fp(x66864.asUInt32() & x71.asUInt32());
        args[2][110 * steps + cycle] = x66865;
        Fp x66866 = x66864 - x66865;
        Fp x66867 = x66866 * x26;
        Fp x66868 = Fp(x66867.asUInt32() & x71.asUInt32());
        args[2][111 * steps + cycle] = x66868;
      }
      Fp x66869 = args[2][109 * steps + ((cycle - 0) & mask)];
      Fp x66870 = args[2][110 * steps + ((cycle - 0) & mask)];
      Fp x66871 = x66870 * x1;
      Fp x66872 = x66869 + x66871;
      Fp x66873 = args[2][111 * steps + ((cycle - 0) & mask)];
      Fp x66874 = x66873 * x3;
      Fp x66875 = x66872 + x66874;
      Fp x66876 = x66861 - x66875;
      Fp x66877 = x66876 * x69;
      if (x66877 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/types.h:141");
      host_args[0] = x66636;
      host_args[1] = x66525;
      host_args[2] = x66859;
      host_args[3] = x66748;
      host_args[4] = x65513;
      host_args[5] = x65467;
      host(ctx, "log", "  a=%04x%04x, e=%04x%04x, w=%04x%04x", host_args.data(), 6, host_outs.data(), 0);
      Fp x66878 = x71 - x702;
      if (x66878 != 0) {
        args[2][127 * steps + cycle] = x8;
      }
      if (x702 != 0) {
        args[2][127 * steps + cycle] = x7;
      }
      Fp x66879 = x66480 - x71;
      Fp x66880 = x66480 * x66879;
      if (x66880 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66881 = x66481 - x71;
      Fp x66882 = x66481 * x66881;
      if (x66882 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66883 = x66484 - x71;
      Fp x66884 = x66484 * x66883;
      if (x66884 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66885 = x66487 - x71;
      Fp x66886 = x66487 * x66885;
      if (x66886 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66887 = x66490 - x71;
      Fp x66888 = x66490 * x66887;
      if (x66888 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66889 = x66493 - x71;
      Fp x66890 = x66493 * x66889;
      if (x66890 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66891 = x66496 - x71;
      Fp x66892 = x66496 * x66891;
      if (x66892 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66893 = x66499 - x71;
      Fp x66894 = x66499 * x66893;
      if (x66894 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66895 = x66502 - x71;
      Fp x66896 = x66502 * x66895;
      if (x66896 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66897 = x66505 - x71;
      Fp x66898 = x66505 * x66897;
      if (x66898 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66899 = x66508 - x71;
      Fp x66900 = x66508 * x66899;
      if (x66900 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66901 = x66511 - x71;
      Fp x66902 = x66511 * x66901;
      if (x66902 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66903 = x66514 - x71;
      Fp x66904 = x66514 * x66903;
      if (x66904 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66905 = x66517 - x71;
      Fp x66906 = x66517 * x66905;
      if (x66906 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66907 = x66520 - x71;
      Fp x66908 = x66520 * x66907;
      if (x66908 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66909 = x66523 - x71;
      Fp x66910 = x66523 * x66909;
      if (x66910 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66911 = x66591 - x71;
      Fp x66912 = x66591 * x66911;
      if (x66912 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66913 = x66592 - x71;
      Fp x66914 = x66592 * x66913;
      if (x66914 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66915 = x66595 - x71;
      Fp x66916 = x66595 * x66915;
      if (x66916 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66917 = x66598 - x71;
      Fp x66918 = x66598 * x66917;
      if (x66918 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66919 = x66601 - x71;
      Fp x66920 = x66601 * x66919;
      if (x66920 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66921 = x66604 - x71;
      Fp x66922 = x66604 * x66921;
      if (x66922 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66923 = x66607 - x71;
      Fp x66924 = x66607 * x66923;
      if (x66924 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66925 = x66610 - x71;
      Fp x66926 = x66610 * x66925;
      if (x66926 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66927 = x66613 - x71;
      Fp x66928 = x66613 * x66927;
      if (x66928 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66929 = x66616 - x71;
      Fp x66930 = x66616 * x66929;
      if (x66930 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66931 = x66619 - x71;
      Fp x66932 = x66619 * x66931;
      if (x66932 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66933 = x66622 - x71;
      Fp x66934 = x66622 * x66933;
      if (x66934 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66935 = x66625 - x71;
      Fp x66936 = x66625 * x66935;
      if (x66936 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66937 = x66628 - x71;
      Fp x66938 = x66628 * x66937;
      if (x66938 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66939 = x66631 - x71;
      Fp x66940 = x66631 * x66939;
      if (x66940 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66941 = x66634 - x71;
      Fp x66942 = x66634 * x66941;
      if (x66942 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66943 = x66703 - x71;
      Fp x66944 = x66703 * x66943;
      if (x66944 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66945 = x66704 - x71;
      Fp x66946 = x66704 * x66945;
      if (x66946 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66947 = x66707 - x71;
      Fp x66948 = x66707 * x66947;
      if (x66948 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66949 = x66710 - x71;
      Fp x66950 = x66710 * x66949;
      if (x66950 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66951 = x66713 - x71;
      Fp x66952 = x66713 * x66951;
      if (x66952 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66953 = x66716 - x71;
      Fp x66954 = x66716 * x66953;
      if (x66954 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66955 = x66719 - x71;
      Fp x66956 = x66719 * x66955;
      if (x66956 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66957 = x66722 - x71;
      Fp x66958 = x66722 * x66957;
      if (x66958 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66959 = x66725 - x71;
      Fp x66960 = x66725 * x66959;
      if (x66960 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66961 = x66728 - x71;
      Fp x66962 = x66728 * x66961;
      if (x66962 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66963 = x66731 - x71;
      Fp x66964 = x66731 * x66963;
      if (x66964 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66965 = x66734 - x71;
      Fp x66966 = x66734 * x66965;
      if (x66966 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66967 = x66737 - x71;
      Fp x66968 = x66737 * x66967;
      if (x66968 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66969 = x66740 - x71;
      Fp x66970 = x66740 * x66969;
      if (x66970 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66971 = x66743 - x71;
      Fp x66972 = x66743 * x66971;
      if (x66972 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66973 = x66746 - x71;
      Fp x66974 = x66746 * x66973;
      if (x66974 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66975 = x66814 - x71;
      Fp x66976 = x66814 * x66975;
      if (x66976 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66977 = x66815 - x71;
      Fp x66978 = x66815 * x66977;
      if (x66978 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66979 = x66818 - x71;
      Fp x66980 = x66818 * x66979;
      if (x66980 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66981 = x66821 - x71;
      Fp x66982 = x66821 * x66981;
      if (x66982 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66983 = x66824 - x71;
      Fp x66984 = x66824 * x66983;
      if (x66984 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66985 = x66827 - x71;
      Fp x66986 = x66827 * x66985;
      if (x66986 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66987 = x66830 - x71;
      Fp x66988 = x66830 * x66987;
      if (x66988 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66989 = x66833 - x71;
      Fp x66990 = x66833 * x66989;
      if (x66990 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66991 = x66836 - x71;
      Fp x66992 = x66836 * x66991;
      if (x66992 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66993 = x66839 - x71;
      Fp x66994 = x66839 * x66993;
      if (x66994 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66995 = x66842 - x71;
      Fp x66996 = x66842 * x66995;
      if (x66996 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66997 = x66845 - x71;
      Fp x66998 = x66845 * x66997;
      if (x66998 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x66999 = x66848 - x71;
      Fp x67000 = x66848 * x66999;
      if (x67000 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67001 = x66851 - x71;
      Fp x67002 = x66851 * x67001;
      if (x67002 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67003 = x66854 - x71;
      Fp x67004 = x66854 * x67003;
      if (x67004 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67005 = x66857 - x71;
      Fp x67006 = x66857 * x67005;
      if (x67006 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67007 = x65422 - x71;
      Fp x67008 = x65422 * x67007;
      if (x67008 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67009 = x65423 - x71;
      Fp x67010 = x65423 * x67009;
      if (x67010 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67011 = x65426 - x71;
      Fp x67012 = x65426 * x67011;
      if (x67012 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67013 = x65429 - x71;
      Fp x67014 = x65429 * x67013;
      if (x67014 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67015 = x65432 - x71;
      Fp x67016 = x65432 * x67015;
      if (x67016 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67017 = x65435 - x71;
      Fp x67018 = x65435 * x67017;
      if (x67018 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67019 = x65438 - x71;
      Fp x67020 = x65438 * x67019;
      if (x67020 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67021 = x65441 - x71;
      Fp x67022 = x65441 * x67021;
      if (x67022 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67023 = x65444 - x71;
      Fp x67024 = x65444 * x67023;
      if (x67024 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67025 = x65447 - x71;
      Fp x67026 = x65447 * x67025;
      if (x67026 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67027 = x65450 - x71;
      Fp x67028 = x65450 * x67027;
      if (x67028 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67029 = x65453 - x71;
      Fp x67030 = x65453 * x67029;
      if (x67030 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67031 = x65456 - x71;
      Fp x67032 = x65456 * x67031;
      if (x67032 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67033 = x65459 - x71;
      Fp x67034 = x65459 * x67033;
      if (x67034 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67035 = x65462 - x71;
      Fp x67036 = x65462 * x67035;
      if (x67036 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67037 = x65465 - x71;
      Fp x67038 = x65465 * x67037;
      if (x67038 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67039 = x65468 - x71;
      Fp x67040 = x65468 * x67039;
      if (x67040 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67041 = x65469 - x71;
      Fp x67042 = x65469 * x67041;
      if (x67042 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67043 = x65472 - x71;
      Fp x67044 = x65472 * x67043;
      if (x67044 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67045 = x65475 - x71;
      Fp x67046 = x65475 * x67045;
      if (x67046 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67047 = x65478 - x71;
      Fp x67048 = x65478 * x67047;
      if (x67048 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67049 = x65481 - x71;
      Fp x67050 = x65481 * x67049;
      if (x67050 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67051 = x65484 - x71;
      Fp x67052 = x65484 * x67051;
      if (x67052 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67053 = x65487 - x71;
      Fp x67054 = x65487 * x67053;
      if (x67054 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67055 = x65490 - x71;
      Fp x67056 = x65490 * x67055;
      if (x67056 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67057 = x65493 - x71;
      Fp x67058 = x65493 * x67057;
      if (x67058 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67059 = x65496 - x71;
      Fp x67060 = x65496 * x67059;
      if (x67060 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67061 = x65499 - x71;
      Fp x67062 = x65499 * x67061;
      if (x67062 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67063 = x65502 - x71;
      Fp x67064 = x65502 * x67063;
      if (x67064 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67065 = x65505 - x71;
      Fp x67066 = x65505 * x67065;
      if (x67066 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67067 = x65508 - x71;
      Fp x67068 = x65508 * x67067;
      if (x67068 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67069 = x65511 - x71;
      Fp x67070 = x65511 * x67069;
      if (x67070 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67071 = args[2][96 * steps + ((cycle - 0) & mask)];
      Fp x67072 = x67071 - x71;
      Fp x67073 = x67071 * x67072;
      if (x67073 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67074 = args[2][97 * steps + ((cycle - 0) & mask)];
      Fp x67075 = x67074 - x71;
      Fp x67076 = x67074 * x67075;
      if (x67076 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67077 = args[2][98 * steps + ((cycle - 0) & mask)];
      Fp x67078 = x67077 - x71;
      Fp x67079 = x67077 * x67078;
      if (x67079 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67080 = args[2][99 * steps + ((cycle - 0) & mask)];
      Fp x67081 = x67080 - x71;
      Fp x67082 = x67080 * x67081;
      if (x67082 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:54");
      Fp x67083 = x66535 - x71;
      Fp x67084 = x66535 * x67083;
      if (x67084 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:370");
      Fp x67085 = x66536 - x71;
      Fp x67086 = x66536 * x67085;
      if (x67086 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:370");
      Fp x67087 = x66539 - x71;
      Fp x67088 = x66539 * x67087;
      if (x67088 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:370");
      Fp x67089 = x66646 - x71;
      Fp x67090 = x66646 * x67089;
      if (x67090 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:371");
      Fp x67091 = x66647 - x71;
      Fp x67092 = x66647 * x67091;
      if (x67092 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:371");
      Fp x67093 = x66650 - x71;
      Fp x67094 = x66650 * x67093;
      if (x67094 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:371");
      Fp x67095 = x66758 - x71;
      Fp x67096 = x66758 * x67095;
      if (x67096 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:372");
      Fp x67097 = x66759 - x71;
      Fp x67098 = x66759 * x67097;
      if (x67098 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:372");
      Fp x67099 = x66762 - x71;
      Fp x67100 = x66762 * x67099;
      if (x67100 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:372");
      Fp x67101 = x66869 - x71;
      Fp x67102 = x66869 * x67101;
      if (x67102 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:373");
      Fp x67103 = x66870 - x71;
      Fp x67104 = x66870 * x67103;
      if (x67104 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:373");
      Fp x67105 = x66873 - x71;
      Fp x67106 = x66873 * x67105;
      if (x67106 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:373");
      Fp x67107 = args[2][112 * steps + ((cycle - 0) & mask)];
      Fp x67108 = x67107 - x71;
      Fp x67109 = x67107 * x67108;
      if (x67109 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:374");
      Fp x67110 = args[2][113 * steps + ((cycle - 0) & mask)];
      Fp x67111 = x67110 - x71;
      Fp x67112 = x67110 * x67111;
      if (x67112 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:374");
      Fp x67113 = args[2][114 * steps + ((cycle - 0) & mask)];
      Fp x67114 = x67113 - x71;
      Fp x67115 = x67113 * x67114;
      if (x67115 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:375");
      Fp x67116 = args[2][115 * steps + ((cycle - 0) & mask)];
      Fp x67117 = x67116 - x71;
      Fp x67118 = x67116 * x67117;
      if (x67118 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/sha_cycle.cpp:375");
    }
    Fp x67119 = args[2][143 * steps + ((cycle - 0) & mask)];
    if (x67119 != 0) {
      args[2][128 * steps + cycle] = x70;
      args[2][131 * steps + cycle] = x70;
      {
        host_args[0] = x72;
        host_args[1] = x70;
        host(ctx, "memRead", "", host_args.data(), 2, host_outs.data(), 2);
        Fp x67120 = host_outs[0];
        Fp x67121 = host_outs[1];
        args[2][129 * steps + cycle] = x67120;
        args[2][130 * steps + cycle] = x67121;
      }
    }
    Fp x67122 = args[2][0 * steps + ((cycle - 0) & mask)];
    Fp x67123 = x67122 - x71;
    Fp x67124 = x67122 * x67123;
    Fp x67125 = x67122 - x1;
    Fp x67126 = x67124 * x67125;
    Fp x67127 = x67122 - x2;
    Fp x67128 = x67126 * x67127;
    if (x67128 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67129 = args[2][1 * steps + ((cycle - 0) & mask)];
    Fp x67130 = x67129 - x71;
    Fp x67131 = x67129 * x67130;
    Fp x67132 = x67129 - x1;
    Fp x67133 = x67131 * x67132;
    Fp x67134 = x67129 - x2;
    Fp x67135 = x67133 * x67134;
    if (x67135 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67136 = args[2][2 * steps + ((cycle - 0) & mask)];
    Fp x67137 = x67136 - x71;
    Fp x67138 = x67136 * x67137;
    Fp x67139 = x67136 - x1;
    Fp x67140 = x67138 * x67139;
    Fp x67141 = x67136 - x2;
    Fp x67142 = x67140 * x67141;
    if (x67142 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67143 = args[2][3 * steps + ((cycle - 0) & mask)];
    Fp x67144 = x67143 - x71;
    Fp x67145 = x67143 * x67144;
    Fp x67146 = x67143 - x1;
    Fp x67147 = x67145 * x67146;
    Fp x67148 = x67143 - x2;
    Fp x67149 = x67147 * x67148;
    if (x67149 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67150 = args[2][4 * steps + ((cycle - 0) & mask)];
    Fp x67151 = x67150 - x71;
    Fp x67152 = x67150 * x67151;
    Fp x67153 = x67150 - x1;
    Fp x67154 = x67152 * x67153;
    Fp x67155 = x67150 - x2;
    Fp x67156 = x67154 * x67155;
    if (x67156 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67157 = args[2][5 * steps + ((cycle - 0) & mask)];
    Fp x67158 = x67157 - x71;
    Fp x67159 = x67157 * x67158;
    Fp x67160 = x67157 - x1;
    Fp x67161 = x67159 * x67160;
    Fp x67162 = x67157 - x2;
    Fp x67163 = x67161 * x67162;
    if (x67163 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67164 = args[2][6 * steps + ((cycle - 0) & mask)];
    Fp x67165 = x67164 - x71;
    Fp x67166 = x67164 * x67165;
    Fp x67167 = x67164 - x1;
    Fp x67168 = x67166 * x67167;
    Fp x67169 = x67164 - x2;
    Fp x67170 = x67168 * x67169;
    if (x67170 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67171 = args[2][7 * steps + ((cycle - 0) & mask)];
    Fp x67172 = x67171 - x71;
    Fp x67173 = x67171 * x67172;
    Fp x67174 = x67171 - x1;
    Fp x67175 = x67173 * x67174;
    Fp x67176 = x67171 - x2;
    Fp x67177 = x67175 * x67176;
    if (x67177 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67178 = args[2][8 * steps + ((cycle - 0) & mask)];
    Fp x67179 = x67178 - x71;
    Fp x67180 = x67178 * x67179;
    Fp x67181 = x67178 - x1;
    Fp x67182 = x67180 * x67181;
    Fp x67183 = x67178 - x2;
    Fp x67184 = x67182 * x67183;
    if (x67184 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67185 = args[2][9 * steps + ((cycle - 0) & mask)];
    Fp x67186 = x67185 - x71;
    Fp x67187 = x67185 * x67186;
    Fp x67188 = x67185 - x1;
    Fp x67189 = x67187 * x67188;
    Fp x67190 = x67185 - x2;
    Fp x67191 = x67189 * x67190;
    if (x67191 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67192 = args[2][10 * steps + ((cycle - 0) & mask)];
    Fp x67193 = x67192 - x71;
    Fp x67194 = x67192 * x67193;
    Fp x67195 = x67192 - x1;
    Fp x67196 = x67194 * x67195;
    Fp x67197 = x67192 - x2;
    Fp x67198 = x67196 * x67197;
    if (x67198 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67199 = args[2][11 * steps + ((cycle - 0) & mask)];
    Fp x67200 = x67199 - x71;
    Fp x67201 = x67199 * x67200;
    Fp x67202 = x67199 - x1;
    Fp x67203 = x67201 * x67202;
    Fp x67204 = x67199 - x2;
    Fp x67205 = x67203 * x67204;
    if (x67205 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67206 = args[2][12 * steps + ((cycle - 0) & mask)];
    Fp x67207 = x67206 - x71;
    Fp x67208 = x67206 * x67207;
    Fp x67209 = x67206 - x1;
    Fp x67210 = x67208 * x67209;
    Fp x67211 = x67206 - x2;
    Fp x67212 = x67210 * x67211;
    if (x67212 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67213 = args[2][13 * steps + ((cycle - 0) & mask)];
    Fp x67214 = x67213 - x71;
    Fp x67215 = x67213 * x67214;
    Fp x67216 = x67213 - x1;
    Fp x67217 = x67215 * x67216;
    Fp x67218 = x67213 - x2;
    Fp x67219 = x67217 * x67218;
    if (x67219 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67220 = args[2][14 * steps + ((cycle - 0) & mask)];
    Fp x67221 = x67220 - x71;
    Fp x67222 = x67220 * x67221;
    Fp x67223 = x67220 - x1;
    Fp x67224 = x67222 * x67223;
    Fp x67225 = x67220 - x2;
    Fp x67226 = x67224 * x67225;
    if (x67226 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67227 = args[2][15 * steps + ((cycle - 0) & mask)];
    Fp x67228 = x67227 - x71;
    Fp x67229 = x67227 * x67228;
    Fp x67230 = x67227 - x1;
    Fp x67231 = x67229 * x67230;
    Fp x67232 = x67227 - x2;
    Fp x67233 = x67231 * x67232;
    if (x67233 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67234 = args[2][16 * steps + ((cycle - 0) & mask)];
    Fp x67235 = x67234 - x71;
    Fp x67236 = x67234 * x67235;
    Fp x67237 = x67234 - x1;
    Fp x67238 = x67236 * x67237;
    Fp x67239 = x67234 - x2;
    Fp x67240 = x67238 * x67239;
    if (x67240 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67241 = args[2][17 * steps + ((cycle - 0) & mask)];
    Fp x67242 = x67241 - x71;
    Fp x67243 = x67241 * x67242;
    Fp x67244 = x67241 - x1;
    Fp x67245 = x67243 * x67244;
    Fp x67246 = x67241 - x2;
    Fp x67247 = x67245 * x67246;
    if (x67247 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67248 = args[2][18 * steps + ((cycle - 0) & mask)];
    Fp x67249 = x67248 - x71;
    Fp x67250 = x67248 * x67249;
    Fp x67251 = x67248 - x1;
    Fp x67252 = x67250 * x67251;
    Fp x67253 = x67248 - x2;
    Fp x67254 = x67252 * x67253;
    if (x67254 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67255 = args[2][19 * steps + ((cycle - 0) & mask)];
    Fp x67256 = x67255 - x71;
    Fp x67257 = x67255 * x67256;
    Fp x67258 = x67255 - x1;
    Fp x67259 = x67257 * x67258;
    Fp x67260 = x67255 - x2;
    Fp x67261 = x67259 * x67260;
    if (x67261 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67262 = args[2][20 * steps + ((cycle - 0) & mask)];
    Fp x67263 = x67262 - x71;
    Fp x67264 = x67262 * x67263;
    Fp x67265 = x67262 - x1;
    Fp x67266 = x67264 * x67265;
    Fp x67267 = x67262 - x2;
    Fp x67268 = x67266 * x67267;
    if (x67268 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67269 = args[2][21 * steps + ((cycle - 0) & mask)];
    Fp x67270 = x67269 - x71;
    Fp x67271 = x67269 * x67270;
    Fp x67272 = x67269 - x1;
    Fp x67273 = x67271 * x67272;
    Fp x67274 = x67269 - x2;
    Fp x67275 = x67273 * x67274;
    if (x67275 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67276 = args[2][22 * steps + ((cycle - 0) & mask)];
    Fp x67277 = x67276 - x71;
    Fp x67278 = x67276 * x67277;
    Fp x67279 = x67276 - x1;
    Fp x67280 = x67278 * x67279;
    Fp x67281 = x67276 - x2;
    Fp x67282 = x67280 * x67281;
    if (x67282 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67283 = args[2][23 * steps + ((cycle - 0) & mask)];
    Fp x67284 = x67283 - x71;
    Fp x67285 = x67283 * x67284;
    Fp x67286 = x67283 - x1;
    Fp x67287 = x67285 * x67286;
    Fp x67288 = x67283 - x2;
    Fp x67289 = x67287 * x67288;
    if (x67289 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67290 = args[2][24 * steps + ((cycle - 0) & mask)];
    Fp x67291 = x67290 - x71;
    Fp x67292 = x67290 * x67291;
    Fp x67293 = x67290 - x1;
    Fp x67294 = x67292 * x67293;
    Fp x67295 = x67290 - x2;
    Fp x67296 = x67294 * x67295;
    if (x67296 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67297 = args[2][25 * steps + ((cycle - 0) & mask)];
    Fp x67298 = x67297 - x71;
    Fp x67299 = x67297 * x67298;
    Fp x67300 = x67297 - x1;
    Fp x67301 = x67299 * x67300;
    Fp x67302 = x67297 - x2;
    Fp x67303 = x67301 * x67302;
    if (x67303 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67304 = args[2][26 * steps + ((cycle - 0) & mask)];
    Fp x67305 = x67304 - x71;
    Fp x67306 = x67304 * x67305;
    Fp x67307 = x67304 - x1;
    Fp x67308 = x67306 * x67307;
    Fp x67309 = x67304 - x2;
    Fp x67310 = x67308 * x67309;
    if (x67310 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67311 = args[2][27 * steps + ((cycle - 0) & mask)];
    Fp x67312 = x67311 - x71;
    Fp x67313 = x67311 * x67312;
    Fp x67314 = x67311 - x1;
    Fp x67315 = x67313 * x67314;
    Fp x67316 = x67311 - x2;
    Fp x67317 = x67315 * x67316;
    if (x67317 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67318 = args[2][28 * steps + ((cycle - 0) & mask)];
    Fp x67319 = x67318 - x71;
    Fp x67320 = x67318 * x67319;
    Fp x67321 = x67318 - x1;
    Fp x67322 = x67320 * x67321;
    Fp x67323 = x67318 - x2;
    Fp x67324 = x67322 * x67323;
    if (x67324 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67325 = args[2][29 * steps + ((cycle - 0) & mask)];
    Fp x67326 = x67325 - x71;
    Fp x67327 = x67325 * x67326;
    Fp x67328 = x67325 - x1;
    Fp x67329 = x67327 * x67328;
    Fp x67330 = x67325 - x2;
    Fp x67331 = x67329 * x67330;
    if (x67331 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67332 = args[2][30 * steps + ((cycle - 0) & mask)];
    Fp x67333 = x67332 - x71;
    Fp x67334 = x67332 * x67333;
    Fp x67335 = x67332 - x1;
    Fp x67336 = x67334 * x67335;
    Fp x67337 = x67332 - x2;
    Fp x67338 = x67336 * x67337;
    if (x67338 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67339 = args[2][31 * steps + ((cycle - 0) & mask)];
    Fp x67340 = x67339 - x71;
    Fp x67341 = x67339 * x67340;
    Fp x67342 = x67339 - x1;
    Fp x67343 = x67341 * x67342;
    Fp x67344 = x67339 - x2;
    Fp x67345 = x67343 * x67344;
    if (x67345 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:50");
    Fp x67346 = args[2][132 * steps + ((cycle - 0) & mask)];
    Fp x67347 = x67346 - x71;
    Fp x67348 = x67346 * x67347;
    if (x67348 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67349 = args[2][133 * steps + ((cycle - 0) & mask)];
    Fp x67350 = x67349 - x71;
    Fp x67351 = x67349 * x67350;
    if (x67351 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67352 = args[2][134 * steps + ((cycle - 0) & mask)];
    Fp x67353 = x67352 - x71;
    Fp x67354 = x67352 * x67353;
    if (x67354 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67355 = args[2][135 * steps + ((cycle - 0) & mask)];
    Fp x67356 = x67355 - x71;
    Fp x67357 = x67355 * x67356;
    if (x67357 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67358 = args[2][136 * steps + ((cycle - 0) & mask)];
    Fp x67359 = x67358 - x71;
    Fp x67360 = x67358 * x67359;
    if (x67360 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67361 = args[2][137 * steps + ((cycle - 0) & mask)];
    Fp x67362 = x67361 - x71;
    Fp x67363 = x67361 * x67362;
    if (x67363 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67364 = args[2][138 * steps + ((cycle - 0) & mask)];
    Fp x67365 = x67364 - x71;
    Fp x67366 = x67364 * x67365;
    if (x67366 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67367 = x57328 - x71;
    Fp x67368 = x57328 * x67367;
    if (x67368 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67369 = x58003 - x71;
    Fp x67370 = x58003 * x67369;
    if (x67370 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67371 = x58306 - x71;
    Fp x67372 = x58306 * x67371;
    if (x67372 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67373 = x63508 - x71;
    Fp x67374 = x63508 * x67373;
    if (x67374 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67375 = x67119 - x71;
    Fp x67376 = x67119 * x67375;
    if (x67376 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
    Fp x67377 = x67346 + x67349;
    Fp x67378 = x67377 + x67352;
    Fp x67379 = x67378 + x67355;
    Fp x67380 = x67379 + x67358;
    Fp x67381 = x67380 + x67361;
    Fp x67382 = x67381 + x67364;
    Fp x67383 = x67382 + x57328;
    Fp x67384 = x67383 + x58003;
    Fp x67385 = x67384 + x58306;
    Fp x67386 = x67385 + x63508;
    Fp x67387 = x67386 + x67119;
    Fp x67388 = x67387 - x71;
    if (x67388 != 0) throw std::runtime_error("eqz failed at: external/risc0/risc0/zkvm/circuit/data_regs.h:60");
  }
  Fp x67389 = args[2][143 * steps + ((cycle - 0) & mask)];
  Fp x67390 = x71 - x67389;
  return x67390;
}

} // namespace risc0::circuit::rv32im
// clang-format on
