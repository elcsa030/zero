// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/page_fault.cpp":96:16)
  Fp x0(56361024);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":94:19)
  Fp x1(54525952);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":83:32)
  Fp x2(219862);
  // loc("cirgen/circuit/rv32im/sha.cpp":384:24)
  Fp x3(56361023);
  // loc("cirgen/circuit/rv32im/sha.cpp":344:18)
  Fp x4(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":316:24)
  Fp x5(56360975);
  // loc("cirgen/circuit/rv32im/sha.cpp":312:24)
  Fp x6(56360967);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x7(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x8(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x9(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x10(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x11(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x12(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x13(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x14(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x15(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x16(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x17(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x18(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x19(512);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":48:22)
  Fp x20(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x21(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x22(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":107:25)
  Fp x23(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":31:45)
  Fp x24(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":15:39)
  Fp x25(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":127:49)
  Fp x26(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":122:21)
  Fp x27(115);
  // loc("cirgen/components/u32.cpp":238:19)
  Fp x28(131070);
  // loc("cirgen/components/u32.cpp":234:19)
  Fp x29(131072);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x30(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x31(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x32(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":79:79)
  Fp x33(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":79:56)
  Fp x34(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x35(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x36(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x37(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x38(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x39(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x40(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x41(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x42(51);
  // loc("cirgen/components/u32.cpp":65:36)
  Fp x43(1996488705);
  // loc("cirgen/components/u32.cpp":65:28)
  Fp x44(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x45(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x46(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x47(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x48(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x49(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x50(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x51(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x52(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x53(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x54(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x55(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:32)
  Fp x56(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x57(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x58(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x59(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x60(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x61(128);
  // loc("cirgen/circuit/rv32im/body.cpp":84:18)
  Fp x62(15);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x63(14);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x64(13);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x65(12);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x66(11);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x67(10);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x68(9);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x69(8);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x70(7);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x71(6);
  // loc("./cirgen/components/onehot.h":46:19)
  Fp x72(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x73(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x74(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x75(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x76(4);
  // loc("./cirgen/components/u32.h":27:12)
  Fp x77(16777216);
  // loc("./cirgen/components/u32.h":26:12)
  Fp x78(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":57:37)
  Fp x79(56284855);
  // loc("cirgen/circuit/rv32im/body.cpp":57:37)
  Fp x80(56284854);
  // loc("cirgen/circuit/rv32im/body.cpp":57:37)
  Fp x81(56284853);
  // loc("cirgen/circuit/rv32im/body.cpp":57:37)
  Fp x82(56284852);
  // loc("cirgen/circuit/rv32im/body.cpp":51:44)
  Fp x83(56284851);
  // loc("cirgen/circuit/rv32im/body.cpp":51:44)
  Fp x84(56284850);
  // loc("cirgen/circuit/rv32im/body.cpp":51:44)
  Fp x85(56284849);
  // loc("cirgen/circuit/rv32im/body.cpp":51:44)
  Fp x86(56284848);
  // loc("cirgen/components/bytes.cpp":97:30)
  Fp x87(2005401601);
  // loc("cirgen/components/bytes.cpp":97:30)
  Fp x88(256);
  // loc("cirgen/components/bytes.cpp":96:26)
  Fp x89(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x90(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x91(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x92(0);
  // loc("cirgen/circuit/rv32im/top.cpp":17:17)
  Fp x93(1);
  // loc("Top/Code/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":39:25))
  auto x94 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x94 != Fp::invalid());
  if (x94 != 0) {
    // loc("Top/Code/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/top.cpp":17:75))
    auto x95 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x95 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":17:17)
    auto x96 = x93 - x95;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x97 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x97 != Fp::invalid());
    if (x96 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][3 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][4 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
    // loc("cirgen/components/bytes.cpp":117:17)
    auto x98 = x93 - x96;
    if (x98 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x99 = args[2][43 * steps + ((cycle - 1) & mask)];
      assert(x99 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x100 = args[2][44 * steps + ((cycle - 1) & mask)];
      assert(x100 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x101 = x100 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x102 = (x101 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x103 = x93 - x102;
        if (x103 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x104 = x100 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x104);
            reg = x104;
          }
        }
        if (x102 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x105 = x99 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x105);
            reg = x105;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x106 = args[2][3 * steps + ((cycle - 0) & mask)];
      assert(x106 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x107 = x106 - x99;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x108 = args[2][4 * steps + ((cycle - 0) & mask)];
      assert(x108 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x109 = x108 - x100;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x110 = x107 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x111 = x107 * x110;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x111 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x112 = x109 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x113 = x107 * x112;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x113 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x114 = x109 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x115 = x110 * x114;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x115 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x116 = args[2][3 * steps + ((cycle - 0) & mask)];
    assert(x116 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x117 = args[2][4 * steps + ((cycle - 0) & mask)];
    assert(x117 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x118 = x117 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x119 = (x118 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x120 = x93 - x119;
      if (x120 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x116);
          reg = x116;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x121 = x117 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x121);
          reg = x121;
        }
      }
      if (x119 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x122 = x116 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x122);
          reg = x122;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x123 = args[2][5 * steps + ((cycle - 0) & mask)];
    assert(x123 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x124 = x123 - x116;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x125 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x125 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x126 = x125 - x117;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x127 = x124 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x128 = x124 * x127;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x128 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x129 = x126 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x130 = x124 * x129;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x130 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x131 = x126 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x132 = x127 * x131;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x132 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x133 = x125 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x134 = (x133 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x135 = x93 - x134;
      if (x135 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x123);
          reg = x123;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x136 = x125 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x136);
          reg = x136;
        }
      }
      if (x134 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x137 = x123 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x137);
          reg = x137;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x138 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x138 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x139 = x138 - x123;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x140 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x140 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x141 = x140 - x125;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x142 = x139 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x143 = x139 * x142;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x143 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x144 = x141 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x145 = x139 * x144;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x145 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x146 = x141 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x147 = x142 * x146;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x147 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x148 = x140 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x149 = (x148 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x150 = x93 - x149;
      if (x150 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x138);
          reg = x138;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x151 = x140 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x151);
          reg = x151;
        }
      }
      if (x149 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x152 = x138 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x152);
          reg = x152;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x153 = args[2][9 * steps + ((cycle - 0) & mask)];
    assert(x153 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x154 = x153 - x138;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x155 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x155 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x156 = x155 - x140;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x157 = x154 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x158 = x154 * x157;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x158 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x159 = x156 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x160 = x154 * x159;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x160 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x161 = x156 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x162 = x157 * x161;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x162 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x163 = x155 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x164 = (x163 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x165 = x93 - x164;
      if (x165 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x153);
          reg = x153;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x166 = x155 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x166);
          reg = x166;
        }
      }
      if (x164 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x167 = x153 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x167);
          reg = x167;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x168 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x168 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x169 = x168 - x153;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x170 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x170 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x171 = x170 - x155;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x172 = x169 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x173 = x169 * x172;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x173 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x174 = x171 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x175 = x169 * x174;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x175 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x176 = x171 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x177 = x172 * x176;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x177 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x178 = x170 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x179 = (x178 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x180 = x93 - x179;
      if (x180 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x168);
          reg = x168;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x181 = x170 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x181);
          reg = x181;
        }
      }
      if (x179 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x182 = x168 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x182);
          reg = x182;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x183 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x183 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x184 = x183 - x168;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x185 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x185 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x186 = x185 - x170;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x187 = x184 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x188 = x184 * x187;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x188 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x189 = x186 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x190 = x184 * x189;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x190 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x191 = x186 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x192 = x187 * x191;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x192 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x193 = x185 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x194 = (x193 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x195 = x93 - x194;
      if (x195 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x183);
          reg = x183;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x196 = x185 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x196);
          reg = x196;
        }
      }
      if (x194 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x197 = x183 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x197);
          reg = x197;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x198 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x198 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x199 = x198 - x183;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x200 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x200 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x201 = x200 - x185;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x202 = x199 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x203 = x199 * x202;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x203 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x204 = x201 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x205 = x199 * x204;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x205 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x206 = x201 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x207 = x202 * x206;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x207 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x208 = x200 - x91;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x209 = (x208 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x210 = x93 - x209;
      if (x210 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x198);
          reg = x198;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x211 = x200 + x90;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x211);
          reg = x211;
        }
      }
      if (x209 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x212 = x198 + x93;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x212);
          reg = x212;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x213 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x213 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x214 = x213 - x198;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x215 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x215 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x216 = x215 - x200;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x217 = x214 - x93;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x218 = x214 * x217;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x218 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x219 = x216 + x91;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x220 = x214 * x219;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x220 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x221 = x216 - x90;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x222 = x217 * x221;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x222 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    if (x97 != 0) {
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
    // loc("cirgen/components/bytes.cpp":130:16)
    auto x223 = x93 - x97;
    if (x223 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x224 = x215 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x225 = (x224 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x226 = x93 - x225;
        if (x226 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x213);
            reg = x213;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x227 = x215 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x227);
            reg = x227;
          }
        }
        if (x225 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x228 = x213 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x228);
            reg = x228;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x229 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x229 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x230 = x229 - x213;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x231 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x231 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x232 = x231 - x215;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x233 = x230 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x234 = x230 * x233;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x234 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x235 = x232 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x236 = x230 * x235;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x236 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x237 = x232 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x238 = x233 * x237;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x238 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x239 = x231 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x240 = (x239 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x241 = x93 - x240;
        if (x241 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x229);
            reg = x229;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x242 = x231 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x242);
            reg = x242;
          }
        }
        if (x240 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x243 = x229 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x243);
            reg = x243;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x244 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x244 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x245 = x244 - x229;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x246 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x246 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x247 = x246 - x231;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x248 = x245 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x249 = x245 * x248;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x249 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x250 = x247 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x251 = x245 * x250;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x251 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x252 = x247 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x253 = x248 * x252;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x253 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x254 = x246 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x255 = (x254 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x256 = x93 - x255;
        if (x256 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x244);
            reg = x244;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x257 = x246 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x257);
            reg = x257;
          }
        }
        if (x255 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x258 = x244 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x258);
            reg = x258;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x259 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x259 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x260 = x259 - x244;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x261 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x261 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x262 = x261 - x246;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x263 = x260 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x264 = x260 * x263;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x264 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x265 = x262 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x266 = x260 * x265;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x266 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x267 = x262 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x268 = x263 * x267;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x268 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x269 = x261 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x270 = (x269 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x271 = x93 - x270;
        if (x271 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x259);
            reg = x259;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x272 = x261 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x272);
            reg = x272;
          }
        }
        if (x270 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x273 = x259 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x273);
            reg = x273;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x274 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x274 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x275 = x274 - x259;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x276 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x276 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x277 = x276 - x261;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x278 = x275 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x279 = x275 * x278;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x279 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x280 = x277 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x281 = x275 * x280;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x281 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x282 = x277 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x283 = x278 * x282;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x283 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x284 = x276 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x285 = (x284 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x286 = x93 - x285;
        if (x286 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x274);
            reg = x274;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x287 = x276 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x287);
            reg = x287;
          }
        }
        if (x285 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x288 = x274 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x288);
            reg = x288;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x289 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x289 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x290 = x289 - x274;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x291 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x291 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x292 = x291 - x276;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x293 = x290 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x294 = x290 * x293;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x294 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x295 = x292 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x296 = x290 * x295;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x296 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x297 = x292 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x298 = x293 * x297;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x298 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x299 = x291 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x300 = (x299 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x301 = x93 - x300;
        if (x301 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x289);
            reg = x289;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x302 = x291 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x302);
            reg = x302;
          }
        }
        if (x300 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x303 = x289 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x303);
            reg = x303;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x304 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x304 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x305 = x304 - x289;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x306 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x306 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x307 = x306 - x291;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x308 = x305 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x309 = x305 * x308;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x309 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x310 = x307 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x311 = x305 * x310;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x311 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x312 = x307 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x313 = x308 * x312;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x313 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x314 = x306 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x315 = (x314 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x316 = x93 - x315;
        if (x316 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x304);
            reg = x304;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x317 = x306 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x317);
            reg = x317;
          }
        }
        if (x315 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x318 = x304 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x318);
            reg = x318;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x319 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x319 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x320 = x319 - x304;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x321 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x321 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x322 = x321 - x306;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x323 = x320 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x324 = x320 * x323;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x324 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x325 = x322 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x326 = x320 * x325;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x326 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x327 = x322 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x328 = x323 * x327;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x328 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x329 = x321 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x330 = (x329 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x331 = x93 - x330;
        if (x331 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x319);
            reg = x319;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x332 = x321 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x332);
            reg = x332;
          }
        }
        if (x330 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x333 = x319 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x333);
            reg = x333;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x334 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x334 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x335 = x334 - x319;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x336 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x336 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x337 = x336 - x321;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x338 = x335 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x339 = x335 * x338;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x339 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x340 = x337 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x341 = x335 * x340;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x341 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x342 = x337 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x343 = x338 * x342;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x343 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x344 = x336 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x345 = (x344 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x346 = x93 - x345;
        if (x346 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x334);
            reg = x334;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x347 = x336 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x347);
            reg = x347;
          }
        }
        if (x345 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x348 = x334 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x348);
            reg = x348;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x349 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x349 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x350 = x349 - x334;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x351 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x351 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x352 = x351 - x336;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x353 = x350 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x354 = x350 * x353;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x354 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x355 = x352 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x356 = x350 * x355;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x356 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x357 = x352 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x358 = x353 * x357;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x358 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x359 = x351 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x360 = (x359 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x361 = x93 - x360;
        if (x361 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x349);
            reg = x349;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x362 = x351 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x362);
            reg = x362;
          }
        }
        if (x360 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x363 = x349 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x363);
            reg = x363;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x364 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x364 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x365 = x364 - x349;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x366 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x366 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x367 = x366 - x351;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x368 = x365 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x369 = x365 * x368;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x369 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x370 = x367 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x371 = x365 * x370;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x371 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x372 = x367 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x373 = x368 * x372;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x373 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x374 = x366 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x375 = (x374 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x376 = x93 - x375;
        if (x376 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x364);
            reg = x364;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x377 = x366 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x377);
            reg = x377;
          }
        }
        if (x375 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x378 = x364 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x378);
            reg = x378;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x379 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x379 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x380 = x379 - x364;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x381 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x381 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x382 = x381 - x366;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x383 = x380 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x384 = x380 * x383;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x384 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x385 = x382 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x386 = x380 * x385;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x386 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x387 = x382 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x388 = x383 * x387;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x388 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x389 = x381 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x390 = (x389 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x391 = x93 - x390;
        if (x391 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x379);
            reg = x379;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x392 = x381 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x392);
            reg = x392;
          }
        }
        if (x390 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x393 = x379 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x393);
            reg = x393;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x394 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x394 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x395 = x394 - x379;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x396 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x396 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x397 = x396 - x381;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x398 = x395 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x399 = x395 * x398;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x399 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x400 = x397 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x401 = x395 * x400;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x401 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x402 = x397 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x403 = x398 * x402;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x403 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x404 = x396 - x91;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x405 = (x404 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x406 = x93 - x405;
        if (x406 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x394);
            reg = x394;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x407 = x396 + x90;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x407);
            reg = x407;
          }
        }
        if (x405 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x408 = x394 + x93;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x408);
            reg = x408;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x409 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x409 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x410 = x409 - x394;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x411 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x411 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x412 = x411 - x396;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x413 = x410 - x93;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x414 = x410 * x413;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x414 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x415 = x412 + x91;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x416 = x410 * x415;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x416 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x417 = x412 - x90;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x418 = x413 * x417;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x418 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":39:25))
  auto x419 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x419 != Fp::invalid());
  if (x419 != 0) {
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x420 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x420 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x421 = Fp(x420.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x421);
        reg = x421;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x422 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x422 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x423 = x420 - x422;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x424 = x423 * x87;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x424);
      reg = x424;
    }
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x425 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x425 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x426 = Fp(x425.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x426);
        reg = x426;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x427 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x427 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x428 = x425 - x427;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x429 = x428 * x87;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x429);
      reg = x429;
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x430 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x430 != Fp::invalid());
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x431 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x431 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x432 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x432 != Fp::invalid());
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x433 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x422);
      reg = x422;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x430);
      reg = x430;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x427);
      reg = x427;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x431);
      reg = x431;
    }
    {
      host_args.at(0) = x433;
      host_args.at(1) = x422;
      host_args.at(2) = x430;
      host_args.at(3) = x427;
      host_args.at(4) = x431;
      host_args.at(5) = x92;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x434 = args[2][117 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x435 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x436 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x437 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x437 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    // loc("cirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/ram.cpp":171:3)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x437);
      reg = x437;
    }
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x438 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x439 = Fp(x438.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x439);
        reg = x439;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x440 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x441 = x438 - x440;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x442 = x441 * x87;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x442);
      reg = x442;
    }
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x443 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x444 = Fp(x443.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x444);
        reg = x444;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x445 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x445 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x446 = x443 - x445;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x447 = x446 * x87;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x447);
      reg = x447;
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x448 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x448 != Fp::invalid());
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x449 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x449 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":41:44)
    auto x450 = x433 + x93;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x448);
      reg = x448;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x445);
      reg = x445;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x449);
      reg = x449;
    }
    {
      host_args.at(0) = x450;
      host_args.at(1) = x440;
      host_args.at(2) = x448;
      host_args.at(3) = x445;
      host_args.at(4) = x449;
      host_args.at(5) = x92;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x451 = args[2][124 * steps + ((cycle - 0) & mask)];
    assert(x451 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x452 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x452 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x453 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x453 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x454 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x450);
      reg = x450;
    }
    // loc("cirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/ram.cpp":171:3)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x452);
      reg = x452;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x455 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x456 = Fp(x455.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x456);
        reg = x456;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x457 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x458 = x455 - x457;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x459 = x458 * x87;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x460 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":96:21)
      auto x461 = Fp(x460.asUInt32() & x89.asUInt32());
      // loc("cirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x461);
        reg = x461;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
    auto x462 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x462 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":97:11)
    auto x463 = x460 - x462;
    // loc("cirgen/components/bytes.cpp":97:10)
    auto x464 = x463 * x87;
    // loc("cirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x464);
      reg = x464;
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x465 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x465 != Fp::invalid());
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x466 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x466 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":41:44)
    auto x467 = x433 + x90;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x465);
      reg = x465;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x462);
      reg = x462;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x466);
      reg = x466;
    }
    {
      host_args.at(0) = x467;
      host_args.at(1) = x457;
      host_args.at(2) = x465;
      host_args.at(3) = x462;
      host_args.at(4) = x466;
      host_args.at(5) = x92;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x468 = args[2][131 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x469 = args[2][132 * steps + ((cycle - 0) & mask)];
    assert(x469 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x470 = args[2][133 * steps + ((cycle - 0) & mask)];
    assert(x470 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x471 = args[2][134 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("cirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][129 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/ram.cpp":171:3)
    {
      auto& reg = args[2][130 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x469);
      reg = x469;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
  }
  // loc("Top/Code/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":39:25))
  auto x472 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x472 != Fp::invalid());
  if (x472 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x473 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x473 != Fp::invalid());
    // loc("Top/Code/Mux/4/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x474 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    // loc("Top/Code/Mux/4/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x475 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x475 != Fp::invalid());
    if (x475 != 0) {
      if (x474 != 0) {
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x476 = args[1][4];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x477 = args[1][5];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x478 = args[1][6];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x479 = args[1][7];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x477);
          reg = x477;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x478);
          reg = x478;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x479);
          reg = x479;
        }
        {
          host_args.at(0) = x86;
          host_args.at(1) = x476;
          host_args.at(2) = x477;
          host_args.at(3) = x478;
          host_args.at(4) = x479;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x480 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x480 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x481 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x481 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x482 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x482 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x483 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x483 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x480);
          reg = x480;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x481);
          reg = x481;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x482);
          reg = x482;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x484 = args[1][8];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x485 = args[1][9];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x486 = args[1][10];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x487 = args[1][11];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x484);
          reg = x484;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x485);
          reg = x485;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x486);
          reg = x486;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x487);
          reg = x487;
        }
        {
          host_args.at(0) = x85;
          host_args.at(1) = x484;
          host_args.at(2) = x485;
          host_args.at(3) = x486;
          host_args.at(4) = x487;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x488 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x488 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x489 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x489 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x490 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x490 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x491 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x491 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x488);
          reg = x488;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x489);
          reg = x489;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x490);
          reg = x490;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x491);
          reg = x491;
        }
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x492 = args[1][12];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x493 = args[1][13];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x494 = args[1][14];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x495 = args[1][15];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x492);
          reg = x492;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x493);
          reg = x493;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x494);
          reg = x494;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x495);
          reg = x495;
        }
        {
          host_args.at(0) = x84;
          host_args.at(1) = x492;
          host_args.at(2) = x493;
          host_args.at(3) = x494;
          host_args.at(4) = x495;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x496 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x496 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x497 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x497 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x498 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x498 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x499 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x499 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x496);
          reg = x496;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x497);
          reg = x497;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x498);
          reg = x498;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x499);
          reg = x499;
        }
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x500 = args[1][16];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x501 = args[1][17];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x502 = args[1][18];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x503 = args[1][19];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x500);
          reg = x500;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x501);
          reg = x501;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x502);
          reg = x502;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x503);
          reg = x503;
        }
        {
          host_args.at(0) = x83;
          host_args.at(1) = x500;
          host_args.at(2) = x501;
          host_args.at(3) = x502;
          host_args.at(4) = x503;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x504 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x504 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x505 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x505 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x506 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x506 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x507 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x507 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x504);
          reg = x504;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x505);
          reg = x505;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x506);
          reg = x506;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x507);
          reg = x507;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":54:17)
      auto x508 = x93 - x474;
      if (x508 != 0) {
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x509 = args[1][20];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x510 = args[1][21];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x511 = args[1][22];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x512 = args[1][23];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x509);
          reg = x509;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x510);
          reg = x510;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x511);
          reg = x511;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x512);
          reg = x512;
        }
        {
          host_args.at(0) = x82;
          host_args.at(1) = x509;
          host_args.at(2) = x510;
          host_args.at(3) = x511;
          host_args.at(4) = x512;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x513 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x513 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x514 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x514 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x515 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x515 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x516 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x516 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x513);
          reg = x513;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x514);
          reg = x514;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x515);
          reg = x515;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x516);
          reg = x516;
        }
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x517 = args[1][24];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x518 = args[1][25];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x519 = args[1][26];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x520 = args[1][27];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x517);
          reg = x517;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x518);
          reg = x518;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x519);
          reg = x519;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x520);
          reg = x520;
        }
        {
          host_args.at(0) = x81;
          host_args.at(1) = x517;
          host_args.at(2) = x518;
          host_args.at(3) = x519;
          host_args.at(4) = x520;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x521 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x521 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x522 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x522 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x523 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x523 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x524 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x524 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x521);
          reg = x521;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x522);
          reg = x522;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x523);
          reg = x523;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x524);
          reg = x524;
        }
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x525 = args[1][28];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x526 = args[1][29];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x527 = args[1][30];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x528 = args[1][31];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x525);
          reg = x525;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x526);
          reg = x526;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x527);
          reg = x527;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x528);
          reg = x528;
        }
        {
          host_args.at(0) = x80;
          host_args.at(1) = x525;
          host_args.at(2) = x526;
          host_args.at(3) = x527;
          host_args.at(4) = x528;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x529 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x529 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x530 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x530 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x531 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x531 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x532 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x532 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x529);
          reg = x529;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x530);
          reg = x530;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x531);
          reg = x531;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x532);
          reg = x532;
        }
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x533 = args[1][32];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x534 = args[1][33];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x535 = args[1][34];
        // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x536 = args[1][35];
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x533);
          reg = x533;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x534);
          reg = x534;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x535);
          reg = x535;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x536);
          reg = x536;
        }
        {
          host_args.at(0) = x79;
          host_args.at(1) = x533;
          host_args.at(2) = x534;
          host_args.at(3) = x535;
          host_args.at(4) = x536;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x537 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x537 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x538 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x538 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x539 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x539 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x540 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x540 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x537);
          reg = x537;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x538);
          reg = x538;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x539);
          reg = x539;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x540);
          reg = x540;
        }
      }
      // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x541 = args[1][0];
      // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x542 = args[1][1];
      // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x543 = args[1][2];
      // loc("Top/Mux/4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x544 = args[1][3];
      // loc("./cirgen/components/u32.h":25:12)
      auto x545 = x542 * x88;
      // loc("./cirgen/components/u32.h":24:12)
      auto x546 = x541 + x545;
      // loc("./cirgen/components/u32.h":26:12)
      auto x547 = x543 * x78;
      // loc("./cirgen/components/u32.h":24:12)
      auto x548 = x546 + x547;
      // loc("./cirgen/components/u32.h":27:12)
      auto x549 = x544 * x77;
      // loc("./cirgen/components/u32.h":24:12)
      auto x550 = x548 + x549;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x551 = x550 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x552 = Fp(x551.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x552);
          reg = x552;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x553 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x553 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x554 = x551 - x553;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x555 = x554 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x556 = Fp(x555.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x556);
          reg = x556;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x557 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x557 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x558 = x555 - x557;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x559 = x558 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x560 = Fp(x559.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x560);
          reg = x560;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x561 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x561 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x562 = x559 - x561;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x563 = x562 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x564 = Fp(x563.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x564);
          reg = x564;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x565 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x565 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x566 = x563 - x565;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x567 = x566 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x567);
        reg = x567;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x568 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x568 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x569 = x93 - x568;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x570 = x568 * x569;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x570);
        reg = x570;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x571 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x571 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x572 = x90 - x568;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x573 = x571 * x572;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x573 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    }
    // loc("cirgen/circuit/rv32im/body.cpp":63:16)
    auto x574 = x93 - x475;
    if (x574 != 0) {
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x575 = args[2][6 * steps + ((cycle - 1) & mask)];
      assert(x575 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x576 = args[2][7 * steps + ((cycle - 1) & mask)];
      assert(x576 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":28:10)
      auto x577 = x576 * x88;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x578 = x575 + x577;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x579 = args[2][8 * steps + ((cycle - 1) & mask)];
      assert(x579 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":29:10)
      auto x580 = x579 * x78;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x581 = x578 + x580;
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x582 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x582 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":30:10)
      auto x583 = x582 * x77;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x584 = x581 + x583;
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x585 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x585 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":31:10)
      auto x586 = x585 * x73;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x587 = x584 + x586;
      // loc("cirgen/circuit/rv32im/body.cpp":27:10)
      auto x588 = x587 - x76;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x589 = x588 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x590 = Fp(x589.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x590);
          reg = x590;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x591 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x591 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x592 = x589 - x591;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x593 = x592 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x594 = Fp(x593.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x594);
          reg = x594;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x595 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x595 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x596 = x593 - x595;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x597 = x596 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x598 = Fp(x597.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x598);
          reg = x598;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x599 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x599 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x600 = x597 - x599;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x601 = x600 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x602 = Fp(x601.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x602);
          reg = x602;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x603 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x603 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x604 = x601 - x603;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x605 = x604 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x605);
        reg = x605;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x606 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x606 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x607 = x93 - x606;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x608 = x606 * x607;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x608);
        reg = x608;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x609 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x609 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x610 = x90 - x606;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x611 = x609 * x610;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x611 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      if (x474 != 0) {
        // loc("Top/Mux/5/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x612 = args[2][101 * steps + ((cycle - 1) & mask)];
        assert(x612 != Fp::invalid());
        // loc("Top/Mux/5/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x613 = args[2][102 * steps + ((cycle - 1) & mask)];
        assert(x613 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x614 = x613 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x615 = x612 + x614;
        // loc("Top/Mux/5/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x616 = args[2][103 * steps + ((cycle - 1) & mask)];
        assert(x616 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x617 = x616 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x618 = x615 + x617;
        // loc("Top/Mux/5/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x619 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x619 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x620 = x619 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x621 = x618 + x620;
        // loc("Top/Mux/5/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x622 = args[2][105 * steps + ((cycle - 1) & mask)];
        assert(x622 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x623 = x622 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x624 = x621 + x623;
        // loc("Top/Mux/5/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x625 = args[2][106 * steps + ((cycle - 1) & mask)];
        assert(x625 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x626 = x625 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x627 = x624 + x626;
        // loc("Top/Mux/5/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x628 = args[2][107 * steps + ((cycle - 1) & mask)];
        assert(x628 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x629 = x628 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x630 = x627 + x629;
        // loc("Top/Mux/5/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x631 = args[2][108 * steps + ((cycle - 1) & mask)];
        assert(x631 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x632 = x631 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x633 = x630 + x632;
        // loc("Top/Mux/5/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x634 = args[2][109 * steps + ((cycle - 1) & mask)];
        assert(x634 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x635 = x634 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x636 = x633 + x635;
        // loc("Top/Mux/5/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x637 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x637 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x638 = x637 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x639 = x636 + x638;
        // loc("Top/Mux/5/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x640 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x640 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x641 = x640 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x642 = x639 + x641;
        // loc("Top/Mux/5/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x643 = args[2][112 * steps + ((cycle - 1) & mask)];
        assert(x643 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x644 = x643 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x645 = x642 + x644;
        // loc("Top/Mux/5/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x646 = args[2][113 * steps + ((cycle - 1) & mask)];
        assert(x646 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x647 = x646 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x648 = x645 + x647;
        // loc("Top/Mux/5/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x649 = args[2][114 * steps + ((cycle - 1) & mask)];
        assert(x649 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x650 = x649 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x651 = x648 + x650;
        // loc("cirgen/circuit/rv32im/body.cpp":68:42)
        auto x652 = x651 - x63;
        // loc("cirgen/circuit/rv32im/body.cpp":68:42)
        if (x652 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:68");
        {
          host_args.at(0) = x86;
          host_args.at(1) = x92;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x653 = host_outs.at(0);
          auto x654 = host_outs.at(1);
          auto x655 = host_outs.at(2);
          auto x656 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x653);
            reg = x653;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x654);
            reg = x654;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x655);
            reg = x655;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x656);
            reg = x656;
          }
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x657 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x657 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x658 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x658 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x659 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x659 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x660 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x660 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x657);
          reg = x657;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x658);
          reg = x658;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x659);
          reg = x659;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x660);
          reg = x660;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][40] = x657;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][41] = x658;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][42] = x659;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][43] = x660;
        {
          host_args.at(0) = x85;
          host_args.at(1) = x92;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x661 = host_outs.at(0);
          auto x662 = host_outs.at(1);
          auto x663 = host_outs.at(2);
          auto x664 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x663);
            reg = x663;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x664);
            reg = x664;
          }
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x665 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x665 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x666 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x666 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x667 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x667 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x668 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x668 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x665);
          reg = x665;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x666);
          reg = x666;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x667);
          reg = x667;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x668);
          reg = x668;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][44] = x665;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][45] = x666;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][46] = x667;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][47] = x668;
        {
          host_args.at(0) = x84;
          host_args.at(1) = x92;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x669 = host_outs.at(0);
          auto x670 = host_outs.at(1);
          auto x671 = host_outs.at(2);
          auto x672 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x669);
            reg = x669;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x670);
            reg = x670;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x671);
            reg = x671;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x672);
            reg = x672;
          }
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x673 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x673 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x674 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x674 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x675 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x675 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x676 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x676 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x673);
          reg = x673;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x674);
          reg = x674;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x675);
          reg = x675;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x676);
          reg = x676;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][48] = x673;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][49] = x674;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][50] = x675;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][51] = x676;
        {
          host_args.at(0) = x83;
          host_args.at(1) = x92;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x677 = host_outs.at(0);
          auto x678 = host_outs.at(1);
          auto x679 = host_outs.at(2);
          auto x680 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x677);
            reg = x677;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x678);
            reg = x678;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x679);
            reg = x679;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x680);
            reg = x680;
          }
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x681 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x681 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x682 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x682 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x683 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x683 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x684 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x684 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x681);
          reg = x681;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x682);
          reg = x682;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x683);
          reg = x683;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x684);
          reg = x684;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][52] = x681;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][53] = x682;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][54] = x683;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][55] = x684;
        // loc("cirgen/circuit/rv32im/body.cpp":35:52)
        auto x685 = x606 * x76;
        // loc("cirgen/circuit/rv32im/body.cpp":35:41)
        auto x686 = x603 + x685;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][36] = x591;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][37] = x595;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][38] = x599;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][39] = x686;
      }
      // loc("cirgen/circuit/rv32im/body.cpp":76:17)
      auto x687 = x93 - x474;
      if (x687 != 0) {
        {
          host_args.at(0) = x82;
          host_args.at(1) = x92;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x688 = host_outs.at(0);
          auto x689 = host_outs.at(1);
          auto x690 = host_outs.at(2);
          auto x691 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x688);
            reg = x688;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x689);
            reg = x689;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x690);
            reg = x690;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x691);
            reg = x691;
          }
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x692 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x692 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x693 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x693 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x694 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x694 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x695 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x695 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x692);
          reg = x692;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x693);
          reg = x693;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x694);
          reg = x694;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x695);
          reg = x695;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][56] = x692;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][57] = x693;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][58] = x694;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][59] = x695;
        {
          host_args.at(0) = x81;
          host_args.at(1) = x92;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x696 = host_outs.at(0);
          auto x697 = host_outs.at(1);
          auto x698 = host_outs.at(2);
          auto x699 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x696);
            reg = x696;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x697);
            reg = x697;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x698);
            reg = x698;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x699);
            reg = x699;
          }
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x700 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x700 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x701 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x701 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x702 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x702 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x703 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x703 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x700);
          reg = x700;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x701);
          reg = x701;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x702);
          reg = x702;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x703);
          reg = x703;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][60] = x700;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][61] = x701;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][62] = x702;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][63] = x703;
        {
          host_args.at(0) = x80;
          host_args.at(1) = x92;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x704 = host_outs.at(0);
          auto x705 = host_outs.at(1);
          auto x706 = host_outs.at(2);
          auto x707 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x704);
            reg = x704;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x705);
            reg = x705;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x706);
            reg = x706;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x707);
            reg = x707;
          }
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x708 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x708 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x709 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x709 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x710 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x710 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x711 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x711 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x708);
          reg = x708;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x709);
          reg = x709;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x710);
          reg = x710;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x711);
          reg = x711;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][64] = x708;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][65] = x709;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][66] = x710;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][67] = x711;
        {
          host_args.at(0) = x79;
          host_args.at(1) = x92;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x712 = host_outs.at(0);
          auto x713 = host_outs.at(1);
          auto x714 = host_outs.at(2);
          auto x715 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x712);
            reg = x712;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x713);
            reg = x713;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x714);
            reg = x714;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x715);
            reg = x715;
          }
        }
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x716 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x716 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x717 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x717 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x718 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x718 != Fp::invalid());
        // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x719 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x719 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x473);
          reg = x473;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x716);
          reg = x716;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x717);
          reg = x717;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x718);
          reg = x718;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x719);
          reg = x719;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][68] = x716;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][69] = x717;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][70] = x718;
        // loc("cirgen/components/u32.cpp":34:5)
        args[1][71] = x719;
      }
    }
    // loc("cirgen/circuit/rv32im/body.cpp":84:3)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x62);
      reg = x62;
    }
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x720 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x720 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x721 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x721 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x722 = x721 * x88;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x723 = x720 + x722;
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x724 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x724 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x725 = x724 * x78;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x726 = x723 + x725;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x727 = args[2][70 * steps + ((cycle - 0) & mask)];
    assert(x727 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x728 = x727 * x77;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x729 = x726 + x728;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x730 = args[2][71 * steps + ((cycle - 0) & mask)];
    assert(x730 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x731 = x730 * x73;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x732 = x729 + x731;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x733 = x732 - x76;
    host_args.at(0) = x473;
    host_args.at(1) = x733;
    host(ctx, "log", "%u: Reset: PC = %10x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":39:25))
  auto x734 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x734 != Fp::invalid());
  if (x734 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x735 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x735 != Fp::invalid());
    // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x736 = args[2][6 * steps + ((cycle - 1) & mask)];
    assert(x736 != Fp::invalid());
    // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x737 = args[2][7 * steps + ((cycle - 1) & mask)];
    assert(x737 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x738 = x737 * x88;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x739 = x736 + x738;
    // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
    auto x740 = args[2][8 * steps + ((cycle - 1) & mask)];
    assert(x740 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x741 = x740 * x78;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x742 = x739 + x741;
    // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x743 = args[2][70 * steps + ((cycle - 1) & mask)];
    assert(x743 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x744 = x743 * x77;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x745 = x742 + x744;
    // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x746 = args[2][71 * steps + ((cycle - 1) & mask)];
    assert(x746 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x747 = x746 * x73;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x748 = x745 + x747;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x749 = x748 - x76;
    {
      // loc("Top/Mux/5/Reg"("cirgen/circuit/rv32im/body.cpp":136:45))
      auto x750 = args[2][99 * steps + ((cycle - 1) & mask)];
      assert(x750 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":137:24)
      auto x751 = x750 - x62;
      // loc("cirgen/circuit/rv32im/body.cpp":137:24)
      auto x752 = (x751 == 0) ? Fp(1) : Fp(0);
      if (x752 != 0) {
        host_args.at(0) = x735;
        host_args.at(1) = x749;
        host(ctx, "log", "%u: BODY pc: %10x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x749;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x735;
        host_args.at(1) = x749;
        host(ctx, "getMajor", "", host_args.data(), 2, host_outs.data(), 1);
        auto x753 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x754 = (x753 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x754);
            reg = x754;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x755 = x753 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x756 = (x755 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x756);
            reg = x756;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x757 = x753 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x758 = (x757 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x758);
            reg = x758;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x759 = x753 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x760 = (x759 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x760);
            reg = x760;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x761 = x753 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x762 = (x761 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x762);
            reg = x762;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x763 = x753 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x764 = (x763 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x764);
            reg = x764;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x765 = x753 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x766 = (x765 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x766);
            reg = x766;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x767 = x753 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x768 = (x767 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x768);
            reg = x768;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x769 = x753 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x770 = (x769 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x770);
            reg = x770;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x771 = x753 - x68;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x772 = (x771 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x772);
            reg = x772;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x773 = x753 - x67;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x774 = (x773 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x774);
            reg = x774;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x775 = x753 - x66;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x776 = (x775 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x776);
            reg = x776;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x777 = x753 - x65;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x778 = (x777 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x778);
            reg = x778;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x779 = x753 - x64;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x780 = (x779 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x780);
            reg = x780;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x781 = x753 - x63;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x782 = (x781 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x782);
            reg = x782;
          }
        }
        // loc("Top/Mux/5/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x783 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x783 != Fp::invalid());
        // loc("Top/Mux/5/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x784 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x784 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x785 = x784 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x786 = x783 + x785;
        // loc("Top/Mux/5/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x787 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x787 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x788 = x787 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x789 = x786 + x788;
        // loc("Top/Mux/5/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x790 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x790 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x791 = x790 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x792 = x789 + x791;
        // loc("Top/Mux/5/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x793 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x793 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x794 = x793 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x795 = x792 + x794;
        // loc("Top/Mux/5/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x796 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x796 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x797 = x796 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x798 = x795 + x797;
        // loc("Top/Mux/5/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x799 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x799 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x800 = x799 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x801 = x798 + x800;
        // loc("Top/Mux/5/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x802 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x802 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x803 = x802 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x804 = x801 + x803;
        // loc("Top/Mux/5/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x805 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x805 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x806 = x805 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x807 = x804 + x806;
        // loc("Top/Mux/5/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x808 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x808 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x809 = x808 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x810 = x807 + x809;
        // loc("Top/Mux/5/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x811 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x811 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x812 = x811 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x813 = x810 + x812;
        // loc("Top/Mux/5/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x814 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x814 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x815 = x814 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x816 = x813 + x815;
        // loc("Top/Mux/5/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x817 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x817 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x818 = x817 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x819 = x816 + x818;
        // loc("Top/Mux/5/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x820 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x820 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x821 = x820 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x822 = x819 + x821;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x823 = x822 - x753;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x823 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":144:20)
      auto x824 = x93 - x752;
      if (x824 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":145:47)
        auto x825 = x750 - x63;
        // loc("cirgen/circuit/rv32im/body.cpp":145:47)
        auto x826 = (x825 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":145:47)
        auto x827 = x93 - x826;
        if (x827 != 0) {
          host_args.at(0) = x735;
          host_args.at(1) = x749;
          host_args.at(2) = x750;
          host(ctx, "log", "%u: BODY pc: %10x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x828 = (x750 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x828);
            reg = x828;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x829 = x750 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x830 = (x829 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x830);
            reg = x830;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x831 = x750 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x832 = (x831 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x832);
            reg = x832;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x833 = x750 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x834 = (x833 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x834);
            reg = x834;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x835 = x750 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x836 = (x835 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x836);
            reg = x836;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x837 = x750 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x838 = (x837 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x838);
            reg = x838;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x839 = x750 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x840 = (x839 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x840);
            reg = x840;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x841 = x750 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x842 = (x841 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x842);
            reg = x842;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x843 = x750 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x844 = (x843 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x844);
            reg = x844;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x845 = x750 - x68;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x846 = (x845 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x846);
            reg = x846;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x847 = x750 - x67;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x848 = (x847 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x848);
            reg = x848;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x849 = x750 - x66;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x850 = (x849 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x850);
            reg = x850;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x851 = x750 - x65;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x852 = (x851 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x852);
            reg = x852;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x853 = x750 - x64;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x854 = (x853 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x854);
            reg = x854;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x826);
            reg = x826;
          }
        }
        // loc("Top/Mux/5/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x855 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x855 != Fp::invalid());
        // loc("Top/Mux/5/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x856 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x856 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x857 = x856 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x858 = x855 + x857;
        // loc("Top/Mux/5/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x859 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x859 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x860 = x859 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x861 = x858 + x860;
        // loc("Top/Mux/5/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x862 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x862 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x863 = x862 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x864 = x861 + x863;
        // loc("Top/Mux/5/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x865 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x865 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x866 = x865 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x867 = x864 + x866;
        // loc("Top/Mux/5/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x868 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x868 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x869 = x868 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x870 = x867 + x869;
        // loc("Top/Mux/5/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x871 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x871 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x872 = x871 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x873 = x870 + x872;
        // loc("Top/Mux/5/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x874 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x874 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x875 = x874 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x876 = x873 + x875;
        // loc("Top/Mux/5/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x877 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x877 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x878 = x877 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x879 = x876 + x878;
        // loc("Top/Mux/5/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x880 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x880 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x881 = x880 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x882 = x879 + x881;
        // loc("Top/Mux/5/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x883 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x883 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x884 = x883 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x885 = x882 + x884;
        // loc("Top/Mux/5/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x886 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x886 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x887 = x886 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x888 = x885 + x887;
        // loc("Top/Mux/5/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x889 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x889 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x890 = x889 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x891 = x888 + x890;
        // loc("Top/Mux/5/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x892 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x892 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x893 = x892 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x894 = x891 + x893;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x895 = x894 - x750;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x895 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
    }
    // loc("Top/Mux/5/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":39:25))
    auto x896 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x896 != Fp::invalid());
    if (x896 != 0) {
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x897 = x749 * x74;
      {
        host_args.at(0) = x897;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x898 = host_outs.at(0);
        auto x899 = host_outs.at(1);
        auto x900 = host_outs.at(2);
        auto x901 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x898);
          reg = x898;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x899);
          reg = x899;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x900);
          reg = x900;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x901);
          reg = x901;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x902 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x902 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x903 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x903 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x904 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x904 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x905 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x905 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x897);
        reg = x897;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x902);
        reg = x902;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x903);
        reg = x903;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x904);
        reg = x904;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x905);
        reg = x905;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x906 = Fp(x905.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x907 = x906 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x907);
          reg = x907;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x908 = Fp(x905.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x909 = x908 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x909);
          reg = x909;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x910 = Fp(x905.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x911 = x910 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x911);
          reg = x911;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x912 = Fp(x905.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x913 = x912 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x913);
          reg = x913;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x914 = Fp(x905.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x915 = x914 * x53;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x915);
          reg = x915;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x916 = Fp(x905.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x916);
          reg = x916;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x917 = Fp(x904.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x918 = x917 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x918);
          reg = x918;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x919 = Fp(x904.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x920 = x919 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x920);
          reg = x920;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x921 = Fp(x904.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x922 = x921 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x922);
          reg = x922;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x923 = Fp(x904.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x924 = x923 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x924);
          reg = x924;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x925 = Fp(x904.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x925);
          reg = x925;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x926 = Fp(x903.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x927 = x926 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x927);
          reg = x927;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x928 = Fp(x903.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x929 = x928 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x929);
          reg = x929;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x930 = Fp(x903.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x931 = x930 * x55;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x931);
          reg = x931;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x932 = Fp(x903.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x933 = x932 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x933);
          reg = x933;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x934 = Fp(x903.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x934);
          reg = x934;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x935 = Fp(x902.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x936 = x935 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x936);
          reg = x936;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x937 = Fp(x902.asUInt32() & x49.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x937);
          reg = x937;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x938 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x938 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x939 = x938 * x52;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x940 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x940 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x941 = x940 * x56;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x942 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x942 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x943 = x942 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x944 = x941 + x943;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x945 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x945 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x946 = x945 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x947 = x944 + x946;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x948 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x948 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x949 = x947 + x948;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x950 = x939 + x949;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x951 = x950 * x90;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x952 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x952 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x953 = x951 + x952;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x954 = x905 - x953;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x954 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x955 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x955 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x956 = x955 * x69;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x957 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x957 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x958 = x957 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x959 = x956 + x958;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x960 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x960 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x961 = x959 + x960;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x962 = x961 * x56;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x963 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x963 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x964 = x963 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x965 = x962 + x964;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x966 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x966 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x967 = x965 + x966;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x968 = x904 - x967;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x968 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x969 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x969 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x970 = x969 * x61;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x971 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x971 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x972 = x971 * x76;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x973 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x973 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x974 = x972 + x973;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x975 = x974 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x976 = x970 + x975;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x977 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x977 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x978 = x977 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x979 = x976 + x978;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x980 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x980 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x981 = x979 + x980;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x982 = x903 - x981;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x982 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x983 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x983 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x984 = x983 * x61;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x985 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x985 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x986 = x984 + x985;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x987 = x902 - x986;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x987 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x902;
        host_args.at(1) = x903;
        host_args.at(2) = x904;
        host_args.at(3) = x905;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x988 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x989 = (x988 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x989);
            reg = x989;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x990 = x988 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x991 = (x990 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x991);
            reg = x991;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x992 = x988 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x993 = (x992 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x993);
            reg = x993;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x994 = x988 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x995 = (x994 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x995);
            reg = x995;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x996 = x988 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x997 = (x996 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x997);
            reg = x997;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x998 = x988 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x999 = (x998 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x999);
            reg = x999;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1000 = x988 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1001 = (x1000 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1001);
            reg = x1001;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1002 = x988 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1003 = (x1002 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1003);
            reg = x1003;
          }
        }
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1004 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1004 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1005 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1005 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1006 = x1005 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1007 = x1004 + x1006;
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1008 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1008 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1009 = x1008 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1010 = x1007 + x1009;
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1011 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1011 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1012 = x1011 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1013 = x1010 + x1012;
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1014 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1014 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1015 = x1014 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1016 = x1013 + x1015;
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1017 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1017 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1018 = x1017 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1019 = x1016 + x1018;
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1020 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1020 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1021 = x1020 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1022 = x1019 + x1021;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x1023 = x1022 - x988;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x1023 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x1024 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x1024 != Fp::invalid());
        if (x1024 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
        auto x1025 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1025 != Fp::invalid());
        if (x1025 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x1026 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1026 != Fp::invalid());
        if (x1026 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x47);
            reg = x47;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x1027 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1027 != Fp::invalid());
        if (x1027 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
        auto x1028 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1028 != Fp::invalid());
        if (x1028 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x1029 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1029 != Fp::invalid());
        if (x1029 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x1030 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1030 != Fp::invalid());
        if (x1030 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
        auto x1031 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1031 != Fp::invalid());
        if (x1031 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1032 = x945 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1033 = x948 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1034 = x1032 + x1033;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1035 = x952 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1036 = x1035 + x961;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1037 = x1034 + x1036;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1038 = x938 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1039 = x940 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1040 = x1038 + x1039;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1041 = x1040 + x942;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1042 = x938 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1037);
            reg = x1037;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1041);
            reg = x1041;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1042);
            reg = x1042;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1042);
            reg = x1042;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1043 = x963 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1044 = x966 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1045 = x1043 + x1044;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1046 = x1045 + x969;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1047 = x1046 + x45;
      {
        host_args.at(0) = x1047;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1048 = host_outs.at(0);
        auto x1049 = host_outs.at(1);
        auto x1050 = host_outs.at(2);
        auto x1051 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1048);
          reg = x1048;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1049);
          reg = x1049;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1050);
          reg = x1050;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1051);
          reg = x1051;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1052 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x1052 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1053 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1053 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1054 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1054 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1055 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1055 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1047);
        reg = x1047;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1053);
        reg = x1053;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1054);
        reg = x1054;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1055);
        reg = x1055;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1056 = x952 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1057 = x1056 + x961;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1058 = x1057 + x45;
      {
        host_args.at(0) = x1058;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1059 = host_outs.at(0);
        auto x1060 = host_outs.at(1);
        auto x1061 = host_outs.at(2);
        auto x1062 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1059);
          reg = x1059;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1060);
          reg = x1060;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1061);
          reg = x1061;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1062);
          reg = x1062;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1063 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x1063 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1064 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x1064 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1065 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x1065 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1066 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x1066 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1058);
        reg = x1058;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1063);
        reg = x1063;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1064);
        reg = x1064;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1065);
        reg = x1065;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1066);
        reg = x1066;
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1067 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x1067 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":139:17)
      auto x1068 = x93 - x1067;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1069 = x1068 * x1052;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1070 = x1068 * x1053;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1071 = x1068 * x1054;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1072 = x1068 * x1055;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1073 = x746 * x76;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1074 = x743 + x1073;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1075 = x736 - x76;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1076 = x1067 * x1075;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1077 = x1067 * x737;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1078 = x1067 * x740;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1079 = x1067 * x1074;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1080 = x1069 + x1076;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1081 = x1070 + x1077;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1082 = x1071 + x1078;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1083 = x1072 + x1079;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1084 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x1084 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x1085 = x93 - x1084;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1086 = x1085 * x1063;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1087 = x1085 * x1064;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1088 = x1085 * x1065;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1089 = x1085 * x1066;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1090 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1090 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1091 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1091 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1092 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1092 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1093 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1093 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1094 = x1084 * x1090;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1095 = x1084 * x1091;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1096 = x1084 * x1092;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1097 = x1084 * x1093;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1098 = x1086 + x1094;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1099 = x1087 + x1095;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1100 = x1088 + x1096;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1101 = x1089 + x1097;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1102 = Fp(x1083.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1103 = x1102 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1103);
          reg = x1103;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1104 = Fp(x1083.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1105 = x1104 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1105);
          reg = x1105;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1106 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1106 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1107 = x1106 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1108 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1108 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1109 = x1108 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1110 = x1107 + x1109;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1111 = x1083 - x1110;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1111 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1112 = Fp(x1101.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1113 = x1112 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1113);
          reg = x1113;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1114 = Fp(x1101.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1115 = x1114 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1115);
          reg = x1115;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1116 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1116 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1117 = x1116 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1118 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x1118 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1119 = x1118 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1120 = x1117 + x1119;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1121 = x1101 - x1120;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1121 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1098);
        reg = x1098;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1099);
        reg = x1099;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1100);
        reg = x1100;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1101);
        reg = x1101;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1122 = Fp(x1080.asUInt32() & x1098.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1123 = Fp(x1081.asUInt32() & x1099.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1124 = Fp(x1082.asUInt32() & x1100.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1125 = Fp(x1083.asUInt32() & x1101.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1122);
          reg = x1122;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1123);
          reg = x1123;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1124);
          reg = x1124;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1125);
          reg = x1125;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1126 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1126 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1127 = x1126 * x1080;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1128 = x1126 * x1081;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1129 = x1126 * x1082;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1130 = x1126 * x1083;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1131 = x1127 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1132 = x1128 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1133 = x1129 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1134 = x1130 + x89;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1135 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1135 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1136 = x1135 * x1098;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1137 = x1135 * x1099;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1138 = x1135 * x1100;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1139 = x1135 * x1101;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1140 = x1131 + x1136;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1141 = x1132 + x1137;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1142 = x1133 + x1138;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1143 = x1134 + x1139;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1144 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1144 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1145 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1145 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1146 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1146 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1147 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1147 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1148 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1148 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1149 = x1144 * x1145;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1150 = x1144 * x1146;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1151 = x1144 * x1147;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1152 = x1144 * x1148;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1153 = x1140 + x1149;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1154 = x1141 + x1150;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1155 = x1142 + x1151;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1156 = x1143 + x1152;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1157 = x1154 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1158 = x1153 + x1157;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1159 = Fp(x1158.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1159);
          reg = x1159;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1160 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x1160 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1161 = x1158 - x1160;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1162 = x1161 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1163 = Fp(x1162.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1163);
          reg = x1163;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1164 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1164 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1165 = x1162 - x1164;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1166 = x1165 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1166);
        reg = x1166;
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1167 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1167 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1168 = x1167 + x1155;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1169 = x1156 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1170 = x1168 + x1169;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1171 = Fp(x1170.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1171);
          reg = x1171;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1172 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1172 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1173 = x1170 - x1172;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1174 = x1173 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1175 = Fp(x1174.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1175);
          reg = x1175;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1176 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1176 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1177 = x1174 - x1176;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1178 = x1177 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1178);
        reg = x1178;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1179 = Fp(x1176.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1180 = x1179 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1180);
          reg = x1180;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1181 = Fp(x1176.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1182 = x1181 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1182);
          reg = x1182;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1183 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x1183 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1184 = x1183 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1185 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x1185 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1186 = x1185 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1187 = x1184 + x1186;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1188 = x1176 - x1187;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1188 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1189 = x93 - x1116;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1190 = x1106 * x1189;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1191 = x93 - x1183;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1192 = x1190 * x1191;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1193 = x93 - x1106;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1194 = x1193 * x1116;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1195 = x1194 * x1183;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1196 = x1192 + x1195;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][209 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1196);
        reg = x1196;
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1197 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x1197 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1198 = x1197 + x1183;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1199 = x1197 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1200 = x1199 * x1183;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1201 = x1198 - x1200;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1201);
        reg = x1201;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1202 = x1164 * x88;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1203 = x1160 + x1202;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1204 = (x1203 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1204);
          reg = x1204;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1205 = inv(x1203);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1205);
          reg = x1205;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1206 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x1206 != Fp::invalid());
      if (x1206 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1203 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1207 = x93 - x1206;
      if (x1207 != 0) {
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1208 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x1208 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1209 = x1203 * x1208;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1210 = x1209 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1210 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1211 = x1176 * x88;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1212 = x1172 + x1211;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1213 = x1207 * x78;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1214 = x1212 + x1213;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1215 = (x1214 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1215);
          reg = x1215;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1216 = inv(x1214);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1216);
          reg = x1216;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1217 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x1217 != Fp::invalid());
      if (x1217 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1214 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1218 = x93 - x1217;
      if (x1218 != 0) {
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1219 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x1219 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1220 = x1214 * x1219;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1221 = x1220 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1221 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1222 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x1222 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1223 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1223 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1224 = x93 - x1223;
      host_args.at(0) = x1090;
      host_args.at(1) = x1091;
      host_args.at(2) = x1092;
      host_args.at(3) = x1093;
      host_args.at(4) = x1046;
      host_args.at(5) = x1052;
      host_args.at(6) = x1053;
      host_args.at(7) = x1054;
      host_args.at(8) = x1055;
      host_args.at(9) = x1057;
      host_args.at(10) = x1063;
      host_args.at(11) = x1064;
      host_args.at(12) = x1065;
      host_args.at(13) = x1066;
      host_args.at(14) = x1080;
      host_args.at(15) = x1081;
      host_args.at(16) = x1082;
      host_args.at(17) = x1083;
      host_args.at(18) = x1098;
      host_args.at(19) = x1099;
      host_args.at(20) = x1100;
      host_args.at(21) = x1101;
      host_args.at(22) = x1160;
      host_args.at(23) = x1164;
      host_args.at(24) = x1172;
      host_args.at(25) = x1176;
      host_args.at(26) = x1217;
      host_args.at(27) = x1222;
      host_args.at(28) = x1224;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1225 = x977 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1226 = x980 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1227 = x1225 + x1226;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1228 = x1227 + x983;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1229 = (x1228 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1229);
          reg = x1229;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1230 = inv(x1228);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1230);
          reg = x1230;
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1231 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x1231 != Fp::invalid());
      if (x1231 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1228 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1232 = x93 - x1231;
      if (x1232 != 0) {
        // loc("Top/Mux/5/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1233 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x1233 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1234 = x1228 * x1233;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1235 = x1234 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1235 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":161:13)
      auto x1236 = x749 + x76;
      // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1237 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1237 != Fp::invalid());
      if (x1237 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1238 = x985 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1238 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x974 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x950 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1239 = x1236 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1240 = Fp(x1239.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1240);
            reg = x1240;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1241 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1241 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1242 = x1239 - x1241;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1243 = x1242 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1244 = Fp(x1243.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1244);
            reg = x1244;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1245 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1245 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1246 = x1243 - x1245;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1247 = x1246 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1248 = Fp(x1247.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1248);
            reg = x1248;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1249 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1249 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1250 = x1247 - x1249;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1251 = x1250 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1252 = Fp(x1251.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1252);
            reg = x1252;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1253 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1253 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1254 = x1251 - x1253;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1255 = x1254 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1255);
          reg = x1255;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1256 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1256 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1257 = x93 - x1256;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1258 = x1256 * x1257;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1258);
          reg = x1258;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1259 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1259 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1260 = x90 - x1256;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1261 = x1259 * x1260;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1261 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1262 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1262 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1262);
          reg = x1262;
        }
        if (x1232 != 0) {
          host_args.at(0) = x1228;
          host_args.at(1) = x1160;
          host_args.at(2) = x1164;
          host_args.at(3) = x1172;
          host_args.at(4) = x1176;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1263 = x1228 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1160);
            reg = x1160;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1164);
            reg = x1164;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1172);
            reg = x1172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
          {
            host_args.at(0) = x1263;
            host_args.at(1) = x1160;
            host_args.at(2) = x1164;
            host_args.at(3) = x1172;
            host_args.at(4) = x1176;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1264 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1264 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1265 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1265 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1266 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1266 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1267 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1267 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1263);
            reg = x1263;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1264);
            reg = x1264;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1265);
            reg = x1265;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1266);
            reg = x1266;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1267);
            reg = x1267;
          }
        }
        if (x1231 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
      auto x1268 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1268 != Fp::invalid());
      if (x1268 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1269 = x985 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1269 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x974 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1270 = x950 - x58;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1270 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1271 = x1236 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1272 = Fp(x1271.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1272);
            reg = x1272;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1273 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1273 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1274 = x1271 - x1273;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1275 = x1274 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1276 = Fp(x1275.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1276);
            reg = x1276;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1277 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1277 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1278 = x1275 - x1277;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1279 = x1278 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1280 = Fp(x1279.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1280);
            reg = x1280;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1281 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1281 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1282 = x1279 - x1281;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1283 = x1282 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1284 = Fp(x1283.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1284);
            reg = x1284;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1285 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1286 = x1283 - x1285;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1287 = x1286 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1287);
          reg = x1287;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1288 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1289 = x93 - x1288;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1290 = x1288 * x1289;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1290);
          reg = x1290;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1291 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1292 = x90 - x1288;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1293 = x1291 * x1292;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1293 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1294 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1294 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1294);
          reg = x1294;
        }
        if (x1232 != 0) {
          host_args.at(0) = x1228;
          host_args.at(1) = x1160;
          host_args.at(2) = x1164;
          host_args.at(3) = x1172;
          host_args.at(4) = x1176;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
          auto x1295 = x1228 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1160);
            reg = x1160;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1164);
            reg = x1164;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1172);
            reg = x1172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
          {
            host_args.at(0) = x1295;
            host_args.at(1) = x1160;
            host_args.at(2) = x1164;
            host_args.at(3) = x1172;
            host_args.at(4) = x1176;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1296 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1296 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1297 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1297 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1298 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1298 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1299 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1299 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1295);
            reg = x1295;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1296);
            reg = x1296;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1297);
            reg = x1297;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
        }
        if (x1231 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1300 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1300 != Fp::invalid());
      if (x1300 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1301 = x985 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1301 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1302 = x974 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1302 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x950 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x47);
          reg = x47;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1303 = x1236 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1304 = Fp(x1303.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1305 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1305 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1306 = x1303 - x1305;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1307 = x1306 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1308 = Fp(x1307.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1308);
            reg = x1308;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1309 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1309 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1310 = x1307 - x1309;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1311 = x1310 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1312 = Fp(x1311.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1312);
            reg = x1312;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1313 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1313 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1314 = x1311 - x1313;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1315 = x1314 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1316 = Fp(x1315.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1316);
            reg = x1316;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1317 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1317 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1318 = x1315 - x1317;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1319 = x1318 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1319);
          reg = x1319;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1320 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1320 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1321 = x93 - x1320;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1322 = x1320 * x1321;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1322);
          reg = x1322;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1323 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1323 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1324 = x90 - x1320;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1325 = x1323 * x1324;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1325 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1326 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1326 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1326);
          reg = x1326;
        }
        if (x1232 != 0) {
          host_args.at(0) = x1228;
          host_args.at(1) = x1160;
          host_args.at(2) = x1164;
          host_args.at(3) = x1172;
          host_args.at(4) = x1176;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1327 = x1228 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1160);
            reg = x1160;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1164);
            reg = x1164;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1172);
            reg = x1172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
          {
            host_args.at(0) = x1327;
            host_args.at(1) = x1160;
            host_args.at(2) = x1164;
            host_args.at(3) = x1172;
            host_args.at(4) = x1176;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1328 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1328 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1329 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1329 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1330 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1330 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1331 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1331 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1327);
            reg = x1327;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1328);
            reg = x1328;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1329);
            reg = x1329;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1330);
            reg = x1330;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1331);
            reg = x1331;
          }
        }
        if (x1231 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1332 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1332 != Fp::invalid());
      if (x1332 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1333 = x985 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1333 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1334 = x974 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1334 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x950 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1335 = x1236 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1336 = Fp(x1335.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1336);
            reg = x1336;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1337 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1337 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1338 = x1335 - x1337;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1339 = x1338 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1340 = Fp(x1339.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1340);
            reg = x1340;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1341 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1341 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1342 = x1339 - x1341;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1343 = x1342 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1344 = Fp(x1343.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1344);
            reg = x1344;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1345 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1345 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1346 = x1343 - x1345;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1347 = x1346 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1348 = Fp(x1347.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1349 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1349 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1350 = x1347 - x1349;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1351 = x1350 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1351);
          reg = x1351;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1352 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1352 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1353 = x93 - x1352;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1354 = x1352 * x1353;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1354);
          reg = x1354;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1355 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1355 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1356 = x90 - x1352;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1357 = x1355 * x1356;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1357 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1358 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1358 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1358);
          reg = x1358;
        }
        if (x1232 != 0) {
          host_args.at(0) = x1228;
          host_args.at(1) = x1160;
          host_args.at(2) = x1164;
          host_args.at(3) = x1172;
          host_args.at(4) = x1176;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1359 = x1228 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1160);
            reg = x1160;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1164);
            reg = x1164;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1172);
            reg = x1172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
          {
            host_args.at(0) = x1359;
            host_args.at(1) = x1160;
            host_args.at(2) = x1164;
            host_args.at(3) = x1172;
            host_args.at(4) = x1176;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1360 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1360 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1361 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1361 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1362 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1362 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1363 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1363 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1359);
            reg = x1359;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1360);
            reg = x1360;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1361);
            reg = x1361;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1362);
            reg = x1362;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1363);
            reg = x1363;
          }
        }
        if (x1231 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
      auto x1364 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1364 != Fp::invalid());
      if (x1364 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1365 = x985 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1365 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1366 = x974 - x70;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1366 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x950 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1367 = x1236 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1368 = Fp(x1367.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1368);
            reg = x1368;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1369 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1369 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1370 = x1367 - x1369;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1371 = x1370 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1372 = Fp(x1371.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1372);
            reg = x1372;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1373 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1373 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1374 = x1371 - x1373;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1375 = x1374 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1376 = Fp(x1375.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1376);
            reg = x1376;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1377 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1377 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1378 = x1375 - x1377;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1379 = x1378 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1380 = Fp(x1379.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1380);
            reg = x1380;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1381 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1381 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1382 = x1379 - x1381;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1383 = x1382 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1383);
          reg = x1383;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1384 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1384 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1385 = x93 - x1384;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1386 = x1384 * x1385;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1386);
          reg = x1386;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1387 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1387 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1388 = x90 - x1384;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1389 = x1387 * x1388;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1389 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1390 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1390 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1390);
          reg = x1390;
        }
        if (x1232 != 0) {
          host_args.at(0) = x1228;
          host_args.at(1) = x1160;
          host_args.at(2) = x1164;
          host_args.at(3) = x1172;
          host_args.at(4) = x1176;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
          auto x1391 = x1228 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1160);
            reg = x1160;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1164);
            reg = x1164;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1172);
            reg = x1172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
          {
            host_args.at(0) = x1391;
            host_args.at(1) = x1160;
            host_args.at(2) = x1164;
            host_args.at(3) = x1172;
            host_args.at(4) = x1176;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1392 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1392 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1393 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1393 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1394 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1394 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1395 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1395 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1391);
            reg = x1391;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1393);
            reg = x1393;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1394);
            reg = x1394;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1395);
            reg = x1395;
          }
        }
        if (x1231 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1396 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1396 != Fp::invalid());
      if (x1396 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1397 = x985 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1397 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1398 = x974 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1398 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x950 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1399 = x1236 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1400 = Fp(x1399.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1400);
            reg = x1400;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1401 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1401 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1402 = x1399 - x1401;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1403 = x1402 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1404 = Fp(x1403.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1404);
            reg = x1404;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1405 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1405 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1406 = x1403 - x1405;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1407 = x1406 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1408 = Fp(x1407.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1408);
            reg = x1408;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1409 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1409 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1410 = x1407 - x1409;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1411 = x1410 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1412 = Fp(x1411.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1412);
            reg = x1412;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1413 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1413 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1414 = x1411 - x1413;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1415 = x1414 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1415);
          reg = x1415;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1416 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1416 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1417 = x93 - x1416;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1418 = x1416 * x1417;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1418);
          reg = x1418;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1419 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1419 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1420 = x90 - x1416;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1421 = x1419 * x1420;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1421 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1422 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1422 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1422);
          reg = x1422;
        }
        if (x1232 != 0) {
          host_args.at(0) = x1228;
          host_args.at(1) = x1222;
          host_args.at(2) = x92;
          host_args.at(3) = x92;
          host_args.at(4) = x92;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1423 = x1228 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1222);
            reg = x1222;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          {
            host_args.at(0) = x1423;
            host_args.at(1) = x1222;
            host_args.at(2) = x92;
            host_args.at(3) = x92;
            host_args.at(4) = x92;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1424 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1424 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1425 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1425 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1426 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1426 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1427 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1427 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1423);
            reg = x1423;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1424);
            reg = x1424;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1425);
            reg = x1425;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1426);
            reg = x1426;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1427);
            reg = x1427;
          }
        }
        if (x1231 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1428 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1428 != Fp::invalid());
      if (x1428 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1429 = x985 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1429 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1430 = x974 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1430 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x950 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1431 = x1236 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1432 = Fp(x1431.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1432);
            reg = x1432;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1433 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1433 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1434 = x1431 - x1433;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1435 = x1434 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1436 = Fp(x1435.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1436);
            reg = x1436;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1437 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1437 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1438 = x1435 - x1437;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1439 = x1438 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1440 = Fp(x1439.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1440);
            reg = x1440;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1441 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1441 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1442 = x1439 - x1441;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1443 = x1442 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1444 = Fp(x1443.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1444);
            reg = x1444;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1445 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1445 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1446 = x1443 - x1445;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1447 = x1446 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1447);
          reg = x1447;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1448 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1448 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1449 = x93 - x1448;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1450 = x1448 * x1449;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1450);
          reg = x1450;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1451 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1451 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1452 = x90 - x1448;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1453 = x1451 * x1452;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1453 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1454 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1454 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1454);
          reg = x1454;
        }
        if (x1232 != 0) {
          host_args.at(0) = x1228;
          host_args.at(1) = x1224;
          host_args.at(2) = x92;
          host_args.at(3) = x92;
          host_args.at(4) = x92;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1455 = x1228 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1224);
            reg = x1224;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          {
            host_args.at(0) = x1455;
            host_args.at(1) = x1224;
            host_args.at(2) = x92;
            host_args.at(3) = x92;
            host_args.at(4) = x92;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1456 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1456 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1457 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1457 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1458 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1458 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1459 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1459 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1455);
            reg = x1455;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1456);
            reg = x1456;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1457);
            reg = x1457;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1458);
            reg = x1458;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1459);
            reg = x1459;
          }
        }
        if (x1231 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
      auto x1460 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1460 != Fp::invalid());
      if (x1460 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1461 = x985 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1461 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x974 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1462 = x945 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1463 = x948 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1464 = x1462 + x1463;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1465 = x1464 + x1057;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1466 = x938 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1467 = x940 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1468 = x1466 + x1467;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1469 = x1468 + x942;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1470 = x938 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1465);
          reg = x1465;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1469);
          reg = x1469;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1470);
          reg = x1470;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1470);
          reg = x1470;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1471 = x1236 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1472 = Fp(x1471.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1472);
            reg = x1472;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1473 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1473 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1474 = x1471 - x1473;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1475 = x1474 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1476 = Fp(x1475.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1476);
            reg = x1476;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1477 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1477 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1478 = x1475 - x1477;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1479 = x1478 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1480 = Fp(x1479.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1480);
            reg = x1480;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1481 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1481 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1482 = x1479 - x1481;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1483 = x1482 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1484 = Fp(x1483.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1484);
            reg = x1484;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1485 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1485 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1486 = x1483 - x1485;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1487 = x1486 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1487);
          reg = x1487;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1488 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1488 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1489 = x93 - x1488;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1490 = x1488 * x1489;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1490);
          reg = x1490;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1491 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1491 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1492 = x90 - x1488;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1493 = x1491 * x1492;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1493 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1494 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1494 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1494);
          reg = x1494;
        }
        if (x1232 != 0) {
          host_args.at(0) = x1228;
          host_args.at(1) = x1160;
          host_args.at(2) = x1164;
          host_args.at(3) = x1172;
          host_args.at(4) = x1176;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
          auto x1495 = x1228 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1160);
            reg = x1160;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1164);
            reg = x1164;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1172);
            reg = x1172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
          {
            host_args.at(0) = x1495;
            host_args.at(1) = x1160;
            host_args.at(2) = x1164;
            host_args.at(3) = x1172;
            host_args.at(4) = x1176;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1496 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1496 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1497 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1497 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1498 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1498 != Fp::invalid());
          // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1499 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1499 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1495);
            reg = x1495;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1496);
            reg = x1496;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1497);
            reg = x1497;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1498);
            reg = x1498;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1499);
            reg = x1499;
          }
        }
        if (x1231 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
    }
    // loc("Top/Mux/5/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":39:25))
    auto x1500 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x1500 != Fp::invalid());
    if (x1500 != 0) {
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1501 = x749 * x74;
      {
        host_args.at(0) = x1501;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1502 = host_outs.at(0);
        auto x1503 = host_outs.at(1);
        auto x1504 = host_outs.at(2);
        auto x1505 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1502);
          reg = x1502;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1503);
          reg = x1503;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1504);
          reg = x1504;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1505);
          reg = x1505;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1506 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x1506 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1507 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1507 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1508 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1508 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1509 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1509 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1501);
        reg = x1501;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1506);
        reg = x1506;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1507);
        reg = x1507;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1508);
        reg = x1508;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1509);
        reg = x1509;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1510 = Fp(x1509.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1511 = x1510 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1511);
          reg = x1511;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1512 = Fp(x1509.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1513 = x1512 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1513);
          reg = x1513;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1514 = Fp(x1509.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1515 = x1514 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1515);
          reg = x1515;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1516 = Fp(x1509.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1517 = x1516 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1517);
          reg = x1517;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1518 = Fp(x1509.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1519 = x1518 * x53;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1519);
          reg = x1519;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1520 = Fp(x1509.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1520);
          reg = x1520;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1521 = Fp(x1508.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1522 = x1521 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1522);
          reg = x1522;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1523 = Fp(x1508.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1524 = x1523 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1524);
          reg = x1524;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1525 = Fp(x1508.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1526 = x1525 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1526);
          reg = x1526;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1527 = Fp(x1508.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1528 = x1527 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1528);
          reg = x1528;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1529 = Fp(x1508.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1529);
          reg = x1529;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1530 = Fp(x1507.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1531 = x1530 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1531);
          reg = x1531;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1532 = Fp(x1507.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1533 = x1532 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1533);
          reg = x1533;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1534 = Fp(x1507.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1535 = x1534 * x55;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1535);
          reg = x1535;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1536 = Fp(x1507.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1537 = x1536 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1537);
          reg = x1537;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1538 = Fp(x1507.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1538);
          reg = x1538;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1539 = Fp(x1506.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1540 = x1539 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1540);
          reg = x1540;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1541 = Fp(x1506.asUInt32() & x49.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1541);
          reg = x1541;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1542 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1542 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1543 = x1542 * x52;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1544 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1544 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1545 = x1544 * x56;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1546 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1546 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1547 = x1546 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1548 = x1545 + x1547;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1549 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1549 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1550 = x1549 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1551 = x1548 + x1550;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1552 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1552 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1553 = x1551 + x1552;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1554 = x1543 + x1553;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1555 = x1554 * x90;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1556 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1556 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1557 = x1555 + x1556;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1558 = x1509 - x1557;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1558 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1559 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1559 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1560 = x1559 * x69;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1561 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1561 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1562 = x1561 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1563 = x1560 + x1562;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1564 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1564 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1565 = x1563 + x1564;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1566 = x1565 * x56;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1567 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1567 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1568 = x1567 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1569 = x1566 + x1568;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1570 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1570 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1571 = x1569 + x1570;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1572 = x1508 - x1571;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1572 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1573 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1573 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1574 = x1573 * x61;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1575 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1575 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1576 = x1575 * x76;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1577 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1577 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1578 = x1576 + x1577;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1579 = x1578 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1580 = x1574 + x1579;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1581 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1581 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1582 = x1581 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1583 = x1580 + x1582;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1584 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1584 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1585 = x1583 + x1584;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1586 = x1507 - x1585;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1586 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1587 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1587 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1588 = x1587 * x61;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1589 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1589 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1590 = x1588 + x1589;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1591 = x1506 - x1590;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1591 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1506;
        host_args.at(1) = x1507;
        host_args.at(2) = x1508;
        host_args.at(3) = x1509;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1592 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1593 = (x1592 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1593);
            reg = x1593;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1594 = x1592 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1595 = (x1594 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1595);
            reg = x1595;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1596 = x1592 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1597 = (x1596 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1597);
            reg = x1597;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1598 = x1592 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1599 = (x1598 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1599);
            reg = x1599;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1600 = x1592 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1601 = (x1600 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1601);
            reg = x1601;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1602 = x1592 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1603 = (x1602 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1603);
            reg = x1603;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1604 = x1592 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1605 = (x1604 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1605);
            reg = x1605;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1606 = x1592 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1607 = (x1606 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1607);
            reg = x1607;
          }
        }
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1608 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1608 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1609 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1609 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1610 = x1609 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1611 = x1608 + x1610;
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1612 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1612 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1613 = x1612 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1614 = x1611 + x1613;
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1615 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1615 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1616 = x1615 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1617 = x1614 + x1616;
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1618 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1618 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1619 = x1618 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1620 = x1617 + x1619;
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1621 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1621 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1622 = x1621 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1623 = x1620 + x1622;
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1624 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1624 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1625 = x1624 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1626 = x1623 + x1625;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x1627 = x1626 - x1592;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x1627 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1628 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x1628 != Fp::invalid());
        if (x1628 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1629 = x1549 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1630 = x1552 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1631 = x1629 + x1630;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1632 = x1556 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1633 = x1632 + x1565;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1634 = x1631 + x1633;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1635 = x1542 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1636 = x1544 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1637 = x1635 + x1636;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1638 = x1637 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1639 = x1542 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1634);
            reg = x1634;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1638);
            reg = x1638;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1639);
            reg = x1639;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1639);
            reg = x1639;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x47);
            reg = x47;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1640 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1640 != Fp::invalid());
        if (x1640 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1641 = x1549 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1642 = x1552 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1643 = x1641 + x1642;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1644 = x1556 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1645 = x1644 + x1565;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1646 = x1643 + x1645;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1647 = x1542 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1648 = x1544 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1649 = x1647 + x1648;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1650 = x1649 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1651 = x1542 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1646);
            reg = x1646;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1650);
            reg = x1650;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1651);
            reg = x1651;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1651);
            reg = x1651;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
        auto x1652 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1652 != Fp::invalid());
        if (x1652 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1653 = x1549 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1654 = x1552 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1655 = x1653 + x1654;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1656 = x1556 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1657 = x1656 + x1565;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1658 = x1655 + x1657;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1659 = x1542 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1660 = x1544 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1661 = x1659 + x1660;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1662 = x1661 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1663 = x1542 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1658);
            reg = x1658;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1662);
            reg = x1662;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1663);
            reg = x1663;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1663);
            reg = x1663;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1664 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1664 != Fp::invalid());
        if (x1664 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1665 = x1549 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1666 = x1552 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1667 = x1665 + x1666;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1668 = x1556 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1669 = x1668 + x1565;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1670 = x1667 + x1669;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1671 = x1542 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1672 = x1544 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1673 = x1671 + x1672;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1674 = x1673 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1675 = x1542 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1670);
            reg = x1670;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1674);
            reg = x1674;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1675);
            reg = x1675;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1675);
            reg = x1675;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1676 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1676 != Fp::invalid());
        if (x1676 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1677 = x1549 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1678 = x1552 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1679 = x1677 + x1678;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1680 = x1556 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1681 = x1680 + x1565;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1682 = x1679 + x1681;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1683 = x1542 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1684 = x1544 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1685 = x1683 + x1684;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1686 = x1685 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1687 = x1542 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1682);
            reg = x1682;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1686);
            reg = x1686;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1687);
            reg = x1687;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1687);
            reg = x1687;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1688 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1688 != Fp::invalid());
        if (x1688 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1689 = x1549 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1690 = x1552 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1691 = x1689 + x1690;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1692 = x1581 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1693 = x1691 + x1692;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1694 = x1584 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1695 = x1693 + x1694;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1696 = x1542 * x40;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1697 = x1587 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1698 = x1696 + x1697;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1699 = x1544 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1700 = x1698 + x1699;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1701 = x1700 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1702 = x1542 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1695);
            reg = x1695;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1701);
            reg = x1701;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1703 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1703 != Fp::invalid());
        if (x1703 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1704 = x1549 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1705 = x1552 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1706 = x1704 + x1705;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1707 = x1581 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1708 = x1706 + x1707;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1709 = x1584 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1710 = x1708 + x1709;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1711 = x1542 * x40;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1712 = x1587 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1713 = x1711 + x1712;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1714 = x1544 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1715 = x1713 + x1714;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1716 = x1715 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1717 = x1542 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1716);
            reg = x1716;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1717);
            reg = x1717;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1717);
            reg = x1717;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x1718 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1718 != Fp::invalid());
        if (x1718 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1719 = x1549 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1720 = x1552 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1721 = x1719 + x1720;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1722 = x1581 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1723 = x1721 + x1722;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1724 = x1584 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1725 = x1723 + x1724;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1726 = x1542 * x40;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1727 = x1587 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1728 = x1726 + x1727;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1729 = x1544 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1730 = x1728 + x1729;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1731 = x1730 + x1546;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1732 = x1542 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1725);
            reg = x1725;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1731);
            reg = x1731;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1732);
            reg = x1732;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1732);
            reg = x1732;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1733 = x1567 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1734 = x1570 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1735 = x1733 + x1734;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1736 = x1735 + x1573;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1737 = x1736 + x45;
      {
        host_args.at(0) = x1737;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1738 = host_outs.at(0);
        auto x1739 = host_outs.at(1);
        auto x1740 = host_outs.at(2);
        auto x1741 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1738);
          reg = x1738;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1739);
          reg = x1739;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1740);
          reg = x1740;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1741);
          reg = x1741;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1742 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x1742 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1743 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1743 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1744 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1744 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1745 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1745 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1737);
        reg = x1737;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1742);
        reg = x1742;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1743);
        reg = x1743;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1744);
        reg = x1744;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1745);
        reg = x1745;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1746 = x1556 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1747 = x1746 + x1565;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1748 = x1747 + x45;
      {
        host_args.at(0) = x1748;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1749 = host_outs.at(0);
        auto x1750 = host_outs.at(1);
        auto x1751 = host_outs.at(2);
        auto x1752 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1749);
          reg = x1749;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1750);
          reg = x1750;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1751);
          reg = x1751;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1752);
          reg = x1752;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1753 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x1753 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1754 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x1754 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1755 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x1755 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1756 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x1756 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1748);
        reg = x1748;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1753);
        reg = x1753;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1754);
        reg = x1754;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1755);
        reg = x1755;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1756);
        reg = x1756;
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1757 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x1757 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":139:17)
      auto x1758 = x93 - x1757;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1759 = x1758 * x1742;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1760 = x1758 * x1743;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1761 = x1758 * x1744;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1762 = x1758 * x1745;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1763 = x746 * x76;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1764 = x743 + x1763;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1765 = x736 - x76;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1766 = x1757 * x1765;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1767 = x1757 * x737;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1768 = x1757 * x740;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1769 = x1757 * x1764;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1770 = x1759 + x1766;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1771 = x1760 + x1767;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1772 = x1761 + x1768;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1773 = x1762 + x1769;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1774 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x1774 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x1775 = x93 - x1774;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1776 = x1775 * x1753;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1777 = x1775 * x1754;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1778 = x1775 * x1755;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1779 = x1775 * x1756;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1780 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1780 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1781 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1781 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1782 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1782 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1783 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1783 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1784 = x1774 * x1780;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1785 = x1774 * x1781;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1786 = x1774 * x1782;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1787 = x1774 * x1783;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1788 = x1776 + x1784;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1789 = x1777 + x1785;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1790 = x1778 + x1786;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1791 = x1779 + x1787;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1792 = Fp(x1773.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1793 = x1792 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1793);
          reg = x1793;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1794 = Fp(x1773.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1795 = x1794 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1795);
          reg = x1795;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1796 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1796 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1797 = x1796 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1798 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1798 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1799 = x1798 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1800 = x1797 + x1799;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1801 = x1773 - x1800;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1801 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1802 = Fp(x1791.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1803 = x1802 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1803);
          reg = x1803;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1804 = Fp(x1791.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1805 = x1804 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1805);
          reg = x1805;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1806 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1806 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1807 = x1806 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1808 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x1808 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1809 = x1808 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1810 = x1807 + x1809;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1811 = x1791 - x1810;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1811 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1788);
        reg = x1788;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1789);
        reg = x1789;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1790);
        reg = x1790;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1791);
        reg = x1791;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1812 = Fp(x1770.asUInt32() & x1788.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1813 = Fp(x1771.asUInt32() & x1789.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1814 = Fp(x1772.asUInt32() & x1790.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1815 = Fp(x1773.asUInt32() & x1791.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1812);
          reg = x1812;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1813);
          reg = x1813;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1814);
          reg = x1814;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1815);
          reg = x1815;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1816 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1816 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1817 = x1816 * x1770;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1818 = x1816 * x1771;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1819 = x1816 * x1772;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1820 = x1816 * x1773;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1821 = x1817 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1822 = x1818 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1823 = x1819 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1824 = x1820 + x89;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1825 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1825 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1826 = x1825 * x1788;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1827 = x1825 * x1789;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1828 = x1825 * x1790;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1829 = x1825 * x1791;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1830 = x1821 + x1826;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1831 = x1822 + x1827;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1832 = x1823 + x1828;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1833 = x1824 + x1829;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1834 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1834 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1835 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1835 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1836 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1836 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1837 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1837 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1838 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1838 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1839 = x1834 * x1835;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1840 = x1834 * x1836;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1841 = x1834 * x1837;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1842 = x1834 * x1838;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1843 = x1830 + x1839;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1844 = x1831 + x1840;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1845 = x1832 + x1841;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1846 = x1833 + x1842;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1847 = x1844 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1848 = x1843 + x1847;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1849 = Fp(x1848.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1849);
          reg = x1849;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1850 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x1850 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1851 = x1848 - x1850;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1852 = x1851 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1853 = Fp(x1852.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1853);
          reg = x1853;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1854 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1854 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1855 = x1852 - x1854;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1856 = x1855 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1856);
        reg = x1856;
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1857 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1857 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1858 = x1857 + x1845;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1859 = x1846 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1860 = x1858 + x1859;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1861 = Fp(x1860.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1861);
          reg = x1861;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1862 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1862 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1863 = x1860 - x1862;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1864 = x1863 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x1865 = Fp(x1864.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1865);
          reg = x1865;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x1866 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1866 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x1867 = x1864 - x1866;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x1868 = x1867 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1868);
        reg = x1868;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1869 = Fp(x1866.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1870 = x1869 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1870);
          reg = x1870;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1871 = Fp(x1866.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1872 = x1871 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1872);
          reg = x1872;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1873 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x1873 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1874 = x1873 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x1875 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x1875 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1876 = x1875 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1877 = x1874 + x1876;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1878 = x1866 - x1877;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1878 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1879 = x93 - x1806;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1880 = x1796 * x1879;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1881 = x93 - x1873;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1882 = x1880 * x1881;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1883 = x93 - x1796;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1884 = x1883 * x1806;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1885 = x1884 * x1873;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1886 = x1882 + x1885;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][209 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1886);
        reg = x1886;
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1887 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x1887 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1888 = x1887 + x1873;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1889 = x1887 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1890 = x1889 * x1873;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1891 = x1888 - x1890;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1891);
        reg = x1891;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1892 = x1854 * x88;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1893 = x1850 + x1892;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1894 = (x1893 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1894);
          reg = x1894;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1895 = inv(x1893);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1895);
          reg = x1895;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1896 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x1896 != Fp::invalid());
      if (x1896 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1893 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1897 = x93 - x1896;
      if (x1897 != 0) {
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1898 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x1898 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1899 = x1893 * x1898;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1900 = x1899 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1900 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1901 = x1866 * x88;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1902 = x1862 + x1901;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1903 = x1897 * x78;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1904 = x1902 + x1903;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1905 = (x1904 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1905);
          reg = x1905;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1906 = inv(x1904);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1906);
          reg = x1906;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1907 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x1907 != Fp::invalid());
      if (x1907 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1904 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1908 = x93 - x1907;
      if (x1908 != 0) {
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1909 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x1909 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1910 = x1904 * x1909;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1911 = x1910 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1911 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1912 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x1912 != Fp::invalid());
      // loc("Top/Mux/5/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1913 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1913 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1914 = x93 - x1913;
      host_args.at(0) = x1780;
      host_args.at(1) = x1781;
      host_args.at(2) = x1782;
      host_args.at(3) = x1783;
      host_args.at(4) = x1736;
      host_args.at(5) = x1742;
      host_args.at(6) = x1743;
      host_args.at(7) = x1744;
      host_args.at(8) = x1745;
      host_args.at(9) = x1747;
      host_args.at(10) = x1753;
      host_args.at(11) = x1754;
      host_args.at(12) = x1755;
      host_args.at(13) = x1756;
      host_args.at(14) = x1770;
      host_args.at(15) = x1771;
      host_args.at(16) = x1772;
      host_args.at(17) = x1773;
      host_args.at(18) = x1788;
      host_args.at(19) = x1789;
      host_args.at(20) = x1790;
      host_args.at(21) = x1791;
      host_args.at(22) = x1850;
      host_args.at(23) = x1854;
      host_args.at(24) = x1862;
      host_args.at(25) = x1866;
      host_args.at(26) = x1907;
      host_args.at(27) = x1912;
      host_args.at(28) = x1914;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1915 = x1581 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1916 = x1584 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1917 = x1915 + x1916;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1918 = x1917 + x1587;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1919 = (x1918 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1919);
          reg = x1919;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1920 = inv(x1918);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1920);
          reg = x1920;
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x1921 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x1921 != Fp::invalid());
      if (x1921 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1918 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1922 = x93 - x1921;
      if (x1922 != 0) {
        // loc("Top/Mux/5/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1923 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x1923 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1924 = x1918 * x1923;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1925 = x1924 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1925 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":161:13)
      auto x1926 = x749 + x76;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x1927 = x1781 * x88;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1928 = x1780 + x1927;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x1929 = x1782 * x78;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1930 = x1928 + x1929;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x1931 = x1783 * x44;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x1932 = x1931 * x43;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x1933 = x1930 + x1932;
      // loc("cirgen/circuit/rv32im/compute.cpp":162:14)
      auto x1934 = x749 + x1933;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1935 = x1907 * x1934;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:35)
      auto x1936 = x1908 * x1926;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1937 = x1935 + x1936;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1938 = x1907 * x1926;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:34)
      auto x1939 = x1908 * x1934;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1940 = x1938 + x1939;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x1941 = x1912 * x1934;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:36)
      auto x1942 = x93 - x1912;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x1943 = x1942 * x1926;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x1944 = x1941 + x1943;
      // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1945 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1945 != Fp::invalid());
      if (x1945 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1946 = x1589 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1946 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1947 = x1578 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1947 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1948 = x1549 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1949 = x1552 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1950 = x1948 + x1949;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1951 = x1950 + x1747;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1952 = x1542 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1953 = x1544 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1954 = x1952 + x1953;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1955 = x1954 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1956 = x1542 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1951);
          reg = x1951;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1955);
          reg = x1955;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1956);
          reg = x1956;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1956);
          reg = x1956;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x47);
          reg = x47;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1957 = x1926 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1958 = Fp(x1957.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1958);
            reg = x1958;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1959 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1959 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1960 = x1957 - x1959;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1961 = x1960 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1962 = Fp(x1961.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1962);
            reg = x1962;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1963 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1963 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1964 = x1961 - x1963;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1965 = x1964 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1966 = Fp(x1965.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1966);
            reg = x1966;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x1967 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1967 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x1968 = x1965 - x1967;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x1969 = x1968 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1970 = Fp(x1969.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1970);
            reg = x1970;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1971 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1971 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1972 = x1969 - x1971;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1973 = x1972 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1973);
          reg = x1973;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1974 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1974 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1975 = x93 - x1974;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1976 = x1974 * x1975;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1976);
          reg = x1976;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1977 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1977 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1978 = x90 - x1974;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1979 = x1977 * x1978;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1979 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x1980 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x1980 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1980);
          reg = x1980;
        }
        if (x1922 != 0) {
          host_args.at(0) = x1918;
          host_args.at(1) = x1850;
          host_args.at(2) = x1854;
          host_args.at(3) = x1862;
          host_args.at(4) = x1866;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1981 = x1918 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1862);
            reg = x1862;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          {
            host_args.at(0) = x1981;
            host_args.at(1) = x1850;
            host_args.at(2) = x1854;
            host_args.at(3) = x1862;
            host_args.at(4) = x1866;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1982 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x1982 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1983 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1983 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1984 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1984 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x1985 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1985 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1981);
            reg = x1981;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1983);
            reg = x1983;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1984);
            reg = x1984;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1985);
            reg = x1985;
          }
        }
        if (x1921 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x1986 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1986 != Fp::invalid());
      if (x1986 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1987 = x1589 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1987 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1988 = x1578 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1988 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1989 = x1549 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1990 = x1552 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1991 = x1989 + x1990;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1992 = x1991 + x1747;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1993 = x1542 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1994 = x1544 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1995 = x1993 + x1994;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1996 = x1995 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1997 = x1542 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1992);
          reg = x1992;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1996);
          reg = x1996;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1997);
          reg = x1997;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1997);
          reg = x1997;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1998 = x1926 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x1999 = Fp(x1998.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1999);
            reg = x1999;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2000 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2000 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2001 = x1998 - x2000;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2002 = x2001 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2003 = Fp(x2002.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2003);
            reg = x2003;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2004 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2004 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2005 = x2002 - x2004;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2006 = x2005 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2007 = Fp(x2006.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2007);
            reg = x2007;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2008 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2008 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2009 = x2006 - x2008;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2010 = x2009 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2011 = Fp(x2010.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2011);
            reg = x2011;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2012 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2012 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2013 = x2010 - x2012;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2014 = x2013 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2014);
          reg = x2014;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2015 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2015 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2016 = x93 - x2015;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2017 = x2015 * x2016;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2017);
          reg = x2017;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2018 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2018 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2019 = x90 - x2015;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2020 = x2018 * x2019;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2020 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2021 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2021 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2021);
          reg = x2021;
        }
        if (x1922 != 0) {
          host_args.at(0) = x1918;
          host_args.at(1) = x1850;
          host_args.at(2) = x1854;
          host_args.at(3) = x1862;
          host_args.at(4) = x1866;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x2022 = x1918 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1862);
            reg = x1862;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          {
            host_args.at(0) = x2022;
            host_args.at(1) = x1850;
            host_args.at(2) = x1854;
            host_args.at(3) = x1862;
            host_args.at(4) = x1866;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2023 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2023 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2024 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2024 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2025 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2025 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2026 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2026 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2022);
            reg = x2022;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2023);
            reg = x2023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2024);
            reg = x2024;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2025);
            reg = x2025;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2026);
            reg = x2026;
          }
        }
        if (x1921 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
      auto x2027 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2027 != Fp::invalid());
      if (x2027 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x2028 = x1589 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x2028 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x2029 = x1578 - x70;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x2029 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2030 = x1549 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2031 = x1552 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2032 = x2030 + x2031;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2033 = x2032 + x1747;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2034 = x1542 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2035 = x1544 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2036 = x2034 + x2035;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2037 = x2036 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2038 = x1542 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2033);
          reg = x2033;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2037);
          reg = x2037;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2038);
          reg = x2038;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2038);
          reg = x2038;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2039 = x1926 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2040 = Fp(x2039.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2040);
            reg = x2040;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2041 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2041 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2042 = x2039 - x2041;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2043 = x2042 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2044 = Fp(x2043.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2044);
            reg = x2044;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2045 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2045 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2046 = x2043 - x2045;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2047 = x2046 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2048 = Fp(x2047.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2048);
            reg = x2048;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2049 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2049 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2050 = x2047 - x2049;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2051 = x2050 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2052 = Fp(x2051.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2052);
            reg = x2052;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2053 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2053 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2054 = x2051 - x2053;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2055 = x2054 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2055);
          reg = x2055;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2056 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2056 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2057 = x93 - x2056;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2058 = x2056 * x2057;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2058);
          reg = x2058;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2059 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2059 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2060 = x90 - x2056;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2061 = x2059 * x2060;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2061 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2062 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2062 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2062);
          reg = x2062;
        }
        if (x1922 != 0) {
          host_args.at(0) = x1918;
          host_args.at(1) = x1850;
          host_args.at(2) = x1854;
          host_args.at(3) = x1862;
          host_args.at(4) = x1866;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
          auto x2063 = x1918 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1862);
            reg = x1862;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          {
            host_args.at(0) = x2063;
            host_args.at(1) = x1850;
            host_args.at(2) = x1854;
            host_args.at(3) = x1862;
            host_args.at(4) = x1866;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2064 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2064 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2065 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2065 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2066 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2066 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2067 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2067 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2063);
            reg = x2063;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2064);
            reg = x2064;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2065);
            reg = x2065;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2066);
            reg = x2066;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2067);
            reg = x2067;
          }
        }
        if (x1921 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x2068 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2068 != Fp::invalid());
      if (x2068 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x2069 = x1589 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x2069 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x2070 = x1578 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x2070 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2071 = x1549 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2072 = x1552 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2073 = x2071 + x2072;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2074 = x2073 + x1747;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2075 = x1542 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2076 = x1544 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2077 = x2075 + x2076;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2078 = x2077 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2079 = x1542 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2074);
          reg = x2074;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2078);
          reg = x2078;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2079);
          reg = x2079;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2079);
          reg = x2079;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2080 = x1926 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2081 = Fp(x2080.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2081);
            reg = x2081;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2082 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2082 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2083 = x2080 - x2082;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2084 = x2083 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2085 = Fp(x2084.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2085);
            reg = x2085;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2086 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2086 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2087 = x2084 - x2086;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2088 = x2087 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2089 = Fp(x2088.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2089);
            reg = x2089;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2090 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2090 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2091 = x2088 - x2090;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2092 = x2091 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2093 = Fp(x2092.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2093);
            reg = x2093;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2094 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2094 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2095 = x2092 - x2094;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2096 = x2095 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2096);
          reg = x2096;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2097 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2097 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2098 = x93 - x2097;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2099 = x2097 * x2098;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2099);
          reg = x2099;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2100 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2100 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2101 = x90 - x2097;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2102 = x2100 * x2101;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2102 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2103 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2103 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2103);
          reg = x2103;
        }
        if (x1922 != 0) {
          host_args.at(0) = x1918;
          host_args.at(1) = x1912;
          host_args.at(2) = x92;
          host_args.at(3) = x92;
          host_args.at(4) = x92;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x2104 = x1918 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1912);
            reg = x1912;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          {
            host_args.at(0) = x2104;
            host_args.at(1) = x1912;
            host_args.at(2) = x92;
            host_args.at(3) = x92;
            host_args.at(4) = x92;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2105 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2105 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2106 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2106 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2107 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2107 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2108 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2108 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2104);
            reg = x2104;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2105);
            reg = x2105;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2106);
            reg = x2106;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2107);
            reg = x2107;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2108);
            reg = x2108;
          }
        }
        if (x1921 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x2109 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2109 != Fp::invalid());
      if (x2109 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x2110 = x1589 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x2110 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x2111 = x1578 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x2111 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2112 = x1549 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2113 = x1552 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2114 = x2112 + x2113;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2115 = x2114 + x1747;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2116 = x1542 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2117 = x1544 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2118 = x2116 + x2117;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2119 = x2118 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2120 = x1542 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2115);
          reg = x2115;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2119);
          reg = x2119;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2120);
          reg = x2120;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2120);
          reg = x2120;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2121 = x1926 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2122 = Fp(x2121.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2122);
            reg = x2122;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2123 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2123 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2124 = x2121 - x2123;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2125 = x2124 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2126 = Fp(x2125.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2127 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2127 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2128 = x2125 - x2127;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2129 = x2128 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2130 = Fp(x2129.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2130);
            reg = x2130;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2131 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2131 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2132 = x2129 - x2131;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2133 = x2132 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2134 = Fp(x2133.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2134);
            reg = x2134;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2135 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2135 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2136 = x2133 - x2135;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2137 = x2136 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2137);
          reg = x2137;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2138 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2138 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2139 = x93 - x2138;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2140 = x2138 * x2139;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2140);
          reg = x2140;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2141 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2141 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2142 = x90 - x2138;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2143 = x2141 * x2142;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2143 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2144 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2144 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2144);
          reg = x2144;
        }
        if (x1922 != 0) {
          host_args.at(0) = x1918;
          host_args.at(1) = x1914;
          host_args.at(2) = x92;
          host_args.at(3) = x92;
          host_args.at(4) = x92;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x2145 = x1918 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1914);
            reg = x1914;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          {
            host_args.at(0) = x2145;
            host_args.at(1) = x1914;
            host_args.at(2) = x92;
            host_args.at(3) = x92;
            host_args.at(4) = x92;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2146 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2146 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2147 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2147 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2148 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2148 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2149 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2149 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2145);
            reg = x2145;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2146);
            reg = x2146;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2147);
            reg = x2147;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2148);
            reg = x2148;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2149);
            reg = x2149;
          }
        }
        if (x1921 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x2150 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2150 != Fp::invalid());
      if (x2150 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2151 = x1589 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x2151 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1578 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2152 = x1549 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2153 = x1552 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2154 = x2152 + x2153;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2155 = x2154 + x1915;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2156 = x2155 + x1916;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2157 = x1542 * x40;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2158 = x1587 * x69;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2159 = x2157 + x2158;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2160 = x1544 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2161 = x2159 + x2160;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2162 = x2161 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2163 = x1542 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2156);
          reg = x2156;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2162);
          reg = x2162;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2163);
          reg = x2163;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2163);
          reg = x2163;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2164 = x1937 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2165 = Fp(x2164.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2165);
            reg = x2165;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2166 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2166 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2167 = x2164 - x2166;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2168 = x2167 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2169 = Fp(x2168.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2169);
            reg = x2169;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2170 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2170 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2171 = x2168 - x2170;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2172 = x2171 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2173 = Fp(x2172.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2173);
            reg = x2173;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2174 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2174 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2175 = x2172 - x2174;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2176 = x2175 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2177 = Fp(x2176.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2177);
            reg = x2177;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2178 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2178 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2179 = x2176 - x2178;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2180 = x2179 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2180);
          reg = x2180;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2181 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2181 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2182 = x93 - x2181;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2183 = x2181 * x2182;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2183);
          reg = x2183;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2184 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2184 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2185 = x90 - x2181;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2186 = x2184 * x2185;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2186 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2187 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2187 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2187);
          reg = x2187;
        }
        if (x92 != 0) {
          host_args.at(0) = x1918;
          host_args.at(1) = x1850;
          host_args.at(2) = x1854;
          host_args.at(3) = x1862;
          host_args.at(4) = x1866;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2188 = x1918 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1862);
            reg = x1862;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          {
            host_args.at(0) = x2188;
            host_args.at(1) = x1850;
            host_args.at(2) = x1854;
            host_args.at(3) = x1862;
            host_args.at(4) = x1866;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2189 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2189 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2190 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2190 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2191 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2191 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2192 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2192 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2188);
            reg = x2188;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2189);
            reg = x2189;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2190);
            reg = x2190;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2191);
            reg = x2191;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2192);
            reg = x2192;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2193 = x1921 + x93;
        if (x2193 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2194 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2194 != Fp::invalid());
      if (x2194 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2195 = x1589 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2195 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2196 = x1578 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2196 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2197 = x1549 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2198 = x1552 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2199 = x2197 + x2198;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2200 = x2199 + x1915;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2201 = x2200 + x1916;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2202 = x1542 * x40;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2203 = x1587 * x69;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2204 = x2202 + x2203;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2205 = x1544 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2206 = x2204 + x2205;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2207 = x2206 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2208 = x1542 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2201);
          reg = x2201;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2207);
          reg = x2207;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2208);
          reg = x2208;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2208);
          reg = x2208;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2209 = x1940 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2210 = Fp(x2209.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2210);
            reg = x2210;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2211 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2211 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2212 = x2209 - x2211;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2213 = x2212 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2214 = Fp(x2213.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2214);
            reg = x2214;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2215 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2215 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2216 = x2213 - x2215;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2217 = x2216 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2218 = Fp(x2217.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2218);
            reg = x2218;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2219 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2219 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2220 = x2217 - x2219;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2221 = x2220 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2222 = Fp(x2221.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2222);
            reg = x2222;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2223 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2223 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2224 = x2221 - x2223;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2225 = x2224 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2225);
          reg = x2225;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2226 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2226 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2227 = x93 - x2226;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2228 = x2226 * x2227;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2228);
          reg = x2228;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2229 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2229 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2230 = x90 - x2226;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2231 = x2229 * x2230;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2231 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2232 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2232 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2232);
          reg = x2232;
        }
        if (x92 != 0) {
          host_args.at(0) = x1918;
          host_args.at(1) = x1850;
          host_args.at(2) = x1854;
          host_args.at(3) = x1862;
          host_args.at(4) = x1866;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2233 = x1918 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1862);
            reg = x1862;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          {
            host_args.at(0) = x2233;
            host_args.at(1) = x1850;
            host_args.at(2) = x1854;
            host_args.at(3) = x1862;
            host_args.at(4) = x1866;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2234 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2234 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2235 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2235 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2236 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2236 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2237 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2237 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2233);
            reg = x2233;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2234);
            reg = x2234;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2235);
            reg = x2235;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2236);
            reg = x2236;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2237);
            reg = x2237;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2238 = x1921 + x93;
        if (x2238 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2239 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2239 != Fp::invalid());
      if (x2239 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2240 = x1589 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2240 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2241 = x1578 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2241 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2242 = x1549 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2243 = x1552 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2244 = x2242 + x2243;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2245 = x2244 + x1915;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2246 = x2245 + x1916;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2247 = x1542 * x40;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2248 = x1587 * x69;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2249 = x2247 + x2248;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2250 = x1544 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2251 = x2249 + x2250;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2252 = x2251 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2253 = x1542 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2246);
          reg = x2246;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2252);
          reg = x2252;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2253);
          reg = x2253;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2253);
          reg = x2253;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2254 = x1944 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2255 = Fp(x2254.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2255);
            reg = x2255;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2256 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2256 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2257 = x2254 - x2256;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2258 = x2257 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2259 = Fp(x2258.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2259);
            reg = x2259;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2260 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2260 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2261 = x2258 - x2260;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2262 = x2261 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2263 = Fp(x2262.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2263);
            reg = x2263;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2264 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2264 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2265 = x2262 - x2264;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2266 = x2265 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2267 = Fp(x2266.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2267);
            reg = x2267;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2268 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2268 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2269 = x2266 - x2268;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2270 = x2269 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2270);
          reg = x2270;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2271 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2271 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2272 = x93 - x2271;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2273 = x2271 * x2272;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2273);
          reg = x2273;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2274 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2274 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2275 = x90 - x2271;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2276 = x2274 * x2275;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2276 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2277 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2277 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2277);
          reg = x2277;
        }
        if (x92 != 0) {
          host_args.at(0) = x1918;
          host_args.at(1) = x1850;
          host_args.at(2) = x1854;
          host_args.at(3) = x1862;
          host_args.at(4) = x1866;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2278 = x1918 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1862);
            reg = x1862;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          {
            host_args.at(0) = x2278;
            host_args.at(1) = x1850;
            host_args.at(2) = x1854;
            host_args.at(3) = x1862;
            host_args.at(4) = x1866;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2279 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2279 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2280 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2280 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2281 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2281 != Fp::invalid());
          // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2282 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2282 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2278);
            reg = x2278;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2279);
            reg = x2279;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2280);
            reg = x2280;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2281);
            reg = x2281;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2282);
            reg = x2282;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2283 = x1921 + x93;
        if (x2283 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
    }
    // loc("Top/Mux/5/OneHot/hot[2](Reg)"("./cirgen/components/mux.h":39:25))
    auto x2284 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x2284 != Fp::invalid());
    if (x2284 != 0) {
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2285 = x749 * x74;
      {
        host_args.at(0) = x2285;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2286 = host_outs.at(0);
        auto x2287 = host_outs.at(1);
        auto x2288 = host_outs.at(2);
        auto x2289 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2286);
          reg = x2286;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2287);
          reg = x2287;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2288);
          reg = x2288;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2289);
          reg = x2289;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2290 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2290 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2291 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2291 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2292 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2292 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2293 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2293 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2285);
        reg = x2285;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2290);
        reg = x2290;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2291);
        reg = x2291;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2292);
        reg = x2292;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2293);
        reg = x2293;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2294 = Fp(x2293.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2295 = x2294 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2295);
          reg = x2295;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2296 = Fp(x2293.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2297 = x2296 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2297);
          reg = x2297;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2298 = Fp(x2293.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2299 = x2298 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2299);
          reg = x2299;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2300 = Fp(x2293.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2301 = x2300 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2301);
          reg = x2301;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2302 = Fp(x2293.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2303 = x2302 * x53;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2303);
          reg = x2303;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2304 = Fp(x2293.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2304);
          reg = x2304;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2305 = Fp(x2292.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2306 = x2305 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2306);
          reg = x2306;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2307 = Fp(x2292.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2308 = x2307 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2308);
          reg = x2308;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2309 = Fp(x2292.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2310 = x2309 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2310);
          reg = x2310;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2311 = Fp(x2292.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2312 = x2311 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2312);
          reg = x2312;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2313 = Fp(x2292.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2313);
          reg = x2313;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2314 = Fp(x2291.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2315 = x2314 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2315);
          reg = x2315;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2316 = Fp(x2291.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2317 = x2316 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2317);
          reg = x2317;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2318 = Fp(x2291.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2319 = x2318 * x55;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2319);
          reg = x2319;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2320 = Fp(x2291.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2321 = x2320 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2321);
          reg = x2321;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2322 = Fp(x2291.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2322);
          reg = x2322;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2323 = Fp(x2290.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2324 = x2323 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2324);
          reg = x2324;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2325 = Fp(x2290.asUInt32() & x49.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2325);
          reg = x2325;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2326 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2326 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2327 = x2326 * x52;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2328 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x2328 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2329 = x2328 * x56;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2330 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2330 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2331 = x2330 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2332 = x2329 + x2331;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2333 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x2333 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2334 = x2333 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2335 = x2332 + x2334;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2336 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x2336 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2337 = x2335 + x2336;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2338 = x2327 + x2337;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2339 = x2338 * x90;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2340 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2340 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2341 = x2339 + x2340;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2342 = x2293 - x2341;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2342 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2343 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2343 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2344 = x2343 * x69;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2345 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x2345 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2346 = x2345 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2347 = x2344 + x2346;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2348 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2348 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2349 = x2347 + x2348;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2350 = x2349 * x56;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2351 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2351 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2352 = x2351 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2353 = x2350 + x2352;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2354 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2354 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2355 = x2353 + x2354;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2356 = x2292 - x2355;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2356 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2357 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2357 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2358 = x2357 * x61;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2359 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2359 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2360 = x2359 * x76;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2361 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2361 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2362 = x2360 + x2361;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2363 = x2362 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2364 = x2358 + x2363;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2365 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2366 = x2365 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2367 = x2364 + x2366;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2368 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2368 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2369 = x2367 + x2368;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2370 = x2291 - x2369;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2370 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2371 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2371 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2372 = x2371 * x61;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2373 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2373 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2374 = x2372 + x2373;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2375 = x2290 - x2374;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2375 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2290;
        host_args.at(1) = x2291;
        host_args.at(2) = x2292;
        host_args.at(3) = x2293;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2376 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2377 = (x2376 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2377);
            reg = x2377;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2378 = x2376 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2379 = (x2378 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2379);
            reg = x2379;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2380 = x2376 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2381 = (x2380 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2381);
            reg = x2381;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2382 = x2376 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2383 = (x2382 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2383);
            reg = x2383;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2384 = x2376 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2385 = (x2384 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2385);
            reg = x2385;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2386 = x2376 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2387 = (x2386 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2387);
            reg = x2387;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2388 = x2376 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2389 = (x2388 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2389);
            reg = x2389;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2390 = x2376 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2391 = (x2390 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2391);
            reg = x2391;
          }
        }
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2392 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x2392 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2393 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x2393 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2394 = x2393 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2395 = x2392 + x2394;
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2396 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x2396 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2397 = x2396 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2398 = x2395 + x2397;
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2399 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x2399 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2400 = x2399 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2401 = x2398 + x2400;
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2402 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x2402 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2403 = x2402 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2404 = x2401 + x2403;
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2405 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x2405 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2406 = x2405 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2407 = x2404 + x2406;
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2408 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2408 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2409 = x2408 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2410 = x2407 + x2409;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x2411 = x2410 - x2376;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x2411 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2412 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x2412 != Fp::invalid());
        if (x2412 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2413 = x2333 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2414 = x2336 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2415 = x2413 + x2414;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2416 = x2365 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2417 = x2415 + x2416;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2418 = x2368 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2419 = x2417 + x2418;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2420 = x2326 * x40;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2421 = x2371 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2422 = x2420 + x2421;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2423 = x2328 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2424 = x2422 + x2423;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2425 = x2424 + x2330;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2426 = x2326 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2419);
            reg = x2419;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2425);
            reg = x2425;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2426);
            reg = x2426;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2426);
            reg = x2426;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2427 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x2427 != Fp::invalid());
        if (x2427 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2428 = x2333 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2429 = x2336 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2430 = x2428 + x2429;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2431 = x2365 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2432 = x2430 + x2431;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2433 = x2368 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2434 = x2432 + x2433;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2435 = x2326 * x40;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2436 = x2371 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2437 = x2435 + x2436;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2438 = x2328 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2439 = x2437 + x2438;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2440 = x2439 + x2330;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2441 = x2326 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2434);
            reg = x2434;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2440);
            reg = x2440;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2442 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x2442 != Fp::invalid());
        if (x2442 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2443 = x2333 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2444 = x2336 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2445 = x2443 + x2444;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2446 = x2365 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2447 = x2445 + x2446;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2448 = x2368 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2449 = x2447 + x2448;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2450 = x2326 * x40;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2451 = x2371 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2452 = x2450 + x2451;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2453 = x2328 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2454 = x2452 + x2453;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2455 = x2454 + x2330;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2456 = x2326 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2455);
            reg = x2455;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2456);
            reg = x2456;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2456);
            reg = x2456;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x48);
            reg = x48;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2457 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x2457 != Fp::invalid());
        if (x2457 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2458 = x2333 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2459 = x2336 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2460 = x2458 + x2459;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2461 = x2340 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2462 = x2461 + x2349;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2463 = x2460 + x2462;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2464 = x2463 - x2348;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2465 = x2348 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2466 = x2364 + x2465;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2467 = x2328 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2468 = x2466 + x2467;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2469 = x2468 + x2330;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2470 = x2326 * x40;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2471 = x2470 + x2352;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2472 = x2471 + x2354;
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2473 = x2326 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2464);
            reg = x2464;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2472);
            reg = x2472;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2473);
            reg = x2473;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2474 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x2474 != Fp::invalid());
        if (x2474 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2475 = x2333 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2476 = x2336 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2477 = x2475 + x2476;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2478 = x2340 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2479 = x2478 + x2349;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2480 = x2477 + x2479;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2481 = x2326 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2482 = x2328 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2483 = x2481 + x2482;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2484 = x2483 + x2330;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2485 = x2326 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2480);
            reg = x2480;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2484);
            reg = x2484;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2485);
            reg = x2485;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2485);
            reg = x2485;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2486 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x2486 != Fp::invalid());
        if (x2486 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2364);
            reg = x2364;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2355);
            reg = x2355;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2341);
            reg = x2341;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
        auto x2487 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x2487 != Fp::invalid());
        if (x2487 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2364);
            reg = x2364;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2355);
            reg = x2355;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2341);
            reg = x2341;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2488 = x2351 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2489 = x2354 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2490 = x2488 + x2489;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2491 = x2490 + x2357;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2492 = x2491 + x45;
      {
        host_args.at(0) = x2492;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2493 = host_outs.at(0);
        auto x2494 = host_outs.at(1);
        auto x2495 = host_outs.at(2);
        auto x2496 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2493);
          reg = x2493;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2494);
          reg = x2494;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2495);
          reg = x2495;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2496);
          reg = x2496;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2497 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2497 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2498 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2498 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2499 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2499 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2500 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2500 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2492);
        reg = x2492;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2497);
        reg = x2497;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2498);
        reg = x2498;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2499);
        reg = x2499;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2500);
        reg = x2500;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2501 = x2340 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2502 = x2501 + x2349;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2503 = x2502 + x45;
      {
        host_args.at(0) = x2503;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2504 = host_outs.at(0);
        auto x2505 = host_outs.at(1);
        auto x2506 = host_outs.at(2);
        auto x2507 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2504);
          reg = x2504;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2505);
          reg = x2505;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2506);
          reg = x2506;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2507);
          reg = x2507;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2508 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x2508 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2509 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x2509 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2510 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x2510 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2511 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x2511 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2503);
        reg = x2503;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2508);
        reg = x2508;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2509);
        reg = x2509;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2510);
        reg = x2510;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2511);
        reg = x2511;
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2512 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x2512 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":139:17)
      auto x2513 = x93 - x2512;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2514 = x2513 * x2497;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2515 = x2513 * x2498;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2516 = x2513 * x2499;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2517 = x2513 * x2500;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x2518 = x746 * x76;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x2519 = x743 + x2518;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x2520 = x736 - x76;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2521 = x2512 * x2520;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2522 = x2512 * x737;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2523 = x2512 * x740;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2524 = x2512 * x2519;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2525 = x2514 + x2521;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2526 = x2515 + x2522;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2527 = x2516 + x2523;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2528 = x2517 + x2524;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2529 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x2529 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":141:17)
      auto x2530 = x93 - x2529;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2531 = x2530 * x2508;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2532 = x2530 * x2509;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2533 = x2530 * x2510;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2534 = x2530 * x2511;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2535 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x2535 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2536 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2536 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2537 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2537 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2538 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x2538 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2539 = x2529 * x2535;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2540 = x2529 * x2536;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2541 = x2529 * x2537;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2542 = x2529 * x2538;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2543 = x2531 + x2539;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2544 = x2532 + x2540;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2545 = x2533 + x2541;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2546 = x2534 + x2542;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2547 = Fp(x2528.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2548 = x2547 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2548);
          reg = x2548;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2549 = Fp(x2528.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2550 = x2549 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2550);
          reg = x2550;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2551 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x2551 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2552 = x2551 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x2553 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x2553 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2554 = x2553 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2555 = x2552 + x2554;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2556 = x2528 - x2555;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2556 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2557 = Fp(x2546.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2558 = x2557 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2558);
          reg = x2558;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2559 = Fp(x2546.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2560 = x2559 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2560);
          reg = x2560;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2561 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2561 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2562 = x2561 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x2563 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x2563 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2564 = x2563 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2565 = x2562 + x2564;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2566 = x2546 - x2565;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2566 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2543);
        reg = x2543;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2544);
        reg = x2544;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2545);
        reg = x2545;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2546);
        reg = x2546;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2567 = Fp(x2525.asUInt32() & x2543.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2568 = Fp(x2526.asUInt32() & x2544.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2569 = Fp(x2527.asUInt32() & x2545.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2570 = Fp(x2528.asUInt32() & x2546.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2567);
          reg = x2567;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2568);
          reg = x2568;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2569);
          reg = x2569;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2570);
          reg = x2570;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2571 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x2571 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2572 = x2571 * x2525;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2573 = x2571 * x2526;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2574 = x2571 * x2527;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2575 = x2571 * x2528;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2576 = x2572 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2577 = x2573 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2578 = x2574 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2579 = x2575 + x89;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2580 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2580 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2581 = x2580 * x2543;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2582 = x2580 * x2544;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2583 = x2580 * x2545;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2584 = x2580 * x2546;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2585 = x2576 + x2581;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2586 = x2577 + x2582;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2587 = x2578 + x2583;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2588 = x2579 + x2584;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2589 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2589 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2590 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x2590 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2591 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x2591 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2592 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2592 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2593 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x2593 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2594 = x2589 * x2590;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2595 = x2589 * x2591;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2596 = x2589 * x2592;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2597 = x2589 * x2593;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2598 = x2585 + x2594;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2599 = x2586 + x2595;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2600 = x2587 + x2596;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2601 = x2588 + x2597;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x2602 = x2599 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x2603 = x2598 + x2602;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x2604 = Fp(x2603.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2604);
          reg = x2604;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x2605 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x2605 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x2606 = x2603 - x2605;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x2607 = x2606 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x2608 = Fp(x2607.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2608);
          reg = x2608;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x2609 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x2609 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x2610 = x2607 - x2609;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x2611 = x2610 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2611);
        reg = x2611;
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2612 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2612 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2613 = x2612 + x2600;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x2614 = x2601 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2615 = x2613 + x2614;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x2616 = Fp(x2615.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2616);
          reg = x2616;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x2617 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x2617 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x2618 = x2615 - x2617;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x2619 = x2618 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x2620 = Fp(x2619.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2620);
          reg = x2620;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x2621 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x2621 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x2622 = x2619 - x2621;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x2623 = x2622 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2623);
        reg = x2623;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2624 = Fp(x2621.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2625 = x2624 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2625);
          reg = x2625;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2626 = Fp(x2621.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2627 = x2626 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2627);
          reg = x2627;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2628 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x2628 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2629 = x2628 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x2630 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x2630 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2631 = x2630 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2632 = x2629 + x2631;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2633 = x2621 - x2632;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2633 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2634 = x93 - x2561;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2635 = x2551 * x2634;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2636 = x93 - x2628;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2637 = x2635 * x2636;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2638 = x93 - x2551;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2639 = x2638 * x2561;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2640 = x2639 * x2628;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2641 = x2637 + x2640;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][209 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2641);
        reg = x2641;
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2642 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x2642 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2643 = x2642 + x2628;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2644 = x2642 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2645 = x2644 * x2628;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2646 = x2643 - x2645;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2646);
        reg = x2646;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x2647 = x2609 * x88;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x2648 = x2605 + x2647;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2649 = (x2648 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2649);
          reg = x2649;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2650 = inv(x2648);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2650);
          reg = x2650;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2651 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x2651 != Fp::invalid());
      if (x2651 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2648 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2652 = x93 - x2651;
      if (x2652 != 0) {
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2653 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x2653 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2654 = x2648 * x2653;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2655 = x2654 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2655 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x2656 = x2621 * x88;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2657 = x2617 + x2656;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x2658 = x2652 * x78;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2659 = x2657 + x2658;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2660 = (x2659 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2660);
          reg = x2660;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2661 = inv(x2659);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2661);
          reg = x2661;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2662 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x2662 != Fp::invalid());
      if (x2662 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2659 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2663 = x93 - x2662;
      if (x2663 != 0) {
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2664 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x2664 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2665 = x2659 * x2664;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2666 = x2665 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2666 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2667 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x2667 != Fp::invalid());
      // loc("Top/Mux/5/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2668 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2668 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2669 = x93 - x2668;
      host_args.at(0) = x2535;
      host_args.at(1) = x2536;
      host_args.at(2) = x2537;
      host_args.at(3) = x2538;
      host_args.at(4) = x2491;
      host_args.at(5) = x2497;
      host_args.at(6) = x2498;
      host_args.at(7) = x2499;
      host_args.at(8) = x2500;
      host_args.at(9) = x2502;
      host_args.at(10) = x2508;
      host_args.at(11) = x2509;
      host_args.at(12) = x2510;
      host_args.at(13) = x2511;
      host_args.at(14) = x2525;
      host_args.at(15) = x2526;
      host_args.at(16) = x2527;
      host_args.at(17) = x2528;
      host_args.at(18) = x2543;
      host_args.at(19) = x2544;
      host_args.at(20) = x2545;
      host_args.at(21) = x2546;
      host_args.at(22) = x2605;
      host_args.at(23) = x2609;
      host_args.at(24) = x2617;
      host_args.at(25) = x2621;
      host_args.at(26) = x2662;
      host_args.at(27) = x2667;
      host_args.at(28) = x2669;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2670 = x2365 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2671 = x2368 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2672 = x2670 + x2671;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2673 = x2672 + x2371;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2674 = (x2673 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2674);
          reg = x2674;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2675 = inv(x2673);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2675);
          reg = x2675;
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2676 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x2676 != Fp::invalid());
      if (x2676 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2673 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2677 = x93 - x2676;
      if (x2677 != 0) {
        // loc("Top/Mux/5/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2678 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x2678 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2679 = x2673 * x2678;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2680 = x2679 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2680 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":161:13)
      auto x2681 = x749 + x76;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x2682 = x2536 * x88;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2683 = x2535 + x2682;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x2684 = x2537 * x78;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2685 = x2683 + x2684;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x2686 = x2538 * x44;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x2687 = x2686 * x43;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x2688 = x2685 + x2687;
      // loc("cirgen/circuit/rv32im/compute.cpp":162:14)
      auto x2689 = x749 + x2688;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:57)
      auto x2690 = x2617 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:13)
      auto x2691 = x2648 + x2690;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:14)
      auto x2692 = x2621 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:13)
      auto x2693 = x2691 + x2692;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:13)
      auto x2694 = x2667 * x2681;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:35)
      auto x2695 = x93 - x2667;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:34)
      auto x2696 = x2695 * x2689;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:13)
      auto x2697 = x2694 + x2696;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2698 = x2669 * x2689;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:38)
      auto x2699 = x93 - x2669;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:37)
      auto x2700 = x2699 * x2681;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2701 = x2698 + x2700;
      // loc("cirgen/circuit/rv32im/compute.cpp":174:14)
      auto x2702 = x2669 * x2681;
      // loc("cirgen/circuit/rv32im/compute.cpp":174:36)
      auto x2703 = x2699 * x2689;
      // loc("cirgen/circuit/rv32im/compute.cpp":174:14)
      auto x2704 = x2702 + x2703;
      // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2705 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2705 != Fp::invalid());
      if (x2705 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2706 = x2373 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2706 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2707 = x2362 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2707 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2708 = x2333 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2709 = x2336 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2710 = x2708 + x2709;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2711 = x2710 + x2670;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2712 = x2711 + x2671;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2713 = x2326 * x40;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2714 = x2371 * x69;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2715 = x2713 + x2714;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2716 = x2328 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2717 = x2715 + x2716;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2718 = x2717 + x2330;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2719 = x2326 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2712);
          reg = x2712;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2718);
          reg = x2718;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2719);
          reg = x2719;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2719);
          reg = x2719;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2720 = x2697 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2721 = Fp(x2720.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2721);
            reg = x2721;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2722 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2722 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2723 = x2720 - x2722;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2724 = x2723 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2725 = Fp(x2724.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2725);
            reg = x2725;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2726 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2726 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2727 = x2724 - x2726;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2728 = x2727 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2729 = Fp(x2728.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2729);
            reg = x2729;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2730 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2730 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2731 = x2728 - x2730;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2732 = x2731 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2733 = Fp(x2732.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2733);
            reg = x2733;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2734 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2734 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2735 = x2732 - x2734;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2736 = x2735 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2736);
          reg = x2736;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2737 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2737 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2738 = x93 - x2737;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2739 = x2737 * x2738;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2739);
          reg = x2739;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2740 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2740 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2741 = x90 - x2737;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2742 = x2740 * x2741;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2742 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2743 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2743 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2743);
          reg = x2743;
        }
        if (x92 != 0) {
          host_args.at(0) = x2673;
          host_args.at(1) = x2605;
          host_args.at(2) = x2609;
          host_args.at(3) = x2617;
          host_args.at(4) = x2621;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2744 = x2673 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2605);
            reg = x2605;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2609);
            reg = x2609;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2617);
            reg = x2617;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2621);
            reg = x2621;
          }
          {
            host_args.at(0) = x2744;
            host_args.at(1) = x2605;
            host_args.at(2) = x2609;
            host_args.at(3) = x2617;
            host_args.at(4) = x2621;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2745 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2745 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2746 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2746 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2747 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2747 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2748 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2748 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2744);
            reg = x2744;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2746);
            reg = x2746;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2747);
            reg = x2747;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2748);
            reg = x2748;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2749 = x2676 + x93;
        if (x2749 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2750 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2750 != Fp::invalid());
      if (x2750 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2751 = x2373 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2751 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2752 = x2362 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2752 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2753 = x2333 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2754 = x2336 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2755 = x2753 + x2754;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2756 = x2755 + x2670;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2757 = x2756 + x2671;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2758 = x2326 * x40;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2759 = x2371 * x69;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2760 = x2758 + x2759;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2761 = x2328 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2762 = x2760 + x2761;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2763 = x2762 + x2330;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2764 = x2326 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2757);
          reg = x2757;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2763);
          reg = x2763;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2764);
          reg = x2764;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2764);
          reg = x2764;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2765 = x2701 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2766 = Fp(x2765.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2766);
            reg = x2766;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2767 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2767 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2768 = x2765 - x2767;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2769 = x2768 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2770 = Fp(x2769.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2770);
            reg = x2770;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2771 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2771 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2772 = x2769 - x2771;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2773 = x2772 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2774 = Fp(x2773.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2774);
            reg = x2774;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2775 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2775 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2776 = x2773 - x2775;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2777 = x2776 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2778 = Fp(x2777.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2778);
            reg = x2778;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2779 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2779 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2780 = x2777 - x2779;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2781 = x2780 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2781);
          reg = x2781;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2782 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2782 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2783 = x93 - x2782;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2784 = x2782 * x2783;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2784);
          reg = x2784;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2785 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2785 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2786 = x90 - x2782;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2787 = x2785 * x2786;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2787 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2788 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2788 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2788);
          reg = x2788;
        }
        if (x92 != 0) {
          host_args.at(0) = x2673;
          host_args.at(1) = x2605;
          host_args.at(2) = x2609;
          host_args.at(3) = x2617;
          host_args.at(4) = x2621;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2789 = x2673 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2605);
            reg = x2605;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2609);
            reg = x2609;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2617);
            reg = x2617;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2621);
            reg = x2621;
          }
          {
            host_args.at(0) = x2789;
            host_args.at(1) = x2605;
            host_args.at(2) = x2609;
            host_args.at(3) = x2617;
            host_args.at(4) = x2621;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2790 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2790 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2791 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2791 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2792 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2792 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2793 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2793 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2789);
            reg = x2789;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2790);
            reg = x2790;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2791);
            reg = x2791;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2792);
            reg = x2792;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2793);
            reg = x2793;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2794 = x2676 + x93;
        if (x2794 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2795 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2795 != Fp::invalid());
      if (x2795 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2796 = x2373 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2796 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2797 = x2362 - x70;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2798 = x2333 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2799 = x2336 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2800 = x2798 + x2799;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2801 = x2800 + x2670;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2802 = x2801 + x2671;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2803 = x2326 * x40;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2804 = x2371 * x69;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2805 = x2803 + x2804;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2806 = x2328 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2807 = x2805 + x2806;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2808 = x2807 + x2330;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2809 = x2326 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2802);
          reg = x2802;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2808);
          reg = x2808;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2809);
          reg = x2809;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2809);
          reg = x2809;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x48);
          reg = x48;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2810 = x2704 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2811 = Fp(x2810.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2811);
            reg = x2811;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2812 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2812 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2813 = x2810 - x2812;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2814 = x2813 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2815 = Fp(x2814.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2815);
            reg = x2815;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2816 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2816 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2817 = x2814 - x2816;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2818 = x2817 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2819 = Fp(x2818.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2819);
            reg = x2819;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2820 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2820 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2821 = x2818 - x2820;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2822 = x2821 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2823 = Fp(x2822.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2823);
            reg = x2823;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2824 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2824 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2825 = x2822 - x2824;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2826 = x2825 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2826);
          reg = x2826;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2827 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2827 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2828 = x93 - x2827;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2829 = x2827 * x2828;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2829);
          reg = x2829;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2830 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2830 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2831 = x90 - x2827;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2832 = x2830 * x2831;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2832 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2833 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2833 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2833);
          reg = x2833;
        }
        if (x92 != 0) {
          host_args.at(0) = x2673;
          host_args.at(1) = x2605;
          host_args.at(2) = x2609;
          host_args.at(3) = x2617;
          host_args.at(4) = x2621;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2834 = x2673 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2605);
            reg = x2605;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2609);
            reg = x2609;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2617);
            reg = x2617;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2621);
            reg = x2621;
          }
          {
            host_args.at(0) = x2834;
            host_args.at(1) = x2605;
            host_args.at(2) = x2609;
            host_args.at(3) = x2617;
            host_args.at(4) = x2621;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2835 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2835 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2836 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2836 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2837 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2837 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2838 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2838 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2834);
            reg = x2834;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2835);
            reg = x2835;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2836);
            reg = x2836;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2838);
            reg = x2838;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2839 = x2676 + x93;
        if (x2839 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2840 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2840 != Fp::invalid());
      if (x2840 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2841 = x2373 - x38;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2841 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2842 = x2333 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2843 = x2336 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2844 = x2842 + x2843;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2845 = x2844 + x2502;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2846 = x2845 - x2348;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2847 = x2348 * x69;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2848 = x2364 + x2847;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2849 = x2328 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2850 = x2848 + x2849;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2851 = x2850 + x2330;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2852 = x2326 * x40;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2853 = x2852 + x2352;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2854 = x2853 + x2354;
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2855 = x2326 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2846);
          reg = x2846;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2851);
          reg = x2851;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2854);
          reg = x2854;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2855);
          reg = x2855;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2856 = x2689 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2857 = Fp(x2856.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2857);
            reg = x2857;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2858 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2858 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2859 = x2856 - x2858;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2860 = x2859 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2861 = Fp(x2860.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2861);
            reg = x2861;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2862 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2862 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2863 = x2860 - x2862;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2864 = x2863 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2865 = Fp(x2864.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2865);
            reg = x2865;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2866 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2866 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2867 = x2864 - x2866;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2868 = x2867 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2869 = Fp(x2868.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2869);
            reg = x2869;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2870 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2870 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2871 = x2868 - x2870;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2872 = x2871 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2872);
          reg = x2872;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2873 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2873 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2874 = x93 - x2873;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2875 = x2873 * x2874;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2875);
          reg = x2875;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2876 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2876 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2877 = x90 - x2873;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2878 = x2876 * x2877;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2878 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2879 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2879 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2879);
          reg = x2879;
        }
        if (x2677 != 0) {
          host_args.at(0) = x2673;
          host_args.at(1) = x736;
          host_args.at(2) = x737;
          host_args.at(3) = x740;
          host_args.at(4) = x2519;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2880 = x2673 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x737);
            reg = x737;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2519);
            reg = x2519;
          }
          {
            host_args.at(0) = x2880;
            host_args.at(1) = x736;
            host_args.at(2) = x737;
            host_args.at(3) = x740;
            host_args.at(4) = x2519;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2881 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2881 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2882 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2882 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2883 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2883 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2884 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2884 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2880);
            reg = x2880;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2881);
            reg = x2881;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2882);
            reg = x2882;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2883);
            reg = x2883;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2884);
            reg = x2884;
          }
        }
        if (x2676 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2885 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2885 != Fp::invalid());
      if (x2885 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2886 = x2373 - x37;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2886 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2362 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2887 = x2333 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2888 = x2336 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2889 = x2887 + x2888;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2890 = x2889 + x2502;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2891 = x2326 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2892 = x2328 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2893 = x2891 + x2892;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2894 = x2893 + x2330;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2895 = x2326 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2890);
          reg = x2890;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2894);
          reg = x2894;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2895);
          reg = x2895;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2895);
          reg = x2895;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2896 = x2693 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2897 = Fp(x2896.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2897);
            reg = x2897;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2898 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2898 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2899 = x2896 - x2898;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2900 = x2899 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2901 = Fp(x2900.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2901);
            reg = x2901;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2902 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2902 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2903 = x2900 - x2902;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2904 = x2903 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2905 = Fp(x2904.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2905);
            reg = x2905;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2906 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2906 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2907 = x2904 - x2906;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2908 = x2907 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2909 = Fp(x2908.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2909);
            reg = x2909;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2910 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2910 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2911 = x2908 - x2910;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2912 = x2911 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2912);
          reg = x2912;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2913 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2913 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2914 = x93 - x2913;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2915 = x2913 * x2914;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2915);
          reg = x2915;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2916 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2916 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2917 = x90 - x2913;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2918 = x2916 * x2917;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2918 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2919 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2919 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2919);
          reg = x2919;
        }
        if (x2677 != 0) {
          host_args.at(0) = x2673;
          host_args.at(1) = x736;
          host_args.at(2) = x737;
          host_args.at(3) = x740;
          host_args.at(4) = x2519;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2920 = x2673 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x736);
            reg = x736;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x737);
            reg = x737;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x740);
            reg = x740;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2519);
            reg = x2519;
          }
          {
            host_args.at(0) = x2920;
            host_args.at(1) = x736;
            host_args.at(2) = x737;
            host_args.at(3) = x740;
            host_args.at(4) = x2519;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2921 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2921 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2922 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2922 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2923 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2923 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2924 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2924 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2920);
            reg = x2920;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2921);
            reg = x2921;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2922);
            reg = x2922;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2923);
            reg = x2923;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2924);
            reg = x2924;
          }
        }
        if (x2676 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2925 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2925 != Fp::invalid());
      if (x2925 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2926 = x2373 - x36;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2926 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2364);
          reg = x2364;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2355);
          reg = x2355;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2341);
          reg = x2341;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2927 = x2681 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2928 = Fp(x2927.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2928);
            reg = x2928;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2929 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2929 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2930 = x2927 - x2929;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2931 = x2930 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2932 = Fp(x2931.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2932);
            reg = x2932;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2933 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2933 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2934 = x2931 - x2933;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2935 = x2934 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2936 = Fp(x2935.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2936);
            reg = x2936;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2937 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2937 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2938 = x2935 - x2937;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2939 = x2938 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2940 = Fp(x2939.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2940);
            reg = x2940;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2941 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2942 = x2939 - x2941;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2943 = x2942 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2943);
          reg = x2943;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2944 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2944 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2945 = x93 - x2944;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2946 = x2944 * x2945;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2946);
          reg = x2946;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2947 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2948 = x90 - x2944;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2949 = x2947 * x2948;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2949 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2950 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2950 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2950);
          reg = x2950;
        }
        if (x2677 != 0) {
          host_args.at(0) = x2673;
          host_args.at(1) = x2605;
          host_args.at(2) = x2609;
          host_args.at(3) = x2617;
          host_args.at(4) = x2621;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2951 = x2673 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2605);
            reg = x2605;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2609);
            reg = x2609;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2617);
            reg = x2617;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2621);
            reg = x2621;
          }
          {
            host_args.at(0) = x2951;
            host_args.at(1) = x2605;
            host_args.at(2) = x2609;
            host_args.at(3) = x2617;
            host_args.at(4) = x2621;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2952 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2952 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2953 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2953 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2954 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2954 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2955 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2955 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2951);
            reg = x2951;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2952);
            reg = x2952;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2953);
            reg = x2953;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2954);
            reg = x2954;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2955);
            reg = x2955;
          }
        }
        if (x2676 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
      auto x2956 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2956 != Fp::invalid());
      if (x2956 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x2957 = x2373 - x35;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x2957 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:60");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2364);
          reg = x2364;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2355);
          reg = x2355;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2341);
          reg = x2341;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2958 = x2681 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2959 = Fp(x2958.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2959);
            reg = x2959;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2960 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2960 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2961 = x2958 - x2960;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2962 = x2961 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2963 = Fp(x2962.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2963);
            reg = x2963;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2964 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2964 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2965 = x2962 - x2964;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2966 = x2965 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x2967 = Fp(x2966.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2967);
            reg = x2967;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x2968 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2968 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x2969 = x2966 - x2968;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x2970 = x2969 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2971 = Fp(x2970.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2971);
            reg = x2971;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2972 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2972 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2973 = x2970 - x2972;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2974 = x2973 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2974);
          reg = x2974;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2975 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2975 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2976 = x93 - x2975;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2977 = x2975 * x2976;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2977);
          reg = x2977;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2978 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2978 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2979 = x90 - x2975;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2980 = x2978 * x2979;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2980 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/5/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x2981 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2981 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2981);
          reg = x2981;
        }
        if (x2677 != 0) {
          host_args.at(0) = x2673;
          host_args.at(1) = x2605;
          host_args.at(2) = x2609;
          host_args.at(3) = x2617;
          host_args.at(4) = x2621;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
          auto x2982 = x2673 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2605);
            reg = x2605;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2609);
            reg = x2609;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2617);
            reg = x2617;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2621);
            reg = x2621;
          }
          {
            host_args.at(0) = x2982;
            host_args.at(1) = x2605;
            host_args.at(2) = x2609;
            host_args.at(3) = x2617;
            host_args.at(4) = x2621;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2983 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x2983 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2984 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2984 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2985 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2985 != Fp::invalid());
          // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x2986 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2986 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2982);
            reg = x2982;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2983);
            reg = x2983;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2984);
            reg = x2984;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2985);
            reg = x2985;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2986);
            reg = x2986;
          }
        }
        if (x2676 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
    }
    // loc("Top/Mux/5/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":39:25))
    auto x2987 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x2987 != Fp::invalid());
    if (x2987 != 0) {
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      auto x2988 = x749 * x74;
      {
        host_args.at(0) = x2988;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2989 = host_outs.at(0);
        auto x2990 = host_outs.at(1);
        auto x2991 = host_outs.at(2);
        auto x2992 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2989);
          reg = x2989;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2990);
          reg = x2990;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2991);
          reg = x2991;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2992);
          reg = x2992;
        }
      }
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2993 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2993 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2994 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2994 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2995 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2995 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x2996 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2996 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2988);
        reg = x2988;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2993);
        reg = x2993;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2994);
        reg = x2994;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2995);
        reg = x2995;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2996);
        reg = x2996;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2997 = Fp(x2996.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2998 = x2997 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2998);
          reg = x2998;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2999 = Fp(x2996.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3000 = x2999 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3000);
          reg = x3000;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3001 = Fp(x2996.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3002 = x3001 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3002);
          reg = x3002;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3003 = Fp(x2996.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3004 = x3003 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3004);
          reg = x3004;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3005 = Fp(x2996.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3006 = x3005 * x53;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3006);
          reg = x3006;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3007 = Fp(x2996.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3007);
          reg = x3007;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3008 = Fp(x2995.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3009 = x3008 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3009);
          reg = x3009;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3010 = Fp(x2995.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3011 = x3010 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3011);
          reg = x3011;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3012 = Fp(x2995.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3013 = x3012 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3013);
          reg = x3013;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3014 = Fp(x2995.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3015 = x3014 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3015);
          reg = x3015;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3016 = Fp(x2995.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3016);
          reg = x3016;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3017 = Fp(x2994.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3018 = x3017 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3018);
          reg = x3018;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3019 = Fp(x2994.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3020 = x3019 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3020);
          reg = x3020;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3021 = Fp(x2994.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3022 = x3021 * x55;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3022);
          reg = x3022;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3023 = Fp(x2994.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3024 = x3023 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3024);
          reg = x3024;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3025 = Fp(x2994.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3025);
          reg = x3025;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3026 = Fp(x2993.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3027 = x3026 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3027);
          reg = x3027;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3028 = Fp(x2993.asUInt32() & x49.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3028);
          reg = x3028;
        }
      }
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3029 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3029 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3030 = x3029 * x52;
      // loc("Top/Mux/5/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3031 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3031 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3032 = x3031 * x56;
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3033 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3033 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3034 = x3033 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3035 = x3032 + x3034;
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3036 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3036 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3037 = x3036 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3038 = x3035 + x3037;
      // loc("Top/Mux/5/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3039 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3039 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3040 = x3038 + x3039;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3041 = x3030 + x3040;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3042 = x3041 * x90;
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3043 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3043 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3044 = x3042 + x3043;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3045 = x2996 - x3044;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3045 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3046 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3046 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3047 = x3046 * x69;
      // loc("Top/Mux/5/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3048 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3048 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3049 = x3048 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3050 = x3047 + x3049;
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3051 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3051 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3052 = x3050 + x3051;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3053 = x3052 * x56;
      // loc("Top/Mux/5/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3054 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3054 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3055 = x3054 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3056 = x3053 + x3055;
      // loc("Top/Mux/5/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3057 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3057 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3058 = x3056 + x3057;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3059 = x2995 - x3058;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3059 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3060 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3060 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3061 = x3060 * x61;
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3062 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3062 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3063 = x3062 * x76;
      // loc("Top/Mux/5/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3064 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3064 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3065 = x3063 + x3064;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3066 = x3065 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3067 = x3061 + x3066;
      // loc("Top/Mux/5/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3068 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3068 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3069 = x3068 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3070 = x3067 + x3069;
      // loc("Top/Mux/5/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3071 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3071 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3072 = x3070 + x3071;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3073 = x2994 - x3072;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3073 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/5/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3074 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3074 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3075 = x3074 * x61;
      // loc("Top/Mux/5/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3076 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3076 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3077 = x3075 + x3076;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3078 = x2993 - x3077;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3078 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2993;
        host_args.at(1) = x2994;
        host_args.at(2) = x2995;
        host_args.at(3) = x2996;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3079 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3080 = (x3079 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3080);
            reg = x3080;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3081 = x3079 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3082 = (x3081 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3082);
            reg = x3082;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3083 = x3079 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3084 = (x3083 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3084);
            reg = x3084;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3085 = x3079 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3086 = (x3085 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3086);
            reg = x3086;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3087 = x3079 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3088 = (x3087 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3088);
            reg = x3088;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3089 = x3079 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3090 = (x3089 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3090);
            reg = x3090;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3091 = x3079 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3092 = (x3091 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3092);
            reg = x3092;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3093 = x3079 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3094 = (x3093 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3094);
            reg = x3094;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3095 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3095 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3096 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3096 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3097 = x3096 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3098 = x3095 + x3097;
        // loc("Top/Mux/5/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3099 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3099 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3100 = x3099 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3101 = x3098 + x3100;
        // loc("Top/Mux/5/Mux/3/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3102 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3102 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3103 = x3102 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3104 = x3101 + x3103;
        // loc("Top/Mux/5/Mux/3/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3105 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3105 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3106 = x3105 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3107 = x3104 + x3106;
        // loc("Top/Mux/5/Mux/3/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3108 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3108 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3109 = x3108 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3110 = x3107 + x3109;
        // loc("Top/Mux/5/Mux/3/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3111 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3111 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3112 = x3111 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3113 = x3110 + x3112;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3114 = x3113 - x3079;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3114 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3115 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3115 != Fp::invalid());
        if (x3115 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3116 = x3036 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3117 = x3039 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3118 = x3116 + x3117;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3119 = x3043 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3120 = x3119 + x3052;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3121 = x3118 + x3120;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3122 = x3029 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3123 = x3031 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3124 = x3122 + x3123;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3125 = x3124 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3126 = x3029 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3121);
            reg = x3121;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3125);
            reg = x3125;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3126);
            reg = x3126;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3126);
            reg = x3126;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3127 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3127 != Fp::invalid());
        if (x3127 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3128 = x3036 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3129 = x3039 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3130 = x3128 + x3129;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3131 = x3043 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3132 = x3131 + x3052;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3133 = x3130 + x3132;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3134 = x3029 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3135 = x3031 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3136 = x3134 + x3135;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3137 = x3136 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3138 = x3029 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3133);
            reg = x3133;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3137);
            reg = x3137;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3138);
            reg = x3138;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3138);
            reg = x3138;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3139 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3139 != Fp::invalid());
        if (x3139 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3140 = x3036 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3141 = x3039 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3142 = x3140 + x3141;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3143 = x3043 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3144 = x3143 + x3052;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3145 = x3142 + x3144;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3146 = x3029 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3147 = x3031 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3148 = x3146 + x3147;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3149 = x3148 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3150 = x3029 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3145);
            reg = x3145;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3149);
            reg = x3149;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3150);
            reg = x3150;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3150);
            reg = x3150;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3151 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3151 != Fp::invalid());
        if (x3151 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3152 = x3036 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3153 = x3039 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3154 = x3152 + x3153;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3155 = x3043 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3156 = x3155 + x3052;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3157 = x3154 + x3156;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3158 = x3029 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3159 = x3031 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3160 = x3158 + x3159;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3161 = x3160 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3162 = x3029 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3157);
            reg = x3157;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3161);
            reg = x3161;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3162);
            reg = x3162;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3162);
            reg = x3162;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3163 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3163 != Fp::invalid());
        if (x3163 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3164 = x3036 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3165 = x3039 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3166 = x3164 + x3165;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3167 = x3043 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3168 = x3167 + x3052;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3169 = x3166 + x3168;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3170 = x3029 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3171 = x3031 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3172 = x3170 + x3171;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3173 = x3172 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3174 = x3029 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3169);
            reg = x3169;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3173);
            reg = x3173;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3174);
            reg = x3174;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3174);
            reg = x3174;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3175 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3175 != Fp::invalid());
        if (x3175 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3176 = x3036 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3177 = x3039 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3178 = x3176 + x3177;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3179 = x3068 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3180 = x3071 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3181 = x3179 + x3180;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3182 = x3181 + x3074;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3183 = x3178 + x3182;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3184 = x3029 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3185 = x3031 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3186 = x3184 + x3185;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3187 = x3186 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3188 = x3029 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3183);
            reg = x3183;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3187);
            reg = x3187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3188);
            reg = x3188;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3188);
            reg = x3188;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3189 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3189 != Fp::invalid());
        if (x3189 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3190 = x3036 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3191 = x3039 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3192 = x3190 + x3191;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3193 = x3068 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3194 = x3071 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3195 = x3193 + x3194;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3196 = x3195 + x3074;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3197 = x3192 + x3196;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3198 = x3029 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3199 = x3031 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3200 = x3198 + x3199;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3201 = x3200 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3202 = x3029 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3197);
            reg = x3197;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3201);
            reg = x3201;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3202);
            reg = x3202;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3202);
            reg = x3202;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3203 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3203 != Fp::invalid());
        if (x3203 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3204 = x3036 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3205 = x3039 * x58;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3206 = x3204 + x3205;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3207 = x3068 * x69;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3208 = x3071 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3209 = x3207 + x3208;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3210 = x3209 + x3074;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3211 = x3206 + x3210;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3212 = x3029 * x46;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3213 = x3031 * x90;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3214 = x3212 + x3213;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3215 = x3214 + x3033;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3216 = x3029 * x89;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3211);
            reg = x3211;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3215);
            reg = x3215;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3216);
            reg = x3216;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3216);
            reg = x3216;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3217 = x3054 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3218 = x3057 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3219 = x3217 + x3218;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3220 = x3219 + x3060;
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3221 = x3220 + x45;
      {
        host_args.at(0) = x3221;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3222 = host_outs.at(0);
        auto x3223 = host_outs.at(1);
        auto x3224 = host_outs.at(2);
        auto x3225 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3222);
          reg = x3222;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3223);
          reg = x3223;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3224);
          reg = x3224;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3225);
          reg = x3225;
        }
      }
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3226 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3226 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3227 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3227 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3228 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3228 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3229 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3229 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3221);
        reg = x3221;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3226);
        reg = x3226;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3227);
        reg = x3227;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3228);
        reg = x3228;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3229);
        reg = x3229;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3230 = x3043 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3231 = x3230 + x3052;
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3232 = x3231 + x45;
      {
        host_args.at(0) = x3232;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3233 = host_outs.at(0);
        auto x3234 = host_outs.at(1);
        auto x3235 = host_outs.at(2);
        auto x3236 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3233);
          reg = x3233;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3234);
          reg = x3234;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3235);
          reg = x3235;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3236);
          reg = x3236;
        }
      }
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3237 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x3237 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3238 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3238 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3239 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3239 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3240 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3240 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3232);
        reg = x3232;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3237);
        reg = x3237;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3238);
        reg = x3238;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3239);
        reg = x3239;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3240);
        reg = x3240;
      }
      // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3241 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3241 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3242 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3242 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3243 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3243 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3244 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3244 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3245 = x3068 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3246 = x3071 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3247 = x3245 + x3246;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3248 = x3247 + x3074;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3249 = (x3248 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3249);
          reg = x3249;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3250 = inv(x3248);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3250);
          reg = x3250;
        }
      }
      // loc("Top/Mux/5/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3251 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x3251 != Fp::invalid());
      if (x3251 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3248 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3252 = x93 - x3251;
      if (x3252 != 0) {
        // loc("Top/Mux/5/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3253 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x3253 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3254 = x3248 * x3253;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3255 = x3254 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3255 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":47:17)
        auto x3256 = x3226 + x3241;
        // loc("cirgen/circuit/rv32im/memio.cpp":48:18)
        auto x3257 = Fp(x3256.asUInt32() & x75.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3258 = (x3257 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3258);
            reg = x3258;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3259 = x3257 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3260 = (x3259 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3260);
            reg = x3260;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3261 = x3257 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3262 = (x3261 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3262);
            reg = x3262;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3263 = x3257 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3264 = (x3263 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3264);
            reg = x3264;
          }
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3265 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3265 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3266 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x3266 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3267 = x3266 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3268 = x3265 + x3267;
        // loc("Top/Mux/5/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3269 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x3269 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3270 = x3269 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3271 = x3268 + x3270;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3272 = x3271 - x3257;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3272 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("cirgen/circuit/rv32im/memio.cpp":49:20)
        auto x3273 = Fp(x3256.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":49:19)
        auto x3274 = x3273 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x3275 = Fp(x3274.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3275);
            reg = x3275;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":50:15)
        auto x3276 = x3256 - x3271;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3277 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x3277 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:33)
        auto x3278 = x3277 * x88;
        // loc("cirgen/circuit/rv32im/memio.cpp":50:15)
        auto x3279 = x3276 - x3278;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3279);
          reg = x3279;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":52:22)
        auto x3280 = x3279 * x74;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3280);
          reg = x3280;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:17)
        auto x3281 = x3227 + x3242;
        // loc("cirgen/circuit/rv32im/memio.cpp":53:17)
        auto x3282 = x3281 + x3277;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:24)
        auto x3283 = Fp(x3282.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3283);
          reg = x3283;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":55:25)
        auto x3284 = Fp(x3282.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3285 = x3284 * x87;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3285);
          reg = x3285;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:17)
        auto x3286 = x3228 + x3243;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3287 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x3287 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:17)
        auto x3288 = x3286 + x3287;
        // loc("cirgen/circuit/rv32im/memio.cpp":57:24)
        auto x3289 = Fp(x3288.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3289);
          reg = x3289;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":58:25)
        auto x3290 = Fp(x3288.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3291 = x3290 * x87;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3291);
          reg = x3291;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":59:17)
        auto x3292 = x3229 + x3244;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3293 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x3293 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:17)
        auto x3294 = x3292 + x3293;
        // loc("cirgen/circuit/rv32im/memio.cpp":60:23)
        auto x3295 = Fp(x3294.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3295);
          reg = x3295;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":61:24)
        auto x3296 = Fp(x3294.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3297 = x3296 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3297);
          reg = x3297;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":62:20)
        auto x3298 = Fp(x3294.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:19)
        auto x3299 = x3298 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x3300 = Fp(x3299.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3300);
            reg = x3300;
          }
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3301 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x3301 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3302 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3302 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":65:16)
      auto x3303 = x3302 * x76;
      // loc("cirgen/circuit/rv32im/memio.cpp":65:6)
      auto x3304 = x3301 - x3303;
      // loc("cirgen/circuit/rv32im/memio.cpp":65:6)
      if (x3304 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:65");
      // loc("cirgen/circuit/rv32im/memio.cpp":67:6)
      auto x3305 = x3226 + x3241;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3306 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x3306 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3307 = x3306 * x88;
      // loc("cirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3308 = x3307 + x3301;
      // loc("Top/Mux/5/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3309 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x3309 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3310 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x3310 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3311 = x3310 * x90;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3312 = x3309 + x3311;
      // loc("Top/Mux/5/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3313 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x3313 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3314 = x3313 * x75;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3315 = x3312 + x3314;
      // loc("cirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3316 = x3308 + x3315;
      // loc("cirgen/circuit/rv32im/memio.cpp":67:6)
      auto x3317 = x3305 - x3316;
      // loc("cirgen/circuit/rv32im/memio.cpp":67:6)
      if (x3317 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:67");
      // loc("cirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3318 = x3227 + x3242;
      // loc("cirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3319 = x3318 + x3306;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3320 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x3320 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":69:46)
      auto x3321 = x3320 * x88;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3322 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x3322 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":69:46)
      auto x3323 = x3321 + x3322;
      // loc("cirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3324 = x3319 - x3323;
      // loc("cirgen/circuit/rv32im/memio.cpp":69:6)
      if (x3324 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:69");
      // loc("cirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3325 = x3228 + x3243;
      // loc("cirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3326 = x3325 + x3320;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3327 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x3327 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":71:46)
      auto x3328 = x3327 * x88;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3329 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x3329 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":71:46)
      auto x3330 = x3328 + x3329;
      // loc("cirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3331 = x3326 - x3330;
      // loc("cirgen/circuit/rv32im/memio.cpp":71:6)
      if (x3331 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:71");
      // loc("cirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3332 = x3229 + x3244;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3333 = x3332 + x3327;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x3334 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x3334 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3335 = x3334 * x88;
      // loc("Top/Mux/5/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3336 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3336 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":73:63)
      auto x3337 = x3336 * x76;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3338 = x3335 + x3337;
      // loc("Top/Mux/5/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3339 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3339 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3340 = x3338 + x3339;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3341 = x3333 - x3340;
      // loc("cirgen/circuit/rv32im/memio.cpp":73:6)
      if (x3341 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:73");
      // loc("cirgen/circuit/rv32im/memio.cpp":76:15)
      auto x3342 = x93 - x3336;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:7)
      auto x3343 = x3336 * x3342;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:28)
      auto x3344 = x90 - x3336;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:7)
      auto x3345 = x3343 * x3344;
      // loc("cirgen/circuit/rv32im/memio.cpp":76:7)
      if (x3345 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:76");
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3346 = x3336 * x77;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:41)
      auto x3347 = x3339 * x34;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3348 = x3346 + x3347;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:68)
      auto x3349 = x3329 * x33;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3350 = x3348 + x3349;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3351 = x3322 * x52;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3352 = x3350 + x3351;
      // loc("cirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3353 = x3352 + x3302;
      {
        host_args.at(0) = x3353;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3354 = host_outs.at(0);
        auto x3355 = host_outs.at(1);
        auto x3356 = host_outs.at(2);
        auto x3357 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3354);
          reg = x3354;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3355);
          reg = x3355;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3356);
          reg = x3356;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3357);
          reg = x3357;
        }
      }
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3358 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x3358 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3359 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x3359 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3360 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x3360 != Fp::invalid());
      // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3361 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x3361 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3353);
        reg = x3353;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3358);
        reg = x3358;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3359);
        reg = x3359;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3360);
        reg = x3360;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3361);
        reg = x3361;
      }
      host_args.at(0) = x3241;
      host_args.at(1) = x3242;
      host_args.at(2) = x3243;
      host_args.at(3) = x3244;
      host_args.at(4) = x3220;
      host_args.at(5) = x3226;
      host_args.at(6) = x3227;
      host_args.at(7) = x3228;
      host_args.at(8) = x3229;
      host_args.at(9) = x3231;
      host_args.at(10) = x3237;
      host_args.at(11) = x3238;
      host_args.at(12) = x3239;
      host_args.at(13) = x3240;
      host_args.at(14) = x3353;
      host_args.at(15) = x3315;
      host_args.at(16) = x3358;
      host_args.at(17) = x3359;
      host_args.at(18) = x3360;
      host_args.at(19) = x3361;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, Addr = %10x, lowBits = %u, loaded = %w", host_args.data(), 20, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":92:17)
      auto x3362 = x749 + x76;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3363 = x3362 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x3364 = Fp(x3363.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3364);
          reg = x3364;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x3365 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x3365 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x3366 = x3363 - x3365;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x3367 = x3366 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x3368 = Fp(x3367.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3368);
          reg = x3368;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x3369 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x3369 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x3370 = x3367 - x3369;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x3371 = x3370 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x3372 = Fp(x3371.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3372);
          reg = x3372;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x3373 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x3373 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x3374 = x3371 - x3373;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x3375 = x3374 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3376 = Fp(x3375.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3376);
          reg = x3376;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3377 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x3377 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3378 = x3375 - x3377;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3379 = x3378 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3379);
        reg = x3379;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3380 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x3380 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3381 = x93 - x3380;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3382 = x3380 * x3381;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3382);
        reg = x3382;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3383 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x3383 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3384 = x90 - x3380;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x3385 = x3383 * x3384;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3385 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":93:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x62);
        reg = x62;
      }
      // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
      auto x3386 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3386 != Fp::invalid());
      if (x3386 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3387 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3387 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3388 = x3387 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3388 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3389 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3389 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3390 = x3389 + x3310;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3391 = x3390 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3391 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3392 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3392 != Fp::invalid());
        if (x3392 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3393 = Fp(x3358.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3393);
              reg = x3393;
            }
          }
        }
        if (x3309 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3394 = Fp(x3359.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3394);
              reg = x3394;
            }
          }
        }
        if (x3310 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3395 = Fp(x3360.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3395);
              reg = x3395;
            }
          }
        }
        if (x3313 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3396 = Fp(x3361.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3396);
              reg = x3396;
            }
          }
        }
        {
          // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3397 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3397 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3398 = Fp(x3397.asUInt32() & x61.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3399 = x3398 * x60;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3399);
            reg = x3399;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3400 = Fp(x3397.asUInt32() & x49.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3401 = x3400 * x90;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3401);
            reg = x3401;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3402 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3402 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3403 = x93 - x3402;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3404 = x3402 * x3403;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3404 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3405 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3405 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3406 = x3402 * x61;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3407 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3407 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3408 = x3407 * x53;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3409 = x3406 + x3408;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3410 = x3405 - x3409;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3410 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3411 = x3402 * x89;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3412 = x3392 * x3358;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3413 = x3309 * x3359;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3414 = x3412 + x3413;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3415 = x3310 * x3360;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3416 = x3414 + x3415;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3417 = x3313 * x3361;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3418 = x3416 + x3417;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3418);
          reg = x3418;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3411);
          reg = x3411;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3411);
          reg = x3411;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3411);
          reg = x3411;
        }
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3419 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x3419 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3420 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3420 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3421 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3421 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3422 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3422 != Fp::invalid());
        host_args.at(0) = x3411;
        host_args.at(1) = x3419;
        host_args.at(2) = x3420;
        host_args.at(3) = x3421;
        host_args.at(4) = x3422;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3252 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3423 = x3248 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3419);
            reg = x3419;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3420);
            reg = x3420;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3421);
            reg = x3421;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3422);
            reg = x3422;
          }
          {
            host_args.at(0) = x3423;
            host_args.at(1) = x3419;
            host_args.at(2) = x3420;
            host_args.at(3) = x3421;
            host_args.at(4) = x3422;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3424 = args[2][146 * steps + ((cycle - 0) & mask)];
          assert(x3424 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3425 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3425 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3426 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3426 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3427 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3427 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3423);
            reg = x3423;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3424);
            reg = x3424;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3425);
            reg = x3425;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3426);
            reg = x3426;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3427);
            reg = x3427;
          }
        }
        if (x3251 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3428 = x3076 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3428 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3065 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3429 = x3036 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3430 = x3039 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3431 = x3429 + x3430;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3432 = x3431 + x3231;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3433 = x3029 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3434 = x3031 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3435 = x3433 + x3434;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3436 = x3435 + x3033;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3437 = x3029 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3432);
          reg = x3432;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3436);
          reg = x3436;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3437);
          reg = x3437;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3437);
          reg = x3437;
        }
      }
      // loc("Top/Mux/5/Mux/3/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3438 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3438 != Fp::invalid());
      if (x3438 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3439 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3439 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3440 = x3439 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3440 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x93 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3441 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3441 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3442 = x3441 + x3310;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3443 = x3442 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3443 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3444 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3444 != Fp::invalid());
        if (x3444 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3445 = Fp(x3359.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3445);
              reg = x3445;
            }
          }
        }
        if (x3310 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3446 = Fp(x3361.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3446);
              reg = x3446;
            }
          }
        }
        {
          // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3447 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3447 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3448 = Fp(x3447.asUInt32() & x61.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3449 = x3448 * x60;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3449);
            reg = x3449;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3450 = Fp(x3447.asUInt32() & x49.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3451 = x3450 * x90;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3451);
            reg = x3451;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3452 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3452 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3453 = x93 - x3452;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3454 = x3452 * x3453;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3454 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3455 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3455 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3456 = x3452 * x61;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3457 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3457 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3458 = x3457 * x53;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3459 = x3456 + x3458;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3460 = x3455 - x3459;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3460 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3461 = x3452 * x89;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3462 = x3444 * x3358;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3463 = x3310 * x3360;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3464 = x3462 + x3463;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3465 = x3444 * x3359;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3466 = x3310 * x3361;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3467 = x3465 + x3466;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3464);
          reg = x3464;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3467);
          reg = x3467;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3461);
          reg = x3461;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3461);
          reg = x3461;
        }
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3468 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x3468 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3469 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3469 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3470 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3470 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3471 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3471 != Fp::invalid());
        host_args.at(0) = x3461;
        host_args.at(1) = x3468;
        host_args.at(2) = x3469;
        host_args.at(3) = x3470;
        host_args.at(4) = x3471;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3252 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3472 = x3248 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3468);
            reg = x3468;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3469);
            reg = x3469;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3470);
            reg = x3470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3471);
            reg = x3471;
          }
          {
            host_args.at(0) = x3472;
            host_args.at(1) = x3468;
            host_args.at(2) = x3469;
            host_args.at(3) = x3470;
            host_args.at(4) = x3471;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3473 = args[2][146 * steps + ((cycle - 0) & mask)];
          assert(x3473 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3474 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3474 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3475 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3475 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3476 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3476 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3472);
            reg = x3472;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3473);
            reg = x3473;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3474);
            reg = x3474;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3475);
            reg = x3475;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3476);
            reg = x3476;
          }
        }
        if (x3251 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3477 = x3076 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3477 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3478 = x3065 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3478 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3479 = x3036 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3480 = x3039 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3481 = x3479 + x3480;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3482 = x3481 + x3231;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3483 = x3029 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3484 = x3031 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3485 = x3483 + x3484;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3486 = x3485 + x3033;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3487 = x3029 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3482);
          reg = x3482;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3486);
          reg = x3486;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3487);
          reg = x3487;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3487);
          reg = x3487;
        }
      }
      // loc("Top/Mux/5/Mux/3/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3488 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3488 != Fp::invalid());
      if (x3488 != 0) {
        if (x93 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3489 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3489 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3490 = x3489 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3490 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3491 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3491 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3492 = x3491 + x3310;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3493 = x3492 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3493 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3494 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3494 != Fp::invalid());
        if (x3494 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3495 = Fp(x3361.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3495);
              reg = x3495;
            }
          }
        }
        {
          // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3496 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3496 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3497 = Fp(x3496.asUInt32() & x61.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3498 = x3497 * x60;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3498);
            reg = x3498;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3499 = Fp(x3496.asUInt32() & x49.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3500 = x3499 * x90;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3500);
            reg = x3500;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3501 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3501 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3502 = x93 - x3501;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3503 = x3501 * x3502;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3503 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3504 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3504 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3505 = x3501 * x61;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3506 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3506 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3507 = x3506 * x53;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3508 = x3505 + x3507;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3509 = x3504 - x3508;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3509 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3510 = x3494 * x3358;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3511 = x3494 * x3359;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3512 = x3494 * x3360;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3513 = x3494 * x3361;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3510);
          reg = x3510;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3511);
          reg = x3511;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3512);
          reg = x3512;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3513);
          reg = x3513;
        }
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3514 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x3514 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3515 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3515 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3516 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3516 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3517 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3517 != Fp::invalid());
        host_args.at(0) = x92;
        host_args.at(1) = x3514;
        host_args.at(2) = x3515;
        host_args.at(3) = x3516;
        host_args.at(4) = x3517;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3252 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3518 = x3248 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3514);
            reg = x3514;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3515);
            reg = x3515;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3516);
            reg = x3516;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3517);
            reg = x3517;
          }
          {
            host_args.at(0) = x3518;
            host_args.at(1) = x3514;
            host_args.at(2) = x3515;
            host_args.at(3) = x3516;
            host_args.at(4) = x3517;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3519 = args[2][146 * steps + ((cycle - 0) & mask)];
          assert(x3519 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3520 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3520 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3521 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3521 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3522 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3522 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3518);
            reg = x3518;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3519);
            reg = x3519;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3520);
            reg = x3520;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3521);
            reg = x3521;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3522);
            reg = x3522;
          }
        }
        if (x3251 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3523 = x3076 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3523 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3524 = x3065 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3524 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3525 = x3036 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3526 = x3039 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3527 = x3525 + x3526;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3528 = x3527 + x3231;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3529 = x3029 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3530 = x3031 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3531 = x3529 + x3530;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3532 = x3531 + x3033;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3533 = x3029 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3528);
          reg = x3528;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3532);
          reg = x3532;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3533);
          reg = x3533;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3533);
          reg = x3533;
        }
      }
      // loc("Top/Mux/5/Mux/3/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3534 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3534 != Fp::invalid());
      if (x3534 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3535 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3535 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3536 = x3535 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3536 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3537 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3537 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3538 = x3537 + x3310;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3539 = x3538 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3539 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3540 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3540 != Fp::invalid());
        if (x3540 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3541 = Fp(x3358.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3541);
              reg = x3541;
            }
          }
        }
        if (x3309 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3542 = Fp(x3359.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3542);
              reg = x3542;
            }
          }
        }
        if (x3310 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3543 = Fp(x3360.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3543);
              reg = x3543;
            }
          }
        }
        if (x3313 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3544 = Fp(x3361.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3544);
              reg = x3544;
            }
          }
        }
        {
          // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3545 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3545 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3546 = Fp(x3545.asUInt32() & x61.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3547 = x3546 * x60;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3547);
            reg = x3547;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3548 = Fp(x3545.asUInt32() & x49.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3549 = x3548 * x90;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3549);
            reg = x3549;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3550 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3550 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3551 = x93 - x3550;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3552 = x3550 * x3551;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3552 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3553 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3553 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3554 = x3550 * x61;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3555 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3555 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3556 = x3555 * x53;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3557 = x3554 + x3556;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3558 = x3553 - x3557;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3558 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3559 = x3540 * x3358;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3560 = x3309 * x3359;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3561 = x3559 + x3560;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3562 = x3310 * x3360;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3563 = x3561 + x3562;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3564 = x3313 * x3361;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3565 = x3563 + x3564;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3565);
          reg = x3565;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3566 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x3566 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3567 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3567 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3568 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3568 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3569 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3569 != Fp::invalid());
        host_args.at(0) = x92;
        host_args.at(1) = x3566;
        host_args.at(2) = x3567;
        host_args.at(3) = x3568;
        host_args.at(4) = x3569;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3252 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3570 = x3248 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3566);
            reg = x3566;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3567);
            reg = x3567;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3568);
            reg = x3568;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3569);
            reg = x3569;
          }
          {
            host_args.at(0) = x3570;
            host_args.at(1) = x3566;
            host_args.at(2) = x3567;
            host_args.at(3) = x3568;
            host_args.at(4) = x3569;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3571 = args[2][146 * steps + ((cycle - 0) & mask)];
          assert(x3571 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3572 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3572 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3573 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3573 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3574 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3574 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3570);
            reg = x3570;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3571);
            reg = x3571;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3572);
            reg = x3572;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3573);
            reg = x3573;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3574);
            reg = x3574;
          }
        }
        if (x3251 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3575 = x3076 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3575 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3576 = x3065 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3576 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3577 = x3036 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3578 = x3039 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3579 = x3577 + x3578;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3580 = x3579 + x3231;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3581 = x3029 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3582 = x3031 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3583 = x3581 + x3582;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3584 = x3583 + x3033;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3585 = x3029 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3580);
          reg = x3580;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3584);
          reg = x3584;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3585);
          reg = x3585;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3585);
          reg = x3585;
        }
      }
      // loc("Top/Mux/5/Mux/3/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3586 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3586 != Fp::invalid());
      if (x3586 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3587 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3587 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3588 = x3587 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3588 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x93 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3589 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3589 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3590 = x3589 + x3310;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3591 = x3590 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3591 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3592 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3592 != Fp::invalid());
        if (x3592 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3593 = Fp(x3359.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3593);
              reg = x3593;
            }
          }
        }
        if (x3310 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":96:21)
            auto x3594 = Fp(x3361.asUInt32() & x89.asUInt32());
            // loc("cirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3594);
              reg = x3594;
            }
          }
        }
        {
          // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
          auto x3595 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3595 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3596 = Fp(x3595.asUInt32() & x61.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3597 = x3596 * x60;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3597);
            reg = x3597;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3598 = Fp(x3595.asUInt32() & x49.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3599 = x3598 * x90;
          // loc("cirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3599);
            reg = x3599;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3600 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3600 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3601 = x93 - x3600;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3602 = x3600 * x3601;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3602 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3603 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3603 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3604 = x3600 * x61;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x3605 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3605 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3606 = x3605 * x53;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3607 = x3604 + x3606;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3608 = x3603 - x3607;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3608 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3609 = x3592 * x3358;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3610 = x3310 * x3360;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3611 = x3609 + x3610;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3612 = x3592 * x3359;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3613 = x3310 * x3361;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3614 = x3612 + x3613;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3611);
          reg = x3611;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3614);
          reg = x3614;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3615 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x3615 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3616 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3616 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3617 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3617 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3618 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3618 != Fp::invalid());
        host_args.at(0) = x92;
        host_args.at(1) = x3615;
        host_args.at(2) = x3616;
        host_args.at(3) = x3617;
        host_args.at(4) = x3618;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3252 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3619 = x3248 + x45;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3615);
            reg = x3615;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3616);
            reg = x3616;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3617);
            reg = x3617;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3618);
            reg = x3618;
          }
          {
            host_args.at(0) = x3619;
            host_args.at(1) = x3615;
            host_args.at(2) = x3616;
            host_args.at(3) = x3617;
            host_args.at(4) = x3618;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3620 = args[2][146 * steps + ((cycle - 0) & mask)];
          assert(x3620 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3621 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3621 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3622 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3622 != Fp::invalid());
          // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3623 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3623 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3619);
            reg = x3619;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3620);
            reg = x3620;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3621);
            reg = x3621;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3622);
            reg = x3622;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3623);
            reg = x3623;
          }
        }
        if (x3251 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3624 = x3076 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3624 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3625 = x3065 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3625 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3626 = x3036 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3627 = x3039 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3628 = x3626 + x3627;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3629 = x3628 + x3231;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3630 = x3029 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3631 = x3031 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3632 = x3630 + x3631;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3633 = x3632 + x3033;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3634 = x3029 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3629);
          reg = x3629;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3633);
          reg = x3633;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3634);
          reg = x3634;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3634);
          reg = x3634;
        }
      }
      // loc("Top/Mux/5/Mux/3/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3635 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x3635 != Fp::invalid());
      if (x3635 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3636 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3636 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3637 = x3636 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3637 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3638 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3638 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3639 = x3638 + x3310;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3640 = x3639 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3640 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3641 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3641 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3642 = x3641 * x3237;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3643 = x93 - x3641;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3644 = x3643 * x3358;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3645 = x3642 + x3644;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3646 = x3309 * x3237;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3647 = x93 - x3309;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3648 = x3647 * x3359;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3649 = x3646 + x3648;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3650 = x3310 * x3237;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3651 = x93 - x3310;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3652 = x3651 * x3360;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3653 = x3650 + x3652;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3654 = x3313 * x3237;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3655 = x93 - x3313;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3656 = x3655 * x3361;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3657 = x3654 + x3656;
        host_args.at(0) = x3645;
        host_args.at(1) = x3649;
        host_args.at(2) = x3653;
        host_args.at(3) = x3657;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3645);
          reg = x3645;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3649);
          reg = x3649;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3653);
          reg = x3653;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3657);
          reg = x3657;
        }
        {
          host_args.at(0) = x3353;
          host_args.at(1) = x3645;
          host_args.at(2) = x3649;
          host_args.at(3) = x3653;
          host_args.at(4) = x3657;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3658 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x3658 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3659 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3659 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3660 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3660 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3661 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3661 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3353);
          reg = x3353;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3658);
          reg = x3658;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3659);
          reg = x3659;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3660);
          reg = x3660;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3661);
          reg = x3661;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3662 = x3076 - x32;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3662 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3065 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3663 = x3036 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3664 = x3039 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3665 = x3663 + x3664;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3666 = x3665 + x3248;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3667 = x3029 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3668 = x3031 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3669 = x3667 + x3668;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3670 = x3669 + x3033;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3671 = x3029 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3666);
          reg = x3666;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3670);
          reg = x3670;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3671);
          reg = x3671;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3671);
          reg = x3671;
        }
      }
      // loc("Top/Mux/5/Mux/3/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3672 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x3672 != Fp::invalid());
      if (x3672 != 0) {
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3673 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3673 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3674 = x3673 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3674 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x93 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3675 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3675 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3676 = x3675 + x3310;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3677 = x3676 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3677 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3678 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3678 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3679 = x3678 * x3237;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3680 = x93 - x3678;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3681 = x3680 * x3358;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3682 = x3679 + x3681;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3683 = x3310 * x3237;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3684 = x93 - x3310;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3685 = x3684 * x3360;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3686 = x3683 + x3685;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3687 = x3678 * x3238;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3688 = x3680 * x3359;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3689 = x3687 + x3688;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3690 = x3310 * x3238;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3691 = x3684 * x3361;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3692 = x3690 + x3691;
        host_args.at(0) = x3682;
        host_args.at(1) = x3689;
        host_args.at(2) = x3686;
        host_args.at(3) = x3692;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3682);
          reg = x3682;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3689);
          reg = x3689;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3686);
          reg = x3686;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3692);
          reg = x3692;
        }
        {
          host_args.at(0) = x3353;
          host_args.at(1) = x3682;
          host_args.at(2) = x3689;
          host_args.at(3) = x3686;
          host_args.at(4) = x3692;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3693 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x3693 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3694 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3694 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3695 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3695 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3696 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3696 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3353);
          reg = x3353;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3693);
          reg = x3693;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3694);
          reg = x3694;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3695);
          reg = x3695;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3696);
          reg = x3696;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3697 = x3076 - x32;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3697 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3698 = x3065 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3698 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3699 = x3036 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3700 = x3039 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3701 = x3699 + x3700;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3702 = x3701 + x3248;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3703 = x3029 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3704 = x3031 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3705 = x3703 + x3704;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3706 = x3705 + x3033;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3707 = x3029 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3702);
          reg = x3702;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3706);
          reg = x3706;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3707);
          reg = x3707;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3707);
          reg = x3707;
        }
      }
      // loc("Top/Mux/5/Mux/3/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3708 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x3708 != Fp::invalid());
      if (x3708 != 0) {
        if (x93 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3709 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3709 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3710 = x3709 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3710 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x92 != 0) {
          // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3711 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x3711 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3712 = x3711 + x3310;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3713 = x3712 - x93;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3713 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/5/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3714 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3714 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3715 = x3714 * x3237;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3716 = x93 - x3714;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3717 = x3716 * x3358;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3718 = x3715 + x3717;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3719 = x3714 * x3238;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3720 = x3716 * x3359;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3721 = x3719 + x3720;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3722 = x3714 * x3239;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3723 = x3716 * x3360;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3724 = x3722 + x3723;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3725 = x3714 * x3240;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3726 = x3716 * x3361;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3727 = x3725 + x3726;
        host_args.at(0) = x3718;
        host_args.at(1) = x3721;
        host_args.at(2) = x3724;
        host_args.at(3) = x3727;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3718);
          reg = x3718;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3721);
          reg = x3721;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3724);
          reg = x3724;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3727);
          reg = x3727;
        }
        {
          host_args.at(0) = x3353;
          host_args.at(1) = x3718;
          host_args.at(2) = x3721;
          host_args.at(3) = x3724;
          host_args.at(4) = x3727;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3728 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x3728 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3729 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3729 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3730 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3730 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3731 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3731 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3353);
          reg = x3353;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3728);
          reg = x3728;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3729);
          reg = x3729;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3730);
          reg = x3730;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3731);
          reg = x3731;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3732 = x3076 - x32;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3732 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3733 = x3065 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3733 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3734 = x3036 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3735 = x3039 * x58;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3736 = x3734 + x3735;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3737 = x3736 + x3248;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3738 = x3029 * x46;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3739 = x3031 * x90;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3740 = x3738 + x3739;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3741 = x3740 + x3033;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3742 = x3029 * x89;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3737);
          reg = x3737;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3741);
          reg = x3741;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3742);
          reg = x3742;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3742);
          reg = x3742;
        }
      }
    }
    // loc("Top/Mux/5/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":39:25))
    auto x3743 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x3743 != Fp::invalid());
    if (x3743 != 0) {
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3744 = x749 * x74;
      {
        host_args.at(0) = x3744;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3745 = host_outs.at(0);
        auto x3746 = host_outs.at(1);
        auto x3747 = host_outs.at(2);
        auto x3748 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3745);
          reg = x3745;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3746);
          reg = x3746;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3747);
          reg = x3747;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3748);
          reg = x3748;
        }
      }
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3749 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3749 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3750 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3750 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3751 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3751 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3752 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3752 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3744);
        reg = x3744;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3749);
        reg = x3749;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3750);
        reg = x3750;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3751);
        reg = x3751;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3752);
        reg = x3752;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3753 = Fp(x3752.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3754 = x3753 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3754);
          reg = x3754;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3755 = Fp(x3752.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3756 = x3755 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3756);
          reg = x3756;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3757 = Fp(x3752.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3758 = x3757 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3758);
          reg = x3758;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3759 = Fp(x3752.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3760 = x3759 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3760);
          reg = x3760;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3761 = Fp(x3752.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3762 = x3761 * x53;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3762);
          reg = x3762;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3763 = Fp(x3752.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3763);
          reg = x3763;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3764 = Fp(x3751.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3765 = x3764 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3765);
          reg = x3765;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3766 = Fp(x3751.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3767 = x3766 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3767);
          reg = x3767;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3768 = Fp(x3751.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3769 = x3768 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3769);
          reg = x3769;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3770 = Fp(x3751.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3771 = x3770 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3771);
          reg = x3771;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3772 = Fp(x3751.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3772);
          reg = x3772;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3773 = Fp(x3750.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3774 = x3773 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3774);
          reg = x3774;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3775 = Fp(x3750.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3776 = x3775 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3776);
          reg = x3776;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3777 = Fp(x3750.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3778 = x3777 * x55;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3778);
          reg = x3778;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3779 = Fp(x3750.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3780 = x3779 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3780);
          reg = x3780;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3781 = Fp(x3750.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3781);
          reg = x3781;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3782 = Fp(x3749.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3783 = x3782 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3783);
          reg = x3783;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3784 = Fp(x3749.asUInt32() & x49.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3784);
          reg = x3784;
        }
      }
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3785 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x3785 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3786 = x3785 * x52;
      // loc("Top/Mux/5/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3787 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3787 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3788 = x3787 * x56;
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3789 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x3789 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3790 = x3789 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3791 = x3788 + x3790;
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3792 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x3792 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3793 = x3792 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3794 = x3791 + x3793;
      // loc("Top/Mux/5/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3795 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x3795 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3796 = x3794 + x3795;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3797 = x3786 + x3796;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3798 = x3797 * x90;
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3799 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x3799 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3800 = x3798 + x3799;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3801 = x3752 - x3800;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3801 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3802 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x3802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3803 = x3802 * x69;
      // loc("Top/Mux/5/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3804 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3804 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3805 = x3804 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3806 = x3803 + x3805;
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3807 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x3807 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3808 = x3806 + x3807;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3809 = x3808 * x56;
      // loc("Top/Mux/5/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3810 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3810 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3811 = x3810 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3812 = x3809 + x3811;
      // loc("Top/Mux/5/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3813 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3813 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3814 = x3812 + x3813;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3815 = x3751 - x3814;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3815 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3816 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3816 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3817 = x3816 * x61;
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3818 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x3818 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3819 = x3818 * x76;
      // loc("Top/Mux/5/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3820 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3820 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3821 = x3819 + x3820;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3822 = x3821 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3823 = x3817 + x3822;
      // loc("Top/Mux/5/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3824 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3824 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3825 = x3824 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3826 = x3823 + x3825;
      // loc("Top/Mux/5/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3827 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3828 = x3826 + x3827;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3829 = x3750 - x3828;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3829 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/5/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3830 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x3830 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3831 = x3830 * x61;
      // loc("Top/Mux/5/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3832 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3832 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3833 = x3831 + x3832;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3834 = x3749 - x3833;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3834 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3749;
        host_args.at(1) = x3750;
        host_args.at(2) = x3751;
        host_args.at(3) = x3752;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3835 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3836 = (x3835 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3836);
            reg = x3836;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3837 = x3835 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3838 = (x3837 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3838);
            reg = x3838;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3839 = x3835 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3840 = (x3839 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3840);
            reg = x3840;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3841 = x3835 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3842 = (x3841 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3842);
            reg = x3842;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3843 = x3835 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3844 = (x3843 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3844);
            reg = x3844;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3845 = x3835 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3846 = (x3845 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3846);
            reg = x3846;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3847 = x3835 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3848 = (x3847 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3848);
            reg = x3848;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3849 = x3835 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3850 = (x3849 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3850);
            reg = x3850;
          }
        }
        // loc("Top/Mux/5/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3851 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x3851 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3852 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x3852 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3853 = x3852 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3854 = x3851 + x3853;
        // loc("Top/Mux/5/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3855 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x3855 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3856 = x3855 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3857 = x3854 + x3856;
        // loc("Top/Mux/5/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3858 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x3858 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3859 = x3858 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3860 = x3857 + x3859;
        // loc("Top/Mux/5/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3861 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x3861 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3862 = x3861 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3863 = x3860 + x3862;
        // loc("Top/Mux/5/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3864 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x3864 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3865 = x3864 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3866 = x3863 + x3865;
        // loc("Top/Mux/5/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3867 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x3867 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3868 = x3867 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3869 = x3866 + x3868;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3870 = x3869 - x3835;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3870 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      host_args.at(0) = x92;
      host_args.at(1) = x92;
      host_args.at(2) = x92;
      host_args.at(3) = x92;
      host_args.at(4) = x92;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/5/Mux/4/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3871 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x3871 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3872 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3872 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3873 = x3871 + x3872;
      // loc("Top/Mux/5/Mux/4/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3874 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3874 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3875 = x3873 + x3874;
      // loc("Top/Mux/5/Mux/4/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3876 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3876 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3877 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3877 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3878 = x3876 + x3877;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3879 = x3810 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3880 = x3813 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3881 = x3879 + x3880;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3882 = x3881 + x3816;
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x3883 = x3882 + x45;
      {
        host_args.at(0) = x3883;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3884 = host_outs.at(0);
        auto x3885 = host_outs.at(1);
        auto x3886 = host_outs.at(2);
        auto x3887 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3884);
          reg = x3884;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3885);
          reg = x3885;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3886);
          reg = x3886;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3887);
          reg = x3887;
        }
      }
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3888 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3888 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3889 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3889 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3890 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3890 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3891 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3891 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3883);
        reg = x3883;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3888);
        reg = x3888;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3889);
        reg = x3889;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3890);
        reg = x3890;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3891);
        reg = x3891;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3892 = x3799 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3893 = x3892 + x3808;
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x3894 = x3893 + x45;
      {
        host_args.at(0) = x3894;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3895 = host_outs.at(0);
        auto x3896 = host_outs.at(1);
        auto x3897 = host_outs.at(2);
        auto x3898 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3895);
          reg = x3895;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3896);
          reg = x3896;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3897);
          reg = x3897;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3898);
          reg = x3898;
        }
      }
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3899 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x3899 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3900 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3900 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3901 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3901 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3902 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3902 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3894);
        reg = x3894;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3899);
        reg = x3899;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3900);
        reg = x3900;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3901);
        reg = x3901;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3902);
        reg = x3902;
      }
      host_args.at(0) = x3882;
      host_args.at(1) = x3888;
      host_args.at(2) = x3889;
      host_args.at(3) = x3890;
      host_args.at(4) = x3891;
      host_args.at(5) = x3893;
      host_args.at(6) = x3899;
      host_args.at(7) = x3900;
      host_args.at(8) = x3901;
      host_args.at(9) = x3902;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3903 = x3792 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x3904 = x3795 * x58;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3905 = x3903 + x3904;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3906 = x3905 + x3893;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3907 = x3877 * x3906;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3908 = x93 - x3877;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3909 = x3908 * x3899;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3910 = x3907 + x3909;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3911 = Fp(x3910.asUInt32() & x31.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x3912 = x3911 * x51;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3912);
          reg = x3912;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3913 = Fp(x3910.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x3914 = x3913 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3914);
          reg = x3914;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3915 = Fp(x3910.asUInt32() & x30.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3916 = Fp(x3915.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3916);
            reg = x3916;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3917 = Fp(x3915.asUInt32() & x90.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3918 = x3917 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3918);
            reg = x3918;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3919 = Fp(x3915.asUInt32() & x76.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3920 = x3919 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3920);
            reg = x3920;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3921 = Fp(x3915.asUInt32() & x69.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3922 = x3921 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3922);
            reg = x3922;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3923 = Fp(x3915.asUInt32() & x56.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3924 = x3923 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3924);
            reg = x3924;
          }
          // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3925 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x3925 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x3926 = x3925 * x62;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x3927 = x3926 + x93;
          // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3928 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x3928 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x3929 = x3928 * x75;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x3930 = x3929 + x93;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3931 = x3927 * x3930;
          // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3932 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x3932 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x3933 = x3932 + x93;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3934 = x3931 * x3933;
          // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3935 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x3935 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3936 = x3935 * x90;
          // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x3937 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x3937 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3938 = x3936 + x3937;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x3939 = (x3938 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x3940 = x3939 * x3934;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3941 = x3938 - x93;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3942 = (x3941 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x3943 = x3942 * x3934;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3944 = x3938 - x90;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3945 = (x3944 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x3946 = x3945 * x3934;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3947 = x3938 - x75;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3948 = (x3947 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x3949 = x3948 * x3934;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3940);
            reg = x3940;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3943);
            reg = x3943;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3946);
            reg = x3946;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3949);
            reg = x3949;
          }
        }
        // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3950 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x3950 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3951 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x3951 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3952 = x3951 * x90;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3953 = x3950 + x3952;
        // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3954 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x3954 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3955 = x3954 * x76;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3956 = x3953 + x3955;
        // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3957 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x3957 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3958 = x3957 * x69;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3959 = x3956 + x3958;
        // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x3960 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3960 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3961 = x3960 * x56;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3962 = x3959 + x3961;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x3963 = x3962 - x3915;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x3963 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/5/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3964 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3964 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3965 = x3964 * x52;
      // loc("Top/Mux/5/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3966 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3966 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x3967 = x3966 * x58;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3968 = x3965 + x3967;
      // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3969 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3969 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3970 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3970 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3971 = x3970 * x90;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3972 = x3969 + x3971;
      // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3973 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3973 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3974 = x3973 * x76;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3975 = x3972 + x3974;
      // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3976 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3976 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3977 = x3976 * x69;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3978 = x3975 + x3977;
      // loc("Top/Mux/5/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3979 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3979 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3980 = x3979 * x56;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3981 = x3978 + x3980;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3982 = x3968 + x3981;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3983 = x3910 - x3982;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3983 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/Mux/5/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3984 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3984 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3985 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3985 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3986 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3986 != Fp::invalid());
      // loc("Top/Mux/5/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x3987 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3987 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3988 = x3878 * x3984;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3989 = x3878 * x3985;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3990 = x3878 * x3986;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3991 = x3878 * x3987;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x3992 = x93 - x3878;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3993 = x3992 * x3899;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3994 = x3992 * x3900;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3995 = x3992 * x3901;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3996 = x3992 * x3902;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3997 = x3988 + x3993;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3998 = x3989 + x3994;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3999 = x3990 + x3995;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4000 = x3991 + x3996;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4001 = Fp(x3891.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4002 = x4001 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4002);
          reg = x4002;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4003 = Fp(x3891.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4004 = x4003 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4004);
          reg = x4004;
        }
      }
      // loc("Top/Mux/5/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4005 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x4005 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4006 = x4005 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4007 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4007 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4008 = x4007 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4009 = x4006 + x4008;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4010 = x3891 - x4009;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4010 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4011 = Fp(x4000.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4012 = x4011 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4012);
          reg = x4012;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4013 = Fp(x4000.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4014 = x4013 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4014);
          reg = x4014;
        }
      }
      // loc("Top/Mux/5/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4015 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x4015 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4016 = x4015 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4017 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4017 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4018 = x4017 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4019 = x4016 + x4018;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4020 = x4000 - x4019;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4020 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":213:13)
      auto x4021 = x3871 * x4015;
      // loc("cirgen/components/u32.cpp":213:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4021);
        reg = x4021;
      }
      // loc("cirgen/components/u32.cpp":214:13)
      auto x4022 = x3873 * x4005;
      // loc("cirgen/components/u32.cpp":214:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4022);
        reg = x4022;
      }
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4023 = x3888 * x3997;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4024 = x3889 * x3997;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4025 = x3888 * x3998;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4026 = x4024 + x4025;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x4027 = x4026 * x88;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4028 = x4023 + x4027;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4029 = Fp(x4028.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4029);
          reg = x4029;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4030 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4030 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4031 = x4028 - x4030;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4032 = x4031 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4033 = Fp(x4032.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4033);
          reg = x4033;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4034 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4034 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4035 = x4032 - x4034;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4036 = x4035 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4037 = Fp(x4036.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4037);
          reg = x4037;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4038 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4038 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4039 = x4036 - x4038;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4040 = x4039 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4040);
        reg = x4040;
      }
      // loc("Top/Mux/5/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4041 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4041 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x4042 = x4041 * x88;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x4043 = x4038 + x4042;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4044 = x3890 * x3997;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4045 = x3889 * x3998;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4046 = x4044 + x4045;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4047 = x3888 * x3999;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4048 = x4046 + x4047;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4049 = x4043 + x4048;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4050 = x3891 * x3997;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4051 = x3890 * x3998;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4052 = x4050 + x4051;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4053 = x3889 * x3999;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4054 = x4052 + x4053;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4055 = x3888 * x4000;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4056 = x4054 + x4055;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x4057 = x4056 * x88;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4058 = x4049 + x4057;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4059 = Fp(x4058.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4059);
          reg = x4059;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4060 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x4060 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4061 = x4058 - x4060;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4062 = x4061 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4063 = Fp(x4062.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4063);
          reg = x4063;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4064 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x4064 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4065 = x4062 - x4064;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4066 = x4065 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4067 = Fp(x4066.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4067);
          reg = x4067;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4068 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4068 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4069 = x4066 - x4068;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4070 = x4069 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4070);
        reg = x4070;
      }
      // loc("Top/Mux/5/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4071 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4071 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x4072 = x4071 * x88;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x4073 = x4068 + x4072;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4074 = x3891 * x3998;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4075 = x3890 * x3999;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4076 = x4074 + x4075;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4077 = x3889 * x4000;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4078 = x4076 + x4077;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4079 = x4073 + x4078;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4080 = x3891 * x3999;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4081 = x3890 * x4000;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x4082 = x4080 + x4081;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x4083 = x4082 * x88;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4084 = x4079 + x4083;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x4085 = x4084 + x29;
      // loc("Top/Mux/5/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4086 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x4086 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":234:53)
      auto x4087 = x3889 * x88;
      // loc("cirgen/components/u32.cpp":234:38)
      auto x4088 = x3888 + x4087;
      // loc("cirgen/components/u32.cpp":234:30)
      auto x4089 = x4086 * x4088;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x4090 = x4085 - x4089;
      // loc("Top/Mux/5/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4091 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x4091 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":235:37)
      auto x4092 = x3998 * x88;
      // loc("cirgen/components/u32.cpp":235:22)
      auto x4093 = x3997 + x4092;
      // loc("cirgen/components/u32.cpp":235:14)
      auto x4094 = x4091 * x4093;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x4095 = x4090 - x4094;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4096 = Fp(x4095.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4096);
          reg = x4096;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4097 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4097 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4098 = x4095 - x4097;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4099 = x4098 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4100 = Fp(x4099.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4100);
          reg = x4100;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4101 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4101 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4102 = x4099 - x4101;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4103 = x4102 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4104 = Fp(x4103.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4104);
          reg = x4104;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4105 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4105 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4106 = x4103 - x4105;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4107 = x4106 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4107);
        reg = x4107;
      }
      // loc("Top/Mux/5/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4108 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4108 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x4109 = x4108 * x88;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x4110 = x4105 + x4109;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x4111 = x3891 * x4000;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x4112 = x4110 + x4111;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x4113 = x4112 + x28;
      // loc("cirgen/components/u32.cpp":238:53)
      auto x4114 = x3891 * x88;
      // loc("cirgen/components/u32.cpp":238:38)
      auto x4115 = x3890 + x4114;
      // loc("cirgen/components/u32.cpp":238:30)
      auto x4116 = x4086 * x4115;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x4117 = x4113 - x4116;
      // loc("cirgen/components/u32.cpp":239:37)
      auto x4118 = x4000 * x88;
      // loc("cirgen/components/u32.cpp":239:22)
      auto x4119 = x3999 + x4118;
      // loc("cirgen/components/u32.cpp":239:14)
      auto x4120 = x4091 * x4119;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x4121 = x4117 - x4120;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4122 = Fp(x4121.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4122);
          reg = x4122;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4123 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4123 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4124 = x4121 - x4123;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4125 = x4124 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4126 = Fp(x4125.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4126);
          reg = x4126;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4127 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4127 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4128 = x4125 - x4127;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4129 = x4128 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4129);
        reg = x4129;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4130 = x3824 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4131 = x3827 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4132 = x4130 + x4131;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4133 = x4132 + x3830;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4134 = (x4133 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4134);
          reg = x4134;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4135 = inv(x4133);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4135);
          reg = x4135;
        }
      }
      // loc("Top/Mux/5/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4136 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x4136 != Fp::invalid());
      if (x4136 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4133 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4137 = x93 - x4136;
      if (x4137 != 0) {
        // loc("Top/Mux/5/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4138 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x4138 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4139 = x4133 * x4138;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4140 = x4139 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4140 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x4141 = x749 + x76;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4142 = x4141 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4143 = Fp(x4142.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4143);
          reg = x4143;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4144 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4144 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4145 = x4142 - x4144;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4146 = x4145 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4147 = Fp(x4146.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4147);
          reg = x4147;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4148 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4148 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4149 = x4146 - x4148;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4150 = x4149 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4151 = Fp(x4150.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4151);
          reg = x4151;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4152 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4152 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4153 = x4150 - x4152;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4154 = x4153 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4155 = Fp(x4154.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4155);
          reg = x4155;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4156 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4156 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4157 = x4154 - x4156;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4158 = x4157 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4158);
        reg = x4158;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4159 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4159 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4160 = x93 - x4159;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4161 = x4159 * x4160;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4161);
        reg = x4161;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4162 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4162 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4163 = x90 - x4159;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4164 = x4162 * x4163;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4164 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x62);
        reg = x62;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4165 = x3875 * x4137;
      if (x4165 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4166 = x4133 + x45;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4097);
          reg = x4097;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4101);
          reg = x4101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4123);
          reg = x4123;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4127);
          reg = x4127;
        }
        {
          host_args.at(0) = x4166;
          host_args.at(1) = x4097;
          host_args.at(2) = x4101;
          host_args.at(3) = x4123;
          host_args.at(4) = x4127;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4167 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x4167 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4168 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4168 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4169 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4169 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4170 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4170 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4166);
          reg = x4166;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4167);
          reg = x4167;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4168);
          reg = x4168;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4169);
          reg = x4169;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4170);
          reg = x4170;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4171 = x93 - x3875;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4172 = x4171 * x4137;
      if (x4172 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4173 = x4133 + x45;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4030);
          reg = x4030;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4034);
          reg = x4034;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4060);
          reg = x4060;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4064);
          reg = x4064;
        }
        {
          host_args.at(0) = x4173;
          host_args.at(1) = x4030;
          host_args.at(2) = x4034;
          host_args.at(3) = x4060;
          host_args.at(4) = x4064;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4174 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x4174 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4175 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4175 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4176 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4176 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4177 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4177 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4173);
          reg = x4173;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4174);
          reg = x4174;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4175);
          reg = x4175;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4176);
          reg = x4176;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4177);
          reg = x4177;
        }
      }
      if (x4136 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("Top/Mux/5/Mux/4/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4178 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4178 != Fp::invalid());
      if (x4178 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4179 = x3832 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4179 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3821 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4180 = x3797 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4180 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3871 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4181 = x3832 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4181 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4182 = x3821 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4182 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4183 = x3797 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4183 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3872 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4184 = x3832 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4184 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4185 = x3821 - x90;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4185 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4186 = x3797 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4186 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3874 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4187 = x3832 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4187 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4188 = x3821 - x75;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4188 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4189 = x3797 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4189 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3876 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4190 = x3832 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4190 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4191 = x3821 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4191 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3877 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4192 = x3832 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4192 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4193 = x3821 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4193 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/5/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4194 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x4194 != Fp::invalid());
    if (x4194 != 0) {
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4195 = x749 * x74;
      {
        host_args.at(0) = x4195;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4196 = host_outs.at(0);
        auto x4197 = host_outs.at(1);
        auto x4198 = host_outs.at(2);
        auto x4199 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4196);
          reg = x4196;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4197);
          reg = x4197;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4198);
          reg = x4198;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4199);
          reg = x4199;
        }
      }
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4200 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4200 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4201 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4201 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4202 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4202 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4203 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4203 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4195);
        reg = x4195;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4200);
        reg = x4200;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4201);
        reg = x4201;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4202);
        reg = x4202;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4203);
        reg = x4203;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4204 = Fp(x4203.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4205 = x4204 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4205);
          reg = x4205;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4206 = Fp(x4203.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4207 = x4206 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4207);
          reg = x4207;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4208 = Fp(x4203.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4209 = x4208 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4209);
          reg = x4209;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4210 = Fp(x4203.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4211 = x4210 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4211);
          reg = x4211;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4212 = Fp(x4203.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4213 = x4212 * x53;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4213);
          reg = x4213;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4214 = Fp(x4203.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4214);
          reg = x4214;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4215 = Fp(x4202.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4216 = x4215 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4216);
          reg = x4216;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4217 = Fp(x4202.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4218 = x4217 * x57;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4218);
          reg = x4218;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4219 = Fp(x4202.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4220 = x4219 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4220);
          reg = x4220;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4221 = Fp(x4202.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4222 = x4221 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4222);
          reg = x4222;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4223 = Fp(x4202.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4223);
          reg = x4223;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4224 = Fp(x4201.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4225 = x4224 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4225);
          reg = x4225;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4226 = Fp(x4201.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4227 = x4226 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4227);
          reg = x4227;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4228 = Fp(x4201.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4229 = x4228 * x55;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4229);
          reg = x4229;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4230 = Fp(x4201.asUInt32() & x65.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4231 = x4230 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4231);
          reg = x4231;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4232 = Fp(x4201.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4232);
          reg = x4232;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4233 = Fp(x4200.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4234 = x4233 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4234);
          reg = x4234;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4235 = Fp(x4200.asUInt32() & x49.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4235);
          reg = x4235;
        }
      }
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4236 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4236 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4237 = x4236 * x52;
      // loc("Top/Mux/5/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4238 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4238 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4239 = x4238 * x56;
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4240 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4240 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4241 = x4240 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4242 = x4239 + x4241;
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4243 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4243 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4244 = x4243 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4245 = x4242 + x4244;
      // loc("Top/Mux/5/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4246 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x4246 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4247 = x4245 + x4246;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4248 = x4237 + x4247;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4249 = x4248 * x90;
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4250 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4250 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4251 = x4249 + x4250;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4252 = x4203 - x4251;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4252 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4253 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4253 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4254 = x4253 * x69;
      // loc("Top/Mux/5/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4255 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x4255 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4256 = x4255 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4257 = x4254 + x4256;
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4258 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4258 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4259 = x4257 + x4258;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4260 = x4259 * x56;
      // loc("Top/Mux/5/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4261 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4261 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4262 = x4261 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4263 = x4260 + x4262;
      // loc("Top/Mux/5/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4264 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4264 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4265 = x4263 + x4264;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4266 = x4202 - x4265;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4266 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4267 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4267 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4268 = x4267 * x61;
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4269 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4269 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4270 = x4269 * x76;
      // loc("Top/Mux/5/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4271 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4271 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4272 = x4270 + x4271;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4273 = x4272 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4274 = x4268 + x4273;
      // loc("Top/Mux/5/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4275 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4275 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4276 = x4275 * x76;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4277 = x4274 + x4276;
      // loc("Top/Mux/5/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4278 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4278 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4279 = x4277 + x4278;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4280 = x4201 - x4279;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4280 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/5/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4281 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4281 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4282 = x4281 * x61;
      // loc("Top/Mux/5/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4283 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4283 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4284 = x4282 + x4283;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4285 = x4200 - x4284;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4285 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4200;
        host_args.at(1) = x4201;
        host_args.at(2) = x4202;
        host_args.at(3) = x4203;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4286 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4287 = (x4286 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4287);
            reg = x4287;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4288 = x4286 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4289 = (x4288 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4289);
            reg = x4289;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4290 = x4286 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4291 = (x4290 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4291);
            reg = x4291;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4292 = x4286 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4293 = (x4292 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4293);
            reg = x4293;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4294 = x4286 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4295 = (x4294 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4295);
            reg = x4295;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4296 = x4286 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4297 = (x4296 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4297);
            reg = x4297;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4298 = x4286 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4299 = (x4298 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4299);
            reg = x4299;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4300 = x4286 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4301 = (x4300 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4301);
            reg = x4301;
          }
        }
        // loc("Top/Mux/5/Mux/5/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4302 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x4302 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4303 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4303 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4304 = x4303 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4305 = x4302 + x4304;
        // loc("Top/Mux/5/Mux/5/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4306 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4306 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4307 = x4306 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4308 = x4305 + x4307;
        // loc("Top/Mux/5/Mux/5/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4309 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4309 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4310 = x4309 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4311 = x4308 + x4310;
        // loc("Top/Mux/5/Mux/5/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4312 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x4312 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4313 = x4312 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4314 = x4311 + x4313;
        // loc("Top/Mux/5/Mux/5/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4315 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x4315 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4316 = x4315 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4317 = x4314 + x4316;
        // loc("Top/Mux/5/Mux/5/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4318 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x4318 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4319 = x4318 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4320 = x4317 + x4319;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x4321 = x4320 - x4286;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x4321 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/Mux/5/Mux/5/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4322 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4322 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4323 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4323 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4324 = x4322 + x4323;
      // loc("Top/Mux/5/Mux/5/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4325 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4325 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
      auto x4326 = x4323 + x4325;
      // loc("Top/Mux/5/Mux/5/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4327 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4327 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4328 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4328 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4329 = x4327 + x4328;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4330 = x4324 + x4328;
      // loc("Top/Mux/5/Mux/5/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4331 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4331 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4332 = x4329 + x4331;
      // loc("Top/Mux/5/Mux/5/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":131:49))
      auto x4333 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4333 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4334 = x4331 + x4333;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4335 = x4332 + x4333;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4336 = x4330 + x4333;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4337 = x4328 + x4333;
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][198 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4336);
        reg = x4336;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4337);
        reg = x4337;
      }
      // loc("Top/Mux/5/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4338 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x4338 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4339 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x4339 != Fp::invalid());
      host_args.at(0) = x4334;
      host_args.at(1) = x4335;
      host_args.at(2) = x4338;
      host_args.at(3) = x4339;
      host_args.at(4) = x4326;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4340 = x4261 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4341 = x4264 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4342 = x4340 + x4341;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4343 = x4342 + x4267;
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4344 = x4343 + x45;
      {
        host_args.at(0) = x4344;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4345 = host_outs.at(0);
        auto x4346 = host_outs.at(1);
        auto x4347 = host_outs.at(2);
        auto x4348 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4345);
          reg = x4345;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4346);
          reg = x4346;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4347);
          reg = x4347;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4348);
          reg = x4348;
        }
      }
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4349 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4349 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4350 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4350 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4351 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4351 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4352 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4352 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4344);
        reg = x4344;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4349);
        reg = x4349;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4350);
        reg = x4350;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4351);
        reg = x4351;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4352);
        reg = x4352;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4353 = x4250 * x56;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4354 = x4353 + x4259;
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4355 = x4354 + x45;
      {
        host_args.at(0) = x4355;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4356 = host_outs.at(0);
        auto x4357 = host_outs.at(1);
        auto x4358 = host_outs.at(2);
        auto x4359 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4356);
          reg = x4356;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4357);
          reg = x4357;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4358);
          reg = x4358;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4359);
          reg = x4359;
        }
      }
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4360 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4360 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4361 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4361 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4362 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4362 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4363 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4363 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4355);
        reg = x4355;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4360);
        reg = x4360;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4361);
        reg = x4361;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4362);
        reg = x4362;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4363);
        reg = x4363;
      }
      host_args.at(0) = x4343;
      host_args.at(1) = x4349;
      host_args.at(2) = x4350;
      host_args.at(3) = x4351;
      host_args.at(4) = x4352;
      host_args.at(5) = x4354;
      host_args.at(6) = x4360;
      host_args.at(7) = x4361;
      host_args.at(8) = x4362;
      host_args.at(9) = x4363;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4364 = x4243 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4365 = x4246 * x58;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4366 = x4364 + x4365;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4367 = x4366 + x4354;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4368 = x4334 * x4367;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4369 = x93 - x4334;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4370 = x4369 * x4360;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4371 = x4368 + x4370;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4372 = Fp(x4371.asUInt32() & x31.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4373 = x4372 * x51;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4373);
          reg = x4373;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4374 = Fp(x4371.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4375 = x4374 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4375);
          reg = x4375;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4376 = Fp(x4371.asUInt32() & x30.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4377 = Fp(x4376.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4377);
            reg = x4377;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4378 = Fp(x4376.asUInt32() & x90.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4379 = x4378 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4379);
            reg = x4379;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4380 = Fp(x4376.asUInt32() & x76.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4381 = x4380 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4381);
            reg = x4381;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4382 = Fp(x4376.asUInt32() & x69.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4383 = x4382 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4383);
            reg = x4383;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4384 = Fp(x4376.asUInt32() & x56.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4385 = x4384 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4385);
            reg = x4385;
          }
          // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x4386 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x4386 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x4387 = x4386 * x62;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x4388 = x4387 + x93;
          // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x4389 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x4389 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x4390 = x4389 * x75;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x4391 = x4390 + x93;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4392 = x4388 * x4391;
          // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x4393 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x4393 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x4394 = x4393 + x93;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4395 = x4392 * x4394;
          // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x4396 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x4396 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4397 = x4396 * x90;
          // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x4398 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x4398 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4399 = x4397 + x4398;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x4400 = (x4399 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x4401 = x4400 * x4395;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4402 = x4399 - x93;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4403 = (x4402 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x4404 = x4403 * x4395;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4405 = x4399 - x90;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4406 = (x4405 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x4407 = x4406 * x4395;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4408 = x4399 - x75;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4409 = (x4408 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x4410 = x4409 * x4395;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4401);
            reg = x4401;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4404);
            reg = x4404;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4407);
            reg = x4407;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4410);
            reg = x4410;
          }
        }
        // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4411 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x4411 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4412 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x4412 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4413 = x4412 * x90;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4414 = x4411 + x4413;
        // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4415 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x4415 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4416 = x4415 * x76;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4417 = x4414 + x4416;
        // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4418 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4418 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4419 = x4418 * x69;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4420 = x4417 + x4419;
        // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4421 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x4421 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4422 = x4421 * x56;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4423 = x4420 + x4422;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x4424 = x4423 - x4376;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x4424 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/5/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4425 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4425 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4426 = x4425 * x52;
      // loc("Top/Mux/5/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4427 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4428 = x4427 * x58;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4429 = x4426 + x4428;
      // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4430 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4430 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4431 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4431 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4432 = x4431 * x90;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4433 = x4430 + x4432;
      // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4434 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4434 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4435 = x4434 * x76;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4436 = x4433 + x4435;
      // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4437 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x4437 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4438 = x4437 * x69;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4439 = x4436 + x4438;
      // loc("Top/Mux/5/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4440 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x4440 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4441 = x4440 * x56;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4442 = x4439 + x4441;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4443 = x4429 + x4442;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4444 = x4371 - x4443;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4444 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/Mux/5/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4445 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x4445 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4446 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x4446 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4447 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x4447 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4448 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x4448 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4449 = x4335 * x4445;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4450 = x4335 * x4446;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4451 = x4335 * x4447;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4452 = x4335 * x4448;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4453 = x93 - x4335;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4454 = x4453 * x4360;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4455 = x4453 * x4361;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4456 = x4453 * x4362;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4457 = x4453 * x4363;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4458 = x4449 + x4454;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4459 = x4450 + x4455;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4460 = x4451 + x4456;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4461 = x4452 + x4457;
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4458);
        reg = x4458;
      }
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4459);
        reg = x4459;
      }
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4460);
        reg = x4460;
      }
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4461);
        reg = x4461;
      }
      {
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x4462 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x4462 != Fp::invalid());
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x4463 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x4463 != Fp::invalid());
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x4464 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x4464 != Fp::invalid());
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
        auto x4465 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x4465 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4466 = x4338 + x4339;
        host_args.at(0) = x4349;
        host_args.at(1) = x4350;
        host_args.at(2) = x4351;
        host_args.at(3) = x4352;
        host_args.at(4) = x4462;
        host_args.at(5) = x4463;
        host_args.at(6) = x4464;
        host_args.at(7) = x4465;
        host_args.at(8) = x4466;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4467 = host_outs.at(0);
        auto x4468 = host_outs.at(1);
        auto x4469 = host_outs.at(2);
        auto x4470 = host_outs.at(3);
        auto x4471 = host_outs.at(4);
        auto x4472 = host_outs.at(5);
        auto x4473 = host_outs.at(6);
        auto x4474 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4467);
          reg = x4467;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4471);
          reg = x4471;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4468);
          reg = x4468;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4472);
          reg = x4472;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4469);
          reg = x4469;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4473);
          reg = x4473;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4470);
          reg = x4470;
        }
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4474);
          reg = x4474;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4475 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4475 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4476 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4476 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4477 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4477 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4478 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4478 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4479 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4479 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4480 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x4480 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4481 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x4481 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4482 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4482 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4483 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4483 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4484 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4484 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4485 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4485 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4486 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4486 != Fp::invalid());
      host_args.at(0) = x4349;
      host_args.at(1) = x4350;
      host_args.at(2) = x4351;
      host_args.at(3) = x4352;
      host_args.at(4) = x4475;
      host_args.at(5) = x4476;
      host_args.at(6) = x4477;
      host_args.at(7) = x4478;
      host_args.at(8) = x4479;
      host_args.at(9) = x4480;
      host_args.at(10) = x4481;
      host_args.at(11) = x4482;
      host_args.at(12) = x4483;
      host_args.at(13) = x4484;
      host_args.at(14) = x4485;
      host_args.at(15) = x4486;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4487 = x4275 * x69;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4488 = x4278 * x90;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4489 = x4487 + x4488;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4490 = x4489 + x4281;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4491 = (x4490 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4491);
          reg = x4491;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4492 = inv(x4490);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4492);
          reg = x4492;
        }
      }
      // loc("Top/Mux/5/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4493 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x4493 != Fp::invalid());
      if (x4493 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4490 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4494 = x93 - x4493;
      if (x4494 != 0) {
        // loc("Top/Mux/5/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4495 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x4495 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4496 = x4490 * x4495;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4497 = x4496 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4497 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4498 = x4326 * x4494;
      if (x4498 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4499 = x4490 + x45;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4483);
          reg = x4483;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4484);
          reg = x4484;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4485);
          reg = x4485;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4486);
          reg = x4486;
        }
        {
          host_args.at(0) = x4499;
          host_args.at(1) = x4483;
          host_args.at(2) = x4484;
          host_args.at(3) = x4485;
          host_args.at(4) = x4486;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4500 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x4500 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4501 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4501 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4502 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4502 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4503 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4503 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4499);
          reg = x4499;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4500);
          reg = x4500;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4502);
          reg = x4502;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4503);
          reg = x4503;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4504 = x93 - x4326;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4505 = x4504 * x4494;
      if (x4505 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4506 = x4490 + x45;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4479);
          reg = x4479;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4480);
          reg = x4480;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4481);
          reg = x4481;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4482);
          reg = x4482;
        }
        {
          host_args.at(0) = x4506;
          host_args.at(1) = x4479;
          host_args.at(2) = x4480;
          host_args.at(3) = x4481;
          host_args.at(4) = x4482;
          host_args.at(5) = x90;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4507 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x4507 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4508 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4508 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4509 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4509 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x4510 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4510 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4506);
          reg = x4506;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4507);
          reg = x4507;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4508);
          reg = x4508;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4509);
          reg = x4509;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4510);
          reg = x4510;
        }
      }
      if (x4493 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4511 = x749 + x76;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4512 = x4511 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4513 = Fp(x4512.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4513);
          reg = x4513;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4514 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4514 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4515 = x4512 - x4514;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4516 = x4515 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4517 = Fp(x4516.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4517);
          reg = x4517;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4518 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4518 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4519 = x4516 - x4518;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4520 = x4519 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4521 = Fp(x4520.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4521);
          reg = x4521;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4522 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4522 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4523 = x4520 - x4522;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4524 = x4523 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4525 = Fp(x4524.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4525);
          reg = x4525;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4526 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4526 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4527 = x4524 - x4526;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4528 = x4527 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4528);
        reg = x4528;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4529 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4529 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4530 = x93 - x4529;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4531 = x4529 * x4530;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4531);
        reg = x4531;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4532 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4532 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4533 = x90 - x4529;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4534 = x4532 * x4533;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4534 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x70);
        reg = x70;
      }
      if (x4322 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4535 = x4283 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4535 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4536 = x4272 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4536 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4537 = x4248 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4537 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/Mux/5/Mux/5/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4538 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4538 != Fp::invalid());
      if (x4538 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4539 = x4283 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4539 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4540 = x4272 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4540 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4541 = x4248 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4541 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4323 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4542 = x4283 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4542 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4543 = x4272 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4543 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4544 = x4248 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4544 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4325 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4545 = x4283 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4545 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4546 = x4272 - x70;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4546 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4547 = x4248 - x93;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4547 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4327 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4548 = x4283 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4548 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4549 = x4272 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4549 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4248 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4328 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4550 = x4283 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4550 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4551 = x4272 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4551 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4552 = x4248 - x58;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4552 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4331 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4553 = x4283 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4553 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4554 = x4272 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4554 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4248 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4333 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4555 = x4283 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4555 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4556 = x4272 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4556 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4557 = x4248 - x58;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4557 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/Mux/5/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4558 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x4558 != Fp::invalid());
    if (x4558 != 0) {
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4559 = args[2][125 * steps + ((cycle - 1) & mask)];
      assert(x4559 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4560 = args[2][126 * steps + ((cycle - 1) & mask)];
      assert(x4560 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4561 = args[2][127 * steps + ((cycle - 1) & mask)];
      assert(x4561 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4562 = args[2][128 * steps + ((cycle - 1) & mask)];
      assert(x4562 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4563 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x4563 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4564 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x4564 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4565 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x4565 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4566 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x4566 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4567 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x4567 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4568 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x4568 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4569 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x4569 != Fp::invalid());
      // loc("Top/Mux/5/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4570 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x4570 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4571 = Fp(x4559.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4571);
          reg = x4571;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4572 = Fp(x4563.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4572);
          reg = x4572;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4573 = Fp(x4559.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4574 = x4573 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4574);
          reg = x4574;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4575 = Fp(x4563.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4576 = x4575 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4576);
          reg = x4576;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4577 = Fp(x4559.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4578 = x4577 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4578);
          reg = x4578;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4579 = Fp(x4563.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4580 = x4579 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4580);
          reg = x4580;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4581 = Fp(x4559.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4582 = x4581 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4582);
          reg = x4582;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4583 = Fp(x4563.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4584 = x4583 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4584);
          reg = x4584;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4585 = Fp(x4559.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4586 = x4585 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4586);
          reg = x4586;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4587 = Fp(x4563.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4588 = x4587 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4588);
          reg = x4588;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4589 = Fp(x4559.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4590 = x4589 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4590);
          reg = x4590;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4591 = Fp(x4563.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4592 = x4591 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4592);
          reg = x4592;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4593 = Fp(x4559.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4594 = x4593 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4594);
          reg = x4594;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4595 = Fp(x4563.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4596 = x4595 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4596);
          reg = x4596;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4597 = Fp(x4559.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4598 = x4597 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4598);
          reg = x4598;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4599 = Fp(x4563.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4600 = x4599 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4600);
          reg = x4600;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4601 = Fp(x4560.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4601);
          reg = x4601;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4602 = Fp(x4564.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4602);
          reg = x4602;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4603 = Fp(x4560.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4604 = x4603 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4604);
          reg = x4604;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4605 = Fp(x4564.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4606 = x4605 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4606);
          reg = x4606;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4607 = Fp(x4560.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4608 = x4607 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4608);
          reg = x4608;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4609 = Fp(x4564.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4610 = x4609 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4610);
          reg = x4610;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4611 = Fp(x4560.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4612 = x4611 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4612);
          reg = x4612;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4613 = Fp(x4564.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4614 = x4613 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4614);
          reg = x4614;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4615 = Fp(x4560.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4616 = x4615 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4616);
          reg = x4616;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4617 = Fp(x4564.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4618 = x4617 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4618);
          reg = x4618;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4619 = Fp(x4560.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4620 = x4619 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4620);
          reg = x4620;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4621 = Fp(x4564.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4622 = x4621 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4622);
          reg = x4622;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4623 = Fp(x4560.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4624 = x4623 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4624);
          reg = x4624;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4625 = Fp(x4564.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4626 = x4625 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4626);
          reg = x4626;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4627 = Fp(x4560.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4628 = x4627 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4628);
          reg = x4628;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4629 = Fp(x4564.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4630 = x4629 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4630);
          reg = x4630;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4631 = Fp(x4561.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4631);
          reg = x4631;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4632 = Fp(x4565.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4632);
          reg = x4632;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4633 = Fp(x4561.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4634 = x4633 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4634);
          reg = x4634;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4635 = Fp(x4565.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4636 = x4635 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4636);
          reg = x4636;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4637 = Fp(x4561.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4638 = x4637 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4638);
          reg = x4638;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4639 = Fp(x4565.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4640 = x4639 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4640);
          reg = x4640;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4641 = Fp(x4561.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4642 = x4641 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4642);
          reg = x4642;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4643 = Fp(x4565.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4644 = x4643 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4644);
          reg = x4644;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4645 = Fp(x4561.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4646 = x4645 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4646);
          reg = x4646;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4647 = Fp(x4565.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4648 = x4647 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4648);
          reg = x4648;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4649 = Fp(x4561.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4650 = x4649 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4650);
          reg = x4650;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4651 = Fp(x4565.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4652 = x4651 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4652);
          reg = x4652;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4653 = Fp(x4561.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4654 = x4653 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4654);
          reg = x4654;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4655 = Fp(x4565.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4656 = x4655 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4656);
          reg = x4656;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4657 = Fp(x4561.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4658 = x4657 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4658);
          reg = x4658;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4659 = Fp(x4565.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4660 = x4659 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4660);
          reg = x4660;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4661 = Fp(x4562.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4661);
          reg = x4661;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4662 = Fp(x4566.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4662);
          reg = x4662;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4663 = Fp(x4562.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4664 = x4663 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4664);
          reg = x4664;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4665 = Fp(x4566.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4666 = x4665 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4666);
          reg = x4666;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4667 = Fp(x4562.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4668 = x4667 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4668);
          reg = x4668;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4669 = Fp(x4566.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4670 = x4669 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4670);
          reg = x4670;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4671 = Fp(x4562.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4672 = x4671 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4672);
          reg = x4672;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4673 = Fp(x4566.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4674 = x4673 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4674);
          reg = x4674;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4675 = Fp(x4562.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4676 = x4675 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4676);
          reg = x4676;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4677 = Fp(x4566.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4678 = x4677 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4678);
          reg = x4678;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4679 = Fp(x4562.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4680 = x4679 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4680);
          reg = x4680;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4681 = Fp(x4566.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4682 = x4681 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4682);
          reg = x4682;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4683 = Fp(x4562.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4684 = x4683 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4684);
          reg = x4684;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4685 = Fp(x4566.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4686 = x4685 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4686);
          reg = x4686;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4687 = Fp(x4562.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4688 = x4687 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4688);
          reg = x4688;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4689 = Fp(x4566.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4690 = x4689 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4690);
          reg = x4690;
        }
      }
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4691 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4691 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4692 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4692 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4693 = x4691 * x4692;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4694 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4694 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4695 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4695 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4696 = x4694 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4697 = x4691 + x4696;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4698 = x4695 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4699 = x4692 + x4698;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4700 = x4694 * x4695;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4701 = x4700 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4702 = x4693 + x4701;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4703 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4703 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4704 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4704 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4705 = x4703 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4706 = x4697 + x4705;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4707 = x4704 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4708 = x4699 + x4707;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4709 = x4703 * x4704;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4710 = x4709 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4711 = x4702 + x4710;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4712 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4712 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4713 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4713 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4714 = x4712 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4715 = x4706 + x4714;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4716 = x4713 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4717 = x4708 + x4716;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4718 = x4712 * x4713;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4719 = x4718 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4720 = x4711 + x4719;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4721 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4721 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4722 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4722 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4723 = x4721 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4724 = x4715 + x4723;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4725 = x4722 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4726 = x4717 + x4725;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4727 = x4721 * x4722;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4728 = x4727 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4729 = x4720 + x4728;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4730 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4730 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4731 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4731 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4732 = x4730 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4733 = x4724 + x4732;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4734 = x4731 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4735 = x4726 + x4734;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4736 = x4730 * x4731;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4737 = x4736 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4738 = x4729 + x4737;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4739 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4739 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4740 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4740 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4741 = x4739 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4742 = x4733 + x4741;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4743 = x4740 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4744 = x4735 + x4743;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4745 = x4739 * x4740;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4746 = x4745 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4747 = x4738 + x4746;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4748 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4748 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4749 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4749 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4750 = x4748 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4751 = x4742 + x4750;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4752 = x4749 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4753 = x4744 + x4752;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4754 = x4748 * x4749;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4755 = x4754 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4756 = x4747 + x4755;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4757 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4757 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4758 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4758 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4759 = x4757 * x4758;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4760 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4760 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4761 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4761 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4762 = x4760 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4763 = x4757 + x4762;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4764 = x4761 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4765 = x4758 + x4764;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4766 = x4760 * x4761;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4767 = x4766 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4768 = x4759 + x4767;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4769 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4769 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4770 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4770 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4771 = x4769 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4772 = x4763 + x4771;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4773 = x4770 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4774 = x4765 + x4773;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4775 = x4769 * x4770;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4776 = x4775 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4777 = x4768 + x4776;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4778 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4778 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4779 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4779 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4780 = x4778 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4781 = x4772 + x4780;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4782 = x4779 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4783 = x4774 + x4782;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4784 = x4778 * x4779;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4785 = x4784 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4786 = x4777 + x4785;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4787 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4787 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4788 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4788 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4789 = x4787 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4790 = x4781 + x4789;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4791 = x4788 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4792 = x4783 + x4791;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4793 = x4787 * x4788;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4794 = x4793 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4795 = x4786 + x4794;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4796 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4796 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4797 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4797 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4798 = x4796 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4799 = x4790 + x4798;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4800 = x4797 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4801 = x4792 + x4800;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4802 = x4796 * x4797;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4803 = x4802 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4804 = x4795 + x4803;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4805 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4805 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4806 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4806 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4807 = x4805 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4808 = x4799 + x4807;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4809 = x4806 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4810 = x4801 + x4809;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4811 = x4805 * x4806;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4812 = x4811 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4813 = x4804 + x4812;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4814 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4814 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4815 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4815 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4816 = x4814 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4817 = x4808 + x4816;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4818 = x4815 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4819 = x4810 + x4818;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4820 = x4814 * x4815;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4821 = x4820 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4822 = x4813 + x4821;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4823 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4823 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4824 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4824 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4825 = x4823 * x4824;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4826 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4826 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4827 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4828 = x4826 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4829 = x4823 + x4828;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4830 = x4827 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4831 = x4824 + x4830;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4832 = x4826 * x4827;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4833 = x4832 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4834 = x4825 + x4833;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4835 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4835 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4836 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4836 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4837 = x4835 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4838 = x4829 + x4837;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4839 = x4836 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4840 = x4831 + x4839;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4841 = x4835 * x4836;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4842 = x4841 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4843 = x4834 + x4842;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4844 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4844 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4845 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4845 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4846 = x4844 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4847 = x4838 + x4846;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4848 = x4845 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4849 = x4840 + x4848;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4850 = x4844 * x4845;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4851 = x4850 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4852 = x4843 + x4851;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4853 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4853 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4854 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4854 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4855 = x4853 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4856 = x4847 + x4855;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4857 = x4854 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4858 = x4849 + x4857;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4859 = x4853 * x4854;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4860 = x4859 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4861 = x4852 + x4860;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4862 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4862 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4863 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4863 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4864 = x4862 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4865 = x4856 + x4864;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4866 = x4863 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4867 = x4858 + x4866;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4868 = x4862 * x4863;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4869 = x4868 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4870 = x4861 + x4869;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4871 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4871 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4872 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4872 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4873 = x4871 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4874 = x4865 + x4873;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4875 = x4872 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4876 = x4867 + x4875;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4877 = x4871 * x4872;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4878 = x4877 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4879 = x4870 + x4878;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4880 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4880 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4881 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4881 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4882 = x4880 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4883 = x4874 + x4882;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4884 = x4881 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4885 = x4876 + x4884;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4886 = x4880 * x4881;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4887 = x4886 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4888 = x4879 + x4887;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4889 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4889 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4890 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4890 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4891 = x4889 * x4890;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4892 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4892 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4893 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4893 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4894 = x4892 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4895 = x4889 + x4894;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4896 = x4893 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4897 = x4890 + x4896;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4898 = x4892 * x4893;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4899 = x4898 * x90;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4900 = x4891 + x4899;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4901 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4901 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4902 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4902 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4903 = x4901 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4904 = x4895 + x4903;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4905 = x4902 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4906 = x4897 + x4905;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4907 = x4901 * x4902;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4908 = x4907 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4909 = x4900 + x4908;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4910 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4910 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4911 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4912 = x4910 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4913 = x4904 + x4912;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4914 = x4911 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4915 = x4906 + x4914;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4916 = x4910 * x4911;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4917 = x4916 * x69;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4918 = x4909 + x4917;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4919 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4919 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4920 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4920 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4921 = x4919 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4922 = x4913 + x4921;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4923 = x4920 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4924 = x4915 + x4923;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4925 = x4919 * x4920;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4926 = x4925 * x56;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4927 = x4918 + x4926;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4928 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4928 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4929 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4929 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4930 = x4928 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4931 = x4922 + x4930;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4932 = x4929 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4933 = x4924 + x4932;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4934 = x4928 * x4929;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4935 = x4934 * x58;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4936 = x4927 + x4935;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4937 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4937 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4938 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4938 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4939 = x4937 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4940 = x4931 + x4939;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4941 = x4938 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4942 = x4933 + x4941;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4943 = x4937 * x4938;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4944 = x4943 * x52;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4945 = x4936 + x4944;
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4946 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4946 != Fp::invalid());
      // loc("Top/Mux/5/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4947 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4947 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4948 = x4946 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4949 = x4940 + x4948;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4950 = x4947 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4951 = x4942 + x4950;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4952 = x4946 * x4947;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4953 = x4952 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4954 = x4945 + x4953;
      host_args.at(0) = x4559;
      host_args.at(1) = x4560;
      host_args.at(2) = x4561;
      host_args.at(3) = x4562;
      host_args.at(4) = x4751;
      host_args.at(5) = x4817;
      host_args.at(6) = x4883;
      host_args.at(7) = x4949;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4563;
      host_args.at(1) = x4564;
      host_args.at(2) = x4565;
      host_args.at(3) = x4566;
      host_args.at(4) = x4753;
      host_args.at(5) = x4819;
      host_args.at(6) = x4885;
      host_args.at(7) = x4951;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4567;
      host_args.at(1) = x4568;
      host_args.at(2) = x4569;
      host_args.at(3) = x4570;
      host_args.at(4) = x4756;
      host_args.at(5) = x4822;
      host_args.at(6) = x4888;
      host_args.at(7) = x4954;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4955 = x4559 - x4751;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4955 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4956 = x4560 - x4817;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4956 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4957 = x4561 - x4883;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4957 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4958 = x4562 - x4949;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4958 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4959 = x4563 - x4753;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4959 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4960 = x4564 - x4819;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4960 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4961 = x4565 - x4885;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4961 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4962 = x4566 - x4951;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4962 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      auto x4963 = x4567 - x4756;
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      if (x4963 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:233");
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      auto x4964 = x4568 - x4822;
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      if (x4964 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:233");
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      auto x4965 = x4569 - x4888;
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      if (x4965 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:233");
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      auto x4966 = x4570 - x4954;
      // loc("cirgen/circuit/rv32im/compute.cpp":233:3)
      if (x4966 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:233");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4967 = x749 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4968 = Fp(x4967.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4968);
          reg = x4968;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4969 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4969 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4970 = x4967 - x4969;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4971 = x4970 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4972 = Fp(x4971.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4972);
          reg = x4972;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4973 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4973 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4974 = x4971 - x4973;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4975 = x4974 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x4976 = Fp(x4975.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4976);
          reg = x4976;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x4977 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4977 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x4978 = x4975 - x4977;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x4979 = x4978 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4980 = Fp(x4979.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4980);
          reg = x4980;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4981 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4981 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4982 = x4979 - x4981;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4983 = x4982 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4983);
        reg = x4983;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4984 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4984 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4985 = x93 - x4984;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4986 = x4984 * x4985;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4986);
        reg = x4986;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4987 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4987 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4988 = x90 - x4984;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4989 = x4987 * x4988;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4989 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":236:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x62);
        reg = x62;
      }
    }
    // loc("Top/Mux/5/OneHot/hot[7](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4990 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x4990 != Fp::invalid());
    if (x4990 != 0) {
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4991 = args[2][125 * steps + ((cycle - 1) & mask)];
      assert(x4991 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4992 = args[2][126 * steps + ((cycle - 1) & mask)];
      assert(x4992 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4993 = args[2][127 * steps + ((cycle - 1) & mask)];
      assert(x4993 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x4994 = args[2][128 * steps + ((cycle - 1) & mask)];
      assert(x4994 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4995 = args[2][18 * steps + ((cycle - 1) & mask)];
      assert(x4995 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4996 = args[2][19 * steps + ((cycle - 1) & mask)];
      assert(x4996 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4997 = args[2][20 * steps + ((cycle - 1) & mask)];
      assert(x4997 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4998 = args[2][21 * steps + ((cycle - 1) & mask)];
      assert(x4998 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x4999 = args[2][22 * steps + ((cycle - 1) & mask)];
      assert(x4999 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5000 = args[2][23 * steps + ((cycle - 1) & mask)];
      assert(x5000 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5001 = args[2][24 * steps + ((cycle - 1) & mask)];
      assert(x5001 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5002 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x5002 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5003 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x5003 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5004 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x5004 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5005 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x5005 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5006 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x5006 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      auto x5007 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x5007 != Fp::invalid());
      // loc("Top/Mux/5/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":136:51))
      auto x5008 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x5008 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x5009 = Fp(x4994.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x5010 = x5009 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5010);
          reg = x5010;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x5011 = Fp(x4994.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x5012 = x5011 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5012);
          reg = x5012;
        }
      }
      // loc("Top/Mux/5/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5013 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x5013 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x5014 = x5013 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5015 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x5015 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x5016 = x5015 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x5017 = x5014 + x5016;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x5018 = x4994 - x5017;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x5018 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x5019 = Fp(x4998.asUInt32() & x61.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x5020 = x5019 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5020);
          reg = x5020;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x5021 = Fp(x4998.asUInt32() & x49.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x5022 = x5021 * x90;
        // loc("cirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5022);
          reg = x5022;
        }
      }
      // loc("Top/Mux/5/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5023 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x5023 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x5024 = x5023 * x61;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5025 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5025 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x5026 = x5025 * x53;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x5027 = x5024 + x5026;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x5028 = x4998 - x5027;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x5028 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x5029 = x5007 * x5013;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5029);
        reg = x5029;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x5030 = x93 - x5008;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x5031 = x5007 * x5030;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x5032 = x5031 * x5023;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5032);
        reg = x5032;
      }
      // loc("Top/Mux/5/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5033 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x5033 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x5034 = x93 - x5033;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5035 = x5034 * x4991;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5036 = x5034 * x4992;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5037 = x5034 * x4993;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5038 = x5034 * x4994;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5039 = x5035 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5040 = x5036 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5041 = x5037 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5042 = x5038 + x89;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5043 = x5033 * x4991;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5044 = x5033 * x4992;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5045 = x5033 * x4993;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5046 = x5033 * x4994;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5047 = x5039 - x5043;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5048 = x5040 - x5044;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5049 = x5041 - x5045;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5050 = x5042 - x5046;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      auto x5051 = x5033 * x5008;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5052 = x5047 - x5051;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5053 = x5048 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5054 = x5052 + x5053;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5055 = Fp(x5054.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5055);
          reg = x5055;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5056 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5056 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5057 = x5054 - x5056;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5058 = x5057 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5059 = Fp(x5058.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5059);
          reg = x5059;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5060 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5060 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5061 = x5058 - x5060;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5062 = x5061 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5062);
        reg = x5062;
      }
      // loc("Top/Mux/5/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5063 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5063 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5064 = x5063 + x5049;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5065 = x5050 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5066 = x5064 + x5065;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5067 = Fp(x5066.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5067);
          reg = x5067;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5068 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x5068 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5069 = x5066 - x5068;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5070 = x5069 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5071 = Fp(x5070.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5071);
          reg = x5071;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5072 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x5072 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5073 = x5070 - x5072;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5074 = x5073 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5074);
        reg = x5074;
      }
      host_args.at(0) = x4991;
      host_args.at(1) = x4992;
      host_args.at(2) = x4993;
      host_args.at(3) = x4994;
      host_args.at(4) = x5056;
      host_args.at(5) = x5060;
      host_args.at(6) = x5068;
      host_args.at(7) = x5072;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/5/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5075 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5075 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x5076 = x93 - x5075;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5077 = x5076 * x4995;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5078 = x5076 * x4996;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5079 = x5076 * x4997;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5080 = x5076 * x4998;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5081 = x5077 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5082 = x5078 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5083 = x5079 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5084 = x5080 + x89;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5085 = x5075 * x4995;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5086 = x5075 * x4996;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5087 = x5075 * x4997;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5088 = x5075 * x4998;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5089 = x5081 - x5085;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5090 = x5082 - x5086;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5091 = x5083 - x5087;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5092 = x5084 - x5088;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      auto x5093 = x5075 * x5008;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5094 = x5089 - x5093;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5095 = x5090 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5096 = x5094 + x5095;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5097 = Fp(x5096.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5097);
          reg = x5097;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5098 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x5098 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5099 = x5096 - x5098;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5100 = x5099 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5101 = Fp(x5100.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5101);
          reg = x5101;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5102 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x5102 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5103 = x5100 - x5102;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5104 = x5103 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5104);
        reg = x5104;
      }
      // loc("Top/Mux/5/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5105 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x5105 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5106 = x5105 + x5091;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5107 = x5092 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5108 = x5106 + x5107;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5109 = Fp(x5108.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5109);
          reg = x5109;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5110 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x5110 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5111 = x5108 - x5110;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5112 = x5111 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5113 = Fp(x5112.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5113);
          reg = x5113;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5114 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x5114 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5115 = x5112 - x5114;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5116 = x5115 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5116);
        reg = x5116;
      }
      host_args.at(0) = x4995;
      host_args.at(1) = x4996;
      host_args.at(2) = x4997;
      host_args.at(3) = x4998;
      host_args.at(4) = x5098;
      host_args.at(5) = x5102;
      host_args.at(6) = x5110;
      host_args.at(7) = x5114;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":137:26)
      auto x5117 = x5102 * x88;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x5118 = x5098 + x5117;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5119 = (x5118 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5119);
          reg = x5119;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5120 = inv(x5118);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5120);
          reg = x5120;
        }
      }
      // loc("Top/Mux/5/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5121 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5121 != Fp::invalid());
      if (x5121 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5118 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5122 = x93 - x5121;
      if (x5122 != 0) {
        // loc("Top/Mux/5/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5123 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5123 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5124 = x5118 * x5123;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5125 = x5124 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5125 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x5126 = x5114 * x88;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x5127 = x5110 + x5126;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x5128 = x5122 * x78;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x5129 = x5127 + x5128;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5130 = (x5129 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5130);
          reg = x5130;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5131 = inv(x5129);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5131);
          reg = x5131;
        }
      }
      // loc("Top/Mux/5/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5132 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x5132 != Fp::invalid());
      if (x5132 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5129 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5133 = x93 - x5132;
      if (x5133 != 0) {
        // loc("Top/Mux/5/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5134 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x5134 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5135 = x5129 * x5134;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5136 = x5135 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5136 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5137 = x5033 + x5075;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5138 = x5033 * x90;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5139 = x5138 * x5075;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5140 = x5137 - x5139;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      auto x5141 = x5132 * x5033;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5142 = x5140 - x5141;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5142);
        reg = x5142;
      }
      // loc("Top/Mux/5/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5143 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5143 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x5144 = x93 - x5143;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5145 = x5144 * x4999;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5146 = x5144 * x5000;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5147 = x5144 * x5001;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5148 = x5144 * x5002;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5149 = x5145 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5150 = x5146 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5151 = x5147 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5152 = x5148 + x89;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5153 = x5143 * x4999;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5154 = x5143 * x5000;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5155 = x5143 * x5001;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5156 = x5143 * x5002;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5157 = x5149 - x5153;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5158 = x5150 - x5154;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5159 = x5151 - x5155;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5160 = x5152 - x5156;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5161 = x5143 * x5008;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5162 = x5157 - x5161;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5163 = x5158 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5164 = x5162 + x5163;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5165 = Fp(x5164.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5165);
          reg = x5165;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5166 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5166 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5167 = x5164 - x5166;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5168 = x5167 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5169 = Fp(x5168.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5169);
          reg = x5169;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5170 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5170 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5171 = x5168 - x5170;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5172 = x5171 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5172);
        reg = x5172;
      }
      // loc("Top/Mux/5/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5173 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5173 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5174 = x5173 + x5159;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5175 = x5160 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5176 = x5174 + x5175;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5177 = Fp(x5176.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5177);
          reg = x5177;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5178 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5178 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5179 = x5176 - x5178;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5180 = x5179 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5181 = Fp(x5180.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5182 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5182 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5183 = x5180 - x5182;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5184 = x5183 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5184);
        reg = x5184;
      }
      host_args.at(0) = x4999;
      host_args.at(1) = x5000;
      host_args.at(2) = x5001;
      host_args.at(3) = x5002;
      host_args.at(4) = x5166;
      host_args.at(5) = x5170;
      host_args.at(6) = x5178;
      host_args.at(7) = x5182;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5185 = x5034 * x5003;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5186 = x5034 * x5004;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5187 = x5034 * x5005;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5188 = x5034 * x5006;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5189 = x5185 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5190 = x5186 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5191 = x5187 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5192 = x5188 + x89;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5193 = x5033 * x5003;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5194 = x5033 * x5004;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5195 = x5033 * x5005;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5196 = x5033 * x5006;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5197 = x5189 - x5193;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5198 = x5190 - x5194;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5199 = x5191 - x5195;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5200 = x5192 - x5196;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5201 = x5197 - x5051;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5202 = x5198 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5203 = x5201 + x5202;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5204 = Fp(x5203.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5204);
          reg = x5204;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5205 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5205 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5206 = x5203 - x5205;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5207 = x5206 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5208 = Fp(x5207.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5208);
          reg = x5208;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5209 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5209 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5210 = x5207 - x5209;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5211 = x5210 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5211);
        reg = x5211;
      }
      // loc("Top/Mux/5/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5212 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5212 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5213 = x5212 + x5199;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5214 = x5200 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5215 = x5213 + x5214;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5216 = Fp(x5215.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5216);
          reg = x5216;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5217 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5217 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5218 = x5215 - x5217;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5219 = x5218 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5220 = Fp(x5219.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5220);
          reg = x5220;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5221 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5221 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5222 = x5219 - x5221;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5223 = x5222 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5223);
        reg = x5223;
      }
      host_args.at(0) = x5003;
      host_args.at(1) = x5004;
      host_args.at(2) = x5005;
      host_args.at(3) = x5006;
      host_args.at(4) = x5205;
      host_args.at(5) = x5209;
      host_args.at(6) = x5217;
      host_args.at(7) = x5221;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5224 = x5098 + x88;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5225 = x5102 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5226 = x5110 + x89;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5227 = x5114 + x89;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5228 = x5224 - x93;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5229 = x5228 - x5205;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5230 = x5225 - x5209;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5231 = x5226 - x5217;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5232 = x5227 - x5221;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5233 = x5230 * x88;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5234 = x5229 + x5233;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5235 = Fp(x5234.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5236 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5236 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5237 = x5234 - x5236;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5238 = x5237 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5239 = Fp(x5238.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5239);
          reg = x5239;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5240 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5240 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5241 = x5238 - x5240;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5242 = x5241 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5242);
        reg = x5242;
      }
      // loc("Top/Mux/5/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5243 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5243 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5244 = x5243 + x5231;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5245 = x5232 * x88;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5246 = x5244 + x5245;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5247 = Fp(x5246.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5247);
          reg = x5247;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5248 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5248 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5249 = x5246 - x5248;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5250 = x5249 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5251 = Fp(x5250.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5251);
          reg = x5251;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5252 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5252 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5253 = x5250 - x5252;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5254 = x5253 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5254);
        reg = x5254;
      }
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5255 = x5166 * x5098;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5256 = x5255 + x5205;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5257 = x5166 * x5102;
      // loc("cirgen/components/u32.cpp":261:51)
      auto x5258 = x5170 * x5098;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5259 = x5257 + x5258;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5260 = x5259 + x5209;
      // loc("cirgen/components/u32.cpp":261:14)
      auto x5261 = x5260 * x88;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5262 = x5256 + x5261;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5263 = Fp(x5262.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5263);
          reg = x5263;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5264 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5264 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5265 = x5262 - x5264;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5266 = x5265 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5267 = Fp(x5266.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5267);
          reg = x5267;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5268 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5268 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5269 = x5266 - x5268;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5270 = x5269 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5271 = Fp(x5270.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5271);
          reg = x5271;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5272 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5272 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5273 = x5270 - x5272;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5274 = x5273 * x87;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5274);
        reg = x5274;
      }
      // loc("Top/Mux/5/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5275 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5275 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5276 = x5275 * x88;
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5277 = x5276 + x5272;
      // loc("cirgen/components/u32.cpp":266:7)
      auto x5278 = x5170 * x5114;
      // loc("cirgen/components/u32.cpp":266:7)
      if (x5278 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:266");
      // loc("cirgen/components/u32.cpp":267:7)
      auto x5279 = x5178 * x5110;
      // loc("cirgen/components/u32.cpp":267:7)
      if (x5279 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:267");
      // loc("cirgen/components/u32.cpp":268:7)
      auto x5280 = x5182 * x5102;
      // loc("cirgen/components/u32.cpp":268:7)
      if (x5280 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:268");
      // loc("cirgen/components/u32.cpp":269:7)
      auto x5281 = x5178 * x5114;
      // loc("cirgen/components/u32.cpp":269:7)
      if (x5281 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:269");
      // loc("cirgen/components/u32.cpp":270:7)
      auto x5282 = x5182 * x5110;
      // loc("cirgen/components/u32.cpp":270:7)
      if (x5282 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:270");
      // loc("cirgen/components/u32.cpp":271:7)
      auto x5283 = x5182 * x5114;
      // loc("cirgen/components/u32.cpp":271:7)
      if (x5283 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:271");
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5284 = x5178 * x5098;
      // loc("cirgen/components/u32.cpp":273:45)
      auto x5285 = x5170 * x5102;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5286 = x5284 + x5285;
      // loc("cirgen/components/u32.cpp":274:15)
      auto x5287 = x5166 * x5110;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5288 = x5286 + x5287;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5289 = x5288 + x5217;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5290 = x5289 + x5277;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5291 = x5182 * x5098;
      // loc("cirgen/components/u32.cpp":275:52)
      auto x5292 = x5178 * x5102;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5293 = x5291 + x5292;
      // loc("cirgen/components/u32.cpp":276:22)
      auto x5294 = x5170 * x5110;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5295 = x5293 + x5294;
      // loc("cirgen/components/u32.cpp":276:52)
      auto x5296 = x5166 * x5114;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5297 = x5295 + x5296;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5298 = x5297 + x5221;
      // loc("cirgen/components/u32.cpp":275:15)
      auto x5299 = x5298 * x88;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5300 = x5290 + x5299;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5301 = Fp(x5300.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5301);
          reg = x5301;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5302 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5302 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5303 = x5300 - x5302;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5304 = x5303 * x87;
      // loc("cirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5304);
        reg = x5304;
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":92:10))
      auto x5305 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5305 != Fp::invalid());
      // loc("Top/Mux/5/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5306 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x5306 != Fp::invalid());
      host_args.at(0) = x5264;
      host_args.at(1) = x5268;
      host_args.at(2) = x5302;
      host_args.at(3) = x5305;
      host_args.at(4) = x5306;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5307 = x5264 - x5056;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5307 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5308 = x5268 - x5060;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5308 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5309 = x5302 - x5068;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5309 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5310 = x5305 - x5072;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5310 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x5133 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5311 = x5306 - x93;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5311 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5312 = x749 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5313 = Fp(x5312.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5313);
          reg = x5313;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5314 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5314 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5315 = x5312 - x5314;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5316 = x5315 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5317 = Fp(x5316.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5317);
          reg = x5317;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5318 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5318 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5319 = x5316 - x5318;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5320 = x5319 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5321 = Fp(x5320.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5321);
          reg = x5321;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5322 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5322 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5323 = x5320 - x5322;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5324 = x5323 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5325 = Fp(x5324.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5325);
          reg = x5325;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5326 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5326 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5327 = x5324 - x5326;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5328 = x5327 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5328);
        reg = x5328;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5329 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5329 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5330 = x93 - x5329;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5331 = x5329 * x5330;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5331);
        reg = x5331;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5332 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5332 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5333 = x90 - x5329;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5334 = x5332 * x5333;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5334 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x62);
        reg = x62;
      }
    }
    // loc("Top/Mux/5/OneHot/hot[8](Reg)"("./cirgen/components/mux.h":39:25))
    auto x5335 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x5335 != Fp::invalid());
    if (x5335 != 0) {
      // loc("cirgen/circuit/rv32im/ecall.cpp":120:41)
      auto x5336 = x749 * x74;
      {
        host_args.at(0) = x5336;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5337 = host_outs.at(0);
        auto x5338 = host_outs.at(1);
        auto x5339 = host_outs.at(2);
        auto x5340 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5337);
          reg = x5337;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5338);
          reg = x5338;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5339);
          reg = x5339;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5340);
          reg = x5340;
        }
      }
      // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5341 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5341 != Fp::invalid());
      // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5342 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5342 != Fp::invalid());
      // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5343 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5343 != Fp::invalid());
      // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5344 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5344 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5336);
        reg = x5336;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5341);
        reg = x5341;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5342);
        reg = x5342;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5343);
        reg = x5343;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5344);
        reg = x5344;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":122:6)
      auto x5345 = x5341 - x27;
      // loc("cirgen/circuit/rv32im/ecall.cpp":122:6)
      if (x5345 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:122");
      // loc("cirgen/circuit/rv32im/ecall.cpp":123:7)
      if (x5342 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:123");
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:7)
      if (x5343 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:124");
      // loc("cirgen/circuit/rv32im/ecall.cpp":125:7)
      if (x5344 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:125");
      {
        host_args.at(0) = x26;
        host_args.at(1) = x93;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5346 = host_outs.at(0);
        auto x5347 = host_outs.at(1);
        auto x5348 = host_outs.at(2);
        auto x5349 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5346);
          reg = x5346;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5347);
          reg = x5347;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5348);
          reg = x5348;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5349);
          reg = x5349;
        }
      }
      // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5350 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x5350 != Fp::invalid());
      // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5351 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x5351 != Fp::invalid());
      // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5352 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x5352 != Fp::invalid());
      // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5353 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x5353 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x26);
        reg = x26;
      }
      // loc("cirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x735);
        reg = x735;
      }
      // loc("cirgen/components/ram.cpp":171:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5350);
        reg = x5350;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5351);
        reg = x5351;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5352);
        reg = x5352;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5353);
        reg = x5353;
      }
      {
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5354 = (x5350 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5354);
          reg = x5354;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5355 = x5350 - x93;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5356 = (x5355 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5356);
          reg = x5356;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5357 = x5350 - x90;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5358 = (x5357 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5358);
          reg = x5358;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5359 = x5350 - x75;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5360 = (x5359 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5360);
          reg = x5360;
        }
      }
      // loc("Top/Mux/5/Mux/8/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5361 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x5361 != Fp::invalid());
      // loc("Top/Mux/5/Mux/8/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5362 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x5362 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5363 = x5362 * x90;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5364 = x5361 + x5363;
      // loc("Top/Mux/5/Mux/8/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5365 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x5365 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5366 = x5365 * x75;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5367 = x5364 + x5366;
      // loc("./cirgen/components/onehot.h":40:8)
      auto x5368 = x5367 - x5350;
      // loc("./cirgen/components/onehot.h":40:8)
      if (x5368 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":132:47)
        auto x5369 = (x5367 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":132:47)
        auto x5370 = x93 - x5369;
        if (x5370 != 0) {
          host_args.at(0) = x5350;
          host_args.at(1) = x5351;
          host_args.at(2) = x5352;
          host_args.at(3) = x5353;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/5/Mux/8/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":39:25))
      auto x5371 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x5371 != Fp::invalid());
      if (x5371 != 0) {
        {
          host_args.at(0) = x25;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5372 = host_outs.at(0);
          auto x5373 = host_outs.at(1);
          auto x5374 = host_outs.at(2);
          auto x5375 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5372);
            reg = x5372;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5373);
            reg = x5373;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5374);
            reg = x5374;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5375);
            reg = x5375;
          }
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5376 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5376 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5377 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5377 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5378 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5378 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5379 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5379 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5376);
          reg = x5376;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5377);
          reg = x5377;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5378);
          reg = x5378;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5379);
          reg = x5379;
        }
        host_args.at(0) = x5376;
        host_args.at(1) = x5377;
        host_args.at(2) = x5378;
        host_args.at(3) = x5379;
        host(ctx, "log", "ECallHalt> %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5380 = x749 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5381 = Fp(x5380.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5381);
            reg = x5381;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5382 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5382 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5383 = x5380 - x5382;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5384 = x5383 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5385 = Fp(x5384.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5385);
            reg = x5385;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5386 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5386 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5387 = x5384 - x5386;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5388 = x5387 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5389 = Fp(x5388.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5389);
            reg = x5389;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5390 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5390 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5391 = x5388 - x5390;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5392 = x5391 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5393 = Fp(x5392.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5393);
            reg = x5393;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5394 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5394 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5395 = x5392 - x5394;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5396 = x5395 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5396);
          reg = x5396;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5397 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5397 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5398 = x93 - x5397;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5399 = x5397 * x5398;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5399);
          reg = x5399;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5400 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5400 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5401 = x90 - x5397;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5402 = x5400 * x5401;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5402 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":19:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
      }
      if (x5361 != 0) {
        {
          host_args.at(0) = x25;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5403 = host_outs.at(0);
          auto x5404 = host_outs.at(1);
          auto x5405 = host_outs.at(2);
          auto x5406 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5403);
            reg = x5403;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5404);
            reg = x5404;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5405);
            reg = x5405;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5406);
            reg = x5406;
          }
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5407 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5407 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5408 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5408 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5409 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5409 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5410 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5410 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5407);
          reg = x5407;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5408);
          reg = x5408;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5409);
          reg = x5409;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5410);
          reg = x5410;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5411 = host_outs.at(0);
          auto x5412 = host_outs.at(1);
          auto x5413 = host_outs.at(2);
          auto x5414 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5411);
            reg = x5411;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5412);
            reg = x5412;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5413);
            reg = x5413;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5414);
            reg = x5414;
          }
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5415 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5415 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5416 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5416 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5417 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5417 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5418 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5418 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5415);
          reg = x5415;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5416);
          reg = x5416;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5417);
          reg = x5417;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5418);
          reg = x5418;
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5419 = (x5407 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5419);
            reg = x5419;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5420 = x5407 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5421 = (x5420 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5421);
            reg = x5421;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5422 = x5407 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5423 = (x5422 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5423);
            reg = x5423;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5424 = x5407 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5425 = (x5424 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5425);
            reg = x5425;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5426 = x5407 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5427 = (x5426 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5427);
            reg = x5427;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5428 = x5407 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5429 = (x5428 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5429);
            reg = x5429;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5430 = x5407 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5431 = (x5430 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5431);
            reg = x5431;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5432 = x5407 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5433 = (x5432 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5433);
            reg = x5433;
          }
        }
        // loc("Top/Mux/5/Mux/8/Mux/1/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5434 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x5434 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/Mux/1/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5435 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x5435 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5436 = x5435 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5437 = x5434 + x5436;
        // loc("Top/Mux/5/Mux/8/Mux/1/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5438 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x5438 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5439 = x5438 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5440 = x5437 + x5439;
        // loc("Top/Mux/5/Mux/8/Mux/1/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5441 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x5441 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5442 = x5441 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5443 = x5440 + x5442;
        // loc("Top/Mux/5/Mux/8/Mux/1/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5444 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x5444 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5445 = x5444 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5446 = x5443 + x5445;
        // loc("Top/Mux/5/Mux/8/Mux/1/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5447 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x5447 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5448 = x5447 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5449 = x5446 + x5448;
        // loc("Top/Mux/5/Mux/8/Mux/1/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5450 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x5450 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5451 = x5450 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5452 = x5449 + x5451;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x5453 = x5452 - x5407;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x5453 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/Mux/5/Mux/8/Mux/1/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":36:24))
        auto x5454 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x5454 != Fp::invalid());
        if (x5454 != 0) {
          host_args.at(0) = x5452;
          host_args.at(1) = x5415;
          host_args.at(2) = x5416;
          host_args.at(3) = x5417;
          host_args.at(4) = x5418;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][73] = x5415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][74] = x5416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][75] = x5417;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][76] = x5418;
        }
        if (x5434 != 0) {
          host_args.at(0) = x5452;
          host_args.at(1) = x5415;
          host_args.at(2) = x5416;
          host_args.at(3) = x5417;
          host_args.at(4) = x5418;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][77] = x5415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][78] = x5416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][79] = x5417;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][80] = x5418;
        }
        if (x5435 != 0) {
          host_args.at(0) = x5452;
          host_args.at(1) = x5415;
          host_args.at(2) = x5416;
          host_args.at(3) = x5417;
          host_args.at(4) = x5418;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][81] = x5415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][82] = x5416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][83] = x5417;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][84] = x5418;
        }
        if (x5438 != 0) {
          host_args.at(0) = x5452;
          host_args.at(1) = x5415;
          host_args.at(2) = x5416;
          host_args.at(3) = x5417;
          host_args.at(4) = x5418;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][85] = x5415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][86] = x5416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][87] = x5417;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][88] = x5418;
        }
        if (x5441 != 0) {
          host_args.at(0) = x5452;
          host_args.at(1) = x5415;
          host_args.at(2) = x5416;
          host_args.at(3) = x5417;
          host_args.at(4) = x5418;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][89] = x5415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][90] = x5416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][91] = x5417;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][92] = x5418;
        }
        if (x5444 != 0) {
          host_args.at(0) = x5452;
          host_args.at(1) = x5415;
          host_args.at(2) = x5416;
          host_args.at(3) = x5417;
          host_args.at(4) = x5418;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][93] = x5415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][94] = x5416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][95] = x5417;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][96] = x5418;
        }
        if (x5447 != 0) {
          host_args.at(0) = x5452;
          host_args.at(1) = x5415;
          host_args.at(2) = x5416;
          host_args.at(3) = x5417;
          host_args.at(4) = x5418;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][97] = x5415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][98] = x5416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][99] = x5417;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][100] = x5418;
        }
        if (x5450 != 0) {
          host_args.at(0) = x5452;
          host_args.at(1) = x5415;
          host_args.at(2) = x5416;
          host_args.at(3) = x5417;
          host_args.at(4) = x5418;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][101] = x5415;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][102] = x5416;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][103] = x5417;
          // loc("cirgen/components/u32.cpp":34:5)
          args[1][104] = x5418;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":42:17)
        auto x5455 = x749 + x76;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5456 = x5455 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5457 = Fp(x5456.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5457);
            reg = x5457;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5458 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5458 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5459 = x5456 - x5458;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5460 = x5459 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5461 = Fp(x5460.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5461);
            reg = x5461;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5462 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5462 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5463 = x5460 - x5462;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5464 = x5463 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5465 = Fp(x5464.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5465);
            reg = x5465;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5466 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5466 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5467 = x5464 - x5466;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5468 = x5467 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5469 = Fp(x5468.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5469);
            reg = x5469;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5470 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5470 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5471 = x5468 - x5470;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5472 = x5471 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5472);
          reg = x5472;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5473 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5473 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5474 = x93 - x5473;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5475 = x5473 * x5474;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5475);
          reg = x5475;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5476 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5476 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5477 = x90 - x5473;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5478 = x5476 * x5477;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5478 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":43:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
      }
      if (x5362 != 0) {
        {
          host_args.at(0) = x25;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5479 = host_outs.at(0);
          auto x5480 = host_outs.at(1);
          auto x5481 = host_outs.at(2);
          auto x5482 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5479);
            reg = x5479;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5480);
            reg = x5480;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5481);
            reg = x5481;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5482);
            reg = x5482;
          }
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5483 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5483 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5484 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5484 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5485 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5485 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5486 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5486 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5483);
          reg = x5483;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5484);
          reg = x5484;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5485);
          reg = x5485;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5486);
          reg = x5486;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5487 = host_outs.at(0);
          auto x5488 = host_outs.at(1);
          auto x5489 = host_outs.at(2);
          auto x5490 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5487);
            reg = x5487;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5488);
            reg = x5488;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5489);
            reg = x5489;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5490);
            reg = x5490;
          }
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5491 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5491 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5492 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5492 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5493 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5493 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5494 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5494 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5491);
          reg = x5491;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5492);
          reg = x5492;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5493);
          reg = x5493;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5494);
          reg = x5494;
        }
        {
          // loc("./cirgen/components/u32.h":25:12)
          auto x5495 = x5492 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5496 = x5491 + x5495;
          // loc("./cirgen/components/u32.h":26:12)
          auto x5497 = x5493 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5498 = x5496 + x5497;
          // loc("./cirgen/components/u32.h":27:12)
          auto x5499 = x5494 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5500 = x5498 + x5499;
          // loc("cirgen/circuit/rv32im/ecall.cpp":70:22)
          auto x5501 = Fp(x5500.asUInt32() & x75.asUInt32());
          if (x5501 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":72:26)
            auto x5502 = x5500 - x5501;
            // loc("cirgen/circuit/rv32im/ecall.cpp":72:26)
            auto x5503 = x5502 + x76;
            // loc("cirgen/circuit/rv32im/ecall.cpp":72:25)
            auto x5504 = x5503 * x74;
            // loc("cirgen/circuit/rv32im/ecall.cpp":72:7)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5504);
              reg = x5504;
            }
            // loc("cirgen/circuit/rv32im/ecall.cpp":73:42)
            auto x5505 = x5501 - x93;
            // loc("./cirgen/components/bits.h":61:23)
            {
              auto& reg = args[2][76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5505);
              reg = x5505;
            }
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":75:23)
          auto x5506 = (x5501 == 0) ? Fp(1) : Fp(0);
          if (x5506 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":76:25)
            auto x5507 = x5500 * x74;
            // loc("cirgen/circuit/rv32im/ecall.cpp":76:7)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5507);
              reg = x5507;
            }
            // loc("./cirgen/components/bits.h":61:23)
            {
              auto& reg = args[2][76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x75);
              reg = x75;
            }
          }
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5508 = x5492 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5509 = x5491 + x5508;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5510 = x5493 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5511 = x5509 + x5510;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5512 = x5494 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5513 = x5511 + x5512;
        // loc("Top/Mux/5/Mux/8/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5514 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x5514 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5515 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x5515 != Fp::invalid());
        host_args.at(0) = x5513;
        host_args.at(1) = x5514;
        host_args.at(2) = x5515;
        host(ctx, "log", "Calculated orig = %u, output chunks = %u, first cycle-1 = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":86:7)
        auto x5516 = x5514 - x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":86:6)
        auto x5517 = x5516 * x76;
        // loc("cirgen/circuit/rv32im/ecall.cpp":86:44)
        auto x5518 = x5515 + x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":86:6)
        auto x5519 = x5517 + x5518;
        // loc("cirgen/circuit/rv32im/ecall.cpp":85:6)
        auto x5520 = x5513 - x5519;
        // loc("cirgen/circuit/rv32im/ecall.cpp":85:6)
        if (x5520 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:85");
        // loc("cirgen/circuit/rv32im/ecall.cpp":89:31)
        auto x5521 = x5483 * x74;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5522 = Fp(x5521.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5522);
            reg = x5522;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5523 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x5523 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5524 = x5521 - x5523;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5525 = x5524 * x87;
        // loc("cirgen/circuit/rv32im/ecall.cpp":89:7)
        if (x5525 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:89");
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5526 = Fp(x5521.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5526);
            reg = x5526;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5527 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x5527 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5528 = x5521 - x5527;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5529 = x5528 * x87;
        // loc("cirgen/circuit/rv32im/ecall.cpp":90:7)
        if (x5529 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:90");
        {
          host_args.at(0) = x5513;
          host(ctx, "syscallInit", "", host_args.data(), 1, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5530 = x749 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5531 = Fp(x5530.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5531);
            reg = x5531;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5532 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5532 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5533 = x5530 - x5532;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5534 = x5533 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5535 = Fp(x5534.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5535);
            reg = x5535;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5536 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5536 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5537 = x5534 - x5536;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5538 = x5537 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5539 = Fp(x5538.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5539);
            reg = x5539;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5540 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5540 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5541 = x5538 - x5540;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5542 = x5541 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5543 = Fp(x5542.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5543);
            reg = x5543;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5544 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5544 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5545 = x5542 - x5544;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5546 = x5545 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5546);
          reg = x5546;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5547 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5547 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5548 = x93 - x5547;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5549 = x5547 * x5548;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5549);
          reg = x5549;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5550 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5550 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5551 = x90 - x5547;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5552 = x5550 * x5551;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5552 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":95:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        host(ctx, "log", "Set next major to be ecall copy in", host_args.data(), 0, host_outs.data(), 0);
      }
      if (x5365 != 0) {
        {
          host_args.at(0) = x25;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5553 = host_outs.at(0);
          auto x5554 = host_outs.at(1);
          auto x5555 = host_outs.at(2);
          auto x5556 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5553);
            reg = x5553;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5554);
            reg = x5554;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5555);
            reg = x5555;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5556);
            reg = x5556;
          }
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5557 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5557 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5558 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5558 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5559 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5559 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5560 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5560 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5557);
          reg = x5557;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5558);
          reg = x5558;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5559);
          reg = x5559;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5560);
          reg = x5560;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5561 = host_outs.at(0);
          auto x5562 = host_outs.at(1);
          auto x5563 = host_outs.at(2);
          auto x5564 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5561);
            reg = x5561;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5562);
            reg = x5562;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5563);
            reg = x5563;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5564);
            reg = x5564;
          }
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5565 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5565 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5566 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5566 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5567 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5567 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5568 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5568 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5565);
          reg = x5565;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5566);
          reg = x5566;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5567);
          reg = x5567;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5568);
          reg = x5568;
        }
        {
          host_args.at(0) = x23;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5569 = host_outs.at(0);
          auto x5570 = host_outs.at(1);
          auto x5571 = host_outs.at(2);
          auto x5572 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5569);
            reg = x5569;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5570);
            reg = x5570;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5571);
            reg = x5571;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5572);
            reg = x5572;
          }
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5573 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x5573 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5574 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x5574 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5575 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x5575 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5576 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x5576 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x23);
          reg = x23;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5573);
          reg = x5573;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5574);
          reg = x5574;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5575);
          reg = x5575;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5576);
          reg = x5576;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":109:17)
        auto x5577 = x749 + x76;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5578 = x5577 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5579 = Fp(x5578.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5579);
            reg = x5579;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5580 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5580 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5581 = x5578 - x5580;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5582 = x5581 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5583 = Fp(x5582.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5583);
            reg = x5583;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5584 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5584 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5585 = x5582 - x5584;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5586 = x5585 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x5587 = Fp(x5586.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5587);
            reg = x5587;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x5588 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5588 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x5589 = x5586 - x5588;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x5590 = x5589 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5591 = Fp(x5590.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5591);
            reg = x5591;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5592 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5592 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5593 = x5590 - x5592;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5594 = x5593 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5594);
          reg = x5594;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5595 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5595 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5596 = x93 - x5595;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5597 = x5595 * x5596;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5597);
          reg = x5597;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5598 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5598 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5599 = x90 - x5595;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5600 = x5598 * x5599;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5600 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":110:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
    }
    // loc("Top/Mux/5/OneHot/hot[9](Reg)"("./cirgen/components/mux.h":39:25))
    auto x5601 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x5601 != Fp::invalid());
    if (x5601 != 0) {
      // loc("Top/Mux/5/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/sha.cpp":174:69))
      auto x5602 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x5602 != Fp::invalid());
      // loc("Top/Mux/5/OneHot/hot[12](Reg)"("cirgen/circuit/rv32im/sha.cpp":175:77))
      auto x5603 = args[2][112 * steps + ((cycle - 1) & mask)];
      assert(x5603 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":176:35)
      auto x5604 = x5602 + x5603;
      if (x5604 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x76);
          reg = x76;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5605 = x93 - x5602;
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5606 = x5605 - x5603;
      if (x5606 != 0) {
        // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5607 = args[2][148 * steps + ((cycle - 1) & mask)];
        assert(x5607 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5607);
          reg = x5607;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5608 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5608 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5609 = x5608 - x93;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5609);
          reg = x5609;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5610 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x5610 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5611 = (x5610 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5611);
          reg = x5611;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5612 = inv(x5610);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5612);
          reg = x5612;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5613 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x5613 != Fp::invalid());
      if (x5613 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5610 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5614 = x93 - x5613;
      if (x5614 != 0) {
        // loc("Top/Mux/5/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5615 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x5615 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5616 = x5610 * x5615;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5617 = x5616 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5617 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x5613 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
      }
      if (x5614 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5618 = x2284 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5619 = x1500 + x5618;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5620 = x2987 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5621 = x5619 + x5620;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5622 = x3743 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5623 = x5621 + x5622;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5624 = x4194 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5625 = x5623 + x5624;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5626 = x4558 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5627 = x5625 + x5626;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5628 = x4990 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5629 = x5627 + x5628;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5630 = x5335 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5631 = x5629 + x5630;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5632 = x5601 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5633 = x5631 + x5632;
        // loc("Top/Mux/5/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5634 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5634 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5635 = x5634 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5636 = x5633 + x5635;
        // loc("Top/Mux/5/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5637 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5637 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5638 = x5637 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5639 = x5636 + x5638;
        // loc("Top/Mux/5/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5640 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5640 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5641 = x5640 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5642 = x5639 + x5641;
        // loc("Top/Mux/5/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5643 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5643 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5644 = x5643 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5645 = x5642 + x5644;
        // loc("Top/Mux/5/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5646 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5646 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5647 = x5646 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5648 = x5645 + x5647;
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5649 = x749 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5650 = Fp(x5649.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5650);
          reg = x5650;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5651 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5651 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5652 = x5649 - x5651;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5653 = x5652 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5654 = Fp(x5653.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5654);
          reg = x5654;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5655 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5655 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5656 = x5653 - x5655;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5657 = x5656 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x5658 = Fp(x5657.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5658);
          reg = x5658;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x5659 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5659 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x5660 = x5657 - x5659;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x5661 = x5660 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5662 = Fp(x5661.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5662);
          reg = x5662;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5663 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5663 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5664 = x5661 - x5663;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5665 = x5664 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5665);
        reg = x5665;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5666 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5666 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5667 = x93 - x5666;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5668 = x5666 * x5667;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5668);
        reg = x5668;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5669 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5669 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5670 = x90 - x5666;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5671 = x5669 * x5670;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5671 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5672 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x5672 != Fp::invalid());
      host_args.at(0) = x68;
      host_args.at(1) = x5672;
      host_args.at(2) = x5610;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5602 != 0) {
        {
          host_args.at(0) = x22;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5673 = host_outs.at(0);
          auto x5674 = host_outs.at(1);
          auto x5675 = host_outs.at(2);
          auto x5676 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5673);
            reg = x5673;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5674);
            reg = x5674;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5675);
            reg = x5675;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5676);
            reg = x5676;
          }
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5677 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5677 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5678 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5678 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5679 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5679 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5680 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5680 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x22);
          reg = x22;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5677);
          reg = x5677;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5678);
          reg = x5678;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5679);
          reg = x5679;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5680);
          reg = x5680;
        }
        {
          host_args.at(0) = x21;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5681 = host_outs.at(0);
          auto x5682 = host_outs.at(1);
          auto x5683 = host_outs.at(2);
          auto x5684 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5681);
            reg = x5681;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5682);
            reg = x5682;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5683);
            reg = x5683;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5684);
            reg = x5684;
          }
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5685 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5685 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5686 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5686 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5687 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5687 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5688 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5688 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x21);
          reg = x21;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5685);
          reg = x5685;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5686);
          reg = x5686;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5687);
          reg = x5687;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5688);
          reg = x5688;
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5689 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5689 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5690 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5690 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5691 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5691 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5692 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5692 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5693 = x5690 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5694 = x5689 + x5693;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5695 = x5691 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5696 = x5694 + x5695;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5697 = x5692 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5698 = x5696 + x5697;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5699 = x5698 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5699);
          reg = x5699;
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5700 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5700 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5701 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5701 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5702 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5702 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5703 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5703 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5704 = x5701 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5705 = x5700 + x5704;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5706 = x5702 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5707 = x5705 + x5706;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5708 = x5703 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5709 = x5707 + x5708;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5710 = x5709 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5710);
          reg = x5710;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5711 = x5678 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5712 = x5677 + x5711;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5713 = x5679 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5714 = x5712 + x5713;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5715 = x5680 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5716 = x5714 + x5715;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5717 = x5716 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5717);
          reg = x5717;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5718 = x5686 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5719 = x5685 + x5718;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5720 = x5687 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5721 = x5719 + x5720;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5722 = x5688 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5723 = x5721 + x5722;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5724 = x5723 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5724);
          reg = x5724;
        }
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5725 = args[2][146 * steps + ((cycle - 1) & mask)];
        assert(x5725 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5726 = args[2][147 * steps + ((cycle - 1) & mask)];
        assert(x5726 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5727 = args[2][148 * steps + ((cycle - 1) & mask)];
        assert(x5727 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5728 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x5728 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5729 = x5726 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5730 = x5725 + x5729;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5731 = x5727 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5732 = x5730 + x5731;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5733 = x5728 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5734 = x5732 + x5733;
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5734);
          reg = x5734;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":203:5)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5735 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5735 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5736 = x5735 * x76;
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5737 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5737 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5738 = x5737 * x76;
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5739 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5739 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":207:10)
        auto x5740 = x5739 * x76;
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5741 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5741 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":208:10)
        auto x5742 = x5741 * x76;
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5743 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x5743 != Fp::invalid());
        host_args.at(0) = x5736;
        host_args.at(1) = x5738;
        host_args.at(2) = x5740;
        host_args.at(3) = x5742;
        host_args.at(4) = x5743;
        host(ctx, "log", "  FromEcall: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5603 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/5/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":215:53))
        auto x5744 = args[2][115 * steps + ((cycle - 1) & mask)];
        assert(x5744 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":215:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5744);
          reg = x5744;
        }
        // loc("Top/Mux/5/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":216:51))
        auto x5745 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x5745 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":216:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5745);
          reg = x5745;
        }
        // loc("Top/Mux/5/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":217:64))
        auto x5746 = args[2][119 * steps + ((cycle - 1) & mask)];
        assert(x5746 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":48:10)
        auto x5747 = x5746 * x20;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":48:10)
        auto x5748 = x5747 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5748);
          reg = x5748;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":218:64)
        auto x5749 = x5748 + x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5749);
          reg = x5749;
        }
        // loc("Top/Mux/5/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":219:49))
        auto x5750 = args[2][120 * steps + ((cycle - 1) & mask)];
        assert(x5750 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":219:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5750);
          reg = x5750;
        }
        // loc("Top/Mux/5/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5751 = args[2][117 * steps + ((cycle - 1) & mask)];
        assert(x5751 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5751);
          reg = x5751;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":221:5)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5752 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5752 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5753 = x5752 * x76;
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5754 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5754 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x5755 = x5754 * x76;
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5756 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5756 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":225:10)
        auto x5757 = x5756 * x76;
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5758 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5758 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":226:10)
        auto x5759 = x5758 * x76;
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5760 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x5760 != Fp::invalid());
        host_args.at(0) = x5753;
        host_args.at(1) = x5755;
        host_args.at(2) = x5757;
        host_args.at(3) = x5759;
        host_args.at(4) = x5760;
        host(ctx, "log", "  FromPageFault: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5606 != 0) {
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":230:42))
        auto x5761 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x5761 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5761);
          reg = x5761;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":231:40))
        auto x5762 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5762 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5762);
          reg = x5762;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":232:36))
        auto x5763 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5763 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":232:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5763);
          reg = x5763;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":233:36))
        auto x5764 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5764 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":233:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5764);
          reg = x5764;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":234:38))
        auto x5765 = args[2][145 * steps + ((cycle - 1) & mask)];
        assert(x5765 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":234:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5765);
          reg = x5765;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5766 = args[2][150 * steps + ((cycle - 1) & mask)];
        assert(x5766 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5766);
          reg = x5766;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":236:38))
        auto x5767 = args[2][151 * steps + ((cycle - 1) & mask)];
        assert(x5767 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":236:5)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5767);
          reg = x5767;
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5768 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5768 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":239:24)
        auto x5769 = x5768 + x5610;
        {
          host_args.at(0) = x5769;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5770 = host_outs.at(0);
          auto x5771 = host_outs.at(1);
          auto x5772 = host_outs.at(2);
          auto x5773 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5770);
            reg = x5770;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5771);
            reg = x5771;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5772);
            reg = x5772;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5773);
            reg = x5773;
          }
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5774 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5774 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5775 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5775 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5776 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5776 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5777 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5777 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5769);
          reg = x5769;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5774);
          reg = x5774;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5775);
          reg = x5775;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5776);
          reg = x5776;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5777);
          reg = x5777;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":240:24)
        auto x5778 = x5769 + x76;
        {
          host_args.at(0) = x5778;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5779 = host_outs.at(0);
          auto x5780 = host_outs.at(1);
          auto x5781 = host_outs.at(2);
          auto x5782 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5779);
            reg = x5779;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5780);
            reg = x5780;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5781);
            reg = x5781;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5782);
            reg = x5782;
          }
        }
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5783 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5783 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5784 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5784 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5785 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5785 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x5786 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5786 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5778);
          reg = x5778;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5783);
          reg = x5783;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5784);
          reg = x5784;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5785);
          reg = x5785;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5786);
          reg = x5786;
        }
      }
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][149 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5787 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x5787 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5788 = (x5787 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5788);
          reg = x5788;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5789 = inv(x5787);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5789);
          reg = x5789;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5790 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x5790 != Fp::invalid());
      if (x5790 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5787 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5791 = x93 - x5790;
      if (x5791 != 0) {
        // loc("Top/Mux/5/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5792 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x5792 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5793 = x5787 * x5792;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5794 = x5793 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5794 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5795 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x5795 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5796 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5796 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5797 = x5796 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5798 = x5795 + x5797;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5799 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x5799 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5800 = x5799 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5801 = x5798 + x5800;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5802 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5803 = x5802 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5804 = x5801 + x5803;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5805 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5805 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5806 = x5805 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5807 = x5804 + x5806;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5808 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5808 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5809 = x5808 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5810 = x5807 + x5809;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5811 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5811 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5812 = x5811 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5813 = x5810 + x5812;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5814 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5814 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5815 = x5814 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5816 = x5813 + x5815;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5817 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5817 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5818 = x5817 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5819 = x5816 + x5818;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5820 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5820 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5821 = x5820 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5822 = x5819 + x5821;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5823 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5823 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5824 = x5823 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5825 = x5822 + x5824;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5826 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x5826 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5827 = x5826 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5828 = x5825 + x5827;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5829 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x5829 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5830 = x5829 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5831 = x5828 + x5830;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5832 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x5832 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5833 = x5832 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5834 = x5831 + x5833;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5835 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x5835 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5836 = x5835 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5837 = x5834 + x5836;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5838 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x5838 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5839 = x5838 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5840 = x5837 + x5839;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5841 = x92 - x5840;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5842 = x5841 * x7;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5842);
        reg = x5842;
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5843 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x5843 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5844 = Fp(x5843.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5844);
          reg = x5844;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5845 = Fp(x5843.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5846 = x5845 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5846);
          reg = x5846;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5847 = Fp(x5843.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5848 = x5847 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5848);
          reg = x5848;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5849 = Fp(x5843.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5850 = x5849 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5850);
          reg = x5850;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5851 = Fp(x5843.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5852 = x5851 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5852);
          reg = x5852;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5853 = Fp(x5843.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5854 = x5853 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5854);
          reg = x5854;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5855 = Fp(x5843.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5856 = x5855 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5856);
          reg = x5856;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5857 = Fp(x5843.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5858 = x5857 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5858);
          reg = x5858;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5859 = Fp(x5843.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5860 = x5859 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5860);
          reg = x5860;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5861 = Fp(x5843.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5862 = x5861 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5862);
          reg = x5862;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5863 = Fp(x5843.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5864 = x5863 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5864);
          reg = x5864;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5865 = Fp(x5843.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5866 = x5865 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5866);
          reg = x5866;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5867 = Fp(x5843.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5868 = x5867 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5868);
          reg = x5868;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5869 = Fp(x5843.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5870 = x5869 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5870);
          reg = x5870;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5871 = Fp(x5843.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5872 = x5871 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5872);
          reg = x5872;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5873 = Fp(x5843.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5874 = x5873 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5874);
          reg = x5874;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5875 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x5875 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5876 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5876 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5877 = x5876 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5878 = x5875 + x5877;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5879 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5879 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5880 = x5879 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5881 = x5878 + x5880;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5882 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5882 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5883 = x5882 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5884 = x5881 + x5883;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5885 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5885 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5886 = x5885 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5887 = x5884 + x5886;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5888 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5888 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5889 = x5888 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5890 = x5887 + x5889;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5891 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5891 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5892 = x5891 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5893 = x5890 + x5892;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5894 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5894 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5895 = x5894 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5896 = x5893 + x5895;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5897 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5897 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5898 = x5897 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5899 = x5896 + x5898;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5900 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5900 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5901 = x5900 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5902 = x5899 + x5901;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5903 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5903 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5904 = x5903 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5905 = x5902 + x5904;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5906 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5906 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5907 = x5906 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5908 = x5905 + x5907;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5909 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5909 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5910 = x5909 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5911 = x5908 + x5910;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5912 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5912 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5913 = x5912 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5914 = x5911 + x5913;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5915 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5915 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5916 = x5915 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5917 = x5914 + x5916;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5918 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5918 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5919 = x5918 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5920 = x5917 + x5919;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5921 = x5843 - x5920;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5922 = x5921 * x7;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5922);
        reg = x5922;
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5923 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5923 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5924 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5924 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5925 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5925 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5926 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5926 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5927 = x5925 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5928 = x5926 + x5927;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5929 = x5923 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5930 = x5924 + x5929;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5931 = Fp(x5928.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5931);
          reg = x5931;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5932 = Fp(x5928.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5933 = x5932 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5933);
          reg = x5933;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5934 = Fp(x5928.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5935 = x5934 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5935);
          reg = x5935;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5936 = Fp(x5928.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5937 = x5936 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5937);
          reg = x5937;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5938 = Fp(x5928.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5939 = x5938 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5939);
          reg = x5939;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5940 = Fp(x5928.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5941 = x5940 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5941);
          reg = x5941;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5942 = Fp(x5928.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5943 = x5942 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5943);
          reg = x5943;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5944 = Fp(x5928.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5945 = x5944 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5945);
          reg = x5945;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5946 = Fp(x5928.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5947 = x5946 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5947);
          reg = x5947;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5948 = Fp(x5928.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5949 = x5948 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5949);
          reg = x5949;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5950 = Fp(x5928.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5951 = x5950 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5951);
          reg = x5951;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5952 = Fp(x5928.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5953 = x5952 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5953);
          reg = x5953;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5954 = Fp(x5928.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5955 = x5954 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5955);
          reg = x5955;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5956 = Fp(x5928.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5957 = x5956 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5957);
          reg = x5957;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5958 = Fp(x5928.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5959 = x5958 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5959);
          reg = x5959;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5960 = Fp(x5928.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5961 = x5960 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5961);
          reg = x5961;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5962 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x5962 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5963 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x5963 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5964 = x5963 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5965 = x5962 + x5964;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5966 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5966 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5967 = x5966 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5968 = x5965 + x5967;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5969 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5969 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5970 = x5969 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5971 = x5968 + x5970;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5972 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5972 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5973 = x5972 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5974 = x5971 + x5973;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5975 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5975 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5976 = x5975 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5977 = x5974 + x5976;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5978 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5978 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5979 = x5978 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5980 = x5977 + x5979;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5981 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x5981 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5982 = x5981 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5983 = x5980 + x5982;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5984 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x5984 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5985 = x5984 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5986 = x5983 + x5985;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5987 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x5987 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5988 = x5987 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5989 = x5986 + x5988;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5990 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x5990 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5991 = x5990 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5992 = x5989 + x5991;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5993 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x5993 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5994 = x5993 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5995 = x5992 + x5994;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5996 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x5996 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5997 = x5996 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5998 = x5995 + x5997;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x5999 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x5999 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6000 = x5999 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6001 = x5998 + x6000;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6002 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x6002 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6003 = x6002 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6004 = x6001 + x6003;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6005 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x6005 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6006 = x6005 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6007 = x6004 + x6006;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6008 = x5928 - x6007;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6009 = x6008 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6010 = Fp(x6009.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6010);
          reg = x6010;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6011 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6011 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6012 = x6009 - x6011;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6013 = x6012 * x74;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6014 = x93 - x6013;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6015 = x6013 * x6014;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6015 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6016 = x5930 + x6009;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6017 = Fp(x6016.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6017);
          reg = x6017;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6018 = Fp(x6016.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6019 = x6018 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6019);
          reg = x6019;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6020 = Fp(x6016.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6021 = x6020 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6021);
          reg = x6021;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6022 = Fp(x6016.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6023 = x6022 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6023);
          reg = x6023;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6024 = Fp(x6016.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6025 = x6024 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6025);
          reg = x6025;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6026 = Fp(x6016.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6027 = x6026 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6027);
          reg = x6027;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6028 = Fp(x6016.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6029 = x6028 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6029);
          reg = x6029;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6030 = Fp(x6016.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6031 = x6030 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6031);
          reg = x6031;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6032 = Fp(x6016.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6033 = x6032 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6033);
          reg = x6033;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6034 = Fp(x6016.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6035 = x6034 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6035);
          reg = x6035;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6036 = Fp(x6016.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6037 = x6036 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6037);
          reg = x6037;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6038 = Fp(x6016.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6039 = x6038 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6039);
          reg = x6039;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6040 = Fp(x6016.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6041 = x6040 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6041);
          reg = x6041;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6042 = Fp(x6016.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6043 = x6042 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6043);
          reg = x6043;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6044 = Fp(x6016.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6045 = x6044 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6045);
          reg = x6045;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6046 = Fp(x6016.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6047 = x6046 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6047);
          reg = x6047;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6048 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x6048 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6049 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x6049 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6050 = x6049 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6051 = x6048 + x6050;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6052 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x6052 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6053 = x6052 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6054 = x6051 + x6053;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6055 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x6055 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6056 = x6055 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6057 = x6054 + x6056;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6058 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x6058 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6059 = x6058 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6060 = x6057 + x6059;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6061 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x6061 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6062 = x6061 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6063 = x6060 + x6062;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6064 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x6064 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6065 = x6064 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6066 = x6063 + x6065;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6067 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x6067 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6068 = x6067 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6069 = x6066 + x6068;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6070 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6070 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6071 = x6070 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6072 = x6069 + x6071;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6073 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6073 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6074 = x6073 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6075 = x6072 + x6074;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6076 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6076 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6077 = x6076 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6078 = x6075 + x6077;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6079 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6079 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6080 = x6079 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6081 = x6078 + x6080;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6082 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6082 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6083 = x6082 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6084 = x6081 + x6083;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6085 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6085 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6086 = x6085 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6087 = x6084 + x6086;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6088 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6088 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6089 = x6088 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6090 = x6087 + x6089;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6091 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6091 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6092 = x6091 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6093 = x6090 + x6092;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6094 = x6016 - x6093;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6095 = x6094 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6096 = Fp(x6095.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6096);
          reg = x6096;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6097 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x6097 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6098 = x6095 - x6097;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6099 = x6098 * x74;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6100 = x93 - x6099;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6101 = x6099 * x6100;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6101 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6102 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x6102 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6103 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x6103 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6104 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x6104 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6105 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x6105 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6106 = x6104 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6107 = x6105 + x6106;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6108 = x6102 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6109 = x6103 + x6108;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6110 = Fp(x6107.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6110);
          reg = x6110;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6111 = Fp(x6107.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6112 = x6111 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6112);
          reg = x6112;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6113 = Fp(x6107.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6114 = x6113 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6114);
          reg = x6114;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6115 = Fp(x6107.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6116 = x6115 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6116);
          reg = x6116;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6117 = Fp(x6107.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6118 = x6117 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6118);
          reg = x6118;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6119 = Fp(x6107.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6120 = x6119 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6120);
          reg = x6120;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6121 = Fp(x6107.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6122 = x6121 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6122);
          reg = x6122;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6123 = Fp(x6107.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6124 = x6123 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6124);
          reg = x6124;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6125 = Fp(x6107.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6126 = x6125 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6126);
          reg = x6126;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6127 = Fp(x6107.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6128 = x6127 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6128);
          reg = x6128;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6129 = Fp(x6107.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6130 = x6129 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6130);
          reg = x6130;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6131 = Fp(x6107.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6132 = x6131 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6132);
          reg = x6132;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6133 = Fp(x6107.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6134 = x6133 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6134);
          reg = x6134;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6135 = Fp(x6107.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6136 = x6135 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6136);
          reg = x6136;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6137 = Fp(x6107.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6138 = x6137 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6138);
          reg = x6138;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6139 = Fp(x6107.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6140 = x6139 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6140);
          reg = x6140;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6141 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6141 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6142 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6142 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6143 = x6142 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6144 = x6141 + x6143;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6145 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6146 = x6145 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6147 = x6144 + x6146;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6148 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6148 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6149 = x6148 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6150 = x6147 + x6149;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6151 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6151 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6152 = x6151 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6153 = x6150 + x6152;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6154 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6154 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6155 = x6154 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6156 = x6153 + x6155;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6157 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6157 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6158 = x6157 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6159 = x6156 + x6158;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6160 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6160 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6161 = x6160 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6162 = x6159 + x6161;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6163 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6163 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6164 = x6163 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6165 = x6162 + x6164;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6166 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6166 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6167 = x6166 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6168 = x6165 + x6167;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6169 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6169 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6170 = x6169 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6171 = x6168 + x6170;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6172 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6173 = x6172 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6174 = x6171 + x6173;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6175 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6176 = x6175 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6177 = x6174 + x6176;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6178 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6178 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6179 = x6178 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6180 = x6177 + x6179;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6181 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6181 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6182 = x6181 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6183 = x6180 + x6182;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6184 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6184 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6185 = x6184 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6186 = x6183 + x6185;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6187 = x6107 - x6186;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6188 = x6187 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6189 = Fp(x6188.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6189);
          reg = x6189;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6190 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x6190 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6191 = x6188 - x6190;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6192 = x6191 * x74;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6193 = x93 - x6192;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6194 = x6192 * x6193;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6194 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6195 = x6109 + x6188;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6196 = Fp(x6195.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6196);
          reg = x6196;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6197 = Fp(x6195.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6198 = x6197 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6198);
          reg = x6198;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6199 = Fp(x6195.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6200 = x6199 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6200);
          reg = x6200;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6201 = Fp(x6195.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6202 = x6201 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6202);
          reg = x6202;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6203 = Fp(x6195.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6204 = x6203 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6204);
          reg = x6204;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6205 = Fp(x6195.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6206 = x6205 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6206);
          reg = x6206;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6207 = Fp(x6195.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6208 = x6207 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6208);
          reg = x6208;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6209 = Fp(x6195.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6210 = x6209 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6210);
          reg = x6210;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6211 = Fp(x6195.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6212 = x6211 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6212);
          reg = x6212;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6213 = Fp(x6195.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6214 = x6213 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6214);
          reg = x6214;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6215 = Fp(x6195.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6216 = x6215 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6216);
          reg = x6216;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6217 = Fp(x6195.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6218 = x6217 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6218);
          reg = x6218;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6219 = Fp(x6195.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6220 = x6219 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6220);
          reg = x6220;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6221 = Fp(x6195.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6222 = x6221 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6222);
          reg = x6222;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6223 = Fp(x6195.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6224 = x6223 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6224);
          reg = x6224;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6225 = Fp(x6195.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6226 = x6225 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6226);
          reg = x6226;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6227 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6227 != Fp::invalid());
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6228 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6228 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6229 = x6228 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6230 = x6227 + x6229;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6231 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6231 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6232 = x6231 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6233 = x6230 + x6232;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6234 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6234 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6235 = x6234 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6236 = x6233 + x6235;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6237 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6237 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6238 = x6237 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6239 = x6236 + x6238;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6240 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6240 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6241 = x6240 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6242 = x6239 + x6241;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6243 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6243 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6244 = x6243 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6245 = x6242 + x6244;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6246 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6246 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6247 = x6246 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6248 = x6245 + x6247;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6249 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x6249 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6250 = x6249 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6251 = x6248 + x6250;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6252 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x6252 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6253 = x6252 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6254 = x6251 + x6253;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6255 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x6255 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6256 = x6255 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6257 = x6254 + x6256;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6258 = args[2][217 * steps + ((cycle - 0) & mask)];
      assert(x6258 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6259 = x6258 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6260 = x6257 + x6259;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6261 = args[2][218 * steps + ((cycle - 0) & mask)];
      assert(x6261 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6262 = x6261 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6263 = x6260 + x6262;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6264 = args[2][219 * steps + ((cycle - 0) & mask)];
      assert(x6264 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6265 = x6264 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6266 = x6263 + x6265;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6267 = args[2][220 * steps + ((cycle - 0) & mask)];
      assert(x6267 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6268 = x6267 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6269 = x6266 + x6268;
      // loc("Top/Mux/5/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6270 = args[2][221 * steps + ((cycle - 0) & mask)];
      assert(x6270 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6271 = x6270 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6272 = x6269 + x6271;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6273 = x6195 - x6272;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6274 = x6273 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6275 = Fp(x6274.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6275);
          reg = x6275;
        }
      }
      // loc("Top/Mux/5/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6276 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x6276 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6277 = x6274 - x6276;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6278 = x6277 * x74;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6279 = x93 - x6278;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6280 = x6278 * x6279;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6280 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/5/OneHot/hot[10](Reg)"("./cirgen/components/mux.h":39:25))
    auto x6281 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x6281 != Fp::invalid());
    if (x6281 != 0) {
      // loc("Top/Mux/5/OneHot/hot[9](Reg)"("cirgen/circuit/rv32im/sha.cpp":262:70))
      auto x6282 = args[2][109 * steps + ((cycle - 1) & mask)];
      assert(x6282 != Fp::invalid());
      // loc("Top/Mux/5/OneHot/hot[11](Reg)"("cirgen/circuit/rv32im/sha.cpp":263:70))
      auto x6283 = args[2][111 * steps + ((cycle - 1) & mask)];
      assert(x6283 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":264:29)
      auto x6284 = x6282 + x6283;
      if (x6284 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":266:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":268:33)
      auto x6285 = x93 - x6282;
      // loc("cirgen/circuit/rv32im/sha.cpp":268:33)
      auto x6286 = x6285 - x6283;
      if (x6286 != 0) {
        // loc("Top/Mux/5/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6287 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x6287 != Fp::invalid());
        if (x6287 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":272:7)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":274:20)
        auto x6288 = x93 - x6287;
        if (x6288 != 0) {
          // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x6289 = args[2][148 * steps + ((cycle - 1) & mask)];
          assert(x6289 != Fp::invalid());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6289);
            reg = x6289;
          }
          // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":277:42))
          auto x6290 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x6290 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":277:42)
          auto x6291 = x6290 - x93;
          // loc("cirgen/circuit/rv32im/sha.cpp":277:7)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6291);
            reg = x6291;
          }
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6292 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x6292 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6293 = (x6292 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6293);
          reg = x6293;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6294 = inv(x6292);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6294);
          reg = x6294;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6295 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x6295 != Fp::invalid());
      if (x6295 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6292 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6296 = x93 - x6295;
      if (x6296 != 0) {
        // loc("Top/Mux/5/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6297 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x6297 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6298 = x6292 * x6297;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6299 = x6298 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6299 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x6295 != 0) {
        // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6300 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x6300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":284:17)
        auto x6301 = x93 - x6300;
        if (x6301 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":284:21)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x67);
            reg = x67;
          }
        }
        if (x6300 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":285:17)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x66);
            reg = x66;
          }
        }
      }
      if (x6296 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6302 = x2284 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6303 = x1500 + x6302;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6304 = x2987 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6305 = x6303 + x6304;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6306 = x3743 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6307 = x6305 + x6306;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6308 = x4194 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6309 = x6307 + x6308;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6310 = x4558 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6311 = x6309 + x6310;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6312 = x4990 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6313 = x6311 + x6312;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6314 = x5335 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6315 = x6313 + x6314;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6316 = x5601 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6317 = x6315 + x6316;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6318 = x6281 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6319 = x6317 + x6318;
        // loc("Top/Mux/5/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6320 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x6320 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6321 = x6320 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6322 = x6319 + x6321;
        // loc("Top/Mux/5/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6323 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x6323 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6324 = x6323 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6325 = x6322 + x6324;
        // loc("Top/Mux/5/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6326 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x6326 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6327 = x6326 * x64;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6328 = x6325 + x6327;
        // loc("Top/Mux/5/OneHot/hot[14](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6329 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x6329 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6330 = x6329 * x63;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6331 = x6328 + x6330;
        // loc("cirgen/circuit/rv32im/sha.cpp":287:33)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6331);
          reg = x6331;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x6332 = x749 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x6333 = Fp(x6332.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6333);
          reg = x6333;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x6334 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x6334 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x6335 = x6332 - x6334;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x6336 = x6335 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x6337 = Fp(x6336.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6337);
          reg = x6337;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x6338 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x6338 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x6339 = x6336 - x6338;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x6340 = x6339 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x6341 = Fp(x6340.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6341);
          reg = x6341;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x6342 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x6342 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x6343 = x6340 - x6342;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x6344 = x6343 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6345 = Fp(x6344.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6345);
          reg = x6345;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6346 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x6346 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6347 = x6344 - x6346;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x6348 = x6347 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6348);
        reg = x6348;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6349 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x6349 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6350 = x93 - x6349;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x6351 = x6349 * x6350;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6351);
        reg = x6351;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6352 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x6352 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6353 = x90 - x6349;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x6354 = x6352 * x6353;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6354 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":290:40))
      auto x6355 = args[2][138 * steps + ((cycle - 1) & mask)];
      assert(x6355 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":290:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6355);
        reg = x6355;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":291:38))
      auto x6356 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x6356 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":291:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6356);
        reg = x6356;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":292:34))
      auto x6357 = args[2][140 * steps + ((cycle - 1) & mask)];
      assert(x6357 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":292:3)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6357);
        reg = x6357;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":293:34))
      auto x6358 = args[2][141 * steps + ((cycle - 1) & mask)];
      assert(x6358 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":293:3)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6358);
        reg = x6358;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":294:36))
      auto x6359 = args[2][145 * steps + ((cycle - 1) & mask)];
      assert(x6359 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":294:3)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6359);
        reg = x6359;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6360 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x6360 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6360);
        reg = x6360;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":296:36))
      auto x6361 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6361 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":296:3)
      {
        auto& reg = args[2][151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6361);
        reg = x6361;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6362 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x6362 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6363 = (x6362 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6363);
          reg = x6363;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6364 = inv(x6362);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6364);
          reg = x6364;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6365 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x6365 != Fp::invalid());
      if (x6365 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6362 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6366 = x93 - x6365;
      if (x6366 != 0) {
        // loc("Top/Mux/5/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6367 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x6367 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6368 = x6362 * x6367;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6369 = x6368 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6369 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][149 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6370 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x6370 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":304:8)
      auto x6371 = x6370 * x76;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6372 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x6372 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":305:8)
      auto x6373 = x6372 * x76;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6374 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x6374 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":306:8)
      auto x6375 = x6374 * x76;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6376 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x6376 != Fp::invalid());
      host_args.at(0) = x67;
      host_args.at(1) = x6376;
      host_args.at(2) = x6292;
      host_args.at(3) = x6371;
      host_args.at(4) = x6373;
      host_args.at(5) = x6375;
      host_args.at(6) = x6362;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = %10x, data1 = %10x, state = %10x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":310:15)
      auto x6377 = x93 - x6376;
      if (x6377 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":311:24)
        auto x6378 = x6370 + x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":311:24)
        auto x6379 = x6378 - x6292;
        // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":311:43))
        auto x6380 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x6380 != Fp::invalid());
        {
          host_args.at(0) = x6379;
          host_args.at(1) = x6380;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6381 = host_outs.at(0);
          auto x6382 = host_outs.at(1);
          auto x6383 = host_outs.at(2);
          auto x6384 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6381);
            reg = x6381;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6382);
            reg = x6382;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6383);
            reg = x6383;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6384);
            reg = x6384;
          }
        }
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6385 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6385 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6386 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6386 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6387 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6387 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6388 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6388 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6379);
          reg = x6379;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6380);
          reg = x6380;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6385);
          reg = x6385;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6386);
          reg = x6386;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6387);
          reg = x6387;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6388);
          reg = x6388;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":312:24)
        auto x6389 = x6 - x6292;
        {
          host_args.at(0) = x6389;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6390 = host_outs.at(0);
          auto x6391 = host_outs.at(1);
          auto x6392 = host_outs.at(2);
          auto x6393 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6390);
            reg = x6390;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6391);
            reg = x6391;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6392);
            reg = x6392;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6393);
            reg = x6393;
          }
        }
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6394 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x6394 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6395 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6395 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6396 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6396 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6397 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6397 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6389);
          reg = x6389;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6394);
          reg = x6394;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6395);
          reg = x6395;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6396);
          reg = x6396;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6397);
          reg = x6397;
        }
      }
      if (x6376 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":315:24)
        auto x6398 = x6372 + x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":315:24)
        auto x6399 = x6398 - x6292;
        // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":315:43))
        auto x6400 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x6400 != Fp::invalid());
        {
          host_args.at(0) = x6399;
          host_args.at(1) = x6400;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6401 = host_outs.at(0);
          auto x6402 = host_outs.at(1);
          auto x6403 = host_outs.at(2);
          auto x6404 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6401);
            reg = x6401;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6402);
            reg = x6402;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6403);
            reg = x6403;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6404);
            reg = x6404;
          }
        }
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6405 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6405 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6406 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6406 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6407 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6407 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6408 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6408 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6399);
          reg = x6399;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6400);
          reg = x6400;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6405);
          reg = x6405;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6406);
          reg = x6406;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6407);
          reg = x6407;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6408);
          reg = x6408;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":316:24)
        auto x6409 = x5 - x6292;
        {
          host_args.at(0) = x6409;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6410 = host_outs.at(0);
          auto x6411 = host_outs.at(1);
          auto x6412 = host_outs.at(2);
          auto x6413 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6410);
            reg = x6410;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6411);
            reg = x6411;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6412);
            reg = x6412;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6413);
            reg = x6413;
          }
        }
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6414 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x6414 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6415 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6415 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6416 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6416 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x6417 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6417 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6409);
          reg = x6409;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6414);
          reg = x6414;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6415);
          reg = x6415;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6416);
          reg = x6416;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6417);
          reg = x6417;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6418 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6418 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6419 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6419 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6420 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6420 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6421 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6421 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6422 = x6420 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6423 = x6421 + x6422;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6424 = x6418 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6425 = x6419 + x6424;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6426 = Fp(x6423.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6426);
          reg = x6426;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6427 = Fp(x6423.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6428 = x6427 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6428);
          reg = x6428;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6429 = Fp(x6423.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6430 = x6429 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6430);
          reg = x6430;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6431 = Fp(x6423.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6432 = x6431 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6432);
          reg = x6432;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6433 = Fp(x6423.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6434 = x6433 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6434);
          reg = x6434;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6435 = Fp(x6423.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6436 = x6435 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6436);
          reg = x6436;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6437 = Fp(x6423.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6438 = x6437 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6438);
          reg = x6438;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6439 = Fp(x6423.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6440 = x6439 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6440);
          reg = x6440;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6441 = Fp(x6423.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6442 = x6441 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6442);
          reg = x6442;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6443 = Fp(x6423.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6444 = x6443 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6444);
          reg = x6444;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6445 = Fp(x6423.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6446 = x6445 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6446);
          reg = x6446;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6447 = Fp(x6423.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6448 = x6447 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6448);
          reg = x6448;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6449 = Fp(x6423.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6450 = x6449 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6450);
          reg = x6450;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6451 = Fp(x6423.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6452 = x6451 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6452);
          reg = x6452;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6453 = Fp(x6423.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6454 = x6453 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6454);
          reg = x6454;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6455 = Fp(x6423.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6456 = x6455 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6456);
          reg = x6456;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6457 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6457 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6458 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6458 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6459 = x6458 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6460 = x6457 + x6459;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6461 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x6461 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6462 = x6461 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6463 = x6460 + x6462;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6464 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6464 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6465 = x6464 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6466 = x6463 + x6465;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6467 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6467 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6468 = x6467 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6469 = x6466 + x6468;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6470 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6470 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6471 = x6470 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6472 = x6469 + x6471;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6473 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6473 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6474 = x6473 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6475 = x6472 + x6474;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6476 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6476 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6477 = x6476 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6478 = x6475 + x6477;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6479 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6479 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6480 = x6479 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6481 = x6478 + x6480;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6482 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6482 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6483 = x6482 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6484 = x6481 + x6483;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6485 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6485 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6486 = x6485 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6487 = x6484 + x6486;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6488 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x6488 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6489 = x6488 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6490 = x6487 + x6489;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6491 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x6491 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6492 = x6491 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6493 = x6490 + x6492;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6494 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x6494 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6495 = x6494 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6496 = x6493 + x6495;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6497 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x6497 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6498 = x6497 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6499 = x6496 + x6498;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6500 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x6500 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6501 = x6500 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6502 = x6499 + x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6503 = x6423 - x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6504 = x6503 * x7;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6504);
        reg = x6504;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6505 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x6505 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6506 = x6425 + x6505;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6507 = Fp(x6506.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6507);
          reg = x6507;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6508 = Fp(x6506.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6509 = x6508 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6509);
          reg = x6509;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6510 = Fp(x6506.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6511 = x6510 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6511);
          reg = x6511;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6512 = Fp(x6506.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6513 = x6512 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6513);
          reg = x6513;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6514 = Fp(x6506.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6515 = x6514 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6515);
          reg = x6515;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6516 = Fp(x6506.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6517 = x6516 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6517);
          reg = x6517;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6518 = Fp(x6506.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6519 = x6518 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6519);
          reg = x6519;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6520 = Fp(x6506.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6521 = x6520 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6521);
          reg = x6521;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6522 = Fp(x6506.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6523 = x6522 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6523);
          reg = x6523;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6524 = Fp(x6506.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6525 = x6524 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6525);
          reg = x6525;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6526 = Fp(x6506.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6527 = x6526 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6527);
          reg = x6527;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6528 = Fp(x6506.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6529 = x6528 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6529);
          reg = x6529;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6530 = Fp(x6506.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6531 = x6530 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6531);
          reg = x6531;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6532 = Fp(x6506.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6533 = x6532 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6533);
          reg = x6533;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6534 = Fp(x6506.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6535 = x6534 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6535);
          reg = x6535;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6536 = Fp(x6506.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6537 = x6536 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6537);
          reg = x6537;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6538 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x6538 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6539 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6539 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6540 = x6539 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6541 = x6538 + x6540;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6542 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6542 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6543 = x6542 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6544 = x6541 + x6543;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6545 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6546 = x6545 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6547 = x6544 + x6546;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6548 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6549 = x6548 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6550 = x6547 + x6549;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6551 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6552 = x6551 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6553 = x6550 + x6552;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6554 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6554 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6555 = x6554 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6556 = x6553 + x6555;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6557 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6558 = x6557 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6559 = x6556 + x6558;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6560 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6560 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6561 = x6560 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6562 = x6559 + x6561;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6563 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6563 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6564 = x6563 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6565 = x6562 + x6564;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6566 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6566 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6567 = x6566 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6568 = x6565 + x6567;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6569 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6569 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6570 = x6569 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6571 = x6568 + x6570;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6572 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6572 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6573 = x6572 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6574 = x6571 + x6573;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6575 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6576 = x6575 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6577 = x6574 + x6576;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6578 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6579 = x6578 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6580 = x6577 + x6579;
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6581 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6582 = x6581 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6583 = x6580 + x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6584 = x6506 - x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6585 = x6584 * x7;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6585);
        reg = x6585;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6586 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x6586 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6587 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6588 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6588 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6589 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6589 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6590 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6591 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6591 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6592 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6592 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6593 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6594 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6594 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6595 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6596 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6597 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6597 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6598 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6599 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6600 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6600 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6601 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6602 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6603 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6603 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6604 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6605 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6606 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6606 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6607 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6608 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6609 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6609 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6610 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6611 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6612 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6612 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6613 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6613 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6614 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6615 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6615 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6616 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6616 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6617 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6618 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x6618 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6619 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6620 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6620 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6621 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6621 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6622 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6622 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6623 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6624 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6624 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6625 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6625 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6626 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6626 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6627 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6627 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6628 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6628 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6629 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6630 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6631 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6631 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6632 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6633 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6633 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6634 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6634 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6635 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6636 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6636 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6637 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6637 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6638 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6639 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6639 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6640 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6640 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6641 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6641 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6642 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6642 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6643 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6644 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6645 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6646 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6646 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6647 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6647 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6648 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6648 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6649 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6649 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6650 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x6650 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6651 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6651 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6652 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6653 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6654 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6654 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6655 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6655 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6656 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6657 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6657 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6658 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6658 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6659 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6660 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6660 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6661 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6661 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6662 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6663 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6664 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6665 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6666 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6666 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6667 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6668 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6669 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6670 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6671 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6672 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6672 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6673 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6674 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6675 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6675 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6676 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6677 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6678 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6678 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6679 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6680 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6681 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6681 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6682 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6683 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6684 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6685 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6686 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6687 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6688 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6689 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6690 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6690 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6691 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6692 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6693 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6693 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6694 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6695 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6696 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6697 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6698 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6698 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6699 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6700 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6701 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6702 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6703 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6704 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6705 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6706 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6707 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6708 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6709 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6710 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6711 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6712 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6713 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6714 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6715 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6716 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6717 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6718 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6719 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6720 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6721 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6722 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6723 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6724 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6725 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6726 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6727 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6728 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6729 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6730 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6731 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6732 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6733 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6734 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6735 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6736 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6737 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6738 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6739 = args[2][215 * steps + ((cycle - 1) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6740 = args[2][216 * steps + ((cycle - 1) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6741 = args[2][217 * steps + ((cycle - 1) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6742 = args[2][218 * steps + ((cycle - 1) & mask)];
      assert(x6742 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6743 = args[2][219 * steps + ((cycle - 1) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6744 = args[2][220 * steps + ((cycle - 1) & mask)];
      assert(x6744 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6745 = args[2][221 * steps + ((cycle - 1) & mask)];
      assert(x6745 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6746 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6747 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6747 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6748 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6748 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6749 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6750 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6750 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6751 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6751 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6752 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x6752 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6753 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x6753 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6754 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6755 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x6755 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6756 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x6756 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6757 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x6757 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6758 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x6758 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6759 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x6759 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6760 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x6760 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6761 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x6761 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6762 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x6762 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6763 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x6763 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6764 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x6764 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6765 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x6765 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6766 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x6766 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6767 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x6767 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6768 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x6768 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6769 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x6769 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6770 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x6770 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6771 = args[2][215 * steps + ((cycle - 2) & mask)];
      assert(x6771 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6772 = args[2][216 * steps + ((cycle - 2) & mask)];
      assert(x6772 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6773 = args[2][217 * steps + ((cycle - 2) & mask)];
      assert(x6773 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6774 = args[2][218 * steps + ((cycle - 2) & mask)];
      assert(x6774 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6775 = args[2][219 * steps + ((cycle - 2) & mask)];
      assert(x6775 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6776 = args[2][220 * steps + ((cycle - 2) & mask)];
      assert(x6776 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6777 = args[2][221 * steps + ((cycle - 2) & mask)];
      assert(x6777 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6778 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6778 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6779 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x6779 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6780 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x6780 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6781 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x6781 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6782 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x6782 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6783 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x6783 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6784 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x6784 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6785 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x6785 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6786 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x6786 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6787 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x6787 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6788 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x6788 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6789 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x6789 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6790 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x6790 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6791 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x6791 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6792 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x6792 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6793 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x6793 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6794 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x6794 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6795 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x6795 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6796 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x6796 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6797 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x6797 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6798 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x6798 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6799 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x6799 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6800 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x6800 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6801 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x6801 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6802 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x6802 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6803 = args[2][215 * steps + ((cycle - 3) & mask)];
      assert(x6803 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6804 = args[2][216 * steps + ((cycle - 3) & mask)];
      assert(x6804 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6805 = args[2][217 * steps + ((cycle - 3) & mask)];
      assert(x6805 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6806 = args[2][218 * steps + ((cycle - 3) & mask)];
      assert(x6806 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6807 = args[2][219 * steps + ((cycle - 3) & mask)];
      assert(x6807 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6808 = args[2][220 * steps + ((cycle - 3) & mask)];
      assert(x6808 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6809 = args[2][221 * steps + ((cycle - 3) & mask)];
      assert(x6809 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6810 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6810 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6811 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x6811 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6812 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x6812 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6813 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x6813 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6814 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x6814 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6815 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x6815 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6816 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x6816 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6817 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x6817 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6818 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x6818 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6819 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x6819 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6820 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x6820 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6821 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x6821 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6822 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x6822 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6823 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x6823 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6824 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x6824 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6825 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x6825 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6826 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x6826 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6827 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x6827 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6828 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x6828 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6829 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x6829 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6830 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x6830 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6831 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x6831 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6832 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x6832 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6833 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x6833 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6834 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x6834 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6835 = args[2][215 * steps + ((cycle - 4) & mask)];
      assert(x6835 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6836 = args[2][216 * steps + ((cycle - 4) & mask)];
      assert(x6836 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6837 = args[2][217 * steps + ((cycle - 4) & mask)];
      assert(x6837 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6838 = args[2][218 * steps + ((cycle - 4) & mask)];
      assert(x6838 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6839 = args[2][219 * steps + ((cycle - 4) & mask)];
      assert(x6839 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6840 = args[2][220 * steps + ((cycle - 4) & mask)];
      assert(x6840 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6841 = args[2][221 * steps + ((cycle - 4) & mask)];
      assert(x6841 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6842 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x6842 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6843 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x6843 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6844 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x6844 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x6845 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x6845 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6846 = x6843 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6847 = x6842 + x6846;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6848 = x6845 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6849 = x6844 + x6848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6850 = x6599 + x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6851 = x6599 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6852 = x6851 * x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6853 = x6850 - x6852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6854 = x6600 + x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6855 = x6600 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6856 = x6855 * x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6857 = x6854 - x6856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6858 = x6601 + x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6859 = x6601 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6860 = x6859 * x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6861 = x6858 - x6860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6862 = x6602 + x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6863 = x6602 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6864 = x6863 * x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6865 = x6862 - x6864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6866 = x6603 + x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6867 = x6603 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6868 = x6867 * x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6869 = x6866 - x6868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6870 = x6604 + x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6871 = x6604 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6872 = x6871 * x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6873 = x6870 - x6872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6874 = x6605 + x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6875 = x6605 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6876 = x6875 * x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6877 = x6874 - x6876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6878 = x6606 + x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6879 = x6606 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6880 = x6879 * x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6881 = x6878 - x6880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6882 = x6607 + x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6883 = x6607 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6884 = x6883 * x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6885 = x6882 - x6884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6886 = x6608 + x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6887 = x6608 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6888 = x6887 * x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6889 = x6886 - x6888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6890 = x6609 + x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6891 = x6609 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6892 = x6891 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6893 = x6890 - x6892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6894 = x6610 + x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6895 = x6610 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6896 = x6895 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6897 = x6894 - x6896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6898 = x6611 + x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6899 = x6611 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6900 = x6899 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6901 = x6898 - x6900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6902 = x6612 + x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6903 = x6612 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6904 = x6903 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6905 = x6902 - x6904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6906 = x6613 + x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6907 = x6613 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6908 = x6907 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6909 = x6906 - x6908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6910 = x6614 + x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6911 = x6614 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6912 = x6911 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6913 = x6910 - x6912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6914 = x6615 + x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6915 = x6615 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6916 = x6915 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6917 = x6914 - x6916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6918 = x6616 + x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6919 = x6616 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6920 = x6919 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6921 = x6918 - x6920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6922 = x6617 + x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6923 = x6617 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6924 = x6923 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6925 = x6922 - x6924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6926 = x6586 + x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6927 = x6586 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6928 = x6927 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6929 = x6926 - x6928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6930 = x6587 + x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6931 = x6587 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6932 = x6931 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6933 = x6930 - x6932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6934 = x6588 + x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6935 = x6588 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6936 = x6935 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6937 = x6934 - x6936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6938 = x6589 + x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6939 = x6589 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6940 = x6939 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6941 = x6938 - x6940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6942 = x6590 + x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6943 = x6590 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6944 = x6943 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6945 = x6942 - x6944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6946 = x6591 + x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6947 = x6591 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6948 = x6947 * x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6949 = x6946 - x6948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6950 = x6592 + x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6951 = x6592 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6952 = x6951 * x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6953 = x6950 - x6952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6954 = x6593 + x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6955 = x6593 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6956 = x6955 * x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6957 = x6954 - x6956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6958 = x6594 + x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6959 = x6594 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6960 = x6959 * x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6961 = x6958 - x6960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6962 = x6595 + x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6963 = x6595 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6964 = x6963 * x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6965 = x6962 - x6964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6966 = x6596 + x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6967 = x6596 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6968 = x6967 * x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6969 = x6966 - x6968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6970 = x6597 + x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6971 = x6597 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6972 = x6971 * x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6973 = x6970 - x6972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6974 = x6598 + x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6975 = x6598 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6976 = x6975 * x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6977 = x6974 - x6976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6978 = x6588 + x6853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6979 = x6935 * x6853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6980 = x6978 - x6979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6981 = x6589 + x6857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6982 = x6939 * x6857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6983 = x6981 - x6982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6984 = x6590 + x6861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6985 = x6943 * x6861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6986 = x6984 - x6985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6987 = x6591 + x6865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6988 = x6947 * x6865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6989 = x6987 - x6988;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6990 = x6592 + x6869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6991 = x6951 * x6869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6992 = x6990 - x6991;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6993 = x6593 + x6873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6994 = x6955 * x6873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6995 = x6993 - x6994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6996 = x6594 + x6877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6997 = x6959 * x6877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6998 = x6996 - x6997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6999 = x6595 + x6881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7000 = x6963 * x6881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7001 = x6999 - x7000;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7002 = x6596 + x6885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7003 = x6967 * x6885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7004 = x7002 - x7003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7005 = x6597 + x6889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7006 = x6971 * x6889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7007 = x7005 - x7006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7008 = x6598 + x6893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7009 = x6975 * x6893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7010 = x7008 - x7009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7011 = x6599 + x6897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7012 = x6851 * x6897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7013 = x7011 - x7012;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7014 = x6600 + x6901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7015 = x6855 * x6901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7016 = x7014 - x7015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7017 = x6601 + x6905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7018 = x6859 * x6905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7019 = x7017 - x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7020 = x6602 + x6909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7021 = x6863 * x6909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7022 = x7020 - x7021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7023 = x6603 + x6913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7024 = x6867 * x6913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7025 = x7023 - x7024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7026 = x6604 + x6917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7027 = x6871 * x6917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7028 = x7026 - x7027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7029 = x6605 + x6921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7030 = x6875 * x6921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7031 = x7029 - x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7032 = x6606 + x6925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7033 = x6879 * x6925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7034 = x7032 - x7033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7035 = x6607 + x6929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7036 = x6883 * x6929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7037 = x7035 - x7036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7038 = x6608 + x6933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7039 = x6887 * x6933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7040 = x7038 - x7039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7041 = x6609 + x6937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7042 = x6891 * x6937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7043 = x7041 - x7042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7044 = x6610 + x6941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7045 = x6895 * x6941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7046 = x7044 - x7045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7047 = x6611 + x6945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7048 = x6899 * x6945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7049 = x7047 - x7048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7050 = x6612 + x6949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7051 = x6903 * x6949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7052 = x7050 - x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7053 = x6613 + x6953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7054 = x6907 * x6953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7055 = x7053 - x7054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7056 = x6614 + x6957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7057 = x6911 * x6957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7058 = x7056 - x7057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7059 = x6615 + x6961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7060 = x6915 * x6961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7061 = x7059 - x7060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7062 = x6616 + x6965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7063 = x6919 * x6965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7064 = x7062 - x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7065 = x6617 + x6969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7066 = x6923 * x6969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7067 = x7065 - x7066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7068 = x6586 + x6973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7069 = x6927 * x6973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7070 = x7068 - x7069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7071 = x6587 + x6977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7072 = x6931 * x6977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7073 = x7071 - x7072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7074 = x6725 + x6739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7075 = x6725 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7076 = x7075 * x6739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7077 = x7074 - x7076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7078 = x6726 + x6740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7079 = x6726 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7080 = x7079 * x6740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7081 = x7078 - x7080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7082 = x6727 + x6741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7083 = x6727 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7084 = x7083 * x6741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7085 = x7082 - x7084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7086 = x6728 + x6742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7087 = x6728 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7088 = x7087 * x6742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7089 = x7086 - x7088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7090 = x6729 + x6743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7091 = x6729 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7092 = x7091 * x6743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7093 = x7090 - x7092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7094 = x6730 + x6744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7095 = x6730 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7096 = x7095 * x6744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7097 = x7094 - x7096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7098 = x6731 + x6745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7099 = x6731 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7100 = x7099 * x6745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7101 = x7098 - x7100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7102 = x6732 + x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7103 = x6732 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7104 = x7103 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7105 = x7102 - x7104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7106 = x6733 + x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7107 = x6733 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7108 = x7107 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7109 = x7106 - x7108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7110 = x6734 + x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7111 = x6734 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7112 = x7111 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7113 = x7110 - x7112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7114 = x6735 + x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7115 = x6735 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7116 = x7115 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7117 = x7114 - x7116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7118 = x6736 + x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7119 = x6736 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7120 = x7119 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7121 = x7118 - x7120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7122 = x6737 + x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7123 = x6737 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7124 = x7123 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7125 = x7122 - x7124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7126 = x6738 + x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7127 = x6738 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7128 = x7127 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7129 = x7126 - x7128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7130 = x6739 + x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7131 = x6739 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7132 = x7131 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7133 = x7130 - x7132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7134 = x6740 + x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7135 = x6740 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7136 = x7135 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7137 = x7134 - x7136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7138 = x6741 + x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7139 = x6741 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7140 = x7139 * x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7141 = x7138 - x7140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7142 = x6742 + x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7143 = x6742 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7144 = x7143 * x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7145 = x7142 - x7144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7146 = x6743 + x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7147 = x6743 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7148 = x7147 * x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7149 = x7146 - x7148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7150 = x6744 + x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7151 = x6744 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7152 = x7151 * x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7153 = x7150 - x7152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7154 = x6745 + x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7155 = x6745 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7156 = x7155 * x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7157 = x7154 - x7156;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7158 = x6714 + x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7159 = x6714 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7160 = x7159 * x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7161 = x7158 - x7160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7162 = x6715 + x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7163 = x6715 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7164 = x7163 * x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7165 = x7162 - x7164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7166 = x6716 + x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7167 = x6716 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7168 = x7167 * x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7169 = x7166 - x7168;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7170 = x6717 + x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7171 = x6717 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7172 = x7171 * x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7173 = x7170 - x7172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x6718 + x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7175 = x6718 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7176 = x7175 * x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7177 = x7174 - x7176;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7178 = x6719 + x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7179 = x6719 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7180 = x7179 * x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7181 = x7178 - x7180;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7182 = x6720 + x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7183 = x6720 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7184 = x7183 * x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7185 = x7182 - x7184;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x6721 + x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7187 = x6721 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7188 = x7187 * x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7189 = x7186 - x7188;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7190 = x6722 + x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7191 = x6722 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7192 = x7191 * x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7193 = x7190 - x7192;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7194 = x6723 + x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7195 = x6723 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7196 = x7195 * x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7197 = x7194 - x7196;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7198 = x6724 + x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7199 = x6724 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7200 = x7199 * x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7201 = x7198 - x7200;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7202 = x6720 + x7077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7203 = x7183 * x7077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7204 = x7202 - x7203;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7205 = x6721 + x7081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7206 = x7187 * x7081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7207 = x7205 - x7206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7208 = x6722 + x7085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7209 = x7191 * x7085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7210 = x7208 - x7209;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7211 = x6723 + x7089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7212 = x7195 * x7089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7213 = x7211 - x7212;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7214 = x6724 + x7093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7215 = x7199 * x7093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7216 = x7214 - x7215;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7217 = x6725 + x7097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7218 = x7075 * x7097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7219 = x7217 - x7218;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7220 = x6726 + x7101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7221 = x7079 * x7101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7222 = x7220 - x7221;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7223 = x6727 + x7105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7224 = x7083 * x7105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7225 = x7223 - x7224;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7226 = x6728 + x7109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7227 = x7087 * x7109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7228 = x7226 - x7227;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7229 = x6729 + x7113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7230 = x7091 * x7113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7231 = x7229 - x7230;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7232 = x6730 + x7117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7233 = x7095 * x7117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7234 = x7232 - x7233;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7235 = x6731 + x7121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7236 = x7099 * x7121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7237 = x7235 - x7236;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7238 = x6732 + x7125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7239 = x7103 * x7125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7240 = x7238 - x7239;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7241 = x6733 + x7129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7242 = x7107 * x7129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7243 = x7241 - x7242;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7244 = x6734 + x7133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7245 = x7111 * x7133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7246 = x7244 - x7245;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7247 = x6735 + x7137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7248 = x7115 * x7137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7249 = x7247 - x7248;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7250 = x6736 + x7141;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7251 = x7119 * x7141;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7252 = x7250 - x7251;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7253 = x6737 + x7145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7254 = x7123 * x7145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7255 = x7253 - x7254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7256 = x6738 + x7149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7257 = x7127 * x7149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7258 = x7256 - x7257;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7259 = x6739 + x7153;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7260 = x7131 * x7153;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7261 = x7259 - x7260;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7262 = x6740 + x7157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7263 = x7135 * x7157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7264 = x7262 - x7263;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7265 = x6741 + x7161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7266 = x7139 * x7161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7267 = x7265 - x7266;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7268 = x6742 + x7165;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7269 = x7143 * x7165;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7270 = x7268 - x7269;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7271 = x6743 + x7169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7272 = x7147 * x7169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7273 = x7271 - x7272;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7274 = x6744 + x7173;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7275 = x7151 * x7173;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7276 = x7274 - x7275;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7277 = x6745 + x7177;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7278 = x7155 * x7177;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7279 = x7277 - x7278;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7280 = x6714 + x7181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7281 = x7159 * x7181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7282 = x7280 - x7281;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7283 = x6715 + x7185;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7284 = x7163 * x7185;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7285 = x7283 - x7284;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7286 = x6716 + x7189;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7287 = x7167 * x7189;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7288 = x7286 - x7287;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7289 = x6717 + x7193;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7290 = x7171 * x7193;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7291 = x7289 - x7290;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7292 = x6718 + x7197;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7293 = x7175 * x7197;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7294 = x7292 - x7293;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7295 = x6719 + x7201;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7296 = x7179 * x7201;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7297 = x7295 - x7296;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7298 = x6811 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7299 = x6810 + x7298;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7300 = x6812 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7301 = x7299 + x7300;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7302 = x6813 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7303 = x7301 + x7302;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7304 = x6814 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7305 = x7303 + x7304;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7306 = x6815 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7307 = x7305 + x7306;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7308 = x6816 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7309 = x7307 + x7308;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7310 = x6817 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7311 = x7309 + x7310;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7312 = x6818 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7313 = x7311 + x7312;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7314 = x6819 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7315 = x7313 + x7314;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7316 = x6820 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7317 = x7315 + x7316;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7318 = x6821 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7319 = x7317 + x7318;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7320 = x6822 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7321 = x7319 + x7320;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7322 = x6823 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7323 = x7321 + x7322;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7324 = x6824 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7325 = x7323 + x7324;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7326 = x6825 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7327 = x7325 + x7326;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7328 = x6827 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7329 = x6826 + x7328;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7330 = x6828 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7331 = x7329 + x7330;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7332 = x6829 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7333 = x7331 + x7332;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7334 = x6830 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7335 = x7333 + x7334;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7336 = x6831 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7337 = x7335 + x7336;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7338 = x6832 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7339 = x7337 + x7338;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7340 = x6833 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7341 = x7339 + x7340;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7342 = x6834 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7343 = x7341 + x7342;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7344 = x6835 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7345 = x7343 + x7344;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7346 = x6836 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7347 = x7345 + x7346;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7348 = x6837 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7349 = x7347 + x7348;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7350 = x6838 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7351 = x7349 + x7350;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7352 = x6839 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7353 = x7351 + x7352;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7354 = x6840 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7355 = x7353 + x7354;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7356 = x6841 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7357 = x7355 + x7356;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7358 = x6714 * x6746;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7359 = x93 - x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7360 = x7359 * x6778;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7361 = x7358 + x7360;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7362 = x6715 * x6747;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7363 = x93 - x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7364 = x7363 * x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7365 = x7362 + x7364;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7366 = x6716 * x6748;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7367 = x93 - x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7368 = x7367 * x6780;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7369 = x7366 + x7368;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7370 = x6717 * x6749;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7371 = x93 - x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7372 = x7371 * x6781;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7373 = x7370 + x7372;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7374 = x6718 * x6750;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7375 = x93 - x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7376 = x7375 * x6782;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7377 = x7374 + x7376;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7378 = x6719 * x6751;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7379 = x93 - x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7380 = x7379 * x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7381 = x7378 + x7380;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7382 = x6720 * x6752;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7383 = x93 - x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7384 = x7383 * x6784;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7385 = x7382 + x7384;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7386 = x6721 * x6753;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7387 = x93 - x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7388 = x7387 * x6785;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7389 = x7386 + x7388;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7390 = x6722 * x6754;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7391 = x93 - x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7392 = x7391 * x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7393 = x7390 + x7392;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7394 = x6723 * x6755;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7395 = x93 - x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7396 = x7395 * x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7397 = x7394 + x7396;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7398 = x6724 * x6756;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7399 = x93 - x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7400 = x7399 * x6788;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7401 = x7398 + x7400;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7402 = x6725 * x6757;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7403 = x93 - x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7404 = x7403 * x6789;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7405 = x7402 + x7404;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7406 = x6726 * x6758;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7407 = x93 - x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7408 = x7407 * x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7409 = x7406 + x7408;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7410 = x6727 * x6759;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7411 = x93 - x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7412 = x7411 * x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7413 = x7410 + x7412;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7414 = x6728 * x6760;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7415 = x93 - x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7416 = x7415 * x6792;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7417 = x7414 + x7416;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7418 = x6729 * x6761;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7419 = x93 - x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7420 = x7419 * x6793;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7421 = x7418 + x7420;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7422 = x6730 * x6762;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7423 = x93 - x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7424 = x7423 * x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7425 = x7422 + x7424;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7426 = x6731 * x6763;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7427 = x93 - x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7428 = x7427 * x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7429 = x7426 + x7428;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7430 = x6732 * x6764;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7431 = x93 - x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7432 = x7431 * x6796;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7433 = x7430 + x7432;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7434 = x6733 * x6765;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7435 = x93 - x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7436 = x7435 * x6797;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7437 = x7434 + x7436;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7438 = x6734 * x6766;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7439 = x93 - x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7440 = x7439 * x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7441 = x7438 + x7440;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7442 = x6735 * x6767;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7443 = x93 - x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7444 = x7443 * x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7445 = x7442 + x7444;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7446 = x6736 * x6768;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7447 = x93 - x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7448 = x7447 * x6800;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7449 = x7446 + x7448;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7450 = x6737 * x6769;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7451 = x93 - x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7452 = x7451 * x6801;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7453 = x7450 + x7452;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7454 = x6738 * x6770;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7455 = x93 - x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7456 = x7455 * x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7457 = x7454 + x7456;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7458 = x6739 * x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7459 = x93 - x6739;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7460 = x7459 * x6803;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7461 = x7458 + x7460;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7462 = x6740 * x6772;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7463 = x93 - x6740;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7464 = x7463 * x6804;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7465 = x7462 + x7464;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7466 = x6741 * x6773;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7467 = x93 - x6741;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7468 = x7467 * x6805;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7469 = x7466 + x7468;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7470 = x6742 * x6774;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7471 = x93 - x6742;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7472 = x7471 * x6806;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7473 = x7470 + x7472;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7474 = x6743 * x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7475 = x93 - x6743;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7476 = x7475 * x6807;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7477 = x7474 + x7476;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7478 = x6744 * x6776;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7479 = x93 - x6744;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7480 = x7479 * x6808;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7481 = x7478 + x7480;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7482 = x6745 * x6777;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7483 = x93 - x6745;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7484 = x7483 * x6809;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7485 = x7482 + x7484;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7486 = x7365 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7487 = x7361 + x7486;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7488 = x7369 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7489 = x7487 + x7488;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7490 = x7373 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7491 = x7489 + x7490;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7492 = x7377 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7493 = x7491 + x7492;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7494 = x7381 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7495 = x7493 + x7494;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7496 = x7385 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7497 = x7495 + x7496;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7498 = x7389 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7499 = x7497 + x7498;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7500 = x7393 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7501 = x7499 + x7500;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7502 = x7397 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7503 = x7501 + x7502;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7504 = x7401 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7505 = x7503 + x7504;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7506 = x7405 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7507 = x7505 + x7506;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7508 = x7409 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7509 = x7507 + x7508;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7510 = x7413 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7511 = x7509 + x7510;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7512 = x7417 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7513 = x7511 + x7512;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7514 = x7421 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7515 = x7513 + x7514;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7516 = x7429 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7517 = x7425 + x7516;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7518 = x7433 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7519 = x7517 + x7518;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7520 = x7437 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7521 = x7519 + x7520;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7522 = x7441 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7523 = x7521 + x7522;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7524 = x7445 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7525 = x7523 + x7524;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7526 = x7449 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7527 = x7525 + x7526;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7528 = x7453 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7529 = x7527 + x7528;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7530 = x7457 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7531 = x7529 + x7530;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7532 = x7461 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7533 = x7531 + x7532;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7534 = x7465 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7535 = x7533 + x7534;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7536 = x7469 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7537 = x7535 + x7536;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7538 = x7473 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7539 = x7537 + x7538;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7540 = x7477 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7541 = x7539 + x7540;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7542 = x7481 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7543 = x7541 + x7542;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7544 = x7485 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7545 = x7543 + x7544;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7546 = x7207 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7547 = x7204 + x7546;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7548 = x7210 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7549 = x7547 + x7548;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7550 = x7213 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7551 = x7549 + x7550;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7552 = x7216 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7553 = x7551 + x7552;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7554 = x7219 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7555 = x7553 + x7554;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7556 = x7222 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7557 = x7555 + x7556;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7558 = x7225 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7559 = x7557 + x7558;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7560 = x7228 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7561 = x7559 + x7560;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7562 = x7231 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7563 = x7561 + x7562;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7564 = x7234 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7565 = x7563 + x7564;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7566 = x7237 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7567 = x7565 + x7566;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7568 = x7240 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7569 = x7567 + x7568;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7570 = x7243 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7571 = x7569 + x7570;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7572 = x7246 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7573 = x7571 + x7572;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7574 = x7249 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7575 = x7573 + x7574;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7576 = x7255 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7577 = x7252 + x7576;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7578 = x7258 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7579 = x7577 + x7578;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7580 = x7261 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7581 = x7579 + x7580;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7582 = x7264 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7583 = x7581 + x7582;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7584 = x7267 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7585 = x7583 + x7584;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7586 = x7270 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7587 = x7585 + x7586;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7588 = x7273 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7589 = x7587 + x7588;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7590 = x7276 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7591 = x7589 + x7590;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7592 = x7279 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7593 = x7591 + x7592;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7594 = x7282 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7595 = x7593 + x7594;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7596 = x7285 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7597 = x7595 + x7596;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7598 = x7288 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7599 = x7597 + x7598;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7600 = x7291 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7601 = x7599 + x7600;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7602 = x7294 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7603 = x7601 + x7602;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7604 = x7297 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7605 = x7603 + x7604;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7606 = x7515 + x7575;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7607 = x7545 + x7605;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7608 = x7327 + x7606;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7609 = x7357 + x7607;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7610 = x6847 + x7608;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7611 = x6849 + x7609;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7612 = x6502 + x7610;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7613 = x6583 + x7611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7614 = x6586 * x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7615 = x93 - x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7616 = x7614 * x7615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7617 = x93 - x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7618 = x6586 * x7617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7619 = x7618 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7620 = x7616 + x7619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7621 = x93 - x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7622 = x7621 * x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7623 = x7622 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7624 = x7620 + x7623;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7625 = x7614 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7626 = x7624 + x7625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7627 = x6587 * x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7628 = x93 - x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7629 = x7627 * x7628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7630 = x93 - x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7631 = x6587 * x7630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7632 = x7631 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7633 = x7629 + x7632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7634 = x93 - x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7635 = x7634 * x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7636 = x7635 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7637 = x7633 + x7636;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7638 = x7627 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7639 = x7637 + x7638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7640 = x6588 * x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7641 = x93 - x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7642 = x7640 * x7641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7643 = x93 - x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7644 = x6588 * x7643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7645 = x7644 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7646 = x7642 + x7645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7647 = x93 - x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7648 = x7647 * x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7649 = x7648 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7650 = x7646 + x7649;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7651 = x7640 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7652 = x7650 + x7651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7653 = x6589 * x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7654 = x93 - x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7655 = x7653 * x7654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7656 = x93 - x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7657 = x6589 * x7656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7658 = x7657 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7659 = x7655 + x7658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7660 = x93 - x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7661 = x7660 * x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7662 = x7661 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7663 = x7659 + x7662;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7664 = x7653 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7665 = x7663 + x7664;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7666 = x6590 * x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7667 = x93 - x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7668 = x7666 * x7667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7669 = x93 - x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7670 = x6590 * x7669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7671 = x7670 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7672 = x7668 + x7671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7673 = x93 - x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7674 = x7673 * x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7675 = x7674 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7676 = x7672 + x7675;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7677 = x7666 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7678 = x7676 + x7677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7679 = x6591 * x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7680 = x93 - x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7681 = x7679 * x7680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7682 = x93 - x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7683 = x6591 * x7682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7684 = x7683 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7685 = x7681 + x7684;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7686 = x93 - x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7687 = x7686 * x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7688 = x7687 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7689 = x7685 + x7688;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7690 = x7679 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7691 = x7689 + x7690;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7692 = x6592 * x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7693 = x93 - x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7694 = x7692 * x7693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7695 = x93 - x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7696 = x6592 * x7695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7697 = x7696 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7698 = x7694 + x7697;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7699 = x93 - x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7700 = x7699 * x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7701 = x7700 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7702 = x7698 + x7701;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7703 = x7692 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7704 = x7702 + x7703;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7705 = x6593 * x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7706 = x93 - x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7707 = x7705 * x7706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7708 = x93 - x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7709 = x6593 * x7708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7710 = x7709 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7711 = x7707 + x7710;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7712 = x93 - x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7713 = x7712 * x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7714 = x7713 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7715 = x7711 + x7714;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7716 = x7705 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7717 = x7715 + x7716;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7718 = x6594 * x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7719 = x93 - x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7720 = x7718 * x7719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7721 = x93 - x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7722 = x6594 * x7721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7723 = x7722 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7724 = x7720 + x7723;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7725 = x93 - x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7726 = x7725 * x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7727 = x7726 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7728 = x7724 + x7727;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7729 = x7718 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7730 = x7728 + x7729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7731 = x6595 * x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7732 = x93 - x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7733 = x7731 * x7732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7734 = x93 - x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7735 = x6595 * x7734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7736 = x7735 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7737 = x7733 + x7736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7738 = x93 - x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7739 = x7738 * x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7740 = x7739 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7741 = x7737 + x7740;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7742 = x7731 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7743 = x7741 + x7742;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7744 = x6596 * x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7745 = x93 - x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7746 = x7744 * x7745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7747 = x93 - x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7748 = x6596 * x7747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7749 = x7748 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7750 = x7746 + x7749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7751 = x93 - x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7752 = x7751 * x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7753 = x7752 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7754 = x7750 + x7753;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7755 = x7744 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7756 = x7754 + x7755;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7757 = x6597 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7758 = x93 - x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7759 = x7757 * x7758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7760 = x93 - x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7761 = x6597 * x7760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7762 = x7761 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7763 = x7759 + x7762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7764 = x93 - x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7765 = x7764 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7766 = x7765 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7767 = x7763 + x7766;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7768 = x7757 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7769 = x7767 + x7768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7770 = x6598 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7771 = x93 - x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7772 = x7770 * x7771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7773 = x93 - x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7774 = x6598 * x7773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7775 = x7774 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7776 = x7772 + x7775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7777 = x93 - x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7778 = x7777 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7779 = x7778 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7780 = x7776 + x7779;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7781 = x7770 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7782 = x7780 + x7781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7783 = x6599 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7784 = x93 - x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7785 = x7783 * x7784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7786 = x93 - x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7787 = x6599 * x7786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7788 = x7787 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7789 = x7785 + x7788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7790 = x93 - x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7791 = x7790 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7792 = x7791 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7793 = x7789 + x7792;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7794 = x7783 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7795 = x7793 + x7794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7796 = x6600 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7797 = x93 - x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7798 = x7796 * x7797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7799 = x93 - x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7800 = x6600 * x7799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7801 = x7800 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7802 = x7798 + x7801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7803 = x93 - x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7804 = x7803 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7805 = x7804 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7806 = x7802 + x7805;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7807 = x7796 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7808 = x7806 + x7807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7809 = x6601 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7810 = x93 - x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7811 = x7809 * x7810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7812 = x93 - x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7813 = x6601 * x7812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7814 = x7813 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7815 = x7811 + x7814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7816 = x93 - x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7817 = x7816 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7818 = x7817 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7819 = x7815 + x7818;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7820 = x7809 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7821 = x7819 + x7820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7822 = x6602 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7823 = x93 - x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7824 = x7822 * x7823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7825 = x93 - x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7826 = x6602 * x7825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7827 = x7826 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7828 = x7824 + x7827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7829 = x93 - x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7830 = x7829 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7831 = x7830 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7832 = x7828 + x7831;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7833 = x7822 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7834 = x7832 + x7833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7835 = x6603 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7836 = x93 - x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7837 = x7835 * x7836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7838 = x93 - x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7839 = x6603 * x7838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7840 = x7839 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7841 = x7837 + x7840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7842 = x93 - x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7843 = x7842 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7844 = x7843 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7845 = x7841 + x7844;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7846 = x7835 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7847 = x7845 + x7846;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7848 = x6604 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7849 = x93 - x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7850 = x7848 * x7849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7851 = x93 - x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7852 = x6604 * x7851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7853 = x7852 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7854 = x7850 + x7853;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7855 = x93 - x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7856 = x7855 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7857 = x7856 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7858 = x7854 + x7857;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7859 = x7848 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7860 = x7858 + x7859;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7861 = x6605 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7862 = x93 - x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7863 = x7861 * x7862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7864 = x93 - x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7865 = x6605 * x7864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7866 = x7865 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7867 = x7863 + x7866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7868 = x93 - x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7869 = x7868 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7870 = x7869 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7871 = x7867 + x7870;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7872 = x7861 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7873 = x7871 + x7872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7874 = x6606 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7875 = x93 - x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7876 = x7874 * x7875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7877 = x93 - x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7878 = x6606 * x7877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7879 = x7878 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7880 = x7876 + x7879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7881 = x93 - x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7882 = x7881 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7883 = x7882 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7884 = x7880 + x7883;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7885 = x7874 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7886 = x7884 + x7885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7887 = x6607 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7888 = x93 - x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7889 = x7887 * x7888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7890 = x93 - x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7891 = x6607 * x7890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7892 = x7891 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7893 = x7889 + x7892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7894 = x93 - x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7895 = x7894 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7896 = x7895 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7897 = x7893 + x7896;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7898 = x7887 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7899 = x7897 + x7898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7900 = x6608 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7901 = x93 - x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7902 = x7900 * x7901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7903 = x93 - x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7904 = x6608 * x7903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7905 = x7904 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7906 = x7902 + x7905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7907 = x93 - x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7908 = x7907 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7909 = x7908 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7910 = x7906 + x7909;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7911 = x7900 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7912 = x7910 + x7911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7913 = x6609 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7914 = x93 - x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7915 = x7913 * x7914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7916 = x93 - x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7917 = x6609 * x7916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7918 = x7917 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7919 = x7915 + x7918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7920 = x93 - x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7921 = x7920 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7922 = x7921 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7923 = x7919 + x7922;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7924 = x7913 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7925 = x7923 + x7924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7926 = x6610 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7927 = x93 - x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7928 = x7926 * x7927;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7929 = x93 - x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7930 = x6610 * x7929;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7931 = x7930 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7932 = x7928 + x7931;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7933 = x93 - x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7934 = x7933 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7935 = x7934 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7936 = x7932 + x7935;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7937 = x7926 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7938 = x7936 + x7937;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7939 = x6611 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7940 = x93 - x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7941 = x7939 * x7940;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7942 = x93 - x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7943 = x6611 * x7942;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7944 = x7943 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7945 = x7941 + x7944;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7946 = x93 - x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7947 = x7946 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7948 = x7947 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7949 = x7945 + x7948;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7950 = x7939 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7951 = x7949 + x7950;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7952 = x6612 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7953 = x93 - x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7954 = x7952 * x7953;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7955 = x93 - x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7956 = x6612 * x7955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7957 = x7956 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7958 = x7954 + x7957;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7959 = x93 - x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7960 = x7959 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7961 = x7960 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7962 = x7958 + x7961;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7963 = x7952 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7964 = x7962 + x7963;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7965 = x6613 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7966 = x93 - x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7967 = x7965 * x7966;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7968 = x93 - x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7969 = x6613 * x7968;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7970 = x7969 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7971 = x7967 + x7970;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7972 = x93 - x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7973 = x7972 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7974 = x7973 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7975 = x7971 + x7974;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7976 = x7965 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7977 = x7975 + x7976;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7978 = x6614 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7979 = x93 - x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7980 = x7978 * x7979;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7981 = x93 - x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7982 = x6614 * x7981;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7983 = x7982 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7984 = x7980 + x7983;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7985 = x93 - x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7986 = x7985 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7987 = x7986 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7988 = x7984 + x7987;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7989 = x7978 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7990 = x7988 + x7989;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7991 = x6615 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7992 = x93 - x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7993 = x7991 * x7992;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7994 = x93 - x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7995 = x6615 * x7994;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7996 = x7995 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7997 = x7993 + x7996;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7998 = x93 - x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7999 = x7998 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8000 = x7999 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8001 = x7997 + x8000;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8002 = x7991 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8003 = x8001 + x8002;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8004 = x6616 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8005 = x93 - x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8006 = x8004 * x8005;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8007 = x93 - x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8008 = x6616 * x8007;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8009 = x8008 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8010 = x8006 + x8009;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8011 = x93 - x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8012 = x8011 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8013 = x8012 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8014 = x8010 + x8013;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8015 = x8004 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8016 = x8014 + x8015;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8017 = x6617 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8018 = x93 - x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8019 = x8017 * x8018;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8020 = x93 - x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8021 = x6617 * x8020;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8022 = x8021 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8023 = x8019 + x8022;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8024 = x93 - x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8025 = x8024 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8026 = x8025 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8027 = x8023 + x8026;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8028 = x8017 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8029 = x8027 + x8028;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8030 = x7639 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8031 = x7626 + x8030;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8032 = x7652 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8033 = x8031 + x8032;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8034 = x7665 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8035 = x8033 + x8034;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8036 = x7678 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8037 = x8035 + x8036;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8038 = x7691 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8039 = x8037 + x8038;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8040 = x7704 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8041 = x8039 + x8040;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8042 = x7717 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8043 = x8041 + x8042;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8044 = x7730 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8045 = x8043 + x8044;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8046 = x7743 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8047 = x8045 + x8046;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8048 = x7756 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8049 = x8047 + x8048;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8050 = x7769 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8051 = x8049 + x8050;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8052 = x7782 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8053 = x8051 + x8052;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8054 = x7795 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8055 = x8053 + x8054;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8056 = x7808 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8057 = x8055 + x8056;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8058 = x7821 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8059 = x8057 + x8058;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8060 = x7847 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8061 = x7834 + x8060;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8062 = x7860 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8063 = x8061 + x8062;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8064 = x7873 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8065 = x8063 + x8064;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8066 = x7886 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8067 = x8065 + x8066;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8068 = x7899 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8069 = x8067 + x8068;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8070 = x7912 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8071 = x8069 + x8070;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8072 = x7925 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8073 = x8071 + x8072;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8074 = x7938 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8075 = x8073 + x8074;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8076 = x7951 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8077 = x8075 + x8076;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8078 = x7964 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8079 = x8077 + x8078;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8080 = x7977 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8081 = x8079 + x8080;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8082 = x7990 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8083 = x8081 + x8082;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8084 = x8003 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8085 = x8083 + x8084;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8086 = x8016 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8087 = x8085 + x8086;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8088 = x8029 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8089 = x8087 + x8088;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8090 = x6983 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8091 = x6980 + x8090;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8092 = x6986 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8093 = x8091 + x8092;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8094 = x6989 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8095 = x8093 + x8094;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8096 = x6992 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8097 = x8095 + x8096;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8098 = x6995 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8099 = x8097 + x8098;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8100 = x6998 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8101 = x8099 + x8100;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8102 = x7001 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8103 = x8101 + x8102;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8104 = x7004 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8105 = x8103 + x8104;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8106 = x7007 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8107 = x8105 + x8106;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8108 = x7010 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8109 = x8107 + x8108;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8110 = x7013 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8111 = x8109 + x8110;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8112 = x7016 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8113 = x8111 + x8112;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8114 = x7019 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8115 = x8113 + x8114;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8116 = x7022 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8117 = x8115 + x8116;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8118 = x7025 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8119 = x8117 + x8118;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8120 = x7031 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8121 = x7028 + x8120;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8122 = x7034 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8123 = x8121 + x8122;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8124 = x7037 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8125 = x8123 + x8124;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8126 = x7040 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8127 = x8125 + x8126;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8128 = x7043 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8129 = x8127 + x8128;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8130 = x7046 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8131 = x8129 + x8130;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8132 = x7049 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8133 = x8131 + x8132;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8134 = x7052 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8135 = x8133 + x8134;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8136 = x7055 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8137 = x8135 + x8136;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8138 = x7058 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8139 = x8137 + x8138;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8140 = x7061 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8141 = x8139 + x8140;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8142 = x7064 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8143 = x8141 + x8142;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8144 = x7067 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8145 = x8143 + x8144;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8146 = x7070 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8147 = x8145 + x8146;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8148 = x7073 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8149 = x8147 + x8148;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8150 = x8059 + x8119;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8151 = x8089 + x8149;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8152 = x7612 + x8150;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8153 = x7613 + x8151;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8154 = x6683 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8155 = x6682 + x8154;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8156 = x6684 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8157 = x8155 + x8156;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8158 = x6685 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8159 = x8157 + x8158;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8160 = x6686 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8161 = x8159 + x8160;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8162 = x6687 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8163 = x8161 + x8162;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8164 = x6688 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8165 = x8163 + x8164;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8166 = x6689 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8167 = x8165 + x8166;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8168 = x6690 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8169 = x8167 + x8168;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8170 = x6691 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8171 = x8169 + x8170;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8172 = x6692 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8173 = x8171 + x8172;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8174 = x6693 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8175 = x8173 + x8174;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8176 = x6694 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8177 = x8175 + x8176;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8178 = x6695 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8179 = x8177 + x8178;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8180 = x6696 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8181 = x8179 + x8180;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8182 = x6697 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8183 = x8181 + x8182;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8184 = x6699 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8185 = x6698 + x8184;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8186 = x6700 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8187 = x8185 + x8186;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8188 = x6701 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8189 = x8187 + x8188;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8190 = x6702 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8191 = x8189 + x8190;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8192 = x6703 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8193 = x8191 + x8192;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8194 = x6704 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8195 = x8193 + x8194;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8196 = x6705 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8197 = x8195 + x8196;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8198 = x6706 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8199 = x8197 + x8198;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8200 = x6707 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8201 = x8199 + x8200;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8202 = x6708 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8203 = x8201 + x8202;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8204 = x6709 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8205 = x8203 + x8204;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8206 = x6710 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8207 = x8205 + x8206;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8208 = x6711 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8209 = x8207 + x8208;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8210 = x6712 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8211 = x8209 + x8210;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8212 = x6713 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8213 = x8211 + x8212;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8214 = x7612 + x8183;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8215 = x7613 + x8213;
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8152);
        reg = x8152;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8214);
        reg = x8214;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8153);
        reg = x8153;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8215);
        reg = x8215;
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8216 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x8216 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8217 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8217 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8218 = Fp(x8216.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8218);
          reg = x8218;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8219 = Fp(x8216.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8220 = x8219 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8220);
          reg = x8220;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8221 = Fp(x8216.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8222 = x8221 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8222);
          reg = x8222;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8223 = Fp(x8216.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8224 = x8223 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8224);
          reg = x8224;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8225 = Fp(x8216.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8226 = x8225 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8226);
          reg = x8226;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8227 = Fp(x8216.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8228 = x8227 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8228);
          reg = x8228;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8229 = Fp(x8216.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8230 = x8229 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8230);
          reg = x8230;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8231 = Fp(x8216.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8232 = x8231 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8232);
          reg = x8232;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8233 = Fp(x8216.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8234 = x8233 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8234);
          reg = x8234;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8235 = Fp(x8216.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8236 = x8235 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8236);
          reg = x8236;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8237 = Fp(x8216.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8238 = x8237 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8238);
          reg = x8238;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8239 = Fp(x8216.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8240 = x8239 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8240);
          reg = x8240;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8241 = Fp(x8216.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8242 = x8241 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8242);
          reg = x8242;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8243 = Fp(x8216.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8244 = x8243 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8244);
          reg = x8244;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8245 = Fp(x8216.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8246 = x8245 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8246);
          reg = x8246;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8247 = Fp(x8216.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8248 = x8247 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8248);
          reg = x8248;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8249 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x8249 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8250 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8250 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8251 = x8250 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8252 = x8249 + x8251;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8253 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8253 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8254 = x8253 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8255 = x8252 + x8254;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8256 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8256 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8257 = x8256 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8258 = x8255 + x8257;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8259 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8259 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8260 = x8259 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8261 = x8258 + x8260;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8262 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8262 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8263 = x8262 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8264 = x8261 + x8263;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8265 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8265 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8266 = x8265 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8267 = x8264 + x8266;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8268 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8268 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8269 = x8268 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8270 = x8267 + x8269;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8271 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8271 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8272 = x8271 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8273 = x8270 + x8272;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8274 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8274 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8275 = x8274 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8276 = x8273 + x8275;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8277 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8277 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8278 = x8277 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8279 = x8276 + x8278;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8280 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8280 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8281 = x8280 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8282 = x8279 + x8281;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8283 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8283 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8284 = x8283 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8285 = x8282 + x8284;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8286 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8286 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8287 = x8286 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8288 = x8285 + x8287;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8289 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8289 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8290 = x8289 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8291 = x8288 + x8290;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8292 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8292 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8293 = x8292 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8294 = x8291 + x8293;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8295 = x8216 - x8294;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8296 = x8295 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8297 = Fp(x8296.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8297);
          reg = x8297;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8298 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8298 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8299 = x8296 - x8298;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8300 = x8299 * x74;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8301 = x93 - x8300;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8302 = x8300 * x8301;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8302 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8303 = x8217 + x8296;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8304 = Fp(x8303.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8304);
          reg = x8304;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8305 = Fp(x8303.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8306 = x8305 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8306);
          reg = x8306;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8307 = Fp(x8303.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8308 = x8307 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8308);
          reg = x8308;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8309 = Fp(x8303.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8310 = x8309 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8310);
          reg = x8310;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8311 = Fp(x8303.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8312 = x8311 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8312);
          reg = x8312;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8313 = Fp(x8303.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8314 = x8313 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8314);
          reg = x8314;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8315 = Fp(x8303.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8316 = x8315 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8316);
          reg = x8316;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8317 = Fp(x8303.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8318 = x8317 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8318);
          reg = x8318;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8319 = Fp(x8303.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8320 = x8319 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8320);
          reg = x8320;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8321 = Fp(x8303.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8322 = x8321 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8322);
          reg = x8322;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8323 = Fp(x8303.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8324 = x8323 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8324);
          reg = x8324;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8325 = Fp(x8303.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8326 = x8325 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8326);
          reg = x8326;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8327 = Fp(x8303.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8328 = x8327 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8328);
          reg = x8328;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8329 = Fp(x8303.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8330 = x8329 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8330);
          reg = x8330;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8331 = Fp(x8303.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8332 = x8331 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8332);
          reg = x8332;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8333 = Fp(x8303.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8334 = x8333 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8334);
          reg = x8334;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8335 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8335 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8336 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8336 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8337 = x8336 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8338 = x8335 + x8337;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8339 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8339 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8340 = x8339 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8341 = x8338 + x8340;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8342 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8342 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8343 = x8342 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8344 = x8341 + x8343;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8345 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8345 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8346 = x8345 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8347 = x8344 + x8346;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8348 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8348 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8349 = x8348 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8350 = x8347 + x8349;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8351 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8351 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8352 = x8351 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8353 = x8350 + x8352;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8354 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8354 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8355 = x8354 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8356 = x8353 + x8355;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8357 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8357 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8358 = x8357 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8359 = x8356 + x8358;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8360 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8360 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8361 = x8360 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8362 = x8359 + x8361;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8363 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8363 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8364 = x8363 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8365 = x8362 + x8364;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8366 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8366 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8367 = x8366 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8368 = x8365 + x8367;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8369 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8369 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8370 = x8369 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8371 = x8368 + x8370;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8372 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8372 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8373 = x8372 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8374 = x8371 + x8373;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8375 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8375 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8376 = x8375 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8377 = x8374 + x8376;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8378 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8378 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8379 = x8378 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8380 = x8377 + x8379;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8381 = x8303 - x8380;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8382 = x8381 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8383 = Fp(x8382.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8383);
          reg = x8383;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8384 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x8384 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8385 = x8382 - x8384;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8386 = x8385 * x74;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8387 = x93 - x8386;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8388 = x8386 * x8387;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8388 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8389 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8389 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8390 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8390 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8391 = Fp(x8389.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8391);
          reg = x8391;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8392 = Fp(x8389.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8393 = x8392 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8393);
          reg = x8393;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8394 = Fp(x8389.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8395 = x8394 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8395);
          reg = x8395;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8396 = Fp(x8389.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8397 = x8396 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8397);
          reg = x8397;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8398 = Fp(x8389.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8399 = x8398 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8399);
          reg = x8399;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8400 = Fp(x8389.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8401 = x8400 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8401);
          reg = x8401;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8402 = Fp(x8389.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8403 = x8402 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8403);
          reg = x8403;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8404 = Fp(x8389.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8405 = x8404 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8405);
          reg = x8405;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8406 = Fp(x8389.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8407 = x8406 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8407);
          reg = x8407;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8408 = Fp(x8389.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8409 = x8408 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8409);
          reg = x8409;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8410 = Fp(x8389.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8411 = x8410 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8411);
          reg = x8411;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8412 = Fp(x8389.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8413 = x8412 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8413);
          reg = x8413;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8414 = Fp(x8389.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8415 = x8414 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8415);
          reg = x8415;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8416 = Fp(x8389.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8417 = x8416 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8417);
          reg = x8417;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8418 = Fp(x8389.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8419 = x8418 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8419);
          reg = x8419;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8420 = Fp(x8389.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8421 = x8420 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8421);
          reg = x8421;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8422 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8422 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8423 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8423 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8424 = x8423 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8425 = x8422 + x8424;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8426 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8426 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8427 = x8426 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8428 = x8425 + x8427;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8429 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8429 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8430 = x8429 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8431 = x8428 + x8430;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8432 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8432 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8433 = x8432 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8434 = x8431 + x8433;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8435 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8435 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8436 = x8435 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8437 = x8434 + x8436;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8438 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8438 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8439 = x8438 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8440 = x8437 + x8439;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8441 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8441 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8442 = x8441 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8443 = x8440 + x8442;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8444 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8444 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8445 = x8444 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8446 = x8443 + x8445;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8447 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8447 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8448 = x8447 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8449 = x8446 + x8448;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8450 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8450 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8451 = x8450 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8452 = x8449 + x8451;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8453 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8453 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8454 = x8453 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8455 = x8452 + x8454;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8456 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8456 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8457 = x8456 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8458 = x8455 + x8457;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8459 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8459 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8460 = x8459 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8461 = x8458 + x8460;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8462 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8462 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8463 = x8462 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8464 = x8461 + x8463;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8465 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8465 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8466 = x8465 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8467 = x8464 + x8466;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8468 = x8389 - x8467;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8469 = x8468 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8470 = Fp(x8469.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8470);
          reg = x8470;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8471 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x8471 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8472 = x8469 - x8471;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8473 = x8472 * x74;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8474 = x93 - x8473;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8475 = x8473 * x8474;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8475 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8476 = x8390 + x8469;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8477 = Fp(x8476.asUInt32() & x93.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8477);
          reg = x8477;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8478 = Fp(x8476.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8479 = x8478 * x53;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8479);
          reg = x8479;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8480 = Fp(x8476.asUInt32() & x76.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8481 = x8480 * x74;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8481);
          reg = x8481;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8482 = Fp(x8476.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8483 = x8482 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8483);
          reg = x8483;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8484 = Fp(x8476.asUInt32() & x56.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8485 = x8484 * x55;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8485);
          reg = x8485;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8486 = Fp(x8476.asUInt32() & x58.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8487 = x8486 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8487);
          reg = x8487;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8488 = Fp(x8476.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8489 = x8488 * x51;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8489);
          reg = x8489;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8490 = Fp(x8476.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8491 = x8490 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8491);
          reg = x8491;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8492 = Fp(x8476.asUInt32() & x88.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8493 = x8492 * x87;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8493);
          reg = x8493;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8494 = Fp(x8476.asUInt32() & x19.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8495 = x8494 * x18;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8495);
          reg = x8495;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8496 = Fp(x8476.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8497 = x8496 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8497);
          reg = x8497;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8498 = Fp(x8476.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8499 = x8498 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8499);
          reg = x8499;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8500 = Fp(x8476.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8501 = x8500 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8501);
          reg = x8501;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8502 = Fp(x8476.asUInt32() & x12.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8503 = x8502 * x11;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8503);
          reg = x8503;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8504 = Fp(x8476.asUInt32() & x33.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8505 = x8504 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8505);
          reg = x8505;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8506 = Fp(x8476.asUInt32() & x9.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8507 = x8506 * x8;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8507);
          reg = x8507;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8508 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8508 != Fp::invalid());
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8509 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8509 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8510 = x8509 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8511 = x8508 + x8510;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8512 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8512 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8513 = x8512 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8514 = x8511 + x8513;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8515 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8515 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8516 = x8515 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8517 = x8514 + x8516;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8518 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8518 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8519 = x8518 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8520 = x8517 + x8519;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8521 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8521 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8522 = x8521 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8523 = x8520 + x8522;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8524 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8524 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8525 = x8524 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8526 = x8523 + x8525;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8527 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8527 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8528 = x8527 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8529 = x8526 + x8528;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8530 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x8530 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8531 = x8530 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8532 = x8529 + x8531;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8533 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x8533 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8534 = x8533 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8535 = x8532 + x8534;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8536 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x8536 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8537 = x8536 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8538 = x8535 + x8537;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8539 = args[2][217 * steps + ((cycle - 0) & mask)];
      assert(x8539 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8540 = x8539 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8541 = x8538 + x8540;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8542 = args[2][218 * steps + ((cycle - 0) & mask)];
      assert(x8542 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8543 = x8542 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8544 = x8541 + x8543;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8545 = args[2][219 * steps + ((cycle - 0) & mask)];
      assert(x8545 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8546 = x8545 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8547 = x8544 + x8546;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8548 = args[2][220 * steps + ((cycle - 0) & mask)];
      assert(x8548 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8549 = x8548 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8550 = x8547 + x8549;
      // loc("Top/Mux/5/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8551 = args[2][221 * steps + ((cycle - 0) & mask)];
      assert(x8551 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8552 = x8551 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8553 = x8550 + x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8554 = x8476 - x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8555 = x8554 * x7;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8556 = Fp(x8555.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8556);
          reg = x8556;
        }
      }
      // loc("Top/Mux/5/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8557 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8557 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8558 = x8555 - x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8559 = x8558 * x74;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8560 = x93 - x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8561 = x8559 * x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8561 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/5/OneHot/hot[11](Reg)"("./cirgen/components/mux.h":39:25))
    auto x8562 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x8562 != Fp::invalid());
    if (x8562 != 0) {
      // loc("Top/Mux/5/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8563 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x8563 != Fp::invalid());
      if (x8563 != 0) {
        // loc("Top/Mux/5/OneHot/hot[10](Reg)"("cirgen/circuit/rv32im/sha.cpp":341:72))
        auto x8564 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x8564 != Fp::invalid());
        if (x8564 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":344:7)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4);
            reg = x4;
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":345:40))
          auto x8565 = args[2][145 * steps + ((cycle - 1) & mask)];
          assert(x8565 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":345:7)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8565);
            reg = x8565;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":347:22)
        auto x8566 = x93 - x8564;
        if (x8566 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":349:7)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x75);
            reg = x75;
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":350:44))
          auto x8567 = args[2][145 * steps + ((cycle - 1) & mask)];
          assert(x8567 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":350:44)
          auto x8568 = x8567 - x93;
          // loc("cirgen/circuit/rv32im/sha.cpp":350:7)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8568);
            reg = x8568;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":353:18)
      auto x8569 = x93 - x8563;
      if (x8569 != 0) {
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x8570 = args[2][148 * steps + ((cycle - 1) & mask)];
        assert(x8570 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8570);
          reg = x8570;
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":356:40))
        auto x8571 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x8571 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":356:40)
        auto x8572 = x8571 - x93;
        // loc("cirgen/circuit/rv32im/sha.cpp":356:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8572);
          reg = x8572;
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":357:38))
        auto x8573 = args[2][145 * steps + ((cycle - 1) & mask)];
        assert(x8573 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":357:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8573);
          reg = x8573;
        }
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8574 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x8574 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8575 = (x8574 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8575);
          reg = x8575;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8576 = inv(x8574);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8576);
          reg = x8576;
        }
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8577 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x8577 != Fp::invalid());
      if (x8577 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8574 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8578 = x93 - x8577;
      if (x8578 != 0) {
        // loc("Top/Mux/5/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8579 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x8579 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8580 = x8574 * x8579;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8581 = x8580 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8581 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8582 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x8582 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":361:15)
      auto x8583 = x93 - x8582;
      if (x8577 != 0) {
        if (x8583 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        if (x8582 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
        }
      }
      if (x8578 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":371:38))
      auto x8584 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x8584 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":371:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8584);
        reg = x8584;
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":372:40))
      auto x8585 = args[2][138 * steps + ((cycle - 1) & mask)];
      assert(x8585 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":372:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8585);
        reg = x8585;
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8586 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x8586 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8586);
        reg = x8586;
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":374:36))
      auto x8587 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x8587 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":374:3)
      {
        auto& reg = args[2][151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8587);
        reg = x8587;
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8588 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x8588 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8589 = (x8588 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8589);
          reg = x8589;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8590 = inv(x8588);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8590);
          reg = x8590;
        }
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8591 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8591 != Fp::invalid());
      if (x8591 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8588 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8592 = x93 - x8591;
      if (x8592 != 0) {
        // loc("Top/Mux/5/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8593 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x8593 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8594 = x8588 * x8593;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8595 = x8594 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8595 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x8596 = x749 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x8597 = Fp(x8596.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8597);
          reg = x8597;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x8598 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x8598 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x8599 = x8596 - x8598;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x8600 = x8599 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x8601 = Fp(x8600.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8601);
          reg = x8601;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x8602 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x8603 = x8600 - x8602;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x8604 = x8603 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x8605 = Fp(x8604.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8605);
          reg = x8605;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x8606 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x8607 = x8604 - x8606;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x8608 = x8607 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8609 = Fp(x8608.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8609);
          reg = x8609;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8610 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x8610 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8611 = x8608 - x8610;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x8612 = x8611 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8612);
        reg = x8612;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8613 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x8613 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8614 = x93 - x8613;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x8615 = x8613 * x8614;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8615);
        reg = x8615;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x8616 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x8616 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8617 = x90 - x8613;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x8618 = x8616 * x8617;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8618 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x66;
      host_args.at(1) = x8582;
      host_args.at(2) = x8574;
      host_args.at(3) = x8588;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8583 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":384:24)
        auto x8619 = x3 - x8574;
        {
          host_args.at(0) = x8619;
          host_args.at(1) = x93;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x8620 = host_outs.at(0);
          auto x8621 = host_outs.at(1);
          auto x8622 = host_outs.at(2);
          auto x8623 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8620);
            reg = x8620;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8621);
            reg = x8621;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8622);
            reg = x8622;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8623);
            reg = x8623;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x8624 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x8624 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x8625 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x8625 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x8626 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x8626 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x8627 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x8627 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8619);
          reg = x8619;
        }
        // loc("cirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x735);
          reg = x735;
        }
        // loc("cirgen/components/ram.cpp":171:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8624);
          reg = x8624;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8625);
          reg = x8625;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8626);
          reg = x8626;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8627);
          reg = x8627;
        }
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8628 = args[2][79 * steps + ((cycle - 2) & mask)];
      assert(x8628 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8629 = args[2][80 * steps + ((cycle - 2) & mask)];
      assert(x8629 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8630 = args[2][81 * steps + ((cycle - 2) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8631 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8631 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8632 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8632 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8633 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8634 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8634 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8635 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8635 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8636 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8637 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8637 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8638 = args[2][12 * steps + ((cycle - 2) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8639 = args[2][13 * steps + ((cycle - 2) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8640 = args[2][14 * steps + ((cycle - 2) & mask)];
      assert(x8640 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8641 = args[2][15 * steps + ((cycle - 2) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8642 = args[2][16 * steps + ((cycle - 2) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8643 = args[2][17 * steps + ((cycle - 2) & mask)];
      assert(x8643 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8644 = args[2][18 * steps + ((cycle - 2) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8645 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8645 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8646 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8646 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8647 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8647 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8648 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8648 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8649 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8649 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8650 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8650 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8651 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8651 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8652 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8652 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8653 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8653 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8654 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8654 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8655 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8655 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8656 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8656 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8657 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8657 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8658 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8658 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8659 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8659 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8660 = args[2][79 * steps + ((cycle - 7) & mask)];
      assert(x8660 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8661 = args[2][80 * steps + ((cycle - 7) & mask)];
      assert(x8661 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8662 = args[2][81 * steps + ((cycle - 7) & mask)];
      assert(x8662 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8663 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8663 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8664 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8664 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8665 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8665 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8666 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8666 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8667 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8667 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8668 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8668 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8669 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8669 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8670 = args[2][12 * steps + ((cycle - 7) & mask)];
      assert(x8670 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8671 = args[2][13 * steps + ((cycle - 7) & mask)];
      assert(x8671 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8672 = args[2][14 * steps + ((cycle - 7) & mask)];
      assert(x8672 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8673 = args[2][15 * steps + ((cycle - 7) & mask)];
      assert(x8673 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8674 = args[2][16 * steps + ((cycle - 7) & mask)];
      assert(x8674 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8675 = args[2][17 * steps + ((cycle - 7) & mask)];
      assert(x8675 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8676 = args[2][18 * steps + ((cycle - 7) & mask)];
      assert(x8676 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8677 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8677 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8678 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8678 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8679 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8679 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8680 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8680 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8681 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8681 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8682 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8682 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8683 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8683 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8684 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8684 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8685 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8685 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8686 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8686 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8687 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8687 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8688 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8688 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8689 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8689 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8690 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8690 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8691 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8691 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8692 = args[2][79 * steps + ((cycle - 15) & mask)];
      assert(x8692 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8693 = args[2][80 * steps + ((cycle - 15) & mask)];
      assert(x8693 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8694 = args[2][81 * steps + ((cycle - 15) & mask)];
      assert(x8694 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8695 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8695 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8696 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8696 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8697 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8697 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8698 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8698 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8699 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8699 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8700 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8700 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8701 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8701 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8702 = args[2][12 * steps + ((cycle - 15) & mask)];
      assert(x8702 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8703 = args[2][13 * steps + ((cycle - 15) & mask)];
      assert(x8703 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8704 = args[2][14 * steps + ((cycle - 15) & mask)];
      assert(x8704 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8705 = args[2][15 * steps + ((cycle - 15) & mask)];
      assert(x8705 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8706 = args[2][16 * steps + ((cycle - 15) & mask)];
      assert(x8706 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8707 = args[2][17 * steps + ((cycle - 15) & mask)];
      assert(x8707 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8708 = args[2][18 * steps + ((cycle - 15) & mask)];
      assert(x8708 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8709 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8709 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8710 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8710 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8711 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8711 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8712 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8712 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8713 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8713 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8714 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8714 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8715 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8715 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8716 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8716 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8717 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8717 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8718 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8718 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8719 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8719 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8720 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8720 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8721 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8721 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8722 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8722 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8723 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8723 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8724 = args[2][79 * steps + ((cycle - 16) & mask)];
      assert(x8724 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8725 = args[2][80 * steps + ((cycle - 16) & mask)];
      assert(x8725 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8726 = args[2][81 * steps + ((cycle - 16) & mask)];
      assert(x8726 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8727 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8727 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8728 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8728 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8729 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8729 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8730 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8730 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8731 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8731 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8732 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8732 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8733 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8733 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8734 = args[2][12 * steps + ((cycle - 16) & mask)];
      assert(x8734 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8735 = args[2][13 * steps + ((cycle - 16) & mask)];
      assert(x8735 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8736 = args[2][14 * steps + ((cycle - 16) & mask)];
      assert(x8736 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8737 = args[2][15 * steps + ((cycle - 16) & mask)];
      assert(x8737 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8738 = args[2][16 * steps + ((cycle - 16) & mask)];
      assert(x8738 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8739 = args[2][17 * steps + ((cycle - 16) & mask)];
      assert(x8739 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8740 = args[2][18 * steps + ((cycle - 16) & mask)];
      assert(x8740 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8741 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8741 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8742 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8742 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8743 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8743 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8744 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8744 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8745 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8745 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8746 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8746 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8747 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8747 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8748 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8748 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8749 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8749 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8750 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8750 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8751 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x8751 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8752 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x8752 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8753 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x8753 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8754 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x8754 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x8755 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x8755 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8756 = x8710 + x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8757 = x8710 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8758 = x8757 * x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8759 = x8756 - x8758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8760 = x8711 + x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8761 = x8711 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8762 = x8761 * x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8763 = x8760 - x8762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8764 = x8712 + x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8765 = x8712 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8766 = x8765 * x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8767 = x8764 - x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8768 = x8713 + x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8769 = x8713 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8770 = x8769 * x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8771 = x8768 - x8770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8772 = x8714 + x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8773 = x8714 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8774 = x8773 * x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8775 = x8772 - x8774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8776 = x8715 + x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8777 = x8715 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8778 = x8777 * x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8779 = x8776 - x8778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8780 = x8716 + x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8781 = x8716 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8782 = x8781 * x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8783 = x8780 - x8782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8784 = x8717 + x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8785 = x8717 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8786 = x8785 * x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8787 = x8784 - x8786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8788 = x8718 + x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8789 = x8718 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8790 = x8789 * x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8791 = x8788 - x8790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8792 = x8719 + x8704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8793 = x8719 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8794 = x8793 * x8704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8795 = x8792 - x8794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8796 = x8720 + x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8797 = x8720 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8798 = x8797 * x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8799 = x8796 - x8798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8800 = x8721 + x8706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8801 = x8721 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8802 = x8801 * x8706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8803 = x8800 - x8802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8804 = x8722 + x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8805 = x8722 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8806 = x8805 * x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8807 = x8804 - x8806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8808 = x8723 + x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8809 = x8723 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8810 = x8809 * x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8811 = x8808 - x8810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8812 = x8692 + x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8813 = x8692 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8814 = x8813 * x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8815 = x8812 - x8814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8816 = x8693 + x8710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8817 = x8693 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8818 = x8817 * x8710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8819 = x8816 - x8818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8820 = x8694 + x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8821 = x8694 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8822 = x8821 * x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8823 = x8820 - x8822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8824 = x8695 + x8712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8825 = x8695 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8826 = x8825 * x8712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8827 = x8824 - x8826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8828 = x8696 + x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8829 = x8696 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8830 = x8829 * x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8831 = x8828 - x8830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8832 = x8697 + x8714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8833 = x8697 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8834 = x8833 * x8714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8835 = x8832 - x8834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8836 = x8698 + x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8837 = x8698 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8838 = x8837 * x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8839 = x8836 - x8838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8840 = x8699 + x8716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8841 = x8699 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8842 = x8841 * x8716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8843 = x8840 - x8842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8844 = x8700 + x8717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8845 = x8700 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8846 = x8845 * x8717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8847 = x8844 - x8846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8848 = x8701 + x8718;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8849 = x8701 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8850 = x8849 * x8718;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8851 = x8848 - x8850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8852 = x8702 + x8719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8853 = x8702 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8854 = x8853 * x8719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8855 = x8852 - x8854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8856 = x8703 + x8720;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8857 = x8703 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8858 = x8857 * x8720;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8859 = x8856 - x8858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8860 = x8704 + x8721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8861 = x8704 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8862 = x8861 * x8721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8863 = x8860 - x8862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8864 = x8705 + x8722;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8865 = x8705 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8866 = x8865 * x8722;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8867 = x8864 - x8866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8868 = x8706 + x8723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8869 = x8706 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8870 = x8869 * x8723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8871 = x8868 - x8870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8872 = x8699 + x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8873 = x8841 * x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8874 = x8872 - x8873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8875 = x8700 + x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8876 = x8845 * x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8877 = x8875 - x8876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8878 = x8701 + x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8879 = x8849 * x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8880 = x8878 - x8879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8881 = x8702 + x8771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8882 = x8853 * x8771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8883 = x8881 - x8882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8884 = x8703 + x8775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8885 = x8857 * x8775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8886 = x8884 - x8885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8887 = x8704 + x8779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8888 = x8861 * x8779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8889 = x8887 - x8888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8890 = x8705 + x8783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8891 = x8865 * x8783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8892 = x8890 - x8891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8893 = x8706 + x8787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8894 = x8869 * x8787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8895 = x8893 - x8894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8896 = x8707 + x8791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8897 = x8707 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8898 = x8897 * x8791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8899 = x8896 - x8898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8900 = x8708 + x8795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8901 = x8708 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8902 = x8901 * x8795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8903 = x8900 - x8902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8904 = x8709 + x8799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8905 = x8709 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8906 = x8905 * x8799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8907 = x8904 - x8906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8908 = x8710 + x8803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8909 = x8757 * x8803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8910 = x8908 - x8909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8911 = x8711 + x8807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8912 = x8761 * x8807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8913 = x8911 - x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8914 = x8712 + x8811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8915 = x8765 * x8811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8916 = x8914 - x8915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8917 = x8713 + x8815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8918 = x8769 * x8815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8919 = x8917 - x8918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8920 = x8714 + x8819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8921 = x8773 * x8819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8922 = x8920 - x8921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8923 = x8715 + x8823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8924 = x8777 * x8823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8925 = x8923 - x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8926 = x8716 + x8827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8927 = x8781 * x8827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8928 = x8926 - x8927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8929 = x8717 + x8831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8930 = x8785 * x8831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8931 = x8929 - x8930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8932 = x8718 + x8835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8933 = x8789 * x8835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8934 = x8932 - x8933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8935 = x8719 + x8839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8936 = x8793 * x8839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8937 = x8935 - x8936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8938 = x8720 + x8843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8939 = x8797 * x8843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8940 = x8938 - x8939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8941 = x8721 + x8847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8942 = x8801 * x8847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8943 = x8941 - x8942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8944 = x8722 + x8851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8945 = x8805 * x8851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8946 = x8944 - x8945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8947 = x8723 + x8855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8948 = x8809 * x8855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8949 = x8947 - x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8950 = x8692 + x8859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8951 = x8813 * x8859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8952 = x8950 - x8951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8953 = x8693 + x8863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8954 = x8817 * x8863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8955 = x8953 - x8954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8956 = x8694 + x8867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8957 = x8821 * x8867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8958 = x8956 - x8957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8959 = x8695 + x8871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8960 = x8825 * x8871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8961 = x8959 - x8960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8962 = x8696 + x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8963 = x8829 * x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8964 = x8962 - x8963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8965 = x8697 + x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8966 = x8833 * x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8967 = x8965 - x8966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8968 = x8698 + x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8969 = x8837 * x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8970 = x8968 - x8969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8971 = x8647 + x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8972 = x8647 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8973 = x8972 * x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8974 = x8971 - x8973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8975 = x8648 + x8639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8976 = x8648 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8977 = x8976 * x8639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8978 = x8975 - x8977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8979 = x8649 + x8640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8980 = x8649 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8981 = x8980 * x8640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8982 = x8979 - x8981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8983 = x8650 + x8641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8984 = x8650 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8985 = x8984 * x8641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8986 = x8983 - x8985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8987 = x8651 + x8642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8988 = x8651 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8989 = x8988 * x8642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8990 = x8987 - x8989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8991 = x8652 + x8643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8992 = x8652 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8993 = x8992 * x8643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8994 = x8991 - x8993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8995 = x8653 + x8644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8996 = x8653 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8997 = x8996 * x8644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8998 = x8995 - x8997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8999 = x8654 + x8645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9000 = x8654 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9001 = x9000 * x8645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9002 = x8999 - x9001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9003 = x8655 + x8646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9004 = x8655 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9005 = x9004 * x8646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9006 = x9003 - x9005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9007 = x8656 + x8647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9008 = x8656 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9009 = x9008 * x8647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9010 = x9007 - x9009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9011 = x8657 + x8648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9012 = x8657 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9013 = x9012 * x8648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9014 = x9011 - x9013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9015 = x8658 + x8649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9016 = x8658 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9017 = x9016 * x8649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9018 = x9015 - x9017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9019 = x8659 + x8650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9020 = x8659 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9021 = x9020 * x8650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9022 = x9019 - x9021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9023 = x8628 + x8651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9024 = x8628 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9025 = x9024 * x8651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9026 = x9023 - x9025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9027 = x8629 + x8652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9028 = x8629 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9029 = x9028 * x8652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9030 = x9027 - x9029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9031 = x8630 + x8653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9032 = x8630 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9033 = x9032 * x8653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9034 = x9031 - x9033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9035 = x8631 + x8654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9036 = x8631 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9037 = x9036 * x8654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9038 = x9035 - x9037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9039 = x8632 + x8655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9040 = x8632 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9041 = x9040 * x8655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9042 = x9039 - x9041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9043 = x8633 + x8656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9044 = x8633 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9045 = x9044 * x8656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9046 = x9043 - x9045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9047 = x8634 + x8657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9048 = x8634 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9049 = x9048 * x8657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9050 = x9047 - x9049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9051 = x8635 + x8658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9052 = x8635 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9053 = x9052 * x8658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9054 = x9051 - x9053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9055 = x8636 + x8659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9056 = x8636 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9057 = x9056 * x8659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9058 = x9055 - x9057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9059 = x8645 + x8974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9060 = x8645 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9061 = x9060 * x8974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9062 = x9059 - x9061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9063 = x8646 + x8978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9064 = x8646 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9065 = x9064 * x8978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9066 = x9063 - x9065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9067 = x8647 + x8982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9068 = x8972 * x8982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9069 = x9067 - x9068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9070 = x8648 + x8986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9071 = x8976 * x8986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9072 = x9070 - x9071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9073 = x8649 + x8990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9074 = x8980 * x8990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9075 = x9073 - x9074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9076 = x8650 + x8994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9077 = x8984 * x8994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9078 = x9076 - x9077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9079 = x8651 + x8998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9080 = x8988 * x8998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9081 = x9079 - x9080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9082 = x8652 + x9002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9083 = x8992 * x9002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9084 = x9082 - x9083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9085 = x8653 + x9006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9086 = x8996 * x9006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9087 = x9085 - x9086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9088 = x8654 + x9010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9089 = x9000 * x9010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9090 = x9088 - x9089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9091 = x8655 + x9014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9092 = x9004 * x9014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9093 = x9091 - x9092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9094 = x8656 + x9018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9095 = x9008 * x9018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9096 = x9094 - x9095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9097 = x8657 + x9022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9098 = x9012 * x9022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9099 = x9097 - x9098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9100 = x8658 + x9026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9101 = x9016 * x9026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9102 = x9100 - x9101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9103 = x8659 + x9030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9104 = x9020 * x9030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9105 = x9103 - x9104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9106 = x8628 + x9034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9107 = x9024 * x9034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9108 = x9106 - x9107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9109 = x8629 + x9038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9110 = x9028 * x9038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9111 = x9109 - x9110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9112 = x8630 + x9042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9113 = x9032 * x9042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9114 = x9112 - x9113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9115 = x8631 + x9046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9116 = x9036 * x9046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9117 = x9115 - x9116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9118 = x8632 + x9050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9119 = x9040 * x9050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9120 = x9118 - x9119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9121 = x8633 + x9054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9122 = x9044 * x9054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9123 = x9121 - x9122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9124 = x8634 + x9058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9125 = x9048 * x9058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9126 = x9124 - x9125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9127 = x8635 + x8637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9128 = x9052 * x8637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9129 = x9127 - x9128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9130 = x8636 + x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9131 = x9056 * x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9132 = x9130 - x9131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9133 = x8637 + x8639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9134 = x8637 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9135 = x9134 * x8639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9136 = x9133 - x9135;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9137 = x8638 + x8640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9138 = x8638 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9139 = x9138 * x8640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9140 = x9137 - x9139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9141 = x8639 + x8641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9142 = x8639 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9143 = x9142 * x8641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9144 = x9141 - x9143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9145 = x8640 + x8642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9146 = x8640 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9147 = x9146 * x8642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9148 = x9145 - x9147;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9149 = x8641 + x8643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9150 = x8641 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9151 = x9150 * x8643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9152 = x9149 - x9151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9153 = x8642 + x8644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9154 = x8642 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9155 = x9154 * x8644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9156 = x9153 - x9155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9157 = x8643 + x8645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9158 = x8643 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9159 = x9158 * x8645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9160 = x9157 - x9159;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9161 = x8644 + x8646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9162 = x8644 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9163 = x9162 * x8646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9164 = x9161 - x9163;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9165 = x8725 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9166 = x8724 + x9165;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9167 = x8726 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9168 = x9166 + x9167;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9169 = x8727 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9170 = x9168 + x9169;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9171 = x8728 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9172 = x9170 + x9171;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9173 = x8729 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9174 = x9172 + x9173;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9175 = x8730 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9176 = x9174 + x9175;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9177 = x8731 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9178 = x9176 + x9177;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9179 = x8732 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9180 = x9178 + x9179;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9181 = x8733 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9182 = x9180 + x9181;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9183 = x8734 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9184 = x9182 + x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9185 = x8735 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9186 = x9184 + x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9187 = x8736 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9188 = x9186 + x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9189 = x8737 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9190 = x9188 + x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9191 = x8738 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9192 = x9190 + x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9193 = x8739 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9194 = x9192 + x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9195 = x8741 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9196 = x8740 + x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9197 = x8742 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9198 = x9196 + x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9199 = x8743 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9200 = x9198 + x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9201 = x8744 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9202 = x9200 + x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9203 = x8745 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9204 = x9202 + x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9205 = x8746 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9206 = x9204 + x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9207 = x8747 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9208 = x9206 + x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9209 = x8748 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9210 = x9208 + x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9211 = x8749 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9212 = x9210 + x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9213 = x8750 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9214 = x9212 + x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9215 = x8751 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9216 = x9214 + x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9217 = x8752 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9218 = x9216 + x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9219 = x8753 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9220 = x9218 + x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9221 = x8754 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9222 = x9220 + x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9223 = x8755 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9224 = x9222 + x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9225 = x8877 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9226 = x8874 + x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9227 = x8880 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9228 = x9226 + x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9229 = x8883 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9230 = x9228 + x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9231 = x8886 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9232 = x9230 + x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9233 = x8889 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9234 = x9232 + x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9235 = x8892 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9236 = x9234 + x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9237 = x8895 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9238 = x9236 + x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9239 = x8899 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9240 = x9238 + x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9241 = x8903 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9242 = x9240 + x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9243 = x8907 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9244 = x9242 + x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9245 = x8910 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9246 = x9244 + x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9247 = x8913 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9248 = x9246 + x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9249 = x8916 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9250 = x9248 + x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9251 = x8919 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9252 = x9250 + x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9253 = x8922 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9254 = x9252 + x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9255 = x8928 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9256 = x8925 + x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9257 = x8931 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9258 = x9256 + x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9259 = x8934 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9260 = x9258 + x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9261 = x8937 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9262 = x9260 + x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9263 = x8940 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9264 = x9262 + x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9265 = x8943 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9266 = x9264 + x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9267 = x8946 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9268 = x9266 + x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9269 = x8949 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9270 = x9268 + x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9271 = x8952 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9272 = x9270 + x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9273 = x8955 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9274 = x9272 + x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9275 = x8958 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9276 = x9274 + x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9277 = x8961 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9278 = x9276 + x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9279 = x8964 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9280 = x9278 + x9279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9281 = x8967 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9282 = x9280 + x9281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9283 = x8970 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9284 = x9282 + x9283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9285 = x8661 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9286 = x8660 + x9285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9287 = x8662 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9288 = x9286 + x9287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9289 = x8663 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9290 = x9288 + x9289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9291 = x8664 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9292 = x9290 + x9291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9293 = x8665 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9294 = x9292 + x9293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9295 = x8666 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9296 = x9294 + x9295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9297 = x8667 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9298 = x9296 + x9297;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9299 = x8668 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9300 = x9298 + x9299;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9301 = x8669 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9302 = x9300 + x9301;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9303 = x8670 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9304 = x9302 + x9303;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9305 = x8671 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9306 = x9304 + x9305;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9307 = x8672 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9308 = x9306 + x9307;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9309 = x8673 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9310 = x9308 + x9309;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9311 = x8674 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9312 = x9310 + x9311;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9313 = x8675 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9314 = x9312 + x9313;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9315 = x8677 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9316 = x8676 + x9315;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9317 = x8678 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9318 = x9316 + x9317;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9319 = x8679 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9320 = x9318 + x9319;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9321 = x8680 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9322 = x9320 + x9321;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9323 = x8681 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9324 = x9322 + x9323;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9325 = x8682 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9326 = x9324 + x9325;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9327 = x8683 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9328 = x9326 + x9327;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9329 = x8684 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9330 = x9328 + x9329;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9331 = x8685 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9332 = x9330 + x9331;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9333 = x8686 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9334 = x9332 + x9333;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9335 = x8687 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9336 = x9334 + x9335;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9337 = x8688 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9338 = x9336 + x9337;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9339 = x8689 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9340 = x9338 + x9339;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9341 = x8690 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9342 = x9340 + x9341;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9343 = x8691 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9344 = x9342 + x9343;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9345 = x9066 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9346 = x9062 + x9345;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9347 = x9069 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9348 = x9346 + x9347;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9349 = x9072 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9350 = x9348 + x9349;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9351 = x9075 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9352 = x9350 + x9351;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9353 = x9078 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9354 = x9352 + x9353;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9355 = x9081 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9356 = x9354 + x9355;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9357 = x9084 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9358 = x9356 + x9357;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9359 = x9087 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9360 = x9358 + x9359;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9361 = x9090 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9362 = x9360 + x9361;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9363 = x9093 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9364 = x9362 + x9363;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9365 = x9096 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9366 = x9364 + x9365;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9367 = x9099 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9368 = x9366 + x9367;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9369 = x9102 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9370 = x9368 + x9369;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9371 = x9105 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9372 = x9370 + x9371;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9373 = x9108 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9374 = x9372 + x9373;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9375 = x9114 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9376 = x9111 + x9375;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9377 = x9117 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9378 = x9376 + x9377;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9379 = x9120 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9380 = x9378 + x9379;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9381 = x9123 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9382 = x9380 + x9381;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9383 = x9126 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9384 = x9382 + x9383;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9385 = x9129 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9386 = x9384 + x9385;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9387 = x9132 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9388 = x9386 + x9387;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9389 = x9136 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9390 = x9388 + x9389;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9391 = x9140 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9392 = x9390 + x9391;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9393 = x9144 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9394 = x9392 + x9393;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9395 = x9148 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9396 = x9394 + x9395;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9397 = x9152 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9398 = x9396 + x9397;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9399 = x9156 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9400 = x9398 + x9399;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9401 = x9160 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9402 = x9400 + x9401;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9403 = x9164 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9404 = x9402 + x9403;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9405 = x9314 + x9374;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9406 = x9344 + x9404;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9407 = x9254 + x9405;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9408 = x9284 + x9406;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9409 = x9194 + x9407;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9410 = x9224 + x9408;
      // loc("cirgen/circuit/rv32im/sha.cpp":460:5)
      {
        auto& reg = args[2][156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9409);
        reg = x9409;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":460:5)
      {
        auto& reg = args[2][157 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9410);
        reg = x9410;
      }
      if (x8582 != 0) {
        {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9411 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9411 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9412 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9412 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9413 = x9412 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9414 = x9411 + x9413;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9415 = args[2][81 * steps + ((cycle - 0) & mask)];
        assert(x9415 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9416 = x9415 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9417 = x9414 + x9416;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9418 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9418 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9419 = x9418 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9420 = x9417 + x9419;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9421 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9421 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9422 = x9421 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9423 = x9420 + x9422;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9424 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9424 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9425 = x9424 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9426 = x9423 + x9425;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9427 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9427 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9428 = x9427 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9429 = x9426 + x9428;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9430 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9430 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9431 = x9430 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9432 = x9429 + x9431;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9433 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9433 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9434 = x9433 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9435 = x9432 + x9434;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9436 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9436 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9437 = x9436 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9438 = x9435 + x9437;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9439 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x9439 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9440 = x9439 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9441 = x9438 + x9440;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9442 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x9442 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9443 = x9442 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9444 = x9441 + x9443;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9445 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x9445 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9446 = x9445 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9447 = x9444 + x9446;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9448 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x9448 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9449 = x9448 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9450 = x9447 + x9449;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9451 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x9451 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9452 = x9451 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9453 = x9450 + x9452;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9454 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x9454 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9455 = x9454 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9456 = x9453 + x9455;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9457 = x92 - x9456;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9458 = x9457 * x7;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9458);
          reg = x9458;
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9459 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9459 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9460 = Fp(x9459.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9460);
            reg = x9460;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9461 = Fp(x9459.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9462 = x9461 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9462);
            reg = x9462;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9463 = Fp(x9459.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9464 = x9463 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9464);
            reg = x9464;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9465 = Fp(x9459.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9466 = x9465 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9466);
            reg = x9466;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9467 = Fp(x9459.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9468 = x9467 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9468);
            reg = x9468;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9469 = Fp(x9459.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9470 = x9469 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9470);
            reg = x9470;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9471 = Fp(x9459.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9472 = x9471 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9472);
            reg = x9472;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9473 = Fp(x9459.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9474 = x9473 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9474);
            reg = x9474;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9475 = Fp(x9459.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9476 = x9475 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9476);
            reg = x9476;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9477 = Fp(x9459.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9478 = x9477 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9478);
            reg = x9478;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9479 = Fp(x9459.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9480 = x9479 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9480);
            reg = x9480;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9481 = Fp(x9459.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9482 = x9481 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9482);
            reg = x9482;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9483 = Fp(x9459.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9484 = x9483 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9484);
            reg = x9484;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9485 = Fp(x9459.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9486 = x9485 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9486);
            reg = x9486;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9487 = Fp(x9459.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9488 = x9487 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9488);
            reg = x9488;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9489 = Fp(x9459.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9490 = x9489 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9490);
            reg = x9490;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9491 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x9491 != Fp::invalid());
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9492 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9492 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9493 = x9492 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9494 = x9491 + x9493;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9495 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9495 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9496 = x9495 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9497 = x9494 + x9496;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9498 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9498 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9499 = x9498 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9500 = x9497 + x9499;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9501 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9501 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9502 = x9501 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9503 = x9500 + x9502;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9504 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9504 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9505 = x9504 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9506 = x9503 + x9505;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9507 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9507 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9508 = x9507 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9509 = x9506 + x9508;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9510 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9510 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9511 = x9510 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9512 = x9509 + x9511;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9513 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9513 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9514 = x9513 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9515 = x9512 + x9514;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9516 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9516 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9517 = x9516 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9518 = x9515 + x9517;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9519 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9519 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9520 = x9519 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9521 = x9518 + x9520;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9522 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9522 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9523 = x9522 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9524 = x9521 + x9523;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9525 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9525 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9526 = x9525 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9527 = x9524 + x9526;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9528 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9528 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9529 = x9528 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9530 = x9527 + x9529;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9531 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9531 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9532 = x9531 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9533 = x9530 + x9532;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9534 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9534 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9535 = x9534 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9536 = x9533 + x9535;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9537 = x9459 - x9536;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9538 = x9537 * x7;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9538);
          reg = x9538;
        }
      }
      if (x8583 != 0) {
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9539 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x9539 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9540 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9540 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9541 = Fp(x9539.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9541);
            reg = x9541;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9542 = Fp(x9539.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9543 = x9542 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9543);
            reg = x9543;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9544 = Fp(x9539.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9545 = x9544 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9545);
            reg = x9545;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9546 = Fp(x9539.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9547 = x9546 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9547);
            reg = x9547;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9548 = Fp(x9539.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9549 = x9548 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9549);
            reg = x9549;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9550 = Fp(x9539.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9551 = x9550 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9551);
            reg = x9551;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9552 = Fp(x9539.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9553 = x9552 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9553);
            reg = x9553;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9554 = Fp(x9539.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9555 = x9554 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9555);
            reg = x9555;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9556 = Fp(x9539.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9557 = x9556 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9557);
            reg = x9557;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9558 = Fp(x9539.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9559 = x9558 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9559);
            reg = x9559;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9560 = Fp(x9539.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9561 = x9560 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9561);
            reg = x9561;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9562 = Fp(x9539.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9563 = x9562 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9563);
            reg = x9563;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9564 = Fp(x9539.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9565 = x9564 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9565);
            reg = x9565;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9566 = Fp(x9539.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9567 = x9566 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9567);
            reg = x9567;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9568 = Fp(x9539.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9569 = x9568 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9569);
            reg = x9569;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9570 = Fp(x9539.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9571 = x9570 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9571);
            reg = x9571;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9572 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9572 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9573 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9573 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9574 = x9573 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9575 = x9572 + x9574;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9576 = args[2][81 * steps + ((cycle - 0) & mask)];
        assert(x9576 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9577 = x9576 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9578 = x9575 + x9577;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9579 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9579 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9580 = x9579 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9581 = x9578 + x9580;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9582 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9582 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9583 = x9582 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9584 = x9581 + x9583;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9585 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9585 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9586 = x9585 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9587 = x9584 + x9586;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9588 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9588 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9589 = x9588 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9590 = x9587 + x9589;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9591 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9591 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9592 = x9591 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9593 = x9590 + x9592;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9594 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9594 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9595 = x9594 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9596 = x9593 + x9595;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9597 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9597 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9598 = x9597 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9599 = x9596 + x9598;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9600 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x9600 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9601 = x9600 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9602 = x9599 + x9601;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9603 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x9603 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9604 = x9603 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9605 = x9602 + x9604;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9606 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x9606 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9607 = x9606 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9608 = x9605 + x9607;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9609 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x9609 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9610 = x9609 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9611 = x9608 + x9610;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9612 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x9612 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9613 = x9612 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9614 = x9611 + x9613;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9615 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x9615 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9616 = x9615 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9617 = x9614 + x9616;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9618 = x9539 - x9617;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9619 = x9618 * x7;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9619);
          reg = x9619;
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9620 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9620 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9621 = x9540 + x9620;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9622 = Fp(x9621.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9622);
            reg = x9622;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9623 = Fp(x9621.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9624 = x9623 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9624);
            reg = x9624;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9625 = Fp(x9621.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9626 = x9625 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9626);
            reg = x9626;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9627 = Fp(x9621.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9628 = x9627 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9628);
            reg = x9628;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9629 = Fp(x9621.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9630 = x9629 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9630);
            reg = x9630;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9631 = Fp(x9621.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9632 = x9631 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9632);
            reg = x9632;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9633 = Fp(x9621.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9634 = x9633 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9634);
            reg = x9634;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9635 = Fp(x9621.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9636 = x9635 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9636);
            reg = x9636;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9637 = Fp(x9621.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9638 = x9637 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9638);
            reg = x9638;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9639 = Fp(x9621.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9640 = x9639 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9640);
            reg = x9640;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9641 = Fp(x9621.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9642 = x9641 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9642);
            reg = x9642;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9643 = Fp(x9621.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9644 = x9643 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9644);
            reg = x9644;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9645 = Fp(x9621.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9646 = x9645 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9646);
            reg = x9646;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9647 = Fp(x9621.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9648 = x9647 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9648);
            reg = x9648;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9649 = Fp(x9621.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9650 = x9649 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9650);
            reg = x9650;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9651 = Fp(x9621.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9652 = x9651 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9652);
            reg = x9652;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9653 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x9653 != Fp::invalid());
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9654 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9654 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9655 = x9654 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9656 = x9653 + x9655;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9657 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9657 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9658 = x9657 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9659 = x9656 + x9658;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9660 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9660 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9661 = x9660 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9662 = x9659 + x9661;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9663 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9663 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9664 = x9663 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9665 = x9662 + x9664;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9666 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9666 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9667 = x9666 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9668 = x9665 + x9667;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9669 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9669 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9670 = x9669 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9671 = x9668 + x9670;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9672 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9673 = x9672 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9674 = x9671 + x9673;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9675 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9675 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9676 = x9675 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9677 = x9674 + x9676;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9678 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9678 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9679 = x9678 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9680 = x9677 + x9679;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9681 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9681 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9682 = x9681 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9683 = x9680 + x9682;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9684 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9684 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9685 = x9684 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9686 = x9683 + x9685;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9687 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9687 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9688 = x9687 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9689 = x9686 + x9688;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9690 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9690 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9691 = x9690 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9692 = x9689 + x9691;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9693 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9693 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9694 = x9693 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9695 = x9692 + x9694;
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9696 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9697 = x9696 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9698 = x9695 + x9697;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9699 = x9621 - x9698;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9700 = x9699 * x7;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9700);
          reg = x9700;
        }
      }
      if (x8582 != 0) {
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9701 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x9701 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9702 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9702 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9703 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9703 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9704 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9704 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9705 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9705 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9706 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9706 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9707 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9707 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9708 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9708 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9709 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9709 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9710 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9710 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9711 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9711 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9712 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9712 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9713 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9713 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9714 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9714 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9715 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9715 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9716 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9716 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9717 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9717 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9718 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9718 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9719 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9719 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9720 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9720 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9721 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9721 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9722 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9722 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9723 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9723 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9724 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9724 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9725 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x9725 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9726 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x9726 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9727 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x9727 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9728 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x9728 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9729 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x9729 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9730 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x9730 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9731 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x9731 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9732 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x9732 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9733 = x9702 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9734 = x9701 + x9733;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9735 = x9703 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9736 = x9734 + x9735;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9737 = x9704 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9738 = x9736 + x9737;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9739 = x9705 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9740 = x9738 + x9739;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9741 = x9706 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9742 = x9740 + x9741;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9743 = x9707 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9744 = x9742 + x9743;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9745 = x9708 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9746 = x9744 + x9745;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9747 = x9709 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9748 = x9746 + x9747;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9749 = x9710 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9750 = x9748 + x9749;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9751 = x9711 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9752 = x9750 + x9751;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9753 = x9712 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9754 = x9752 + x9753;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9755 = x9713 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9756 = x9754 + x9755;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9757 = x9714 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9758 = x9756 + x9757;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9759 = x9715 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9760 = x9758 + x9759;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9761 = x9716 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9762 = x9760 + x9761;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9763 = x9718 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9764 = x9717 + x9763;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9765 = x9719 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9766 = x9764 + x9765;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9767 = x9720 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9768 = x9766 + x9767;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9769 = x9721 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9770 = x9768 + x9769;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9771 = x9722 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9772 = x9770 + x9771;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9773 = x9723 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9774 = x9772 + x9773;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9775 = x9724 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9776 = x9774 + x9775;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9777 = x9725 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9778 = x9776 + x9777;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9779 = x9726 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9780 = x9778 + x9779;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9781 = x9727 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9782 = x9780 + x9781;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9783 = x9728 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9784 = x9782 + x9783;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9785 = x9729 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9786 = x9784 + x9785;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9787 = x9730 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9788 = x9786 + x9787;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9789 = x9731 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9790 = x9788 + x9789;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9791 = x9732 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9792 = x9790 + x9791;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9793 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x9793 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9794 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x9794 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9795 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x9795 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9796 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x9796 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9797 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x9797 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9798 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x9798 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9799 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x9799 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9800 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x9800 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9801 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x9801 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9802 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x9802 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9803 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x9803 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9804 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x9804 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9805 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x9805 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9806 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x9806 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9807 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x9807 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9808 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x9808 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9809 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x9809 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9810 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x9810 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9811 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x9811 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9812 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x9812 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9813 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x9813 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9814 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x9814 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9815 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x9815 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9816 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x9816 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9817 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x9817 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9818 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x9818 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9819 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x9819 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9820 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x9820 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9821 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x9821 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9822 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x9822 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9823 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x9823 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9824 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x9824 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9825 = x9794 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9826 = x9793 + x9825;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9827 = x9795 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9828 = x9826 + x9827;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9829 = x9796 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9830 = x9828 + x9829;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9831 = x9797 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9832 = x9830 + x9831;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9833 = x9798 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9834 = x9832 + x9833;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9835 = x9799 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9836 = x9834 + x9835;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9837 = x9800 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9838 = x9836 + x9837;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9839 = x9801 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9840 = x9838 + x9839;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9841 = x9802 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9842 = x9840 + x9841;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9843 = x9803 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9844 = x9842 + x9843;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9845 = x9804 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9846 = x9844 + x9845;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9847 = x9805 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9848 = x9846 + x9847;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9849 = x9806 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9850 = x9848 + x9849;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9851 = x9807 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9852 = x9850 + x9851;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9853 = x9808 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9854 = x9852 + x9853;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9855 = x9810 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9856 = x9809 + x9855;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9857 = x9811 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9858 = x9856 + x9857;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9859 = x9812 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9860 = x9858 + x9859;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9861 = x9813 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9862 = x9860 + x9861;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9863 = x9814 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9864 = x9862 + x9863;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9865 = x9815 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9866 = x9864 + x9865;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9867 = x9816 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9868 = x9866 + x9867;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9869 = x9817 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9870 = x9868 + x9869;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9871 = x9818 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9872 = x9870 + x9871;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9873 = x9819 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9874 = x9872 + x9873;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9875 = x9820 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9876 = x9874 + x9875;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9877 = x9821 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9878 = x9876 + x9877;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9879 = x9822 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9880 = x9878 + x9879;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9881 = x9823 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9882 = x9880 + x9881;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9883 = x9824 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9884 = x9882 + x9883;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9885 = x9762 + x9854;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9886 = x9792 + x9884;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9887 = Fp(x9885.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9887);
            reg = x9887;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9888 = Fp(x9885.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9889 = x9888 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9889);
            reg = x9889;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9890 = Fp(x9885.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9891 = x9890 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9891);
            reg = x9891;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9892 = Fp(x9885.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9893 = x9892 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9893);
            reg = x9893;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9894 = Fp(x9885.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9895 = x9894 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9895);
            reg = x9895;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9896 = Fp(x9885.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9897 = x9896 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9897);
            reg = x9897;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9898 = Fp(x9885.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9899 = x9898 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9899);
            reg = x9899;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9900 = Fp(x9885.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9901 = x9900 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9901);
            reg = x9901;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9902 = Fp(x9885.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9903 = x9902 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9903);
            reg = x9903;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9904 = Fp(x9885.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9905 = x9904 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9905);
            reg = x9905;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9906 = Fp(x9885.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9907 = x9906 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9907);
            reg = x9907;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9908 = Fp(x9885.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9909 = x9908 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9909);
            reg = x9909;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9910 = Fp(x9885.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9911 = x9910 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9911);
            reg = x9911;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9912 = Fp(x9885.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9913 = x9912 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9913);
            reg = x9913;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9914 = Fp(x9885.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9915 = x9914 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9915);
            reg = x9915;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9916 = Fp(x9885.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9917 = x9916 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9917);
            reg = x9917;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9918 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9918 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9919 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x9919 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9920 = x9919 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9921 = x9918 + x9920;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9922 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x9922 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9923 = x9922 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9924 = x9921 + x9923;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9925 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x9925 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9926 = x9925 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9927 = x9924 + x9926;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9928 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x9928 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9929 = x9928 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9930 = x9927 + x9929;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9931 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x9931 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9932 = x9931 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9933 = x9930 + x9932;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9934 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x9934 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9935 = x9934 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9936 = x9933 + x9935;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9937 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x9937 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9938 = x9937 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9939 = x9936 + x9938;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9940 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x9940 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9941 = x9940 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9942 = x9939 + x9941;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9943 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x9943 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9944 = x9943 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9945 = x9942 + x9944;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9946 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x9946 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9947 = x9946 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9948 = x9945 + x9947;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9949 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x9949 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9950 = x9949 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9951 = x9948 + x9950;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9952 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x9952 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9953 = x9952 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9954 = x9951 + x9953;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9955 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x9955 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9956 = x9955 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9957 = x9954 + x9956;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9958 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x9958 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9959 = x9958 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9960 = x9957 + x9959;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9961 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x9961 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9962 = x9961 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9963 = x9960 + x9962;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9964 = x9885 - x9963;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9965 = x9964 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x9966 = Fp(x9965.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9966);
            reg = x9966;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x9967 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x9967 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9968 = x9965 - x9967;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x9969 = x9968 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x9970 = x93 - x9969;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x9971 = x9969 * x9970;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9971 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x9972 = x9886 + x9965;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9973 = Fp(x9972.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9973);
            reg = x9973;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9974 = Fp(x9972.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9975 = x9974 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9975);
            reg = x9975;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9976 = Fp(x9972.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9977 = x9976 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9977);
            reg = x9977;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9978 = Fp(x9972.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9979 = x9978 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9979);
            reg = x9979;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9980 = Fp(x9972.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9981 = x9980 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9981);
            reg = x9981;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9982 = Fp(x9972.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9983 = x9982 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9983);
            reg = x9983;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9984 = Fp(x9972.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9985 = x9984 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9985);
            reg = x9985;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9986 = Fp(x9972.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9987 = x9986 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9987);
            reg = x9987;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9988 = Fp(x9972.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9989 = x9988 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9989);
            reg = x9989;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9990 = Fp(x9972.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9991 = x9990 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9991);
            reg = x9991;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9992 = Fp(x9972.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9993 = x9992 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9993);
            reg = x9993;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9994 = Fp(x9972.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9995 = x9994 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9995);
            reg = x9995;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9996 = Fp(x9972.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9997 = x9996 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9997);
            reg = x9997;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9998 = Fp(x9972.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9999 = x9998 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9999);
            reg = x9999;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10000 = Fp(x9972.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10001 = x10000 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10001);
            reg = x10001;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10002 = Fp(x9972.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10003 = x10002 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10003);
            reg = x10003;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10004 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x10004 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10005 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x10005 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10006 = x10005 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10007 = x10004 + x10006;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10008 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x10008 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10009 = x10008 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10010 = x10007 + x10009;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10011 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x10011 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10012 = x10011 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10013 = x10010 + x10012;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10014 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x10014 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10015 = x10014 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10016 = x10013 + x10015;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10017 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x10017 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10018 = x10017 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10019 = x10016 + x10018;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10020 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x10020 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10021 = x10020 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10022 = x10019 + x10021;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10023 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x10023 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10024 = x10023 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10025 = x10022 + x10024;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10026 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10026 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10027 = x10026 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10028 = x10025 + x10027;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10029 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10029 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10030 = x10029 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10031 = x10028 + x10030;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10032 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10032 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10033 = x10032 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10034 = x10031 + x10033;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10035 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10035 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10036 = x10035 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10037 = x10034 + x10036;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10038 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10038 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10039 = x10038 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10040 = x10037 + x10039;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10041 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10041 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10042 = x10041 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10043 = x10040 + x10042;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10044 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10044 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10045 = x10044 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10046 = x10043 + x10045;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10047 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10047 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10048 = x10047 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10049 = x10046 + x10048;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10050 = x9972 - x10049;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10051 = x10050 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10052 = Fp(x10051.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10052);
            reg = x10052;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10053 = args[2][74 * steps + ((cycle - 0) & mask)];
        assert(x10053 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10054 = x10051 - x10053;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10055 = x10054 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10056 = x93 - x10055;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10057 = x10055 * x10056;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10057 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10058 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x10058 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10059 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x10059 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10060 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x10060 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10061 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x10061 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10062 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x10062 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10063 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x10063 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10064 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x10064 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10065 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x10065 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10066 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x10066 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10067 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x10067 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10068 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x10068 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10069 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x10069 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10070 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x10070 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10071 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x10071 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10072 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x10072 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10073 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x10073 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10074 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x10074 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10075 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x10075 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10076 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x10076 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10077 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x10077 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10078 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x10078 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10079 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x10079 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10080 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x10080 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10081 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x10081 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10082 = args[2][214 * steps + ((cycle - 4) & mask)];
        assert(x10082 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10083 = args[2][215 * steps + ((cycle - 4) & mask)];
        assert(x10083 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10084 = args[2][216 * steps + ((cycle - 4) & mask)];
        assert(x10084 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10085 = args[2][217 * steps + ((cycle - 4) & mask)];
        assert(x10085 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10086 = args[2][218 * steps + ((cycle - 4) & mask)];
        assert(x10086 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10087 = args[2][219 * steps + ((cycle - 4) & mask)];
        assert(x10087 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10088 = args[2][220 * steps + ((cycle - 4) & mask)];
        assert(x10088 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10089 = args[2][221 * steps + ((cycle - 4) & mask)];
        assert(x10089 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10090 = x10059 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10091 = x10058 + x10090;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10092 = x10060 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10093 = x10091 + x10092;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10094 = x10061 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10095 = x10093 + x10094;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10096 = x10062 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10097 = x10095 + x10096;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10098 = x10063 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10099 = x10097 + x10098;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10100 = x10064 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10101 = x10099 + x10100;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10102 = x10065 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10103 = x10101 + x10102;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10104 = x10066 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10105 = x10103 + x10104;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10106 = x10067 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10107 = x10105 + x10106;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10108 = x10068 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10109 = x10107 + x10108;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10110 = x10069 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10111 = x10109 + x10110;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10112 = x10070 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10113 = x10111 + x10112;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10114 = x10071 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10115 = x10113 + x10114;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10116 = x10072 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10117 = x10115 + x10116;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10118 = x10073 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10119 = x10117 + x10118;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10120 = x10075 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10121 = x10074 + x10120;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10122 = x10076 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10123 = x10121 + x10122;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10124 = x10077 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10125 = x10123 + x10124;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10126 = x10078 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10127 = x10125 + x10126;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10128 = x10079 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10129 = x10127 + x10128;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10130 = x10080 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10131 = x10129 + x10130;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10132 = x10081 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10133 = x10131 + x10132;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10134 = x10082 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10135 = x10133 + x10134;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10136 = x10083 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10137 = x10135 + x10136;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10138 = x10084 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10139 = x10137 + x10138;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10140 = x10085 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10141 = x10139 + x10140;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10142 = x10086 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10143 = x10141 + x10142;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10144 = x10087 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10145 = x10143 + x10144;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10146 = x10088 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10147 = x10145 + x10146;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10148 = x10089 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10149 = x10147 + x10148;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10150 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10150 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10151 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10151 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10152 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10152 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10153 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10153 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10154 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10154 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10155 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10155 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10156 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10156 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10157 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10157 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10158 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10158 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10159 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10159 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10160 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10160 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10161 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10161 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10162 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10162 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10163 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10163 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10164 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10164 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10165 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10165 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10166 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10166 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10167 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10167 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10168 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10168 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10169 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10169 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10170 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10170 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10171 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10171 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10172 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10172 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10173 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10173 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10174 = args[2][214 * steps + ((cycle - 68) & mask)];
        assert(x10174 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10175 = args[2][215 * steps + ((cycle - 68) & mask)];
        assert(x10175 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10176 = args[2][216 * steps + ((cycle - 68) & mask)];
        assert(x10176 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10177 = args[2][217 * steps + ((cycle - 68) & mask)];
        assert(x10177 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10178 = args[2][218 * steps + ((cycle - 68) & mask)];
        assert(x10178 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10179 = args[2][219 * steps + ((cycle - 68) & mask)];
        assert(x10179 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10180 = args[2][220 * steps + ((cycle - 68) & mask)];
        assert(x10180 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10181 = args[2][221 * steps + ((cycle - 68) & mask)];
        assert(x10181 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10182 = x10151 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10183 = x10150 + x10182;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10184 = x10152 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10185 = x10183 + x10184;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10186 = x10153 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10187 = x10185 + x10186;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10188 = x10154 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10189 = x10187 + x10188;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10190 = x10155 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10191 = x10189 + x10190;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10192 = x10156 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10193 = x10191 + x10192;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10194 = x10157 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10195 = x10193 + x10194;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10196 = x10158 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10197 = x10195 + x10196;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10198 = x10159 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10199 = x10197 + x10198;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10200 = x10160 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10201 = x10199 + x10200;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10202 = x10161 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10203 = x10201 + x10202;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10204 = x10162 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10205 = x10203 + x10204;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10206 = x10163 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10207 = x10205 + x10206;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10208 = x10164 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10209 = x10207 + x10208;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10210 = x10165 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10211 = x10209 + x10210;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10212 = x10167 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10213 = x10166 + x10212;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10214 = x10168 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10215 = x10213 + x10214;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10216 = x10169 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10217 = x10215 + x10216;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10218 = x10170 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10219 = x10217 + x10218;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10220 = x10171 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10221 = x10219 + x10220;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10222 = x10172 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10223 = x10221 + x10222;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10224 = x10173 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10225 = x10223 + x10224;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10226 = x10174 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10227 = x10225 + x10226;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10228 = x10175 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10229 = x10227 + x10228;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10230 = x10176 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10231 = x10229 + x10230;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10232 = x10177 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10233 = x10231 + x10232;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10234 = x10178 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10235 = x10233 + x10234;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10236 = x10179 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10237 = x10235 + x10236;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10238 = x10180 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10239 = x10237 + x10238;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10240 = x10181 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10241 = x10239 + x10240;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10242 = x10119 + x10211;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10243 = x10149 + x10241;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10244 = Fp(x10242.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10244);
            reg = x10244;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10245 = Fp(x10242.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10246 = x10245 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10246);
            reg = x10246;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10247 = Fp(x10242.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10248 = x10247 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10248);
            reg = x10248;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10249 = Fp(x10242.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10250 = x10249 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10250);
            reg = x10250;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10251 = Fp(x10242.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10252 = x10251 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10252);
            reg = x10252;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10253 = Fp(x10242.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10254 = x10253 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10254);
            reg = x10254;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10255 = Fp(x10242.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10256 = x10255 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10256);
            reg = x10256;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10257 = Fp(x10242.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10258 = x10257 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10258);
            reg = x10258;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10259 = Fp(x10242.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10260 = x10259 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10260);
            reg = x10260;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10261 = Fp(x10242.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10262 = x10261 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10262);
            reg = x10262;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10263 = Fp(x10242.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10264 = x10263 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10264);
            reg = x10264;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10265 = Fp(x10242.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10266 = x10265 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10266);
            reg = x10266;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10267 = Fp(x10242.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10268 = x10267 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10268);
            reg = x10268;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10269 = Fp(x10242.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10270 = x10269 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10270);
            reg = x10270;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10271 = Fp(x10242.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10272 = x10271 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10272);
            reg = x10272;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10273 = Fp(x10242.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10274 = x10273 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10274);
            reg = x10274;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10275 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10275 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10276 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10276 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10277 = x10276 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10278 = x10275 + x10277;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10279 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10280 = x10279 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10281 = x10278 + x10280;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10282 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10282 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10283 = x10282 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10284 = x10281 + x10283;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10285 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10286 = x10285 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10287 = x10284 + x10286;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10288 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10289 = x10288 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10290 = x10287 + x10289;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10291 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10292 = x10291 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10293 = x10290 + x10292;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10294 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10295 = x10294 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10296 = x10293 + x10295;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10297 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10297 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10298 = x10297 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10299 = x10296 + x10298;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10300 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10301 = x10300 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10302 = x10299 + x10301;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10303 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10303 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10304 = x10303 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10305 = x10302 + x10304;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10306 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10306 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10307 = x10306 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10308 = x10305 + x10307;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10309 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10309 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10310 = x10309 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10311 = x10308 + x10310;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10312 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10312 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10313 = x10312 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10314 = x10311 + x10313;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10315 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10315 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10316 = x10315 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10317 = x10314 + x10316;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10318 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10318 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10319 = x10318 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10320 = x10317 + x10319;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10321 = x10242 - x10320;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10322 = x10321 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10323 = Fp(x10322.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10323);
            reg = x10323;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10324 = args[2][75 * steps + ((cycle - 0) & mask)];
        assert(x10324 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10325 = x10322 - x10324;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10326 = x10325 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10327 = x93 - x10326;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10328 = x10326 * x10327;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10328 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10329 = x10243 + x10322;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10330 = Fp(x10329.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10330);
            reg = x10330;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10331 = Fp(x10329.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10332 = x10331 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10332);
            reg = x10332;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10333 = Fp(x10329.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10334 = x10333 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10334);
            reg = x10334;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10335 = Fp(x10329.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10336 = x10335 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10336);
            reg = x10336;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10337 = Fp(x10329.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10338 = x10337 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10338);
            reg = x10338;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10339 = Fp(x10329.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10340 = x10339 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10340);
            reg = x10340;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10341 = Fp(x10329.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10342 = x10341 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10342);
            reg = x10342;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10343 = Fp(x10329.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10344 = x10343 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10344);
            reg = x10344;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10345 = Fp(x10329.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10346 = x10345 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10346);
            reg = x10346;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10347 = Fp(x10329.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10348 = x10347 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10348);
            reg = x10348;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10349 = Fp(x10329.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10350 = x10349 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10350);
            reg = x10350;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10351 = Fp(x10329.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10352 = x10351 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10352);
            reg = x10352;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10353 = Fp(x10329.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10354 = x10353 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10354);
            reg = x10354;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10355 = Fp(x10329.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10356 = x10355 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10356);
            reg = x10356;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10357 = Fp(x10329.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10358 = x10357 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10358);
            reg = x10358;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10359 = Fp(x10329.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10360 = x10359 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10360);
            reg = x10360;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10361 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10361 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10362 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10362 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10363 = x10362 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10364 = x10361 + x10363;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10365 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10365 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10366 = x10365 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10367 = x10364 + x10366;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10368 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10368 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10369 = x10368 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10370 = x10367 + x10369;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10371 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10371 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10372 = x10371 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10373 = x10370 + x10372;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10374 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10374 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10375 = x10374 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10376 = x10373 + x10375;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10377 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10377 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10378 = x10377 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10379 = x10376 + x10378;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10380 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10380 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10381 = x10380 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10382 = x10379 + x10381;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10383 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x10383 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10384 = x10383 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10385 = x10382 + x10384;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10386 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x10386 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10387 = x10386 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10388 = x10385 + x10387;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10389 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x10389 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10390 = x10389 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10391 = x10388 + x10390;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10392 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x10392 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10393 = x10392 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10394 = x10391 + x10393;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10395 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x10395 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10396 = x10395 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10397 = x10394 + x10396;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10398 = args[2][219 * steps + ((cycle - 0) & mask)];
        assert(x10398 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10399 = x10398 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10400 = x10397 + x10399;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10401 = args[2][220 * steps + ((cycle - 0) & mask)];
        assert(x10401 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10402 = x10401 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10403 = x10400 + x10402;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10404 = args[2][221 * steps + ((cycle - 0) & mask)];
        assert(x10404 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10405 = x10404 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10406 = x10403 + x10405;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10407 = x10329 - x10406;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10408 = x10407 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10409 = Fp(x10408.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10409);
            reg = x10409;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x10410 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x10410 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10411 = x10408 - x10410;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10412 = x10411 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10413 = x93 - x10412;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10414 = x10412 * x10413;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10414 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10415 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x10415 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":402:17)
      auto x10416 = x93 - x10415;
      if (x8591 != 0) {
        if (x10415 != 0) {
          // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10417 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x10417 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":406:26)
          auto x10418 = x10417 + x8574;
          {
            host_args.at(0) = x10418;
            host_args.at(1) = x93;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10419 = host_outs.at(0);
            auto x10420 = host_outs.at(1);
            auto x10421 = host_outs.at(2);
            auto x10422 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10419);
              reg = x10419;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10420);
              reg = x10420;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10421);
              reg = x10421;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10422);
              reg = x10422;
            }
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10423 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10423 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10424 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10424 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10425 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10425 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10426 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10426 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10418);
            reg = x10418;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10423);
            reg = x10423;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10424);
            reg = x10424;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10425);
            reg = x10425;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10426);
            reg = x10426;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":407:26)
          auto x10427 = x10417 + x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:26)
          auto x10428 = x10427 + x8574;
          {
            host_args.at(0) = x10428;
            host_args.at(1) = x93;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10429 = host_outs.at(0);
            auto x10430 = host_outs.at(1);
            auto x10431 = host_outs.at(2);
            auto x10432 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10429);
              reg = x10429;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10430);
              reg = x10430;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10431);
              reg = x10431;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10432);
              reg = x10432;
            }
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10433 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x10433 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10434 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x10434 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10435 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x10435 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10436 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x10436 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10428);
            reg = x10428;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10433);
            reg = x10433;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10434);
            reg = x10434;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10435);
            reg = x10435;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10436);
            reg = x10436;
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":176:10))
          auto x10437 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x10437 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":408:39)
          auto x10438 = x10437 * x76;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10439 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10439 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10440 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10440 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10441 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10441 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10442 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10442 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10443 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10443 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10444 = x10443 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10445 = x10439 + x10444;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10446 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10446 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10447 = x10446 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10448 = x10440 + x10447;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10449 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10449 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10450 = x10449 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10451 = x10441 + x10450;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10452 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10452 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10453 = x10452 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10454 = x10442 + x10453;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10455 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10455 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10456 = x10455 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10457 = x10445 + x10456;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10458 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10458 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10459 = x10458 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10460 = x10448 + x10459;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10461 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10461 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10462 = x10461 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10463 = x10451 + x10462;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10464 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10464 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10465 = x10464 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10466 = x10454 + x10465;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10467 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10467 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10468 = x10467 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10469 = x10457 + x10468;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10470 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10470 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10471 = x10470 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10472 = x10460 + x10471;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10473 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10473 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10474 = x10473 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10475 = x10463 + x10474;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10476 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10476 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10477 = x10476 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10478 = x10466 + x10477;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10479 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10479 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10480 = x10479 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10481 = x10469 + x10480;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10482 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10482 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10483 = x10482 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10484 = x10472 + x10483;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10485 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10485 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10486 = x10485 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10487 = x10475 + x10486;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10488 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10488 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10489 = x10488 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10490 = x10478 + x10489;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10491 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10491 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10492 = x10491 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10493 = x10481 + x10492;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10494 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10494 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10495 = x10494 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10496 = x10484 + x10495;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10497 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10497 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10498 = x10497 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10499 = x10487 + x10498;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10500 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10500 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10501 = x10500 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10502 = x10490 + x10501;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10503 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10503 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10504 = x10503 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10505 = x10493 + x10504;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10506 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10506 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10507 = x10506 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10508 = x10496 + x10507;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10509 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10509 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10510 = x10509 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10511 = x10499 + x10510;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10512 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10512 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10513 = x10512 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10514 = x10502 + x10513;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10515 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10515 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10516 = x10515 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10517 = x10505 + x10516;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10518 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10518 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10519 = x10518 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10520 = x10508 + x10519;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10521 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10521 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10522 = x10521 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10523 = x10511 + x10522;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10524 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10524 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10525 = x10524 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10526 = x10514 + x10525;
          host_args.at(0) = x10438;
          host_args.at(1) = x10423;
          host_args.at(2) = x10424;
          host_args.at(3) = x10425;
          host_args.at(4) = x10426;
          host_args.at(5) = x10526;
          host_args.at(6) = x10523;
          host_args.at(7) = x10520;
          host_args.at(8) = x10517;
          host(ctx, "log", "  io0: [%10x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":176:10))
          auto x10527 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x10527 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":409:39)
          auto x10528 = x10527 * x76;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10529 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10529 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10530 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10530 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10531 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10531 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10532 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x10532 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10533 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10533 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10534 = x10533 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10535 = x10529 + x10534;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10536 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10536 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10537 = x10536 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10538 = x10530 + x10537;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10539 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10539 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10540 = x10539 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10541 = x10531 + x10540;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10542 = args[2][215 * steps + ((cycle - 0) & mask)];
          assert(x10542 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10543 = x10542 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10544 = x10532 + x10543;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10545 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10545 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10546 = x10545 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10547 = x10535 + x10546;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10548 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10548 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10549 = x10548 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10550 = x10538 + x10549;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10551 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10551 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10552 = x10551 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10553 = x10541 + x10552;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10554 = args[2][216 * steps + ((cycle - 0) & mask)];
          assert(x10554 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10555 = x10554 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10556 = x10544 + x10555;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10557 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10557 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10558 = x10557 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10559 = x10547 + x10558;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10560 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10560 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10561 = x10560 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10562 = x10550 + x10561;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10563 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10563 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10564 = x10563 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10565 = x10553 + x10564;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10566 = args[2][217 * steps + ((cycle - 0) & mask)];
          assert(x10566 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10567 = x10566 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10568 = x10556 + x10567;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10569 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10569 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10570 = x10569 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10571 = x10559 + x10570;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10572 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10572 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10573 = x10572 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10574 = x10562 + x10573;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10575 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10575 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10576 = x10575 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10577 = x10565 + x10576;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10578 = args[2][218 * steps + ((cycle - 0) & mask)];
          assert(x10578 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10579 = x10578 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10580 = x10568 + x10579;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10581 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10581 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10582 = x10581 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10583 = x10571 + x10582;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10584 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10584 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10585 = x10584 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10586 = x10574 + x10585;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10587 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10587 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10588 = x10587 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10589 = x10577 + x10588;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10590 = args[2][219 * steps + ((cycle - 0) & mask)];
          assert(x10590 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10591 = x10590 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10592 = x10580 + x10591;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10593 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10593 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10594 = x10593 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10595 = x10583 + x10594;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10596 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10596 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10597 = x10596 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10598 = x10586 + x10597;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10599 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10599 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10600 = x10599 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10601 = x10589 + x10600;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10602 = args[2][220 * steps + ((cycle - 0) & mask)];
          assert(x10602 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10603 = x10602 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10604 = x10592 + x10603;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10605 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10605 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10606 = x10605 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10607 = x10595 + x10606;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10608 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10608 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10609 = x10608 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10610 = x10598 + x10609;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10611 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10611 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10612 = x10611 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10613 = x10601 + x10612;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10614 = args[2][221 * steps + ((cycle - 0) & mask)];
          assert(x10614 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10615 = x10614 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10616 = x10604 + x10615;
          host_args.at(0) = x10528;
          host_args.at(1) = x10433;
          host_args.at(2) = x10434;
          host_args.at(3) = x10435;
          host_args.at(4) = x10436;
          host_args.at(5) = x10616;
          host_args.at(6) = x10613;
          host_args.at(7) = x10610;
          host_args.at(8) = x10607;
          host(ctx, "log", "  io1: [%10x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./cirgen/components/u32.h":25:12)
          auto x10617 = x10424 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10618 = x10423 + x10617;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10619 = x10425 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10620 = x10618 + x10619;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10621 = x10426 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10622 = x10620 + x10621;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10623 = x10523 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10624 = x10526 + x10623;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10625 = x10520 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10626 = x10624 + x10625;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10627 = x10517 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10628 = x10626 + x10627;
          // loc("cirgen/circuit/rv32im/sha.cpp":410:10)
          auto x10629 = x10622 - x10628;
          // loc("cirgen/circuit/rv32im/sha.cpp":410:10)
          if (x10629 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:410");
          // loc("./cirgen/components/u32.h":25:12)
          auto x10630 = x10434 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10631 = x10433 + x10630;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10632 = x10435 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10633 = x10631 + x10632;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10634 = x10436 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10635 = x10633 + x10634;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10636 = x10613 * x88;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10637 = x10616 + x10636;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10638 = x10610 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10639 = x10637 + x10638;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10640 = x10607 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10641 = x10639 + x10640;
          // loc("cirgen/circuit/rv32im/sha.cpp":411:10)
          auto x10642 = x10635 - x10641;
          // loc("cirgen/circuit/rv32im/sha.cpp":411:10)
          if (x10642 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:411");
        }
        if (x10416 != 0) {
          // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10643 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x10643 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":414:27)
          auto x10644 = x10643 + x8574;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10645 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10645 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10646 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10646 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10647 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10647 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10648 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10648 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10649 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10649 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10650 = x10649 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10651 = x10645 + x10650;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10652 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10652 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10653 = x10652 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10654 = x10646 + x10653;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10655 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10655 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10656 = x10655 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10657 = x10647 + x10656;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10658 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10658 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10659 = x10658 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10660 = x10648 + x10659;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10661 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10661 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10662 = x10661 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10663 = x10651 + x10662;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10664 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10664 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10665 = x10664 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10666 = x10654 + x10665;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10667 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10667 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10668 = x10667 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10669 = x10657 + x10668;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10670 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10670 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10671 = x10670 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10672 = x10660 + x10671;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10673 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10673 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10674 = x10673 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10675 = x10663 + x10674;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10676 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10676 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10677 = x10676 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10678 = x10666 + x10677;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10679 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10679 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10680 = x10679 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10681 = x10669 + x10680;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10682 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10682 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10683 = x10682 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10684 = x10672 + x10683;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10685 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10685 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10686 = x10685 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10687 = x10675 + x10686;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10688 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10688 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10689 = x10688 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10690 = x10678 + x10689;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10691 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10691 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10692 = x10691 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10693 = x10681 + x10692;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10694 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10694 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10695 = x10694 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10696 = x10684 + x10695;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10697 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10697 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10698 = x10697 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10699 = x10687 + x10698;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10700 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10700 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10701 = x10700 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10702 = x10690 + x10701;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10703 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10703 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10704 = x10703 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10705 = x10693 + x10704;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10706 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10706 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10707 = x10706 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10708 = x10696 + x10707;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10709 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10709 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10710 = x10709 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10711 = x10699 + x10710;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10712 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10712 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10713 = x10712 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10714 = x10702 + x10713;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10715 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10715 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10716 = x10715 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10717 = x10705 + x10716;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10718 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10718 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10719 = x10718 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10720 = x10708 + x10719;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10721 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10721 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10722 = x10721 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10723 = x10711 + x10722;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10724 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10724 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10725 = x10724 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10726 = x10714 + x10725;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10727 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10727 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10728 = x10727 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10729 = x10717 + x10728;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10730 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10730 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10731 = x10730 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10732 = x10720 + x10731;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10732);
            reg = x10732;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10729);
            reg = x10729;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10726);
            reg = x10726;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10723);
            reg = x10723;
          }
          {
            host_args.at(0) = x10644;
            host_args.at(1) = x10732;
            host_args.at(2) = x10729;
            host_args.at(3) = x10726;
            host_args.at(4) = x10723;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10733 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10733 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10734 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10734 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10735 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10735 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10736 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10736 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10644);
            reg = x10644;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10733);
            reg = x10733;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10734);
            reg = x10734;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10735);
            reg = x10735;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10736);
            reg = x10736;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":415:27)
          auto x10737 = x10643 + x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":415:27)
          auto x10738 = x10737 + x8574;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10739 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10739 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10740 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10740 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10741 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10741 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10742 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x10742 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10743 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10743 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10744 = x10743 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10745 = x10739 + x10744;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10746 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10746 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10747 = x10746 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10748 = x10740 + x10747;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10749 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10749 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10750 = x10749 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10751 = x10741 + x10750;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10752 = args[2][215 * steps + ((cycle - 0) & mask)];
          assert(x10752 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10753 = x10752 * x90;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10754 = x10742 + x10753;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10755 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10755 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10756 = x10755 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10757 = x10745 + x10756;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10758 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10758 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10759 = x10758 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10760 = x10748 + x10759;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10761 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10761 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10762 = x10761 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10763 = x10751 + x10762;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10764 = args[2][216 * steps + ((cycle - 0) & mask)];
          assert(x10764 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10765 = x10764 * x76;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10766 = x10754 + x10765;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10767 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10767 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10768 = x10767 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10769 = x10757 + x10768;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10770 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10770 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10771 = x10770 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10772 = x10760 + x10771;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10773 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10773 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10774 = x10773 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10775 = x10763 + x10774;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10776 = args[2][217 * steps + ((cycle - 0) & mask)];
          assert(x10776 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10777 = x10776 * x69;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10778 = x10766 + x10777;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10779 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10779 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10780 = x10779 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10781 = x10769 + x10780;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10782 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10782 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10783 = x10782 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10784 = x10772 + x10783;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10785 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10785 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10786 = x10785 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10787 = x10775 + x10786;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10788 = args[2][218 * steps + ((cycle - 0) & mask)];
          assert(x10788 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10789 = x10788 * x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10790 = x10778 + x10789;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10791 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10791 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10792 = x10791 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10793 = x10781 + x10792;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10794 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10794 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10795 = x10794 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10796 = x10784 + x10795;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10797 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10797 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10798 = x10797 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10799 = x10787 + x10798;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10800 = args[2][219 * steps + ((cycle - 0) & mask)];
          assert(x10800 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10801 = x10800 * x58;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10802 = x10790 + x10801;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10803 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10803 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10804 = x10803 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10805 = x10793 + x10804;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10806 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10806 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10807 = x10806 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10808 = x10796 + x10807;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10809 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10809 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10810 = x10809 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10811 = x10799 + x10810;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10812 = args[2][220 * steps + ((cycle - 0) & mask)];
          assert(x10812 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10813 = x10812 * x52;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10814 = x10802 + x10813;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10815 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10815 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10816 = x10815 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10817 = x10805 + x10816;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10818 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10818 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10819 = x10818 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10820 = x10808 + x10819;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10821 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10821 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10822 = x10821 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10823 = x10811 + x10822;
          // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10824 = args[2][221 * steps + ((cycle - 0) & mask)];
          assert(x10824 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10825 = x10824 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10826 = x10814 + x10825;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10826);
            reg = x10826;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10823);
            reg = x10823;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10820);
            reg = x10820;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10817);
            reg = x10817;
          }
          {
            host_args.at(0) = x10738;
            host_args.at(1) = x10826;
            host_args.at(2) = x10823;
            host_args.at(3) = x10820;
            host_args.at(4) = x10817;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10827 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x10827 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10828 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x10828 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10829 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x10829 != Fp::invalid());
          // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x10830 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x10830 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10738);
            reg = x10738;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10827);
            reg = x10827;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10828);
            reg = x10828;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10829);
            reg = x10829;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10830);
            reg = x10830;
          }
        }
      }
      if (x8592 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        if (x8582 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10831 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x10831 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10832 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x10832 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10833 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x10833 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10834 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x10834 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10835 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x10835 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10836 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x10836 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10837 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x10837 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10838 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x10838 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10839 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x10839 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10840 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x10840 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10841 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x10841 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10842 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x10842 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10843 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x10843 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10844 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x10844 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10845 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x10845 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10846 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x10846 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10847 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x10847 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10848 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x10848 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10849 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x10849 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10850 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x10850 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10851 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x10851 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10852 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x10852 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10853 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x10853 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10854 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x10854 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10855 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x10855 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10856 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x10856 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10857 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x10857 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10858 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x10858 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10859 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x10859 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10860 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x10860 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10861 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x10861 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10862 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x10862 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10863 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x10863 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10864 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x10864 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10865 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x10865 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10866 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x10866 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10867 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x10867 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10868 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x10868 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10869 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x10869 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10870 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x10870 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10871 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x10871 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10872 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x10872 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10873 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x10873 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10874 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x10874 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10875 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x10875 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10876 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x10876 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10877 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x10877 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10878 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x10878 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10879 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x10879 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10880 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x10880 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10881 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x10881 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10882 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x10882 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10883 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x10883 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10884 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x10884 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10885 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x10885 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10886 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x10886 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10887 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x10887 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10888 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x10888 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10889 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x10889 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10890 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x10890 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10891 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x10891 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10892 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x10892 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10893 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x10893 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10894 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x10894 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10895 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x10895 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10896 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x10896 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10897 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x10897 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10898 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x10898 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10899 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x10899 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10900 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x10900 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10901 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x10901 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10902 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x10902 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10903 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x10903 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10904 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x10904 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10905 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x10905 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10906 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x10906 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10907 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x10907 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10908 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x10908 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10909 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x10909 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10910 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x10910 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10911 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x10911 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10912 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x10912 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10913 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x10913 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10914 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x10914 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10915 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x10915 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10916 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x10916 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10917 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x10917 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10918 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x10918 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10919 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x10919 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10920 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x10920 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10921 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x10921 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10922 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x10922 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10923 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x10923 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10924 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x10924 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10925 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x10925 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10926 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x10926 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10927 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x10927 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10928 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x10928 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10929 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x10929 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10930 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x10930 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10931 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x10931 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10932 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x10932 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10933 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x10933 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10934 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x10934 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10935 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x10935 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10936 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x10936 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10937 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x10937 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10938 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x10938 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10939 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x10939 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10940 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x10940 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10941 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x10941 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10942 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x10942 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10943 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x10943 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10944 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x10944 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10945 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x10945 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10946 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x10946 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10947 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x10947 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10948 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x10948 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10949 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x10949 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10950 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x10950 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10951 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x10951 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10952 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x10952 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10953 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x10953 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10954 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x10954 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10955 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x10955 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10956 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x10956 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10957 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x10957 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10958 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x10958 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10959 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x10959 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10960 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x10960 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10961 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x10961 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10962 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x10962 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10963 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x10963 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10964 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x10964 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10965 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x10965 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10966 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x10966 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10967 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x10967 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10968 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x10968 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10969 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x10969 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10970 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x10970 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10971 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x10971 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10972 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x10972 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10973 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x10973 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10974 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x10974 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10975 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x10975 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10976 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x10976 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10977 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x10977 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10978 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x10978 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10979 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x10979 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10980 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x10980 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10981 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x10981 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10982 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x10982 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10983 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x10983 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10984 = args[2][215 * steps + ((cycle - 1) & mask)];
      assert(x10984 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10985 = args[2][216 * steps + ((cycle - 1) & mask)];
      assert(x10985 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10986 = args[2][217 * steps + ((cycle - 1) & mask)];
      assert(x10986 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10987 = args[2][218 * steps + ((cycle - 1) & mask)];
      assert(x10987 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10988 = args[2][219 * steps + ((cycle - 1) & mask)];
      assert(x10988 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10989 = args[2][220 * steps + ((cycle - 1) & mask)];
      assert(x10989 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10990 = args[2][221 * steps + ((cycle - 1) & mask)];
      assert(x10990 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10991 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x10991 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10992 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x10992 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10993 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x10993 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10994 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x10994 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10995 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x10995 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10996 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x10996 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10997 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x10997 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10998 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x10998 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x10999 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x10999 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11000 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x11000 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11001 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x11001 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11002 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x11002 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11003 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x11003 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11004 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x11004 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11005 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x11005 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11006 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x11006 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11007 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x11007 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11008 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x11008 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11009 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x11009 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11010 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x11010 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11011 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x11011 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11012 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x11012 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11013 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x11013 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11014 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x11014 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11015 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x11015 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11016 = args[2][215 * steps + ((cycle - 2) & mask)];
      assert(x11016 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11017 = args[2][216 * steps + ((cycle - 2) & mask)];
      assert(x11017 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11018 = args[2][217 * steps + ((cycle - 2) & mask)];
      assert(x11018 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11019 = args[2][218 * steps + ((cycle - 2) & mask)];
      assert(x11019 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11020 = args[2][219 * steps + ((cycle - 2) & mask)];
      assert(x11020 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11021 = args[2][220 * steps + ((cycle - 2) & mask)];
      assert(x11021 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11022 = args[2][221 * steps + ((cycle - 2) & mask)];
      assert(x11022 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11023 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x11023 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11024 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x11024 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11025 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x11025 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11026 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x11026 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11027 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x11027 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11028 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x11028 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11029 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x11029 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11030 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x11030 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11031 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x11031 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11032 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x11032 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11033 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x11033 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11034 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x11034 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11035 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x11035 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11036 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x11036 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11037 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x11037 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11038 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x11038 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11039 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x11039 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11040 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x11040 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11041 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x11041 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11042 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x11042 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11043 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x11043 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11044 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x11044 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11045 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x11045 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11046 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x11046 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11047 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x11047 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11048 = args[2][215 * steps + ((cycle - 3) & mask)];
      assert(x11048 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11049 = args[2][216 * steps + ((cycle - 3) & mask)];
      assert(x11049 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11050 = args[2][217 * steps + ((cycle - 3) & mask)];
      assert(x11050 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11051 = args[2][218 * steps + ((cycle - 3) & mask)];
      assert(x11051 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11052 = args[2][219 * steps + ((cycle - 3) & mask)];
      assert(x11052 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11053 = args[2][220 * steps + ((cycle - 3) & mask)];
      assert(x11053 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11054 = args[2][221 * steps + ((cycle - 3) & mask)];
      assert(x11054 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11055 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x11055 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11056 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x11056 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11057 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x11057 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11058 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x11058 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11059 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x11059 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11060 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x11060 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11061 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x11061 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11062 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x11062 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11063 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x11063 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11064 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x11064 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11065 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x11065 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11066 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x11066 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11067 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x11067 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11068 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x11068 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11069 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x11069 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11070 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x11070 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11071 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x11071 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11072 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x11072 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11073 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x11073 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11074 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x11074 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11075 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x11075 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11076 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x11076 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11077 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x11077 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11078 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x11078 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11079 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x11079 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11080 = args[2][215 * steps + ((cycle - 4) & mask)];
      assert(x11080 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11081 = args[2][216 * steps + ((cycle - 4) & mask)];
      assert(x11081 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11082 = args[2][217 * steps + ((cycle - 4) & mask)];
      assert(x11082 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11083 = args[2][218 * steps + ((cycle - 4) & mask)];
      assert(x11083 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11084 = args[2][219 * steps + ((cycle - 4) & mask)];
      assert(x11084 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11085 = args[2][220 * steps + ((cycle - 4) & mask)];
      assert(x11085 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11086 = args[2][221 * steps + ((cycle - 4) & mask)];
      assert(x11086 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11087 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x11087 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11088 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x11088 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11089 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x11089 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11090 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x11090 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11091 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x11091 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11092 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x11092 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11093 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x11093 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11094 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x11094 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11095 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x11095 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11096 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x11096 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11097 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11097 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11098 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11098 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11099 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x11099 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11100 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x11100 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11101 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x11101 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11102 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x11102 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11103 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x11103 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11104 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11104 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11105 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11105 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11106 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11106 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11107 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11107 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11108 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11108 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11109 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11109 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11110 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11110 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11111 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11111 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11112 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11112 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11113 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11113 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11114 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11114 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11115 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11115 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11116 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11116 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11117 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11117 != Fp::invalid());
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11118 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11118 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11119 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x11119 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11120 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x11120 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11121 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x11121 != Fp::invalid());
      // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x11122 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x11122 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x11123 = x11120 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x11124 = x11119 + x11123;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x11125 = x11122 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x11126 = x11121 + x11125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11127 = x10844 + x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11128 = x10844 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11129 = x11128 * x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11130 = x11127 - x11129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11131 = x10845 + x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11132 = x10845 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11133 = x11132 * x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11134 = x11131 - x11133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11135 = x10846 + x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11136 = x10846 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11137 = x11136 * x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11138 = x11135 - x11137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11139 = x10847 + x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11140 = x10847 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11141 = x11140 * x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11142 = x11139 - x11141;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11143 = x10848 + x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11144 = x10848 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11145 = x11144 * x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11146 = x11143 - x11145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11147 = x10849 + x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11148 = x10849 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11149 = x11148 * x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11150 = x11147 - x11149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11151 = x10850 + x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11152 = x10850 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11153 = x11152 * x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11154 = x11151 - x11153;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11155 = x10851 + x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11156 = x10851 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11157 = x11156 * x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11158 = x11155 - x11157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11159 = x10852 + x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11160 = x10852 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11161 = x11160 * x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11162 = x11159 - x11161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11163 = x10853 + x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11164 = x10853 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11165 = x11164 * x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11166 = x11163 - x11165;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11167 = x10854 + x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11168 = x10854 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11169 = x11168 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11170 = x11167 - x11169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11171 = x10855 + x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11172 = x10855 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11173 = x11172 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11174 = x11171 - x11173;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11175 = x10856 + x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11176 = x10856 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11177 = x11176 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11178 = x11175 - x11177;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11179 = x10857 + x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11180 = x10857 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11181 = x11180 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11182 = x11179 - x11181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11183 = x10858 + x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11184 = x10858 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11185 = x11184 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11186 = x11183 - x11185;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11187 = x10859 + x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11188 = x10859 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11189 = x11188 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11190 = x11187 - x11189;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11191 = x10860 + x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11192 = x10860 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11193 = x11192 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11194 = x11191 - x11193;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11195 = x10861 + x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11196 = x10861 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11197 = x11196 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11198 = x11195 - x11197;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11199 = x10862 + x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11200 = x10862 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11201 = x11200 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11202 = x11199 - x11201;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11203 = x10831 + x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11204 = x10831 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11205 = x11204 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11206 = x11203 - x11205;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11207 = x10832 + x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11208 = x10832 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11209 = x11208 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11210 = x11207 - x11209;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11211 = x10833 + x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11212 = x10833 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11213 = x11212 * x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11214 = x11211 - x11213;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11215 = x10834 + x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11216 = x10834 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11217 = x11216 * x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11218 = x11215 - x11217;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11219 = x10835 + x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11220 = x10835 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11221 = x11220 * x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11222 = x11219 - x11221;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11223 = x10836 + x10845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11224 = x10836 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11225 = x11224 * x10845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11226 = x11223 - x11225;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11227 = x10837 + x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11228 = x10837 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11229 = x11228 * x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11230 = x11227 - x11229;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11231 = x10838 + x10847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11232 = x10838 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11233 = x11232 * x10847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11234 = x11231 - x11233;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11235 = x10839 + x10848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11236 = x10839 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11237 = x11236 * x10848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11238 = x11235 - x11237;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11239 = x10840 + x10849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11240 = x10840 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11241 = x11240 * x10849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11242 = x11239 - x11241;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11243 = x10841 + x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11244 = x10841 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11245 = x11244 * x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11246 = x11243 - x11245;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11247 = x10842 + x10851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11248 = x10842 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11249 = x11248 * x10851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11250 = x11247 - x11249;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11251 = x10843 + x10852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11252 = x10843 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11253 = x11252 * x10852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11254 = x11251 - x11253;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11255 = x10833 + x11130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11256 = x11212 * x11130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11257 = x11255 - x11256;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11258 = x10834 + x11134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11259 = x11216 * x11134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11260 = x11258 - x11259;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11261 = x10835 + x11138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11262 = x11220 * x11138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11263 = x11261 - x11262;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11264 = x10836 + x11142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11265 = x11224 * x11142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11266 = x11264 - x11265;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11267 = x10837 + x11146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11268 = x11228 * x11146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11269 = x11267 - x11268;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11270 = x10838 + x11150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11271 = x11232 * x11150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11272 = x11270 - x11271;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11273 = x10839 + x11154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11274 = x11236 * x11154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11275 = x11273 - x11274;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11276 = x10840 + x11158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11277 = x11240 * x11158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11278 = x11276 - x11277;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11279 = x10841 + x11162;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11280 = x11244 * x11162;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11281 = x11279 - x11280;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11282 = x10842 + x11166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11283 = x11248 * x11166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11284 = x11282 - x11283;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11285 = x10843 + x11170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11286 = x11252 * x11170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11287 = x11285 - x11286;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11288 = x10844 + x11174;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11289 = x11128 * x11174;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11290 = x11288 - x11289;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11291 = x10845 + x11178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11292 = x11132 * x11178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11293 = x11291 - x11292;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11294 = x10846 + x11182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11295 = x11136 * x11182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11296 = x11294 - x11295;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11297 = x10847 + x11186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11298 = x11140 * x11186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11299 = x11297 - x11298;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11300 = x10848 + x11190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11301 = x11144 * x11190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11302 = x11300 - x11301;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11303 = x10849 + x11194;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11304 = x11148 * x11194;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11305 = x11303 - x11304;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11306 = x10850 + x11198;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11307 = x11152 * x11198;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11308 = x11306 - x11307;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11309 = x10851 + x11202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11310 = x11156 * x11202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11311 = x11309 - x11310;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11312 = x10852 + x11206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11313 = x11160 * x11206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11314 = x11312 - x11313;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11315 = x10853 + x11210;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11316 = x11164 * x11210;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11317 = x11315 - x11316;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11318 = x10854 + x11214;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11319 = x11168 * x11214;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11320 = x11318 - x11319;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11321 = x10855 + x11218;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11322 = x11172 * x11218;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11323 = x11321 - x11322;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11324 = x10856 + x11222;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11325 = x11176 * x11222;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11326 = x11324 - x11325;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11327 = x10857 + x11226;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11328 = x11180 * x11226;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11329 = x11327 - x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11330 = x10858 + x11230;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11331 = x11184 * x11230;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11332 = x11330 - x11331;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11333 = x10859 + x11234;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11334 = x11188 * x11234;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11335 = x11333 - x11334;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11336 = x10860 + x11238;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11337 = x11192 * x11238;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11338 = x11336 - x11337;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11339 = x10861 + x11242;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11340 = x11196 * x11242;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11341 = x11339 - x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11342 = x10862 + x11246;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11343 = x11200 * x11246;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11344 = x11342 - x11343;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11345 = x10831 + x11250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11346 = x11204 * x11250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11347 = x11345 - x11346;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11348 = x10832 + x11254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11349 = x11208 * x11254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11350 = x11348 - x11349;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11351 = x10970 + x10984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11352 = x10970 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11353 = x11352 * x10984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11354 = x11351 - x11353;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11355 = x10971 + x10985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11356 = x10971 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11357 = x11356 * x10985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11358 = x11355 - x11357;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11359 = x10972 + x10986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11360 = x10972 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11361 = x11360 * x10986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11362 = x11359 - x11361;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11363 = x10973 + x10987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11364 = x10973 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11365 = x11364 * x10987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11366 = x11363 - x11365;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11367 = x10974 + x10988;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11368 = x10974 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11369 = x11368 * x10988;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11370 = x11367 - x11369;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11371 = x10975 + x10989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11372 = x10975 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11373 = x11372 * x10989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11374 = x11371 - x11373;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11375 = x10976 + x10990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11376 = x10976 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11377 = x11376 * x10990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11378 = x11375 - x11377;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11379 = x10977 + x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11380 = x10977 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11381 = x11380 * x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11382 = x11379 - x11381;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11383 = x10978 + x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11384 = x10978 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11385 = x11384 * x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11386 = x11383 - x11385;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11387 = x10979 + x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11388 = x10979 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11389 = x11388 * x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11390 = x11387 - x11389;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11391 = x10980 + x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11392 = x10980 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11393 = x11392 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11394 = x11391 - x11393;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11395 = x10981 + x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11396 = x10981 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11397 = x11396 * x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11398 = x11395 - x11397;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11399 = x10982 + x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11400 = x10982 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11401 = x11400 * x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11402 = x11399 - x11401;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11403 = x10983 + x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11404 = x10983 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11405 = x11404 * x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11406 = x11403 - x11405;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11407 = x10984 + x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11408 = x10984 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11409 = x11408 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11410 = x11407 - x11409;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11411 = x10985 + x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11412 = x10985 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11413 = x11412 * x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11414 = x11411 - x11413;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11415 = x10986 + x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11416 = x10986 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11417 = x11416 * x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11418 = x11415 - x11417;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11419 = x10987 + x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11420 = x10987 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11421 = x11420 * x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11422 = x11419 - x11421;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11423 = x10988 + x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11424 = x10988 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11425 = x11424 * x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11426 = x11423 - x11425;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11427 = x10989 + x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11428 = x10989 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11429 = x11428 * x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11430 = x11427 - x11429;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11431 = x10990 + x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11432 = x10990 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11433 = x11432 * x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11434 = x11431 - x11433;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11435 = x10959 + x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11436 = x10959 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11437 = x11436 * x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11438 = x11435 - x11437;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11439 = x10960 + x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11440 = x10960 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11441 = x11440 * x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11442 = x11439 - x11441;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11443 = x10961 + x10975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11444 = x10961 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11445 = x11444 * x10975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11446 = x11443 - x11445;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11447 = x10962 + x10976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11448 = x10962 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11449 = x11448 * x10976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11450 = x11447 - x11449;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11451 = x10963 + x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11452 = x10963 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11453 = x11452 * x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11454 = x11451 - x11453;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11455 = x10964 + x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11456 = x10964 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11457 = x11456 * x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11458 = x11455 - x11457;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11459 = x10965 + x10979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11460 = x10965 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11461 = x11460 * x10979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11462 = x11459 - x11461;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11463 = x10966 + x10980;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11464 = x10966 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11465 = x11464 * x10980;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11466 = x11463 - x11465;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11467 = x10967 + x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11468 = x10967 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11469 = x11468 * x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11470 = x11467 - x11469;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11471 = x10968 + x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11472 = x10968 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11473 = x11472 * x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11474 = x11471 - x11473;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11475 = x10969 + x10983;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11476 = x10969 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11477 = x11476 * x10983;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11478 = x11475 - x11477;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11479 = x10965 + x11354;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11480 = x11460 * x11354;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11481 = x11479 - x11480;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11482 = x10966 + x11358;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11483 = x11464 * x11358;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11484 = x11482 - x11483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11485 = x10967 + x11362;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11486 = x11468 * x11362;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11487 = x11485 - x11486;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11488 = x10968 + x11366;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11489 = x11472 * x11366;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11490 = x11488 - x11489;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11491 = x10969 + x11370;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11492 = x11476 * x11370;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11493 = x11491 - x11492;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11494 = x10970 + x11374;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11495 = x11352 * x11374;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11496 = x11494 - x11495;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11497 = x10971 + x11378;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11498 = x11356 * x11378;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11499 = x11497 - x11498;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11500 = x10972 + x11382;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11501 = x11360 * x11382;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11502 = x11500 - x11501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11503 = x10973 + x11386;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11504 = x11364 * x11386;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11505 = x11503 - x11504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11506 = x10974 + x11390;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11507 = x11368 * x11390;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11508 = x11506 - x11507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11509 = x10975 + x11394;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11510 = x11372 * x11394;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11511 = x11509 - x11510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11512 = x10976 + x11398;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11513 = x11376 * x11398;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11514 = x11512 - x11513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11515 = x10977 + x11402;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11516 = x11380 * x11402;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11517 = x11515 - x11516;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11518 = x10978 + x11406;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11519 = x11384 * x11406;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11520 = x11518 - x11519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11521 = x10979 + x11410;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11522 = x11388 * x11410;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11523 = x11521 - x11522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11524 = x10980 + x11414;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11525 = x11392 * x11414;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11526 = x11524 - x11525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11527 = x10981 + x11418;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11528 = x11396 * x11418;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11529 = x11527 - x11528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11530 = x10982 + x11422;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11531 = x11400 * x11422;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11532 = x11530 - x11531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11533 = x10983 + x11426;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11534 = x11404 * x11426;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11535 = x11533 - x11534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11536 = x10984 + x11430;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11537 = x11408 * x11430;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11538 = x11536 - x11537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11539 = x10985 + x11434;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11540 = x11412 * x11434;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11541 = x11539 - x11540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11542 = x10986 + x11438;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11543 = x11416 * x11438;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11544 = x11542 - x11543;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11545 = x10987 + x11442;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11546 = x11420 * x11442;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11547 = x11545 - x11546;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11548 = x10988 + x11446;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11549 = x11424 * x11446;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11550 = x11548 - x11549;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11551 = x10989 + x11450;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11552 = x11428 * x11450;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11553 = x11551 - x11552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11554 = x10990 + x11454;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11555 = x11432 * x11454;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11556 = x11554 - x11555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11557 = x10959 + x11458;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11558 = x11436 * x11458;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11559 = x11557 - x11558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11560 = x10960 + x11462;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11561 = x11440 * x11462;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11562 = x11560 - x11561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11563 = x10961 + x11466;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11564 = x11444 * x11466;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11565 = x11563 - x11564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11566 = x10962 + x11470;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11567 = x11448 * x11470;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11568 = x11566 - x11567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11569 = x10963 + x11474;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11570 = x11452 * x11474;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11571 = x11569 - x11570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11572 = x10964 + x11478;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11573 = x11456 * x11478;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11574 = x11572 - x11573;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11575 = x11088 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11576 = x11087 + x11575;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11577 = x11089 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11578 = x11576 + x11577;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11579 = x11090 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11580 = x11578 + x11579;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11581 = x11091 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11582 = x11580 + x11581;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11583 = x11092 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11584 = x11582 + x11583;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11585 = x11093 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11586 = x11584 + x11585;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11587 = x11094 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11588 = x11586 + x11587;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11589 = x11095 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11590 = x11588 + x11589;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11591 = x11096 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11592 = x11590 + x11591;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11593 = x11097 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11594 = x11592 + x11593;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11595 = x11098 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11596 = x11594 + x11595;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11597 = x11099 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11598 = x11596 + x11597;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11599 = x11100 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11600 = x11598 + x11599;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11601 = x11101 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11602 = x11600 + x11601;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11603 = x11102 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11604 = x11602 + x11603;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11605 = x11104 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11606 = x11103 + x11605;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11607 = x11105 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11608 = x11606 + x11607;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11609 = x11106 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11610 = x11608 + x11609;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11611 = x11107 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11612 = x11610 + x11611;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11613 = x11108 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11614 = x11612 + x11613;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11615 = x11109 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11616 = x11614 + x11615;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11617 = x11110 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11618 = x11616 + x11617;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11619 = x11111 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11620 = x11618 + x11619;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11621 = x11112 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11622 = x11620 + x11621;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11623 = x11113 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11624 = x11622 + x11623;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11625 = x11114 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11626 = x11624 + x11625;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11627 = x11115 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11628 = x11626 + x11627;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11629 = x11116 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11630 = x11628 + x11629;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11631 = x11117 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11632 = x11630 + x11631;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11633 = x11118 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11634 = x11632 + x11633;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11635 = x11056 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11636 = x11055 + x11635;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11637 = x11057 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11638 = x11636 + x11637;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11639 = x11058 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11640 = x11638 + x11639;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11641 = x11059 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11642 = x11640 + x11641;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11643 = x11060 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11644 = x11642 + x11643;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11645 = x11061 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11646 = x11644 + x11645;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11647 = x11062 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11648 = x11646 + x11647;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11649 = x11063 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11650 = x11648 + x11649;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11651 = x11064 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11652 = x11650 + x11651;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11653 = x11065 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11654 = x11652 + x11653;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11655 = x11066 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11656 = x11654 + x11655;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11657 = x11067 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11658 = x11656 + x11657;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11659 = x11068 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11660 = x11658 + x11659;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11661 = x11069 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11662 = x11660 + x11661;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11663 = x11070 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11664 = x11662 + x11663;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11665 = x11072 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11666 = x11071 + x11665;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11667 = x11073 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11668 = x11666 + x11667;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11669 = x11074 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11670 = x11668 + x11669;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11671 = x11075 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11672 = x11670 + x11671;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11673 = x11076 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11674 = x11672 + x11673;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11675 = x11077 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11676 = x11674 + x11675;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11677 = x11078 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11678 = x11676 + x11677;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11679 = x11079 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11680 = x11678 + x11679;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11681 = x11080 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11682 = x11680 + x11681;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11683 = x11081 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11684 = x11682 + x11683;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11685 = x11082 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11686 = x11684 + x11685;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11687 = x11083 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11688 = x11686 + x11687;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11689 = x11084 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11690 = x11688 + x11689;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11691 = x11085 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11692 = x11690 + x11691;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11693 = x11086 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11694 = x11692 + x11693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11695 = x10959 * x10991;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11696 = x93 - x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11697 = x11696 * x11023;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11698 = x11695 + x11697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11699 = x10960 * x10992;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11700 = x93 - x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11701 = x11700 * x11024;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11702 = x11699 + x11701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11703 = x10961 * x10993;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11704 = x93 - x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11705 = x11704 * x11025;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11706 = x11703 + x11705;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11707 = x10962 * x10994;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11708 = x93 - x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11709 = x11708 * x11026;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11710 = x11707 + x11709;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11711 = x10963 * x10995;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11712 = x93 - x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11713 = x11712 * x11027;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11714 = x11711 + x11713;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11715 = x10964 * x10996;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11716 = x93 - x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11717 = x11716 * x11028;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11718 = x11715 + x11717;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11719 = x10965 * x10997;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11720 = x93 - x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11721 = x11720 * x11029;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11722 = x11719 + x11721;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11723 = x10966 * x10998;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11724 = x93 - x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11725 = x11724 * x11030;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11726 = x11723 + x11725;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11727 = x10967 * x10999;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11728 = x93 - x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11729 = x11728 * x11031;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11730 = x11727 + x11729;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11731 = x10968 * x11000;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11732 = x93 - x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11733 = x11732 * x11032;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11734 = x11731 + x11733;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11735 = x10969 * x11001;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11736 = x93 - x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11737 = x11736 * x11033;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11738 = x11735 + x11737;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11739 = x10970 * x11002;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11740 = x93 - x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11741 = x11740 * x11034;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11742 = x11739 + x11741;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11743 = x10971 * x11003;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11744 = x93 - x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11745 = x11744 * x11035;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11746 = x11743 + x11745;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11747 = x10972 * x11004;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11748 = x93 - x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11749 = x11748 * x11036;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11750 = x11747 + x11749;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11751 = x10973 * x11005;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11752 = x93 - x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11753 = x11752 * x11037;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11754 = x11751 + x11753;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11755 = x10974 * x11006;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11756 = x93 - x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11757 = x11756 * x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11758 = x11755 + x11757;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11759 = x10975 * x11007;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11760 = x93 - x10975;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11761 = x11760 * x11039;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11762 = x11759 + x11761;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11763 = x10976 * x11008;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11764 = x93 - x10976;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11765 = x11764 * x11040;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11766 = x11763 + x11765;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11767 = x10977 * x11009;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11768 = x93 - x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11769 = x11768 * x11041;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11770 = x11767 + x11769;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11771 = x10978 * x11010;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11772 = x93 - x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11773 = x11772 * x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11774 = x11771 + x11773;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11775 = x10979 * x11011;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11776 = x93 - x10979;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11777 = x11776 * x11043;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11778 = x11775 + x11777;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11779 = x10980 * x11012;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11780 = x93 - x10980;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11781 = x11780 * x11044;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11782 = x11779 + x11781;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11783 = x10981 * x11013;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11784 = x93 - x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11785 = x11784 * x11045;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11786 = x11783 + x11785;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11787 = x10982 * x11014;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11788 = x93 - x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11789 = x11788 * x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11790 = x11787 + x11789;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11791 = x10983 * x11015;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11792 = x93 - x10983;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11793 = x11792 * x11047;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11794 = x11791 + x11793;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11795 = x10984 * x11016;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11796 = x93 - x10984;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11797 = x11796 * x11048;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11798 = x11795 + x11797;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11799 = x10985 * x11017;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11800 = x93 - x10985;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11801 = x11800 * x11049;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11802 = x11799 + x11801;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11803 = x10986 * x11018;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11804 = x93 - x10986;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11805 = x11804 * x11050;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11806 = x11803 + x11805;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11807 = x10987 * x11019;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11808 = x93 - x10987;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11809 = x11808 * x11051;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11810 = x11807 + x11809;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11811 = x10988 * x11020;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11812 = x93 - x10988;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11813 = x11812 * x11052;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11814 = x11811 + x11813;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11815 = x10989 * x11021;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11816 = x93 - x10989;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11817 = x11816 * x11053;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11818 = x11815 + x11817;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11819 = x10990 * x11022;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11820 = x93 - x10990;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11821 = x11820 * x11054;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11822 = x11819 + x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11823 = x11702 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11824 = x11698 + x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11825 = x11706 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11826 = x11824 + x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11827 = x11710 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11828 = x11826 + x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11829 = x11714 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11830 = x11828 + x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11831 = x11718 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11832 = x11830 + x11831;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11833 = x11722 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11834 = x11832 + x11833;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11835 = x11726 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11836 = x11834 + x11835;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11837 = x11730 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11838 = x11836 + x11837;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11839 = x11734 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11840 = x11838 + x11839;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11841 = x11738 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11842 = x11840 + x11841;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11843 = x11742 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11844 = x11842 + x11843;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11845 = x11746 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11846 = x11844 + x11845;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11847 = x11750 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11848 = x11846 + x11847;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11849 = x11754 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11850 = x11848 + x11849;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11851 = x11758 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11852 = x11850 + x11851;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11853 = x11766 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11854 = x11762 + x11853;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11855 = x11770 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11856 = x11854 + x11855;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11857 = x11774 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11858 = x11856 + x11857;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11859 = x11778 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11860 = x11858 + x11859;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11861 = x11782 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11862 = x11860 + x11861;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11863 = x11786 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11864 = x11862 + x11863;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11865 = x11790 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11866 = x11864 + x11865;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11867 = x11794 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11868 = x11866 + x11867;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11869 = x11798 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11870 = x11868 + x11869;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11871 = x11802 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11872 = x11870 + x11871;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11873 = x11806 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11874 = x11872 + x11873;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11875 = x11810 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11876 = x11874 + x11875;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11877 = x11814 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11878 = x11876 + x11877;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11879 = x11818 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11880 = x11878 + x11879;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11881 = x11822 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11882 = x11880 + x11881;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11883 = x11484 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11884 = x11481 + x11883;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11885 = x11487 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11886 = x11884 + x11885;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11887 = x11490 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11888 = x11886 + x11887;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11889 = x11493 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11890 = x11888 + x11889;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11891 = x11496 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11892 = x11890 + x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11893 = x11499 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11894 = x11892 + x11893;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11895 = x11502 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11896 = x11894 + x11895;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11897 = x11505 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11898 = x11896 + x11897;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11899 = x11508 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11900 = x11898 + x11899;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11901 = x11511 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11902 = x11900 + x11901;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11903 = x11514 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11904 = x11902 + x11903;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11905 = x11517 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11906 = x11904 + x11905;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11907 = x11520 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11908 = x11906 + x11907;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11909 = x11523 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11910 = x11908 + x11909;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11911 = x11526 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11912 = x11910 + x11911;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11913 = x11532 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11914 = x11529 + x11913;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11915 = x11535 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11916 = x11914 + x11915;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11917 = x11538 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11918 = x11916 + x11917;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11919 = x11541 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11920 = x11918 + x11919;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11921 = x11544 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11922 = x11920 + x11921;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11923 = x11547 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11924 = x11922 + x11923;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11925 = x11550 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11926 = x11924 + x11925;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11927 = x11553 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11928 = x11926 + x11927;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11929 = x11556 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11930 = x11928 + x11929;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11931 = x11559 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11932 = x11930 + x11931;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11933 = x11562 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11934 = x11932 + x11933;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11935 = x11565 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11936 = x11934 + x11935;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11937 = x11568 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11938 = x11936 + x11937;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11939 = x11571 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11940 = x11938 + x11939;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11941 = x11574 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11942 = x11940 + x11941;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11943 = x11852 + x11912;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11944 = x11882 + x11942;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11945 = x11664 + x11943;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11946 = x11694 + x11944;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11947 = x11124 + x11945;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11948 = x11126 + x11946;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11949 = x11604 + x11947;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11950 = x11634 + x11948;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11951 = x10831 * x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11952 = x93 - x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11953 = x11951 * x11952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11954 = x93 - x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11955 = x10831 * x11954;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11956 = x11955 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11957 = x11953 + x11956;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11958 = x93 - x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11959 = x11958 * x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11960 = x11959 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11961 = x11957 + x11960;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11962 = x11951 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11963 = x11961 + x11962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11964 = x10832 * x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11965 = x93 - x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11966 = x11964 * x11965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11967 = x93 - x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11968 = x10832 * x11967;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11969 = x11968 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11970 = x11966 + x11969;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11971 = x93 - x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11972 = x11971 * x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11973 = x11972 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11974 = x11970 + x11973;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11975 = x11964 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11976 = x11974 + x11975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11977 = x10833 * x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11978 = x93 - x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11979 = x11977 * x11978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11980 = x93 - x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11981 = x10833 * x11980;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11982 = x11981 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11983 = x11979 + x11982;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11984 = x93 - x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11985 = x11984 * x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11986 = x11985 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11987 = x11983 + x11986;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11988 = x11977 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11989 = x11987 + x11988;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11990 = x10834 * x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11991 = x93 - x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11992 = x11990 * x11991;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11993 = x93 - x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11994 = x10834 * x11993;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11995 = x11994 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11996 = x11992 + x11995;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11997 = x93 - x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11998 = x11997 * x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11999 = x11998 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12000 = x11996 + x11999;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12001 = x11990 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12002 = x12000 + x12001;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12003 = x10835 * x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12004 = x93 - x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12005 = x12003 * x12004;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12006 = x93 - x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12007 = x10835 * x12006;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12008 = x12007 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12009 = x12005 + x12008;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12010 = x93 - x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12011 = x12010 * x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12012 = x12011 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12013 = x12009 + x12012;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12014 = x12003 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12015 = x12013 + x12014;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12016 = x10836 * x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12017 = x93 - x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12018 = x12016 * x12017;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12019 = x93 - x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12020 = x10836 * x12019;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12021 = x12020 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12022 = x12018 + x12021;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12023 = x93 - x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12024 = x12023 * x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12025 = x12024 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12026 = x12022 + x12025;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12027 = x12016 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12028 = x12026 + x12027;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12029 = x10837 * x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12030 = x93 - x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12031 = x12029 * x12030;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12032 = x93 - x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12033 = x10837 * x12032;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12034 = x12033 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12035 = x12031 + x12034;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12036 = x93 - x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12037 = x12036 * x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12038 = x12037 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12039 = x12035 + x12038;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12040 = x12029 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12041 = x12039 + x12040;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12042 = x10838 * x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12043 = x93 - x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12044 = x12042 * x12043;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12045 = x93 - x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12046 = x10838 * x12045;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12047 = x12046 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12048 = x12044 + x12047;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12049 = x93 - x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12050 = x12049 * x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12051 = x12050 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12052 = x12048 + x12051;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12053 = x12042 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12054 = x12052 + x12053;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12055 = x10839 * x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12056 = x93 - x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12057 = x12055 * x12056;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12058 = x93 - x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12059 = x10839 * x12058;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12060 = x12059 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12061 = x12057 + x12060;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12062 = x93 - x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12063 = x12062 * x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12064 = x12063 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12065 = x12061 + x12064;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12066 = x12055 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12067 = x12065 + x12066;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12068 = x10840 * x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12069 = x93 - x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12070 = x12068 * x12069;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12071 = x93 - x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12072 = x10840 * x12071;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12073 = x12072 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12074 = x12070 + x12073;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12075 = x93 - x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12076 = x12075 * x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12077 = x12076 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12078 = x12074 + x12077;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12079 = x12068 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12080 = x12078 + x12079;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12081 = x10841 * x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12082 = x93 - x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12083 = x12081 * x12082;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12084 = x93 - x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12085 = x10841 * x12084;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12086 = x12085 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12087 = x12083 + x12086;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12088 = x93 - x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12089 = x12088 * x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12090 = x12089 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12091 = x12087 + x12090;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12092 = x12081 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12093 = x12091 + x12092;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12094 = x10842 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12095 = x93 - x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12096 = x12094 * x12095;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12097 = x93 - x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12098 = x10842 * x12097;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12099 = x12098 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12100 = x12096 + x12099;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12101 = x93 - x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12102 = x12101 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12103 = x12102 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12104 = x12100 + x12103;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12105 = x12094 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12106 = x12104 + x12105;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12107 = x10843 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12108 = x93 - x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12109 = x12107 * x12108;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12110 = x93 - x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12111 = x10843 * x12110;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12112 = x12111 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12113 = x12109 + x12112;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12114 = x93 - x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12115 = x12114 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12116 = x12115 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12117 = x12113 + x12116;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12118 = x12107 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12119 = x12117 + x12118;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12120 = x10844 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12121 = x93 - x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12122 = x12120 * x12121;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12123 = x93 - x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12124 = x10844 * x12123;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12125 = x12124 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12126 = x12122 + x12125;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12127 = x93 - x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12128 = x12127 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12129 = x12128 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12130 = x12126 + x12129;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12131 = x12120 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12132 = x12130 + x12131;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12133 = x10845 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12134 = x93 - x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12135 = x12133 * x12134;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12136 = x93 - x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12137 = x10845 * x12136;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12138 = x12137 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12139 = x12135 + x12138;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12140 = x93 - x10845;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12141 = x12140 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12142 = x12141 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12143 = x12139 + x12142;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12144 = x12133 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12145 = x12143 + x12144;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12146 = x10846 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12147 = x93 - x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12148 = x12146 * x12147;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12149 = x93 - x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12150 = x10846 * x12149;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12151 = x12150 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12152 = x12148 + x12151;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12153 = x93 - x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12154 = x12153 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12155 = x12154 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12156 = x12152 + x12155;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12157 = x12146 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12158 = x12156 + x12157;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12159 = x10847 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12160 = x93 - x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12161 = x12159 * x12160;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12162 = x93 - x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12163 = x10847 * x12162;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12164 = x12163 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12165 = x12161 + x12164;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12166 = x93 - x10847;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12167 = x12166 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12168 = x12167 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12169 = x12165 + x12168;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12170 = x12159 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12171 = x12169 + x12170;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12172 = x10848 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12173 = x93 - x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12174 = x12172 * x12173;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12175 = x93 - x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12176 = x10848 * x12175;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12177 = x12176 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12178 = x12174 + x12177;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12179 = x93 - x10848;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12180 = x12179 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12181 = x12180 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12182 = x12178 + x12181;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12183 = x12172 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12184 = x12182 + x12183;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12185 = x10849 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12186 = x93 - x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12187 = x12185 * x12186;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12188 = x93 - x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12189 = x10849 * x12188;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12190 = x12189 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12191 = x12187 + x12190;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12192 = x93 - x10849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12193 = x12192 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12194 = x12193 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12195 = x12191 + x12194;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12196 = x12185 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12197 = x12195 + x12196;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12198 = x10850 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12199 = x93 - x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12200 = x12198 * x12199;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12201 = x93 - x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12202 = x10850 * x12201;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12203 = x12202 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12204 = x12200 + x12203;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12205 = x93 - x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12206 = x12205 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12207 = x12206 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12208 = x12204 + x12207;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12209 = x12198 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12210 = x12208 + x12209;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12211 = x10851 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12212 = x93 - x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12213 = x12211 * x12212;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12214 = x93 - x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12215 = x10851 * x12214;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12216 = x12215 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12217 = x12213 + x12216;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12218 = x93 - x10851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12219 = x12218 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12220 = x12219 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12221 = x12217 + x12220;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12222 = x12211 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12223 = x12221 + x12222;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12224 = x10852 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12225 = x93 - x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12226 = x12224 * x12225;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12227 = x93 - x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12228 = x10852 * x12227;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12229 = x12228 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12230 = x12226 + x12229;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12231 = x93 - x10852;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12232 = x12231 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12233 = x12232 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12234 = x12230 + x12233;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12235 = x12224 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12236 = x12234 + x12235;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12237 = x10853 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12238 = x93 - x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12239 = x12237 * x12238;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12240 = x93 - x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12241 = x10853 * x12240;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12242 = x12241 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12243 = x12239 + x12242;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12244 = x93 - x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12245 = x12244 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12246 = x12245 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12247 = x12243 + x12246;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12248 = x12237 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12249 = x12247 + x12248;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12250 = x10854 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12251 = x93 - x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12252 = x12250 * x12251;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12253 = x93 - x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12254 = x10854 * x12253;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12255 = x12254 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12256 = x12252 + x12255;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12257 = x93 - x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12258 = x12257 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12259 = x12258 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12260 = x12256 + x12259;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12261 = x12250 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12262 = x12260 + x12261;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12263 = x10855 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12264 = x93 - x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12265 = x12263 * x12264;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12266 = x93 - x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12267 = x10855 * x12266;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12268 = x12267 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12269 = x12265 + x12268;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12270 = x93 - x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12271 = x12270 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12272 = x12271 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12273 = x12269 + x12272;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12274 = x12263 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12275 = x12273 + x12274;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12276 = x10856 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12277 = x93 - x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12278 = x12276 * x12277;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12279 = x93 - x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12280 = x10856 * x12279;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12281 = x12280 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12282 = x12278 + x12281;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12283 = x93 - x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12284 = x12283 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12285 = x12284 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12286 = x12282 + x12285;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12287 = x12276 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12288 = x12286 + x12287;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12289 = x10857 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12290 = x93 - x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12291 = x12289 * x12290;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12292 = x93 - x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12293 = x10857 * x12292;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12294 = x12293 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12295 = x12291 + x12294;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12296 = x93 - x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12297 = x12296 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12298 = x12297 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12299 = x12295 + x12298;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12300 = x12289 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12301 = x12299 + x12300;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12302 = x10858 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12303 = x93 - x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12304 = x12302 * x12303;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12305 = x93 - x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12306 = x10858 * x12305;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12307 = x12306 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12308 = x12304 + x12307;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12309 = x93 - x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12310 = x12309 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12311 = x12310 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12312 = x12308 + x12311;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12313 = x12302 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12314 = x12312 + x12313;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12315 = x10859 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12316 = x93 - x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12317 = x12315 * x12316;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12318 = x93 - x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12319 = x10859 * x12318;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12320 = x12319 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12321 = x12317 + x12320;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12322 = x93 - x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12323 = x12322 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12324 = x12323 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12325 = x12321 + x12324;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12326 = x12315 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12327 = x12325 + x12326;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12328 = x10860 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12329 = x93 - x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12330 = x12328 * x12329;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12331 = x93 - x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12332 = x10860 * x12331;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12333 = x12332 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12334 = x12330 + x12333;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12335 = x93 - x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12336 = x12335 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12337 = x12336 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12338 = x12334 + x12337;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12339 = x12328 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12340 = x12338 + x12339;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12341 = x10861 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12342 = x93 - x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12343 = x12341 * x12342;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12344 = x93 - x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12345 = x10861 * x12344;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12346 = x12345 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12347 = x12343 + x12346;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12348 = x93 - x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12349 = x12348 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12350 = x12349 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12351 = x12347 + x12350;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12352 = x12341 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12353 = x12351 + x12352;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12354 = x10862 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12355 = x93 - x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12356 = x12354 * x12355;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12357 = x93 - x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12358 = x10862 * x12357;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12359 = x12358 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12360 = x12356 + x12359;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12361 = x93 - x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12362 = x12361 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12363 = x12362 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12364 = x12360 + x12363;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12365 = x12354 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12366 = x12364 + x12365;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12367 = x11976 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12368 = x11963 + x12367;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12369 = x11989 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12370 = x12368 + x12369;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12371 = x12002 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12372 = x12370 + x12371;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12373 = x12015 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12374 = x12372 + x12373;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12375 = x12028 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12376 = x12374 + x12375;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12377 = x12041 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12378 = x12376 + x12377;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12379 = x12054 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12380 = x12378 + x12379;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12381 = x12067 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12382 = x12380 + x12381;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12383 = x12080 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12384 = x12382 + x12383;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12385 = x12093 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12386 = x12384 + x12385;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12387 = x12106 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12388 = x12386 + x12387;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12389 = x12119 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12390 = x12388 + x12389;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12391 = x12132 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12392 = x12390 + x12391;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12393 = x12145 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12394 = x12392 + x12393;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12395 = x12158 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12396 = x12394 + x12395;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12397 = x12184 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12398 = x12171 + x12397;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12399 = x12197 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12400 = x12398 + x12399;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12401 = x12210 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12402 = x12400 + x12401;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12403 = x12223 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12404 = x12402 + x12403;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12405 = x12236 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12406 = x12404 + x12405;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12407 = x12249 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12408 = x12406 + x12407;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12409 = x12262 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12410 = x12408 + x12409;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12411 = x12275 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12412 = x12410 + x12411;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12413 = x12288 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12414 = x12412 + x12413;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12415 = x12301 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12416 = x12414 + x12415;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12417 = x12314 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12418 = x12416 + x12417;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12419 = x12327 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12420 = x12418 + x12419;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12421 = x12340 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12422 = x12420 + x12421;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12423 = x12353 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12424 = x12422 + x12423;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12425 = x12366 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12426 = x12424 + x12425;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12427 = x11260 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12428 = x11257 + x12427;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12429 = x11263 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12430 = x12428 + x12429;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12431 = x11266 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12432 = x12430 + x12431;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12433 = x11269 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12434 = x12432 + x12433;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12435 = x11272 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12436 = x12434 + x12435;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12437 = x11275 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12438 = x12436 + x12437;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12439 = x11278 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12440 = x12438 + x12439;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12441 = x11281 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12442 = x12440 + x12441;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12443 = x11284 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12444 = x12442 + x12443;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12445 = x11287 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12446 = x12444 + x12445;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12447 = x11290 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12448 = x12446 + x12447;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12449 = x11293 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12450 = x12448 + x12449;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12451 = x11296 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12452 = x12450 + x12451;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12453 = x11299 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12454 = x12452 + x12453;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12455 = x11302 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12456 = x12454 + x12455;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12457 = x11308 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12458 = x11305 + x12457;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12459 = x11311 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12460 = x12458 + x12459;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12461 = x11314 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12462 = x12460 + x12461;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12463 = x11317 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12464 = x12462 + x12463;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12465 = x11320 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12466 = x12464 + x12465;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12467 = x11323 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12468 = x12466 + x12467;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12469 = x11326 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12470 = x12468 + x12469;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12471 = x11329 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12472 = x12470 + x12471;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12473 = x11332 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12474 = x12472 + x12473;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12475 = x11335 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12476 = x12474 + x12475;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12477 = x11338 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12478 = x12476 + x12477;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12479 = x11341 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12480 = x12478 + x12479;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12481 = x11344 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12482 = x12480 + x12481;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12483 = x11347 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12484 = x12482 + x12483;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12485 = x11350 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12486 = x12484 + x12485;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12487 = x12396 + x12456;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12488 = x12426 + x12486;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12489 = x11949 + x12487;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12490 = x11950 + x12488;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12491 = x10928 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12492 = x10927 + x12491;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12493 = x10929 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12494 = x12492 + x12493;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12495 = x10930 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12496 = x12494 + x12495;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12497 = x10931 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12498 = x12496 + x12497;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12499 = x10932 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12500 = x12498 + x12499;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12501 = x10933 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12502 = x12500 + x12501;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12503 = x10934 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12504 = x12502 + x12503;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12505 = x10935 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12506 = x12504 + x12505;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12507 = x10936 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12508 = x12506 + x12507;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12509 = x10937 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12510 = x12508 + x12509;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12511 = x10938 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12512 = x12510 + x12511;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12513 = x10939 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12514 = x12512 + x12513;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12515 = x10940 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12516 = x12514 + x12515;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12517 = x10941 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12518 = x12516 + x12517;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12519 = x10942 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12520 = x12518 + x12519;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12521 = x10944 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12522 = x10943 + x12521;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12523 = x10945 * x76;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12524 = x12522 + x12523;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12525 = x10946 * x69;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12526 = x12524 + x12525;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12527 = x10947 * x56;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12528 = x12526 + x12527;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12529 = x10948 * x58;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12530 = x12528 + x12529;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12531 = x10949 * x52;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12532 = x12530 + x12531;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12533 = x10950 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12534 = x12532 + x12533;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12535 = x10951 * x88;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12536 = x12534 + x12535;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12537 = x10952 * x19;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12538 = x12536 + x12537;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12539 = x10953 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12540 = x12538 + x12539;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12541 = x10954 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12542 = x12540 + x12541;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12543 = x10955 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12544 = x12542 + x12543;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12545 = x10956 * x12;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12546 = x12544 + x12545;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12547 = x10957 * x33;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12548 = x12546 + x12547;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12549 = x10958 * x9;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12550 = x12548 + x12549;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12551 = x11949 + x12520;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12552 = x11950 + x12550;
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12489);
        reg = x12489;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12551);
        reg = x12551;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12490);
        reg = x12490;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12552);
        reg = x12552;
      }
      if (x8583 != 0) {
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12553 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x12553 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12554 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12554 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12555 = Fp(x12553.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12555);
            reg = x12555;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12556 = Fp(x12553.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12557 = x12556 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12557);
            reg = x12557;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12558 = Fp(x12553.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12559 = x12558 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12559);
            reg = x12559;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12560 = Fp(x12553.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12561 = x12560 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12561);
            reg = x12561;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12562 = Fp(x12553.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12563 = x12562 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12563);
            reg = x12563;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12564 = Fp(x12553.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12565 = x12564 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12565);
            reg = x12565;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12566 = Fp(x12553.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12567 = x12566 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12567);
            reg = x12567;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12568 = Fp(x12553.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12569 = x12568 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12569);
            reg = x12569;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12570 = Fp(x12553.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12571 = x12570 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12571);
            reg = x12571;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12572 = Fp(x12553.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12573 = x12572 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12573);
            reg = x12573;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12574 = Fp(x12553.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12575 = x12574 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12575);
            reg = x12575;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12576 = Fp(x12553.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12577 = x12576 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12577);
            reg = x12577;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12578 = Fp(x12553.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12579 = x12578 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12579);
            reg = x12579;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12580 = Fp(x12553.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12581 = x12580 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12581);
            reg = x12581;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12582 = Fp(x12553.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12583 = x12582 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12583);
            reg = x12583;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12584 = Fp(x12553.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12585 = x12584 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12585);
            reg = x12585;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12586 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x12586 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12587 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12587 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12588 = x12587 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12589 = x12586 + x12588;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12590 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12590 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12591 = x12590 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12592 = x12589 + x12591;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12593 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12593 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12594 = x12593 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12595 = x12592 + x12594;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12596 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12596 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12597 = x12596 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12598 = x12595 + x12597;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12599 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12599 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12600 = x12599 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12601 = x12598 + x12600;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12602 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12602 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12603 = x12602 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12604 = x12601 + x12603;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12605 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12605 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12606 = x12605 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12607 = x12604 + x12606;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12608 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12608 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12609 = x12608 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12610 = x12607 + x12609;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12611 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12611 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12612 = x12611 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12613 = x12610 + x12612;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12614 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12614 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12615 = x12614 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12616 = x12613 + x12615;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12617 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12617 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12618 = x12617 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12619 = x12616 + x12618;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12620 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12620 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12621 = x12620 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12622 = x12619 + x12621;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12623 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12623 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12624 = x12623 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12625 = x12622 + x12624;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12626 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12626 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12627 = x12626 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12628 = x12625 + x12627;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12629 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12629 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12630 = x12629 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12631 = x12628 + x12630;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12632 = x12553 - x12631;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12633 = x12632 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12634 = Fp(x12633.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12634);
            reg = x12634;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12635 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x12635 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12636 = x12633 - x12635;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12637 = x12636 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12638 = x93 - x12637;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12639 = x12637 * x12638;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12639 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12640 = x12554 + x12633;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12641 = Fp(x12640.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12641);
            reg = x12641;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12642 = Fp(x12640.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12643 = x12642 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12643);
            reg = x12643;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12644 = Fp(x12640.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12645 = x12644 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12645);
            reg = x12645;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12646 = Fp(x12640.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12647 = x12646 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12647);
            reg = x12647;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12648 = Fp(x12640.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12649 = x12648 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12649);
            reg = x12649;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12650 = Fp(x12640.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12651 = x12650 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12651);
            reg = x12651;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12652 = Fp(x12640.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12653 = x12652 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12653);
            reg = x12653;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12654 = Fp(x12640.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12655 = x12654 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12655);
            reg = x12655;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12656 = Fp(x12640.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12657 = x12656 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12657);
            reg = x12657;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12658 = Fp(x12640.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12659 = x12658 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12659);
            reg = x12659;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12660 = Fp(x12640.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12661 = x12660 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12661);
            reg = x12661;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12662 = Fp(x12640.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12663 = x12662 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12663);
            reg = x12663;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12664 = Fp(x12640.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12665 = x12664 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12665);
            reg = x12665;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12666 = Fp(x12640.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12667 = x12666 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12667);
            reg = x12667;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12668 = Fp(x12640.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12669 = x12668 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12669);
            reg = x12669;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12670 = Fp(x12640.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12671 = x12670 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12671);
            reg = x12671;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12672 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12672 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12673 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12673 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12674 = x12673 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12675 = x12672 + x12674;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12676 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12676 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12677 = x12676 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12678 = x12675 + x12677;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12679 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12679 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12680 = x12679 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12681 = x12678 + x12680;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12682 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12682 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12683 = x12682 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12684 = x12681 + x12683;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12685 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12685 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12686 = x12685 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12687 = x12684 + x12686;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12688 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12688 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12689 = x12688 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12690 = x12687 + x12689;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12691 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12691 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12692 = x12691 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12693 = x12690 + x12692;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12694 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12694 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12695 = x12694 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12696 = x12693 + x12695;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12697 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12697 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12698 = x12697 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12699 = x12696 + x12698;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12700 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12700 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12701 = x12700 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12702 = x12699 + x12701;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12703 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12703 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12704 = x12703 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12705 = x12702 + x12704;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12706 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12706 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12707 = x12706 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12708 = x12705 + x12707;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12709 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12709 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12710 = x12709 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12711 = x12708 + x12710;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12712 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12712 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12713 = x12712 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12714 = x12711 + x12713;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12715 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12715 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12716 = x12715 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12717 = x12714 + x12716;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12718 = x12640 - x12717;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12719 = x12718 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12720 = Fp(x12719.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12720);
            reg = x12720;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12721 = args[2][74 * steps + ((cycle - 0) & mask)];
        assert(x12721 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12722 = x12719 - x12721;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12723 = x12722 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12724 = x93 - x12723;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12725 = x12723 * x12724;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12725 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12726 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12726 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12727 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12727 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12728 = Fp(x12726.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12728);
            reg = x12728;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12729 = Fp(x12726.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12730 = x12729 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12730);
            reg = x12730;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12731 = Fp(x12726.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12732 = x12731 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12732);
            reg = x12732;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12733 = Fp(x12726.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12734 = x12733 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12734);
            reg = x12734;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12735 = Fp(x12726.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12736 = x12735 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12736);
            reg = x12736;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12737 = Fp(x12726.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12738 = x12737 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12738);
            reg = x12738;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12739 = Fp(x12726.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12740 = x12739 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12740);
            reg = x12740;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12741 = Fp(x12726.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12742 = x12741 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12742);
            reg = x12742;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12743 = Fp(x12726.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12744 = x12743 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12744);
            reg = x12744;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12745 = Fp(x12726.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12746 = x12745 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12746);
            reg = x12746;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12747 = Fp(x12726.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12748 = x12747 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12748);
            reg = x12748;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12749 = Fp(x12726.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12750 = x12749 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12750);
            reg = x12750;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12751 = Fp(x12726.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12752 = x12751 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12752);
            reg = x12752;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12753 = Fp(x12726.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12754 = x12753 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12754);
            reg = x12754;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12755 = Fp(x12726.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12756 = x12755 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12756);
            reg = x12756;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12757 = Fp(x12726.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12758 = x12757 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12758);
            reg = x12758;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12759 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12759 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12760 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x12760 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12761 = x12760 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12762 = x12759 + x12761;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12763 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x12763 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12764 = x12763 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12765 = x12762 + x12764;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12766 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x12766 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12767 = x12766 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12768 = x12765 + x12767;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12769 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x12769 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12770 = x12769 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12771 = x12768 + x12770;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12772 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x12772 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12773 = x12772 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12774 = x12771 + x12773;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12775 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x12775 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12776 = x12775 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12777 = x12774 + x12776;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12778 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x12778 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12779 = x12778 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12780 = x12777 + x12779;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12781 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x12781 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12782 = x12781 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12783 = x12780 + x12782;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12784 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x12784 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12785 = x12784 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12786 = x12783 + x12785;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12787 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x12787 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12788 = x12787 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12789 = x12786 + x12788;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12790 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x12790 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12791 = x12790 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12792 = x12789 + x12791;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12793 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x12793 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12794 = x12793 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12795 = x12792 + x12794;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12796 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x12796 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12797 = x12796 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12798 = x12795 + x12797;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12799 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x12799 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12800 = x12799 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12801 = x12798 + x12800;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12802 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x12802 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12803 = x12802 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12804 = x12801 + x12803;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12805 = x12726 - x12804;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12806 = x12805 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12807 = Fp(x12806.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12807);
            reg = x12807;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12808 = args[2][75 * steps + ((cycle - 0) & mask)];
        assert(x12808 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12809 = x12806 - x12808;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12810 = x12809 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12811 = x93 - x12810;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12812 = x12810 * x12811;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12812 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12813 = x12727 + x12806;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12814 = Fp(x12813.asUInt32() & x93.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12814);
            reg = x12814;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12815 = Fp(x12813.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12816 = x12815 * x53;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12816);
            reg = x12816;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12817 = Fp(x12813.asUInt32() & x76.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12818 = x12817 * x74;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12818);
            reg = x12818;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12819 = Fp(x12813.asUInt32() & x69.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12820 = x12819 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12820);
            reg = x12820;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12821 = Fp(x12813.asUInt32() & x56.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12822 = x12821 * x55;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12822);
            reg = x12822;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12823 = Fp(x12813.asUInt32() & x58.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12824 = x12823 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12824);
            reg = x12824;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12825 = Fp(x12813.asUInt32() & x52.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12826 = x12825 * x51;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12826);
            reg = x12826;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12827 = Fp(x12813.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12828 = x12827 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12828);
            reg = x12828;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12829 = Fp(x12813.asUInt32() & x88.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12830 = x12829 * x87;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12830);
            reg = x12830;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12831 = Fp(x12813.asUInt32() & x19.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12832 = x12831 * x18;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12832);
            reg = x12832;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12833 = Fp(x12813.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12834 = x12833 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12834);
            reg = x12834;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12835 = Fp(x12813.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12836 = x12835 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12836);
            reg = x12836;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12837 = Fp(x12813.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12838 = x12837 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12838);
            reg = x12838;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12839 = Fp(x12813.asUInt32() & x12.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12840 = x12839 * x11;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12840);
            reg = x12840;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12841 = Fp(x12813.asUInt32() & x33.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12842 = x12841 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12842);
            reg = x12842;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12843 = Fp(x12813.asUInt32() & x9.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12844 = x12843 * x8;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12844);
            reg = x12844;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12845 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x12845 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12846 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x12846 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12847 = x12846 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12848 = x12845 + x12847;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12849 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x12849 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12850 = x12849 * x76;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12851 = x12848 + x12850;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12852 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x12852 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12853 = x12852 * x69;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12854 = x12851 + x12853;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12855 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x12855 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12856 = x12855 * x56;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12857 = x12854 + x12856;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12858 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x12858 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12859 = x12858 * x58;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12860 = x12857 + x12859;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12861 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x12861 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12862 = x12861 * x52;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12863 = x12860 + x12862;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12864 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x12864 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12865 = x12864 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12866 = x12863 + x12865;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12867 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x12867 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12868 = x12867 * x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12869 = x12866 + x12868;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12870 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x12870 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12871 = x12870 * x19;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12872 = x12869 + x12871;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12873 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x12873 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12874 = x12873 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12875 = x12872 + x12874;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12876 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x12876 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12877 = x12876 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12878 = x12875 + x12877;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12879 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x12879 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12880 = x12879 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12881 = x12878 + x12880;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12882 = args[2][219 * steps + ((cycle - 0) & mask)];
        assert(x12882 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12883 = x12882 * x12;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12884 = x12881 + x12883;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12885 = args[2][220 * steps + ((cycle - 0) & mask)];
        assert(x12885 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12886 = x12885 * x33;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12887 = x12884 + x12886;
        // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12888 = args[2][221 * steps + ((cycle - 0) & mask)];
        assert(x12888 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12889 = x12888 * x9;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12890 = x12887 + x12889;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12891 = x12813 - x12890;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12892 = x12891 * x7;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12893 = Fp(x12892.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12893);
            reg = x12893;
          }
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12894 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x12894 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12895 = x12892 - x12894;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12896 = x12895 * x74;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12897 = x93 - x12896;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12898 = x12896 * x12897;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12898 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/5/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x12899 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x12899 != Fp::invalid());
      if (x12899 != 0) {
        if (x8591 != 0) {
          // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":433:38))
          auto x12900 = args[2][140 * steps + ((cycle - 1) & mask)];
          assert(x12900 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":433:7)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12900);
            reg = x12900;
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":434:38))
          auto x12901 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x12901 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":434:7)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12901);
            reg = x12901;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":435:7)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x62);
            reg = x62;
          }
        }
        if (x8592 != 0) {
          // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":439:51))
          auto x12902 = args[2][140 * steps + ((cycle - 1) & mask)];
          assert(x12902 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":439:51)
          auto x12903 = x12902 + x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":439:7)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12903);
            reg = x12903;
          }
          // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":440:51))
          auto x12904 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x12904 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":440:51)
          auto x12905 = x12904 + x56;
          // loc("cirgen/circuit/rv32im/sha.cpp":440:7)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12905);
            reg = x12905;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":441:7)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x67);
            reg = x67;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":444:27)
      auto x12906 = x93 - x12899;
      if (x12906 != 0) {
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":445:36))
        auto x12907 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x12907 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":445:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12907);
          reg = x12907;
        }
        // loc("Top/Mux/5/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":446:36))
        auto x12908 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x12908 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":446:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12908);
          reg = x12908;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":447:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
    }
    // loc("Top/Mux/5/OneHot/hot[12](Reg)"("./cirgen/components/mux.h":39:25))
    auto x12909 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x12909 != Fp::invalid());
    if (x12909 != 0) {
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x12910 = x749 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x12911 = Fp(x12910.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12911);
          reg = x12911;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x12912 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x12912 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x12913 = x12910 - x12912;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x12914 = x12913 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x12915 = Fp(x12914.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12915);
          reg = x12915;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x12916 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x12916 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x12917 = x12914 - x12916;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x12918 = x12917 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x12919 = Fp(x12918.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12919);
          reg = x12919;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x12920 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x12920 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x12921 = x12918 - x12920;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x12922 = x12921 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x12923 = Fp(x12922.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12923);
          reg = x12923;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x12924 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x12924 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x12925 = x12922 - x12924;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x12926 = x12925 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12926);
        reg = x12926;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x12927 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x12927 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x12928 = x93 - x12927;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x12929 = x12927 * x12928;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12929);
        reg = x12929;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12930 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x12930 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x12931 = x90 - x12927;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x12932 = x12930 * x12931;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x12932 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x749;
      host(ctx, "log", "  PageFault: PC = %10x", host_args.data(), 1, host_outs.data(), 0);
      {
        host_args.at(0) = x749;
        host(ctx, "pageInfo", "", host_args.data(), 1, host_outs.data(), 3);
        auto x12933 = host_outs.at(0);
        auto x12934 = host_outs.at(1);
        auto x12935 = host_outs.at(2);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12933);
          reg = x12933;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":77:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12934);
          reg = x12934;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12935);
          reg = x12935;
        }
      }
      // loc("Top/Mux/5/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12936 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x12936 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":83:20)
      auto x12937 = x12936 - x2;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x12938 = (x12937 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12938);
          reg = x12938;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x12939 = inv(x12937);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12939);
          reg = x12939;
        }
      }
      // loc("Top/Mux/5/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x12940 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x12940 != Fp::invalid());
      if (x12940 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x12937 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x12941 = x93 - x12940;
      if (x12941 != 0) {
        // loc("Top/Mux/5/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12942 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x12942 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12943 = x12937 * x12942;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12944 = x12943 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x12944 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x12940 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":85:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":86:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      if (x12941 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":89:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x56);
          reg = x56;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":90:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("Top/Mux/5/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12945 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x12945 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":93:24)
      auto x12946 = x12936 + x12945;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":94:36)
      auto x12947 = x12946 * x69;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":94:19)
      auto x12948 = x12947 + x1;
      // loc("cirgen/circuit/rv32im/page_fault.cpp":95:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12948);
        reg = x12948;
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":96:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x0);
        reg = x0;
      }
      // loc("Top/Mux/5/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x12949 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x12949 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":98:16)
      auto x12950 = x93 - x12949;
      if (x12950 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":108:17)
        auto x12951 = x12936 - x93;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x12952 = Fp(x12951.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12952);
            reg = x12952;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x12953 = args[2][9 * steps + ((cycle - 0) & mask)];
        assert(x12953 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x12954 = x12951 - x12953;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x12955 = x12954 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x12956 = Fp(x12955.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12956);
            reg = x12956;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x12957 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x12957 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x12958 = x12955 - x12957;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x12959 = x12958 * x87;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12959);
          reg = x12959;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":109:17)
        auto x12960 = x2 - x12936;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x12961 = Fp(x12960.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12961);
            reg = x12961;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x12962 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x12962 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x12963 = x12960 - x12962;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x12964 = x12963 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x12965 = Fp(x12964.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12965);
            reg = x12965;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x12966 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x12966 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x12967 = x12964 - x12966;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x12968 = x12967 * x87;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12968);
          reg = x12968;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
      if (x12949 != 0) {
        {
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x12969 = args[2][9 * steps + ((cycle - 0) & mask)];
        assert(x12969 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x12970 = x92 - x12969;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x12971 = x12970 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x12972 = Fp(x12971.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12972);
            reg = x12972;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x12973 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x12973 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x12974 = x12971 - x12973;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x12975 = x12974 * x87;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12975);
          reg = x12975;
        }
        {
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x12976 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x12976 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x12977 = x92 - x12976;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x12978 = x12977 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x12979 = Fp(x12978.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12979);
            reg = x12979;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x12980 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x12980 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x12981 = x12978 - x12980;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x12982 = x12981 * x87;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12982);
          reg = x12982;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":117:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x63);
          reg = x63;
        }
      }
    }
    // loc("Top/Mux/5/OneHot/hot[13](Reg)"("./cirgen/components/mux.h":39:25))
    auto x12983 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x12983 != Fp::invalid());
    if (x12983 != 0) {
      // loc("Top/Mux/5/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/ecall.cpp":145:70))
      auto x12984 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x12984 != Fp::invalid());
      if (x12984 != 0) {
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12985 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x12985 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12986 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12986 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12987 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12987 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12988 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x12988 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x12989 = x12986 * x88;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12990 = x12985 + x12989;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12991 = x12987 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12992 = x12990 + x12991;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12993 = x12988 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12994 = x12992 + x12993;
        // loc("cirgen/circuit/rv32im/ecall.cpp":155:98)
        auto x12995 = x12994 * x74;
        // loc("Top/Mux/5/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x12996 = args[2][76 * steps + ((cycle - 1) & mask)];
        assert(x12996 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":155:98)
        auto x12997 = x12996 + x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":155:98)
        auto x12998 = x12995 + x12997;
        // loc("cirgen/circuit/rv32im/ecall.cpp":155:98)
        auto x12999 = x12998 - x76;
        // loc("cirgen/circuit/rv32im/ecall.cpp":153:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12999);
          reg = x12999;
        }
        // loc("Top/Mux/5/Mux/8/Mux/2/Reg"("cirgen/circuit/rv32im/ecall.cpp":156:63))
        auto x13000 = args[2][190 * steps + ((cycle - 1) & mask)];
        assert(x13000 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":156:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13000);
          reg = x13000;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":159:22)
      auto x13001 = x93 - x12984;
      if (x13001 != 0) {
        // loc("Top/Mux/5/Mux/13/Reg"("cirgen/circuit/rv32im/ecall.cpp":160:56))
        auto x13002 = args[2][170 * steps + ((cycle - 1) & mask)];
        assert(x13002 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":160:56)
        auto x13003 = x13002 - x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":160:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13003);
          reg = x13003;
        }
        // loc("Top/Mux/5/Mux/13/Reg"("cirgen/circuit/rv32im/ecall.cpp":161:46))
        auto x13004 = args[2][171 * steps + ((cycle - 1) & mask)];
        assert(x13004 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":161:46)
        auto x13005 = x13004 + x76;
        // loc("cirgen/circuit/rv32im/ecall.cpp":161:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13005);
          reg = x13005;
        }
      }
      // loc("Top/Mux/5/Mux/13/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13006 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x13006 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13007 = (x13006 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13007);
          reg = x13007;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13008 = inv(x13006);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13008);
          reg = x13008;
        }
      }
      // loc("Top/Mux/5/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13009 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13009 != Fp::invalid());
      if (x13009 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x13006 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13010 = x93 - x13009;
      if (x13010 != 0) {
        // loc("Top/Mux/5/Mux/13/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13011 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x13011 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13012 = x13006 * x13011;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13013 = x13012 - x93;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13013 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x12984 != 0) {
        // loc("Top/Mux/5/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13014 = args[2][76 * steps + ((cycle - 1) & mask)];
        assert(x13014 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":169:80)
        auto x13015 = x13014 + x93;
        // loc("cirgen/circuit/rv32im/ecall.cpp":169:80)
        auto x13016 = x13015 * x13010;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13017 = (x13016 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13017);
            reg = x13017;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13018 = x13016 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13019 = (x13018 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13019);
            reg = x13019;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13020 = x13016 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13021 = (x13020 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13021);
            reg = x13021;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13022 = x13016 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13023 = (x13022 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13023);
            reg = x13023;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13024 = x13016 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13025 = (x13024 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13025);
            reg = x13025;
          }
        }
        // loc("Top/Mux/5/Mux/13/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13026 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13026 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13027 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13027 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13028 = x13027 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13029 = x13026 + x13028;
        // loc("Top/Mux/5/Mux/13/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13030 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13030 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13031 = x13030 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13032 = x13029 + x13031;
        // loc("Top/Mux/5/Mux/13/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13033 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13033 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13034 = x13033 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13035 = x13032 + x13034;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x13036 = x13035 - x13016;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13036 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/Mux/5/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13037 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13037 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":172:10)
        auto x13038 = x13037 * x76;
        host_args.at(0) = x13038;
        host_args.at(1) = x13006;
        host_args.at(2) = x13035;
        host(ctx, "log", "  COPYIN INIT: dest=%x, remaining=%u first chunk words=%u", host_args.data(), 3, host_outs.data(), 0);
      }
      if (x13001 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":177:43)
        auto x13039 = x13010 * x76;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13040 = (x13039 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13040);
            reg = x13040;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13041 = x13039 - x93;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13042 = (x13041 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13042);
            reg = x13042;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13043 = x13039 - x90;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13044 = (x13043 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13044);
            reg = x13044;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13045 = x13039 - x75;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13046 = (x13045 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13046);
            reg = x13046;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13047 = x13039 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13048 = (x13047 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13048);
            reg = x13048;
          }
        }
        // loc("Top/Mux/5/Mux/13/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13049 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13049 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13050 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13050 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13051 = x13050 * x90;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13052 = x13049 + x13051;
        // loc("Top/Mux/5/Mux/13/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13053 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13053 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13054 = x13053 * x75;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13055 = x13052 + x13054;
        // loc("Top/Mux/5/Mux/13/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13056 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13056 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13057 = x13056 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13058 = x13055 + x13057;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x13059 = x13058 - x13039;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13059 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/Mux/5/Mux/13/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":179:24))
      auto x13060 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x13060 != Fp::invalid());
      if (x13060 != 0) {
        {
          host(ctx, "syscallFini", "", host_args.data(), 0, host_outs.data(), 8);
          auto x13061 = host_outs.at(0);
          auto x13062 = host_outs.at(1);
          auto x13063 = host_outs.at(2);
          auto x13064 = host_outs.at(3);
          auto x13065 = host_outs.at(4);
          auto x13066 = host_outs.at(5);
          auto x13067 = host_outs.at(6);
          auto x13068 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13061);
            reg = x13061;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13062);
            reg = x13062;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13063);
            reg = x13063;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13064);
            reg = x13064;
          }
          {
            host_args.at(0) = x25;
            host_args.at(1) = x13061;
            host_args.at(2) = x13062;
            host_args.at(3) = x13063;
            host_args.at(4) = x13064;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13069 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13069 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13070 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13070 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13071 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13071 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13072 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13072 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x25);
            reg = x25;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13069);
            reg = x13069;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13070);
            reg = x13070;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13071);
            reg = x13071;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13072);
            reg = x13072;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13065);
            reg = x13065;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13066);
            reg = x13066;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13067);
            reg = x13067;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13068);
            reg = x13068;
          }
          {
            host_args.at(0) = x24;
            host_args.at(1) = x13065;
            host_args.at(2) = x13066;
            host_args.at(3) = x13067;
            host_args.at(4) = x13068;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13073 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13073 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13074 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13074 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13075 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13075 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13076 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13076 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x24);
            reg = x24;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13073);
            reg = x13073;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13074);
            reg = x13074;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13075);
            reg = x13075;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13076);
            reg = x13076;
          }
        }
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":180:10))
        auto x13077 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13077 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":188:8)
        auto x13078 = x13077 - x735;
        // loc("cirgen/circuit/rv32im/ecall.cpp":188:8)
        if (x13078 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:188");
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":180:10))
        auto x13079 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13079 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":189:8)
        auto x13080 = x13079 - x735;
        // loc("cirgen/circuit/rv32im/ecall.cpp":189:8)
        if (x13080 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:189");
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":176:10))
        auto x13081 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13081 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":191:8)
        auto x13082 = x13081 - x25;
        // loc("cirgen/circuit/rv32im/ecall.cpp":191:8)
        if (x13082 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:191");
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":176:10))
        auto x13083 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13083 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":192:8)
        auto x13084 = x13083 - x24;
        // loc("cirgen/circuit/rv32im/ecall.cpp":192:8)
        if (x13084 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:192");
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13085 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13085 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13086 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13086 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13087 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13087 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13088 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13088 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13089 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13089 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13090 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13090 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13091 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13091 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13092 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13092 != Fp::invalid());
        host_args.at(0) = x13085;
        host_args.at(1) = x13086;
        host_args.at(2) = x13087;
        host_args.at(3) = x13088;
        host_args.at(4) = x13089;
        host_args.at(5) = x13090;
        host_args.at(6) = x13091;
        host_args.at(7) = x13092;
        host(ctx, "log", "  COPYIN FINI: a0=%w a1=%w", host_args.data(), 8, host_outs.data(), 0);
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":199:19)
        auto x13093 = x749 + x76;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13094 = x13093 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13095 = Fp(x13094.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13095);
            reg = x13095;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13096 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x13096 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13097 = x13094 - x13096;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13098 = x13097 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13099 = Fp(x13098.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13099);
            reg = x13099;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13100 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x13100 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13101 = x13098 - x13100;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13102 = x13101 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13103 = Fp(x13102.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13103);
            reg = x13103;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13104 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x13104 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13105 = x13102 - x13104;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13106 = x13105 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13107 = Fp(x13106.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13107);
            reg = x13107;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13108 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x13108 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13109 = x13106 - x13108;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13110 = x13109 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13110);
          reg = x13110;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13111 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x13111 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13112 = x93 - x13111;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13113 = x13111 * x13112;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13113);
          reg = x13113;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13114 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x13114 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13115 = x90 - x13111;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13116 = x13114 * x13115;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13116 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":200:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x62);
          reg = x62;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":202:28)
      auto x13117 = x93 - x13060;
      if (x13117 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13118 = x749 + x76;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13119 = Fp(x13118.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13119);
            reg = x13119;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13120 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x13120 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13121 = x13118 - x13120;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13122 = x13121 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13123 = Fp(x13122.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13123);
            reg = x13123;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13124 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x13124 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13125 = x13122 - x13124;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13126 = x13125 * x87;
        {
          // loc("cirgen/components/bytes.cpp":96:21)
          auto x13127 = Fp(x13126.asUInt32() & x89.asUInt32());
          // loc("cirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13127);
            reg = x13127;
          }
        }
        // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
        auto x13128 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x13128 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":97:11)
        auto x13129 = x13126 - x13128;
        // loc("cirgen/components/bytes.cpp":97:10)
        auto x13130 = x13129 * x87;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13131 = Fp(x13130.asUInt32() & x75.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13131);
            reg = x13131;
          }
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13132 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x13132 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13133 = x13130 - x13132;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13134 = x13133 * x74;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13134);
          reg = x13134;
        }
        // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13135 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x13135 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13136 = x93 - x13135;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13137 = x13135 * x13136;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13137);
          reg = x13137;
        }
        // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13138 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x13138 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13139 = x90 - x13135;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13140 = x13138 * x13139;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13140 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":204:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
      }
      // loc("Top/Mux/5/Mux/13/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/ecall.cpp":214:35))
      auto x13141 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x13141 != Fp::invalid());
      // loc("Top/Mux/5/Mux/13/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/ecall.cpp":214:35))
      auto x13142 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x13142 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":214:22)
      auto x13143 = x13141 + x13142;
      // loc("Top/Mux/5/Mux/13/OneHot/hot[3](Reg)"("cirgen/circuit/rv32im/ecall.cpp":214:35))
      auto x13144 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13144 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":214:22)
      auto x13145 = x13143 + x13144;
      // loc("Top/Mux/5/Mux/13/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/ecall.cpp":212:35))
      auto x13146 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13146 != Fp::invalid());
      if (x13146 != 0) {
        // loc("Top/Mux/5/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13147 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13147 != Fp::invalid());
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13148 = host_outs.at(0);
          auto x13149 = host_outs.at(1);
          auto x13150 = host_outs.at(2);
          auto x13151 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13148);
            reg = x13148;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13149);
            reg = x13149;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13150);
            reg = x13150;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13151);
            reg = x13151;
          }
          {
            host_args.at(0) = x13147;
            host_args.at(1) = x13148;
            host_args.at(2) = x13149;
            host_args.at(3) = x13150;
            host_args.at(4) = x13151;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13152 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13152 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13153 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13153 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13154 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13154 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13155 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13155 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13147);
            reg = x13147;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13152);
            reg = x13152;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13153);
            reg = x13153;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13154);
            reg = x13154;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13155);
            reg = x13155;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":223:41)
          auto x13156 = x13147 * x76;
          host_args.at(0) = x13156;
          host_args.at(1) = x13152;
          host_args.at(2) = x13153;
          host_args.at(3) = x13154;
          host_args.at(4) = x13155;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":180:10))
        auto x13157 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13157 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:10)
        auto x13158 = x13157 - x735;
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:10)
        if (x13158 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:226");
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":176:10))
        auto x13159 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13159 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:10)
        auto x13160 = x13159 - x13147;
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:10)
        if (x13160 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:227");
      }
      if (x13145 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":212:22)
      auto x13161 = x13144 + x13146;
      if (x13161 != 0) {
        // loc("Top/Mux/5/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13162 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13162 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":219:23)
        auto x13163 = x13162 + x93;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13164 = host_outs.at(0);
          auto x13165 = host_outs.at(1);
          auto x13166 = host_outs.at(2);
          auto x13167 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13164);
            reg = x13164;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13165);
            reg = x13165;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13166);
            reg = x13166;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13167);
            reg = x13167;
          }
          {
            host_args.at(0) = x13163;
            host_args.at(1) = x13164;
            host_args.at(2) = x13165;
            host_args.at(3) = x13166;
            host_args.at(4) = x13167;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13168 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13168 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13169 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13169 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13170 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13170 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13171 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13171 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13163);
            reg = x13163;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13168);
            reg = x13168;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13169);
            reg = x13169;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13170);
            reg = x13170;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13171);
            reg = x13171;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":223:41)
          auto x13172 = x13163 * x76;
          host_args.at(0) = x13172;
          host_args.at(1) = x13168;
          host_args.at(2) = x13169;
          host_args.at(3) = x13170;
          host_args.at(4) = x13171;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":180:10))
        auto x13173 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13173 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:10)
        auto x13174 = x13173 - x735;
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:10)
        if (x13174 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:226");
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":176:10))
        auto x13175 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13175 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:10)
        auto x13176 = x13175 - x13163;
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:10)
        if (x13176 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:227");
      }
      if (x13143 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":212:22)
      auto x13177 = x13142 + x13144;
      // loc("cirgen/circuit/rv32im/ecall.cpp":212:22)
      auto x13178 = x13177 + x13146;
      if (x13178 != 0) {
        // loc("Top/Mux/5/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13179 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13179 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":219:23)
        auto x13180 = x13179 + x90;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13181 = host_outs.at(0);
          auto x13182 = host_outs.at(1);
          auto x13183 = host_outs.at(2);
          auto x13184 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13181);
            reg = x13181;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13182);
            reg = x13182;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13183);
            reg = x13183;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13184);
            reg = x13184;
          }
          {
            host_args.at(0) = x13180;
            host_args.at(1) = x13181;
            host_args.at(2) = x13182;
            host_args.at(3) = x13183;
            host_args.at(4) = x13184;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13185 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13185 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13186 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13186 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13187 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13187 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13188 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13188 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13180);
            reg = x13180;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13185);
            reg = x13185;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13186);
            reg = x13186;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13187);
            reg = x13187;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13188);
            reg = x13188;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":223:41)
          auto x13189 = x13180 * x76;
          host_args.at(0) = x13189;
          host_args.at(1) = x13185;
          host_args.at(2) = x13186;
          host_args.at(3) = x13187;
          host_args.at(4) = x13188;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":180:10))
        auto x13190 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13190 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:10)
        auto x13191 = x13190 - x735;
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:10)
        if (x13191 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:226");
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":176:10))
        auto x13192 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13192 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:10)
        auto x13193 = x13192 - x13180;
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:10)
        if (x13193 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:227");
      }
      if (x13141 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":212:22)
      auto x13194 = x13145 + x13146;
      if (x13194 != 0) {
        // loc("Top/Mux/5/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13195 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13195 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":219:23)
        auto x13196 = x13195 + x75;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13197 = host_outs.at(0);
          auto x13198 = host_outs.at(1);
          auto x13199 = host_outs.at(2);
          auto x13200 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13197);
            reg = x13197;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13198);
            reg = x13198;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13199);
            reg = x13199;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13200);
            reg = x13200;
          }
          {
            host_args.at(0) = x13196;
            host_args.at(1) = x13197;
            host_args.at(2) = x13198;
            host_args.at(3) = x13199;
            host_args.at(4) = x13200;
            host_args.at(5) = x90;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13201 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x13201 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13202 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x13202 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13203 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x13203 != Fp::invalid());
          // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13204 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x13204 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13196);
            reg = x13196;
          }
          // loc("cirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x735);
            reg = x735;
          }
          // loc("cirgen/components/ram.cpp":171:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x90);
            reg = x90;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13201);
            reg = x13201;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13202);
            reg = x13202;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13203);
            reg = x13203;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13204);
            reg = x13204;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":223:41)
          auto x13205 = x13196 * x76;
          host_args.at(0) = x13205;
          host_args.at(1) = x13201;
          host_args.at(2) = x13202;
          host_args.at(3) = x13203;
          host_args.at(4) = x13204;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":180:10))
        auto x13206 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13206 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:10)
        auto x13207 = x13206 - x735;
        // loc("cirgen/circuit/rv32im/ecall.cpp":226:10)
        if (x13207 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:226");
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":176:10))
        auto x13208 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13208 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:10)
        auto x13209 = x13208 - x13196;
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:10)
        if (x13209 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:227");
      }
      if (x92 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("Top/Mux/5/OneHot/hot[14](Reg)"("./cirgen/components/mux.h":39:25))
    auto x13210 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x13210 != Fp::invalid());
    if (x13210 != 0) {
      // loc("Top/Mux/5/OneHot/hot[14](Reg)"("cirgen/circuit/rv32im/body.cpp":94:63))
      auto x13211 = args[2][114 * steps + ((cycle - 1) & mask)];
      assert(x13211 != Fp::invalid());
      if (x13211 != 0) {
        // loc("Top/Mux/5/Mux/14/Reg"("cirgen/circuit/rv32im/body.cpp":95:53))
        auto x13212 = args[2][115 * steps + ((cycle - 1) & mask)];
        assert(x13212 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":95:16)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13212);
          reg = x13212;
        }
      }
      // loc("Top/Mux/5/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/body.cpp":97:69))
      auto x13213 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x13213 != Fp::invalid());
      if (x13213 != 0) {
        // loc("Top/Mux/5/Mux/8/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/body.cpp":100:75))
        auto x13214 = args[2][186 * steps + ((cycle - 1) & mask)];
        assert(x13214 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":101:8)
        auto x13215 = x93 - x13214;
        // loc("cirgen/circuit/rv32im/body.cpp":101:8)
        if (x13215 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:101");
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13216 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x13216 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":104:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13216);
          reg = x13216;
        }
        host_args.at(0) = x13216;
        host(ctx, "log", "isFromEcall, set checkDirty: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":20:23)
        args[1][72] = x13216;
        {
          // loc("Top/Mux/5/Mux/14/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13217 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x13217 != Fp::invalid());
          host_args.at(0) = x13217;
          host_args.at(1) = x749;
          host(ctx, "halt", "", host_args.data(), 2, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/5/OneHot/hot[12](Reg)"("cirgen/circuit/rv32im/body.cpp":112:77))
      auto x13218 = args[2][112 * steps + ((cycle - 1) & mask)];
      assert(x13218 != Fp::invalid());
      if (x13218 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":114:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x90);
          reg = x90;
        }
        host(ctx, "log", "isFromPageFault, set checkDirty: 1", host_args.data(), 0, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":20:23)
        args[1][72] = x93;
        {
          // loc("Top/Mux/5/Mux/14/Reg"("./cirgen/compiler/edsl/component.h":153:27))
          auto x13219 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x13219 != Fp::invalid());
          host_args.at(0) = x13219;
          host_args.at(1) = x749;
          host(ctx, "halt", "", host_args.data(), 2, host_outs.data(), 0);
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x13220 = x749 + x76;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x13221 = Fp(x13220.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13221);
          reg = x13221;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x13222 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x13222 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x13223 = x13220 - x13222;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x13224 = x13223 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x13225 = Fp(x13224.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13225);
          reg = x13225;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x13226 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x13226 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x13227 = x13224 - x13226;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x13228 = x13227 * x87;
      {
        // loc("cirgen/components/bytes.cpp":96:21)
        auto x13229 = Fp(x13228.asUInt32() & x89.asUInt32());
        // loc("cirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13229);
          reg = x13229;
        }
      }
      // loc("Top/Mux/5/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":97:16))
      auto x13230 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x13230 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":97:11)
      auto x13231 = x13228 - x13230;
      // loc("cirgen/components/bytes.cpp":97:10)
      auto x13232 = x13231 * x87;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x13233 = Fp(x13232.asUInt32() & x75.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13233);
          reg = x13233;
        }
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13234 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x13234 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x13235 = x13232 - x13234;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x13236 = x13235 * x74;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13236);
        reg = x13236;
      }
      // loc("Top/Mux/5/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13237 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x13237 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x13238 = x93 - x13237;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x13239 = x13237 * x13238;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13239);
        reg = x13239;
      }
      // loc("Top/Mux/5/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x13240 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x13240 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x13241 = x90 - x13237;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x13242 = x13240 * x13241;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x13242 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/body.cpp":123:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x63);
        reg = x63;
      }
    }
  }
  // loc("Top/Code/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":39:25))
  auto x13243 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x13243 != Fp::invalid());
  if (x13243 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x13244 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13244 != Fp::invalid());
    host_args.at(0) = x13244;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[7](Reg)"("./cirgen/components/mux.h":39:25))
  auto x13245 = args[0][8 * steps + ((cycle - 0) & mask)];
  assert(x13245 != Fp::invalid());
  if (x13245 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":153:27))
    auto x13246 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13246 != Fp::invalid());
    host_args.at(0) = x13246;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/top.cpp":66:27))
  auto x13247 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x13247 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":66:16)
  auto x13248 = x13247 + x94;
  // loc("Top/Code/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/top.cpp":66:27))
  auto x13249 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x13249 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":66:16)
  auto x13250 = x13248 + x13249;
  // loc("cirgen/circuit/rv32im/top.cpp":66:16)
  auto x13251 = x13250 + x419;
  // loc("cirgen/circuit/rv32im/top.cpp":66:16)
  auto x13252 = x13251 + x472;
  // loc("cirgen/circuit/rv32im/top.cpp":66:16)
  auto x13253 = x13252 + x734;
  // loc("cirgen/circuit/rv32im/top.cpp":66:16)
  auto x13254 = x13253 + x13243;
  // loc("cirgen/circuit/rv32im/top.cpp":66:16)
  auto x13255 = x13254 + x13245;
  if (x734 != 0) {
    // loc("Top/Mux/5/OneHot/hot[14](Reg)"("cirgen/circuit/rv32im/top.cpp":74:18))
    auto x13256 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x13256 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":75:5)
    {
      auto& reg = args[2][2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x13256);
      reg = x13256;
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":77:23)
  auto x13257 = x13255 - x734;
  if (x13257 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":77:27)
    {
      auto& reg = args[2][2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
  auto x13258 = args[2][2 * steps + ((cycle - 0) & mask)];
  assert(x13258 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":78:10)
  auto x13259 = x93 - x13258;
  if (x13249 != 0) {
    {
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
  }
  if (x419 != 0) {
    {
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/ram.cpp":43:3)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/ram.cpp":44:3)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/ram.cpp":45:3)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x93);
        reg = x93;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
  }
  if (x472 != 0) {
    {
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
  }
  if (x734 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13260 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x13260 != Fp::invalid());
    if (x13260 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13261 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x13261 != Fp::invalid());
    if (x13261 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13262 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13262 != Fp::invalid());
    if (x13262 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13263 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13263 != Fp::invalid());
    if (x13263 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13264 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13264 != Fp::invalid());
    if (x13264 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13265 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13265 != Fp::invalid());
    if (x13265 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13266 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x13266 != Fp::invalid());
    if (x13266 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13267 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13267 != Fp::invalid());
    if (x13267 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13268 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x13268 != Fp::invalid());
    if (x13268 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13269 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x13269 != Fp::invalid());
      if (x13269 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13270 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x13270 != Fp::invalid());
      if (x13270 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13271 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x13271 != Fp::invalid());
      if (x13271 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13272 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x13272 != Fp::invalid());
      if (x13272 != 0) {
        {
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13273 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x13273 != Fp::invalid());
    if (x13273 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13274 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x13274 != Fp::invalid());
    if (x13274 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13275 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x13275 != Fp::invalid());
    if (x13275 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13276 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x13276 != Fp::invalid());
    if (x13276 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13277 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x13277 != Fp::invalid());
    if (x13277 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13278 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x13278 != Fp::invalid());
    if (x13278 != 0) {
      {
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
      }
    }
  }
  if (x13243 != 0) {
    {
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x92);
        reg = x92;
      }
    }
  }
  if (x419 != 0) {
    {
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13279 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x13279 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13280 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13280 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13281 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13281 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13282 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13282 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13283 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13283 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13284 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13284 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13285 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13285 != Fp::invalid());
      host_args.at(0) = x13279;
      host_args.at(1) = x13280;
      host_args.at(2) = x13281;
      host_args.at(3) = x13282;
      host_args.at(4) = x13283;
      host_args.at(5) = x13284;
      host_args.at(6) = x13285;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13286 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x13286 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13287 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13287 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13288 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13288 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13289 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x13289 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13290 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x13290 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13291 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x13291 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13292 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x13292 != Fp::invalid());
      host_args.at(0) = x13286;
      host_args.at(1) = x13287;
      host_args.at(2) = x13288;
      host_args.at(3) = x13289;
      host_args.at(4) = x13290;
      host_args.at(5) = x13291;
      host_args.at(6) = x13292;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13293 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x13293 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13294 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x13294 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13295 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x13295 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13296 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x13296 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13297 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x13297 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13298 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x13298 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13299 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x13299 != Fp::invalid());
      host_args.at(0) = x13293;
      host_args.at(1) = x13294;
      host_args.at(2) = x13295;
      host_args.at(3) = x13296;
      host_args.at(4) = x13297;
      host_args.at(5) = x13298;
      host_args.at(6) = x13299;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13300 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x13300 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13301 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x13301 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13302 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x13302 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13303 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x13303 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13304 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x13304 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13305 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x13305 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13306 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x13306 != Fp::invalid());
      host_args.at(0) = x13300;
      host_args.at(1) = x13301;
      host_args.at(2) = x13302;
      host_args.at(3) = x13303;
      host_args.at(4) = x13304;
      host_args.at(5) = x13305;
      host_args.at(6) = x13306;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x472 != 0) {
    {
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13307 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x13307 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13308 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13308 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13309 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13309 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13310 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13310 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13311 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13311 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13312 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13312 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13313 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13313 != Fp::invalid());
      host_args.at(0) = x13307;
      host_args.at(1) = x13308;
      host_args.at(2) = x13309;
      host_args.at(3) = x13310;
      host_args.at(4) = x13311;
      host_args.at(5) = x13312;
      host_args.at(6) = x13313;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13314 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x13314 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13315 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13315 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13316 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13316 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13317 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x13317 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13318 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x13318 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13319 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x13319 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13320 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x13320 != Fp::invalid());
      host_args.at(0) = x13314;
      host_args.at(1) = x13315;
      host_args.at(2) = x13316;
      host_args.at(3) = x13317;
      host_args.at(4) = x13318;
      host_args.at(5) = x13319;
      host_args.at(6) = x13320;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13321 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x13321 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13322 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x13322 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13323 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x13323 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13324 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x13324 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13325 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x13325 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13326 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x13326 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13327 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x13327 != Fp::invalid());
      host_args.at(0) = x13321;
      host_args.at(1) = x13322;
      host_args.at(2) = x13323;
      host_args.at(3) = x13324;
      host_args.at(4) = x13325;
      host_args.at(5) = x13326;
      host_args.at(6) = x13327;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13328 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x13328 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13329 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x13329 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13330 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x13330 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13331 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x13331 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13332 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x13332 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13333 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x13333 != Fp::invalid());
      // loc("Top/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
      auto x13334 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x13334 != Fp::invalid());
      host_args.at(0) = x13328;
      host_args.at(1) = x13329;
      host_args.at(2) = x13330;
      host_args.at(3) = x13331;
      host_args.at(4) = x13332;
      host_args.at(5) = x13333;
      host_args.at(6) = x13334;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x734 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13335 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x13335 != Fp::invalid());
    if (x13335 != 0) {
      {
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13336 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13336 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13337 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13337 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13338 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13338 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13339 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13339 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13340 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13340 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13341 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13341 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13342 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13342 != Fp::invalid());
        host_args.at(0) = x13336;
        host_args.at(1) = x13337;
        host_args.at(2) = x13338;
        host_args.at(3) = x13339;
        host_args.at(4) = x13340;
        host_args.at(5) = x13341;
        host_args.at(6) = x13342;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13343 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13343 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13344 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13344 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13345 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13345 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13346 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13346 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13347 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13347 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13348 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13348 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13349 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13349 != Fp::invalid());
        host_args.at(0) = x13343;
        host_args.at(1) = x13344;
        host_args.at(2) = x13345;
        host_args.at(3) = x13346;
        host_args.at(4) = x13347;
        host_args.at(5) = x13348;
        host_args.at(6) = x13349;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13350 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13350 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13351 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13351 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13352 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13352 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13353 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13353 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13354 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13354 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13355 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13355 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13356 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13356 != Fp::invalid());
        host_args.at(0) = x13350;
        host_args.at(1) = x13351;
        host_args.at(2) = x13352;
        host_args.at(3) = x13353;
        host_args.at(4) = x13354;
        host_args.at(5) = x13355;
        host_args.at(6) = x13356;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13357 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13357 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13358 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13358 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13359 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13359 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13360 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13360 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13361 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13361 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13362 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13362 != Fp::invalid());
        // loc("Top/Mux/5/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13363 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13363 != Fp::invalid());
        host_args.at(0) = x13357;
        host_args.at(1) = x13358;
        host_args.at(2) = x13359;
        host_args.at(3) = x13360;
        host_args.at(4) = x13361;
        host_args.at(5) = x13362;
        host_args.at(6) = x13363;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13364 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x13364 != Fp::invalid());
    if (x13364 != 0) {
      {
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13365 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13365 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13366 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13366 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13367 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13367 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13368 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13368 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13369 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13369 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13370 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13370 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13371 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13371 != Fp::invalid());
        host_args.at(0) = x13365;
        host_args.at(1) = x13366;
        host_args.at(2) = x13367;
        host_args.at(3) = x13368;
        host_args.at(4) = x13369;
        host_args.at(5) = x13370;
        host_args.at(6) = x13371;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13372 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13372 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13373 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13373 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13374 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13374 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13375 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13375 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13376 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13376 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13377 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13377 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13378 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13378 != Fp::invalid());
        host_args.at(0) = x13372;
        host_args.at(1) = x13373;
        host_args.at(2) = x13374;
        host_args.at(3) = x13375;
        host_args.at(4) = x13376;
        host_args.at(5) = x13377;
        host_args.at(6) = x13378;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13379 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13379 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13380 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13380 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13381 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13381 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13382 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13382 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13383 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13383 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13384 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13384 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13385 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13385 != Fp::invalid());
        host_args.at(0) = x13379;
        host_args.at(1) = x13380;
        host_args.at(2) = x13381;
        host_args.at(3) = x13382;
        host_args.at(4) = x13383;
        host_args.at(5) = x13384;
        host_args.at(6) = x13385;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13386 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13386 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13387 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13387 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13388 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13388 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13389 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13389 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13390 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13390 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13391 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13391 != Fp::invalid());
        // loc("Top/Mux/5/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13392 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13392 != Fp::invalid());
        host_args.at(0) = x13386;
        host_args.at(1) = x13387;
        host_args.at(2) = x13388;
        host_args.at(3) = x13389;
        host_args.at(4) = x13390;
        host_args.at(5) = x13391;
        host_args.at(6) = x13392;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13393 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13393 != Fp::invalid());
    if (x13393 != 0) {
      {
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13394 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13394 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13395 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13395 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13396 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13396 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13397 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13397 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13398 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13398 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13399 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13399 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13400 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13400 != Fp::invalid());
        host_args.at(0) = x13394;
        host_args.at(1) = x13395;
        host_args.at(2) = x13396;
        host_args.at(3) = x13397;
        host_args.at(4) = x13398;
        host_args.at(5) = x13399;
        host_args.at(6) = x13400;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13401 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13401 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13402 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13402 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13403 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13403 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13404 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13404 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13405 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13405 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13406 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13406 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13407 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13407 != Fp::invalid());
        host_args.at(0) = x13401;
        host_args.at(1) = x13402;
        host_args.at(2) = x13403;
        host_args.at(3) = x13404;
        host_args.at(4) = x13405;
        host_args.at(5) = x13406;
        host_args.at(6) = x13407;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13408 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13408 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13409 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13409 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13410 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13410 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13411 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13411 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13412 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13412 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13413 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13413 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13414 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13414 != Fp::invalid());
        host_args.at(0) = x13408;
        host_args.at(1) = x13409;
        host_args.at(2) = x13410;
        host_args.at(3) = x13411;
        host_args.at(4) = x13412;
        host_args.at(5) = x13413;
        host_args.at(6) = x13414;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13415 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13415 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13416 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13416 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13417 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13417 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13418 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13418 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13419 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13419 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13420 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13420 != Fp::invalid());
        // loc("Top/Mux/5/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13421 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13421 != Fp::invalid());
        host_args.at(0) = x13415;
        host_args.at(1) = x13416;
        host_args.at(2) = x13417;
        host_args.at(3) = x13418;
        host_args.at(4) = x13419;
        host_args.at(5) = x13420;
        host_args.at(6) = x13421;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13422 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13422 != Fp::invalid());
    if (x13422 != 0) {
      {
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13423 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13423 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13424 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13424 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13425 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13425 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13426 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13426 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13427 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13427 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13428 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13428 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13429 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13429 != Fp::invalid());
        host_args.at(0) = x13423;
        host_args.at(1) = x13424;
        host_args.at(2) = x13425;
        host_args.at(3) = x13426;
        host_args.at(4) = x13427;
        host_args.at(5) = x13428;
        host_args.at(6) = x13429;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13430 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13430 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13431 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13431 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13432 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13432 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13433 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13433 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13434 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13434 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13435 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13435 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13436 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13436 != Fp::invalid());
        host_args.at(0) = x13430;
        host_args.at(1) = x13431;
        host_args.at(2) = x13432;
        host_args.at(3) = x13433;
        host_args.at(4) = x13434;
        host_args.at(5) = x13435;
        host_args.at(6) = x13436;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13437 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13437 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13438 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13438 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13439 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13439 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13440 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13440 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13441 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13441 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13442 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13442 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13443 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13443 != Fp::invalid());
        host_args.at(0) = x13437;
        host_args.at(1) = x13438;
        host_args.at(2) = x13439;
        host_args.at(3) = x13440;
        host_args.at(4) = x13441;
        host_args.at(5) = x13442;
        host_args.at(6) = x13443;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13444 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13444 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13445 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13445 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13446 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13446 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13447 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13447 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13448 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13448 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13449 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13449 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13450 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13450 != Fp::invalid());
        host_args.at(0) = x13444;
        host_args.at(1) = x13445;
        host_args.at(2) = x13446;
        host_args.at(3) = x13447;
        host_args.at(4) = x13448;
        host_args.at(5) = x13449;
        host_args.at(6) = x13450;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13451 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x13451 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13452 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x13452 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13453 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x13453 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13454 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x13454 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13455 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x13455 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13456 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x13456 != Fp::invalid());
        // loc("Top/Mux/5/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13457 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x13457 != Fp::invalid());
        host_args.at(0) = x13451;
        host_args.at(1) = x13452;
        host_args.at(2) = x13453;
        host_args.at(3) = x13454;
        host_args.at(4) = x13455;
        host_args.at(5) = x13456;
        host_args.at(6) = x13457;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13458 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13458 != Fp::invalid());
    if (x13458 != 0) {
      {
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13459 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13459 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13460 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13460 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13461 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13461 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13462 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13462 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13463 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13463 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13464 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13464 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13465 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13465 != Fp::invalid());
        host_args.at(0) = x13459;
        host_args.at(1) = x13460;
        host_args.at(2) = x13461;
        host_args.at(3) = x13462;
        host_args.at(4) = x13463;
        host_args.at(5) = x13464;
        host_args.at(6) = x13465;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13466 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13466 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13467 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13467 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13468 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13468 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13469 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13469 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13470 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13470 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13471 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13471 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13472 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13472 != Fp::invalid());
        host_args.at(0) = x13466;
        host_args.at(1) = x13467;
        host_args.at(2) = x13468;
        host_args.at(3) = x13469;
        host_args.at(4) = x13470;
        host_args.at(5) = x13471;
        host_args.at(6) = x13472;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13473 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13473 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13474 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13474 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13475 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13475 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13476 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13476 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13477 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13477 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13478 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13478 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13479 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13479 != Fp::invalid());
        host_args.at(0) = x13473;
        host_args.at(1) = x13474;
        host_args.at(2) = x13475;
        host_args.at(3) = x13476;
        host_args.at(4) = x13477;
        host_args.at(5) = x13478;
        host_args.at(6) = x13479;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13480 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13480 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13481 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13481 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13482 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13482 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13483 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13483 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13484 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13484 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13485 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13485 != Fp::invalid());
        // loc("Top/Mux/5/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13486 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13486 != Fp::invalid());
        host_args.at(0) = x13480;
        host_args.at(1) = x13481;
        host_args.at(2) = x13482;
        host_args.at(3) = x13483;
        host_args.at(4) = x13484;
        host_args.at(5) = x13485;
        host_args.at(6) = x13486;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13487 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13487 != Fp::invalid());
    if (x13487 != 0) {
      {
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13488 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13488 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13489 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13489 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13490 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13490 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13491 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13491 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13492 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13492 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13493 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13493 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13494 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13494 != Fp::invalid());
        host_args.at(0) = x13488;
        host_args.at(1) = x13489;
        host_args.at(2) = x13490;
        host_args.at(3) = x13491;
        host_args.at(4) = x13492;
        host_args.at(5) = x13493;
        host_args.at(6) = x13494;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13495 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13495 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13496 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13496 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13497 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13497 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13498 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13498 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13499 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13499 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13500 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13500 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13501 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13501 != Fp::invalid());
        host_args.at(0) = x13495;
        host_args.at(1) = x13496;
        host_args.at(2) = x13497;
        host_args.at(3) = x13498;
        host_args.at(4) = x13499;
        host_args.at(5) = x13500;
        host_args.at(6) = x13501;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13502 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13502 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13503 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13503 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13504 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13504 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13505 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13505 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13506 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13506 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13507 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13507 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13508 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13508 != Fp::invalid());
        host_args.at(0) = x13502;
        host_args.at(1) = x13503;
        host_args.at(2) = x13504;
        host_args.at(3) = x13505;
        host_args.at(4) = x13506;
        host_args.at(5) = x13507;
        host_args.at(6) = x13508;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13509 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13509 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13510 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13510 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13511 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13511 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13512 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13512 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13513 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13513 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13514 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13514 != Fp::invalid());
        // loc("Top/Mux/5/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13515 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13515 != Fp::invalid());
        host_args.at(0) = x13509;
        host_args.at(1) = x13510;
        host_args.at(2) = x13511;
        host_args.at(3) = x13512;
        host_args.at(4) = x13513;
        host_args.at(5) = x13514;
        host_args.at(6) = x13515;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13516 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x13516 != Fp::invalid());
    if (x13516 != 0) {
      {
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13517 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13517 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13518 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13518 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13519 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13519 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13520 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13520 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13521 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13521 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13522 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13522 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13523 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13523 != Fp::invalid());
        host_args.at(0) = x13517;
        host_args.at(1) = x13518;
        host_args.at(2) = x13519;
        host_args.at(3) = x13520;
        host_args.at(4) = x13521;
        host_args.at(5) = x13522;
        host_args.at(6) = x13523;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13524 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13524 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13525 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13525 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13526 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13526 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13527 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13527 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13528 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13528 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13529 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13529 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13530 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13530 != Fp::invalid());
        host_args.at(0) = x13524;
        host_args.at(1) = x13525;
        host_args.at(2) = x13526;
        host_args.at(3) = x13527;
        host_args.at(4) = x13528;
        host_args.at(5) = x13529;
        host_args.at(6) = x13530;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13531 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13531 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13532 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13532 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13533 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13533 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13534 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13534 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13535 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13535 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13536 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13536 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13537 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13537 != Fp::invalid());
        host_args.at(0) = x13531;
        host_args.at(1) = x13532;
        host_args.at(2) = x13533;
        host_args.at(3) = x13534;
        host_args.at(4) = x13535;
        host_args.at(5) = x13536;
        host_args.at(6) = x13537;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13538 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13538 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13539 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13539 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13540 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13540 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13541 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13541 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13542 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13542 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13543 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13543 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13544 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13544 != Fp::invalid());
        host_args.at(0) = x13538;
        host_args.at(1) = x13539;
        host_args.at(2) = x13540;
        host_args.at(3) = x13541;
        host_args.at(4) = x13542;
        host_args.at(5) = x13543;
        host_args.at(6) = x13544;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13545 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x13545 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13546 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x13546 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13547 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x13547 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13548 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x13548 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13549 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x13549 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13550 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x13550 != Fp::invalid());
        // loc("Top/Mux/5/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13551 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x13551 != Fp::invalid());
        host_args.at(0) = x13545;
        host_args.at(1) = x13546;
        host_args.at(2) = x13547;
        host_args.at(3) = x13548;
        host_args.at(4) = x13549;
        host_args.at(5) = x13550;
        host_args.at(6) = x13551;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13552 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x13552 != Fp::invalid());
    if (x13552 != 0) {
      {
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13553 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13553 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13554 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13554 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13555 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13555 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13556 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13556 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13557 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13557 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13558 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13558 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13559 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13559 != Fp::invalid());
        host_args.at(0) = x13553;
        host_args.at(1) = x13554;
        host_args.at(2) = x13555;
        host_args.at(3) = x13556;
        host_args.at(4) = x13557;
        host_args.at(5) = x13558;
        host_args.at(6) = x13559;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13560 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13560 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13561 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13561 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13562 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13562 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13563 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13563 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13564 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13564 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13565 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13565 != Fp::invalid());
        // loc("Top/Mux/5/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13566 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13566 != Fp::invalid());
        host_args.at(0) = x13560;
        host_args.at(1) = x13561;
        host_args.at(2) = x13562;
        host_args.at(3) = x13563;
        host_args.at(4) = x13564;
        host_args.at(5) = x13565;
        host_args.at(6) = x13566;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13567 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x13567 != Fp::invalid());
    if (x13567 != 0) {
      {
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13568 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13568 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13569 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13569 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13570 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13570 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13571 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13571 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13572 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13572 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13573 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13573 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13574 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13574 != Fp::invalid());
        host_args.at(0) = x13568;
        host_args.at(1) = x13569;
        host_args.at(2) = x13570;
        host_args.at(3) = x13571;
        host_args.at(4) = x13572;
        host_args.at(5) = x13573;
        host_args.at(6) = x13574;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13575 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13575 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13576 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13576 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13577 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13577 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13578 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13578 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13579 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13579 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13580 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13580 != Fp::invalid());
        // loc("Top/Mux/5/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13581 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13581 != Fp::invalid());
        host_args.at(0) = x13575;
        host_args.at(1) = x13576;
        host_args.at(2) = x13577;
        host_args.at(3) = x13578;
        host_args.at(4) = x13579;
        host_args.at(5) = x13580;
        host_args.at(6) = x13581;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13582 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x13582 != Fp::invalid());
    if (x13582 != 0) {
      {
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13583 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13583 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13584 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13584 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13585 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13585 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13586 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13586 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13587 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13587 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13588 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13588 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13589 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13589 != Fp::invalid());
        host_args.at(0) = x13583;
        host_args.at(1) = x13584;
        host_args.at(2) = x13585;
        host_args.at(3) = x13586;
        host_args.at(4) = x13587;
        host_args.at(5) = x13588;
        host_args.at(6) = x13589;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13590 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13590 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13591 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13591 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13592 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13592 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13593 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13593 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13594 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13594 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13595 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13595 != Fp::invalid());
        // loc("Top/Mux/5/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13596 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13596 != Fp::invalid());
        host_args.at(0) = x13590;
        host_args.at(1) = x13591;
        host_args.at(2) = x13592;
        host_args.at(3) = x13593;
        host_args.at(4) = x13594;
        host_args.at(5) = x13595;
        host_args.at(6) = x13596;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13597 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x13597 != Fp::invalid());
    if (x13597 != 0) {
      {
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13598 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13598 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13599 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13599 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13600 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13600 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13601 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13601 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13602 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13602 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13603 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13603 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13604 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13604 != Fp::invalid());
        host_args.at(0) = x13598;
        host_args.at(1) = x13599;
        host_args.at(2) = x13600;
        host_args.at(3) = x13601;
        host_args.at(4) = x13602;
        host_args.at(5) = x13603;
        host_args.at(6) = x13604;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13605 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13605 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13606 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13606 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13607 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13607 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13608 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13608 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13609 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13609 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13610 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13610 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13611 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13611 != Fp::invalid());
        host_args.at(0) = x13605;
        host_args.at(1) = x13606;
        host_args.at(2) = x13607;
        host_args.at(3) = x13608;
        host_args.at(4) = x13609;
        host_args.at(5) = x13610;
        host_args.at(6) = x13611;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13612 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13612 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13613 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13613 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13614 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13614 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13615 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13615 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13616 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13616 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13617 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13617 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13618 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13618 != Fp::invalid());
        host_args.at(0) = x13612;
        host_args.at(1) = x13613;
        host_args.at(2) = x13614;
        host_args.at(3) = x13615;
        host_args.at(4) = x13616;
        host_args.at(5) = x13617;
        host_args.at(6) = x13618;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13619 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13619 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13620 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13620 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13621 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13621 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13622 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13622 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13623 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13623 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13624 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13624 != Fp::invalid());
        // loc("Top/Mux/5/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":153:27))
        auto x13625 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13625 != Fp::invalid());
        host_args.at(0) = x13619;
        host_args.at(1) = x13620;
        host_args.at(2) = x13621;
        host_args.at(3) = x13622;
        host_args.at(4) = x13623;
        host_args.at(5) = x13624;
        host_args.at(6) = x13625;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x13259;
}

} // namespace risc0::circuit::rv32im
// clang-format on
