// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::recursion {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 96> host_args;
  std::array<Fp, 32> host_outs;
  // loc(unknown)
  Fp x0(1040977421);
  // loc(unknown)
  Fp x1(1792450386);
  // loc(unknown)
  Fp x2(1470845646);
  // loc(unknown)
  Fp x3(1363837384);
  // loc(unknown)
  Fp x4(1878280202);
  // loc(unknown)
  Fp x5(434078361);
  // loc(unknown)
  Fp x6(1946596189);
  // loc(unknown)
  Fp x7(875839332);
  // loc(unknown)
  Fp x8(463976218);
  // loc(unknown)
  Fp x9(976057819);
  // loc(unknown)
  Fp x10(48375137);
  // loc(unknown)
  Fp x11(1549779579);
  // loc(unknown)
  Fp x12(1679178250);
  // loc(unknown)
  Fp x13(530151394);
  // loc(unknown)
  Fp x14(1629316321);
  // loc(unknown)
  Fp x15(1854174607);
  // loc(unknown)
  Fp x16(720724951);
  // loc(unknown)
  Fp x17(14387587);
  // loc(unknown)
  Fp x18(1883820770);
  // loc(unknown)
  Fp x19(205609311);
  // loc(unknown)
  Fp x20(1136469704);
  // loc(unknown)
  Fp x21(1439947916);
  // loc(unknown)
  Fp x22(723038058);
  // loc(unknown)
  Fp x23(53041581);
  // loc(unknown)
  Fp x24(1810596765);
  // loc(unknown)
  Fp x25(1210751726);
  // loc(unknown)
  Fp x26(1327682690);
  // loc(unknown)
  Fp x27(1886977120);
  // loc(unknown)
  Fp x28(1551596046);
  // loc(unknown)
  Fp x29(1186174623);
  // loc(unknown)
  Fp x30(1199068823);
  // loc(unknown)
  Fp x31(1240419708);
  // loc(unknown)
  Fp x32(1708681573);
  // loc(unknown)
  Fp x33(308575117);
  // loc(unknown)
  Fp x34(1111544260);
  // loc(unknown)
  Fp x35(822033215);
  // loc(unknown)
  Fp x36(1891545577);
  // loc(unknown)
  Fp x37(440300254);
  // loc(unknown)
  Fp x38(1726563304);
  // loc(unknown)
  Fp x39(1365519753);
  // loc(unknown)
  Fp x40(924863639);
  // loc(unknown)
  Fp x41(1540960371);
  // loc(unknown)
  Fp x42(1052077299);
  // loc(unknown)
  Fp x43(1930103076);
  // loc(unknown)
  Fp x44(918610824);
  // loc(unknown)
  Fp x45(13683276);
  // loc(unknown)
  Fp x46(606789471);
  // loc(unknown)
  Fp x47(1974912880);
  // loc(unknown)
  Fp x48(65998480);
  // loc(unknown)
  Fp x49(1461037801);
  // loc(unknown)
  Fp x50(1997365680);
  // loc(unknown)
  Fp x51(801504236);
  // loc(unknown)
  Fp x52(1792686146);
  // loc(unknown)
  Fp x53(1001081699);
  // loc(unknown)
  Fp x54(98371040);
  // loc(unknown)
  Fp x55(1389833583);
  // loc(unknown)
  Fp x56(106789798);
  // loc(unknown)
  Fp x57(1188752902);
  // loc(unknown)
  Fp x58(20525701);
  // loc(unknown)
  Fp x59(1558116381);
  // loc(unknown)
  Fp x60(1942928017);
  // loc(unknown)
  Fp x61(1928969209);
  // loc(unknown)
  Fp x62(51866717);
  // loc(unknown)
  Fp x63(658182609);
  // loc(unknown)
  Fp x64(1867716110);
  // loc(unknown)
  Fp x65(111593398);
  // loc(unknown)
  Fp x66(375892129);
  // loc(unknown)
  Fp x67(1083257840);
  // loc(unknown)
  Fp x68(497520322);
  // loc(unknown)
  Fp x69(1827572010);
  // loc(unknown)
  Fp x70(862495875);
  // loc(unknown)
  Fp x71(1507649755);
  // loc(unknown)
  Fp x72(447555988);
  // loc(unknown)
  Fp x73(1042892522);
  // loc(unknown)
  Fp x74(1910423126);
  // loc(unknown)
  Fp x75(760115692);
  // loc(unknown)
  Fp x76(1099252725);
  // loc(unknown)
  Fp x77(1841795381);
  // loc(unknown)
  Fp x78(1584033957);
  // loc(unknown)
  Fp x79(457372011);
  // loc(unknown)
  Fp x80(1079030649);
  // loc(unknown)
  Fp x81(1748789933);
  // loc(unknown)
  Fp x82(1622328571);
  // loc(unknown)
  Fp x83(1478577620);
  // loc(unknown)
  Fp x84(1908416316);
  // loc(unknown)
  Fp x85(76770019);
  // loc(unknown)
  Fp x86(1549062383);
  // loc(unknown)
  Fp x87(1293938517);
  // loc(unknown)
  Fp x88(623051854);
  // loc(unknown)
  Fp x89(1150410028);
  // loc(unknown)
  Fp x90(162510541);
  // loc(unknown)
  Fp x91(1065075039);
  // loc(unknown)
  Fp x92(1608853840);
  // loc(unknown)
  Fp x93(1198261138);
  // loc(unknown)
  Fp x94(538103555);
  // loc(unknown)
  Fp x95(59510015);
  // loc(unknown)
  Fp x96(1424297384);
  // loc(unknown)
  Fp x97(1402624179);
  // loc(unknown)
  Fp x98(552696906);
  // loc(unknown)
  Fp x99(158646617);
  // loc(unknown)
  Fp x100(946500736);
  // loc(unknown)
  Fp x101(890243564);
  // loc(unknown)
  Fp x102(1215259350);
  // loc(unknown)
  Fp x103(1463323727);
  // loc(unknown)
  Fp x104(855276054);
  // loc(unknown)
  Fp x105(1080533265);
  // loc(unknown)
  Fp x106(1664590951);
  // loc(unknown)
  Fp x107(192082241);
  // loc(unknown)
  Fp x108(217046702);
  // loc(unknown)
  Fp x109(1891637550);
  // loc(unknown)
  Fp x110(142102402);
  // loc(unknown)
  Fp x111(1950429111);
  // loc(unknown)
  Fp x112(1257820264);
  // loc(unknown)
  Fp x113(1663353317);
  // loc(unknown)
  Fp x114(27129487);
  // loc(unknown)
  Fp x115(1567618575);
  // loc(unknown)
  Fp x116(1147522062);
  // loc(unknown)
  Fp x117(1380248020);
  // loc(unknown)
  Fp x118(150307788);
  // loc(unknown)
  Fp x119(1291790245);
  // loc(unknown)
  Fp x120(989176635);
  // loc(unknown)
  Fp x121(1608891156);
  // loc(unknown)
  Fp x122(755691969);
  // loc(unknown)
  Fp x123(1781980094);
  // loc(unknown)
  Fp x124(241306552);
  // loc(unknown)
  Fp x125(1672219447);
  // loc(unknown)
  Fp x126(1715719711);
  // loc(unknown)
  Fp x127(273790406);
  // loc(unknown)
  Fp x128(1507936940);
  // loc(unknown)
  Fp x129(1262312258);
  // loc(unknown)
  Fp x130(1545325389);
  // loc(unknown)
  Fp x131(1239734761);
  // loc(unknown)
  Fp x132(1687379185);
  // loc(unknown)
  Fp x133(162506101);
  // loc(unknown)
  Fp x134(989618631);
  // loc(unknown)
  Fp x135(1221257987);
  // loc(unknown)
  Fp x136(1150912935);
  // loc(unknown)
  Fp x137(809508074);
  // loc(unknown)
  Fp x138(1401020792);
  // loc(unknown)
  Fp x139(51256176);
  // loc(unknown)
  Fp x140(1917549072);
  // loc(unknown)
  Fp x141(1303271640);
  // loc(unknown)
  Fp x142(930036496);
  // loc(unknown)
  Fp x143(172614232);
  // loc(unknown)
  Fp x144(1201063290);
  // loc(unknown)
  Fp x145(1393671120);
  // loc(unknown)
  Fp x146(238616145);
  // loc(unknown)
  Fp x147(306391314);
  // loc(unknown)
  Fp x148(395622276);
  // loc(unknown)
  Fp x149(641665156);
  // loc(unknown)
  Fp x150(1006235079);
  // loc(unknown)
  Fp x151(1647670797);
  // loc(unknown)
  Fp x152(1997503974);
  // loc(unknown)
  Fp x153(1090783436);
  // loc(unknown)
  Fp x154(942439428);
  // loc(unknown)
  Fp x155(53007114);
  // loc(unknown)
  Fp x156(716894289);
  // loc(unknown)
  Fp x157(1111203133);
  // loc(unknown)
  Fp x158(1649953458);
  // loc(unknown)
  Fp x159(1269493554);
  // loc(unknown)
  Fp x160(897025192);
  // loc(unknown)
  Fp x161(1296144415);
  // loc(unknown)
  Fp x162(1647665372);
  // loc(unknown)
  Fp x163(1338899225);
  // loc(unknown)
  Fp x164(1282239129);
  // loc(unknown)
  Fp x165(202271745);
  // loc(unknown)
  Fp x166(708123747);
  // loc(unknown)
  Fp x167(1740472809);
  // loc(unknown)
  Fp x168(1737016378);
  // loc(unknown)
  Fp x169(459826664);
  // loc(unknown)
  Fp x170(925018226);
  // loc(unknown)
  Fp x171(1454563174);
  // loc(unknown)
  Fp x172(686842369);
  // loc(unknown)
  Fp x173(781141772);
  // loc(unknown)
  Fp x174(78845751);
  // loc(unknown)
  Fp x175(204228775);
  // loc(unknown)
  Fp x176(622609176);
  // loc(unknown)
  Fp x177(1832911930);
  // loc(unknown)
  Fp x178(1889603648);
  // loc(unknown)
  Fp x179(588764636);
  // loc(unknown)
  Fp x180(1339793538);
  // loc(unknown)
  Fp x181(228520958);
  // loc(unknown)
  Fp x182(993455846);
  // loc(unknown)
  Fp x183(1718628547);
  // loc(unknown)
  Fp x184(1518763784);
  // loc(unknown)
  Fp x185(813674331);
  // loc(unknown)
  Fp x186(140621810);
  // loc(unknown)
  Fp x187(427731030);
  // loc(unknown)
  Fp x188(1989924532);
  // loc(unknown)
  Fp x189(1889898);
  // loc(unknown)
  Fp x190(117294666);
  // loc(unknown)
  Fp x191(825405577);
  // loc(unknown)
  Fp x192(1170029417);
  // loc(unknown)
  Fp x193(1124078057);
  // loc(unknown)
  Fp x194(790726260);
  // loc(unknown)
  Fp x195(342857858);
  // loc(unknown)
  Fp x196(1917861751);
  // loc(unknown)
  Fp x197(738091882);
  // loc(unknown)
  Fp x198(1213686459);
  // loc(unknown)
  Fp x199(1290028279);
  // loc(unknown)
  Fp x200(1333667262);
  // loc(unknown)
  Fp x201(1003792297);
  // loc(unknown)
  Fp x202(390340387);
  // loc(unknown)
  Fp x203(608401422);
  // loc(unknown)
  Fp x204(540703332);
  // loc(unknown)
  Fp x205(1896271507);
  // loc(unknown)
  Fp x206(714957516);
  // loc(unknown)
  Fp x207(1587822577);
  // loc(unknown)
  Fp x208(1845603984);
  // loc(unknown)
  Fp x209(1206940496);
  // loc(unknown)
  Fp x210(1209164052);
  // loc(unknown)
  Fp x211(128479034);
  // loc(unknown)
  Fp x212(695835963);
  // loc(unknown)
  Fp x213(23);
  // loc(unknown)
  Fp x214(22);
  // loc(unknown)
  Fp x215(21);
  // loc(unknown)
  Fp x216(20);
  // loc(unknown)
  Fp x217(19);
  // loc(unknown)
  Fp x218(18);
  // loc(unknown)
  Fp x219(17);
  // loc(unknown)
  Fp x220(15);
  // loc(unknown)
  Fp x221(14);
  // loc(unknown)
  Fp x222(13);
  // loc(unknown)
  Fp x223(12);
  // loc(unknown)
  Fp x224(831813382);
  // loc(unknown)
  Fp x225(1421525369);
  // loc(unknown)
  Fp x226(1751797115);
  // loc(unknown)
  Fp x227(1964135730);
  // loc(unknown)
  Fp x228(525458520);
  // loc(unknown)
  Fp x229(638242172);
  // loc(unknown)
  Fp x230(1307439985);
  // loc(unknown)
  Fp x231(343354132);
  // loc(unknown)
  Fp x232(1389166148);
  // loc(unknown)
  Fp x233(1660766320);
  // loc(unknown)
  Fp x234(1464793095);
  // loc(unknown)
  Fp x235(1180307149);
  // loc(unknown)
  Fp x236(1930780904);
  // loc(unknown)
  Fp x237(1066694495);
  // loc(unknown)
  Fp x238(1773108264);
  // loc(unknown)
  Fp x239(1004040026);
  // loc(unknown)
  Fp x240(815798990);
  // loc(unknown)
  Fp x241(454905424);
  // loc(unknown)
  Fp x242(118043943);
  // loc(unknown)
  Fp x243(157582794);
  // loc(unknown)
  Fp x244(246143118);
  // loc(unknown)
  Fp x245(314968988);
  // loc(unknown)
  Fp x246(127253399);
  // loc(unknown)
  Fp x247(262278199);
  // loc(unknown)
  Fp x248(943718400);
  // loc(unknown)
  Fp x249(268435454);
  // loc(unknown)
  Fp x250(1761607679);
  // loc(unknown)
  Fp x251(1073741824);
  // loc(unknown)
  Fp x252(1509949437);
  // loc(unknown)
  Fp x253(536870912);
  // loc(unknown)
  Fp x254(1006632953);
  // loc(unknown)
  Fp x255(268435456);
  // loc(unknown)
  Fp x256(2013265906);
  // loc(unknown)
  Fp x257(134217728);
  // loc(unknown)
  Fp x258(2013265891);
  // loc(unknown)
  Fp x259(67108864);
  // loc(unknown)
  Fp x260(2013265861);
  // loc(unknown)
  Fp x261(33554432);
  // loc(unknown)
  Fp x262(2013265801);
  // loc(unknown)
  Fp x263(16777216);
  // loc(unknown)
  Fp x264(2013265681);
  // loc(unknown)
  Fp x265(8388608);
  // loc(unknown)
  Fp x266(2013265441);
  // loc(unknown)
  Fp x267(4194304);
  // loc(unknown)
  Fp x268(2013264961);
  // loc(unknown)
  Fp x269(2097152);
  // loc(unknown)
  Fp x270(2013264001);
  // loc(unknown)
  Fp x271(1048576);
  // loc(unknown)
  Fp x272(2013262081);
  // loc(unknown)
  Fp x273(524288);
  // loc(unknown)
  Fp x274(2013258241);
  // loc(unknown)
  Fp x275(262144);
  // loc(unknown)
  Fp x276(2013250561);
  // loc(unknown)
  Fp x277(131072);
  // loc(unknown)
  Fp x278(2013235201);
  // loc(unknown)
  Fp x279(2013204481);
  // loc(unknown)
  Fp x280(32768);
  // loc(unknown)
  Fp x281(2013143041);
  // loc(unknown)
  Fp x282(16384);
  // loc(unknown)
  Fp x283(2013020161);
  // loc(unknown)
  Fp x284(8192);
  // loc(unknown)
  Fp x285(2012774401);
  // loc(unknown)
  Fp x286(4096);
  // loc(unknown)
  Fp x287(2012282881);
  // loc(unknown)
  Fp x288(2048);
  // loc(unknown)
  Fp x289(2011299841);
  // loc(unknown)
  Fp x290(1024);
  // loc(unknown)
  Fp x291(2009333761);
  // loc(unknown)
  Fp x292(512);
  // loc(unknown)
  Fp x293(2005401601);
  // loc(unknown)
  Fp x294(256);
  // loc(unknown)
  Fp x295(1997537281);
  // loc(unknown)
  Fp x296(128);
  // loc(unknown)
  Fp x297(1981808641);
  // loc(unknown)
  Fp x298(64);
  // loc(unknown)
  Fp x299(1950351361);
  // loc(unknown)
  Fp x300(32);
  // loc(unknown)
  Fp x301(1887436801);
  // loc(unknown)
  Fp x302(16);
  // loc(unknown)
  Fp x303(1761607681);
  // loc(unknown)
  Fp x304(1509949441);
  // loc(unknown)
  Fp x305(1006632961);
  // loc(unknown)
  Fp x306(65536);
  // loc(unknown)
  Fp x307(2013265910);
  // loc(unknown)
  Fp x308(11);
  // loc(unknown)
  Fp x309(10);
  // loc(unknown)
  Fp x310(9);
  // loc(unknown)
  Fp x311(8);
  // loc(unknown)
  Fp x312(7);
  // loc(unknown)
  Fp x313(6);
  // loc(unknown)
  Fp x314(5);
  // loc(unknown)
  Fp x315(4);
  // loc(unknown)
  Fp x316(3);
  // loc(unknown)
  Fp x317(2);
  // loc(unknown)
  Fp x318(1);
  // loc(unknown)
  Fp x319(0);
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/micro_ops(Reg)"("./zirgen/components/mux.h":49:25))
  auto x320 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x320 != Fp::invalid());
  if (x320 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/write_addr(Reg)"("zirgen/circuit/recursion/top.cpp":22:49))
    auto x321 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x321 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[0](recursion::MicroInst)/opcode(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x322 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x322 != Fp::invalid());
    {
      // loc("./zirgen/components/onehot.h":37:26)
      auto x323 = (x322 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x323);
        reg = x323;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x324 = x322 - x318;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x325 = (x324 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x325);
        reg = x325;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x326 = x322 - x317;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x327 = (x326 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x327);
        reg = x327;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x328 = x322 - x316;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x329 = (x328 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x329);
        reg = x329;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x330 = x322 - x315;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x331 = (x330 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][94 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x331);
        reg = x331;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x332 = x322 - x314;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x333 = (x332 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][95 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x333);
        reg = x333;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x334 = x322 - x313;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x335 = (x334 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][96 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x335);
        reg = x335;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x336 = x322 - x312;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x337 = (x336 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][97 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x337);
        reg = x337;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x338 = x322 - x311;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x339 = (x338 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x339);
        reg = x339;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x340 = x322 - x310;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x341 = (x340 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x341);
        reg = x341;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x342 = x322 - x309;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x343 = (x342 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][100 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x343);
        reg = x343;
      }
    }
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/add(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x344 = args[2][91 * steps + ((cycle - 0) & mask)];
    assert(x344 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/sub(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x345 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x345 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/mul(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x346 = args[2][93 * steps + ((cycle - 0) & mask)];
    assert(x346 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/inv(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x347 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x347 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/eq(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x348 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x348 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/read_iop_header(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x349 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x349 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/read_iop_body(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x350 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x350 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/mix_rng(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x351 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x351 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/select(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x352 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x352 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/extract(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x353 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x353 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[0](recursion::MicroInst)/operand[0](Reg)"("zirgen/circuit/recursion/micro.cpp":14:17))
    auto x354 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x354 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[0](recursion::MicroInst)/operand[1](Reg)"("zirgen/circuit/recursion/micro.cpp":15:17))
    auto x355 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x355 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[0](recursion::MicroInst)/operand[2](Reg)"("zirgen/circuit/recursion/micro.cpp":16:17))
    auto x356 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x356 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/decode(OneHot)/constop(Reg)"("zirgen/circuit/recursion/micro.cpp":19:44))
    auto x357 = args[2][90 * steps + ((cycle - 0) & mask)];
    assert(x357 != Fp::invalid());
    if (x357 != 0) {
      host_args.at(0) = x354;
      host_args.at(1) = x355;
      host_args.at(2) = x356;
      host_args.at(3) = x319;
      host(ctx, "log", "CONST: %e", host_args.data(), 4, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x355);
        reg = x355;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x356);
        reg = x356;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x358 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x358 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x359 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x359 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x360 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x360 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x361 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x361 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x362 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x362 != Fp::invalid());
        host_args.at(0) = x358;
        host_args.at(1) = x359;
        host_args.at(2) = x360;
        host_args.at(3) = x361;
        host_args.at(4) = x362;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x344 != 0) {
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x363 = host_outs.at(0);
        auto x364 = host_outs.at(1);
        auto x365 = host_outs.at(2);
        auto x366 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x363);
          reg = x363;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x364);
          reg = x364;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x365);
          reg = x365;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x366);
          reg = x366;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x367 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x367 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x368 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x368 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x369 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x369 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x370 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x370 != Fp::invalid());
      {
        host_args.at(0) = x355;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x371 = host_outs.at(0);
        auto x372 = host_outs.at(1);
        auto x373 = host_outs.at(2);
        auto x374 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x371);
          reg = x371;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x372);
          reg = x372;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x373);
          reg = x373;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x374);
          reg = x374;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x355);
        reg = x355;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x375 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x375 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x376 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x376 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x377 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x377 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x378 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x378 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x379 = x367 + x375;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x380 = x368 + x376;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x381 = x369 + x377;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x382 = x370 + x378;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x379);
        reg = x379;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x380);
        reg = x380;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x381);
        reg = x381;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x382);
        reg = x382;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x383 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x383 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x384 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x384 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x385 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x385 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x386 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x386 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x387 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x387 != Fp::invalid());
        host_args.at(0) = x383;
        host_args.at(1) = x384;
        host_args.at(2) = x385;
        host_args.at(3) = x386;
        host_args.at(4) = x387;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x388 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x388 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x389 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x389 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x390 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x390 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x391 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x391 != Fp::invalid());
      host_args.at(0) = x367;
      host_args.at(1) = x368;
      host_args.at(2) = x369;
      host_args.at(3) = x370;
      host_args.at(4) = x375;
      host_args.at(5) = x376;
      host_args.at(6) = x377;
      host_args.at(7) = x378;
      host_args.at(8) = x388;
      host_args.at(9) = x389;
      host_args.at(10) = x390;
      host_args.at(11) = x391;
      host(ctx, "log", "ADD: %e + %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    if (x345 != 0) {
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x392 = host_outs.at(0);
        auto x393 = host_outs.at(1);
        auto x394 = host_outs.at(2);
        auto x395 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x392);
          reg = x392;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x393);
          reg = x393;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x394);
          reg = x394;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x395);
          reg = x395;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x396 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x396 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x397 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x397 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x398 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x398 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x399 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x399 != Fp::invalid());
      {
        host_args.at(0) = x355;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x400 = host_outs.at(0);
        auto x401 = host_outs.at(1);
        auto x402 = host_outs.at(2);
        auto x403 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x400);
          reg = x400;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x401);
          reg = x401;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x402);
          reg = x402;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x403);
          reg = x403;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x355);
        reg = x355;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x404 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x404 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x405 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x405 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x406 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x406 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x407 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x407 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x408 = x396 - x404;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x409 = x397 - x405;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x410 = x398 - x406;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x411 = x399 - x407;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x408);
        reg = x408;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x409);
        reg = x409;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x410);
        reg = x410;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x411);
        reg = x411;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x412 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x412 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x413 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x413 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x414 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x414 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x415 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x415 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x416 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x416 != Fp::invalid());
        host_args.at(0) = x412;
        host_args.at(1) = x413;
        host_args.at(2) = x414;
        host_args.at(3) = x415;
        host_args.at(4) = x416;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x417 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x417 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x418 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x418 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x419 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x419 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x420 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x420 != Fp::invalid());
      host_args.at(0) = x396;
      host_args.at(1) = x397;
      host_args.at(2) = x398;
      host_args.at(3) = x399;
      host_args.at(4) = x404;
      host_args.at(5) = x405;
      host_args.at(6) = x406;
      host_args.at(7) = x407;
      host_args.at(8) = x417;
      host_args.at(9) = x418;
      host_args.at(10) = x419;
      host_args.at(11) = x420;
      host(ctx, "log", "SUB: %e - %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    if (x346 != 0) {
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x421 = host_outs.at(0);
        auto x422 = host_outs.at(1);
        auto x423 = host_outs.at(2);
        auto x424 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x421);
          reg = x421;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x422);
          reg = x422;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x423);
          reg = x423;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x424);
          reg = x424;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x425 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x425 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x426 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x426 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x427 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x427 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x428 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x428 != Fp::invalid());
      {
        host_args.at(0) = x355;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x429 = host_outs.at(0);
        auto x430 = host_outs.at(1);
        auto x431 = host_outs.at(2);
        auto x432 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x429);
          reg = x429;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x430);
          reg = x430;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x431);
          reg = x431;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x432);
          reg = x432;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x355);
        reg = x355;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x433 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x433 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x434 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x434 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x435 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x435 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x436 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x436 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x437 = x425 * x433;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x438 = x426 * x436;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x439 = x427 * x435;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x440 = x438 + x439;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x441 = x428 * x434;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x442 = x440 + x441;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x443 = x442 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x444 = x437 + x443;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x445 = x425 * x434;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x446 = x426 * x433;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x447 = x445 + x446;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x448 = x427 * x436;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x449 = x428 * x435;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x450 = x448 + x449;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x451 = x450 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x452 = x447 + x451;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x453 = x425 * x435;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x454 = x426 * x434;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x455 = x453 + x454;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x456 = x427 * x433;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x457 = x455 + x456;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x458 = x428 * x436;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x459 = x458 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x460 = x457 + x459;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x461 = x425 * x436;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x462 = x426 * x435;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x463 = x461 + x462;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x464 = x427 * x434;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x465 = x463 + x464;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x466 = x428 * x433;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x467 = x465 + x466;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x444);
        reg = x444;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x452);
        reg = x452;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x460);
        reg = x460;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x467);
        reg = x467;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x468 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x468 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x469 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x469 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x470 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x470 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x471 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x471 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x472 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x472 != Fp::invalid());
        host_args.at(0) = x468;
        host_args.at(1) = x469;
        host_args.at(2) = x470;
        host_args.at(3) = x471;
        host_args.at(4) = x472;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x473 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x473 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x474 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x474 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x475 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x475 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x476 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x476 != Fp::invalid());
      host_args.at(0) = x425;
      host_args.at(1) = x426;
      host_args.at(2) = x427;
      host_args.at(3) = x428;
      host_args.at(4) = x433;
      host_args.at(5) = x434;
      host_args.at(6) = x435;
      host_args.at(7) = x436;
      host_args.at(8) = x473;
      host_args.at(9) = x474;
      host_args.at(10) = x475;
      host_args.at(11) = x476;
      host(ctx, "log", "MUL: %e * %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":43:56)
    auto x477 = x347 * x355;
    if (x477 != 0) {
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x478 = host_outs.at(0);
        auto x479 = host_outs.at(1);
        auto x480 = host_outs.at(2);
        auto x481 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x478);
          reg = x478;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x479);
          reg = x479;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x480);
          reg = x480;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x481);
          reg = x481;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x482 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x482 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x483 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x483 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x484 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x484 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x485 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x485 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x486 = x482 * x482;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x487 = x485 + x485;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x488 = x483 * x487;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x489 = x484 * x484;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x490 = x488 - x489;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x491 = x490 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x492 = x486 + x491;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x493 = x484 + x484;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x494 = x482 * x493;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x495 = x483 * x483;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x496 = x494 - x495;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x497 = x485 * x485;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x498 = x497 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x499 = x496 + x498;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x500 = x492 * x492;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x501 = x499 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x502 = x501 * x499;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x503 = x500 + x502;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x504 = inv(x503);
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x505 = x492 * x504;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x506 = x499 * x504;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x507 = x482 * x505;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x508 = x484 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x509 = x508 * x506;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x510 = x507 + x509;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x511 = -x483;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x512 = x511 * x505;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x513 = x485 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x514 = x513 * x506;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x515 = x512 - x514;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x516 = -x482;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x517 = x516 * x506;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x518 = x484 * x505;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x519 = x517 + x518;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x520 = x483 * x506;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x521 = x485 * x505;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x522 = x520 - x521;
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x321);
          reg = x321;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x510);
          reg = x510;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x515);
          reg = x515;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x519);
          reg = x519;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x522);
          reg = x522;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x523 = args[2][15 * steps + ((cycle - 0) & mask)];
          assert(x523 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x524 = args[2][16 * steps + ((cycle - 0) & mask)];
          assert(x524 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x525 = args[2][17 * steps + ((cycle - 0) & mask)];
          assert(x525 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x526 = args[2][18 * steps + ((cycle - 0) & mask)];
          assert(x526 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x527 = args[2][19 * steps + ((cycle - 0) & mask)];
          assert(x527 != Fp::invalid());
          host_args.at(0) = x523;
          host_args.at(1) = x524;
          host_args.at(2) = x525;
          host_args.at(3) = x526;
          host_args.at(4) = x527;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x528 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x528 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x529 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x529 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x530 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x530 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x531 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x531 != Fp::invalid());
      host_args.at(0) = x482;
      host_args.at(1) = x483;
      host_args.at(2) = x484;
      host_args.at(3) = x485;
      host_args.at(4) = x528;
      host_args.at(5) = x529;
      host_args.at(6) = x530;
      host_args.at(7) = x531;
      host(ctx, "log", "INV: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x532 = x318 - x355;
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x533 = x347 * x532;
    if (x533 != 0) {
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x534 = host_outs.at(0);
        auto x535 = host_outs.at(1);
        auto x536 = host_outs.at(2);
        auto x537 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x534);
          reg = x534;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x535);
          reg = x535;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x536);
          reg = x536;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x537);
          reg = x537;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x538 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x538 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/micro.cpp":55:22)
        auto x539 = inv(x538);
        // loc("zirgen/circuit/recursion/micro.cpp":55:7)
        {
          auto& reg = args[2][101 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x539);
          reg = x539;
        }
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/extra(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x540 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x540 != Fp::invalid());
        // loc("zirgen/circuit/recursion/micro.cpp":56:36)
        auto x541 = x540 * x538;
        // loc("zirgen/circuit/recursion/micro.cpp":56:32)
        auto x542 = x318 - x541;
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x321);
          reg = x321;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x542);
          reg = x542;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x543 = args[2][15 * steps + ((cycle - 0) & mask)];
          assert(x543 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x544 = args[2][16 * steps + ((cycle - 0) & mask)];
          assert(x544 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x545 = args[2][17 * steps + ((cycle - 0) & mask)];
          assert(x545 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x546 = args[2][18 * steps + ((cycle - 0) & mask)];
          assert(x546 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x547 = args[2][19 * steps + ((cycle - 0) & mask)];
          assert(x547 != Fp::invalid());
          host_args.at(0) = x543;
          host_args.at(1) = x544;
          host_args.at(2) = x545;
          host_args.at(3) = x546;
          host_args.at(4) = x547;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x548 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x548 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x549 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x549 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x550 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x550 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x551 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x551 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x552 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x552 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x553 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x553 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x554 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x554 != Fp::invalid());
      host_args.at(0) = x538;
      host_args.at(1) = x549;
      host_args.at(2) = x550;
      host_args.at(3) = x551;
      host_args.at(4) = x548;
      host_args.at(5) = x552;
      host_args.at(6) = x553;
      host_args.at(7) = x554;
      host(ctx, "log", "IS_ZERO: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    if (x348 != 0) {
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x555 = host_outs.at(0);
        auto x556 = host_outs.at(1);
        auto x557 = host_outs.at(2);
        auto x558 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x555);
          reg = x555;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x556);
          reg = x556;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x557);
          reg = x557;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x558);
          reg = x558;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x559 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x559 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x560 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x560 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x561 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x561 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x562 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x562 != Fp::invalid());
      {
        host_args.at(0) = x355;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x563 = host_outs.at(0);
        auto x564 = host_outs.at(1);
        auto x565 = host_outs.at(2);
        auto x566 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x563);
          reg = x563;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x564);
          reg = x564;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x565);
          reg = x565;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x566);
          reg = x566;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x355);
        reg = x355;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x567 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x567 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x568 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x568 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x569 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x569 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x570 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x570 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x571 = x559 - x567;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x572 = x560 - x568;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x573 = x561 - x569;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x574 = x562 - x570;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x571);
        reg = x571;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x572);
        reg = x572;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x573);
        reg = x573;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x574);
        reg = x574;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x575 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x575 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x576 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x576 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x577 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x577 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x578 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x578 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x579 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x579 != Fp::invalid());
        host_args.at(0) = x575;
        host_args.at(1) = x576;
        host_args.at(2) = x577;
        host_args.at(3) = x578;
        host_args.at(4) = x579;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x559;
      host_args.at(1) = x560;
      host_args.at(2) = x561;
      host_args.at(3) = x562;
      host_args.at(4) = x567;
      host_args.at(5) = x568;
      host_args.at(6) = x569;
      host_args.at(7) = x570;
      host(ctx, "log", "EQ: %e == %e", host_args.data(), 8, host_outs.data(), 0);
    }
    if (x349 != 0) {
      host_args.at(0) = x354;
      host_args.at(1) = x355;
      host(ctx, "log", "READ_IOP_HEADER: %u %u", host_args.data(), 2, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x580 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x580 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x581 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x581 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x582 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x582 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x583 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x583 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x584 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x584 != Fp::invalid());
        host_args.at(0) = x580;
        host_args.at(1) = x581;
        host_args.at(2) = x582;
        host_args.at(3) = x583;
        host_args.at(4) = x584;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      {
        host_args.at(0) = x354;
        host_args.at(1) = x355;
        host(ctx, "readIOPHeader", "", host_args.data(), 2, host_outs.data(), 0);
      }
    }
    if (x350 != 0) {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        host_args.at(0) = x354;
        host_args.at(1) = x355;
        host_args.at(2) = x356;
        host(ctx, "readIOPBody", "", host_args.data(), 3, host_outs.data(), 4);
        auto x585 = host_outs.at(0);
        auto x586 = host_outs.at(1);
        auto x587 = host_outs.at(2);
        auto x588 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x321);
          reg = x321;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x585);
          reg = x585;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x586);
          reg = x586;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x587);
          reg = x587;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x588);
          reg = x588;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x589 = args[2][15 * steps + ((cycle - 0) & mask)];
          assert(x589 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x590 = args[2][16 * steps + ((cycle - 0) & mask)];
          assert(x590 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x591 = args[2][17 * steps + ((cycle - 0) & mask)];
          assert(x591 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x592 = args[2][18 * steps + ((cycle - 0) & mask)];
          assert(x592 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x593 = args[2][19 * steps + ((cycle - 0) & mask)];
          assert(x593 != Fp::invalid());
          host_args.at(0) = x589;
          host_args.at(1) = x590;
          host_args.at(2) = x591;
          host_args.at(3) = x592;
          host_args.at(4) = x593;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x594 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x594 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x595 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x595 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x596 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x596 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x597 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x597 != Fp::invalid());
      host_args.at(0) = x354;
      host_args.at(1) = x355;
      host_args.at(2) = x594;
      host_args.at(3) = x595;
      host_args.at(4) = x596;
      host_args.at(5) = x597;
      host(ctx, "log", "READ_IOP_BODY: %u %u -> %e", host_args.data(), 6, host_outs.data(), 0);
    }
    if (x351 != 0) {
      host_args.at(0) = x354;
      host_args.at(1) = x355;
      host_args.at(2) = x356;
      host(ctx, "log", "MIX_RNG: %u, %u, %u", host_args.data(), 3, host_outs.data(), 0);
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x598 = host_outs.at(0);
        auto x599 = host_outs.at(1);
        auto x600 = host_outs.at(2);
        auto x601 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x598);
          reg = x598;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x599);
          reg = x599;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x600);
          reg = x600;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x601);
          reg = x601;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      {
        host_args.at(0) = x355;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x602 = host_outs.at(0);
        auto x603 = host_outs.at(1);
        auto x604 = host_outs.at(2);
        auto x605 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x602);
          reg = x602;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x603);
          reg = x603;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x604);
          reg = x604;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x605);
          reg = x605;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x355);
        reg = x355;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x606 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x606 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x607 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x607 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x608 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x608 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x609 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x609 != Fp::invalid());
      host_args.at(0) = x606;
      host_args.at(1) = x607;
      host_args.at(2) = x608;
      host_args.at(3) = x609;
      host(ctx, "log", "  in0=[%x %x], in1=[%x %x]", host_args.data(), 4, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/extra(Reg)"("zirgen/circuit/recursion/micro.cpp":107:71))
      auto x610 = args[2][125 * steps + ((cycle - 1) & mask)];
      if (x610 == Fp::invalid()) x610 = 0;
      // loc("zirgen/circuit/recursion/micro.cpp":107:15)
      auto x611 = x356 * x610;
      host_args.at(0) = x611;
      host(ctx, "log", "  prev_val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x612 = x611 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x613 = x612 + x607;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x614 = x613 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x615 = x614 + x606;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x616 = x615 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x617 = x616 + x609;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x618 = x617 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x619 = x618 + x608;
      host_args.at(0) = x619;
      host(ctx, "log", "  val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":114:5)
      {
        auto& reg = args[2][101 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x619);
        reg = x619;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x619);
        reg = x619;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x620 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x620 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x621 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x621 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x622 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x622 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x623 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x623 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x624 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x624 != Fp::invalid());
        host_args.at(0) = x620;
        host_args.at(1) = x621;
        host_args.at(2) = x622;
        host_args.at(3) = x623;
        host_args.at(4) = x624;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x352 != 0) {
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x625 = host_outs.at(0);
        auto x626 = host_outs.at(1);
        auto x627 = host_outs.at(2);
        auto x628 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x625);
          reg = x625;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x626);
          reg = x626;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x627);
          reg = x627;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x628);
          reg = x628;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x629 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x629 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":119:31)
      auto x630 = x356 * x629;
      // loc("zirgen/circuit/recursion/micro.cpp":119:17)
      auto x631 = x355 + x630;
      {
        host_args.at(0) = x631;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x632 = host_outs.at(0);
        auto x633 = host_outs.at(1);
        auto x634 = host_outs.at(2);
        auto x635 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x632);
          reg = x632;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x633);
          reg = x633;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x634);
          reg = x634;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x635);
          reg = x635;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x631);
        reg = x631;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x636 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x636 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x637 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x637 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x638 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x638 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x639 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x639 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x636);
        reg = x636;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x637);
        reg = x637;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x638);
        reg = x638;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x639);
        reg = x639;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x640 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x640 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x641 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x641 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x642 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x642 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x643 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x643 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x644 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x644 != Fp::invalid());
        host_args.at(0) = x640;
        host_args.at(1) = x641;
        host_args.at(2) = x642;
        host_args.at(3) = x643;
        host_args.at(4) = x644;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x354;
      host_args.at(1) = x355;
      host_args.at(2) = x356;
      host_args.at(3) = x629;
      host_args.at(4) = x636;
      host_args.at(5) = x637;
      host_args.at(6) = x638;
      host_args.at(7) = x639;
      host_args.at(8) = x321;
      host(ctx, "log", "SELECT, idx = %u, start = %u, step = %u, idx = %u, writing %e to %u", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x353 != 0) {
      {
        host_args.at(0) = x354;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x645 = host_outs.at(0);
        auto x646 = host_outs.at(1);
        auto x647 = host_outs.at(2);
        auto x648 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x645);
          reg = x645;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x646);
          reg = x646;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x647);
          reg = x647;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x648);
          reg = x648;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][5 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x354);
        reg = x354;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x649 = x355 * x356;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x650 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x650 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x651 = x649 * x650;
      // loc("zirgen/circuit/recursion/micro.cpp":133:30)
      auto x652 = x318 - x356;
      // loc("zirgen/circuit/recursion/micro.cpp":133:15)
      auto x653 = x355 * x652;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x654 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x654 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":133:15)
      auto x655 = x653 * x654;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x656 = x651 + x655;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x657 = x532 * x356;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x658 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x658 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x659 = x657 * x658;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x660 = x656 + x659;
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x661 = x532 * x652;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x662 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x662 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x663 = x661 * x662;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x664 = x660 + x663;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x321);
        reg = x321;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x664);
        reg = x664;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x665 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x665 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x666 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x666 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x667 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x667 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x668 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x668 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x669 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x669 != Fp::invalid());
        host_args.at(0) = x665;
        host_args.at(1) = x666;
        host_args.at(2) = x667;
        host_args.at(3) = x668;
        host_args.at(4) = x669;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/circuit/recursion/micro.cpp":151:34)
    auto x670 = x321 + x318;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[1](recursion::MicroInst)/opcode(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x671 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x671 != Fp::invalid());
    {
      // loc("./zirgen/components/onehot.h":37:26)
      auto x672 = (x671 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][102 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x672);
        reg = x672;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x673 = x671 - x318;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x674 = (x673 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][103 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x674);
        reg = x674;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x675 = x671 - x317;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x676 = (x675 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][104 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x676);
        reg = x676;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x677 = x671 - x316;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x678 = (x677 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][105 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x678);
        reg = x678;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x679 = x671 - x315;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x680 = (x679 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][106 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x680);
        reg = x680;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x681 = x671 - x314;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x682 = (x681 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x682);
        reg = x682;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x683 = x671 - x313;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x684 = (x683 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x684);
        reg = x684;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x685 = x671 - x312;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x686 = (x685 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x686);
        reg = x686;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x687 = x671 - x311;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x688 = (x687 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x688);
        reg = x688;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x689 = x671 - x310;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x690 = (x689 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x690);
        reg = x690;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x691 = x671 - x309;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x692 = (x691 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x692);
        reg = x692;
      }
    }
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/add(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x693 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x693 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/sub(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x694 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x694 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/mul(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x695 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x695 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/inv(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x696 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x696 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/eq(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x697 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x697 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/read_iop_header(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x698 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x698 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/read_iop_body(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x699 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x699 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/mix_rng(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x700 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x700 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/select(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x701 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x701 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/extract(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x702 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x702 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[1](recursion::MicroInst)/operand[0](Reg)"("zirgen/circuit/recursion/micro.cpp":14:17))
    auto x703 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x703 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[1](recursion::MicroInst)/operand[1](Reg)"("zirgen/circuit/recursion/micro.cpp":15:17))
    auto x704 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x704 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[1](recursion::MicroInst)/operand[2](Reg)"("zirgen/circuit/recursion/micro.cpp":16:17))
    auto x705 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x705 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/decode(OneHot)/constop(Reg)"("zirgen/circuit/recursion/micro.cpp":19:44))
    auto x706 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x706 != Fp::invalid());
    if (x706 != 0) {
      host_args.at(0) = x703;
      host_args.at(1) = x704;
      host_args.at(2) = x705;
      host_args.at(3) = x319;
      host(ctx, "log", "CONST: %e", host_args.data(), 4, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x704);
        reg = x704;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x705);
        reg = x705;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x707 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x707 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x708 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x708 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x709 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x709 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x710 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x710 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x711 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x711 != Fp::invalid());
        host_args.at(0) = x707;
        host_args.at(1) = x708;
        host_args.at(2) = x709;
        host_args.at(3) = x710;
        host_args.at(4) = x711;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x693 != 0) {
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x712 = host_outs.at(0);
        auto x713 = host_outs.at(1);
        auto x714 = host_outs.at(2);
        auto x715 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x712);
          reg = x712;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x713);
          reg = x713;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x714);
          reg = x714;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x715);
          reg = x715;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x716 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x716 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x717 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x717 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x718 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x718 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x719 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x719 != Fp::invalid());
      {
        host_args.at(0) = x704;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x720 = host_outs.at(0);
        auto x721 = host_outs.at(1);
        auto x722 = host_outs.at(2);
        auto x723 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x720);
          reg = x720;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x721);
          reg = x721;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x722);
          reg = x722;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x723);
          reg = x723;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x704);
        reg = x704;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x724 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x724 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x725 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x725 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x726 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x726 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x727 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x727 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x728 = x716 + x724;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x729 = x717 + x725;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x730 = x718 + x726;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x731 = x719 + x727;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x728);
        reg = x728;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x729);
        reg = x729;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x730);
        reg = x730;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x731);
        reg = x731;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x732 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x732 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x733 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x733 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x734 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x734 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x735 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x735 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x736 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x736 != Fp::invalid());
        host_args.at(0) = x732;
        host_args.at(1) = x733;
        host_args.at(2) = x734;
        host_args.at(3) = x735;
        host_args.at(4) = x736;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x737 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x737 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x738 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x738 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x739 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x739 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x740 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x740 != Fp::invalid());
      host_args.at(0) = x716;
      host_args.at(1) = x717;
      host_args.at(2) = x718;
      host_args.at(3) = x719;
      host_args.at(4) = x724;
      host_args.at(5) = x725;
      host_args.at(6) = x726;
      host_args.at(7) = x727;
      host_args.at(8) = x737;
      host_args.at(9) = x738;
      host_args.at(10) = x739;
      host_args.at(11) = x740;
      host(ctx, "log", "ADD: %e + %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    if (x694 != 0) {
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x741 = host_outs.at(0);
        auto x742 = host_outs.at(1);
        auto x743 = host_outs.at(2);
        auto x744 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x741);
          reg = x741;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x742);
          reg = x742;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x743);
          reg = x743;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x744);
          reg = x744;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x745 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x745 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x746 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x746 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x747 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x747 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x748 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x748 != Fp::invalid());
      {
        host_args.at(0) = x704;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x749 = host_outs.at(0);
        auto x750 = host_outs.at(1);
        auto x751 = host_outs.at(2);
        auto x752 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x749);
          reg = x749;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x750);
          reg = x750;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x751);
          reg = x751;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x752);
          reg = x752;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x704);
        reg = x704;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x753 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x753 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x754 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x754 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x755 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x755 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x756 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x756 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x757 = x745 - x753;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x758 = x746 - x754;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x759 = x747 - x755;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x760 = x748 - x756;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x757);
        reg = x757;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x758);
        reg = x758;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x759);
        reg = x759;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x760);
        reg = x760;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x761 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x761 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x762 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x762 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x763 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x763 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x764 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x764 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x765 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x765 != Fp::invalid());
        host_args.at(0) = x761;
        host_args.at(1) = x762;
        host_args.at(2) = x763;
        host_args.at(3) = x764;
        host_args.at(4) = x765;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x766 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x766 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x767 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x767 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x768 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x768 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x769 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x769 != Fp::invalid());
      host_args.at(0) = x745;
      host_args.at(1) = x746;
      host_args.at(2) = x747;
      host_args.at(3) = x748;
      host_args.at(4) = x753;
      host_args.at(5) = x754;
      host_args.at(6) = x755;
      host_args.at(7) = x756;
      host_args.at(8) = x766;
      host_args.at(9) = x767;
      host_args.at(10) = x768;
      host_args.at(11) = x769;
      host(ctx, "log", "SUB: %e - %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    if (x695 != 0) {
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x770 = host_outs.at(0);
        auto x771 = host_outs.at(1);
        auto x772 = host_outs.at(2);
        auto x773 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x770);
          reg = x770;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x771);
          reg = x771;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x772);
          reg = x772;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x773);
          reg = x773;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x774 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x774 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x775 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x775 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x776 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x776 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x777 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x777 != Fp::invalid());
      {
        host_args.at(0) = x704;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x778 = host_outs.at(0);
        auto x779 = host_outs.at(1);
        auto x780 = host_outs.at(2);
        auto x781 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x778);
          reg = x778;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x779);
          reg = x779;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x780);
          reg = x780;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x781);
          reg = x781;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x704);
        reg = x704;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x782 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x782 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x783 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x783 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x784 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x784 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x785 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x785 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x786 = x774 * x782;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x787 = x775 * x785;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x788 = x776 * x784;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x789 = x787 + x788;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x790 = x777 * x783;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x791 = x789 + x790;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x792 = x791 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x793 = x786 + x792;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x794 = x774 * x783;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x795 = x775 * x782;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x796 = x794 + x795;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x797 = x776 * x785;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x798 = x777 * x784;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x799 = x797 + x798;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x800 = x799 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x801 = x796 + x800;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x802 = x774 * x784;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x803 = x775 * x783;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x804 = x802 + x803;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x805 = x776 * x782;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x806 = x804 + x805;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x807 = x777 * x785;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x808 = x807 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x809 = x806 + x808;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x810 = x774 * x785;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x811 = x775 * x784;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x812 = x810 + x811;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x813 = x776 * x783;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x814 = x812 + x813;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x815 = x777 * x782;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x816 = x814 + x815;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x793);
        reg = x793;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x801);
        reg = x801;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x809);
        reg = x809;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x816);
        reg = x816;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x817 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x817 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x818 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x818 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x819 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x819 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x820 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x820 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x821 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x821 != Fp::invalid());
        host_args.at(0) = x817;
        host_args.at(1) = x818;
        host_args.at(2) = x819;
        host_args.at(3) = x820;
        host_args.at(4) = x821;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x822 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x823 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x823 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x824 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x824 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x825 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x825 != Fp::invalid());
      host_args.at(0) = x774;
      host_args.at(1) = x775;
      host_args.at(2) = x776;
      host_args.at(3) = x777;
      host_args.at(4) = x782;
      host_args.at(5) = x783;
      host_args.at(6) = x784;
      host_args.at(7) = x785;
      host_args.at(8) = x822;
      host_args.at(9) = x823;
      host_args.at(10) = x824;
      host_args.at(11) = x825;
      host(ctx, "log", "MUL: %e * %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":43:56)
    auto x826 = x696 * x704;
    if (x826 != 0) {
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x827 = host_outs.at(0);
        auto x828 = host_outs.at(1);
        auto x829 = host_outs.at(2);
        auto x830 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x827);
          reg = x827;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x828);
          reg = x828;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x829);
          reg = x829;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x830);
          reg = x830;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x831 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x832 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x833 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x833 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x834 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x834 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x835 = x831 * x831;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x836 = x834 + x834;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x837 = x832 * x836;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x838 = x833 * x833;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x839 = x837 - x838;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x840 = x839 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x841 = x835 + x840;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x842 = x833 + x833;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x843 = x831 * x842;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x844 = x832 * x832;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x845 = x843 - x844;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x846 = x834 * x834;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x847 = x846 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x848 = x845 + x847;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x849 = x841 * x841;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x850 = x848 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x851 = x850 * x848;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x852 = x849 + x851;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x853 = inv(x852);
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x854 = x841 * x853;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x855 = x848 * x853;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x856 = x831 * x854;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x857 = x833 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x858 = x857 * x855;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x859 = x856 + x858;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x860 = -x832;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x861 = x860 * x854;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x862 = x834 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x863 = x862 * x855;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x864 = x861 - x863;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x865 = -x831;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x866 = x865 * x855;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x867 = x833 * x854;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x868 = x866 + x867;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x869 = x832 * x855;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x870 = x834 * x854;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x871 = x869 - x870;
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x670);
          reg = x670;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x859);
          reg = x859;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x864);
          reg = x864;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x868);
          reg = x868;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x871);
          reg = x871;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x872 = args[2][30 * steps + ((cycle - 0) & mask)];
          assert(x872 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x873 = args[2][31 * steps + ((cycle - 0) & mask)];
          assert(x873 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x874 = args[2][32 * steps + ((cycle - 0) & mask)];
          assert(x874 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x875 = args[2][33 * steps + ((cycle - 0) & mask)];
          assert(x875 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x876 = args[2][34 * steps + ((cycle - 0) & mask)];
          assert(x876 != Fp::invalid());
          host_args.at(0) = x872;
          host_args.at(1) = x873;
          host_args.at(2) = x874;
          host_args.at(3) = x875;
          host_args.at(4) = x876;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x877 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x878 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x878 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x879 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x880 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x880 != Fp::invalid());
      host_args.at(0) = x831;
      host_args.at(1) = x832;
      host_args.at(2) = x833;
      host_args.at(3) = x834;
      host_args.at(4) = x877;
      host_args.at(5) = x878;
      host_args.at(6) = x879;
      host_args.at(7) = x880;
      host(ctx, "log", "INV: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x881 = x318 - x704;
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x882 = x696 * x881;
    if (x882 != 0) {
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x883 = host_outs.at(0);
        auto x884 = host_outs.at(1);
        auto x885 = host_outs.at(2);
        auto x886 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x883);
          reg = x883;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x884);
          reg = x884;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x885);
          reg = x885;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x886);
          reg = x886;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x887 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x887 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/micro.cpp":55:22)
        auto x888 = inv(x887);
        // loc("zirgen/circuit/recursion/micro.cpp":55:7)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x888);
          reg = x888;
        }
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/extra(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x889 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x889 != Fp::invalid());
        // loc("zirgen/circuit/recursion/micro.cpp":56:36)
        auto x890 = x889 * x887;
        // loc("zirgen/circuit/recursion/micro.cpp":56:32)
        auto x891 = x318 - x890;
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x670);
          reg = x670;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x891);
          reg = x891;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x892 = args[2][30 * steps + ((cycle - 0) & mask)];
          assert(x892 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x893 = args[2][31 * steps + ((cycle - 0) & mask)];
          assert(x893 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x894 = args[2][32 * steps + ((cycle - 0) & mask)];
          assert(x894 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x895 = args[2][33 * steps + ((cycle - 0) & mask)];
          assert(x895 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x896 = args[2][34 * steps + ((cycle - 0) & mask)];
          assert(x896 != Fp::invalid());
          host_args.at(0) = x892;
          host_args.at(1) = x893;
          host_args.at(2) = x894;
          host_args.at(3) = x895;
          host_args.at(4) = x896;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x897 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x897 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x898 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x898 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x899 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x899 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x900 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x900 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x901 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x901 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x902 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x902 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x903 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x903 != Fp::invalid());
      host_args.at(0) = x887;
      host_args.at(1) = x898;
      host_args.at(2) = x899;
      host_args.at(3) = x900;
      host_args.at(4) = x897;
      host_args.at(5) = x901;
      host_args.at(6) = x902;
      host_args.at(7) = x903;
      host(ctx, "log", "IS_ZERO: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    if (x697 != 0) {
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x904 = host_outs.at(0);
        auto x905 = host_outs.at(1);
        auto x906 = host_outs.at(2);
        auto x907 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x904);
          reg = x904;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x905);
          reg = x905;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x906);
          reg = x906;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x907);
          reg = x907;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x908 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x908 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x909 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x909 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x910 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x910 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x911 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x911 != Fp::invalid());
      {
        host_args.at(0) = x704;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x912 = host_outs.at(0);
        auto x913 = host_outs.at(1);
        auto x914 = host_outs.at(2);
        auto x915 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x912);
          reg = x912;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x913);
          reg = x913;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x914);
          reg = x914;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x915);
          reg = x915;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x704);
        reg = x704;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x916 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x916 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x917 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x917 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x918 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x918 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x919 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x919 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x920 = x908 - x916;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x921 = x909 - x917;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x922 = x910 - x918;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x923 = x911 - x919;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x920);
        reg = x920;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x921);
        reg = x921;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x922);
        reg = x922;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x923);
        reg = x923;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x924 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x924 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x925 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x925 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x926 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x926 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x927 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x927 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x928 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x928 != Fp::invalid());
        host_args.at(0) = x924;
        host_args.at(1) = x925;
        host_args.at(2) = x926;
        host_args.at(3) = x927;
        host_args.at(4) = x928;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x908;
      host_args.at(1) = x909;
      host_args.at(2) = x910;
      host_args.at(3) = x911;
      host_args.at(4) = x916;
      host_args.at(5) = x917;
      host_args.at(6) = x918;
      host_args.at(7) = x919;
      host(ctx, "log", "EQ: %e == %e", host_args.data(), 8, host_outs.data(), 0);
    }
    if (x698 != 0) {
      host_args.at(0) = x703;
      host_args.at(1) = x704;
      host(ctx, "log", "READ_IOP_HEADER: %u %u", host_args.data(), 2, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x929 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x929 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x930 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x930 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x931 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x931 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x932 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x932 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x933 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x933 != Fp::invalid());
        host_args.at(0) = x929;
        host_args.at(1) = x930;
        host_args.at(2) = x931;
        host_args.at(3) = x932;
        host_args.at(4) = x933;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      {
        host_args.at(0) = x703;
        host_args.at(1) = x704;
        host(ctx, "readIOPHeader", "", host_args.data(), 2, host_outs.data(), 0);
      }
    }
    if (x699 != 0) {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        host_args.at(0) = x703;
        host_args.at(1) = x704;
        host_args.at(2) = x705;
        host(ctx, "readIOPBody", "", host_args.data(), 3, host_outs.data(), 4);
        auto x934 = host_outs.at(0);
        auto x935 = host_outs.at(1);
        auto x936 = host_outs.at(2);
        auto x937 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x670);
          reg = x670;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x934);
          reg = x934;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x935);
          reg = x935;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x936);
          reg = x936;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x937);
          reg = x937;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x938 = args[2][30 * steps + ((cycle - 0) & mask)];
          assert(x938 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x939 = args[2][31 * steps + ((cycle - 0) & mask)];
          assert(x939 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x940 = args[2][32 * steps + ((cycle - 0) & mask)];
          assert(x940 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x941 = args[2][33 * steps + ((cycle - 0) & mask)];
          assert(x941 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x942 = args[2][34 * steps + ((cycle - 0) & mask)];
          assert(x942 != Fp::invalid());
          host_args.at(0) = x938;
          host_args.at(1) = x939;
          host_args.at(2) = x940;
          host_args.at(3) = x941;
          host_args.at(4) = x942;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x943 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x943 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x944 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x944 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x945 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x945 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x946 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x946 != Fp::invalid());
      host_args.at(0) = x703;
      host_args.at(1) = x704;
      host_args.at(2) = x943;
      host_args.at(3) = x944;
      host_args.at(4) = x945;
      host_args.at(5) = x946;
      host(ctx, "log", "READ_IOP_BODY: %u %u -> %e", host_args.data(), 6, host_outs.data(), 0);
    }
    if (x700 != 0) {
      host_args.at(0) = x703;
      host_args.at(1) = x704;
      host_args.at(2) = x705;
      host(ctx, "log", "MIX_RNG: %u, %u, %u", host_args.data(), 3, host_outs.data(), 0);
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x947 = host_outs.at(0);
        auto x948 = host_outs.at(1);
        auto x949 = host_outs.at(2);
        auto x950 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x947);
          reg = x947;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x948);
          reg = x948;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x949);
          reg = x949;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x950);
          reg = x950;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      {
        host_args.at(0) = x704;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x951 = host_outs.at(0);
        auto x952 = host_outs.at(1);
        auto x953 = host_outs.at(2);
        auto x954 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x951);
          reg = x951;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x952);
          reg = x952;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x953);
          reg = x953;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x954);
          reg = x954;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x704);
        reg = x704;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x955 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x955 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x956 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x956 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x957 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x957 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x958 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x958 != Fp::invalid());
      host_args.at(0) = x955;
      host_args.at(1) = x956;
      host_args.at(2) = x957;
      host_args.at(3) = x958;
      host(ctx, "log", "  in0=[%x %x], in1=[%x %x]", host_args.data(), 4, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[0](recursion::MicroOp)/extra(Reg)"("zirgen/circuit/recursion/micro.cpp":107:71))
      auto x959 = args[2][101 * steps + ((cycle - 0) & mask)];
      if (x959 == Fp::invalid()) x959 = 0;
      // loc("zirgen/circuit/recursion/micro.cpp":107:15)
      auto x960 = x705 * x959;
      host_args.at(0) = x960;
      host(ctx, "log", "  prev_val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x961 = x960 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x962 = x961 + x956;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x963 = x962 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x964 = x963 + x955;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x965 = x964 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x966 = x965 + x958;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x967 = x966 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x968 = x967 + x957;
      host_args.at(0) = x968;
      host(ctx, "log", "  val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":114:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x968);
        reg = x968;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x968);
        reg = x968;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x969 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x969 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x970 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x970 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x971 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x971 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x972 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x972 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x973 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x973 != Fp::invalid());
        host_args.at(0) = x969;
        host_args.at(1) = x970;
        host_args.at(2) = x971;
        host_args.at(3) = x972;
        host_args.at(4) = x973;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x701 != 0) {
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x974 = host_outs.at(0);
        auto x975 = host_outs.at(1);
        auto x976 = host_outs.at(2);
        auto x977 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x974);
          reg = x974;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x975);
          reg = x975;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x976);
          reg = x976;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x977);
          reg = x977;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x978 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x978 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":119:31)
      auto x979 = x705 * x978;
      // loc("zirgen/circuit/recursion/micro.cpp":119:17)
      auto x980 = x704 + x979;
      {
        host_args.at(0) = x980;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x981 = host_outs.at(0);
        auto x982 = host_outs.at(1);
        auto x983 = host_outs.at(2);
        auto x984 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x981);
          reg = x981;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x982);
          reg = x982;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x983);
          reg = x983;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x984);
          reg = x984;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x980);
        reg = x980;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x985 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x985 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x986 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x986 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x987 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x987 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x988 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x988 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x985);
        reg = x985;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x986);
        reg = x986;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x987);
        reg = x987;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x988);
        reg = x988;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x989 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x989 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x990 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x990 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x991 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x991 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x992 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x992 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x993 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x993 != Fp::invalid());
        host_args.at(0) = x989;
        host_args.at(1) = x990;
        host_args.at(2) = x991;
        host_args.at(3) = x992;
        host_args.at(4) = x993;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x703;
      host_args.at(1) = x704;
      host_args.at(2) = x705;
      host_args.at(3) = x978;
      host_args.at(4) = x985;
      host_args.at(5) = x986;
      host_args.at(6) = x987;
      host_args.at(7) = x988;
      host_args.at(8) = x670;
      host(ctx, "log", "SELECT, idx = %u, start = %u, step = %u, idx = %u, writing %e to %u", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x702 != 0) {
      {
        host_args.at(0) = x703;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x994 = host_outs.at(0);
        auto x995 = host_outs.at(1);
        auto x996 = host_outs.at(2);
        auto x997 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x994);
          reg = x994;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x995);
          reg = x995;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x996);
          reg = x996;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x997);
          reg = x997;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x703);
        reg = x703;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x998 = x704 * x705;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x999 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x999 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1000 = x998 * x999;
      // loc("zirgen/circuit/recursion/micro.cpp":133:30)
      auto x1001 = x318 - x705;
      // loc("zirgen/circuit/recursion/micro.cpp":133:15)
      auto x1002 = x704 * x1001;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1003 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1003 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":133:15)
      auto x1004 = x1002 * x1003;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1005 = x1000 + x1004;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1006 = x881 * x705;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1007 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1007 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1008 = x1006 * x1007;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1009 = x1005 + x1008;
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x1010 = x881 * x1001;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1011 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1011 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x1012 = x1010 * x1011;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1013 = x1009 + x1012;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1013);
        reg = x1013;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1014 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x1014 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1015 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x1015 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1016 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x1016 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1017 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x1017 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1018 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x1018 != Fp::invalid());
        host_args.at(0) = x1014;
        host_args.at(1) = x1015;
        host_args.at(2) = x1016;
        host_args.at(3) = x1017;
        host_args.at(4) = x1018;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/circuit/recursion/micro.cpp":151:34)
    auto x1019 = x321 + x317;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[2](recursion::MicroInst)/opcode(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x1020 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x1020 != Fp::invalid());
    {
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1021 = (x1020 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1021);
        reg = x1021;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1022 = x1020 - x318;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1023 = (x1022 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1023);
        reg = x1023;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1024 = x1020 - x317;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1025 = (x1024 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1025);
        reg = x1025;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1026 = x1020 - x316;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1027 = (x1026 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1027);
        reg = x1027;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1028 = x1020 - x315;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1029 = (x1028 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1029);
        reg = x1029;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1030 = x1020 - x314;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1031 = (x1030 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1031);
        reg = x1031;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1032 = x1020 - x313;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1033 = (x1032 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1033);
        reg = x1033;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1034 = x1020 - x312;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1035 = (x1034 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1035);
        reg = x1035;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1036 = x1020 - x311;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1037 = (x1036 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1037);
        reg = x1037;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1038 = x1020 - x310;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1039 = (x1038 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1039);
        reg = x1039;
      }
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1040 = x1020 - x309;
      // loc("./zirgen/components/onehot.h":37:26)
      auto x1041 = (x1040 == 0) ? Fp(1) : Fp(0);
      // loc("./zirgen/components/onehot.h":37:9)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1041);
        reg = x1041;
      }
    }
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/add(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1042 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x1042 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/sub(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1043 = args[2][116 * steps + ((cycle - 0) & mask)];
    assert(x1043 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/mul(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1044 = args[2][117 * steps + ((cycle - 0) & mask)];
    assert(x1044 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/inv(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1045 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x1045 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/eq(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1046 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x1046 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/read_iop_header(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1047 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x1047 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/read_iop_body(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1048 = args[2][121 * steps + ((cycle - 0) & mask)];
    assert(x1048 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/mix_rng(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1049 = args[2][122 * steps + ((cycle - 0) & mask)];
    assert(x1049 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/select(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1050 = args[2][123 * steps + ((cycle - 0) & mask)];
    assert(x1050 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/extract(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x1051 = args[2][124 * steps + ((cycle - 0) & mask)];
    assert(x1051 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[2](recursion::MicroInst)/operand[0](Reg)"("zirgen/circuit/recursion/micro.cpp":14:17))
    auto x1052 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x1052 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[2](recursion::MicroInst)/operand[1](Reg)"("zirgen/circuit/recursion/micro.cpp":15:17))
    auto x1053 = args[0][17 * steps + ((cycle - 0) & mask)];
    assert(x1053 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/micro_ops(recursion::MicroInsts)/inst[2](recursion::MicroInst)/operand[2](Reg)"("zirgen/circuit/recursion/micro.cpp":16:17))
    auto x1054 = args[0][18 * steps + ((cycle - 0) & mask)];
    assert(x1054 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/decode(OneHot)/constop(Reg)"("zirgen/circuit/recursion/micro.cpp":19:44))
    auto x1055 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x1055 != Fp::invalid());
    if (x1055 != 0) {
      host_args.at(0) = x1052;
      host_args.at(1) = x1053;
      host_args.at(2) = x1054;
      host_args.at(3) = x319;
      host(ctx, "log", "CONST: %e", host_args.data(), 4, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1053);
        reg = x1053;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1054);
        reg = x1054;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1056 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1056 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1057 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1057 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1058 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1058 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1059 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1059 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1060 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1060 != Fp::invalid());
        host_args.at(0) = x1056;
        host_args.at(1) = x1057;
        host_args.at(2) = x1058;
        host_args.at(3) = x1059;
        host_args.at(4) = x1060;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x1042 != 0) {
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1061 = host_outs.at(0);
        auto x1062 = host_outs.at(1);
        auto x1063 = host_outs.at(2);
        auto x1064 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1061);
          reg = x1061;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1062);
          reg = x1062;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1063);
          reg = x1063;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1064);
          reg = x1064;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1065 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1065 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1066 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1066 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1067 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1067 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1068 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1068 != Fp::invalid());
      {
        host_args.at(0) = x1053;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1069 = host_outs.at(0);
        auto x1070 = host_outs.at(1);
        auto x1071 = host_outs.at(2);
        auto x1072 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1069);
          reg = x1069;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1070);
          reg = x1070;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1071);
          reg = x1071;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1072);
          reg = x1072;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1053);
        reg = x1053;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1073 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1073 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1074 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1074 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1075 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1075 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1076 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1076 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x1077 = x1065 + x1073;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x1078 = x1066 + x1074;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x1079 = x1067 + x1075;
      // loc("zirgen/circuit/recursion/micro.cpp":28:30)
      auto x1080 = x1068 + x1076;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1077);
        reg = x1077;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1078);
        reg = x1078;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1079);
        reg = x1079;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1080);
        reg = x1080;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1081 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1081 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1082 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1082 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1083 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1083 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1084 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1084 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1085 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1085 != Fp::invalid());
        host_args.at(0) = x1081;
        host_args.at(1) = x1082;
        host_args.at(2) = x1083;
        host_args.at(3) = x1084;
        host_args.at(4) = x1085;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1086 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1086 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1087 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1087 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1088 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1088 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1089 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1089 != Fp::invalid());
      host_args.at(0) = x1065;
      host_args.at(1) = x1066;
      host_args.at(2) = x1067;
      host_args.at(3) = x1068;
      host_args.at(4) = x1073;
      host_args.at(5) = x1074;
      host_args.at(6) = x1075;
      host_args.at(7) = x1076;
      host_args.at(8) = x1086;
      host_args.at(9) = x1087;
      host_args.at(10) = x1088;
      host_args.at(11) = x1089;
      host(ctx, "log", "ADD: %e + %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    if (x1043 != 0) {
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1090 = host_outs.at(0);
        auto x1091 = host_outs.at(1);
        auto x1092 = host_outs.at(2);
        auto x1093 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1090);
          reg = x1090;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1091);
          reg = x1091;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1092);
          reg = x1092;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1093);
          reg = x1093;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1094 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1094 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1095 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1095 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1096 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1096 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1097 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1097 != Fp::invalid());
      {
        host_args.at(0) = x1053;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1098 = host_outs.at(0);
        auto x1099 = host_outs.at(1);
        auto x1100 = host_outs.at(2);
        auto x1101 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1098);
          reg = x1098;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1099);
          reg = x1099;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1100);
          reg = x1100;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1101);
          reg = x1101;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1053);
        reg = x1053;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1102 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1102 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1103 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1103 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1104 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1104 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1105 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1105 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x1106 = x1094 - x1102;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x1107 = x1095 - x1103;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x1108 = x1096 - x1104;
      // loc("zirgen/circuit/recursion/micro.cpp":34:30)
      auto x1109 = x1097 - x1105;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1106);
        reg = x1106;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1107);
        reg = x1107;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1108);
        reg = x1108;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1109);
        reg = x1109;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1110 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1110 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1111 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1111 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1112 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1112 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1113 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1113 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1114 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1114 != Fp::invalid());
        host_args.at(0) = x1110;
        host_args.at(1) = x1111;
        host_args.at(2) = x1112;
        host_args.at(3) = x1113;
        host_args.at(4) = x1114;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1115 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1115 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1116 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1116 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1117 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1117 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1118 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1118 != Fp::invalid());
      host_args.at(0) = x1094;
      host_args.at(1) = x1095;
      host_args.at(2) = x1096;
      host_args.at(3) = x1097;
      host_args.at(4) = x1102;
      host_args.at(5) = x1103;
      host_args.at(6) = x1104;
      host_args.at(7) = x1105;
      host_args.at(8) = x1115;
      host_args.at(9) = x1116;
      host_args.at(10) = x1117;
      host_args.at(11) = x1118;
      host(ctx, "log", "SUB: %e - %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    if (x1044 != 0) {
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1119 = host_outs.at(0);
        auto x1120 = host_outs.at(1);
        auto x1121 = host_outs.at(2);
        auto x1122 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1119);
          reg = x1119;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1120);
          reg = x1120;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1121);
          reg = x1121;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1122);
          reg = x1122;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1123 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1123 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1124 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1124 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1125 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1125 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1126 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1126 != Fp::invalid());
      {
        host_args.at(0) = x1053;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1127 = host_outs.at(0);
        auto x1128 = host_outs.at(1);
        auto x1129 = host_outs.at(2);
        auto x1130 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1127);
          reg = x1127;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1128);
          reg = x1128;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1129);
          reg = x1129;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1130);
          reg = x1130;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1053);
        reg = x1053;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1131 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1131 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1132 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1132 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1133 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1133 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1134 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1134 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1135 = x1123 * x1131;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1136 = x1124 * x1134;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1137 = x1125 * x1133;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1138 = x1136 + x1137;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1139 = x1126 * x1132;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1140 = x1138 + x1139;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1141 = x1140 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1142 = x1135 + x1141;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1143 = x1123 * x1132;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1144 = x1124 * x1131;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1145 = x1143 + x1144;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1146 = x1125 * x1134;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1147 = x1126 * x1133;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1148 = x1146 + x1147;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1149 = x1148 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1150 = x1145 + x1149;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1151 = x1123 * x1133;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1152 = x1124 * x1132;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1153 = x1151 + x1152;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1154 = x1125 * x1131;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1155 = x1153 + x1154;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1156 = x1126 * x1134;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1157 = x1156 * x307;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1158 = x1155 + x1157;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1159 = x1123 * x1134;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1160 = x1124 * x1133;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1161 = x1159 + x1160;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1162 = x1125 * x1132;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1163 = x1161 + x1162;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1164 = x1126 * x1131;
      // loc("zirgen/circuit/recursion/micro.cpp":40:30)
      auto x1165 = x1163 + x1164;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1142);
        reg = x1142;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1150);
        reg = x1150;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1158);
        reg = x1158;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1165);
        reg = x1165;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1166 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1166 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1167 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1167 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1168 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1168 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1169 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1169 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1170 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1170 != Fp::invalid());
        host_args.at(0) = x1166;
        host_args.at(1) = x1167;
        host_args.at(2) = x1168;
        host_args.at(3) = x1169;
        host_args.at(4) = x1170;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1171 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1171 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1172 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1172 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1173 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1173 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1174 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1174 != Fp::invalid());
      host_args.at(0) = x1123;
      host_args.at(1) = x1124;
      host_args.at(2) = x1125;
      host_args.at(3) = x1126;
      host_args.at(4) = x1131;
      host_args.at(5) = x1132;
      host_args.at(6) = x1133;
      host_args.at(7) = x1134;
      host_args.at(8) = x1171;
      host_args.at(9) = x1172;
      host_args.at(10) = x1173;
      host_args.at(11) = x1174;
      host(ctx, "log", "MUL: %e * %e -> %e", host_args.data(), 12, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":43:56)
    auto x1175 = x1045 * x1053;
    if (x1175 != 0) {
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1176 = host_outs.at(0);
        auto x1177 = host_outs.at(1);
        auto x1178 = host_outs.at(2);
        auto x1179 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1176);
          reg = x1176;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1177);
          reg = x1177;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1178);
          reg = x1178;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1179);
          reg = x1179;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1180 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1180 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1181 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1181 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1182 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1182 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1183 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1183 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1184 = x1180 * x1180;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1185 = x1183 + x1183;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1186 = x1181 * x1185;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1187 = x1182 * x1182;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1188 = x1186 - x1187;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1189 = x1188 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1190 = x1184 + x1189;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1191 = x1182 + x1182;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1192 = x1180 * x1191;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1193 = x1181 * x1181;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1194 = x1192 - x1193;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1195 = x1183 * x1183;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1196 = x1195 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1197 = x1194 + x1196;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1198 = x1190 * x1190;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1199 = x1197 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1200 = x1199 * x1197;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1201 = x1198 + x1200;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1202 = inv(x1201);
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1203 = x1190 * x1202;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1204 = x1197 * x1202;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1205 = x1180 * x1203;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1206 = x1182 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1207 = x1206 * x1204;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1208 = x1205 + x1207;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1209 = -x1181;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1210 = x1209 * x1203;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1211 = x1183 * x308;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1212 = x1211 * x1204;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1213 = x1210 - x1212;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1214 = -x1180;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1215 = x1214 * x1204;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1216 = x1182 * x1203;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1217 = x1215 + x1216;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1218 = x1181 * x1204;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1219 = x1183 * x1203;
        // loc("zirgen/circuit/recursion/micro.cpp":46:42)
        auto x1220 = x1218 - x1219;
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1019);
          reg = x1019;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1208);
          reg = x1208;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1213);
          reg = x1213;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1217);
          reg = x1217;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1220);
          reg = x1220;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x1221 = args[2][45 * steps + ((cycle - 0) & mask)];
          assert(x1221 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1222 = args[2][46 * steps + ((cycle - 0) & mask)];
          assert(x1222 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1223 = args[2][47 * steps + ((cycle - 0) & mask)];
          assert(x1223 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1224 = args[2][48 * steps + ((cycle - 0) & mask)];
          assert(x1224 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1225 = args[2][49 * steps + ((cycle - 0) & mask)];
          assert(x1225 != Fp::invalid());
          host_args.at(0) = x1221;
          host_args.at(1) = x1222;
          host_args.at(2) = x1223;
          host_args.at(3) = x1224;
          host_args.at(4) = x1225;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1226 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1226 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1227 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1227 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1228 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1228 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1229 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1229 != Fp::invalid());
      host_args.at(0) = x1180;
      host_args.at(1) = x1181;
      host_args.at(2) = x1182;
      host_args.at(3) = x1183;
      host_args.at(4) = x1226;
      host_args.at(5) = x1227;
      host_args.at(6) = x1228;
      host_args.at(7) = x1229;
      host(ctx, "log", "INV: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x1230 = x318 - x1053;
    // loc("zirgen/circuit/recursion/micro.cpp":50:62)
    auto x1231 = x1045 * x1230;
    if (x1231 != 0) {
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1232 = host_outs.at(0);
        auto x1233 = host_outs.at(1);
        auto x1234 = host_outs.at(2);
        auto x1235 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1232);
          reg = x1232;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1233);
          reg = x1233;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1234);
          reg = x1234;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1235);
          reg = x1235;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1236 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1236 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/micro.cpp":55:22)
        auto x1237 = inv(x1236);
        // loc("zirgen/circuit/recursion/micro.cpp":55:7)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1237);
          reg = x1237;
        }
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[2](recursion::MicroOp)/extra(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1238 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x1238 != Fp::invalid());
        // loc("zirgen/circuit/recursion/micro.cpp":56:36)
        auto x1239 = x1238 * x1236;
        // loc("zirgen/circuit/recursion/micro.cpp":56:32)
        auto x1240 = x318 - x1239;
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1019);
          reg = x1019;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1240);
          reg = x1240;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x1241 = args[2][45 * steps + ((cycle - 0) & mask)];
          assert(x1241 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1242 = args[2][46 * steps + ((cycle - 0) & mask)];
          assert(x1242 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1243 = args[2][47 * steps + ((cycle - 0) & mask)];
          assert(x1243 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1244 = args[2][48 * steps + ((cycle - 0) & mask)];
          assert(x1244 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1245 = args[2][49 * steps + ((cycle - 0) & mask)];
          assert(x1245 != Fp::invalid());
          host_args.at(0) = x1241;
          host_args.at(1) = x1242;
          host_args.at(2) = x1243;
          host_args.at(3) = x1244;
          host_args.at(4) = x1245;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1246 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1246 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1247 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1247 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1248 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1248 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1249 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1249 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1250 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1250 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1251 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1251 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1252 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1252 != Fp::invalid());
      host_args.at(0) = x1236;
      host_args.at(1) = x1247;
      host_args.at(2) = x1248;
      host_args.at(3) = x1249;
      host_args.at(4) = x1246;
      host_args.at(5) = x1250;
      host_args.at(6) = x1251;
      host_args.at(7) = x1252;
      host(ctx, "log", "IS_ZERO: %e -> %e", host_args.data(), 8, host_outs.data(), 0);
    }
    if (x1046 != 0) {
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1253 = host_outs.at(0);
        auto x1254 = host_outs.at(1);
        auto x1255 = host_outs.at(2);
        auto x1256 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1253);
          reg = x1253;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1254);
          reg = x1254;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1255);
          reg = x1255;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1256);
          reg = x1256;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1257 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1257 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1258 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1258 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1259 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1259 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1260 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1260 != Fp::invalid());
      {
        host_args.at(0) = x1053;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1261 = host_outs.at(0);
        auto x1262 = host_outs.at(1);
        auto x1263 = host_outs.at(2);
        auto x1264 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1261);
          reg = x1261;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1262);
          reg = x1262;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1263);
          reg = x1263;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1264);
          reg = x1264;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1053);
        reg = x1053;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1265 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1265 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1266 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1266 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1267 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1267 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1268 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1268 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x1269 = x1257 - x1265;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x1270 = x1258 - x1266;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x1271 = x1259 - x1267;
      // loc("zirgen/circuit/recursion/micro.cpp":71:30)
      auto x1272 = x1260 - x1268;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1269);
        reg = x1269;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1270);
        reg = x1270;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1271);
        reg = x1271;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1272);
        reg = x1272;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1273 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1273 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1274 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1274 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1275 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1275 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1276 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1276 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1277 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1277 != Fp::invalid());
        host_args.at(0) = x1273;
        host_args.at(1) = x1274;
        host_args.at(2) = x1275;
        host_args.at(3) = x1276;
        host_args.at(4) = x1277;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x1257;
      host_args.at(1) = x1258;
      host_args.at(2) = x1259;
      host_args.at(3) = x1260;
      host_args.at(4) = x1265;
      host_args.at(5) = x1266;
      host_args.at(6) = x1267;
      host_args.at(7) = x1268;
      host(ctx, "log", "EQ: %e == %e", host_args.data(), 8, host_outs.data(), 0);
    }
    if (x1047 != 0) {
      host_args.at(0) = x1052;
      host_args.at(1) = x1053;
      host(ctx, "log", "READ_IOP_HEADER: %u %u", host_args.data(), 2, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1278 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1278 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1279 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1279 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1280 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1280 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1281 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1281 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1282 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1282 != Fp::invalid());
        host_args.at(0) = x1278;
        host_args.at(1) = x1279;
        host_args.at(2) = x1280;
        host_args.at(3) = x1281;
        host_args.at(4) = x1282;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      {
        host_args.at(0) = x1052;
        host_args.at(1) = x1053;
        host(ctx, "readIOPHeader", "", host_args.data(), 2, host_outs.data(), 0);
      }
    }
    if (x1048 != 0) {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        host_args.at(0) = x1052;
        host_args.at(1) = x1053;
        host_args.at(2) = x1054;
        host(ctx, "readIOPBody", "", host_args.data(), 3, host_outs.data(), 4);
        auto x1283 = host_outs.at(0);
        auto x1284 = host_outs.at(1);
        auto x1285 = host_outs.at(2);
        auto x1286 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1019);
          reg = x1019;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1283);
          reg = x1283;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1284);
          reg = x1284;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1285);
          reg = x1285;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1286);
          reg = x1286;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x1287 = args[2][45 * steps + ((cycle - 0) & mask)];
          assert(x1287 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1288 = args[2][46 * steps + ((cycle - 0) & mask)];
          assert(x1288 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1289 = args[2][47 * steps + ((cycle - 0) & mask)];
          assert(x1289 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1290 = args[2][48 * steps + ((cycle - 0) & mask)];
          assert(x1290 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x1291 = args[2][49 * steps + ((cycle - 0) & mask)];
          assert(x1291 != Fp::invalid());
          host_args.at(0) = x1287;
          host_args.at(1) = x1288;
          host_args.at(2) = x1289;
          host_args.at(3) = x1290;
          host_args.at(4) = x1291;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1292 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1292 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1293 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1293 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1294 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1294 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1295 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1295 != Fp::invalid());
      host_args.at(0) = x1052;
      host_args.at(1) = x1053;
      host_args.at(2) = x1292;
      host_args.at(3) = x1293;
      host_args.at(4) = x1294;
      host_args.at(5) = x1295;
      host(ctx, "log", "READ_IOP_BODY: %u %u -> %e", host_args.data(), 6, host_outs.data(), 0);
    }
    if (x1049 != 0) {
      host_args.at(0) = x1052;
      host_args.at(1) = x1053;
      host_args.at(2) = x1054;
      host(ctx, "log", "MIX_RNG: %u, %u, %u", host_args.data(), 3, host_outs.data(), 0);
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1296 = host_outs.at(0);
        auto x1297 = host_outs.at(1);
        auto x1298 = host_outs.at(2);
        auto x1299 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1296);
          reg = x1296;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1297);
          reg = x1297;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1298);
          reg = x1298;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1299);
          reg = x1299;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      {
        host_args.at(0) = x1053;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1300 = host_outs.at(0);
        auto x1301 = host_outs.at(1);
        auto x1302 = host_outs.at(2);
        auto x1303 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1300);
          reg = x1300;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1301);
          reg = x1301;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1302);
          reg = x1302;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1303);
          reg = x1303;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1053);
        reg = x1053;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1304 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1304 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1305 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1305 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1306 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1306 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1307 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1307 != Fp::invalid());
      host_args.at(0) = x1304;
      host_args.at(1) = x1305;
      host_args.at(2) = x1306;
      host_args.at(3) = x1307;
      host(ctx, "log", "  in0=[%x %x], in1=[%x %x]", host_args.data(), 4, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/op[1](recursion::MicroOp)/extra(Reg)"("zirgen/circuit/recursion/micro.cpp":107:71))
      auto x1308 = args[2][113 * steps + ((cycle - 0) & mask)];
      if (x1308 == Fp::invalid()) x1308 = 0;
      // loc("zirgen/circuit/recursion/micro.cpp":107:15)
      auto x1309 = x1054 * x1308;
      host_args.at(0) = x1309;
      host(ctx, "log", "  prev_val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x1310 = x1309 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":109:11)
      auto x1311 = x1310 + x1305;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x1312 = x1311 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":110:11)
      auto x1313 = x1312 + x1304;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x1314 = x1313 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":111:11)
      auto x1315 = x1314 + x1307;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x1316 = x1315 * x306;
      // loc("zirgen/circuit/recursion/micro.cpp":112:11)
      auto x1317 = x1316 + x1306;
      host_args.at(0) = x1317;
      host(ctx, "log", "  val = %u", host_args.data(), 1, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/micro.cpp":114:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1317);
        reg = x1317;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1317);
        reg = x1317;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1318 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1318 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1319 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1319 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1320 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1320 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1321 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1321 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1322 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1322 != Fp::invalid());
        host_args.at(0) = x1318;
        host_args.at(1) = x1319;
        host_args.at(2) = x1320;
        host_args.at(3) = x1321;
        host_args.at(4) = x1322;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    if (x1050 != 0) {
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1323 = host_outs.at(0);
        auto x1324 = host_outs.at(1);
        auto x1325 = host_outs.at(2);
        auto x1326 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1323);
          reg = x1323;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1324);
          reg = x1324;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1325);
          reg = x1325;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1326);
          reg = x1326;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1327 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1327 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":119:31)
      auto x1328 = x1054 * x1327;
      // loc("zirgen/circuit/recursion/micro.cpp":119:17)
      auto x1329 = x1053 + x1328;
      {
        host_args.at(0) = x1329;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1330 = host_outs.at(0);
        auto x1331 = host_outs.at(1);
        auto x1332 = host_outs.at(2);
        auto x1333 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1330);
          reg = x1330;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1331);
          reg = x1331;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1332);
          reg = x1332;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1333);
          reg = x1333;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1329);
        reg = x1329;
      }
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1334 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1334 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1335 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1335 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1336 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1336 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1337 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1337 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1334);
        reg = x1334;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1335);
        reg = x1335;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1336);
        reg = x1336;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1337);
        reg = x1337;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1338 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1338 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1339 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1339 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1340 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1340 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1341 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1341 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1342 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1342 != Fp::invalid());
        host_args.at(0) = x1338;
        host_args.at(1) = x1339;
        host_args.at(2) = x1340;
        host_args.at(3) = x1341;
        host_args.at(4) = x1342;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      host_args.at(0) = x1052;
      host_args.at(1) = x1053;
      host_args.at(2) = x1054;
      host_args.at(3) = x1327;
      host_args.at(4) = x1334;
      host_args.at(5) = x1335;
      host_args.at(6) = x1336;
      host_args.at(7) = x1337;
      host_args.at(8) = x1019;
      host(ctx, "log", "SELECT, idx = %u, start = %u, step = %u, idx = %u, writing %e to %u", host_args.data(), 9, host_outs.data(), 0);
    }
    if (x1051 != 0) {
      {
        host_args.at(0) = x1052;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1343 = host_outs.at(0);
        auto x1344 = host_outs.at(1);
        auto x1345 = host_outs.at(2);
        auto x1346 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1343);
          reg = x1343;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1344);
          reg = x1344;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1345);
          reg = x1345;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1346);
          reg = x1346;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1052);
        reg = x1052;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1347 = x1053 * x1054;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1348 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1348 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1349 = x1347 * x1348;
      // loc("zirgen/circuit/recursion/micro.cpp":133:30)
      auto x1350 = x318 - x1054;
      // loc("zirgen/circuit/recursion/micro.cpp":133:15)
      auto x1351 = x1053 * x1350;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1352 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1352 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":133:15)
      auto x1353 = x1351 * x1352;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1354 = x1349 + x1353;
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1355 = x1230 * x1054;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1356 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1356 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":134:15)
      auto x1357 = x1355 * x1356;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1358 = x1354 + x1357;
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x1359 = x1230 * x1350;
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1360 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1360 != Fp::invalid());
      // loc("zirgen/circuit/recursion/micro.cpp":135:15)
      auto x1361 = x1359 * x1360;
      // loc("zirgen/circuit/recursion/micro.cpp":132:15)
      auto x1362 = x1358 + x1361;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1019);
        reg = x1019;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1362);
        reg = x1362;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1363 = args[2][45 * steps + ((cycle - 0) & mask)];
        assert(x1363 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1364 = args[2][46 * steps + ((cycle - 0) & mask)];
        assert(x1364 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1365 = args[2][47 * steps + ((cycle - 0) & mask)];
        assert(x1365 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1366 = args[2][48 * steps + ((cycle - 0) & mask)];
        assert(x1366 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1367 = args[2][49 * steps + ((cycle - 0) & mask)];
        assert(x1367 != Fp::invalid());
        host_args.at(0) = x1363;
        host_args.at(1) = x1364;
        host_args.at(2) = x1365;
        host_args.at(3) = x1366;
        host_args.at(4) = x1367;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/macro_ops(Reg)"("./zirgen/components/mux.h":49:25))
  auto x1368 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x1368 != Fp::invalid());
  if (x1368 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/write_addr(Reg)"("zirgen/circuit/recursion/top.cpp":22:49))
    auto x1369 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x1369 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/wom_init(Reg)"("./zirgen/components/mux.h":49:25))
    auto x1370 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x1370 != Fp::invalid());
    if (x1370 != 0) {
      host(ctx, "log", "WOM_INIT", host_args.data(), 0, host_outs.data(), 0);
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/wom_fini(Reg)"("./zirgen/components/mux.h":49:25))
    auto x1371 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x1371 != Fp::invalid());
    if (x1371 != 0) {
      host(ctx, "log", "WOM_FINI", host_args.data(), 0, host_outs.data(), 0);
      // loc("zirgen/circuit/recursion/wom.cpp":17:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1369);
        reg = x1369;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/bit_and_elem(Reg)"("./zirgen/components/mux.h":49:25))
    auto x1372 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x1372 != Fp::invalid());
    if (x1372 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1373 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x1373 != Fp::invalid());
      {
        host_args.at(0) = x1373;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1374 = host_outs.at(0);
        auto x1375 = host_outs.at(1);
        auto x1376 = host_outs.at(2);
        auto x1377 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1374);
          reg = x1374;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1375);
          reg = x1375;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1376);
          reg = x1376;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1377);
          reg = x1377;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1373);
        reg = x1373;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1378 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x1378 != Fp::invalid());
      {
        host_args.at(0) = x1378;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1379 = host_outs.at(0);
        auto x1380 = host_outs.at(1);
        auto x1381 = host_outs.at(2);
        auto x1382 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1379);
          reg = x1379;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1380);
          reg = x1380;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1381);
          reg = x1381;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1382);
          reg = x1382;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1378);
        reg = x1378;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1383 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1383 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1384 = Fp(x1383.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1384);
          reg = x1384;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1385 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1385 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1386 = Fp(x1385.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1386);
          reg = x1386;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1387 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1387 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1388 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1388 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1389 = x1387 * x1388;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1390 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1390 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1391 = Fp(x1390.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1392 = x1391 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1392);
          reg = x1392;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1393 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1393 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1394 = Fp(x1393.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1395 = x1394 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1395);
          reg = x1395;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1396 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1396 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1397 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1397 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1398 = x1396 * x1397;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1399 = x1398 * x317;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1400 = x1389 + x1399;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1401 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1401 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1402 = Fp(x1401.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1403 = x1402 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1403);
          reg = x1403;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1404 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1404 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1405 = Fp(x1404.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1406 = x1405 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1406);
          reg = x1406;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1407 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x1407 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1408 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1408 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1409 = x1407 * x1408;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1410 = x1409 * x315;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1411 = x1400 + x1410;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1412 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1412 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1413 = Fp(x1412.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1414 = x1413 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1414);
          reg = x1414;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1415 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1415 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1416 = Fp(x1415.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1417 = x1416 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1417);
          reg = x1417;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1418 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1418 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1419 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1419 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1420 = x1418 * x1419;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1421 = x1420 * x311;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1422 = x1411 + x1421;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1423 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1423 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1424 = Fp(x1423.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1425 = x1424 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1425);
          reg = x1425;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1426 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1426 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1427 = Fp(x1426.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1428 = x1427 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1428);
          reg = x1428;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1429 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1429 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1430 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x1430 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1431 = x1429 * x1430;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1432 = x1431 * x302;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1433 = x1422 + x1432;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1434 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1434 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1435 = Fp(x1434.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1436 = x1435 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1436);
          reg = x1436;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1437 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1437 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1438 = Fp(x1437.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1439 = x1438 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1439);
          reg = x1439;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1440 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1440 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1441 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1441 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1442 = x1440 * x1441;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1443 = x1442 * x300;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1444 = x1433 + x1443;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1445 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1445 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1446 = Fp(x1445.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1447 = x1446 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1447);
          reg = x1447;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1448 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1448 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1449 = Fp(x1448.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1450 = x1449 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1450);
          reg = x1450;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1451 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1451 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1452 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1452 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1453 = x1451 * x1452;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1454 = x1453 * x298;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1455 = x1444 + x1454;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1456 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1456 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1457 = Fp(x1456.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1458 = x1457 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1458);
          reg = x1458;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1459 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1459 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1460 = Fp(x1459.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1461 = x1460 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1461);
          reg = x1461;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1462 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x1462 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1463 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x1463 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1464 = x1462 * x1463;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1465 = x1464 * x296;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1466 = x1455 + x1465;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1467 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1467 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1468 = Fp(x1467.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1469 = x1468 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1469);
          reg = x1469;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1470 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1470 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1471 = Fp(x1470.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1472 = x1471 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1472);
          reg = x1472;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1473 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x1473 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1474 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x1474 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1475 = x1473 * x1474;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1476 = x1475 * x294;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1477 = x1466 + x1476;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1478 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1478 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1479 = Fp(x1478.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1480 = x1479 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1480);
          reg = x1480;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1481 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1481 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1482 = Fp(x1481.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1483 = x1482 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1483);
          reg = x1483;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1484 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x1484 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1485 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x1485 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1486 = x1484 * x1485;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1487 = x1486 * x292;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1488 = x1477 + x1487;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1489 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1489 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1490 = Fp(x1489.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1491 = x1490 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1491);
          reg = x1491;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1492 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1492 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1493 = Fp(x1492.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1494 = x1493 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1494);
          reg = x1494;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1495 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x1495 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1496 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x1496 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1497 = x1495 * x1496;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1498 = x1497 * x290;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1499 = x1488 + x1498;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1500 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1500 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1501 = Fp(x1500.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1502 = x1501 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][58 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1502);
          reg = x1502;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1503 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1503 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1504 = Fp(x1503.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1505 = x1504 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][59 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1505);
          reg = x1505;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1506 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x1506 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1507 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x1507 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1508 = x1506 * x1507;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1509 = x1508 * x288;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1510 = x1499 + x1509;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1511 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1511 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1512 = Fp(x1511.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1513 = x1512 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1513);
          reg = x1513;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1514 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1514 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1515 = Fp(x1514.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1516 = x1515 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1516);
          reg = x1516;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1517 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x1517 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1518 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x1518 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1519 = x1517 * x1518;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1520 = x1519 * x286;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1521 = x1510 + x1520;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1522 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1522 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1523 = Fp(x1522.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1524 = x1523 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1524);
          reg = x1524;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1525 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1525 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1526 = Fp(x1525.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1527 = x1526 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1527);
          reg = x1527;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1528 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x1528 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1529 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x1529 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1530 = x1528 * x1529;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1531 = x1530 * x284;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1532 = x1521 + x1531;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1533 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1533 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1534 = Fp(x1533.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1535 = x1534 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1535);
          reg = x1535;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1536 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1536 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1537 = Fp(x1536.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1538 = x1537 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1538);
          reg = x1538;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1539 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x1539 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1540 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x1540 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1541 = x1539 * x1540;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1542 = x1541 * x282;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1543 = x1532 + x1542;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1544 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1544 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1545 = Fp(x1544.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1546 = x1545 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1546);
          reg = x1546;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1547 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1547 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1548 = Fp(x1547.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1549 = x1548 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1549);
          reg = x1549;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1550 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x1550 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1551 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x1551 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1552 = x1550 * x1551;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1553 = x1552 * x280;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1554 = x1543 + x1553;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1555 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1555 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1556 = Fp(x1555.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1557 = x1556 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1557);
          reg = x1557;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1558 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1558 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1559 = Fp(x1558.asUInt32() & x306.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1560 = x1559 * x278;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1560);
          reg = x1560;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1561 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x1561 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1562 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x1562 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1563 = x1561 * x1562;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1564 = x1563 * x306;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1565 = x1554 + x1564;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1566 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1566 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1567 = Fp(x1566.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1568 = x1567 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1568);
          reg = x1568;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1569 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1569 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1570 = Fp(x1569.asUInt32() & x277.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1571 = x1570 * x276;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1571);
          reg = x1571;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1572 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x1572 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1573 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x1573 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1574 = x1572 * x1573;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1575 = x1574 * x277;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1576 = x1565 + x1575;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1577 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1577 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1578 = Fp(x1577.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1579 = x1578 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1579);
          reg = x1579;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1580 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1580 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1581 = Fp(x1580.asUInt32() & x275.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1582 = x1581 * x274;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1582);
          reg = x1582;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1583 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x1583 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1584 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x1584 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1585 = x1583 * x1584;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1586 = x1585 * x275;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1587 = x1576 + x1586;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1588 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1588 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1589 = Fp(x1588.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1590 = x1589 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1590);
          reg = x1590;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1591 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1591 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1592 = Fp(x1591.asUInt32() & x273.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1593 = x1592 * x272;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1593);
          reg = x1593;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1594 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x1594 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1595 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1595 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1596 = x1594 * x1595;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1597 = x1596 * x273;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1598 = x1587 + x1597;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1599 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1599 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1600 = Fp(x1599.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1601 = x1600 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1601);
          reg = x1601;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1602 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1602 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1603 = Fp(x1602.asUInt32() & x271.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1604 = x1603 * x270;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1604);
          reg = x1604;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1605 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1605 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1606 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1606 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1607 = x1605 * x1606;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1608 = x1607 * x271;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1609 = x1598 + x1608;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1610 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1610 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1611 = Fp(x1610.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1612 = x1611 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1612);
          reg = x1612;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1613 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1613 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1614 = Fp(x1613.asUInt32() & x269.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1615 = x1614 * x268;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1615);
          reg = x1615;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1616 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1616 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1617 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1617 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1618 = x1616 * x1617;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1619 = x1618 * x269;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1620 = x1609 + x1619;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1621 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1621 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1622 = Fp(x1621.asUInt32() & x267.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1623 = x1622 * x266;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1623);
          reg = x1623;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1624 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1624 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1625 = Fp(x1624.asUInt32() & x267.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1626 = x1625 * x266;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1626);
          reg = x1626;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1627 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1627 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1628 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1628 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1629 = x1627 * x1628;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1630 = x1629 * x267;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1631 = x1620 + x1630;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1632 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1632 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1633 = Fp(x1632.asUInt32() & x265.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1634 = x1633 * x264;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1634);
          reg = x1634;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1635 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1635 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1636 = Fp(x1635.asUInt32() & x265.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1637 = x1636 * x264;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1637);
          reg = x1637;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1638 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1638 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1639 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1639 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1640 = x1638 * x1639;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1641 = x1640 * x265;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1642 = x1631 + x1641;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1643 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1643 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1644 = Fp(x1643.asUInt32() & x263.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1645 = x1644 * x262;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1645);
          reg = x1645;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1646 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1646 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1647 = Fp(x1646.asUInt32() & x263.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1648 = x1647 * x262;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1648);
          reg = x1648;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1649 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1649 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1650 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1650 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1651 = x1649 * x1650;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1652 = x1651 * x263;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1653 = x1642 + x1652;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1654 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1654 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1655 = Fp(x1654.asUInt32() & x261.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1656 = x1655 * x260;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1656);
          reg = x1656;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1657 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1657 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1658 = Fp(x1657.asUInt32() & x261.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1659 = x1658 * x260;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1659);
          reg = x1659;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1660 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1660 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1661 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1661 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1662 = x1660 * x1661;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1663 = x1662 * x261;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1664 = x1653 + x1663;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1665 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1665 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1666 = Fp(x1665.asUInt32() & x259.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1667 = x1666 * x258;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1667);
          reg = x1667;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1668 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1668 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1669 = Fp(x1668.asUInt32() & x259.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1670 = x1669 * x258;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1670);
          reg = x1670;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1671 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x1671 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1672 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x1672 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1673 = x1671 * x1672;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1674 = x1673 * x259;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1675 = x1664 + x1674;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1676 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1676 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1677 = Fp(x1676.asUInt32() & x257.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1678 = x1677 * x256;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1678);
          reg = x1678;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1679 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1679 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1680 = Fp(x1679.asUInt32() & x257.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1681 = x1680 * x256;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1681);
          reg = x1681;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1682 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x1682 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1683 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x1683 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1684 = x1682 * x1683;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1685 = x1684 * x257;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1686 = x1675 + x1685;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1687 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1687 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1688 = Fp(x1687.asUInt32() & x255.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1689 = x1688 * x254;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1689);
          reg = x1689;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1690 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1690 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1691 = Fp(x1690.asUInt32() & x255.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1692 = x1691 * x254;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1692);
          reg = x1692;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1693 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x1693 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1694 = args[2][93 * steps + ((cycle - 0) & mask)];
      assert(x1694 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1695 = x1693 * x1694;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1696 = x1695 * x255;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1697 = x1686 + x1696;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1698 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1698 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1699 = Fp(x1698.asUInt32() & x253.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1700 = x1699 * x252;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1700);
          reg = x1700;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1701 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1701 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1702 = Fp(x1701.asUInt32() & x253.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1703 = x1702 * x252;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1703);
          reg = x1703;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1704 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x1704 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1705 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x1705 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1706 = x1704 * x1705;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1707 = x1706 * x253;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1708 = x1697 + x1707;
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1709 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1709 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":75:22)
        auto x1710 = Fp(x1709.asUInt32() & x251.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":75:21)
        auto x1711 = x1710 * x250;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1711);
          reg = x1711;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1712 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x1712 != Fp::invalid());
        // loc("zirgen/circuit/recursion/bits.cpp":76:22)
        auto x1713 = Fp(x1712.asUInt32() & x251.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":76:21)
        auto x1714 = x1713 * x250;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1714);
          reg = x1714;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1715 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x1715 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/bits_b[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1716 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x1716 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1717 = x1715 * x1716;
      // loc("zirgen/circuit/recursion/bits.cpp":80:19)
      auto x1718 = x1717 * x251;
      // loc("zirgen/circuit/recursion/bits.cpp":80:12)
      auto x1719 = x1708 + x1718;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1720 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x1720 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1721 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x1721 != Fp::invalid());
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1369);
        reg = x1369;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1719);
        reg = x1719;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x1722 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x1722 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1723 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x1723 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1724 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x1724 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1725 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x1725 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x1726 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x1726 != Fp::invalid());
        host_args.at(0) = x1722;
        host_args.at(1) = x1723;
        host_args.at(2) = x1724;
        host_args.at(3) = x1725;
        host_args.at(4) = x1726;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1727 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x1727 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1728 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1728 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1729 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1729 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1730 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1730 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1731 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x1731 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1732 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1732 != Fp::invalid());
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1733 = args[0][19 * steps + ((cycle - 0) & mask)];
      assert(x1733 != Fp::invalid());
      host_args.at(0) = x1373;
      host_args.at(1) = x1378;
      host_args.at(2) = x1720;
      host_args.at(3) = x1727;
      host_args.at(4) = x1721;
      host_args.at(5) = x1728;
      host_args.at(6) = x1733;
      host_args.at(7) = x1719;
      host_args.at(8) = x1729;
      host_args.at(9) = x1730;
      host_args.at(10) = x1731;
      host_args.at(11) = x1732;
      host(ctx, "log", "BIT_AND_ELEM, reading from [%u, %u],  A = [%x, %x], B = [%x, %x], type = %u, Out=%x, Result=%e", host_args.data(), 12, host_outs.data(), 0);
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/bit_op_shorts(Reg)"("./zirgen/components/mux.h":49:25))
    auto x1734 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x1734 != Fp::invalid());
    if (x1734 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1735 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x1735 != Fp::invalid());
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1736 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x1736 != Fp::invalid());
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1737 = args[0][19 * steps + ((cycle - 0) & mask)];
      assert(x1737 != Fp::invalid());
      host_args.at(0) = x1735;
      host_args.at(1) = x1736;
      host_args.at(2) = x1737;
      host(ctx, "log", "BIT_OP_SHORTS, reading from [%u, %u], type=%u", host_args.data(), 3, host_outs.data(), 0);
      {
        host_args.at(0) = x1735;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1738 = host_outs.at(0);
        auto x1739 = host_outs.at(1);
        auto x1740 = host_outs.at(2);
        auto x1741 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1738);
          reg = x1738;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1739);
          reg = x1739;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1740);
          reg = x1740;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1741);
          reg = x1741;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1735);
        reg = x1735;
      }
      {
        host_args.at(0) = x1736;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1742 = host_outs.at(0);
        auto x1743 = host_outs.at(1);
        auto x1744 = host_outs.at(2);
        auto x1745 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1742);
          reg = x1742;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1743);
          reg = x1743;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1744);
          reg = x1744;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1745);
          reg = x1745;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1736);
        reg = x1736;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1746 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x1746 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1747 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x1747 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1748 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x1748 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x1749 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1749 != Fp::invalid());
      host_args.at(0) = x1746;
      host_args.at(1) = x1747;
      host_args.at(2) = x1748;
      host_args.at(3) = x1749;
      host(ctx, "log", "  A = [%x, %x], B = [%x, %x]", host_args.data(), 4, host_outs.data(), 0);
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1750 = Fp(x1746.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1750);
          reg = x1750;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1751 = Fp(x1748.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1751);
          reg = x1751;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1752 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x1752 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1753 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x1753 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1754 = x1752 * x1753;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1755 = Fp(x1746.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1756 = x1755 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1756);
          reg = x1756;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1757 = Fp(x1748.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1758 = x1757 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1758);
          reg = x1758;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1759 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x1759 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1760 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x1760 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1761 = x1759 * x1760;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1762 = x1761 * x317;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1763 = x1754 + x1762;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1764 = Fp(x1746.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1765 = x1764 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1765);
          reg = x1765;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1766 = Fp(x1748.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1767 = x1766 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1767);
          reg = x1767;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1768 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x1768 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1769 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x1769 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1770 = x1768 * x1769;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1771 = x1770 * x315;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1772 = x1763 + x1771;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1773 = Fp(x1746.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1774 = x1773 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1774);
          reg = x1774;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1775 = Fp(x1748.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1776 = x1775 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1776);
          reg = x1776;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1777 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x1777 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1778 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x1778 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1779 = x1777 * x1778;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1780 = x1779 * x311;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1781 = x1772 + x1780;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1782 = Fp(x1746.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1783 = x1782 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1783);
          reg = x1783;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1784 = Fp(x1748.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1785 = x1784 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1785);
          reg = x1785;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1786 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x1786 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1787 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x1787 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1788 = x1786 * x1787;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1789 = x1788 * x302;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1790 = x1781 + x1789;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1791 = Fp(x1746.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1792 = x1791 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1792);
          reg = x1792;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1793 = Fp(x1748.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1794 = x1793 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1794);
          reg = x1794;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1795 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x1795 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1796 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x1796 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1797 = x1795 * x1796;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1798 = x1797 * x300;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1799 = x1790 + x1798;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1800 = Fp(x1746.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1801 = x1800 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1801);
          reg = x1801;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1802 = Fp(x1748.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1803 = x1802 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1803);
          reg = x1803;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1804 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x1804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1805 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x1805 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1806 = x1804 * x1805;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1807 = x1806 * x298;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1808 = x1799 + x1807;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1809 = Fp(x1746.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1810 = x1809 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1810);
          reg = x1810;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1811 = Fp(x1748.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1812 = x1811 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1812);
          reg = x1812;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1813 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x1813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1814 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1814 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1815 = x1813 * x1814;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1816 = x1815 * x296;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1817 = x1808 + x1816;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1818 = Fp(x1746.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1819 = x1818 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1819);
          reg = x1819;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1820 = Fp(x1748.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1821 = x1820 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1821);
          reg = x1821;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1822 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x1822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1823 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1823 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1824 = x1822 * x1823;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1825 = x1824 * x294;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1826 = x1817 + x1825;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1827 = Fp(x1746.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1828 = x1827 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1828);
          reg = x1828;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1829 = Fp(x1748.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1830 = x1829 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1830);
          reg = x1830;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1831 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x1831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1832 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1832 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1833 = x1831 * x1832;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1834 = x1833 * x292;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1835 = x1826 + x1834;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1836 = Fp(x1746.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1837 = x1836 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1837);
          reg = x1837;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1838 = Fp(x1748.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1839 = x1838 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1839);
          reg = x1839;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1840 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x1840 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1841 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1841 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1842 = x1840 * x1841;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1843 = x1842 * x290;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1844 = x1835 + x1843;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1845 = Fp(x1746.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1846 = x1845 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1846);
          reg = x1846;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1847 = Fp(x1748.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1848 = x1847 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1848);
          reg = x1848;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1849 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x1849 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1850 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1850 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1851 = x1849 * x1850;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1852 = x1851 * x288;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1853 = x1844 + x1852;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1854 = Fp(x1746.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1855 = x1854 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1855);
          reg = x1855;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1856 = Fp(x1748.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1857 = x1856 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1857);
          reg = x1857;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1858 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x1858 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1859 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1859 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1860 = x1858 * x1859;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1861 = x1860 * x286;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1862 = x1853 + x1861;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1863 = Fp(x1746.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1864 = x1863 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1864);
          reg = x1864;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1865 = Fp(x1748.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1866 = x1865 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1866);
          reg = x1866;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1867 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x1867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1868 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1868 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1869 = x1867 * x1868;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1870 = x1869 * x284;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1871 = x1862 + x1870;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1872 = Fp(x1746.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1873 = x1872 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1873);
          reg = x1873;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1874 = Fp(x1748.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1875 = x1874 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1875);
          reg = x1875;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1876 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x1876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1877 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1877 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1878 = x1876 * x1877;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1879 = x1878 * x282;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1880 = x1871 + x1879;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1881 = Fp(x1746.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1882 = x1881 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1882);
          reg = x1882;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1883 = Fp(x1748.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1884 = x1883 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1884);
          reg = x1884;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1885 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x1885 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1886 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1886 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1887 = x1885 * x1886;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1888 = x1887 * x280;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1889 = x1880 + x1888;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1890 = Fp(x1747.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1890);
          reg = x1890;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1891 = Fp(x1749.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1891);
          reg = x1891;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1892 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x1892 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1893 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1893 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1894 = x1892 * x1893;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1895 = Fp(x1747.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1896 = x1895 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1896);
          reg = x1896;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1897 = Fp(x1749.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1898 = x1897 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1898);
          reg = x1898;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1899 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x1899 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1900 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1900 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1901 = x1899 * x1900;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1902 = x1901 * x317;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1903 = x1894 + x1902;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1904 = Fp(x1747.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1905 = x1904 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1905);
          reg = x1905;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1906 = Fp(x1749.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1907 = x1906 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1907);
          reg = x1907;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1908 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x1908 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1909 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1909 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1910 = x1908 * x1909;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1911 = x1910 * x315;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1912 = x1903 + x1911;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1913 = Fp(x1747.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1914 = x1913 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1914);
          reg = x1914;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1915 = Fp(x1749.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1916 = x1915 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1916);
          reg = x1916;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1917 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x1917 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1918 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1918 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1919 = x1917 * x1918;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1920 = x1919 * x311;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1921 = x1912 + x1920;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1922 = Fp(x1747.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1923 = x1922 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1923);
          reg = x1923;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1924 = Fp(x1749.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1925 = x1924 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1925);
          reg = x1925;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1926 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x1926 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1927 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x1927 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1928 = x1926 * x1927;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1929 = x1928 * x302;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1930 = x1921 + x1929;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1931 = Fp(x1747.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1932 = x1931 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1932);
          reg = x1932;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1933 = Fp(x1749.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1934 = x1933 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1934);
          reg = x1934;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1935 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x1935 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1936 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x1936 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1937 = x1935 * x1936;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1938 = x1937 * x300;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1939 = x1930 + x1938;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1940 = Fp(x1747.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1941 = x1940 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][58 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1941);
          reg = x1941;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1942 = Fp(x1749.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1943 = x1942 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1943);
          reg = x1943;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1944 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x1944 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1945 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x1945 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1946 = x1944 * x1945;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1947 = x1946 * x298;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1948 = x1939 + x1947;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1949 = Fp(x1747.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1950 = x1949 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][59 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1950);
          reg = x1950;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1951 = Fp(x1749.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1952 = x1951 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1952);
          reg = x1952;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1953 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x1953 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1954 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x1954 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1955 = x1953 * x1954;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1956 = x1955 * x296;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1957 = x1948 + x1956;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1958 = Fp(x1747.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1959 = x1958 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1959);
          reg = x1959;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1960 = Fp(x1749.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1961 = x1960 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1961);
          reg = x1961;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1962 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x1962 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1963 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x1963 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1964 = x1962 * x1963;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1965 = x1964 * x294;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1966 = x1957 + x1965;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1967 = Fp(x1747.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1968 = x1967 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1968);
          reg = x1968;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1969 = Fp(x1749.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1970 = x1969 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1970);
          reg = x1970;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1971 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x1971 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1972 = args[2][93 * steps + ((cycle - 0) & mask)];
      assert(x1972 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1973 = x1971 * x1972;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1974 = x1973 * x292;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1975 = x1966 + x1974;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1976 = Fp(x1747.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1977 = x1976 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1977);
          reg = x1977;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1978 = Fp(x1749.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1979 = x1978 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1979);
          reg = x1979;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1980 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x1980 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1981 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x1981 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1982 = x1980 * x1981;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1983 = x1982 * x290;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1984 = x1975 + x1983;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1985 = Fp(x1747.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1986 = x1985 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1986);
          reg = x1986;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1987 = Fp(x1749.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1988 = x1987 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1988);
          reg = x1988;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1989 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x1989 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1990 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x1990 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1991 = x1989 * x1990;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x1992 = x1991 * x288;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x1993 = x1984 + x1992;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x1994 = Fp(x1747.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x1995 = x1994 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1995);
          reg = x1995;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x1996 = Fp(x1749.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x1997 = x1996 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1997);
          reg = x1997;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1998 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x1998 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1999 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x1999 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2000 = x1998 * x1999;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2001 = x2000 * x286;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x2002 = x1993 + x2001;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x2003 = Fp(x1747.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x2004 = x2003 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2004);
          reg = x2004;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x2005 = Fp(x1749.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x2006 = x2005 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2006);
          reg = x2006;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2007 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x2007 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2008 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x2008 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2009 = x2007 * x2008;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2010 = x2009 * x284;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x2011 = x2002 + x2010;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x2012 = Fp(x1747.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x2013 = x2012 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2013);
          reg = x2013;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x2014 = Fp(x1749.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x2015 = x2014 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2015);
          reg = x2015;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2016 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x2016 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2017 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x2017 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2018 = x2016 * x2017;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2019 = x2018 * x282;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x2020 = x2011 + x2019;
      {
        // loc("zirgen/circuit/recursion/bits.cpp":31:33)
        auto x2021 = Fp(x1747.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":31:32)
        auto x2022 = x2021 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2022);
          reg = x2022;
        }
        // loc("zirgen/circuit/recursion/bits.cpp":32:33)
        auto x2023 = Fp(x1749.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/bits.cpp":32:32)
        auto x2024 = x2023 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2024);
          reg = x2024;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2025 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x2025 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/bits_b[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2026 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x2026 != Fp::invalid());
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2027 = x2025 * x2026;
      // loc("zirgen/circuit/recursion/bits.cpp":36:21)
      auto x2028 = x2027 * x280;
      // loc("zirgen/circuit/recursion/bits.cpp":36:14)
      auto x2029 = x2020 + x2028;
      if (x1737 != 0) {
        // loc("zirgen/circuit/recursion/bits.cpp":44:30)
        auto x2030 = x2029 * x306;
        // loc("zirgen/circuit/recursion/bits.cpp":44:30)
        auto x2031 = x2030 + x1889;
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1369);
          reg = x1369;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2031);
          reg = x2031;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x2032 = args[2][21 * steps + ((cycle - 0) & mask)];
          assert(x2032 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x2033 = args[2][22 * steps + ((cycle - 0) & mask)];
          assert(x2033 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x2034 = args[2][23 * steps + ((cycle - 0) & mask)];
          assert(x2034 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x2035 = args[2][24 * steps + ((cycle - 0) & mask)];
          assert(x2035 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x2036 = args[2][25 * steps + ((cycle - 0) & mask)];
          assert(x2036 != Fp::invalid());
          host_args.at(0) = x2032;
          host_args.at(1) = x2033;
          host_args.at(2) = x2034;
          host_args.at(3) = x2035;
          host_args.at(4) = x2036;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x2037 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x2037 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x2038 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x2038 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x2039 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x2039 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x2040 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x2040 != Fp::invalid());
        host_args.at(0) = x2037;
        host_args.at(1) = x2038;
        host_args.at(2) = x2039;
        host_args.at(3) = x2040;
        host(ctx, "log", "  AND Result = %e", host_args.data(), 4, host_outs.data(), 0);
      }
      // loc("zirgen/circuit/recursion/bits.cpp":47:27)
      auto x2041 = x318 - x1737;
      if (x2041 != 0) {
        // loc("zirgen/circuit/recursion/bits.cpp":50:19)
        auto x2042 = x1746 + x1748;
        // loc("zirgen/circuit/recursion/bits.cpp":50:53)
        auto x2043 = x1889 * x317;
        // loc("zirgen/circuit/recursion/bits.cpp":50:19)
        auto x2044 = x2042 - x2043;
        // loc("zirgen/circuit/recursion/bits.cpp":51:19)
        auto x2045 = x1747 + x1749;
        // loc("zirgen/circuit/recursion/bits.cpp":51:53)
        auto x2046 = x2029 * x317;
        // loc("zirgen/circuit/recursion/bits.cpp":51:19)
        auto x2047 = x2045 - x2046;
        // loc("zirgen/circuit/recursion/wom.cpp":89:3)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1369);
          reg = x1369;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2044);
          reg = x2044;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2047);
          reg = x2047;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        {
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
          auto x2048 = args[2][21 * steps + ((cycle - 0) & mask)];
          assert(x2048 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x2049 = args[2][22 * steps + ((cycle - 0) & mask)];
          assert(x2049 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x2050 = args[2][23 * steps + ((cycle - 0) & mask)];
          assert(x2050 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x2051 = args[2][24 * steps + ((cycle - 0) & mask)];
          assert(x2051 != Fp::invalid());
          // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
          auto x2052 = args[2][25 * steps + ((cycle - 0) & mask)];
          assert(x2052 != Fp::invalid());
          host_args.at(0) = x2048;
          host_args.at(1) = x2049;
          host_args.at(2) = x2050;
          host_args.at(3) = x2051;
          host_args.at(4) = x2052;
          host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x2053 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x2053 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x2054 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x2054 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x2055 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x2055 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x2056 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x2056 != Fp::invalid());
        host_args.at(0) = x2053;
        host_args.at(1) = x2054;
        host_args.at(2) = x2055;
        host_args.at(3) = x2056;
        host(ctx, "log", "  XOR Result = %e", host_args.data(), 4, host_outs.data(), 0);
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/sha_init(Reg)"("./zirgen/components/mux.h":49:25))
    auto x2057 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x2057 != Fp::invalid());
    if (x2057 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2058 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x2058 != Fp::invalid());
      {
        host_args.at(0) = x2058;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2059 = host_outs.at(0);
        auto x2060 = host_outs.at(1);
        auto x2061 = host_outs.at(2);
        auto x2062 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2059);
          reg = x2059;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2060);
          reg = x2060;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2061);
          reg = x2061;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2062);
          reg = x2062;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2058);
        reg = x2058;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2063 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x2063 != Fp::invalid());
      {
        host_args.at(0) = x2063;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2064 = host_outs.at(0);
        auto x2065 = host_outs.at(1);
        auto x2066 = host_outs.at(2);
        auto x2067 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2064);
          reg = x2064;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2065);
          reg = x2065;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2066);
          reg = x2066;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2067);
          reg = x2067;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2063);
        reg = x2063;
      }
      {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][101 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][102 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][103 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][104 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][105 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][106 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2068 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x2068 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2069 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x2069 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2070 = x2069 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2071 = x2068 + x2070;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2072 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x2072 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2073 = x2072 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2074 = x2071 + x2073;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2075 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x2075 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2076 = x2075 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2077 = x2074 + x2076;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2078 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x2078 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2079 = x2078 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2080 = x2077 + x2079;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2081 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x2081 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2082 = x2081 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2083 = x2080 + x2082;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2084 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x2084 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2085 = x2084 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2086 = x2083 + x2085;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2087 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x2087 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2088 = x2087 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2089 = x2086 + x2088;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2090 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x2090 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2091 = x2090 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2092 = x2089 + x2091;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2093 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x2093 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2094 = x2093 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2095 = x2092 + x2094;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2096 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x2096 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2097 = x2096 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2098 = x2095 + x2097;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2099 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x2099 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2100 = x2099 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2101 = x2098 + x2100;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2102 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x2102 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2103 = x2102 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2104 = x2101 + x2103;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2105 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x2105 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2106 = x2105 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2107 = x2104 + x2106;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2108 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x2108 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2109 = x2108 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2110 = x2107 + x2109;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2111 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x2111 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2112 = x2111 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2113 = x2110 + x2112;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2114 = x319 - x2113;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2115 = x2114 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2116 = Fp(x2115.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2116);
          reg = x2116;
        }
      }
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2117 = Fp(x2115.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2117);
          reg = x2117;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2118 = Fp(x2115.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2119 = x2118 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2119);
          reg = x2119;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2120 = Fp(x2115.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2121 = x2120 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2121);
          reg = x2121;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2122 = Fp(x2115.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2123 = x2122 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2123);
          reg = x2123;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2124 = Fp(x2115.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2125 = x2124 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2125);
          reg = x2125;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2126 = Fp(x2115.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2127 = x2126 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2127);
          reg = x2127;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2128 = Fp(x2115.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2129 = x2128 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2129);
          reg = x2129;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2130 = Fp(x2115.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2131 = x2130 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2131);
          reg = x2131;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2132 = Fp(x2115.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2133 = x2132 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2133);
          reg = x2133;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2134 = Fp(x2115.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2135 = x2134 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2135);
          reg = x2135;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2136 = Fp(x2115.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2137 = x2136 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2137);
          reg = x2137;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2138 = Fp(x2115.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2139 = x2138 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2139);
          reg = x2139;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2140 = Fp(x2115.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2141 = x2140 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2141);
          reg = x2141;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2142 = Fp(x2115.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2143 = x2142 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2143);
          reg = x2143;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2144 = Fp(x2115.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2145 = x2144 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2145);
          reg = x2145;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2146 = Fp(x2115.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2147 = x2146 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2147);
          reg = x2147;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2148 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x2148 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2149 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2149 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2150 = x2149 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2151 = x2148 + x2150;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2152 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2152 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2153 = x2152 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2154 = x2151 + x2153;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2155 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2155 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2156 = x2155 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2157 = x2154 + x2156;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2158 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2158 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2159 = x2158 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2160 = x2157 + x2159;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2161 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x2161 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2162 = x2161 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2163 = x2160 + x2162;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2164 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x2164 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2165 = x2164 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2166 = x2163 + x2165;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2167 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x2167 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2168 = x2167 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2169 = x2166 + x2168;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2170 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2170 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2171 = x2170 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2172 = x2169 + x2171;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2173 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2173 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2174 = x2173 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2175 = x2172 + x2174;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2176 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2176 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2177 = x2176 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2178 = x2175 + x2177;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2179 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2179 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2180 = x2179 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2181 = x2178 + x2180;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2182 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x2182 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2183 = x2182 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2184 = x2181 + x2183;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2185 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x2185 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2186 = x2185 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2187 = x2184 + x2186;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2188 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x2188 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2189 = x2188 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2190 = x2187 + x2189;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2191 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2191 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2192 = x2191 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2193 = x2190 + x2192;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2194 = x2115 - x2193;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2195 = x2194 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2196 = Fp(x2195.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2196);
          reg = x2196;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x2197 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x2197 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x2198 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x2198 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2199 = Fp(x2197.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2199);
          reg = x2199;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2200 = Fp(x2197.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2201 = x2200 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2201);
          reg = x2201;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2202 = Fp(x2197.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2203 = x2202 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2203);
          reg = x2203;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2204 = Fp(x2197.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2205 = x2204 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2205);
          reg = x2205;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2206 = Fp(x2197.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2207 = x2206 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2207);
          reg = x2207;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2208 = Fp(x2197.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2209 = x2208 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2209);
          reg = x2209;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2210 = Fp(x2197.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2211 = x2210 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2211);
          reg = x2211;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2212 = Fp(x2197.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2213 = x2212 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2213);
          reg = x2213;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2214 = Fp(x2197.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2215 = x2214 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2215);
          reg = x2215;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2216 = Fp(x2197.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2217 = x2216 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2217);
          reg = x2217;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2218 = Fp(x2197.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2219 = x2218 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2219);
          reg = x2219;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2220 = Fp(x2197.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2221 = x2220 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2221);
          reg = x2221;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2222 = Fp(x2197.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2223 = x2222 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2223);
          reg = x2223;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2224 = Fp(x2197.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2225 = x2224 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2225);
          reg = x2225;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2226 = Fp(x2197.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2227 = x2226 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2227);
          reg = x2227;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2228 = Fp(x2197.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2229 = x2228 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2229);
          reg = x2229;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2230 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2230 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2231 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2231 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2232 = x2231 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2233 = x2230 + x2232;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2234 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2234 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2235 = x2234 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2236 = x2233 + x2235;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2237 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2237 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2238 = x2237 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2239 = x2236 + x2238;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2240 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2240 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2241 = x2240 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2242 = x2239 + x2241;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2243 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2243 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2244 = x2243 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2245 = x2242 + x2244;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2246 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x2246 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2247 = x2246 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2248 = x2245 + x2247;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2249 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x2249 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2250 = x2249 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2251 = x2248 + x2250;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2252 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x2252 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2253 = x2252 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2254 = x2251 + x2253;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2255 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x2255 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2256 = x2255 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2257 = x2254 + x2256;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2258 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x2258 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2259 = x2258 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2260 = x2257 + x2259;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2261 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x2261 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2262 = x2261 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2263 = x2260 + x2262;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2264 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x2264 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2265 = x2264 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2266 = x2263 + x2265;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2267 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x2267 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2268 = x2267 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2269 = x2266 + x2268;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2270 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x2270 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2271 = x2270 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2272 = x2269 + x2271;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2273 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x2273 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2274 = x2273 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2275 = x2272 + x2274;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2276 = x2197 - x2275;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2277 = x2276 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2278 = Fp(x2277.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2278);
          reg = x2278;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x2279 = x2198 + x2277;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2280 = Fp(x2279.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2280);
          reg = x2280;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2281 = Fp(x2279.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2282 = x2281 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2282);
          reg = x2282;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2283 = Fp(x2279.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2284 = x2283 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2284);
          reg = x2284;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2285 = Fp(x2279.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2286 = x2285 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2286);
          reg = x2286;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2287 = Fp(x2279.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2288 = x2287 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2288);
          reg = x2288;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2289 = Fp(x2279.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2290 = x2289 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2290);
          reg = x2290;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2291 = Fp(x2279.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2292 = x2291 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2292);
          reg = x2292;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2293 = Fp(x2279.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2294 = x2293 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2294);
          reg = x2294;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2295 = Fp(x2279.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2296 = x2295 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2296);
          reg = x2296;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2297 = Fp(x2279.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2298 = x2297 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2298);
          reg = x2298;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2299 = Fp(x2279.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2300 = x2299 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2300);
          reg = x2300;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2301 = Fp(x2279.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2302 = x2301 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2302);
          reg = x2302;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2303 = Fp(x2279.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2304 = x2303 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2304);
          reg = x2304;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2305 = Fp(x2279.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2306 = x2305 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2306);
          reg = x2306;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2307 = Fp(x2279.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2308 = x2307 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2308);
          reg = x2308;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2309 = Fp(x2279.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2310 = x2309 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2310);
          reg = x2310;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2311 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x2311 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2312 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x2312 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2313 = x2312 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2314 = x2311 + x2313;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2315 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x2315 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2316 = x2315 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2317 = x2314 + x2316;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2318 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x2318 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2319 = x2318 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2320 = x2317 + x2319;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2321 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x2321 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2322 = x2321 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2323 = x2320 + x2322;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2324 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x2324 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2325 = x2324 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2326 = x2323 + x2325;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2327 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x2327 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2328 = x2327 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2329 = x2326 + x2328;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2330 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x2330 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2331 = x2330 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2332 = x2329 + x2331;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2333 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x2333 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2334 = x2333 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2335 = x2332 + x2334;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2336 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x2336 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2337 = x2336 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2338 = x2335 + x2337;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2339 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x2339 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2340 = x2339 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2341 = x2338 + x2340;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2342 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x2342 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2343 = x2342 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2344 = x2341 + x2343;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2345 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x2345 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2346 = x2345 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2347 = x2344 + x2346;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2348 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x2348 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2349 = x2348 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2350 = x2347 + x2349;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2351 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x2351 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2352 = x2351 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2353 = x2350 + x2352;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2354 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x2354 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2355 = x2354 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2356 = x2353 + x2355;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2357 = x2279 - x2356;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2358 = x2357 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2359 = Fp(x2358.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2359);
          reg = x2359;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x2360 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x2360 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x2361 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x2361 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2362 = Fp(x2360.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2362);
          reg = x2362;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2363 = Fp(x2360.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2364 = x2363 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2364);
          reg = x2364;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2365 = Fp(x2360.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2366 = x2365 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2366);
          reg = x2366;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2367 = Fp(x2360.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2368 = x2367 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2368);
          reg = x2368;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2369 = Fp(x2360.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2370 = x2369 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2370);
          reg = x2370;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2371 = Fp(x2360.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2372 = x2371 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2372);
          reg = x2372;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2373 = Fp(x2360.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2374 = x2373 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2374);
          reg = x2374;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2375 = Fp(x2360.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2376 = x2375 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2376);
          reg = x2376;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2377 = Fp(x2360.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2378 = x2377 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2378);
          reg = x2378;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2379 = Fp(x2360.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2380 = x2379 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2380);
          reg = x2380;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2381 = Fp(x2360.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2382 = x2381 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2382);
          reg = x2382;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2383 = Fp(x2360.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2384 = x2383 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2384);
          reg = x2384;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2385 = Fp(x2360.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2386 = x2385 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2386);
          reg = x2386;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2387 = Fp(x2360.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2388 = x2387 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2388);
          reg = x2388;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2389 = Fp(x2360.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2390 = x2389 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2390);
          reg = x2390;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2391 = Fp(x2360.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2392 = x2391 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2392);
          reg = x2392;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2393 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x2393 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2394 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x2394 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2395 = x2394 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2396 = x2393 + x2395;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2397 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x2397 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2398 = x2397 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2399 = x2396 + x2398;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2400 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x2400 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2401 = x2400 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2402 = x2399 + x2401;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2403 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x2403 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2404 = x2403 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2405 = x2402 + x2404;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2406 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x2406 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2407 = x2406 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2408 = x2405 + x2407;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2409 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x2409 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2410 = x2409 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2411 = x2408 + x2410;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2412 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x2412 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2413 = x2412 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2414 = x2411 + x2413;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2415 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x2415 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2416 = x2415 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2417 = x2414 + x2416;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2418 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x2418 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2419 = x2418 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2420 = x2417 + x2419;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2421 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x2421 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2422 = x2421 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2423 = x2420 + x2422;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2424 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x2424 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2425 = x2424 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2426 = x2423 + x2425;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2427 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x2427 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2428 = x2427 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2429 = x2426 + x2428;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2430 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x2430 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2431 = x2430 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2432 = x2429 + x2431;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2433 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x2433 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2434 = x2433 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2435 = x2432 + x2434;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2436 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x2436 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2437 = x2436 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2438 = x2435 + x2437;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2439 = x2360 - x2438;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2440 = x2439 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2441 = Fp(x2440.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2441);
          reg = x2441;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x2442 = x2361 + x2440;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2443 = Fp(x2442.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2443);
          reg = x2443;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2444 = Fp(x2442.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2445 = x2444 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2445);
          reg = x2445;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2446 = Fp(x2442.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2447 = x2446 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2447);
          reg = x2447;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2448 = Fp(x2442.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2449 = x2448 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2449);
          reg = x2449;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2450 = Fp(x2442.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2451 = x2450 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2451);
          reg = x2451;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2452 = Fp(x2442.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2453 = x2452 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2453);
          reg = x2453;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2454 = Fp(x2442.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2455 = x2454 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2455);
          reg = x2455;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2456 = Fp(x2442.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2457 = x2456 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2457);
          reg = x2457;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2458 = Fp(x2442.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2459 = x2458 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2459);
          reg = x2459;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2460 = Fp(x2442.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2461 = x2460 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2461);
          reg = x2461;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2462 = Fp(x2442.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2463 = x2462 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2463);
          reg = x2463;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2464 = Fp(x2442.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2465 = x2464 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2465);
          reg = x2465;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2466 = Fp(x2442.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2467 = x2466 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2467);
          reg = x2467;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2468 = Fp(x2442.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2469 = x2468 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2469);
          reg = x2469;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2470 = Fp(x2442.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2471 = x2470 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2471);
          reg = x2471;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2472 = Fp(x2442.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2473 = x2472 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2473);
          reg = x2473;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2474 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x2474 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2475 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x2475 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2476 = x2475 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2477 = x2474 + x2476;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2478 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2478 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2479 = x2478 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2480 = x2477 + x2479;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2481 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2481 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2482 = x2481 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2483 = x2480 + x2482;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2484 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2484 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2485 = x2484 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2486 = x2483 + x2485;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2487 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2487 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2488 = x2487 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2489 = x2486 + x2488;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2490 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2490 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2491 = x2490 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2492 = x2489 + x2491;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2493 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2493 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2494 = x2493 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2495 = x2492 + x2494;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2496 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2496 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2497 = x2496 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2498 = x2495 + x2497;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2499 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2499 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2500 = x2499 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2501 = x2498 + x2500;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2502 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2502 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2503 = x2502 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2504 = x2501 + x2503;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2505 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2505 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2506 = x2505 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2507 = x2504 + x2506;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2508 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x2508 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2509 = x2508 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2510 = x2507 + x2509;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2511 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x2511 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2512 = x2511 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2513 = x2510 + x2512;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2514 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x2514 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2515 = x2514 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2516 = x2513 + x2515;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2517 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x2517 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2518 = x2517 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2519 = x2516 + x2518;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2520 = x2442 - x2519;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2521 = x2520 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2522 = Fp(x2521.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2522);
          reg = x2522;
        }
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/sha_fini(Reg)"("./zirgen/components/mux.h":49:25))
    auto x2523 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x2523 != Fp::invalid());
    if (x2523 != 0) {
      {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][101 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][102 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][103 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][104 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][105 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][106 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2524 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x2524 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2525 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x2525 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2526 = x2525 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2527 = x2524 + x2526;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2528 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x2528 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2529 = x2528 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2530 = x2527 + x2529;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2531 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x2531 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2532 = x2531 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2533 = x2530 + x2532;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2534 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x2534 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2535 = x2534 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2536 = x2533 + x2535;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2537 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x2537 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2538 = x2537 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2539 = x2536 + x2538;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2540 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x2540 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2541 = x2540 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2542 = x2539 + x2541;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2543 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x2543 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2544 = x2543 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2545 = x2542 + x2544;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2546 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x2546 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2547 = x2546 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2548 = x2545 + x2547;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2549 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x2549 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2550 = x2549 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2551 = x2548 + x2550;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2552 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x2552 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2553 = x2552 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2554 = x2551 + x2553;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2555 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x2555 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2556 = x2555 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2557 = x2554 + x2556;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2558 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x2558 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2559 = x2558 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2560 = x2557 + x2559;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2561 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x2561 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2562 = x2561 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2563 = x2560 + x2562;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2564 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x2564 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2565 = x2564 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2566 = x2563 + x2565;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2567 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x2567 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2568 = x2567 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2569 = x2566 + x2568;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2570 = x319 - x2569;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2571 = x2570 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2572 = Fp(x2571.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2572);
          reg = x2572;
        }
      }
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2573 = Fp(x2571.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2573);
          reg = x2573;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2574 = Fp(x2571.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2575 = x2574 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2575);
          reg = x2575;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2576 = Fp(x2571.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2577 = x2576 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2577);
          reg = x2577;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2578 = Fp(x2571.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2579 = x2578 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2579);
          reg = x2579;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2580 = Fp(x2571.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2581 = x2580 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2581);
          reg = x2581;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2582 = Fp(x2571.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2583 = x2582 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2583);
          reg = x2583;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2584 = Fp(x2571.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2585 = x2584 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2585);
          reg = x2585;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2586 = Fp(x2571.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2587 = x2586 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2587);
          reg = x2587;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2588 = Fp(x2571.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2589 = x2588 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2589);
          reg = x2589;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2590 = Fp(x2571.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2591 = x2590 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2591);
          reg = x2591;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2592 = Fp(x2571.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2593 = x2592 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2593);
          reg = x2593;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2594 = Fp(x2571.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2595 = x2594 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2595);
          reg = x2595;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2596 = Fp(x2571.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2597 = x2596 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2597);
          reg = x2597;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2598 = Fp(x2571.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2599 = x2598 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2599);
          reg = x2599;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2600 = Fp(x2571.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2601 = x2600 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2601);
          reg = x2601;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2602 = Fp(x2571.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2603 = x2602 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2603);
          reg = x2603;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2604 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x2604 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2605 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2605 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2606 = x2605 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2607 = x2604 + x2606;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2608 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2608 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2609 = x2608 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2610 = x2607 + x2609;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2611 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2611 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2612 = x2611 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2613 = x2610 + x2612;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2614 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2614 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2615 = x2614 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2616 = x2613 + x2615;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2617 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x2617 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2618 = x2617 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2619 = x2616 + x2618;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2620 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x2620 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2621 = x2620 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2622 = x2619 + x2621;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2623 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x2623 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2624 = x2623 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2625 = x2622 + x2624;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2626 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2626 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2627 = x2626 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2628 = x2625 + x2627;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2629 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2629 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2630 = x2629 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2631 = x2628 + x2630;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2632 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2632 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2633 = x2632 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2634 = x2631 + x2633;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2635 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2635 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2636 = x2635 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2637 = x2634 + x2636;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2638 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x2638 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2639 = x2638 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2640 = x2637 + x2639;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2641 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x2641 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2642 = x2641 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2643 = x2640 + x2642;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2644 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x2644 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2645 = x2644 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2646 = x2643 + x2645;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2647 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2647 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2648 = x2647 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2649 = x2646 + x2648;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2650 = x2571 - x2649;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2651 = x2650 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2652 = Fp(x2651.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2652);
          reg = x2652;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2653 = args[2][26 * steps + ((cycle - 4) & mask)];
      assert(x2653 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2654 = args[2][27 * steps + ((cycle - 4) & mask)];
      assert(x2654 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2655 = args[2][28 * steps + ((cycle - 4) & mask)];
      assert(x2655 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2656 = args[2][29 * steps + ((cycle - 4) & mask)];
      assert(x2656 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2657 = args[2][30 * steps + ((cycle - 4) & mask)];
      assert(x2657 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2658 = args[2][31 * steps + ((cycle - 4) & mask)];
      assert(x2658 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2659 = args[2][32 * steps + ((cycle - 4) & mask)];
      assert(x2659 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2660 = args[2][33 * steps + ((cycle - 4) & mask)];
      assert(x2660 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2661 = args[2][34 * steps + ((cycle - 4) & mask)];
      assert(x2661 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2662 = args[2][35 * steps + ((cycle - 4) & mask)];
      assert(x2662 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2663 = args[2][36 * steps + ((cycle - 4) & mask)];
      assert(x2663 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2664 = args[2][37 * steps + ((cycle - 4) & mask)];
      assert(x2664 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2665 = args[2][38 * steps + ((cycle - 4) & mask)];
      assert(x2665 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2666 = args[2][39 * steps + ((cycle - 4) & mask)];
      assert(x2666 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2667 = args[2][40 * steps + ((cycle - 4) & mask)];
      assert(x2667 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2668 = args[2][41 * steps + ((cycle - 4) & mask)];
      assert(x2668 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2669 = args[2][42 * steps + ((cycle - 4) & mask)];
      assert(x2669 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2670 = args[2][43 * steps + ((cycle - 4) & mask)];
      assert(x2670 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2671 = args[2][44 * steps + ((cycle - 4) & mask)];
      assert(x2671 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2672 = args[2][45 * steps + ((cycle - 4) & mask)];
      assert(x2672 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2673 = args[2][46 * steps + ((cycle - 4) & mask)];
      assert(x2673 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2674 = args[2][47 * steps + ((cycle - 4) & mask)];
      assert(x2674 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2675 = args[2][48 * steps + ((cycle - 4) & mask)];
      assert(x2675 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2676 = args[2][49 * steps + ((cycle - 4) & mask)];
      assert(x2676 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2677 = args[2][50 * steps + ((cycle - 4) & mask)];
      assert(x2677 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2678 = args[2][51 * steps + ((cycle - 4) & mask)];
      assert(x2678 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2679 = args[2][52 * steps + ((cycle - 4) & mask)];
      assert(x2679 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2680 = args[2][53 * steps + ((cycle - 4) & mask)];
      assert(x2680 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2681 = args[2][54 * steps + ((cycle - 4) & mask)];
      assert(x2681 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2682 = args[2][55 * steps + ((cycle - 4) & mask)];
      assert(x2682 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2683 = args[2][56 * steps + ((cycle - 4) & mask)];
      assert(x2683 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2684 = args[2][57 * steps + ((cycle - 4) & mask)];
      assert(x2684 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2685 = x2654 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2686 = x2653 + x2685;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2687 = x2655 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2688 = x2686 + x2687;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2689 = x2656 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2690 = x2688 + x2689;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2691 = x2657 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2692 = x2690 + x2691;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2693 = x2658 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2694 = x2692 + x2693;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2695 = x2659 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2696 = x2694 + x2695;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2697 = x2660 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2698 = x2696 + x2697;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2699 = x2661 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2700 = x2698 + x2699;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2701 = x2662 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2702 = x2700 + x2701;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2703 = x2663 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2704 = x2702 + x2703;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2705 = x2664 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2706 = x2704 + x2705;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2707 = x2665 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2708 = x2706 + x2707;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2709 = x2666 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2710 = x2708 + x2709;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2711 = x2667 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2712 = x2710 + x2711;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2713 = x2668 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2714 = x2712 + x2713;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2715 = x2670 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2716 = x2669 + x2715;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2717 = x2671 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2718 = x2716 + x2717;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2719 = x2672 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2720 = x2718 + x2719;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2721 = x2673 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2722 = x2720 + x2721;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2723 = x2674 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2724 = x2722 + x2723;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2725 = x2675 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2726 = x2724 + x2725;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2727 = x2676 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2728 = x2726 + x2727;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2729 = x2677 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2730 = x2728 + x2729;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2731 = x2678 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2732 = x2730 + x2731;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2733 = x2679 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2734 = x2732 + x2733;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2735 = x2680 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2736 = x2734 + x2735;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2737 = x2681 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2738 = x2736 + x2737;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2739 = x2682 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2740 = x2738 + x2739;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2741 = x2683 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2742 = x2740 + x2741;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2743 = x2684 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2744 = x2742 + x2743;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2745 = args[2][26 * steps + ((cycle - 68) & mask)];
      assert(x2745 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2746 = args[2][27 * steps + ((cycle - 68) & mask)];
      assert(x2746 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2747 = args[2][28 * steps + ((cycle - 68) & mask)];
      assert(x2747 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2748 = args[2][29 * steps + ((cycle - 68) & mask)];
      assert(x2748 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2749 = args[2][30 * steps + ((cycle - 68) & mask)];
      assert(x2749 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2750 = args[2][31 * steps + ((cycle - 68) & mask)];
      assert(x2750 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2751 = args[2][32 * steps + ((cycle - 68) & mask)];
      assert(x2751 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2752 = args[2][33 * steps + ((cycle - 68) & mask)];
      assert(x2752 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2753 = args[2][34 * steps + ((cycle - 68) & mask)];
      assert(x2753 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2754 = args[2][35 * steps + ((cycle - 68) & mask)];
      assert(x2754 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2755 = args[2][36 * steps + ((cycle - 68) & mask)];
      assert(x2755 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2756 = args[2][37 * steps + ((cycle - 68) & mask)];
      assert(x2756 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2757 = args[2][38 * steps + ((cycle - 68) & mask)];
      assert(x2757 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2758 = args[2][39 * steps + ((cycle - 68) & mask)];
      assert(x2758 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2759 = args[2][40 * steps + ((cycle - 68) & mask)];
      assert(x2759 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2760 = args[2][41 * steps + ((cycle - 68) & mask)];
      assert(x2760 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2761 = args[2][42 * steps + ((cycle - 68) & mask)];
      assert(x2761 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2762 = args[2][43 * steps + ((cycle - 68) & mask)];
      assert(x2762 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2763 = args[2][44 * steps + ((cycle - 68) & mask)];
      assert(x2763 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2764 = args[2][45 * steps + ((cycle - 68) & mask)];
      assert(x2764 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2765 = args[2][46 * steps + ((cycle - 68) & mask)];
      assert(x2765 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2766 = args[2][47 * steps + ((cycle - 68) & mask)];
      assert(x2766 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2767 = args[2][48 * steps + ((cycle - 68) & mask)];
      assert(x2767 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2768 = args[2][49 * steps + ((cycle - 68) & mask)];
      assert(x2768 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2769 = args[2][50 * steps + ((cycle - 68) & mask)];
      assert(x2769 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2770 = args[2][51 * steps + ((cycle - 68) & mask)];
      assert(x2770 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2771 = args[2][52 * steps + ((cycle - 68) & mask)];
      assert(x2771 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2772 = args[2][53 * steps + ((cycle - 68) & mask)];
      assert(x2772 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2773 = args[2][54 * steps + ((cycle - 68) & mask)];
      assert(x2773 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2774 = args[2][55 * steps + ((cycle - 68) & mask)];
      assert(x2774 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2775 = args[2][56 * steps + ((cycle - 68) & mask)];
      assert(x2775 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2776 = args[2][57 * steps + ((cycle - 68) & mask)];
      assert(x2776 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2777 = x2746 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2778 = x2745 + x2777;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2779 = x2747 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2780 = x2778 + x2779;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2781 = x2748 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2782 = x2780 + x2781;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2783 = x2749 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2784 = x2782 + x2783;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2785 = x2750 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2786 = x2784 + x2785;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2787 = x2751 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2788 = x2786 + x2787;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2789 = x2752 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2790 = x2788 + x2789;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2791 = x2753 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2792 = x2790 + x2791;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2793 = x2754 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2794 = x2792 + x2793;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2795 = x2755 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2796 = x2794 + x2795;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2797 = x2756 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2798 = x2796 + x2797;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2799 = x2757 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2800 = x2798 + x2799;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2801 = x2758 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2802 = x2800 + x2801;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2803 = x2759 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2804 = x2802 + x2803;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2805 = x2760 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2806 = x2804 + x2805;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2807 = x2762 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2808 = x2761 + x2807;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2809 = x2763 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2810 = x2808 + x2809;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2811 = x2764 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2812 = x2810 + x2811;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2813 = x2765 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2814 = x2812 + x2813;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2815 = x2766 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2816 = x2814 + x2815;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2817 = x2767 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2818 = x2816 + x2817;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2819 = x2768 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2820 = x2818 + x2819;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2821 = x2769 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2822 = x2820 + x2821;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2823 = x2770 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2824 = x2822 + x2823;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2825 = x2771 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2826 = x2824 + x2825;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2827 = x2772 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2828 = x2826 + x2827;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2829 = x2773 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2830 = x2828 + x2829;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2831 = x2774 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2832 = x2830 + x2831;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2833 = x2775 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2834 = x2832 + x2833;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x2835 = x2776 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x2836 = x2834 + x2835;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x2837 = x2714 + x2806;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x2838 = x2744 + x2836;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2839 = Fp(x2837.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2839);
          reg = x2839;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2840 = Fp(x2837.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2841 = x2840 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2841);
          reg = x2841;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2842 = Fp(x2837.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2843 = x2842 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2843);
          reg = x2843;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2844 = Fp(x2837.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2845 = x2844 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2845);
          reg = x2845;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2846 = Fp(x2837.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2847 = x2846 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2848 = Fp(x2837.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2849 = x2848 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2849);
          reg = x2849;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2850 = Fp(x2837.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2851 = x2850 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2851);
          reg = x2851;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2852 = Fp(x2837.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2853 = x2852 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2853);
          reg = x2853;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2854 = Fp(x2837.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2855 = x2854 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2855);
          reg = x2855;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2856 = Fp(x2837.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2857 = x2856 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2857);
          reg = x2857;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2858 = Fp(x2837.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2859 = x2858 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2859);
          reg = x2859;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2860 = Fp(x2837.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2861 = x2860 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2861);
          reg = x2861;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2862 = Fp(x2837.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2863 = x2862 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2863);
          reg = x2863;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2864 = Fp(x2837.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2865 = x2864 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2865);
          reg = x2865;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2866 = Fp(x2837.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2867 = x2866 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2867);
          reg = x2867;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2868 = Fp(x2837.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2869 = x2868 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2869);
          reg = x2869;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2870 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2870 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2871 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2871 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2872 = x2871 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2873 = x2870 + x2872;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2874 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2874 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2875 = x2874 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2876 = x2873 + x2875;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2877 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2877 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2878 = x2877 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2879 = x2876 + x2878;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2880 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2880 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2881 = x2880 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2882 = x2879 + x2881;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2883 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2883 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2884 = x2883 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2885 = x2882 + x2884;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2886 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x2886 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2887 = x2886 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2888 = x2885 + x2887;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2889 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x2889 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2890 = x2889 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2891 = x2888 + x2890;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2892 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x2892 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2893 = x2892 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2894 = x2891 + x2893;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2895 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x2895 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2896 = x2895 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2897 = x2894 + x2896;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2898 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x2898 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2899 = x2898 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2900 = x2897 + x2899;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2901 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x2901 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2902 = x2901 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2903 = x2900 + x2902;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2904 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x2904 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2905 = x2904 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2906 = x2903 + x2905;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2907 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x2907 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2908 = x2907 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2909 = x2906 + x2908;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2910 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x2910 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2911 = x2910 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2912 = x2909 + x2911;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2913 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x2913 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2914 = x2913 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2915 = x2912 + x2914;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2916 = x2837 - x2915;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2917 = x2916 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x2918 = Fp(x2917.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2918);
          reg = x2918;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x2919 = x2838 + x2917;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2920 = Fp(x2919.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2920);
          reg = x2920;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2921 = Fp(x2919.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2922 = x2921 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2922);
          reg = x2922;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2923 = Fp(x2919.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2924 = x2923 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2924);
          reg = x2924;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2925 = Fp(x2919.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2926 = x2925 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2926);
          reg = x2926;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2927 = Fp(x2919.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2928 = x2927 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2928);
          reg = x2928;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2929 = Fp(x2919.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2930 = x2929 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2930);
          reg = x2930;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2931 = Fp(x2919.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2932 = x2931 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2932);
          reg = x2932;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2933 = Fp(x2919.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2934 = x2933 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2934);
          reg = x2934;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2935 = Fp(x2919.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2936 = x2935 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2936);
          reg = x2936;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2937 = Fp(x2919.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2938 = x2937 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2938);
          reg = x2938;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2939 = Fp(x2919.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2940 = x2939 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2940);
          reg = x2940;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2941 = Fp(x2919.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2942 = x2941 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2942);
          reg = x2942;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2943 = Fp(x2919.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2944 = x2943 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2944);
          reg = x2944;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2945 = Fp(x2919.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2946 = x2945 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2946);
          reg = x2946;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2947 = Fp(x2919.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2948 = x2947 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2948);
          reg = x2948;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x2949 = Fp(x2919.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x2950 = x2949 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2950);
          reg = x2950;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2951 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x2951 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2952 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x2952 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2953 = x2952 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2954 = x2951 + x2953;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2955 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x2955 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2956 = x2955 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2957 = x2954 + x2956;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2958 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x2958 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2959 = x2958 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2960 = x2957 + x2959;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2961 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x2961 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2962 = x2961 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2963 = x2960 + x2962;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2964 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x2964 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2965 = x2964 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2966 = x2963 + x2965;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2967 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x2967 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2968 = x2967 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2969 = x2966 + x2968;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2970 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x2970 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2971 = x2970 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2972 = x2969 + x2971;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2973 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x2973 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2974 = x2973 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2975 = x2972 + x2974;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2976 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x2976 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2977 = x2976 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2978 = x2975 + x2977;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2979 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x2979 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2980 = x2979 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2981 = x2978 + x2980;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2982 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x2982 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2983 = x2982 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2984 = x2981 + x2983;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2985 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x2985 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2986 = x2985 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2987 = x2984 + x2986;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2988 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x2988 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2989 = x2988 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2990 = x2987 + x2989;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2991 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x2991 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2992 = x2991 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2993 = x2990 + x2992;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2994 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x2994 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x2995 = x2994 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x2996 = x2993 + x2995;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x2997 = x2919 - x2996;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x2998 = x2997 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x2999 = Fp(x2998.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2999);
          reg = x2999;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3000 = args[2][60 * steps + ((cycle - 4) & mask)];
      assert(x3000 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3001 = args[2][61 * steps + ((cycle - 4) & mask)];
      assert(x3001 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3002 = args[2][62 * steps + ((cycle - 4) & mask)];
      assert(x3002 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3003 = args[2][63 * steps + ((cycle - 4) & mask)];
      assert(x3003 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3004 = args[2][64 * steps + ((cycle - 4) & mask)];
      assert(x3004 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3005 = args[2][65 * steps + ((cycle - 4) & mask)];
      assert(x3005 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3006 = args[2][66 * steps + ((cycle - 4) & mask)];
      assert(x3006 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3007 = args[2][67 * steps + ((cycle - 4) & mask)];
      assert(x3007 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3008 = args[2][68 * steps + ((cycle - 4) & mask)];
      assert(x3008 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3009 = args[2][69 * steps + ((cycle - 4) & mask)];
      assert(x3009 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3010 = args[2][70 * steps + ((cycle - 4) & mask)];
      assert(x3010 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3011 = args[2][71 * steps + ((cycle - 4) & mask)];
      assert(x3011 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3012 = args[2][72 * steps + ((cycle - 4) & mask)];
      assert(x3012 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3013 = args[2][73 * steps + ((cycle - 4) & mask)];
      assert(x3013 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3014 = args[2][74 * steps + ((cycle - 4) & mask)];
      assert(x3014 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3015 = args[2][75 * steps + ((cycle - 4) & mask)];
      assert(x3015 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3016 = args[2][76 * steps + ((cycle - 4) & mask)];
      assert(x3016 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3017 = args[2][77 * steps + ((cycle - 4) & mask)];
      assert(x3017 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3018 = args[2][78 * steps + ((cycle - 4) & mask)];
      assert(x3018 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3019 = args[2][79 * steps + ((cycle - 4) & mask)];
      assert(x3019 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3020 = args[2][80 * steps + ((cycle - 4) & mask)];
      assert(x3020 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3021 = args[2][81 * steps + ((cycle - 4) & mask)];
      assert(x3021 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3022 = args[2][82 * steps + ((cycle - 4) & mask)];
      assert(x3022 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3023 = args[2][83 * steps + ((cycle - 4) & mask)];
      assert(x3023 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3024 = args[2][84 * steps + ((cycle - 4) & mask)];
      assert(x3024 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3025 = args[2][85 * steps + ((cycle - 4) & mask)];
      assert(x3025 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3026 = args[2][86 * steps + ((cycle - 4) & mask)];
      assert(x3026 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3027 = args[2][87 * steps + ((cycle - 4) & mask)];
      assert(x3027 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3028 = args[2][88 * steps + ((cycle - 4) & mask)];
      assert(x3028 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3029 = args[2][89 * steps + ((cycle - 4) & mask)];
      assert(x3029 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3030 = args[2][90 * steps + ((cycle - 4) & mask)];
      assert(x3030 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3031 = args[2][91 * steps + ((cycle - 4) & mask)];
      assert(x3031 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3032 = x3001 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3033 = x3000 + x3032;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3034 = x3002 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3035 = x3033 + x3034;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3036 = x3003 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3037 = x3035 + x3036;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3038 = x3004 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3039 = x3037 + x3038;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3040 = x3005 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3041 = x3039 + x3040;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3042 = x3006 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3043 = x3041 + x3042;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3044 = x3007 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3045 = x3043 + x3044;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3046 = x3008 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3047 = x3045 + x3046;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3048 = x3009 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3049 = x3047 + x3048;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3050 = x3010 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3051 = x3049 + x3050;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3052 = x3011 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3053 = x3051 + x3052;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3054 = x3012 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3055 = x3053 + x3054;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3056 = x3013 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3057 = x3055 + x3056;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3058 = x3014 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3059 = x3057 + x3058;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3060 = x3015 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3061 = x3059 + x3060;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3062 = x3017 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3063 = x3016 + x3062;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3064 = x3018 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3065 = x3063 + x3064;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3066 = x3019 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3067 = x3065 + x3066;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3068 = x3020 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3069 = x3067 + x3068;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3070 = x3021 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3071 = x3069 + x3070;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3072 = x3022 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3073 = x3071 + x3072;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3074 = x3023 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3075 = x3073 + x3074;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3076 = x3024 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3077 = x3075 + x3076;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3078 = x3025 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3079 = x3077 + x3078;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3080 = x3026 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3081 = x3079 + x3080;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3082 = x3027 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3083 = x3081 + x3082;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3084 = x3028 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3085 = x3083 + x3084;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3086 = x3029 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3087 = x3085 + x3086;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3088 = x3030 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3089 = x3087 + x3088;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3090 = x3031 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3091 = x3089 + x3090;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3092 = args[2][60 * steps + ((cycle - 68) & mask)];
      assert(x3092 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3093 = args[2][61 * steps + ((cycle - 68) & mask)];
      assert(x3093 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3094 = args[2][62 * steps + ((cycle - 68) & mask)];
      assert(x3094 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3095 = args[2][63 * steps + ((cycle - 68) & mask)];
      assert(x3095 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3096 = args[2][64 * steps + ((cycle - 68) & mask)];
      assert(x3096 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3097 = args[2][65 * steps + ((cycle - 68) & mask)];
      assert(x3097 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3098 = args[2][66 * steps + ((cycle - 68) & mask)];
      assert(x3098 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3099 = args[2][67 * steps + ((cycle - 68) & mask)];
      assert(x3099 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3100 = args[2][68 * steps + ((cycle - 68) & mask)];
      assert(x3100 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3101 = args[2][69 * steps + ((cycle - 68) & mask)];
      assert(x3101 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3102 = args[2][70 * steps + ((cycle - 68) & mask)];
      assert(x3102 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3103 = args[2][71 * steps + ((cycle - 68) & mask)];
      assert(x3103 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3104 = args[2][72 * steps + ((cycle - 68) & mask)];
      assert(x3104 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3105 = args[2][73 * steps + ((cycle - 68) & mask)];
      assert(x3105 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3106 = args[2][74 * steps + ((cycle - 68) & mask)];
      assert(x3106 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3107 = args[2][75 * steps + ((cycle - 68) & mask)];
      assert(x3107 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3108 = args[2][76 * steps + ((cycle - 68) & mask)];
      assert(x3108 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3109 = args[2][77 * steps + ((cycle - 68) & mask)];
      assert(x3109 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3110 = args[2][78 * steps + ((cycle - 68) & mask)];
      assert(x3110 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3111 = args[2][79 * steps + ((cycle - 68) & mask)];
      assert(x3111 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3112 = args[2][80 * steps + ((cycle - 68) & mask)];
      assert(x3112 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3113 = args[2][81 * steps + ((cycle - 68) & mask)];
      assert(x3113 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3114 = args[2][82 * steps + ((cycle - 68) & mask)];
      assert(x3114 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3115 = args[2][83 * steps + ((cycle - 68) & mask)];
      assert(x3115 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3116 = args[2][84 * steps + ((cycle - 68) & mask)];
      assert(x3116 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3117 = args[2][85 * steps + ((cycle - 68) & mask)];
      assert(x3117 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3118 = args[2][86 * steps + ((cycle - 68) & mask)];
      assert(x3118 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3119 = args[2][87 * steps + ((cycle - 68) & mask)];
      assert(x3119 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3120 = args[2][88 * steps + ((cycle - 68) & mask)];
      assert(x3120 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3121 = args[2][89 * steps + ((cycle - 68) & mask)];
      assert(x3121 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3122 = args[2][90 * steps + ((cycle - 68) & mask)];
      assert(x3122 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3123 = args[2][91 * steps + ((cycle - 68) & mask)];
      assert(x3123 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3124 = x3093 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3125 = x3092 + x3124;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3126 = x3094 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3127 = x3125 + x3126;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3128 = x3095 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3129 = x3127 + x3128;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3130 = x3096 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3131 = x3129 + x3130;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3132 = x3097 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3133 = x3131 + x3132;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3134 = x3098 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3135 = x3133 + x3134;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3136 = x3099 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3137 = x3135 + x3136;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3138 = x3100 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3139 = x3137 + x3138;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3140 = x3101 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3141 = x3139 + x3140;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3142 = x3102 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3143 = x3141 + x3142;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3144 = x3103 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3145 = x3143 + x3144;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3146 = x3104 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3147 = x3145 + x3146;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3148 = x3105 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3149 = x3147 + x3148;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3150 = x3106 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3151 = x3149 + x3150;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3152 = x3107 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3153 = x3151 + x3152;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3154 = x3109 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3155 = x3108 + x3154;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3156 = x3110 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3157 = x3155 + x3156;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3158 = x3111 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3159 = x3157 + x3158;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3160 = x3112 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3161 = x3159 + x3160;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3162 = x3113 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3163 = x3161 + x3162;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3164 = x3114 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3165 = x3163 + x3164;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3166 = x3115 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3167 = x3165 + x3166;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3168 = x3116 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3169 = x3167 + x3168;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3170 = x3117 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3171 = x3169 + x3170;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3172 = x3118 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3173 = x3171 + x3172;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3174 = x3119 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3175 = x3173 + x3174;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3176 = x3120 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3177 = x3175 + x3176;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3178 = x3121 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3179 = x3177 + x3178;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3180 = x3122 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3181 = x3179 + x3180;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x3182 = x3123 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x3183 = x3181 + x3182;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x3184 = x3061 + x3153;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x3185 = x3091 + x3183;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3186 = Fp(x3184.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3186);
          reg = x3186;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3187 = Fp(x3184.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3188 = x3187 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3188);
          reg = x3188;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3189 = Fp(x3184.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3190 = x3189 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3190);
          reg = x3190;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3191 = Fp(x3184.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3192 = x3191 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3192);
          reg = x3192;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3193 = Fp(x3184.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3194 = x3193 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3194);
          reg = x3194;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3195 = Fp(x3184.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3196 = x3195 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3196);
          reg = x3196;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3197 = Fp(x3184.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3198 = x3197 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3198);
          reg = x3198;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3199 = Fp(x3184.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3200 = x3199 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3200);
          reg = x3200;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3201 = Fp(x3184.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3202 = x3201 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3202);
          reg = x3202;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3203 = Fp(x3184.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3204 = x3203 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3204);
          reg = x3204;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3205 = Fp(x3184.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3206 = x3205 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3206);
          reg = x3206;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3207 = Fp(x3184.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3208 = x3207 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3208);
          reg = x3208;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3209 = Fp(x3184.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3210 = x3209 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3210);
          reg = x3210;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3211 = Fp(x3184.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3212 = x3211 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3212);
          reg = x3212;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3213 = Fp(x3184.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3214 = x3213 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3214);
          reg = x3214;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3215 = Fp(x3184.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3216 = x3215 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3216);
          reg = x3216;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3217 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x3217 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3218 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x3218 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3219 = x3218 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3220 = x3217 + x3219;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3221 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x3221 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3222 = x3221 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3223 = x3220 + x3222;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3224 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x3224 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3225 = x3224 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3226 = x3223 + x3225;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3227 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x3227 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3228 = x3227 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3229 = x3226 + x3228;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3230 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x3230 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3231 = x3230 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3232 = x3229 + x3231;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3233 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x3233 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3234 = x3233 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3235 = x3232 + x3234;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3236 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x3236 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3237 = x3236 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3238 = x3235 + x3237;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3239 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x3239 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3240 = x3239 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3241 = x3238 + x3240;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3242 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x3242 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3243 = x3242 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3244 = x3241 + x3243;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3245 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x3245 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3246 = x3245 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3247 = x3244 + x3246;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3248 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x3248 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3249 = x3248 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3250 = x3247 + x3249;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3251 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3251 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3252 = x3251 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3253 = x3250 + x3252;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3254 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3254 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3255 = x3254 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3256 = x3253 + x3255;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3257 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x3257 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3258 = x3257 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3259 = x3256 + x3258;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3260 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x3260 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3261 = x3260 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3262 = x3259 + x3261;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x3263 = x3184 - x3262;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x3264 = x3263 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x3265 = Fp(x3264.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3265);
          reg = x3265;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x3266 = x3185 + x3264;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3267 = Fp(x3266.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3267);
          reg = x3267;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3268 = Fp(x3266.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3269 = x3268 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3269);
          reg = x3269;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3270 = Fp(x3266.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3271 = x3270 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3271);
          reg = x3271;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3272 = Fp(x3266.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3273 = x3272 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3273);
          reg = x3273;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3274 = Fp(x3266.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3275 = x3274 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3275);
          reg = x3275;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3276 = Fp(x3266.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3277 = x3276 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3277);
          reg = x3277;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3278 = Fp(x3266.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3279 = x3278 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3279);
          reg = x3279;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3280 = Fp(x3266.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3281 = x3280 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3281);
          reg = x3281;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3282 = Fp(x3266.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3283 = x3282 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3283);
          reg = x3283;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3284 = Fp(x3266.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3285 = x3284 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3285);
          reg = x3285;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3286 = Fp(x3266.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3287 = x3286 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3287);
          reg = x3287;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3288 = Fp(x3266.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3289 = x3288 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3289);
          reg = x3289;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3290 = Fp(x3266.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3291 = x3290 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3291);
          reg = x3291;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3292 = Fp(x3266.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3293 = x3292 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3293);
          reg = x3293;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3294 = Fp(x3266.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3295 = x3294 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3295);
          reg = x3295;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x3296 = Fp(x3266.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x3297 = x3296 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3297);
          reg = x3297;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3298 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3298 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3299 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3299 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3300 = x3299 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3301 = x3298 + x3300;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3302 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3302 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3303 = x3302 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3304 = x3301 + x3303;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3305 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3305 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3306 = x3305 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3307 = x3304 + x3306;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3308 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3308 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3309 = x3308 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3310 = x3307 + x3309;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3311 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3311 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3312 = x3311 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3313 = x3310 + x3312;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3314 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3314 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3315 = x3314 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3316 = x3313 + x3315;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3317 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3317 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3318 = x3317 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3319 = x3316 + x3318;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3320 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3320 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3321 = x3320 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3322 = x3319 + x3321;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3323 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3323 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3324 = x3323 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3325 = x3322 + x3324;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3326 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3326 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3327 = x3326 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3328 = x3325 + x3327;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3329 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3329 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3330 = x3329 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3331 = x3328 + x3330;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3332 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3332 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3333 = x3332 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3334 = x3331 + x3333;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3335 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3335 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3336 = x3335 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3337 = x3334 + x3336;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3338 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x3338 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3339 = x3338 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3340 = x3337 + x3339;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3341 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x3341 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x3342 = x3341 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x3343 = x3340 + x3342;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x3344 = x3266 - x3343;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x3345 = x3344 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x3346 = Fp(x3345.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3346);
          reg = x3346;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3347 = x2895 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3348 = x2892 + x3347;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3349 = x2898 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3350 = x3348 + x3349;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3351 = x2901 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3352 = x3350 + x3351;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3353 = x2904 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3354 = x3352 + x3353;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3355 = x2907 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3356 = x3354 + x3355;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3357 = x2910 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3358 = x3356 + x3357;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3359 = x2913 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3360 = x3358 + x3359;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3361 = x2976 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3362 = x2973 + x3361;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3363 = x2979 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3364 = x3362 + x3363;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3365 = x2982 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3366 = x3364 + x3365;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3367 = x2985 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3368 = x3366 + x3367;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3369 = x2988 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3370 = x3368 + x3369;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3371 = x2991 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3372 = x3370 + x3371;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3373 = x2994 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3374 = x3372 + x3373;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3375 = x3242 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3376 = x3239 + x3375;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3377 = x3245 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3378 = x3376 + x3377;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3379 = x3248 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3380 = x3378 + x3379;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3381 = x3251 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3382 = x3380 + x3381;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3383 = x3254 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3384 = x3382 + x3383;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3385 = x3257 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3386 = x3384 + x3385;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3387 = x3260 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3388 = x3386 + x3387;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3389 = x3323 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3390 = x3320 + x3389;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3391 = x3326 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3392 = x3390 + x3391;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3393 = x3329 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3394 = x3392 + x3393;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3395 = x3332 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3396 = x3394 + x3395;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3397 = x3335 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3398 = x3396 + x3397;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3399 = x3338 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3400 = x3398 + x3399;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3401 = x3341 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3402 = x3400 + x3401;
      host_args.at(0) = x2891;
      host_args.at(1) = x3360;
      host_args.at(2) = x2972;
      host_args.at(3) = x3374;
      host_args.at(4) = x3238;
      host_args.at(5) = x3388;
      host_args.at(6) = x3319;
      host_args.at(7) = x3402;
      host(ctx, "log", "SHA_FINI: a = %w, e = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3403 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x3403 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":248:46)
      auto x3404 = x2972 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":248:36)
      auto x3405 = x3374 + x3404;
      // loc("zirgen/circuit/recursion/sha.cpp":248:71)
      auto x3406 = x2891 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":248:61)
      auto x3407 = x3360 + x3406;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3403);
        reg = x3403;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3405);
        reg = x3405;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3407);
        reg = x3407;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x3408 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x3408 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3409 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x3409 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3410 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x3410 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3411 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x3411 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3412 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x3412 != Fp::invalid());
        host_args.at(0) = x3408;
        host_args.at(1) = x3409;
        host_args.at(2) = x3410;
        host_args.at(3) = x3411;
        host_args.at(4) = x3412;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3413 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x3413 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":249:46)
      auto x3414 = x3319 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":249:36)
      auto x3415 = x3402 + x3414;
      // loc("zirgen/circuit/recursion/sha.cpp":249:71)
      auto x3416 = x3238 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":249:61)
      auto x3417 = x3388 + x3416;
      // loc("zirgen/circuit/recursion/wom.cpp":89:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3413);
        reg = x3413;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3415);
        reg = x3415;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3417);
        reg = x3417;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x3418 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x3418 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3419 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x3419 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3420 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x3420 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3421 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x3421 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3422 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x3422 != Fp::invalid());
        host_args.at(0) = x3418;
        host_args.at(1) = x3419;
        host_args.at(2) = x3420;
        host_args.at(3) = x3421;
        host_args.at(4) = x3422;
        host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/sha_load(Reg)"("./zirgen/components/mux.h":49:25))
    auto x3423 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x3423 != Fp::invalid());
    if (x3423 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3424 = args[0][17 * steps + ((cycle - 0) & mask)];
      assert(x3424 != Fp::invalid());
      {
        host_args.at(0) = x3424;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3425 = host_outs.at(0);
        auto x3426 = host_outs.at(1);
        auto x3427 = host_outs.at(2);
        auto x3428 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3425);
          reg = x3425;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3426);
          reg = x3426;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3427);
          reg = x3427;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3428);
          reg = x3428;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3424);
        reg = x3424;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3429 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x3429 != Fp::invalid());
      {
        host_args.at(0) = x3429;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3430 = host_outs.at(0);
        auto x3431 = host_outs.at(1);
        auto x3432 = host_outs.at(2);
        auto x3433 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3430);
          reg = x3430;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3431);
          reg = x3431;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3432);
          reg = x3432;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3433);
          reg = x3433;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3429);
        reg = x3429;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x3434 = args[0][19 * steps + ((cycle - 0) & mask)];
      assert(x3434 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":177:27)
      auto x3435 = x318 - x3434;
      if (x3435 != 0) {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3436 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x3436 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":179:15)
        auto x3437 = x3436 * x249;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3438 = Fp(x3437.asUInt32() & x318.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3438);
            reg = x3438;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3439 = Fp(x3437.asUInt32() & x317.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3440 = x3439 * x305;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3440);
            reg = x3440;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3441 = Fp(x3437.asUInt32() & x315.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3442 = x3441 * x304;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3442);
            reg = x3442;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3443 = Fp(x3437.asUInt32() & x311.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3444 = x3443 * x303;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3444);
            reg = x3444;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3445 = Fp(x3437.asUInt32() & x302.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3446 = x3445 * x301;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3446);
            reg = x3446;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3447 = Fp(x3437.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3448 = x3447 * x299;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3448);
            reg = x3448;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3449 = Fp(x3437.asUInt32() & x298.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3450 = x3449 * x297;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3450);
            reg = x3450;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3451 = Fp(x3437.asUInt32() & x296.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3452 = x3451 * x295;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3452);
            reg = x3452;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3453 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x3453 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3454 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x3454 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3455 = x3454 * x317;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3456 = x3453 + x3455;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3457 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x3457 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3458 = x3457 * x315;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3459 = x3456 + x3458;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3460 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x3460 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3461 = x3460 * x311;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3462 = x3459 + x3461;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3463 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x3463 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3464 = x3463 * x302;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3465 = x3462 + x3464;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3466 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x3466 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3467 = x3466 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3468 = x3465 + x3467;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3469 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x3469 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3470 = x3469 * x298;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3471 = x3468 + x3470;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3472 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x3472 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3473 = x3472 * x296;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3474 = x3471 + x3473;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3475 = x3437 - x3474;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3476 = x3475 * x293;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3477 = Fp(x3476.asUInt32() & x318.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3477);
            reg = x3477;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3478 = Fp(x3476.asUInt32() & x317.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3479 = x3478 * x305;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3479);
            reg = x3479;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3480 = Fp(x3476.asUInt32() & x315.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3481 = x3480 * x304;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3481);
            reg = x3481;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3482 = Fp(x3476.asUInt32() & x311.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3483 = x3482 * x303;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3483);
            reg = x3483;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3484 = Fp(x3476.asUInt32() & x302.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3485 = x3484 * x301;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3485);
            reg = x3485;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3486 = Fp(x3476.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3487 = x3486 * x299;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3487);
            reg = x3487;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3488 = Fp(x3476.asUInt32() & x298.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3489 = x3488 * x297;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3489);
            reg = x3489;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3490 = Fp(x3476.asUInt32() & x296.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3491 = x3490 * x295;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3491);
            reg = x3491;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3492 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x3492 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3493 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x3493 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3494 = x3493 * x317;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3495 = x3492 + x3494;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3496 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x3496 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3497 = x3496 * x315;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3498 = x3495 + x3497;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3499 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x3499 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3500 = x3499 * x311;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3501 = x3498 + x3500;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3502 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x3502 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3503 = x3502 * x302;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3504 = x3501 + x3503;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3505 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x3505 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3506 = x3505 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3507 = x3504 + x3506;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3508 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x3508 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3509 = x3508 * x298;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3510 = x3507 + x3509;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3511 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x3511 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3512 = x3511 * x296;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3513 = x3510 + x3512;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3514 = x3476 - x3513;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3515 = x3514 * x293;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3516 = Fp(x3515.asUInt32() & x318.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3516);
            reg = x3516;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3517 = Fp(x3515.asUInt32() & x317.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3518 = x3517 * x305;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3518);
            reg = x3518;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3519 = Fp(x3515.asUInt32() & x315.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3520 = x3519 * x304;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3520);
            reg = x3520;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3521 = Fp(x3515.asUInt32() & x311.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3522 = x3521 * x303;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3522);
            reg = x3522;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3523 = Fp(x3515.asUInt32() & x302.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3524 = x3523 * x301;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3524);
            reg = x3524;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3525 = Fp(x3515.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3526 = x3525 * x299;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3526);
            reg = x3526;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3527 = Fp(x3515.asUInt32() & x298.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3528 = x3527 * x297;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3528);
            reg = x3528;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3529 = Fp(x3515.asUInt32() & x296.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3530 = x3529 * x295;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3530);
            reg = x3530;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3531 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x3531 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3532 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x3532 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3533 = x3532 * x317;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3534 = x3531 + x3533;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3535 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x3535 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3536 = x3535 * x315;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3537 = x3534 + x3536;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3538 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x3538 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3539 = x3538 * x311;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3540 = x3537 + x3539;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3541 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x3541 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3542 = x3541 * x302;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3543 = x3540 + x3542;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3544 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x3544 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3545 = x3544 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3546 = x3543 + x3545;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3547 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x3547 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3548 = x3547 * x298;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3549 = x3546 + x3548;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3550 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x3550 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3551 = x3550 * x296;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3552 = x3549 + x3551;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3553 = x3515 - x3552;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3554 = x3553 * x293;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3555 = Fp(x3554.asUInt32() & x318.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3555);
            reg = x3555;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3556 = Fp(x3554.asUInt32() & x317.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3557 = x3556 * x305;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3557);
            reg = x3557;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3558 = Fp(x3554.asUInt32() & x315.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3559 = x3558 * x304;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3559);
            reg = x3559;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3560 = Fp(x3554.asUInt32() & x311.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3561 = x3560 * x303;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3561);
            reg = x3561;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3562 = Fp(x3554.asUInt32() & x302.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3563 = x3562 * x301;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3563);
            reg = x3563;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3564 = Fp(x3554.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3565 = x3564 * x299;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3565);
            reg = x3565;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3566 = Fp(x3554.asUInt32() & x298.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3567 = x3566 * x297;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3567);
            reg = x3567;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3568 = Fp(x3554.asUInt32() & x296.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3569 = x3568 * x295;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3569);
            reg = x3569;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3570 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x3570 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3571 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3571 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3572 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x3572 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3573 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x3573 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":193:14)
        auto x3574 = x3570 + x3571;
        // loc("zirgen/circuit/recursion/sha.cpp":193:14)
        auto x3575 = x3574 + x3572;
        // loc("zirgen/circuit/recursion/sha.cpp":193:14)
        auto x3576 = x3575 + x3573;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":202:25)
          auto x3577 = x3576 - x315;
          // loc("zirgen/circuit/recursion/sha.cpp":202:25)
          auto x3578 = (x3577 == 0) ? Fp(1) : Fp(0);
          if (x3578 != 0) {
            // loc("./zirgen/components/bits.h":68:23)
            {
              auto& reg = args[2][9 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x319);
              reg = x319;
            }
          }
          // loc("zirgen/circuit/recursion/sha.cpp":204:21)
          auto x3579 = x318 - x3578;
          if (x3579 != 0) {
            // loc("./zirgen/components/bits.h":68:23)
            {
              auto& reg = args[2][9 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3576);
              reg = x3576;
            }
          }
        }
      }
      if (x3434 != 0) {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3580 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x3580 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x3581 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x3581 != Fp::invalid());
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3582 = Fp(x3580.asUInt32() & x318.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3582);
            reg = x3582;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3583 = Fp(x3580.asUInt32() & x317.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3584 = x3583 * x305;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3584);
            reg = x3584;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3585 = Fp(x3580.asUInt32() & x315.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3586 = x3585 * x304;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3586);
            reg = x3586;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3587 = Fp(x3580.asUInt32() & x311.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3588 = x3587 * x303;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3588);
            reg = x3588;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3589 = Fp(x3580.asUInt32() & x302.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3590 = x3589 * x301;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3590);
            reg = x3590;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3591 = Fp(x3580.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3592 = x3591 * x299;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3592);
            reg = x3592;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3593 = Fp(x3580.asUInt32() & x298.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3594 = x3593 * x297;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3594);
            reg = x3594;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3595 = Fp(x3580.asUInt32() & x296.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3596 = x3595 * x295;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3596);
            reg = x3596;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3597 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x3597 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3598 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x3598 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3599 = x3598 * x317;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3600 = x3597 + x3599;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3601 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x3601 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3602 = x3601 * x315;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3603 = x3600 + x3602;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3604 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x3604 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3605 = x3604 * x311;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3606 = x3603 + x3605;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3607 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x3607 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3608 = x3607 * x302;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3609 = x3606 + x3608;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3610 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x3610 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3611 = x3610 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3612 = x3609 + x3611;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3613 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x3613 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3614 = x3613 * x298;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3615 = x3612 + x3614;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3616 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x3616 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3617 = x3616 * x296;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3618 = x3615 + x3617;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3619 = x3580 - x3618;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3620 = x3619 * x293;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3621 = Fp(x3620.asUInt32() & x318.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3621);
            reg = x3621;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3622 = Fp(x3620.asUInt32() & x317.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3623 = x3622 * x305;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3623);
            reg = x3623;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3624 = Fp(x3620.asUInt32() & x315.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3625 = x3624 * x304;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3625);
            reg = x3625;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3626 = Fp(x3620.asUInt32() & x311.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3627 = x3626 * x303;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3627);
            reg = x3627;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3628 = Fp(x3620.asUInt32() & x302.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3629 = x3628 * x301;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3629);
            reg = x3629;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3630 = Fp(x3620.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3631 = x3630 * x299;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3631);
            reg = x3631;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3632 = Fp(x3620.asUInt32() & x298.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3633 = x3632 * x297;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3633);
            reg = x3633;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3634 = Fp(x3620.asUInt32() & x296.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3635 = x3634 * x295;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3635);
            reg = x3635;
          }
        }
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3636 = Fp(x3581.asUInt32() & x318.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3636);
            reg = x3636;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3637 = Fp(x3581.asUInt32() & x317.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3638 = x3637 * x305;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3638);
            reg = x3638;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3639 = Fp(x3581.asUInt32() & x315.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3640 = x3639 * x304;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3640);
            reg = x3640;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3641 = Fp(x3581.asUInt32() & x311.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3642 = x3641 * x303;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3642);
            reg = x3642;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3643 = Fp(x3581.asUInt32() & x302.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3644 = x3643 * x301;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3644);
            reg = x3644;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3645 = Fp(x3581.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3646 = x3645 * x299;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3646);
            reg = x3646;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3647 = Fp(x3581.asUInt32() & x298.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3648 = x3647 * x297;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3648);
            reg = x3648;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3649 = Fp(x3581.asUInt32() & x296.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3650 = x3649 * x295;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3650);
            reg = x3650;
          }
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3651 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x3651 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3652 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x3652 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3653 = x3652 * x317;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3654 = x3651 + x3653;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3655 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x3655 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3656 = x3655 * x315;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3657 = x3654 + x3656;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3658 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x3658 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3659 = x3658 * x311;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3660 = x3657 + x3659;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3661 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x3661 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3662 = x3661 * x302;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3663 = x3660 + x3662;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3664 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x3664 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3665 = x3664 * x300;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3666 = x3663 + x3665;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3667 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x3667 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3668 = x3667 * x298;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3669 = x3666 + x3668;
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3670 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x3670 != Fp::invalid());
        // loc("zirgen/circuit/recursion/sha.cpp":104:17)
        auto x3671 = x3670 * x296;
        // loc("zirgen/circuit/recursion/sha.cpp":104:11)
        auto x3672 = x3669 + x3671;
        // loc("zirgen/circuit/recursion/sha.cpp":106:16)
        auto x3673 = x3581 - x3672;
        // loc("zirgen/circuit/recursion/sha.cpp":106:15)
        auto x3674 = x3673 * x293;
        {
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3675 = Fp(x3674.asUInt32() & x318.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3675);
            reg = x3675;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3676 = Fp(x3674.asUInt32() & x317.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3677 = x3676 * x305;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3677);
            reg = x3677;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3678 = Fp(x3674.asUInt32() & x315.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3679 = x3678 * x304;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3679);
            reg = x3679;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3680 = Fp(x3674.asUInt32() & x311.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3681 = x3680 * x303;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3681);
            reg = x3681;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3682 = Fp(x3674.asUInt32() & x302.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3683 = x3682 * x301;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3683);
            reg = x3683;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3684 = Fp(x3674.asUInt32() & x300.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3685 = x3684 * x299;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3685);
            reg = x3685;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3686 = Fp(x3674.asUInt32() & x298.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3687 = x3686 * x297;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3687);
            reg = x3687;
          }
          // loc("zirgen/circuit/recursion/sha.cpp":99:29)
          auto x3688 = Fp(x3674.asUInt32() & x296.asUInt32());
          // loc("zirgen/circuit/recursion/sha.cpp":99:28)
          auto x3689 = x3688 * x295;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3689);
            reg = x3689;
          }
        }
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3690 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x3690 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3691 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x3691 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3692 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x3692 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3693 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x3693 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3694 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x3694 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3695 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x3695 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3696 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x3696 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3697 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x3697 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3698 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x3698 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3699 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x3699 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3700 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x3700 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3701 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x3701 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3702 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x3702 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3703 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x3703 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3704 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x3704 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3705 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x3705 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3706 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x3706 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3707 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x3707 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3708 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3708 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3709 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3709 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3710 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x3710 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3711 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x3711 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3712 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x3712 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3713 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x3713 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3714 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3714 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3715 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3715 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3716 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3716 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3717 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3717 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3718 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3718 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3719 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x3719 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3720 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x3720 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3721 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3721 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3722 = x3691 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3723 = x3690 + x3722;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3724 = x3692 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3725 = x3723 + x3724;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3726 = x3693 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3727 = x3725 + x3726;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3728 = x3694 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3729 = x3727 + x3728;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3730 = x3695 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3731 = x3729 + x3730;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3732 = x3696 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3733 = x3731 + x3732;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3734 = x3697 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3735 = x3733 + x3734;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3736 = x3699 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3737 = x3698 + x3736;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3738 = x3700 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3739 = x3737 + x3738;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3740 = x3701 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3741 = x3739 + x3740;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3742 = x3702 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3743 = x3741 + x3742;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3744 = x3703 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3745 = x3743 + x3744;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3746 = x3704 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3747 = x3745 + x3746;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3748 = x3705 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3749 = x3747 + x3748;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3750 = x3707 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3751 = x3706 + x3750;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3752 = x3708 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3753 = x3751 + x3752;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3754 = x3709 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3755 = x3753 + x3754;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3756 = x3710 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3757 = x3755 + x3756;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3758 = x3711 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3759 = x3757 + x3758;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3760 = x3712 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3761 = x3759 + x3760;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3762 = x3713 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3763 = x3761 + x3762;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3764 = x3715 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3765 = x3714 + x3764;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3766 = x3716 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3767 = x3765 + x3766;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3768 = x3717 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3769 = x3767 + x3768;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3770 = x3718 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3771 = x3769 + x3770;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3772 = x3719 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3773 = x3771 + x3772;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3774 = x3720 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3775 = x3773 + x3774;
      // loc("zirgen/circuit/recursion/sha.cpp":115:21)
      auto x3776 = x3721 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":115:14)
      auto x3777 = x3775 + x3776;
      host_args.at(0) = x3735;
      host_args.at(1) = x3749;
      host_args.at(2) = x3763;
      host_args.at(3) = x3777;
      host(ctx, "log", "SHA_LOAD: w = %w", host_args.data(), 4, host_outs.data(), 0);
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3778 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x3778 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3779 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x3779 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3780 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x3780 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3781 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x3781 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3782 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x3782 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3783 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x3783 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3784 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x3784 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3785 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x3785 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3786 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x3786 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3787 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x3787 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3788 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x3788 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3789 = args[2][37 * steps + ((cycle - 1) & mask)];
      assert(x3789 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3790 = args[2][38 * steps + ((cycle - 1) & mask)];
      assert(x3790 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3791 = args[2][39 * steps + ((cycle - 1) & mask)];
      assert(x3791 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3792 = args[2][40 * steps + ((cycle - 1) & mask)];
      assert(x3792 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3793 = args[2][41 * steps + ((cycle - 1) & mask)];
      assert(x3793 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3794 = args[2][42 * steps + ((cycle - 1) & mask)];
      assert(x3794 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3795 = args[2][43 * steps + ((cycle - 1) & mask)];
      assert(x3795 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3796 = args[2][44 * steps + ((cycle - 1) & mask)];
      assert(x3796 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3797 = args[2][45 * steps + ((cycle - 1) & mask)];
      assert(x3797 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3798 = args[2][46 * steps + ((cycle - 1) & mask)];
      assert(x3798 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3799 = args[2][47 * steps + ((cycle - 1) & mask)];
      assert(x3799 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3800 = args[2][48 * steps + ((cycle - 1) & mask)];
      assert(x3800 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3801 = args[2][49 * steps + ((cycle - 1) & mask)];
      assert(x3801 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3802 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x3802 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3803 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x3803 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3804 = args[2][52 * steps + ((cycle - 1) & mask)];
      assert(x3804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3805 = args[2][53 * steps + ((cycle - 1) & mask)];
      assert(x3805 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3806 = args[2][54 * steps + ((cycle - 1) & mask)];
      assert(x3806 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3807 = args[2][55 * steps + ((cycle - 1) & mask)];
      assert(x3807 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3808 = args[2][56 * steps + ((cycle - 1) & mask)];
      assert(x3808 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3809 = args[2][57 * steps + ((cycle - 1) & mask)];
      assert(x3809 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3810 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x3810 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3811 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x3811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3812 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x3812 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3813 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x3813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3814 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x3814 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3815 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x3815 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3816 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x3816 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3817 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x3817 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3818 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x3818 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3819 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x3819 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3820 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x3820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3821 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x3821 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3822 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x3822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3823 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x3823 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3824 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x3824 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3825 = args[2][41 * steps + ((cycle - 2) & mask)];
      assert(x3825 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3826 = args[2][42 * steps + ((cycle - 2) & mask)];
      assert(x3826 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3827 = args[2][43 * steps + ((cycle - 2) & mask)];
      assert(x3827 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3828 = args[2][44 * steps + ((cycle - 2) & mask)];
      assert(x3828 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3829 = args[2][45 * steps + ((cycle - 2) & mask)];
      assert(x3829 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3830 = args[2][46 * steps + ((cycle - 2) & mask)];
      assert(x3830 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3831 = args[2][47 * steps + ((cycle - 2) & mask)];
      assert(x3831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3832 = args[2][48 * steps + ((cycle - 2) & mask)];
      assert(x3832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3833 = args[2][49 * steps + ((cycle - 2) & mask)];
      assert(x3833 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3834 = args[2][50 * steps + ((cycle - 2) & mask)];
      assert(x3834 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3835 = args[2][51 * steps + ((cycle - 2) & mask)];
      assert(x3835 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3836 = args[2][52 * steps + ((cycle - 2) & mask)];
      assert(x3836 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3837 = args[2][53 * steps + ((cycle - 2) & mask)];
      assert(x3837 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3838 = args[2][54 * steps + ((cycle - 2) & mask)];
      assert(x3838 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3839 = args[2][55 * steps + ((cycle - 2) & mask)];
      assert(x3839 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3840 = args[2][56 * steps + ((cycle - 2) & mask)];
      assert(x3840 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3841 = args[2][57 * steps + ((cycle - 2) & mask)];
      assert(x3841 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3842 = args[2][26 * steps + ((cycle - 3) & mask)];
      assert(x3842 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3843 = args[2][27 * steps + ((cycle - 3) & mask)];
      assert(x3843 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3844 = args[2][28 * steps + ((cycle - 3) & mask)];
      assert(x3844 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3845 = args[2][29 * steps + ((cycle - 3) & mask)];
      assert(x3845 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3846 = args[2][30 * steps + ((cycle - 3) & mask)];
      assert(x3846 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3847 = args[2][31 * steps + ((cycle - 3) & mask)];
      assert(x3847 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3848 = args[2][32 * steps + ((cycle - 3) & mask)];
      assert(x3848 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3849 = args[2][33 * steps + ((cycle - 3) & mask)];
      assert(x3849 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3850 = args[2][34 * steps + ((cycle - 3) & mask)];
      assert(x3850 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3851 = args[2][35 * steps + ((cycle - 3) & mask)];
      assert(x3851 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3852 = args[2][36 * steps + ((cycle - 3) & mask)];
      assert(x3852 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3853 = args[2][37 * steps + ((cycle - 3) & mask)];
      assert(x3853 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3854 = args[2][38 * steps + ((cycle - 3) & mask)];
      assert(x3854 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3855 = args[2][39 * steps + ((cycle - 3) & mask)];
      assert(x3855 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3856 = args[2][40 * steps + ((cycle - 3) & mask)];
      assert(x3856 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3857 = args[2][41 * steps + ((cycle - 3) & mask)];
      assert(x3857 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3858 = args[2][42 * steps + ((cycle - 3) & mask)];
      assert(x3858 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3859 = args[2][43 * steps + ((cycle - 3) & mask)];
      assert(x3859 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3860 = args[2][44 * steps + ((cycle - 3) & mask)];
      assert(x3860 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3861 = args[2][45 * steps + ((cycle - 3) & mask)];
      assert(x3861 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3862 = args[2][46 * steps + ((cycle - 3) & mask)];
      assert(x3862 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3863 = args[2][47 * steps + ((cycle - 3) & mask)];
      assert(x3863 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3864 = args[2][48 * steps + ((cycle - 3) & mask)];
      assert(x3864 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3865 = args[2][49 * steps + ((cycle - 3) & mask)];
      assert(x3865 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3866 = args[2][50 * steps + ((cycle - 3) & mask)];
      assert(x3866 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3867 = args[2][51 * steps + ((cycle - 3) & mask)];
      assert(x3867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3868 = args[2][52 * steps + ((cycle - 3) & mask)];
      assert(x3868 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3869 = args[2][53 * steps + ((cycle - 3) & mask)];
      assert(x3869 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3870 = args[2][54 * steps + ((cycle - 3) & mask)];
      assert(x3870 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3871 = args[2][55 * steps + ((cycle - 3) & mask)];
      assert(x3871 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3872 = args[2][56 * steps + ((cycle - 3) & mask)];
      assert(x3872 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3873 = args[2][57 * steps + ((cycle - 3) & mask)];
      assert(x3873 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3874 = args[2][26 * steps + ((cycle - 4) & mask)];
      assert(x3874 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3875 = args[2][27 * steps + ((cycle - 4) & mask)];
      assert(x3875 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3876 = args[2][28 * steps + ((cycle - 4) & mask)];
      assert(x3876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3877 = args[2][29 * steps + ((cycle - 4) & mask)];
      assert(x3877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3878 = args[2][30 * steps + ((cycle - 4) & mask)];
      assert(x3878 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3879 = args[2][31 * steps + ((cycle - 4) & mask)];
      assert(x3879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3880 = args[2][32 * steps + ((cycle - 4) & mask)];
      assert(x3880 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3881 = args[2][33 * steps + ((cycle - 4) & mask)];
      assert(x3881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3882 = args[2][34 * steps + ((cycle - 4) & mask)];
      assert(x3882 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3883 = args[2][35 * steps + ((cycle - 4) & mask)];
      assert(x3883 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3884 = args[2][36 * steps + ((cycle - 4) & mask)];
      assert(x3884 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3885 = args[2][37 * steps + ((cycle - 4) & mask)];
      assert(x3885 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3886 = args[2][38 * steps + ((cycle - 4) & mask)];
      assert(x3886 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3887 = args[2][39 * steps + ((cycle - 4) & mask)];
      assert(x3887 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3888 = args[2][40 * steps + ((cycle - 4) & mask)];
      assert(x3888 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3889 = args[2][41 * steps + ((cycle - 4) & mask)];
      assert(x3889 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3890 = args[2][42 * steps + ((cycle - 4) & mask)];
      assert(x3890 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3891 = args[2][43 * steps + ((cycle - 4) & mask)];
      assert(x3891 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3892 = args[2][44 * steps + ((cycle - 4) & mask)];
      assert(x3892 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3893 = args[2][45 * steps + ((cycle - 4) & mask)];
      assert(x3893 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3894 = args[2][46 * steps + ((cycle - 4) & mask)];
      assert(x3894 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3895 = args[2][47 * steps + ((cycle - 4) & mask)];
      assert(x3895 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3896 = args[2][48 * steps + ((cycle - 4) & mask)];
      assert(x3896 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3897 = args[2][49 * steps + ((cycle - 4) & mask)];
      assert(x3897 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3898 = args[2][50 * steps + ((cycle - 4) & mask)];
      assert(x3898 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3899 = args[2][51 * steps + ((cycle - 4) & mask)];
      assert(x3899 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3900 = args[2][52 * steps + ((cycle - 4) & mask)];
      assert(x3900 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3901 = args[2][53 * steps + ((cycle - 4) & mask)];
      assert(x3901 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3902 = args[2][54 * steps + ((cycle - 4) & mask)];
      assert(x3902 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3903 = args[2][55 * steps + ((cycle - 4) & mask)];
      assert(x3903 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3904 = args[2][56 * steps + ((cycle - 4) & mask)];
      assert(x3904 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3905 = args[2][57 * steps + ((cycle - 4) & mask)];
      assert(x3905 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3906 = args[2][60 * steps + ((cycle - 1) & mask)];
      assert(x3906 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3907 = args[2][61 * steps + ((cycle - 1) & mask)];
      assert(x3907 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3908 = args[2][62 * steps + ((cycle - 1) & mask)];
      assert(x3908 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3909 = args[2][63 * steps + ((cycle - 1) & mask)];
      assert(x3909 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3910 = args[2][64 * steps + ((cycle - 1) & mask)];
      assert(x3910 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3911 = args[2][65 * steps + ((cycle - 1) & mask)];
      assert(x3911 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3912 = args[2][66 * steps + ((cycle - 1) & mask)];
      assert(x3912 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3913 = args[2][67 * steps + ((cycle - 1) & mask)];
      assert(x3913 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3914 = args[2][68 * steps + ((cycle - 1) & mask)];
      assert(x3914 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3915 = args[2][69 * steps + ((cycle - 1) & mask)];
      assert(x3915 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3916 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x3916 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3917 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x3917 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3918 = args[2][72 * steps + ((cycle - 1) & mask)];
      assert(x3918 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3919 = args[2][73 * steps + ((cycle - 1) & mask)];
      assert(x3919 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3920 = args[2][74 * steps + ((cycle - 1) & mask)];
      assert(x3920 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3921 = args[2][75 * steps + ((cycle - 1) & mask)];
      assert(x3921 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3922 = args[2][76 * steps + ((cycle - 1) & mask)];
      assert(x3922 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3923 = args[2][77 * steps + ((cycle - 1) & mask)];
      assert(x3923 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3924 = args[2][78 * steps + ((cycle - 1) & mask)];
      assert(x3924 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3925 = args[2][79 * steps + ((cycle - 1) & mask)];
      assert(x3925 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3926 = args[2][80 * steps + ((cycle - 1) & mask)];
      assert(x3926 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3927 = args[2][81 * steps + ((cycle - 1) & mask)];
      assert(x3927 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3928 = args[2][82 * steps + ((cycle - 1) & mask)];
      assert(x3928 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3929 = args[2][83 * steps + ((cycle - 1) & mask)];
      assert(x3929 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3930 = args[2][84 * steps + ((cycle - 1) & mask)];
      assert(x3930 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3931 = args[2][85 * steps + ((cycle - 1) & mask)];
      assert(x3931 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3932 = args[2][86 * steps + ((cycle - 1) & mask)];
      assert(x3932 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3933 = args[2][87 * steps + ((cycle - 1) & mask)];
      assert(x3933 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3934 = args[2][88 * steps + ((cycle - 1) & mask)];
      assert(x3934 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3935 = args[2][89 * steps + ((cycle - 1) & mask)];
      assert(x3935 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3936 = args[2][90 * steps + ((cycle - 1) & mask)];
      assert(x3936 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3937 = args[2][91 * steps + ((cycle - 1) & mask)];
      assert(x3937 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3938 = args[2][60 * steps + ((cycle - 2) & mask)];
      assert(x3938 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3939 = args[2][61 * steps + ((cycle - 2) & mask)];
      assert(x3939 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3940 = args[2][62 * steps + ((cycle - 2) & mask)];
      assert(x3940 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3941 = args[2][63 * steps + ((cycle - 2) & mask)];
      assert(x3941 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3942 = args[2][64 * steps + ((cycle - 2) & mask)];
      assert(x3942 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3943 = args[2][65 * steps + ((cycle - 2) & mask)];
      assert(x3943 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3944 = args[2][66 * steps + ((cycle - 2) & mask)];
      assert(x3944 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3945 = args[2][67 * steps + ((cycle - 2) & mask)];
      assert(x3945 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3946 = args[2][68 * steps + ((cycle - 2) & mask)];
      assert(x3946 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3947 = args[2][69 * steps + ((cycle - 2) & mask)];
      assert(x3947 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3948 = args[2][70 * steps + ((cycle - 2) & mask)];
      assert(x3948 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3949 = args[2][71 * steps + ((cycle - 2) & mask)];
      assert(x3949 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3950 = args[2][72 * steps + ((cycle - 2) & mask)];
      assert(x3950 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3951 = args[2][73 * steps + ((cycle - 2) & mask)];
      assert(x3951 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3952 = args[2][74 * steps + ((cycle - 2) & mask)];
      assert(x3952 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3953 = args[2][75 * steps + ((cycle - 2) & mask)];
      assert(x3953 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3954 = args[2][76 * steps + ((cycle - 2) & mask)];
      assert(x3954 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3955 = args[2][77 * steps + ((cycle - 2) & mask)];
      assert(x3955 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3956 = args[2][78 * steps + ((cycle - 2) & mask)];
      assert(x3956 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3957 = args[2][79 * steps + ((cycle - 2) & mask)];
      assert(x3957 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3958 = args[2][80 * steps + ((cycle - 2) & mask)];
      assert(x3958 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3959 = args[2][81 * steps + ((cycle - 2) & mask)];
      assert(x3959 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3960 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x3960 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3961 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x3961 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3962 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x3962 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3963 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x3963 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3964 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x3964 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3965 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x3965 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3966 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x3966 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3967 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x3967 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3968 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x3968 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3969 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x3969 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3970 = args[2][60 * steps + ((cycle - 3) & mask)];
      assert(x3970 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3971 = args[2][61 * steps + ((cycle - 3) & mask)];
      assert(x3971 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3972 = args[2][62 * steps + ((cycle - 3) & mask)];
      assert(x3972 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3973 = args[2][63 * steps + ((cycle - 3) & mask)];
      assert(x3973 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3974 = args[2][64 * steps + ((cycle - 3) & mask)];
      assert(x3974 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3975 = args[2][65 * steps + ((cycle - 3) & mask)];
      assert(x3975 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3976 = args[2][66 * steps + ((cycle - 3) & mask)];
      assert(x3976 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3977 = args[2][67 * steps + ((cycle - 3) & mask)];
      assert(x3977 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3978 = args[2][68 * steps + ((cycle - 3) & mask)];
      assert(x3978 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3979 = args[2][69 * steps + ((cycle - 3) & mask)];
      assert(x3979 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3980 = args[2][70 * steps + ((cycle - 3) & mask)];
      assert(x3980 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3981 = args[2][71 * steps + ((cycle - 3) & mask)];
      assert(x3981 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3982 = args[2][72 * steps + ((cycle - 3) & mask)];
      assert(x3982 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3983 = args[2][73 * steps + ((cycle - 3) & mask)];
      assert(x3983 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3984 = args[2][74 * steps + ((cycle - 3) & mask)];
      assert(x3984 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3985 = args[2][75 * steps + ((cycle - 3) & mask)];
      assert(x3985 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3986 = args[2][76 * steps + ((cycle - 3) & mask)];
      assert(x3986 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3987 = args[2][77 * steps + ((cycle - 3) & mask)];
      assert(x3987 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3988 = args[2][78 * steps + ((cycle - 3) & mask)];
      assert(x3988 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3989 = args[2][79 * steps + ((cycle - 3) & mask)];
      assert(x3989 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3990 = args[2][80 * steps + ((cycle - 3) & mask)];
      assert(x3990 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3991 = args[2][81 * steps + ((cycle - 3) & mask)];
      assert(x3991 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3992 = args[2][82 * steps + ((cycle - 3) & mask)];
      assert(x3992 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3993 = args[2][83 * steps + ((cycle - 3) & mask)];
      assert(x3993 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3994 = args[2][84 * steps + ((cycle - 3) & mask)];
      assert(x3994 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3995 = args[2][85 * steps + ((cycle - 3) & mask)];
      assert(x3995 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3996 = args[2][86 * steps + ((cycle - 3) & mask)];
      assert(x3996 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3997 = args[2][87 * steps + ((cycle - 3) & mask)];
      assert(x3997 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3998 = args[2][88 * steps + ((cycle - 3) & mask)];
      assert(x3998 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3999 = args[2][89 * steps + ((cycle - 3) & mask)];
      assert(x3999 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4000 = args[2][90 * steps + ((cycle - 3) & mask)];
      assert(x4000 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4001 = args[2][91 * steps + ((cycle - 3) & mask)];
      assert(x4001 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4002 = args[2][60 * steps + ((cycle - 4) & mask)];
      assert(x4002 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4003 = args[2][61 * steps + ((cycle - 4) & mask)];
      assert(x4003 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4004 = args[2][62 * steps + ((cycle - 4) & mask)];
      assert(x4004 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4005 = args[2][63 * steps + ((cycle - 4) & mask)];
      assert(x4005 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4006 = args[2][64 * steps + ((cycle - 4) & mask)];
      assert(x4006 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4007 = args[2][65 * steps + ((cycle - 4) & mask)];
      assert(x4007 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4008 = args[2][66 * steps + ((cycle - 4) & mask)];
      assert(x4008 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4009 = args[2][67 * steps + ((cycle - 4) & mask)];
      assert(x4009 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4010 = args[2][68 * steps + ((cycle - 4) & mask)];
      assert(x4010 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4011 = args[2][69 * steps + ((cycle - 4) & mask)];
      assert(x4011 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4012 = args[2][70 * steps + ((cycle - 4) & mask)];
      assert(x4012 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4013 = args[2][71 * steps + ((cycle - 4) & mask)];
      assert(x4013 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4014 = args[2][72 * steps + ((cycle - 4) & mask)];
      assert(x4014 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4015 = args[2][73 * steps + ((cycle - 4) & mask)];
      assert(x4015 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4016 = args[2][74 * steps + ((cycle - 4) & mask)];
      assert(x4016 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4017 = args[2][75 * steps + ((cycle - 4) & mask)];
      assert(x4017 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4018 = args[2][76 * steps + ((cycle - 4) & mask)];
      assert(x4018 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4019 = args[2][77 * steps + ((cycle - 4) & mask)];
      assert(x4019 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4020 = args[2][78 * steps + ((cycle - 4) & mask)];
      assert(x4020 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4021 = args[2][79 * steps + ((cycle - 4) & mask)];
      assert(x4021 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4022 = args[2][80 * steps + ((cycle - 4) & mask)];
      assert(x4022 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4023 = args[2][81 * steps + ((cycle - 4) & mask)];
      assert(x4023 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4024 = args[2][82 * steps + ((cycle - 4) & mask)];
      assert(x4024 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4025 = args[2][83 * steps + ((cycle - 4) & mask)];
      assert(x4025 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4026 = args[2][84 * steps + ((cycle - 4) & mask)];
      assert(x4026 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4027 = args[2][85 * steps + ((cycle - 4) & mask)];
      assert(x4027 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4028 = args[2][86 * steps + ((cycle - 4) & mask)];
      assert(x4028 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4029 = args[2][87 * steps + ((cycle - 4) & mask)];
      assert(x4029 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4030 = args[2][88 * steps + ((cycle - 4) & mask)];
      assert(x4030 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4031 = args[2][89 * steps + ((cycle - 4) & mask)];
      assert(x4031 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4032 = args[2][90 * steps + ((cycle - 4) & mask)];
      assert(x4032 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4033 = args[2][91 * steps + ((cycle - 4) & mask)];
      assert(x4033 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x4034 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4034 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x4035 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4035 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4036 = x3791 + x3800;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4037 = x3791 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4038 = x4037 * x3800;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4039 = x4036 - x4038;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4040 = x3792 + x3801;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4041 = x3792 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4042 = x4041 * x3801;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4043 = x4040 - x4042;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4044 = x3793 + x3802;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4045 = x3793 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4046 = x4045 * x3802;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4047 = x4044 - x4046;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4048 = x3794 + x3803;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4049 = x3794 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4050 = x4049 * x3803;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4051 = x4048 - x4050;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4052 = x3795 + x3804;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4053 = x3795 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4054 = x4053 * x3804;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4055 = x4052 - x4054;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4056 = x3796 + x3805;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4057 = x3796 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4058 = x4057 * x3805;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4059 = x4056 - x4058;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4060 = x3797 + x3806;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4061 = x3797 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4062 = x4061 * x3806;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4063 = x4060 - x4062;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4064 = x3798 + x3807;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4065 = x3798 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4066 = x4065 * x3807;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4067 = x4064 - x4066;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4068 = x3799 + x3808;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4069 = x3799 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4070 = x4069 * x3808;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4071 = x4068 - x4070;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4072 = x3800 + x3809;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4073 = x3800 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4074 = x4073 * x3809;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4075 = x4072 - x4074;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4076 = x3801 + x3778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4077 = x3801 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4078 = x4077 * x3778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4079 = x4076 - x4078;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4080 = x3802 + x3779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4081 = x3802 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4082 = x4081 * x3779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4083 = x4080 - x4082;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4084 = x3803 + x3780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4085 = x3803 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4086 = x4085 * x3780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4087 = x4084 - x4086;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4088 = x3804 + x3781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4089 = x3804 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4090 = x4089 * x3781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4091 = x4088 - x4090;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4092 = x3805 + x3782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4093 = x3805 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4094 = x4093 * x3782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4095 = x4092 - x4094;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4096 = x3806 + x3783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4097 = x3806 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4098 = x4097 * x3783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4099 = x4096 - x4098;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4100 = x3807 + x3784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4101 = x3807 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4102 = x4101 * x3784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4103 = x4100 - x4102;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4104 = x3808 + x3785;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4105 = x3808 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4106 = x4105 * x3785;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4107 = x4104 - x4106;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4108 = x3809 + x3786;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4109 = x3809 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4110 = x4109 * x3786;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4111 = x4108 - x4110;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4112 = x3778 + x3787;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4113 = x3778 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4114 = x4113 * x3787;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4115 = x4112 - x4114;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4116 = x3779 + x3788;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4117 = x3779 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4118 = x4117 * x3788;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4119 = x4116 - x4118;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4120 = x3780 + x3789;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4121 = x3780 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4122 = x4121 * x3789;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4123 = x4120 - x4122;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4124 = x3781 + x3790;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4125 = x3781 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4126 = x4125 * x3790;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4127 = x4124 - x4126;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4128 = x3782 + x3791;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4129 = x3782 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4130 = x4129 * x3791;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4131 = x4128 - x4130;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4132 = x3783 + x3792;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4133 = x3783 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4134 = x4133 * x3792;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4135 = x4132 - x4134;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4136 = x3784 + x3793;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4137 = x3784 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4138 = x4137 * x3793;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4139 = x4136 - x4138;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4140 = x3785 + x3794;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4141 = x3785 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4142 = x4141 * x3794;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4143 = x4140 - x4142;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4144 = x3786 + x3795;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4145 = x3786 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4146 = x4145 * x3795;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4147 = x4144 - x4146;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4148 = x3787 + x3796;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4149 = x3787 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4150 = x4149 * x3796;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4151 = x4148 - x4150;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4152 = x3788 + x3797;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4153 = x3788 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4154 = x4153 * x3797;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4155 = x4152 - x4154;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4156 = x3789 + x3798;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4157 = x3789 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4158 = x4157 * x3798;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4159 = x4156 - x4158;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4160 = x3790 + x3799;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4161 = x3790 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4162 = x4161 * x3799;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4163 = x4160 - x4162;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4164 = x3780 + x4039;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4165 = x4121 * x4039;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4166 = x4164 - x4165;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4167 = x3781 + x4043;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4168 = x4125 * x4043;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4169 = x4167 - x4168;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4170 = x3782 + x4047;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4171 = x4129 * x4047;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4172 = x4170 - x4171;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4173 = x3783 + x4051;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4174 = x4133 * x4051;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4175 = x4173 - x4174;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4176 = x3784 + x4055;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4177 = x4137 * x4055;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4178 = x4176 - x4177;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4179 = x3785 + x4059;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4180 = x4141 * x4059;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4181 = x4179 - x4180;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4182 = x3786 + x4063;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4183 = x4145 * x4063;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4184 = x4182 - x4183;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4185 = x3787 + x4067;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4186 = x4149 * x4067;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4187 = x4185 - x4186;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4188 = x3788 + x4071;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4189 = x4153 * x4071;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4190 = x4188 - x4189;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4191 = x3789 + x4075;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4192 = x4157 * x4075;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4193 = x4191 - x4192;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4194 = x3790 + x4079;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4195 = x4161 * x4079;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4196 = x4194 - x4195;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4197 = x3791 + x4083;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4198 = x4037 * x4083;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4199 = x4197 - x4198;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4200 = x3792 + x4087;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4201 = x4041 * x4087;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4202 = x4200 - x4201;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4203 = x3793 + x4091;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4204 = x4045 * x4091;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4205 = x4203 - x4204;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4206 = x3794 + x4095;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4207 = x4049 * x4095;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4208 = x4206 - x4207;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4209 = x3795 + x4099;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4210 = x4053 * x4099;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4211 = x4209 - x4210;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4212 = x3796 + x4103;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4213 = x4057 * x4103;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4214 = x4212 - x4213;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4215 = x3797 + x4107;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4216 = x4061 * x4107;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4217 = x4215 - x4216;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4218 = x3798 + x4111;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4219 = x4065 * x4111;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4220 = x4218 - x4219;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4221 = x3799 + x4115;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4222 = x4069 * x4115;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4223 = x4221 - x4222;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4224 = x3800 + x4119;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4225 = x4073 * x4119;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4226 = x4224 - x4225;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4227 = x3801 + x4123;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4228 = x4077 * x4123;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4229 = x4227 - x4228;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4230 = x3802 + x4127;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4231 = x4081 * x4127;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4232 = x4230 - x4231;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4233 = x3803 + x4131;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4234 = x4085 * x4131;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4235 = x4233 - x4234;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4236 = x3804 + x4135;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4237 = x4089 * x4135;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4238 = x4236 - x4237;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4239 = x3805 + x4139;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4240 = x4093 * x4139;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4241 = x4239 - x4240;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4242 = x3806 + x4143;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4243 = x4097 * x4143;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4244 = x4242 - x4243;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4245 = x3807 + x4147;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4246 = x4101 * x4147;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4247 = x4245 - x4246;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4248 = x3808 + x4151;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4249 = x4105 * x4151;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4250 = x4248 - x4249;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4251 = x3809 + x4155;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4252 = x4109 * x4155;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4253 = x4251 - x4252;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4254 = x3778 + x4159;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4255 = x4113 * x4159;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4256 = x4254 - x4255;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4257 = x3779 + x4163;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4258 = x4117 * x4163;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4259 = x4257 - x4258;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4260 = x3917 + x3931;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4261 = x3917 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4262 = x4261 * x3931;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4263 = x4260 - x4262;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4264 = x3918 + x3932;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4265 = x3918 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4266 = x4265 * x3932;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4267 = x4264 - x4266;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4268 = x3919 + x3933;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4269 = x3919 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4270 = x4269 * x3933;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4271 = x4268 - x4270;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4272 = x3920 + x3934;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4273 = x3920 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4274 = x4273 * x3934;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4275 = x4272 - x4274;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4276 = x3921 + x3935;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4277 = x3921 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4278 = x4277 * x3935;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4279 = x4276 - x4278;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4280 = x3922 + x3936;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4281 = x3922 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4282 = x4281 * x3936;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4283 = x4280 - x4282;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4284 = x3923 + x3937;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4285 = x3923 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4286 = x4285 * x3937;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4287 = x4284 - x4286;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4288 = x3924 + x3906;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4289 = x3924 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4290 = x4289 * x3906;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4291 = x4288 - x4290;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4292 = x3925 + x3907;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4293 = x3925 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4294 = x4293 * x3907;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4295 = x4292 - x4294;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4296 = x3926 + x3908;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4297 = x3926 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4298 = x4297 * x3908;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4299 = x4296 - x4298;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4300 = x3927 + x3909;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4301 = x3927 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4302 = x4301 * x3909;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4303 = x4300 - x4302;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4304 = x3928 + x3910;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4305 = x3928 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4306 = x4305 * x3910;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4307 = x4304 - x4306;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4308 = x3929 + x3911;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4309 = x3929 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4310 = x4309 * x3911;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4311 = x4308 - x4310;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4312 = x3930 + x3912;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4313 = x3930 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4314 = x4313 * x3912;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4315 = x4312 - x4314;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4316 = x3931 + x3913;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4317 = x3931 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4318 = x4317 * x3913;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4319 = x4316 - x4318;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4320 = x3932 + x3914;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4321 = x3932 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4322 = x4321 * x3914;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4323 = x4320 - x4322;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4324 = x3933 + x3915;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4325 = x3933 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4326 = x4325 * x3915;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4327 = x4324 - x4326;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4328 = x3934 + x3916;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4329 = x3934 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4330 = x4329 * x3916;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4331 = x4328 - x4330;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4332 = x3935 + x3917;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4333 = x3935 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4334 = x4333 * x3917;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4335 = x4332 - x4334;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4336 = x3936 + x3918;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4337 = x3936 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4338 = x4337 * x3918;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4339 = x4336 - x4338;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4340 = x3937 + x3919;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4341 = x3937 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4342 = x4341 * x3919;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4343 = x4340 - x4342;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4344 = x3906 + x3920;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4345 = x3906 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4346 = x4345 * x3920;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4347 = x4344 - x4346;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4348 = x3907 + x3921;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4349 = x3907 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4350 = x4349 * x3921;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4351 = x4348 - x4350;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4352 = x3908 + x3922;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4353 = x3908 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4354 = x4353 * x3922;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4355 = x4352 - x4354;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4356 = x3909 + x3923;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4357 = x3909 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4358 = x4357 * x3923;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4359 = x4356 - x4358;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4360 = x3910 + x3924;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4361 = x3910 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4362 = x4361 * x3924;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4363 = x4360 - x4362;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4364 = x3911 + x3925;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4365 = x3911 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4366 = x4365 * x3925;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4367 = x4364 - x4366;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4368 = x3912 + x3926;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4369 = x3912 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4370 = x4369 * x3926;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4371 = x4368 - x4370;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4372 = x3913 + x3927;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4373 = x3913 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4374 = x4373 * x3927;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4375 = x4372 - x4374;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4376 = x3914 + x3928;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4377 = x3914 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4378 = x4377 * x3928;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4379 = x4376 - x4378;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4380 = x3915 + x3929;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4381 = x3915 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4382 = x4381 * x3929;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4383 = x4380 - x4382;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4384 = x3916 + x3930;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4385 = x3916 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4386 = x4385 * x3930;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4387 = x4384 - x4386;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4388 = x3912 + x4263;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4389 = x4369 * x4263;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4390 = x4388 - x4389;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4391 = x3913 + x4267;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4392 = x4373 * x4267;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4393 = x4391 - x4392;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4394 = x3914 + x4271;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4395 = x4377 * x4271;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4396 = x4394 - x4395;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4397 = x3915 + x4275;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4398 = x4381 * x4275;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4399 = x4397 - x4398;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4400 = x3916 + x4279;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4401 = x4385 * x4279;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4402 = x4400 - x4401;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4403 = x3917 + x4283;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4404 = x4261 * x4283;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4405 = x4403 - x4404;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4406 = x3918 + x4287;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4407 = x4265 * x4287;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4408 = x4406 - x4407;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4409 = x3919 + x4291;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4410 = x4269 * x4291;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4411 = x4409 - x4410;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4412 = x3920 + x4295;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4413 = x4273 * x4295;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4414 = x4412 - x4413;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4415 = x3921 + x4299;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4416 = x4277 * x4299;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4417 = x4415 - x4416;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4418 = x3922 + x4303;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4419 = x4281 * x4303;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4420 = x4418 - x4419;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4421 = x3923 + x4307;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4422 = x4285 * x4307;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4423 = x4421 - x4422;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4424 = x3924 + x4311;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4425 = x4289 * x4311;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4426 = x4424 - x4425;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4427 = x3925 + x4315;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4428 = x4293 * x4315;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4429 = x4427 - x4428;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4430 = x3926 + x4319;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4431 = x4297 * x4319;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4432 = x4430 - x4431;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4433 = x3927 + x4323;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4434 = x4301 * x4323;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4435 = x4433 - x4434;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4436 = x3928 + x4327;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4437 = x4305 * x4327;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4438 = x4436 - x4437;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4439 = x3929 + x4331;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4440 = x4309 * x4331;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4441 = x4439 - x4440;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4442 = x3930 + x4335;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4443 = x4313 * x4335;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4444 = x4442 - x4443;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4445 = x3931 + x4339;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4446 = x4317 * x4339;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4447 = x4445 - x4446;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4448 = x3932 + x4343;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4449 = x4321 * x4343;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4450 = x4448 - x4449;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4451 = x3933 + x4347;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4452 = x4325 * x4347;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4453 = x4451 - x4452;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4454 = x3934 + x4351;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4455 = x4329 * x4351;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4456 = x4454 - x4455;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4457 = x3935 + x4355;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4458 = x4333 * x4355;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4459 = x4457 - x4458;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4460 = x3936 + x4359;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4461 = x4337 * x4359;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4462 = x4460 - x4461;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4463 = x3937 + x4363;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4464 = x4341 * x4363;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4465 = x4463 - x4464;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4466 = x3906 + x4367;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4467 = x4345 * x4367;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4468 = x4466 - x4467;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4469 = x3907 + x4371;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4470 = x4349 * x4371;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4471 = x4469 - x4470;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4472 = x3908 + x4375;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4473 = x4353 * x4375;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4474 = x4472 - x4473;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4475 = x3909 + x4379;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4476 = x4357 * x4379;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4477 = x4475 - x4476;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4478 = x3910 + x4383;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4479 = x4361 * x4383;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4480 = x4478 - x4479;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4481 = x3911 + x4387;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x4482 = x4365 * x4387;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x4483 = x4481 - x4482;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4484 = x3698 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4485 = x3735 + x4484;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4486 = x3699 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4487 = x4485 + x4486;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4488 = x3700 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4489 = x4487 + x4488;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4490 = x3701 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4491 = x4489 + x4490;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4492 = x3702 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4493 = x4491 + x4492;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4494 = x3703 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4495 = x4493 + x4494;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4496 = x3704 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4497 = x4495 + x4496;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4498 = x3705 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4499 = x4497 + x4498;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4500 = x3714 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4501 = x3763 + x4500;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4502 = x3715 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4503 = x4501 + x4502;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4504 = x3716 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4505 = x4503 + x4504;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4506 = x3717 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4507 = x4505 + x4506;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4508 = x3718 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4509 = x4507 + x4508;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4510 = x3719 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4511 = x4509 + x4510;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4512 = x3720 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4513 = x4511 + x4512;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4514 = x3721 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4515 = x4513 + x4514;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4516 = x4003 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4517 = x4002 + x4516;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4518 = x4004 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4519 = x4517 + x4518;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4520 = x4005 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4521 = x4519 + x4520;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4522 = x4006 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4523 = x4521 + x4522;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4524 = x4007 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4525 = x4523 + x4524;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4526 = x4008 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4527 = x4525 + x4526;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4528 = x4009 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4529 = x4527 + x4528;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4530 = x4010 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4531 = x4529 + x4530;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4532 = x4011 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4533 = x4531 + x4532;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4534 = x4012 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4535 = x4533 + x4534;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4536 = x4013 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4537 = x4535 + x4536;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4538 = x4014 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4539 = x4537 + x4538;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4540 = x4015 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4541 = x4539 + x4540;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4542 = x4016 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4543 = x4541 + x4542;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4544 = x4017 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4545 = x4543 + x4544;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4546 = x4019 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4547 = x4018 + x4546;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4548 = x4020 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4549 = x4547 + x4548;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4550 = x4021 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4551 = x4549 + x4550;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4552 = x4022 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4553 = x4551 + x4552;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4554 = x4023 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4555 = x4553 + x4554;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4556 = x4024 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4557 = x4555 + x4556;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4558 = x4025 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4559 = x4557 + x4558;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4560 = x4026 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4561 = x4559 + x4560;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4562 = x4027 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4563 = x4561 + x4562;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4564 = x4028 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4565 = x4563 + x4564;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4566 = x4029 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4567 = x4565 + x4566;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4568 = x4030 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4569 = x4567 + x4568;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4570 = x4031 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4571 = x4569 + x4570;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4572 = x4032 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4573 = x4571 + x4572;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4574 = x4033 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4575 = x4573 + x4574;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4576 = x3906 * x3938;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4577 = x318 - x3906;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4578 = x4577 * x3970;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4579 = x4576 + x4578;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4580 = x3907 * x3939;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4581 = x318 - x3907;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4582 = x4581 * x3971;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4583 = x4580 + x4582;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4584 = x3908 * x3940;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4585 = x318 - x3908;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4586 = x4585 * x3972;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4587 = x4584 + x4586;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4588 = x3909 * x3941;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4589 = x318 - x3909;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4590 = x4589 * x3973;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4591 = x4588 + x4590;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4592 = x3910 * x3942;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4593 = x318 - x3910;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4594 = x4593 * x3974;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4595 = x4592 + x4594;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4596 = x3911 * x3943;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4597 = x318 - x3911;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4598 = x4597 * x3975;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4599 = x4596 + x4598;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4600 = x3912 * x3944;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4601 = x318 - x3912;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4602 = x4601 * x3976;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4603 = x4600 + x4602;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4604 = x3913 * x3945;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4605 = x318 - x3913;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4606 = x4605 * x3977;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4607 = x4604 + x4606;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4608 = x3914 * x3946;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4609 = x318 - x3914;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4610 = x4609 * x3978;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4611 = x4608 + x4610;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4612 = x3915 * x3947;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4613 = x318 - x3915;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4614 = x4613 * x3979;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4615 = x4612 + x4614;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4616 = x3916 * x3948;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4617 = x318 - x3916;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4618 = x4617 * x3980;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4619 = x4616 + x4618;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4620 = x3917 * x3949;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4621 = x318 - x3917;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4622 = x4621 * x3981;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4623 = x4620 + x4622;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4624 = x3918 * x3950;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4625 = x318 - x3918;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4626 = x4625 * x3982;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4627 = x4624 + x4626;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4628 = x3919 * x3951;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4629 = x318 - x3919;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4630 = x4629 * x3983;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4631 = x4628 + x4630;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4632 = x3920 * x3952;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4633 = x318 - x3920;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4634 = x4633 * x3984;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4635 = x4632 + x4634;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4636 = x3921 * x3953;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4637 = x318 - x3921;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4638 = x4637 * x3985;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4639 = x4636 + x4638;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4640 = x3922 * x3954;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4641 = x318 - x3922;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4642 = x4641 * x3986;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4643 = x4640 + x4642;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4644 = x3923 * x3955;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4645 = x318 - x3923;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4646 = x4645 * x3987;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4647 = x4644 + x4646;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4648 = x3924 * x3956;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4649 = x318 - x3924;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4650 = x4649 * x3988;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4651 = x4648 + x4650;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4652 = x3925 * x3957;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4653 = x318 - x3925;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4654 = x4653 * x3989;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4655 = x4652 + x4654;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4656 = x3926 * x3958;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4657 = x318 - x3926;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4658 = x4657 * x3990;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4659 = x4656 + x4658;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4660 = x3927 * x3959;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4661 = x318 - x3927;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4662 = x4661 * x3991;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4663 = x4660 + x4662;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4664 = x3928 * x3960;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4665 = x318 - x3928;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4666 = x4665 * x3992;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4667 = x4664 + x4666;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4668 = x3929 * x3961;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4669 = x318 - x3929;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4670 = x4669 * x3993;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4671 = x4668 + x4670;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4672 = x3930 * x3962;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4673 = x318 - x3930;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4674 = x4673 * x3994;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4675 = x4672 + x4674;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4676 = x3931 * x3963;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4677 = x318 - x3931;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4678 = x4677 * x3995;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4679 = x4676 + x4678;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4680 = x3932 * x3964;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4681 = x318 - x3932;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4682 = x4681 * x3996;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4683 = x4680 + x4682;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4684 = x3933 * x3965;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4685 = x318 - x3933;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4686 = x4685 * x3997;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4687 = x4684 + x4686;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4688 = x3934 * x3966;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4689 = x318 - x3934;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4690 = x4689 * x3998;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4691 = x4688 + x4690;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4692 = x3935 * x3967;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4693 = x318 - x3935;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4694 = x4693 * x3999;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4695 = x4692 + x4694;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4696 = x3936 * x3968;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4697 = x318 - x3936;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4698 = x4697 * x4000;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4699 = x4696 + x4698;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4700 = x3937 * x3969;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x4701 = x318 - x3937;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x4702 = x4701 * x4001;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x4703 = x4700 + x4702;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4704 = x4583 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4705 = x4579 + x4704;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4706 = x4587 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4707 = x4705 + x4706;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4708 = x4591 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4709 = x4707 + x4708;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4710 = x4595 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4711 = x4709 + x4710;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4712 = x4599 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4713 = x4711 + x4712;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4714 = x4603 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4715 = x4713 + x4714;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4716 = x4607 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4717 = x4715 + x4716;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4718 = x4611 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4719 = x4717 + x4718;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4720 = x4615 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4721 = x4719 + x4720;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4722 = x4619 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4723 = x4721 + x4722;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4724 = x4623 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4725 = x4723 + x4724;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4726 = x4627 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4727 = x4725 + x4726;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4728 = x4631 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4729 = x4727 + x4728;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4730 = x4635 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4731 = x4729 + x4730;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4732 = x4639 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4733 = x4731 + x4732;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4734 = x4647 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4735 = x4643 + x4734;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4736 = x4651 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4737 = x4735 + x4736;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4738 = x4655 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4739 = x4737 + x4738;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4740 = x4659 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4741 = x4739 + x4740;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4742 = x4663 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4743 = x4741 + x4742;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4744 = x4667 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4745 = x4743 + x4744;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4746 = x4671 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4747 = x4745 + x4746;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4748 = x4675 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4749 = x4747 + x4748;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4750 = x4679 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4751 = x4749 + x4750;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4752 = x4683 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4753 = x4751 + x4752;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4754 = x4687 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4755 = x4753 + x4754;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4756 = x4691 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4757 = x4755 + x4756;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4758 = x4695 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4759 = x4757 + x4758;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4760 = x4699 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4761 = x4759 + x4760;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4762 = x4703 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4763 = x4761 + x4762;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4764 = x4393 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4765 = x4390 + x4764;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4766 = x4396 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4767 = x4765 + x4766;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4768 = x4399 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4769 = x4767 + x4768;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4770 = x4402 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4771 = x4769 + x4770;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4772 = x4405 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4773 = x4771 + x4772;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4774 = x4408 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4775 = x4773 + x4774;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4776 = x4411 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4777 = x4775 + x4776;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4778 = x4414 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4779 = x4777 + x4778;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4780 = x4417 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4781 = x4779 + x4780;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4782 = x4420 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4783 = x4781 + x4782;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4784 = x4423 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4785 = x4783 + x4784;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4786 = x4426 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4787 = x4785 + x4786;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4788 = x4429 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4789 = x4787 + x4788;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4790 = x4432 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4791 = x4789 + x4790;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4792 = x4435 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4793 = x4791 + x4792;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4794 = x4441 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4795 = x4438 + x4794;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4796 = x4444 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4797 = x4795 + x4796;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4798 = x4447 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4799 = x4797 + x4798;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4800 = x4450 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4801 = x4799 + x4800;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4802 = x4453 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4803 = x4801 + x4802;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4804 = x4456 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4805 = x4803 + x4804;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4806 = x4459 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4807 = x4805 + x4806;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4808 = x4462 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4809 = x4807 + x4808;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4810 = x4465 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4811 = x4809 + x4810;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4812 = x4468 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4813 = x4811 + x4812;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4814 = x4471 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4815 = x4813 + x4814;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4816 = x4474 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4817 = x4815 + x4816;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4818 = x4477 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4819 = x4817 + x4818;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4820 = x4480 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4821 = x4819 + x4820;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x4822 = x4483 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x4823 = x4821 + x4822;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4824 = x4733 + x4793;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4825 = x4763 + x4823;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4826 = x4545 + x4824;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4827 = x4575 + x4825;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4828 = x4034 + x4826;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4829 = x4035 + x4827;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4830 = x4499 + x4828;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x4831 = x4515 + x4829;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4832 = x3778 * x3810;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4833 = x318 - x3842;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4834 = x4832 * x4833;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4835 = x318 - x3810;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4836 = x3778 * x4835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4837 = x4836 * x3842;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4838 = x4834 + x4837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4839 = x318 - x3778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4840 = x4839 * x3810;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4841 = x4840 * x3842;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4842 = x4838 + x4841;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4843 = x4832 * x3842;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4844 = x4842 + x4843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4845 = x3779 * x3811;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4846 = x318 - x3843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4847 = x4845 * x4846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4848 = x318 - x3811;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4849 = x3779 * x4848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4850 = x4849 * x3843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4851 = x4847 + x4850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4852 = x318 - x3779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4853 = x4852 * x3811;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4854 = x4853 * x3843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4855 = x4851 + x4854;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4856 = x4845 * x3843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4857 = x4855 + x4856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4858 = x3780 * x3812;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4859 = x318 - x3844;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4860 = x4858 * x4859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4861 = x318 - x3812;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4862 = x3780 * x4861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4863 = x4862 * x3844;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4864 = x4860 + x4863;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4865 = x318 - x3780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4866 = x4865 * x3812;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4867 = x4866 * x3844;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4868 = x4864 + x4867;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4869 = x4858 * x3844;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4870 = x4868 + x4869;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4871 = x3781 * x3813;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4872 = x318 - x3845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4873 = x4871 * x4872;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4874 = x318 - x3813;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4875 = x3781 * x4874;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4876 = x4875 * x3845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4877 = x4873 + x4876;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4878 = x318 - x3781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4879 = x4878 * x3813;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4880 = x4879 * x3845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4881 = x4877 + x4880;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4882 = x4871 * x3845;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4883 = x4881 + x4882;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4884 = x3782 * x3814;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4885 = x318 - x3846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4886 = x4884 * x4885;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4887 = x318 - x3814;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4888 = x3782 * x4887;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4889 = x4888 * x3846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4890 = x4886 + x4889;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4891 = x318 - x3782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4892 = x4891 * x3814;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4893 = x4892 * x3846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4894 = x4890 + x4893;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4895 = x4884 * x3846;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4896 = x4894 + x4895;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4897 = x3783 * x3815;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4898 = x318 - x3847;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4899 = x4897 * x4898;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4900 = x318 - x3815;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4901 = x3783 * x4900;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4902 = x4901 * x3847;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4903 = x4899 + x4902;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4904 = x318 - x3783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4905 = x4904 * x3815;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4906 = x4905 * x3847;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4907 = x4903 + x4906;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4908 = x4897 * x3847;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4909 = x4907 + x4908;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4910 = x3784 * x3816;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4911 = x318 - x3848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4912 = x4910 * x4911;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4913 = x318 - x3816;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4914 = x3784 * x4913;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4915 = x4914 * x3848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4916 = x4912 + x4915;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4917 = x318 - x3784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4918 = x4917 * x3816;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4919 = x4918 * x3848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4920 = x4916 + x4919;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4921 = x4910 * x3848;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4922 = x4920 + x4921;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4923 = x3785 * x3817;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4924 = x318 - x3849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4925 = x4923 * x4924;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4926 = x318 - x3817;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4927 = x3785 * x4926;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4928 = x4927 * x3849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4929 = x4925 + x4928;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4930 = x318 - x3785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4931 = x4930 * x3817;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4932 = x4931 * x3849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4933 = x4929 + x4932;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4934 = x4923 * x3849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4935 = x4933 + x4934;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4936 = x3786 * x3818;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4937 = x318 - x3850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4938 = x4936 * x4937;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4939 = x318 - x3818;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4940 = x3786 * x4939;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4941 = x4940 * x3850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4942 = x4938 + x4941;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4943 = x318 - x3786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4944 = x4943 * x3818;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4945 = x4944 * x3850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4946 = x4942 + x4945;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4947 = x4936 * x3850;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4948 = x4946 + x4947;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4949 = x3787 * x3819;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4950 = x318 - x3851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4951 = x4949 * x4950;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4952 = x318 - x3819;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4953 = x3787 * x4952;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4954 = x4953 * x3851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4955 = x4951 + x4954;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4956 = x318 - x3787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4957 = x4956 * x3819;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4958 = x4957 * x3851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4959 = x4955 + x4958;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4960 = x4949 * x3851;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4961 = x4959 + x4960;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4962 = x3788 * x3820;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4963 = x318 - x3852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4964 = x4962 * x4963;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4965 = x318 - x3820;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4966 = x3788 * x4965;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4967 = x4966 * x3852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4968 = x4964 + x4967;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4969 = x318 - x3788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4970 = x4969 * x3820;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4971 = x4970 * x3852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4972 = x4968 + x4971;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4973 = x4962 * x3852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4974 = x4972 + x4973;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4975 = x3789 * x3821;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4976 = x318 - x3853;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4977 = x4975 * x4976;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4978 = x318 - x3821;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4979 = x3789 * x4978;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4980 = x4979 * x3853;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4981 = x4977 + x4980;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4982 = x318 - x3789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4983 = x4982 * x3821;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4984 = x4983 * x3853;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4985 = x4981 + x4984;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4986 = x4975 * x3853;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4987 = x4985 + x4986;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4988 = x3790 * x3822;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x4989 = x318 - x3854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4990 = x4988 * x4989;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x4991 = x318 - x3822;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4992 = x3790 * x4991;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x4993 = x4992 * x3854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4994 = x4990 + x4993;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x4995 = x318 - x3790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4996 = x4995 * x3822;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x4997 = x4996 * x3854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x4998 = x4994 + x4997;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x4999 = x4988 * x3854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5000 = x4998 + x4999;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5001 = x3791 * x3823;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5002 = x318 - x3855;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5003 = x5001 * x5002;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5004 = x318 - x3823;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5005 = x3791 * x5004;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5006 = x5005 * x3855;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5007 = x5003 + x5006;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5008 = x318 - x3791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5009 = x5008 * x3823;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5010 = x5009 * x3855;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5011 = x5007 + x5010;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5012 = x5001 * x3855;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5013 = x5011 + x5012;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5014 = x3792 * x3824;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5015 = x318 - x3856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5016 = x5014 * x5015;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5017 = x318 - x3824;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5018 = x3792 * x5017;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5019 = x5018 * x3856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5020 = x5016 + x5019;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5021 = x318 - x3792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5022 = x5021 * x3824;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5023 = x5022 * x3856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5024 = x5020 + x5023;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5025 = x5014 * x3856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5026 = x5024 + x5025;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5027 = x3793 * x3825;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5028 = x318 - x3857;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5029 = x5027 * x5028;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5030 = x318 - x3825;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5031 = x3793 * x5030;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5032 = x5031 * x3857;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5033 = x5029 + x5032;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5034 = x318 - x3793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5035 = x5034 * x3825;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5036 = x5035 * x3857;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5037 = x5033 + x5036;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5038 = x5027 * x3857;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5039 = x5037 + x5038;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5040 = x3794 * x3826;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5041 = x318 - x3858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5042 = x5040 * x5041;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5043 = x318 - x3826;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5044 = x3794 * x5043;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5045 = x5044 * x3858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5046 = x5042 + x5045;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5047 = x318 - x3794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5048 = x5047 * x3826;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5049 = x5048 * x3858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5050 = x5046 + x5049;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5051 = x5040 * x3858;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5052 = x5050 + x5051;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5053 = x3795 * x3827;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5054 = x318 - x3859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5055 = x5053 * x5054;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5056 = x318 - x3827;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5057 = x3795 * x5056;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5058 = x5057 * x3859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5059 = x5055 + x5058;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5060 = x318 - x3795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5061 = x5060 * x3827;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5062 = x5061 * x3859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5063 = x5059 + x5062;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5064 = x5053 * x3859;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5065 = x5063 + x5064;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5066 = x3796 * x3828;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5067 = x318 - x3860;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5068 = x5066 * x5067;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5069 = x318 - x3828;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5070 = x3796 * x5069;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5071 = x5070 * x3860;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5072 = x5068 + x5071;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5073 = x318 - x3796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5074 = x5073 * x3828;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5075 = x5074 * x3860;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5076 = x5072 + x5075;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5077 = x5066 * x3860;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5078 = x5076 + x5077;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5079 = x3797 * x3829;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5080 = x318 - x3861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5081 = x5079 * x5080;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5082 = x318 - x3829;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5083 = x3797 * x5082;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5084 = x5083 * x3861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5085 = x5081 + x5084;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5086 = x318 - x3797;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5087 = x5086 * x3829;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5088 = x5087 * x3861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5089 = x5085 + x5088;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5090 = x5079 * x3861;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5091 = x5089 + x5090;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5092 = x3798 * x3830;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5093 = x318 - x3862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5094 = x5092 * x5093;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5095 = x318 - x3830;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5096 = x3798 * x5095;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5097 = x5096 * x3862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5098 = x5094 + x5097;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5099 = x318 - x3798;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5100 = x5099 * x3830;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5101 = x5100 * x3862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5102 = x5098 + x5101;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5103 = x5092 * x3862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5104 = x5102 + x5103;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5105 = x3799 * x3831;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5106 = x318 - x3863;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5107 = x5105 * x5106;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5108 = x318 - x3831;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5109 = x3799 * x5108;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5110 = x5109 * x3863;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5111 = x5107 + x5110;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5112 = x318 - x3799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5113 = x5112 * x3831;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5114 = x5113 * x3863;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5115 = x5111 + x5114;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5116 = x5105 * x3863;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5117 = x5115 + x5116;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5118 = x3800 * x3832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5119 = x318 - x3864;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5120 = x5118 * x5119;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5121 = x318 - x3832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5122 = x3800 * x5121;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5123 = x5122 * x3864;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5124 = x5120 + x5123;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5125 = x318 - x3800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5126 = x5125 * x3832;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5127 = x5126 * x3864;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5128 = x5124 + x5127;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5129 = x5118 * x3864;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5130 = x5128 + x5129;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5131 = x3801 * x3833;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5132 = x318 - x3865;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5133 = x5131 * x5132;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5134 = x318 - x3833;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5135 = x3801 * x5134;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5136 = x5135 * x3865;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5137 = x5133 + x5136;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5138 = x318 - x3801;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5139 = x5138 * x3833;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5140 = x5139 * x3865;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5141 = x5137 + x5140;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5142 = x5131 * x3865;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5143 = x5141 + x5142;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5144 = x3802 * x3834;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5145 = x318 - x3866;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5146 = x5144 * x5145;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5147 = x318 - x3834;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5148 = x3802 * x5147;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5149 = x5148 * x3866;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5150 = x5146 + x5149;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5151 = x318 - x3802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5152 = x5151 * x3834;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5153 = x5152 * x3866;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5154 = x5150 + x5153;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5155 = x5144 * x3866;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5156 = x5154 + x5155;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5157 = x3803 * x3835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5158 = x318 - x3867;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5159 = x5157 * x5158;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5160 = x318 - x3835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5161 = x3803 * x5160;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5162 = x5161 * x3867;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5163 = x5159 + x5162;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5164 = x318 - x3803;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5165 = x5164 * x3835;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5166 = x5165 * x3867;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5167 = x5163 + x5166;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5168 = x5157 * x3867;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5169 = x5167 + x5168;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5170 = x3804 * x3836;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5171 = x318 - x3868;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5172 = x5170 * x5171;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5173 = x318 - x3836;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5174 = x3804 * x5173;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5175 = x5174 * x3868;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5176 = x5172 + x5175;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5177 = x318 - x3804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5178 = x5177 * x3836;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5179 = x5178 * x3868;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5180 = x5176 + x5179;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5181 = x5170 * x3868;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5182 = x5180 + x5181;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5183 = x3805 * x3837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5184 = x318 - x3869;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5185 = x5183 * x5184;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5186 = x318 - x3837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5187 = x3805 * x5186;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5188 = x5187 * x3869;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5189 = x5185 + x5188;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5190 = x318 - x3805;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5191 = x5190 * x3837;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5192 = x5191 * x3869;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5193 = x5189 + x5192;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5194 = x5183 * x3869;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5195 = x5193 + x5194;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5196 = x3806 * x3838;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5197 = x318 - x3870;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5198 = x5196 * x5197;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5199 = x318 - x3838;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5200 = x3806 * x5199;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5201 = x5200 * x3870;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5202 = x5198 + x5201;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5203 = x318 - x3806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5204 = x5203 * x3838;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5205 = x5204 * x3870;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5206 = x5202 + x5205;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5207 = x5196 * x3870;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5208 = x5206 + x5207;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5209 = x3807 * x3839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5210 = x318 - x3871;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5211 = x5209 * x5210;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5212 = x318 - x3839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5213 = x3807 * x5212;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5214 = x5213 * x3871;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5215 = x5211 + x5214;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5216 = x318 - x3807;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5217 = x5216 * x3839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5218 = x5217 * x3871;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5219 = x5215 + x5218;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5220 = x5209 * x3871;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5221 = x5219 + x5220;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5222 = x3808 * x3840;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5223 = x318 - x3872;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5224 = x5222 * x5223;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5225 = x318 - x3840;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5226 = x3808 * x5225;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5227 = x5226 * x3872;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5228 = x5224 + x5227;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5229 = x318 - x3808;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5230 = x5229 * x3840;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5231 = x5230 * x3872;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5232 = x5228 + x5231;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5233 = x5222 * x3872;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5234 = x5232 + x5233;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5235 = x3809 * x3841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x5236 = x318 - x3873;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5237 = x5235 * x5236;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x5238 = x318 - x3841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5239 = x3809 * x5238;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x5240 = x5239 * x3873;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5241 = x5237 + x5240;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x5242 = x318 - x3809;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5243 = x5242 * x3841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x5244 = x5243 * x3873;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5245 = x5241 + x5244;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x5246 = x5235 * x3873;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x5247 = x5245 + x5246;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5248 = x4857 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5249 = x4844 + x5248;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5250 = x4870 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5251 = x5249 + x5250;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5252 = x4883 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5253 = x5251 + x5252;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5254 = x4896 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5255 = x5253 + x5254;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5256 = x4909 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5257 = x5255 + x5256;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5258 = x4922 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5259 = x5257 + x5258;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5260 = x4935 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5261 = x5259 + x5260;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5262 = x4948 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5263 = x5261 + x5262;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5264 = x4961 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5265 = x5263 + x5264;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5266 = x4974 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5267 = x5265 + x5266;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5268 = x4987 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5269 = x5267 + x5268;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5270 = x5000 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5271 = x5269 + x5270;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5272 = x5013 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5273 = x5271 + x5272;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5274 = x5026 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5275 = x5273 + x5274;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5276 = x5039 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5277 = x5275 + x5276;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5278 = x5065 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5279 = x5052 + x5278;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5280 = x5078 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5281 = x5279 + x5280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5282 = x5091 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5283 = x5281 + x5282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5284 = x5104 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5285 = x5283 + x5284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5286 = x5117 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5287 = x5285 + x5286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5288 = x5130 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5289 = x5287 + x5288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5290 = x5143 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5291 = x5289 + x5290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5292 = x5156 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5293 = x5291 + x5292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5294 = x5169 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5295 = x5293 + x5294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5296 = x5182 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5297 = x5295 + x5296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5298 = x5195 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5299 = x5297 + x5298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5300 = x5208 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5301 = x5299 + x5300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5302 = x5221 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5303 = x5301 + x5302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5304 = x5234 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5305 = x5303 + x5304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5306 = x5247 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5307 = x5305 + x5306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5308 = x4169 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5309 = x4166 + x5308;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5310 = x4172 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5311 = x5309 + x5310;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5312 = x4175 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5313 = x5311 + x5312;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5314 = x4178 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5315 = x5313 + x5314;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5316 = x4181 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5317 = x5315 + x5316;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5318 = x4184 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5319 = x5317 + x5318;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5320 = x4187 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5321 = x5319 + x5320;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5322 = x4190 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5323 = x5321 + x5322;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5324 = x4193 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5325 = x5323 + x5324;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5326 = x4196 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5327 = x5325 + x5326;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5328 = x4199 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5329 = x5327 + x5328;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5330 = x4202 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5331 = x5329 + x5330;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5332 = x4205 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5333 = x5331 + x5332;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5334 = x4208 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5335 = x5333 + x5334;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5336 = x4211 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5337 = x5335 + x5336;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5338 = x4217 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5339 = x4214 + x5338;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5340 = x4220 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5341 = x5339 + x5340;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5342 = x4223 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5343 = x5341 + x5342;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5344 = x4226 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5345 = x5343 + x5344;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5346 = x4229 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5347 = x5345 + x5346;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5348 = x4232 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5349 = x5347 + x5348;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5350 = x4235 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5351 = x5349 + x5350;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5352 = x4238 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5353 = x5351 + x5352;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5354 = x4241 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5355 = x5353 + x5354;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5356 = x4244 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5357 = x5355 + x5356;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5358 = x4247 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5359 = x5357 + x5358;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5360 = x4250 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5361 = x5359 + x5360;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5362 = x4253 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5363 = x5361 + x5362;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5364 = x4256 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5365 = x5363 + x5364;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5366 = x4259 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5367 = x5365 + x5366;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5368 = x5277 + x5337;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5369 = x5307 + x5367;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5370 = x4830 + x5368;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5371 = x4831 + x5369;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5372 = x3875 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5373 = x3874 + x5372;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5374 = x3876 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5375 = x5373 + x5374;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5376 = x3877 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5377 = x5375 + x5376;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5378 = x3878 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5379 = x5377 + x5378;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5380 = x3879 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5381 = x5379 + x5380;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5382 = x3880 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5383 = x5381 + x5382;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5384 = x3881 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5385 = x5383 + x5384;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5386 = x3882 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5387 = x5385 + x5386;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5388 = x3883 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5389 = x5387 + x5388;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5390 = x3884 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5391 = x5389 + x5390;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5392 = x3885 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5393 = x5391 + x5392;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5394 = x3886 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5395 = x5393 + x5394;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5396 = x3887 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5397 = x5395 + x5396;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5398 = x3888 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5399 = x5397 + x5398;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5400 = x3889 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5401 = x5399 + x5400;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5402 = x3891 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5403 = x3890 + x5402;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5404 = x3892 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5405 = x5403 + x5404;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5406 = x3893 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5407 = x5405 + x5406;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5408 = x3894 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5409 = x5407 + x5408;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5410 = x3895 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5411 = x5409 + x5410;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5412 = x3896 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5413 = x5411 + x5412;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5414 = x3897 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5415 = x5413 + x5414;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5416 = x3898 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5417 = x5415 + x5416;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5418 = x3899 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5419 = x5417 + x5418;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5420 = x3900 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5421 = x5419 + x5420;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5422 = x3901 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5423 = x5421 + x5422;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5424 = x3902 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5425 = x5423 + x5424;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5426 = x3903 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5427 = x5425 + x5426;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5428 = x3904 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5429 = x5427 + x5428;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x5430 = x3905 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x5431 = x5429 + x5430;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5432 = x4830 + x5401;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x5433 = x4831 + x5431;
      // loc("zirgen/circuit/recursion/sha.cpp":290:5)
      {
        auto& reg = args[2][58 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5370);
        reg = x5370;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":291:5)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5432);
        reg = x5432;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":290:5)
      {
        auto& reg = args[2][59 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5371);
        reg = x5371;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":291:5)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5433);
        reg = x5433;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5434 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x5434 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5435 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x5435 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5436 = Fp(x5434.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5436);
          reg = x5436;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5437 = Fp(x5434.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5438 = x5437 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5438);
          reg = x5438;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5439 = Fp(x5434.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5440 = x5439 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5440);
          reg = x5440;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5441 = Fp(x5434.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5442 = x5441 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5442);
          reg = x5442;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5443 = Fp(x5434.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5444 = x5443 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5444);
          reg = x5444;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5445 = Fp(x5434.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5446 = x5445 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5446);
          reg = x5446;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5447 = Fp(x5434.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5448 = x5447 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5448);
          reg = x5448;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5449 = Fp(x5434.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5450 = x5449 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5450);
          reg = x5450;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5451 = Fp(x5434.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5452 = x5451 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5452);
          reg = x5452;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5453 = Fp(x5434.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5454 = x5453 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5454);
          reg = x5454;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5455 = Fp(x5434.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5456 = x5455 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5456);
          reg = x5456;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5457 = Fp(x5434.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5458 = x5457 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5458);
          reg = x5458;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5459 = Fp(x5434.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5460 = x5459 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5460);
          reg = x5460;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5461 = Fp(x5434.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5462 = x5461 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5462);
          reg = x5462;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5463 = Fp(x5434.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5464 = x5463 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5464);
          reg = x5464;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5465 = Fp(x5434.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5466 = x5465 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5466);
          reg = x5466;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5467 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5467 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5468 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5468 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5469 = x5468 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5470 = x5467 + x5469;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5471 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5471 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5472 = x5471 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5473 = x5470 + x5472;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5474 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5474 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5475 = x5474 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5476 = x5473 + x5475;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5477 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5477 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5478 = x5477 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5479 = x5476 + x5478;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5480 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5480 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5481 = x5480 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5482 = x5479 + x5481;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5483 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5483 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5484 = x5483 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5485 = x5482 + x5484;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5486 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5486 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5487 = x5486 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5488 = x5485 + x5487;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5489 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5489 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5490 = x5489 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5491 = x5488 + x5490;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5492 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5492 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5493 = x5492 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5494 = x5491 + x5493;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5495 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5495 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5496 = x5495 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5497 = x5494 + x5496;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5498 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5498 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5499 = x5498 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5500 = x5497 + x5499;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5501 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5501 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5502 = x5501 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5503 = x5500 + x5502;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5504 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5504 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5505 = x5504 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5506 = x5503 + x5505;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5507 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x5507 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5508 = x5507 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5509 = x5506 + x5508;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5510 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x5510 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5511 = x5510 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5512 = x5509 + x5511;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x5513 = x5434 - x5512;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x5514 = x5513 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x5515 = Fp(x5514.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5515);
          reg = x5515;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x5516 = x5435 + x5514;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5517 = Fp(x5516.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5517);
          reg = x5517;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5518 = Fp(x5516.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5519 = x5518 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5519);
          reg = x5519;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5520 = Fp(x5516.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5521 = x5520 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5521);
          reg = x5521;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5522 = Fp(x5516.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5523 = x5522 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5523);
          reg = x5523;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5524 = Fp(x5516.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5525 = x5524 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5525);
          reg = x5525;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5526 = Fp(x5516.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5527 = x5526 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5527);
          reg = x5527;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5528 = Fp(x5516.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5529 = x5528 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5529);
          reg = x5529;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5530 = Fp(x5516.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5531 = x5530 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5531);
          reg = x5531;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5532 = Fp(x5516.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5533 = x5532 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5533);
          reg = x5533;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5534 = Fp(x5516.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5535 = x5534 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5535);
          reg = x5535;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5536 = Fp(x5516.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5537 = x5536 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5537);
          reg = x5537;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5538 = Fp(x5516.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5539 = x5538 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5539);
          reg = x5539;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5540 = Fp(x5516.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5541 = x5540 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5541);
          reg = x5541;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5542 = Fp(x5516.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5543 = x5542 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5543);
          reg = x5543;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5544 = Fp(x5516.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5545 = x5544 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5545);
          reg = x5545;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5546 = Fp(x5516.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5547 = x5546 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5547);
          reg = x5547;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5548 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x5548 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5549 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x5549 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5550 = x5549 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5551 = x5548 + x5550;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5552 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x5552 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5553 = x5552 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5554 = x5551 + x5553;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5555 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x5555 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5556 = x5555 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5557 = x5554 + x5556;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5558 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x5558 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5559 = x5558 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5560 = x5557 + x5559;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5561 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x5561 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5562 = x5561 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5563 = x5560 + x5562;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5564 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x5564 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5565 = x5564 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5566 = x5563 + x5565;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5567 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x5567 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5568 = x5567 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5569 = x5566 + x5568;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5570 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x5570 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5571 = x5570 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5572 = x5569 + x5571;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5573 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x5573 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5574 = x5573 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5575 = x5572 + x5574;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5576 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x5576 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5577 = x5576 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5578 = x5575 + x5577;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5579 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x5579 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5580 = x5579 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5581 = x5578 + x5580;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5582 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x5582 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5583 = x5582 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5584 = x5581 + x5583;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5585 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x5585 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5586 = x5585 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5587 = x5584 + x5586;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5588 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x5588 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5589 = x5588 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5590 = x5587 + x5589;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5591 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x5591 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5592 = x5591 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5593 = x5590 + x5592;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x5594 = x5516 - x5593;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x5595 = x5594 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x5596 = Fp(x5595.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5596);
          reg = x5596;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5597 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5597 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5598 = args[2][93 * steps + ((cycle - 0) & mask)];
      assert(x5598 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5599 = Fp(x5597.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5599);
          reg = x5599;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5600 = Fp(x5597.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5601 = x5600 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5601);
          reg = x5601;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5602 = Fp(x5597.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5603 = x5602 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5603);
          reg = x5603;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5604 = Fp(x5597.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5605 = x5604 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5605);
          reg = x5605;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5606 = Fp(x5597.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5607 = x5606 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5607);
          reg = x5607;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5608 = Fp(x5597.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5609 = x5608 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5609);
          reg = x5609;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5610 = Fp(x5597.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5611 = x5610 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5611);
          reg = x5611;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5612 = Fp(x5597.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5613 = x5612 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5613);
          reg = x5613;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5614 = Fp(x5597.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5615 = x5614 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5615);
          reg = x5615;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5616 = Fp(x5597.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5617 = x5616 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5617);
          reg = x5617;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5618 = Fp(x5597.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5619 = x5618 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5619);
          reg = x5619;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5620 = Fp(x5597.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5621 = x5620 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5621);
          reg = x5621;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5622 = Fp(x5597.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5623 = x5622 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5623);
          reg = x5623;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5624 = Fp(x5597.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5625 = x5624 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5625);
          reg = x5625;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5626 = Fp(x5597.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5627 = x5626 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5627);
          reg = x5627;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5628 = Fp(x5597.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5629 = x5628 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5629);
          reg = x5629;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5630 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x5630 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5631 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x5631 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5632 = x5631 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5633 = x5630 + x5632;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5634 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x5634 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5635 = x5634 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5636 = x5633 + x5635;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5637 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x5637 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5638 = x5637 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5639 = x5636 + x5638;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5640 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x5640 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5641 = x5640 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5642 = x5639 + x5641;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5643 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x5643 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5644 = x5643 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5645 = x5642 + x5644;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5646 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x5646 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5647 = x5646 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5648 = x5645 + x5647;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5649 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x5649 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5650 = x5649 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5651 = x5648 + x5650;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5652 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x5652 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5653 = x5652 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5654 = x5651 + x5653;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5655 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x5655 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5656 = x5655 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5657 = x5654 + x5656;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5658 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5658 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5659 = x5658 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5660 = x5657 + x5659;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5661 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5661 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5662 = x5661 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5663 = x5660 + x5662;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5664 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5664 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5665 = x5664 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5666 = x5663 + x5665;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5667 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5667 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5668 = x5667 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5669 = x5666 + x5668;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5670 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x5670 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5671 = x5670 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5672 = x5669 + x5671;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5673 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x5673 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5674 = x5673 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5675 = x5672 + x5674;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x5676 = x5597 - x5675;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x5677 = x5676 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x5678 = Fp(x5677.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5678);
          reg = x5678;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x5679 = x5598 + x5677;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5680 = Fp(x5679.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5680);
          reg = x5680;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5681 = Fp(x5679.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5682 = x5681 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5682);
          reg = x5682;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5683 = Fp(x5679.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5684 = x5683 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5684);
          reg = x5684;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5685 = Fp(x5679.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5686 = x5685 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5686);
          reg = x5686;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5687 = Fp(x5679.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5688 = x5687 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5688);
          reg = x5688;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5689 = Fp(x5679.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5690 = x5689 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5690);
          reg = x5690;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5691 = Fp(x5679.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5692 = x5691 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5692);
          reg = x5692;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5693 = Fp(x5679.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5694 = x5693 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5694);
          reg = x5694;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5695 = Fp(x5679.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5696 = x5695 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5696);
          reg = x5696;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5697 = Fp(x5679.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5698 = x5697 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5698);
          reg = x5698;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5699 = Fp(x5679.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5700 = x5699 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5700);
          reg = x5700;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5701 = Fp(x5679.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5702 = x5701 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5702);
          reg = x5702;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5703 = Fp(x5679.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5704 = x5703 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5704);
          reg = x5704;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5705 = Fp(x5679.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5706 = x5705 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5706);
          reg = x5706;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5707 = Fp(x5679.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5708 = x5707 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5708);
          reg = x5708;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x5709 = Fp(x5679.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x5710 = x5709 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5710);
          reg = x5710;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5711 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5711 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5712 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x5712 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5713 = x5712 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5714 = x5711 + x5713;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5715 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5715 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5716 = x5715 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5717 = x5714 + x5716;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5718 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x5718 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5719 = x5718 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5720 = x5717 + x5719;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5721 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5721 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5722 = x5721 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5723 = x5720 + x5722;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5724 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x5724 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5725 = x5724 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5726 = x5723 + x5725;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5727 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5727 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5728 = x5727 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5729 = x5726 + x5728;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5730 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5730 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5731 = x5730 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5732 = x5729 + x5731;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5733 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5733 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5734 = x5733 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5735 = x5732 + x5734;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5736 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5736 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5737 = x5736 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5738 = x5735 + x5737;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5739 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5739 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5740 = x5739 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5741 = x5738 + x5740;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5742 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5742 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5743 = x5742 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5744 = x5741 + x5743;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5745 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5745 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5746 = x5745 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5747 = x5744 + x5746;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5748 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x5748 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5749 = x5748 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5750 = x5747 + x5749;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5751 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x5751 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5752 = x5751 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5753 = x5750 + x5752;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5754 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x5754 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x5755 = x5754 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x5756 = x5753 + x5755;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x5757 = x5679 - x5756;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x5758 = x5757 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x5759 = Fp(x5758.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5759);
          reg = x5759;
        }
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/sha_mix(Reg)"("./zirgen/components/mux.h":49:25))
    auto x5760 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x5760 != Fp::invalid());
    if (x5760 != 0) {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5761 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x5761 != Fp::invalid());
      {
        host_args.at(0) = x5761;
        host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x5762 = host_outs.at(0);
        auto x5763 = host_outs.at(1);
        auto x5764 = host_outs.at(2);
        auto x5765 = host_outs.at(3);
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5762);
          reg = x5762;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5763);
          reg = x5763;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5764);
          reg = x5764;
        }
        // loc("zirgen/circuit/recursion/wom.cpp":49:5)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5765);
          reg = x5765;
        }
      }
      // loc("zirgen/circuit/recursion/wom.cpp":84:3)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5761);
        reg = x5761;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5766 = args[2][94 * steps + ((cycle - 2) & mask)];
      assert(x5766 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5767 = args[2][95 * steps + ((cycle - 2) & mask)];
      assert(x5767 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5768 = args[2][96 * steps + ((cycle - 2) & mask)];
      assert(x5768 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5769 = args[2][97 * steps + ((cycle - 2) & mask)];
      assert(x5769 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5770 = args[2][98 * steps + ((cycle - 2) & mask)];
      assert(x5770 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5771 = args[2][99 * steps + ((cycle - 2) & mask)];
      assert(x5771 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5772 = args[2][100 * steps + ((cycle - 2) & mask)];
      assert(x5772 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5773 = args[2][101 * steps + ((cycle - 2) & mask)];
      assert(x5773 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5774 = args[2][102 * steps + ((cycle - 2) & mask)];
      assert(x5774 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5775 = args[2][103 * steps + ((cycle - 2) & mask)];
      assert(x5775 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5776 = args[2][104 * steps + ((cycle - 2) & mask)];
      assert(x5776 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5777 = args[2][105 * steps + ((cycle - 2) & mask)];
      assert(x5777 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5778 = args[2][106 * steps + ((cycle - 2) & mask)];
      assert(x5778 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5779 = args[2][107 * steps + ((cycle - 2) & mask)];
      assert(x5779 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5780 = args[2][108 * steps + ((cycle - 2) & mask)];
      assert(x5780 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5781 = args[2][109 * steps + ((cycle - 2) & mask)];
      assert(x5781 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5782 = args[2][110 * steps + ((cycle - 2) & mask)];
      assert(x5782 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5783 = args[2][111 * steps + ((cycle - 2) & mask)];
      assert(x5783 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5784 = args[2][112 * steps + ((cycle - 2) & mask)];
      assert(x5784 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5785 = args[2][113 * steps + ((cycle - 2) & mask)];
      assert(x5785 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5786 = args[2][114 * steps + ((cycle - 2) & mask)];
      assert(x5786 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5787 = args[2][115 * steps + ((cycle - 2) & mask)];
      assert(x5787 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5788 = args[2][116 * steps + ((cycle - 2) & mask)];
      assert(x5788 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5789 = args[2][117 * steps + ((cycle - 2) & mask)];
      assert(x5789 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5790 = args[2][118 * steps + ((cycle - 2) & mask)];
      assert(x5790 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5791 = args[2][119 * steps + ((cycle - 2) & mask)];
      assert(x5791 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5792 = args[2][120 * steps + ((cycle - 2) & mask)];
      assert(x5792 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5793 = args[2][121 * steps + ((cycle - 2) & mask)];
      assert(x5793 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5794 = args[2][122 * steps + ((cycle - 2) & mask)];
      assert(x5794 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5795 = args[2][123 * steps + ((cycle - 2) & mask)];
      assert(x5795 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5796 = args[2][124 * steps + ((cycle - 2) & mask)];
      assert(x5796 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5797 = args[2][125 * steps + ((cycle - 2) & mask)];
      assert(x5797 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5798 = args[2][94 * steps + ((cycle - 7) & mask)];
      assert(x5798 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5799 = args[2][95 * steps + ((cycle - 7) & mask)];
      assert(x5799 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5800 = args[2][96 * steps + ((cycle - 7) & mask)];
      assert(x5800 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5801 = args[2][97 * steps + ((cycle - 7) & mask)];
      assert(x5801 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5802 = args[2][98 * steps + ((cycle - 7) & mask)];
      assert(x5802 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5803 = args[2][99 * steps + ((cycle - 7) & mask)];
      assert(x5803 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5804 = args[2][100 * steps + ((cycle - 7) & mask)];
      assert(x5804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5805 = args[2][101 * steps + ((cycle - 7) & mask)];
      assert(x5805 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5806 = args[2][102 * steps + ((cycle - 7) & mask)];
      assert(x5806 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5807 = args[2][103 * steps + ((cycle - 7) & mask)];
      assert(x5807 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5808 = args[2][104 * steps + ((cycle - 7) & mask)];
      assert(x5808 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5809 = args[2][105 * steps + ((cycle - 7) & mask)];
      assert(x5809 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5810 = args[2][106 * steps + ((cycle - 7) & mask)];
      assert(x5810 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5811 = args[2][107 * steps + ((cycle - 7) & mask)];
      assert(x5811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5812 = args[2][108 * steps + ((cycle - 7) & mask)];
      assert(x5812 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5813 = args[2][109 * steps + ((cycle - 7) & mask)];
      assert(x5813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5814 = args[2][110 * steps + ((cycle - 7) & mask)];
      assert(x5814 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5815 = args[2][111 * steps + ((cycle - 7) & mask)];
      assert(x5815 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5816 = args[2][112 * steps + ((cycle - 7) & mask)];
      assert(x5816 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5817 = args[2][113 * steps + ((cycle - 7) & mask)];
      assert(x5817 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5818 = args[2][114 * steps + ((cycle - 7) & mask)];
      assert(x5818 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5819 = args[2][115 * steps + ((cycle - 7) & mask)];
      assert(x5819 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5820 = args[2][116 * steps + ((cycle - 7) & mask)];
      assert(x5820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5821 = args[2][117 * steps + ((cycle - 7) & mask)];
      assert(x5821 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5822 = args[2][118 * steps + ((cycle - 7) & mask)];
      assert(x5822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5823 = args[2][119 * steps + ((cycle - 7) & mask)];
      assert(x5823 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5824 = args[2][120 * steps + ((cycle - 7) & mask)];
      assert(x5824 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5825 = args[2][121 * steps + ((cycle - 7) & mask)];
      assert(x5825 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5826 = args[2][122 * steps + ((cycle - 7) & mask)];
      assert(x5826 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5827 = args[2][123 * steps + ((cycle - 7) & mask)];
      assert(x5827 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5828 = args[2][124 * steps + ((cycle - 7) & mask)];
      assert(x5828 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5829 = args[2][125 * steps + ((cycle - 7) & mask)];
      assert(x5829 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5830 = args[2][94 * steps + ((cycle - 15) & mask)];
      assert(x5830 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5831 = args[2][95 * steps + ((cycle - 15) & mask)];
      assert(x5831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5832 = args[2][96 * steps + ((cycle - 15) & mask)];
      assert(x5832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5833 = args[2][97 * steps + ((cycle - 15) & mask)];
      assert(x5833 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5834 = args[2][98 * steps + ((cycle - 15) & mask)];
      assert(x5834 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5835 = args[2][99 * steps + ((cycle - 15) & mask)];
      assert(x5835 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5836 = args[2][100 * steps + ((cycle - 15) & mask)];
      assert(x5836 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5837 = args[2][101 * steps + ((cycle - 15) & mask)];
      assert(x5837 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5838 = args[2][102 * steps + ((cycle - 15) & mask)];
      assert(x5838 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5839 = args[2][103 * steps + ((cycle - 15) & mask)];
      assert(x5839 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5840 = args[2][104 * steps + ((cycle - 15) & mask)];
      assert(x5840 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5841 = args[2][105 * steps + ((cycle - 15) & mask)];
      assert(x5841 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5842 = args[2][106 * steps + ((cycle - 15) & mask)];
      assert(x5842 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5843 = args[2][107 * steps + ((cycle - 15) & mask)];
      assert(x5843 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5844 = args[2][108 * steps + ((cycle - 15) & mask)];
      assert(x5844 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5845 = args[2][109 * steps + ((cycle - 15) & mask)];
      assert(x5845 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5846 = args[2][110 * steps + ((cycle - 15) & mask)];
      assert(x5846 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5847 = args[2][111 * steps + ((cycle - 15) & mask)];
      assert(x5847 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5848 = args[2][112 * steps + ((cycle - 15) & mask)];
      assert(x5848 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5849 = args[2][113 * steps + ((cycle - 15) & mask)];
      assert(x5849 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5850 = args[2][114 * steps + ((cycle - 15) & mask)];
      assert(x5850 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5851 = args[2][115 * steps + ((cycle - 15) & mask)];
      assert(x5851 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5852 = args[2][116 * steps + ((cycle - 15) & mask)];
      assert(x5852 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5853 = args[2][117 * steps + ((cycle - 15) & mask)];
      assert(x5853 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5854 = args[2][118 * steps + ((cycle - 15) & mask)];
      assert(x5854 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5855 = args[2][119 * steps + ((cycle - 15) & mask)];
      assert(x5855 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5856 = args[2][120 * steps + ((cycle - 15) & mask)];
      assert(x5856 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5857 = args[2][121 * steps + ((cycle - 15) & mask)];
      assert(x5857 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5858 = args[2][122 * steps + ((cycle - 15) & mask)];
      assert(x5858 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5859 = args[2][123 * steps + ((cycle - 15) & mask)];
      assert(x5859 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5860 = args[2][124 * steps + ((cycle - 15) & mask)];
      assert(x5860 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5861 = args[2][125 * steps + ((cycle - 15) & mask)];
      assert(x5861 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5862 = args[2][94 * steps + ((cycle - 16) & mask)];
      assert(x5862 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5863 = args[2][95 * steps + ((cycle - 16) & mask)];
      assert(x5863 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5864 = args[2][96 * steps + ((cycle - 16) & mask)];
      assert(x5864 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5865 = args[2][97 * steps + ((cycle - 16) & mask)];
      assert(x5865 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5866 = args[2][98 * steps + ((cycle - 16) & mask)];
      assert(x5866 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5867 = args[2][99 * steps + ((cycle - 16) & mask)];
      assert(x5867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5868 = args[2][100 * steps + ((cycle - 16) & mask)];
      assert(x5868 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5869 = args[2][101 * steps + ((cycle - 16) & mask)];
      assert(x5869 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5870 = args[2][102 * steps + ((cycle - 16) & mask)];
      assert(x5870 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5871 = args[2][103 * steps + ((cycle - 16) & mask)];
      assert(x5871 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5872 = args[2][104 * steps + ((cycle - 16) & mask)];
      assert(x5872 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5873 = args[2][105 * steps + ((cycle - 16) & mask)];
      assert(x5873 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5874 = args[2][106 * steps + ((cycle - 16) & mask)];
      assert(x5874 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5875 = args[2][107 * steps + ((cycle - 16) & mask)];
      assert(x5875 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5876 = args[2][108 * steps + ((cycle - 16) & mask)];
      assert(x5876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5877 = args[2][109 * steps + ((cycle - 16) & mask)];
      assert(x5877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5878 = args[2][110 * steps + ((cycle - 16) & mask)];
      assert(x5878 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5879 = args[2][111 * steps + ((cycle - 16) & mask)];
      assert(x5879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5880 = args[2][112 * steps + ((cycle - 16) & mask)];
      assert(x5880 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5881 = args[2][113 * steps + ((cycle - 16) & mask)];
      assert(x5881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5882 = args[2][114 * steps + ((cycle - 16) & mask)];
      assert(x5882 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5883 = args[2][115 * steps + ((cycle - 16) & mask)];
      assert(x5883 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5884 = args[2][116 * steps + ((cycle - 16) & mask)];
      assert(x5884 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5885 = args[2][117 * steps + ((cycle - 16) & mask)];
      assert(x5885 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5886 = args[2][118 * steps + ((cycle - 16) & mask)];
      assert(x5886 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5887 = args[2][119 * steps + ((cycle - 16) & mask)];
      assert(x5887 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5888 = args[2][120 * steps + ((cycle - 16) & mask)];
      assert(x5888 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5889 = args[2][121 * steps + ((cycle - 16) & mask)];
      assert(x5889 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5890 = args[2][122 * steps + ((cycle - 16) & mask)];
      assert(x5890 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5891 = args[2][123 * steps + ((cycle - 16) & mask)];
      assert(x5891 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5892 = args[2][124 * steps + ((cycle - 16) & mask)];
      assert(x5892 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5893 = args[2][125 * steps + ((cycle - 16) & mask)];
      assert(x5893 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5894 = x5848 + x5833;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5895 = x5848 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5896 = x5895 * x5833;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5897 = x5894 - x5896;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5898 = x5849 + x5834;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5899 = x5849 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5900 = x5899 * x5834;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5901 = x5898 - x5900;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5902 = x5850 + x5835;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5903 = x5850 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5904 = x5903 * x5835;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5905 = x5902 - x5904;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5906 = x5851 + x5836;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5907 = x5851 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5908 = x5907 * x5836;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5909 = x5906 - x5908;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5910 = x5852 + x5837;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5911 = x5852 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5912 = x5911 * x5837;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5913 = x5910 - x5912;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5914 = x5853 + x5838;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5915 = x5853 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5916 = x5915 * x5838;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5917 = x5914 - x5916;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5918 = x5854 + x5839;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5919 = x5854 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5920 = x5919 * x5839;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5921 = x5918 - x5920;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5922 = x5855 + x5840;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5923 = x5855 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5924 = x5923 * x5840;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5925 = x5922 - x5924;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5926 = x5856 + x5841;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5927 = x5856 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5928 = x5927 * x5841;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5929 = x5926 - x5928;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5930 = x5857 + x5842;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5931 = x5857 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5932 = x5931 * x5842;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5933 = x5930 - x5932;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5934 = x5858 + x5843;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5935 = x5858 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5936 = x5935 * x5843;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5937 = x5934 - x5936;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5938 = x5859 + x5844;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5939 = x5859 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5940 = x5939 * x5844;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5941 = x5938 - x5940;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5942 = x5860 + x5845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5943 = x5860 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5944 = x5943 * x5845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5945 = x5942 - x5944;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5946 = x5861 + x5846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5947 = x5861 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5948 = x5947 * x5846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5949 = x5946 - x5948;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5950 = x5830 + x5847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5951 = x5830 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5952 = x5951 * x5847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5953 = x5950 - x5952;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5954 = x5831 + x5848;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5955 = x5831 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5956 = x5955 * x5848;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5957 = x5954 - x5956;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5958 = x5832 + x5849;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5959 = x5832 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5960 = x5959 * x5849;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5961 = x5958 - x5960;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5962 = x5833 + x5850;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5963 = x5833 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5964 = x5963 * x5850;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5965 = x5962 - x5964;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5966 = x5834 + x5851;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5967 = x5834 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5968 = x5967 * x5851;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5969 = x5966 - x5968;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5970 = x5835 + x5852;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5971 = x5835 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5972 = x5971 * x5852;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5973 = x5970 - x5972;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5974 = x5836 + x5853;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5975 = x5836 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5976 = x5975 * x5853;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5977 = x5974 - x5976;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5978 = x5837 + x5854;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5979 = x5837 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5980 = x5979 * x5854;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5981 = x5978 - x5980;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5982 = x5838 + x5855;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5983 = x5838 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5984 = x5983 * x5855;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5985 = x5982 - x5984;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5986 = x5839 + x5856;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5987 = x5839 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5988 = x5987 * x5856;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5989 = x5986 - x5988;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5990 = x5840 + x5857;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5991 = x5840 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5992 = x5991 * x5857;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5993 = x5990 - x5992;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5994 = x5841 + x5858;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5995 = x5841 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5996 = x5995 * x5858;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5997 = x5994 - x5996;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x5998 = x5842 + x5859;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x5999 = x5842 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6000 = x5999 * x5859;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6001 = x5998 - x6000;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6002 = x5843 + x5860;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6003 = x5843 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6004 = x6003 * x5860;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6005 = x6002 - x6004;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6006 = x5844 + x5861;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6007 = x5844 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6008 = x6007 * x5861;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6009 = x6006 - x6008;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6010 = x5837 + x5897;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6011 = x5979 * x5897;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6012 = x6010 - x6011;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6013 = x5838 + x5901;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6014 = x5983 * x5901;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6015 = x6013 - x6014;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6016 = x5839 + x5905;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6017 = x5987 * x5905;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6018 = x6016 - x6017;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6019 = x5840 + x5909;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6020 = x5991 * x5909;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6021 = x6019 - x6020;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6022 = x5841 + x5913;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6023 = x5995 * x5913;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6024 = x6022 - x6023;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6025 = x5842 + x5917;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6026 = x5999 * x5917;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6027 = x6025 - x6026;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6028 = x5843 + x5921;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6029 = x6003 * x5921;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6030 = x6028 - x6029;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6031 = x5844 + x5925;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6032 = x6007 * x5925;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6033 = x6031 - x6032;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6034 = x5845 + x5929;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6035 = x5845 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6036 = x6035 * x5929;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6037 = x6034 - x6036;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6038 = x5846 + x5933;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6039 = x5846 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6040 = x6039 * x5933;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6041 = x6038 - x6040;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6042 = x5847 + x5937;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6043 = x5847 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6044 = x6043 * x5937;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6045 = x6042 - x6044;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6046 = x5848 + x5941;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6047 = x5895 * x5941;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6048 = x6046 - x6047;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6049 = x5849 + x5945;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6050 = x5899 * x5945;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6051 = x6049 - x6050;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6052 = x5850 + x5949;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6053 = x5903 * x5949;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6054 = x6052 - x6053;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6055 = x5851 + x5953;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6056 = x5907 * x5953;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6057 = x6055 - x6056;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6058 = x5852 + x5957;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6059 = x5911 * x5957;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6060 = x6058 - x6059;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6061 = x5853 + x5961;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6062 = x5915 * x5961;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6063 = x6061 - x6062;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6064 = x5854 + x5965;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6065 = x5919 * x5965;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6066 = x6064 - x6065;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6067 = x5855 + x5969;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6068 = x5923 * x5969;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6069 = x6067 - x6068;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6070 = x5856 + x5973;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6071 = x5927 * x5973;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6072 = x6070 - x6071;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6073 = x5857 + x5977;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6074 = x5931 * x5977;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6075 = x6073 - x6074;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6076 = x5858 + x5981;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6077 = x5935 * x5981;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6078 = x6076 - x6077;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6079 = x5859 + x5985;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6080 = x5939 * x5985;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6081 = x6079 - x6080;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6082 = x5860 + x5989;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6083 = x5943 * x5989;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6084 = x6082 - x6083;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6085 = x5861 + x5993;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6086 = x5947 * x5993;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6087 = x6085 - x6086;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6088 = x5830 + x5997;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6089 = x5951 * x5997;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6090 = x6088 - x6089;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6091 = x5831 + x6001;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6092 = x5955 * x6001;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6093 = x6091 - x6092;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6094 = x5832 + x6005;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6095 = x5959 * x6005;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6096 = x6094 - x6095;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6097 = x5833 + x6009;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6098 = x5963 * x6009;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6099 = x6097 - x6098;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6100 = x5834 + x5845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6101 = x5967 * x5845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6102 = x6100 - x6101;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6103 = x5835 + x5846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6104 = x5971 * x5846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6105 = x6103 - x6104;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6106 = x5836 + x5847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6107 = x5975 * x5847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6108 = x6106 - x6107;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6109 = x5785 + x5776;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6110 = x5785 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6111 = x6110 * x5776;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6112 = x6109 - x6111;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6113 = x5786 + x5777;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6114 = x5786 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6115 = x6114 * x5777;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6116 = x6113 - x6115;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6117 = x5787 + x5778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6118 = x5787 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6119 = x6118 * x5778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6120 = x6117 - x6119;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6121 = x5788 + x5779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6122 = x5788 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6123 = x6122 * x5779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6124 = x6121 - x6123;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6125 = x5789 + x5780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6126 = x5789 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6127 = x6126 * x5780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6128 = x6125 - x6127;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6129 = x5790 + x5781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6130 = x5790 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6131 = x6130 * x5781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6132 = x6129 - x6131;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6133 = x5791 + x5782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6134 = x5791 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6135 = x6134 * x5782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6136 = x6133 - x6135;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6137 = x5792 + x5783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6138 = x5792 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6139 = x6138 * x5783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6140 = x6137 - x6139;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6141 = x5793 + x5784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6142 = x5793 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6143 = x6142 * x5784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6144 = x6141 - x6143;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6145 = x5794 + x5785;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6146 = x5794 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6147 = x6146 * x5785;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6148 = x6145 - x6147;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6149 = x5795 + x5786;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6150 = x5795 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6151 = x6150 * x5786;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6152 = x6149 - x6151;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6153 = x5796 + x5787;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6154 = x5796 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6155 = x6154 * x5787;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6156 = x6153 - x6155;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6157 = x5797 + x5788;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6158 = x5797 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6159 = x6158 * x5788;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6160 = x6157 - x6159;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6161 = x5766 + x5789;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6162 = x5766 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6163 = x6162 * x5789;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6164 = x6161 - x6163;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6165 = x5767 + x5790;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6166 = x5767 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6167 = x6166 * x5790;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6168 = x6165 - x6167;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6169 = x5768 + x5791;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6170 = x5768 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6171 = x6170 * x5791;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6172 = x6169 - x6171;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6173 = x5769 + x5792;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6174 = x5769 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6175 = x6174 * x5792;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6176 = x6173 - x6175;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6177 = x5770 + x5793;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6178 = x5770 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6179 = x6178 * x5793;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6180 = x6177 - x6179;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6181 = x5771 + x5794;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6182 = x5771 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6183 = x6182 * x5794;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6184 = x6181 - x6183;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6185 = x5772 + x5795;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6186 = x5772 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6187 = x6186 * x5795;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6188 = x6185 - x6187;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6189 = x5773 + x5796;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6190 = x5773 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6191 = x6190 * x5796;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6192 = x6189 - x6191;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6193 = x5774 + x5797;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6194 = x5774 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6195 = x6194 * x5797;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6196 = x6193 - x6195;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6197 = x5783 + x6112;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6198 = x5783 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6199 = x6198 * x6112;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6200 = x6197 - x6199;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6201 = x5784 + x6116;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6202 = x5784 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6203 = x6202 * x6116;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6204 = x6201 - x6203;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6205 = x5785 + x6120;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6206 = x6110 * x6120;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6207 = x6205 - x6206;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6208 = x5786 + x6124;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6209 = x6114 * x6124;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6210 = x6208 - x6209;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6211 = x5787 + x6128;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6212 = x6118 * x6128;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6213 = x6211 - x6212;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6214 = x5788 + x6132;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6215 = x6122 * x6132;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6216 = x6214 - x6215;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6217 = x5789 + x6136;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6218 = x6126 * x6136;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6219 = x6217 - x6218;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6220 = x5790 + x6140;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6221 = x6130 * x6140;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6222 = x6220 - x6221;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6223 = x5791 + x6144;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6224 = x6134 * x6144;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6225 = x6223 - x6224;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6226 = x5792 + x6148;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6227 = x6138 * x6148;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6228 = x6226 - x6227;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6229 = x5793 + x6152;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6230 = x6142 * x6152;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6231 = x6229 - x6230;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6232 = x5794 + x6156;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6233 = x6146 * x6156;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6234 = x6232 - x6233;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6235 = x5795 + x6160;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6236 = x6150 * x6160;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6237 = x6235 - x6236;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6238 = x5796 + x6164;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6239 = x6154 * x6164;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6240 = x6238 - x6239;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6241 = x5797 + x6168;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6242 = x6158 * x6168;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6243 = x6241 - x6242;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6244 = x5766 + x6172;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6245 = x6162 * x6172;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6246 = x6244 - x6245;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6247 = x5767 + x6176;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6248 = x6166 * x6176;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6249 = x6247 - x6248;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6250 = x5768 + x6180;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6251 = x6170 * x6180;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6252 = x6250 - x6251;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6253 = x5769 + x6184;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6254 = x6174 * x6184;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6255 = x6253 - x6254;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6256 = x5770 + x6188;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6257 = x6178 * x6188;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6258 = x6256 - x6257;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6259 = x5771 + x6192;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6260 = x6182 * x6192;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6261 = x6259 - x6260;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6262 = x5772 + x6196;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6263 = x6186 * x6196;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6264 = x6262 - x6263;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6265 = x5773 + x5775;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6266 = x6190 * x5775;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6267 = x6265 - x6266;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6268 = x5774 + x5776;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6269 = x6194 * x5776;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6270 = x6268 - x6269;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6271 = x5775 + x5777;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6272 = x5775 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6273 = x6272 * x5777;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6274 = x6271 - x6273;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6275 = x5776 + x5778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6276 = x5776 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6277 = x6276 * x5778;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6278 = x6275 - x6277;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6279 = x5777 + x5779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6280 = x5777 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6281 = x6280 * x5779;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6282 = x6279 - x6281;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6283 = x5778 + x5780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6284 = x5778 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6285 = x6284 * x5780;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6286 = x6283 - x6285;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6287 = x5779 + x5781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6288 = x5779 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6289 = x6288 * x5781;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6290 = x6287 - x6289;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6291 = x5780 + x5782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6292 = x5780 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6293 = x6292 * x5782;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6294 = x6291 - x6293;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6295 = x5781 + x5783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6296 = x5781 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6297 = x6296 * x5783;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6298 = x6295 - x6297;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6299 = x5782 + x5784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6300 = x5782 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6301 = x6300 * x5784;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6302 = x6299 - x6301;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6303 = x5863 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6304 = x5862 + x6303;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6305 = x5864 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6306 = x6304 + x6305;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6307 = x5865 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6308 = x6306 + x6307;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6309 = x5866 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6310 = x6308 + x6309;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6311 = x5867 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6312 = x6310 + x6311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6313 = x5868 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6314 = x6312 + x6313;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6315 = x5869 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6316 = x6314 + x6315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6317 = x5870 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6318 = x6316 + x6317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6319 = x5871 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6320 = x6318 + x6319;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6321 = x5872 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6322 = x6320 + x6321;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6323 = x5873 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6324 = x6322 + x6323;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6325 = x5874 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6326 = x6324 + x6325;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6327 = x5875 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6328 = x6326 + x6327;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6329 = x5876 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6330 = x6328 + x6329;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6331 = x5877 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6332 = x6330 + x6331;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6333 = x5879 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6334 = x5878 + x6333;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6335 = x5880 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6336 = x6334 + x6335;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6337 = x5881 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6338 = x6336 + x6337;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6339 = x5882 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6340 = x6338 + x6339;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6341 = x5883 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6342 = x6340 + x6341;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6343 = x5884 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6344 = x6342 + x6343;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6345 = x5885 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6346 = x6344 + x6345;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6347 = x5886 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6348 = x6346 + x6347;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6349 = x5887 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6350 = x6348 + x6349;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6351 = x5888 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6352 = x6350 + x6351;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6353 = x5889 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6354 = x6352 + x6353;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6355 = x5890 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6356 = x6354 + x6355;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6357 = x5891 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6358 = x6356 + x6357;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6359 = x5892 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6360 = x6358 + x6359;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6361 = x5893 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6362 = x6360 + x6361;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6363 = x6015 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6364 = x6012 + x6363;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6365 = x6018 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6366 = x6364 + x6365;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6367 = x6021 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6368 = x6366 + x6367;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6369 = x6024 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6370 = x6368 + x6369;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6371 = x6027 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6372 = x6370 + x6371;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6373 = x6030 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6374 = x6372 + x6373;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6375 = x6033 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6376 = x6374 + x6375;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6377 = x6037 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6378 = x6376 + x6377;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6379 = x6041 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6380 = x6378 + x6379;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6381 = x6045 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6382 = x6380 + x6381;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6383 = x6048 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6384 = x6382 + x6383;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6385 = x6051 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6386 = x6384 + x6385;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6387 = x6054 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6388 = x6386 + x6387;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6389 = x6057 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6390 = x6388 + x6389;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6391 = x6060 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6392 = x6390 + x6391;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6393 = x6066 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6394 = x6063 + x6393;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6395 = x6069 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6396 = x6394 + x6395;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6397 = x6072 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6398 = x6396 + x6397;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6399 = x6075 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6400 = x6398 + x6399;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6401 = x6078 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6402 = x6400 + x6401;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6403 = x6081 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6404 = x6402 + x6403;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6405 = x6084 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6406 = x6404 + x6405;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6407 = x6087 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6408 = x6406 + x6407;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6409 = x6090 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6410 = x6408 + x6409;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6411 = x6093 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6412 = x6410 + x6411;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6413 = x6096 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6414 = x6412 + x6413;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6415 = x6099 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6416 = x6414 + x6415;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6417 = x6102 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6418 = x6416 + x6417;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6419 = x6105 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6420 = x6418 + x6419;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6421 = x6108 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6422 = x6420 + x6421;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6423 = x5799 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6424 = x5798 + x6423;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6425 = x5800 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6426 = x6424 + x6425;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6427 = x5801 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6428 = x6426 + x6427;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6429 = x5802 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6430 = x6428 + x6429;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6431 = x5803 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6432 = x6430 + x6431;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6433 = x5804 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6434 = x6432 + x6433;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6435 = x5805 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6436 = x6434 + x6435;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6437 = x5806 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6438 = x6436 + x6437;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6439 = x5807 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6440 = x6438 + x6439;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6441 = x5808 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6442 = x6440 + x6441;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6443 = x5809 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6444 = x6442 + x6443;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6445 = x5810 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6446 = x6444 + x6445;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6447 = x5811 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6448 = x6446 + x6447;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6449 = x5812 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6450 = x6448 + x6449;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6451 = x5813 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6452 = x6450 + x6451;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6453 = x5815 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6454 = x5814 + x6453;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6455 = x5816 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6456 = x6454 + x6455;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6457 = x5817 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6458 = x6456 + x6457;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6459 = x5818 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6460 = x6458 + x6459;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6461 = x5819 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6462 = x6460 + x6461;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6463 = x5820 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6464 = x6462 + x6463;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6465 = x5821 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6466 = x6464 + x6465;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6467 = x5822 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6468 = x6466 + x6467;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6469 = x5823 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6470 = x6468 + x6469;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6471 = x5824 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6472 = x6470 + x6471;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6473 = x5825 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6474 = x6472 + x6473;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6475 = x5826 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6476 = x6474 + x6475;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6477 = x5827 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6478 = x6476 + x6477;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6479 = x5828 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6480 = x6478 + x6479;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6481 = x5829 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6482 = x6480 + x6481;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6483 = x6204 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6484 = x6200 + x6483;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6485 = x6207 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6486 = x6484 + x6485;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6487 = x6210 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6488 = x6486 + x6487;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6489 = x6213 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6490 = x6488 + x6489;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6491 = x6216 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6492 = x6490 + x6491;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6493 = x6219 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6494 = x6492 + x6493;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6495 = x6222 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6496 = x6494 + x6495;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6497 = x6225 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6498 = x6496 + x6497;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6499 = x6228 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6500 = x6498 + x6499;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6501 = x6231 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6502 = x6500 + x6501;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6503 = x6234 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6504 = x6502 + x6503;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6505 = x6237 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6506 = x6504 + x6505;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6507 = x6240 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6508 = x6506 + x6507;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6509 = x6243 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6510 = x6508 + x6509;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6511 = x6246 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6512 = x6510 + x6511;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6513 = x6252 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6514 = x6249 + x6513;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6515 = x6255 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6516 = x6514 + x6515;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6517 = x6258 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6518 = x6516 + x6517;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6519 = x6261 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6520 = x6518 + x6519;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6521 = x6264 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6522 = x6520 + x6521;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6523 = x6267 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6524 = x6522 + x6523;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6525 = x6270 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6526 = x6524 + x6525;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6527 = x6274 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6528 = x6526 + x6527;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6529 = x6278 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6530 = x6528 + x6529;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6531 = x6282 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6532 = x6530 + x6531;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6533 = x6286 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6534 = x6532 + x6533;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6535 = x6290 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6536 = x6534 + x6535;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6537 = x6294 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6538 = x6536 + x6537;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6539 = x6298 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6540 = x6538 + x6539;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x6541 = x6302 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x6542 = x6540 + x6541;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6543 = x6452 + x6512;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6544 = x6482 + x6542;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6545 = x6392 + x6543;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6546 = x6422 + x6544;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6547 = x6332 + x6545;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x6548 = x6362 + x6546;
      // loc("zirgen/circuit/recursion/sha.cpp":261:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6547);
        reg = x6547;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":261:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6548);
        reg = x6548;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6549 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x6549 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6550 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x6550 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6551 = Fp(x6549.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][94 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6551);
          reg = x6551;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6552 = Fp(x6549.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6553 = x6552 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][95 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6553);
          reg = x6553;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6554 = Fp(x6549.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6555 = x6554 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][96 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6555);
          reg = x6555;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6556 = Fp(x6549.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6557 = x6556 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][97 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6557);
          reg = x6557;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6558 = Fp(x6549.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6559 = x6558 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6559);
          reg = x6559;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6560 = Fp(x6549.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6561 = x6560 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6561);
          reg = x6561;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6562 = Fp(x6549.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6563 = x6562 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][100 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6563);
          reg = x6563;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6564 = Fp(x6549.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6565 = x6564 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][101 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6565);
          reg = x6565;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6566 = Fp(x6549.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6567 = x6566 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][102 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6567);
          reg = x6567;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6568 = Fp(x6549.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6569 = x6568 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][103 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6569);
          reg = x6569;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6570 = Fp(x6549.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6571 = x6570 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][104 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6571);
          reg = x6571;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6572 = Fp(x6549.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6573 = x6572 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][105 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6573);
          reg = x6573;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6574 = Fp(x6549.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6575 = x6574 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][106 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6575);
          reg = x6575;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6576 = Fp(x6549.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6577 = x6576 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6577);
          reg = x6577;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6578 = Fp(x6549.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6579 = x6578 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6579);
          reg = x6579;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6580 = Fp(x6549.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6581 = x6580 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6581);
          reg = x6581;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6582 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x6582 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6583 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x6583 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6584 = x6583 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6585 = x6582 + x6584;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6586 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x6586 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6587 = x6586 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6588 = x6585 + x6587;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6589 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x6589 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6590 = x6589 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6591 = x6588 + x6590;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6592 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x6592 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6593 = x6592 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6594 = x6591 + x6593;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6595 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6596 = x6595 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6597 = x6594 + x6596;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6598 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6599 = x6598 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6600 = x6597 + x6599;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6601 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6602 = x6601 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6603 = x6600 + x6602;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6604 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6605 = x6604 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6606 = x6603 + x6605;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6607 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6608 = x6607 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6609 = x6606 + x6608;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6610 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6611 = x6610 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6612 = x6609 + x6611;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6613 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x6613 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6614 = x6613 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6615 = x6612 + x6614;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6616 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x6616 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6617 = x6616 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6618 = x6615 + x6617;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6619 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6620 = x6619 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6621 = x6618 + x6620;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6622 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x6622 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6623 = x6622 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6624 = x6621 + x6623;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6625 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x6625 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6626 = x6625 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6627 = x6624 + x6626;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x6628 = x6549 - x6627;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x6629 = x6628 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x6630 = Fp(x6629.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6630);
          reg = x6630;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x6631 = x6550 + x6629;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6632 = Fp(x6631.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6632);
          reg = x6632;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6633 = Fp(x6631.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6634 = x6633 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6634);
          reg = x6634;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6635 = Fp(x6631.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6636 = x6635 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6636);
          reg = x6636;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6637 = Fp(x6631.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6638 = x6637 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6638);
          reg = x6638;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6639 = Fp(x6631.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6640 = x6639 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6640);
          reg = x6640;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6641 = Fp(x6631.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6642 = x6641 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6642);
          reg = x6642;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6643 = Fp(x6631.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6644 = x6643 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6644);
          reg = x6644;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6645 = Fp(x6631.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6646 = x6645 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6646);
          reg = x6646;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6647 = Fp(x6631.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6648 = x6647 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6648);
          reg = x6648;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6649 = Fp(x6631.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6650 = x6649 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6650);
          reg = x6650;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6651 = Fp(x6631.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6652 = x6651 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6652);
          reg = x6652;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6653 = Fp(x6631.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6654 = x6653 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6654);
          reg = x6654;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6655 = Fp(x6631.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6656 = x6655 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6656);
          reg = x6656;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6657 = Fp(x6631.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6658 = x6657 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6658);
          reg = x6658;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6659 = Fp(x6631.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6660 = x6659 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6660);
          reg = x6660;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x6661 = Fp(x6631.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x6662 = x6661 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6662);
          reg = x6662;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6663 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6664 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6665 = x6664 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6666 = x6663 + x6665;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6667 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6668 = x6667 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6669 = x6666 + x6668;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6670 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6671 = x6670 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6672 = x6669 + x6671;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6673 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6674 = x6673 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6675 = x6672 + x6674;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6676 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6677 = x6676 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6678 = x6675 + x6677;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6679 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6680 = x6679 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6681 = x6678 + x6680;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6682 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6683 = x6682 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6684 = x6681 + x6683;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6685 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6686 = x6685 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6687 = x6684 + x6686;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6688 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6689 = x6688 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6690 = x6687 + x6689;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6691 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6692 = x6691 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6693 = x6690 + x6692;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6694 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6695 = x6694 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6696 = x6693 + x6695;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6697 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6698 = x6697 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6699 = x6696 + x6698;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6700 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6701 = x6700 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6702 = x6699 + x6701;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6703 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6704 = x6703 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6705 = x6702 + x6704;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/w[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6706 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x6707 = x6706 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x6708 = x6705 + x6707;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x6709 = x6631 - x6708;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x6710 = x6709 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x6711 = Fp(x6710.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6711);
          reg = x6711;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6712 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6713 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6714 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6715 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6716 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6717 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6718 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6719 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6720 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6721 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6722 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6723 = args[2][37 * steps + ((cycle - 1) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6724 = args[2][38 * steps + ((cycle - 1) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6725 = args[2][39 * steps + ((cycle - 1) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6726 = args[2][40 * steps + ((cycle - 1) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6727 = args[2][41 * steps + ((cycle - 1) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6728 = args[2][42 * steps + ((cycle - 1) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6729 = args[2][43 * steps + ((cycle - 1) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6730 = args[2][44 * steps + ((cycle - 1) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6731 = args[2][45 * steps + ((cycle - 1) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6732 = args[2][46 * steps + ((cycle - 1) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6733 = args[2][47 * steps + ((cycle - 1) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6734 = args[2][48 * steps + ((cycle - 1) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6735 = args[2][49 * steps + ((cycle - 1) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6736 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6737 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6738 = args[2][52 * steps + ((cycle - 1) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6739 = args[2][53 * steps + ((cycle - 1) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6740 = args[2][54 * steps + ((cycle - 1) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6741 = args[2][55 * steps + ((cycle - 1) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6742 = args[2][56 * steps + ((cycle - 1) & mask)];
      assert(x6742 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6743 = args[2][57 * steps + ((cycle - 1) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6744 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x6744 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6745 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x6745 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6746 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6747 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x6747 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6748 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x6748 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6749 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6750 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x6750 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6751 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x6751 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6752 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x6752 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6753 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x6753 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6754 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6755 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x6755 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6756 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x6756 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6757 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x6757 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6758 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x6758 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6759 = args[2][41 * steps + ((cycle - 2) & mask)];
      assert(x6759 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6760 = args[2][42 * steps + ((cycle - 2) & mask)];
      assert(x6760 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6761 = args[2][43 * steps + ((cycle - 2) & mask)];
      assert(x6761 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6762 = args[2][44 * steps + ((cycle - 2) & mask)];
      assert(x6762 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6763 = args[2][45 * steps + ((cycle - 2) & mask)];
      assert(x6763 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6764 = args[2][46 * steps + ((cycle - 2) & mask)];
      assert(x6764 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6765 = args[2][47 * steps + ((cycle - 2) & mask)];
      assert(x6765 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6766 = args[2][48 * steps + ((cycle - 2) & mask)];
      assert(x6766 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6767 = args[2][49 * steps + ((cycle - 2) & mask)];
      assert(x6767 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6768 = args[2][50 * steps + ((cycle - 2) & mask)];
      assert(x6768 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6769 = args[2][51 * steps + ((cycle - 2) & mask)];
      assert(x6769 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6770 = args[2][52 * steps + ((cycle - 2) & mask)];
      assert(x6770 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6771 = args[2][53 * steps + ((cycle - 2) & mask)];
      assert(x6771 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6772 = args[2][54 * steps + ((cycle - 2) & mask)];
      assert(x6772 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6773 = args[2][55 * steps + ((cycle - 2) & mask)];
      assert(x6773 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6774 = args[2][56 * steps + ((cycle - 2) & mask)];
      assert(x6774 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6775 = args[2][57 * steps + ((cycle - 2) & mask)];
      assert(x6775 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6776 = args[2][26 * steps + ((cycle - 3) & mask)];
      assert(x6776 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6777 = args[2][27 * steps + ((cycle - 3) & mask)];
      assert(x6777 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6778 = args[2][28 * steps + ((cycle - 3) & mask)];
      assert(x6778 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6779 = args[2][29 * steps + ((cycle - 3) & mask)];
      assert(x6779 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6780 = args[2][30 * steps + ((cycle - 3) & mask)];
      assert(x6780 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6781 = args[2][31 * steps + ((cycle - 3) & mask)];
      assert(x6781 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6782 = args[2][32 * steps + ((cycle - 3) & mask)];
      assert(x6782 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6783 = args[2][33 * steps + ((cycle - 3) & mask)];
      assert(x6783 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6784 = args[2][34 * steps + ((cycle - 3) & mask)];
      assert(x6784 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6785 = args[2][35 * steps + ((cycle - 3) & mask)];
      assert(x6785 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6786 = args[2][36 * steps + ((cycle - 3) & mask)];
      assert(x6786 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6787 = args[2][37 * steps + ((cycle - 3) & mask)];
      assert(x6787 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6788 = args[2][38 * steps + ((cycle - 3) & mask)];
      assert(x6788 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6789 = args[2][39 * steps + ((cycle - 3) & mask)];
      assert(x6789 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6790 = args[2][40 * steps + ((cycle - 3) & mask)];
      assert(x6790 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6791 = args[2][41 * steps + ((cycle - 3) & mask)];
      assert(x6791 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6792 = args[2][42 * steps + ((cycle - 3) & mask)];
      assert(x6792 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6793 = args[2][43 * steps + ((cycle - 3) & mask)];
      assert(x6793 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6794 = args[2][44 * steps + ((cycle - 3) & mask)];
      assert(x6794 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6795 = args[2][45 * steps + ((cycle - 3) & mask)];
      assert(x6795 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6796 = args[2][46 * steps + ((cycle - 3) & mask)];
      assert(x6796 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6797 = args[2][47 * steps + ((cycle - 3) & mask)];
      assert(x6797 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6798 = args[2][48 * steps + ((cycle - 3) & mask)];
      assert(x6798 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6799 = args[2][49 * steps + ((cycle - 3) & mask)];
      assert(x6799 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6800 = args[2][50 * steps + ((cycle - 3) & mask)];
      assert(x6800 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6801 = args[2][51 * steps + ((cycle - 3) & mask)];
      assert(x6801 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6802 = args[2][52 * steps + ((cycle - 3) & mask)];
      assert(x6802 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6803 = args[2][53 * steps + ((cycle - 3) & mask)];
      assert(x6803 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6804 = args[2][54 * steps + ((cycle - 3) & mask)];
      assert(x6804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6805 = args[2][55 * steps + ((cycle - 3) & mask)];
      assert(x6805 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6806 = args[2][56 * steps + ((cycle - 3) & mask)];
      assert(x6806 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6807 = args[2][57 * steps + ((cycle - 3) & mask)];
      assert(x6807 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6808 = args[2][26 * steps + ((cycle - 4) & mask)];
      assert(x6808 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6809 = args[2][27 * steps + ((cycle - 4) & mask)];
      assert(x6809 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6810 = args[2][28 * steps + ((cycle - 4) & mask)];
      assert(x6810 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6811 = args[2][29 * steps + ((cycle - 4) & mask)];
      assert(x6811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6812 = args[2][30 * steps + ((cycle - 4) & mask)];
      assert(x6812 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6813 = args[2][31 * steps + ((cycle - 4) & mask)];
      assert(x6813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6814 = args[2][32 * steps + ((cycle - 4) & mask)];
      assert(x6814 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6815 = args[2][33 * steps + ((cycle - 4) & mask)];
      assert(x6815 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6816 = args[2][34 * steps + ((cycle - 4) & mask)];
      assert(x6816 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6817 = args[2][35 * steps + ((cycle - 4) & mask)];
      assert(x6817 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6818 = args[2][36 * steps + ((cycle - 4) & mask)];
      assert(x6818 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6819 = args[2][37 * steps + ((cycle - 4) & mask)];
      assert(x6819 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6820 = args[2][38 * steps + ((cycle - 4) & mask)];
      assert(x6820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6821 = args[2][39 * steps + ((cycle - 4) & mask)];
      assert(x6821 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6822 = args[2][40 * steps + ((cycle - 4) & mask)];
      assert(x6822 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6823 = args[2][41 * steps + ((cycle - 4) & mask)];
      assert(x6823 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6824 = args[2][42 * steps + ((cycle - 4) & mask)];
      assert(x6824 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6825 = args[2][43 * steps + ((cycle - 4) & mask)];
      assert(x6825 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6826 = args[2][44 * steps + ((cycle - 4) & mask)];
      assert(x6826 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6827 = args[2][45 * steps + ((cycle - 4) & mask)];
      assert(x6827 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6828 = args[2][46 * steps + ((cycle - 4) & mask)];
      assert(x6828 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6829 = args[2][47 * steps + ((cycle - 4) & mask)];
      assert(x6829 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6830 = args[2][48 * steps + ((cycle - 4) & mask)];
      assert(x6830 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6831 = args[2][49 * steps + ((cycle - 4) & mask)];
      assert(x6831 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6832 = args[2][50 * steps + ((cycle - 4) & mask)];
      assert(x6832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6833 = args[2][51 * steps + ((cycle - 4) & mask)];
      assert(x6833 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6834 = args[2][52 * steps + ((cycle - 4) & mask)];
      assert(x6834 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6835 = args[2][53 * steps + ((cycle - 4) & mask)];
      assert(x6835 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6836 = args[2][54 * steps + ((cycle - 4) & mask)];
      assert(x6836 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6837 = args[2][55 * steps + ((cycle - 4) & mask)];
      assert(x6837 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6838 = args[2][56 * steps + ((cycle - 4) & mask)];
      assert(x6838 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6839 = args[2][57 * steps + ((cycle - 4) & mask)];
      assert(x6839 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6840 = args[2][60 * steps + ((cycle - 1) & mask)];
      assert(x6840 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6841 = args[2][61 * steps + ((cycle - 1) & mask)];
      assert(x6841 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6842 = args[2][62 * steps + ((cycle - 1) & mask)];
      assert(x6842 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6843 = args[2][63 * steps + ((cycle - 1) & mask)];
      assert(x6843 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6844 = args[2][64 * steps + ((cycle - 1) & mask)];
      assert(x6844 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6845 = args[2][65 * steps + ((cycle - 1) & mask)];
      assert(x6845 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6846 = args[2][66 * steps + ((cycle - 1) & mask)];
      assert(x6846 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6847 = args[2][67 * steps + ((cycle - 1) & mask)];
      assert(x6847 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6848 = args[2][68 * steps + ((cycle - 1) & mask)];
      assert(x6848 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6849 = args[2][69 * steps + ((cycle - 1) & mask)];
      assert(x6849 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6850 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x6850 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6851 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x6851 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6852 = args[2][72 * steps + ((cycle - 1) & mask)];
      assert(x6852 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6853 = args[2][73 * steps + ((cycle - 1) & mask)];
      assert(x6853 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6854 = args[2][74 * steps + ((cycle - 1) & mask)];
      assert(x6854 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6855 = args[2][75 * steps + ((cycle - 1) & mask)];
      assert(x6855 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6856 = args[2][76 * steps + ((cycle - 1) & mask)];
      assert(x6856 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6857 = args[2][77 * steps + ((cycle - 1) & mask)];
      assert(x6857 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6858 = args[2][78 * steps + ((cycle - 1) & mask)];
      assert(x6858 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6859 = args[2][79 * steps + ((cycle - 1) & mask)];
      assert(x6859 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6860 = args[2][80 * steps + ((cycle - 1) & mask)];
      assert(x6860 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6861 = args[2][81 * steps + ((cycle - 1) & mask)];
      assert(x6861 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6862 = args[2][82 * steps + ((cycle - 1) & mask)];
      assert(x6862 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6863 = args[2][83 * steps + ((cycle - 1) & mask)];
      assert(x6863 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6864 = args[2][84 * steps + ((cycle - 1) & mask)];
      assert(x6864 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6865 = args[2][85 * steps + ((cycle - 1) & mask)];
      assert(x6865 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6866 = args[2][86 * steps + ((cycle - 1) & mask)];
      assert(x6866 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6867 = args[2][87 * steps + ((cycle - 1) & mask)];
      assert(x6867 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6868 = args[2][88 * steps + ((cycle - 1) & mask)];
      assert(x6868 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6869 = args[2][89 * steps + ((cycle - 1) & mask)];
      assert(x6869 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6870 = args[2][90 * steps + ((cycle - 1) & mask)];
      assert(x6870 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6871 = args[2][91 * steps + ((cycle - 1) & mask)];
      assert(x6871 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6872 = args[2][60 * steps + ((cycle - 2) & mask)];
      assert(x6872 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6873 = args[2][61 * steps + ((cycle - 2) & mask)];
      assert(x6873 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6874 = args[2][62 * steps + ((cycle - 2) & mask)];
      assert(x6874 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6875 = args[2][63 * steps + ((cycle - 2) & mask)];
      assert(x6875 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6876 = args[2][64 * steps + ((cycle - 2) & mask)];
      assert(x6876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6877 = args[2][65 * steps + ((cycle - 2) & mask)];
      assert(x6877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6878 = args[2][66 * steps + ((cycle - 2) & mask)];
      assert(x6878 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6879 = args[2][67 * steps + ((cycle - 2) & mask)];
      assert(x6879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6880 = args[2][68 * steps + ((cycle - 2) & mask)];
      assert(x6880 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6881 = args[2][69 * steps + ((cycle - 2) & mask)];
      assert(x6881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6882 = args[2][70 * steps + ((cycle - 2) & mask)];
      assert(x6882 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6883 = args[2][71 * steps + ((cycle - 2) & mask)];
      assert(x6883 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6884 = args[2][72 * steps + ((cycle - 2) & mask)];
      assert(x6884 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6885 = args[2][73 * steps + ((cycle - 2) & mask)];
      assert(x6885 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6886 = args[2][74 * steps + ((cycle - 2) & mask)];
      assert(x6886 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6887 = args[2][75 * steps + ((cycle - 2) & mask)];
      assert(x6887 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6888 = args[2][76 * steps + ((cycle - 2) & mask)];
      assert(x6888 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6889 = args[2][77 * steps + ((cycle - 2) & mask)];
      assert(x6889 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6890 = args[2][78 * steps + ((cycle - 2) & mask)];
      assert(x6890 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6891 = args[2][79 * steps + ((cycle - 2) & mask)];
      assert(x6891 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6892 = args[2][80 * steps + ((cycle - 2) & mask)];
      assert(x6892 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6893 = args[2][81 * steps + ((cycle - 2) & mask)];
      assert(x6893 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6894 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x6894 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6895 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x6895 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6896 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x6896 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6897 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x6897 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6898 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x6898 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6899 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x6899 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6900 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x6900 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6901 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x6901 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6902 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x6902 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6903 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x6903 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6904 = args[2][60 * steps + ((cycle - 3) & mask)];
      assert(x6904 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6905 = args[2][61 * steps + ((cycle - 3) & mask)];
      assert(x6905 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6906 = args[2][62 * steps + ((cycle - 3) & mask)];
      assert(x6906 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6907 = args[2][63 * steps + ((cycle - 3) & mask)];
      assert(x6907 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6908 = args[2][64 * steps + ((cycle - 3) & mask)];
      assert(x6908 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6909 = args[2][65 * steps + ((cycle - 3) & mask)];
      assert(x6909 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6910 = args[2][66 * steps + ((cycle - 3) & mask)];
      assert(x6910 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6911 = args[2][67 * steps + ((cycle - 3) & mask)];
      assert(x6911 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6912 = args[2][68 * steps + ((cycle - 3) & mask)];
      assert(x6912 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6913 = args[2][69 * steps + ((cycle - 3) & mask)];
      assert(x6913 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6914 = args[2][70 * steps + ((cycle - 3) & mask)];
      assert(x6914 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6915 = args[2][71 * steps + ((cycle - 3) & mask)];
      assert(x6915 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6916 = args[2][72 * steps + ((cycle - 3) & mask)];
      assert(x6916 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6917 = args[2][73 * steps + ((cycle - 3) & mask)];
      assert(x6917 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6918 = args[2][74 * steps + ((cycle - 3) & mask)];
      assert(x6918 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6919 = args[2][75 * steps + ((cycle - 3) & mask)];
      assert(x6919 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6920 = args[2][76 * steps + ((cycle - 3) & mask)];
      assert(x6920 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6921 = args[2][77 * steps + ((cycle - 3) & mask)];
      assert(x6921 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6922 = args[2][78 * steps + ((cycle - 3) & mask)];
      assert(x6922 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6923 = args[2][79 * steps + ((cycle - 3) & mask)];
      assert(x6923 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6924 = args[2][80 * steps + ((cycle - 3) & mask)];
      assert(x6924 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6925 = args[2][81 * steps + ((cycle - 3) & mask)];
      assert(x6925 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6926 = args[2][82 * steps + ((cycle - 3) & mask)];
      assert(x6926 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6927 = args[2][83 * steps + ((cycle - 3) & mask)];
      assert(x6927 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6928 = args[2][84 * steps + ((cycle - 3) & mask)];
      assert(x6928 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6929 = args[2][85 * steps + ((cycle - 3) & mask)];
      assert(x6929 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6930 = args[2][86 * steps + ((cycle - 3) & mask)];
      assert(x6930 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6931 = args[2][87 * steps + ((cycle - 3) & mask)];
      assert(x6931 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6932 = args[2][88 * steps + ((cycle - 3) & mask)];
      assert(x6932 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6933 = args[2][89 * steps + ((cycle - 3) & mask)];
      assert(x6933 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6934 = args[2][90 * steps + ((cycle - 3) & mask)];
      assert(x6934 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6935 = args[2][91 * steps + ((cycle - 3) & mask)];
      assert(x6935 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6936 = args[2][60 * steps + ((cycle - 4) & mask)];
      assert(x6936 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6937 = args[2][61 * steps + ((cycle - 4) & mask)];
      assert(x6937 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6938 = args[2][62 * steps + ((cycle - 4) & mask)];
      assert(x6938 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6939 = args[2][63 * steps + ((cycle - 4) & mask)];
      assert(x6939 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6940 = args[2][64 * steps + ((cycle - 4) & mask)];
      assert(x6940 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6941 = args[2][65 * steps + ((cycle - 4) & mask)];
      assert(x6941 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6942 = args[2][66 * steps + ((cycle - 4) & mask)];
      assert(x6942 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6943 = args[2][67 * steps + ((cycle - 4) & mask)];
      assert(x6943 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6944 = args[2][68 * steps + ((cycle - 4) & mask)];
      assert(x6944 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6945 = args[2][69 * steps + ((cycle - 4) & mask)];
      assert(x6945 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6946 = args[2][70 * steps + ((cycle - 4) & mask)];
      assert(x6946 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6947 = args[2][71 * steps + ((cycle - 4) & mask)];
      assert(x6947 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6948 = args[2][72 * steps + ((cycle - 4) & mask)];
      assert(x6948 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6949 = args[2][73 * steps + ((cycle - 4) & mask)];
      assert(x6949 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6950 = args[2][74 * steps + ((cycle - 4) & mask)];
      assert(x6950 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6951 = args[2][75 * steps + ((cycle - 4) & mask)];
      assert(x6951 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6952 = args[2][76 * steps + ((cycle - 4) & mask)];
      assert(x6952 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6953 = args[2][77 * steps + ((cycle - 4) & mask)];
      assert(x6953 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6954 = args[2][78 * steps + ((cycle - 4) & mask)];
      assert(x6954 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6955 = args[2][79 * steps + ((cycle - 4) & mask)];
      assert(x6955 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6956 = args[2][80 * steps + ((cycle - 4) & mask)];
      assert(x6956 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6957 = args[2][81 * steps + ((cycle - 4) & mask)];
      assert(x6957 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6958 = args[2][82 * steps + ((cycle - 4) & mask)];
      assert(x6958 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6959 = args[2][83 * steps + ((cycle - 4) & mask)];
      assert(x6959 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6960 = args[2][84 * steps + ((cycle - 4) & mask)];
      assert(x6960 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6961 = args[2][85 * steps + ((cycle - 4) & mask)];
      assert(x6961 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6962 = args[2][86 * steps + ((cycle - 4) & mask)];
      assert(x6962 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6963 = args[2][87 * steps + ((cycle - 4) & mask)];
      assert(x6963 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6964 = args[2][88 * steps + ((cycle - 4) & mask)];
      assert(x6964 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6965 = args[2][89 * steps + ((cycle - 4) & mask)];
      assert(x6965 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6966 = args[2][90 * steps + ((cycle - 4) & mask)];
      assert(x6966 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6967 = args[2][91 * steps + ((cycle - 4) & mask)];
      assert(x6967 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x6968 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x6968 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x6969 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x6969 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6970 = x6725 + x6734;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6971 = x6725 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6972 = x6971 * x6734;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6973 = x6970 - x6972;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6974 = x6726 + x6735;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6975 = x6726 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6976 = x6975 * x6735;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6977 = x6974 - x6976;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6978 = x6727 + x6736;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6979 = x6727 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6980 = x6979 * x6736;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6981 = x6978 - x6980;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6982 = x6728 + x6737;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6983 = x6728 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6984 = x6983 * x6737;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6985 = x6982 - x6984;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6986 = x6729 + x6738;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6987 = x6729 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6988 = x6987 * x6738;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6989 = x6986 - x6988;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6990 = x6730 + x6739;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6991 = x6730 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6992 = x6991 * x6739;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6993 = x6990 - x6992;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6994 = x6731 + x6740;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6995 = x6731 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6996 = x6995 * x6740;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6997 = x6994 - x6996;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x6998 = x6732 + x6741;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x6999 = x6732 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7000 = x6999 * x6741;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7001 = x6998 - x7000;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7002 = x6733 + x6742;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7003 = x6733 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7004 = x7003 * x6742;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7005 = x7002 - x7004;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7006 = x6734 + x6743;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7007 = x6734 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7008 = x7007 * x6743;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7009 = x7006 - x7008;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7010 = x6735 + x6712;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7011 = x6735 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7012 = x7011 * x6712;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7013 = x7010 - x7012;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7014 = x6736 + x6713;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7015 = x6736 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7016 = x7015 * x6713;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7017 = x7014 - x7016;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7018 = x6737 + x6714;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7019 = x6737 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7020 = x7019 * x6714;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7021 = x7018 - x7020;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7022 = x6738 + x6715;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7023 = x6738 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7024 = x7023 * x6715;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7025 = x7022 - x7024;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7026 = x6739 + x6716;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7027 = x6739 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7028 = x7027 * x6716;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7029 = x7026 - x7028;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7030 = x6740 + x6717;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7031 = x6740 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7032 = x7031 * x6717;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7033 = x7030 - x7032;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7034 = x6741 + x6718;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7035 = x6741 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7036 = x7035 * x6718;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7037 = x7034 - x7036;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7038 = x6742 + x6719;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7039 = x6742 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7040 = x7039 * x6719;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7041 = x7038 - x7040;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7042 = x6743 + x6720;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7043 = x6743 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7044 = x7043 * x6720;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7045 = x7042 - x7044;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7046 = x6712 + x6721;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7047 = x6712 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7048 = x7047 * x6721;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7049 = x7046 - x7048;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7050 = x6713 + x6722;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7051 = x6713 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7052 = x7051 * x6722;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7053 = x7050 - x7052;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7054 = x6714 + x6723;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7055 = x6714 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7056 = x7055 * x6723;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7057 = x7054 - x7056;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7058 = x6715 + x6724;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7059 = x6715 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7060 = x7059 * x6724;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7061 = x7058 - x7060;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7062 = x6716 + x6725;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7063 = x6716 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7064 = x7063 * x6725;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7065 = x7062 - x7064;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7066 = x6717 + x6726;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7067 = x6717 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7068 = x7067 * x6726;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7069 = x7066 - x7068;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7070 = x6718 + x6727;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7071 = x6718 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7072 = x7071 * x6727;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7073 = x7070 - x7072;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7074 = x6719 + x6728;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7075 = x6719 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7076 = x7075 * x6728;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7077 = x7074 - x7076;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7078 = x6720 + x6729;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7079 = x6720 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7080 = x7079 * x6729;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7081 = x7078 - x7080;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7082 = x6721 + x6730;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7083 = x6721 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7084 = x7083 * x6730;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7085 = x7082 - x7084;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7086 = x6722 + x6731;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7087 = x6722 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7088 = x7087 * x6731;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7089 = x7086 - x7088;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7090 = x6723 + x6732;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7091 = x6723 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7092 = x7091 * x6732;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7093 = x7090 - x7092;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7094 = x6724 + x6733;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7095 = x6724 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7096 = x7095 * x6733;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7097 = x7094 - x7096;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7098 = x6714 + x6973;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7099 = x7055 * x6973;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7100 = x7098 - x7099;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7101 = x6715 + x6977;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7102 = x7059 * x6977;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7103 = x7101 - x7102;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7104 = x6716 + x6981;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7105 = x7063 * x6981;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7106 = x7104 - x7105;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7107 = x6717 + x6985;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7108 = x7067 * x6985;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7109 = x7107 - x7108;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7110 = x6718 + x6989;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7111 = x7071 * x6989;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7112 = x7110 - x7111;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7113 = x6719 + x6993;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7114 = x7075 * x6993;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7115 = x7113 - x7114;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7116 = x6720 + x6997;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7117 = x7079 * x6997;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7118 = x7116 - x7117;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7119 = x6721 + x7001;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7120 = x7083 * x7001;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7121 = x7119 - x7120;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7122 = x6722 + x7005;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7123 = x7087 * x7005;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7124 = x7122 - x7123;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7125 = x6723 + x7009;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7126 = x7091 * x7009;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7127 = x7125 - x7126;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7128 = x6724 + x7013;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7129 = x7095 * x7013;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7130 = x7128 - x7129;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7131 = x6725 + x7017;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7132 = x6971 * x7017;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7133 = x7131 - x7132;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7134 = x6726 + x7021;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7135 = x6975 * x7021;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7136 = x7134 - x7135;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7137 = x6727 + x7025;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7138 = x6979 * x7025;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7139 = x7137 - x7138;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7140 = x6728 + x7029;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7141 = x6983 * x7029;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7142 = x7140 - x7141;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7143 = x6729 + x7033;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7144 = x6987 * x7033;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7145 = x7143 - x7144;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7146 = x6730 + x7037;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7147 = x6991 * x7037;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7148 = x7146 - x7147;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7149 = x6731 + x7041;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7150 = x6995 * x7041;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7151 = x7149 - x7150;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7152 = x6732 + x7045;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7153 = x6999 * x7045;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7154 = x7152 - x7153;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7155 = x6733 + x7049;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7156 = x7003 * x7049;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7157 = x7155 - x7156;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7158 = x6734 + x7053;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7159 = x7007 * x7053;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7160 = x7158 - x7159;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7161 = x6735 + x7057;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7162 = x7011 * x7057;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7163 = x7161 - x7162;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7164 = x6736 + x7061;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7165 = x7015 * x7061;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7166 = x7164 - x7165;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7167 = x6737 + x7065;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7168 = x7019 * x7065;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7169 = x7167 - x7168;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7170 = x6738 + x7069;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7171 = x7023 * x7069;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7172 = x7170 - x7171;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7173 = x6739 + x7073;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7174 = x7027 * x7073;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7175 = x7173 - x7174;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7176 = x6740 + x7077;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7177 = x7031 * x7077;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7178 = x7176 - x7177;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7179 = x6741 + x7081;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7180 = x7035 * x7081;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7181 = x7179 - x7180;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7182 = x6742 + x7085;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7183 = x7039 * x7085;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7184 = x7182 - x7183;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7185 = x6743 + x7089;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7186 = x7043 * x7089;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7187 = x7185 - x7186;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7188 = x6712 + x7093;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7189 = x7047 * x7093;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7190 = x7188 - x7189;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7191 = x6713 + x7097;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7192 = x7051 * x7097;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7193 = x7191 - x7192;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7194 = x6851 + x6865;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7195 = x6851 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7196 = x7195 * x6865;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7197 = x7194 - x7196;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7198 = x6852 + x6866;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7199 = x6852 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7200 = x7199 * x6866;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7201 = x7198 - x7200;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7202 = x6853 + x6867;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7203 = x6853 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7204 = x7203 * x6867;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7205 = x7202 - x7204;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7206 = x6854 + x6868;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7207 = x6854 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7208 = x7207 * x6868;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7209 = x7206 - x7208;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7210 = x6855 + x6869;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7211 = x6855 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7212 = x7211 * x6869;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7213 = x7210 - x7212;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7214 = x6856 + x6870;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7215 = x6856 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7216 = x7215 * x6870;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7217 = x7214 - x7216;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7218 = x6857 + x6871;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7219 = x6857 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7220 = x7219 * x6871;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7221 = x7218 - x7220;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7222 = x6858 + x6840;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7223 = x6858 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7224 = x7223 * x6840;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7225 = x7222 - x7224;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7226 = x6859 + x6841;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7227 = x6859 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7228 = x7227 * x6841;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7229 = x7226 - x7228;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7230 = x6860 + x6842;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7231 = x6860 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7232 = x7231 * x6842;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7233 = x7230 - x7232;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7234 = x6861 + x6843;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7235 = x6861 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7236 = x7235 * x6843;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7237 = x7234 - x7236;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7238 = x6862 + x6844;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7239 = x6862 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7240 = x7239 * x6844;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7241 = x7238 - x7240;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7242 = x6863 + x6845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7243 = x6863 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7244 = x7243 * x6845;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7245 = x7242 - x7244;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7246 = x6864 + x6846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7247 = x6864 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7248 = x7247 * x6846;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7249 = x7246 - x7248;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7250 = x6865 + x6847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7251 = x6865 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7252 = x7251 * x6847;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7253 = x7250 - x7252;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7254 = x6866 + x6848;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7255 = x6866 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7256 = x7255 * x6848;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7257 = x7254 - x7256;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7258 = x6867 + x6849;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7259 = x6867 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7260 = x7259 * x6849;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7261 = x7258 - x7260;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7262 = x6868 + x6850;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7263 = x6868 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7264 = x7263 * x6850;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7265 = x7262 - x7264;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7266 = x6869 + x6851;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7267 = x6869 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7268 = x7267 * x6851;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7269 = x7266 - x7268;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7270 = x6870 + x6852;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7271 = x6870 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7272 = x7271 * x6852;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7273 = x7270 - x7272;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7274 = x6871 + x6853;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7275 = x6871 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7276 = x7275 * x6853;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7277 = x7274 - x7276;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7278 = x6840 + x6854;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7279 = x6840 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7280 = x7279 * x6854;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7281 = x7278 - x7280;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7282 = x6841 + x6855;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7283 = x6841 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7284 = x7283 * x6855;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7285 = x7282 - x7284;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7286 = x6842 + x6856;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7287 = x6842 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7288 = x7287 * x6856;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7289 = x7286 - x7288;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7290 = x6843 + x6857;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7291 = x6843 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7292 = x7291 * x6857;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7293 = x7290 - x7292;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7294 = x6844 + x6858;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7295 = x6844 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7296 = x7295 * x6858;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7297 = x7294 - x7296;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7298 = x6845 + x6859;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7299 = x6845 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7300 = x7299 * x6859;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7301 = x7298 - x7300;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7302 = x6846 + x6860;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7303 = x6846 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7304 = x7303 * x6860;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7305 = x7302 - x7304;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7306 = x6847 + x6861;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7307 = x6847 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7308 = x7307 * x6861;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7309 = x7306 - x7308;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7310 = x6848 + x6862;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7311 = x6848 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7312 = x7311 * x6862;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7313 = x7310 - x7312;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7314 = x6849 + x6863;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7315 = x6849 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7316 = x7315 * x6863;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7317 = x7314 - x7316;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7318 = x6850 + x6864;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7319 = x6850 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7320 = x7319 * x6864;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7321 = x7318 - x7320;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7322 = x6846 + x7197;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7323 = x7303 * x7197;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7324 = x7322 - x7323;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7325 = x6847 + x7201;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7326 = x7307 * x7201;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7327 = x7325 - x7326;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7328 = x6848 + x7205;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7329 = x7311 * x7205;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7330 = x7328 - x7329;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7331 = x6849 + x7209;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7332 = x7315 * x7209;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7333 = x7331 - x7332;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7334 = x6850 + x7213;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7335 = x7319 * x7213;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7336 = x7334 - x7335;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7337 = x6851 + x7217;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7338 = x7195 * x7217;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7339 = x7337 - x7338;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7340 = x6852 + x7221;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7341 = x7199 * x7221;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7342 = x7340 - x7341;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7343 = x6853 + x7225;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7344 = x7203 * x7225;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7345 = x7343 - x7344;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7346 = x6854 + x7229;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7347 = x7207 * x7229;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7348 = x7346 - x7347;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7349 = x6855 + x7233;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7350 = x7211 * x7233;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7351 = x7349 - x7350;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7352 = x6856 + x7237;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7353 = x7215 * x7237;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7354 = x7352 - x7353;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7355 = x6857 + x7241;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7356 = x7219 * x7241;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7357 = x7355 - x7356;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7358 = x6858 + x7245;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7359 = x7223 * x7245;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7360 = x7358 - x7359;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7361 = x6859 + x7249;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7362 = x7227 * x7249;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7363 = x7361 - x7362;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7364 = x6860 + x7253;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7365 = x7231 * x7253;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7366 = x7364 - x7365;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7367 = x6861 + x7257;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7368 = x7235 * x7257;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7369 = x7367 - x7368;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7370 = x6862 + x7261;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7371 = x7239 * x7261;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7372 = x7370 - x7371;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7373 = x6863 + x7265;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7374 = x7243 * x7265;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7375 = x7373 - x7374;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7376 = x6864 + x7269;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7377 = x7247 * x7269;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7378 = x7376 - x7377;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7379 = x6865 + x7273;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7380 = x7251 * x7273;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7381 = x7379 - x7380;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7382 = x6866 + x7277;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7383 = x7255 * x7277;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7384 = x7382 - x7383;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7385 = x6867 + x7281;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7386 = x7259 * x7281;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7387 = x7385 - x7386;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7388 = x6868 + x7285;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7389 = x7263 * x7285;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7390 = x7388 - x7389;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7391 = x6869 + x7289;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7392 = x7267 * x7289;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7393 = x7391 - x7392;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7394 = x6870 + x7293;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7395 = x7271 * x7293;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7396 = x7394 - x7395;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7397 = x6871 + x7297;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7398 = x7275 * x7297;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7399 = x7397 - x7398;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7400 = x6840 + x7301;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7401 = x7279 * x7301;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7402 = x7400 - x7401;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7403 = x6841 + x7305;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7404 = x7283 * x7305;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7405 = x7403 - x7404;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7406 = x6842 + x7309;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7407 = x7287 * x7309;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7408 = x7406 - x7407;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7409 = x6843 + x7313;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7410 = x7291 * x7313;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7411 = x7409 - x7410;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7412 = x6844 + x7317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7413 = x7295 * x7317;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7414 = x7412 - x7413;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7415 = x6845 + x7321;
      // loc("zirgen/circuit/recursion/sha.cpp":47:28)
      auto x7416 = x7299 * x7321;
      // loc("zirgen/circuit/recursion/sha.cpp":47:14)
      auto x7417 = x7415 - x7416;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7418 = x6937 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7419 = x6936 + x7418;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7420 = x6938 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7421 = x7419 + x7420;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7422 = x6939 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7423 = x7421 + x7422;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7424 = x6940 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7425 = x7423 + x7424;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7426 = x6941 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7427 = x7425 + x7426;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7428 = x6942 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7429 = x7427 + x7428;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7430 = x6943 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7431 = x7429 + x7430;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7432 = x6944 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7433 = x7431 + x7432;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7434 = x6945 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7435 = x7433 + x7434;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7436 = x6946 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7437 = x7435 + x7436;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7438 = x6947 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7439 = x7437 + x7438;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7440 = x6948 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7441 = x7439 + x7440;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7442 = x6949 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7443 = x7441 + x7442;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7444 = x6950 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7445 = x7443 + x7444;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7446 = x6951 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7447 = x7445 + x7446;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7448 = x6953 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7449 = x6952 + x7448;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7450 = x6954 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7451 = x7449 + x7450;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7452 = x6955 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7453 = x7451 + x7452;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7454 = x6956 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7455 = x7453 + x7454;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7456 = x6957 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7457 = x7455 + x7456;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7458 = x6958 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7459 = x7457 + x7458;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7460 = x6959 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7461 = x7459 + x7460;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7462 = x6960 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7463 = x7461 + x7462;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7464 = x6961 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7465 = x7463 + x7464;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7466 = x6962 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7467 = x7465 + x7466;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7468 = x6963 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7469 = x7467 + x7468;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7470 = x6964 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7471 = x7469 + x7470;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7472 = x6965 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7473 = x7471 + x7472;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7474 = x6966 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7475 = x7473 + x7474;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7476 = x6967 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7477 = x7475 + x7476;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7478 = x6840 * x6872;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7479 = x318 - x6840;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7480 = x7479 * x6904;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7481 = x7478 + x7480;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7482 = x6841 * x6873;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7483 = x318 - x6841;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7484 = x7483 * x6905;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7485 = x7482 + x7484;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7486 = x6842 * x6874;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7487 = x318 - x6842;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7488 = x7487 * x6906;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7489 = x7486 + x7488;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7490 = x6843 * x6875;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7491 = x318 - x6843;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7492 = x7491 * x6907;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7493 = x7490 + x7492;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7494 = x6844 * x6876;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7495 = x318 - x6844;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7496 = x7495 * x6908;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7497 = x7494 + x7496;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7498 = x6845 * x6877;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7499 = x318 - x6845;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7500 = x7499 * x6909;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7501 = x7498 + x7500;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7502 = x6846 * x6878;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7503 = x318 - x6846;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7504 = x7503 * x6910;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7505 = x7502 + x7504;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7506 = x6847 * x6879;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7507 = x318 - x6847;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7508 = x7507 * x6911;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7509 = x7506 + x7508;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7510 = x6848 * x6880;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7511 = x318 - x6848;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7512 = x7511 * x6912;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7513 = x7510 + x7512;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7514 = x6849 * x6881;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7515 = x318 - x6849;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7516 = x7515 * x6913;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7517 = x7514 + x7516;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7518 = x6850 * x6882;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7519 = x318 - x6850;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7520 = x7519 * x6914;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7521 = x7518 + x7520;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7522 = x6851 * x6883;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7523 = x318 - x6851;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7524 = x7523 * x6915;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7525 = x7522 + x7524;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7526 = x6852 * x6884;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7527 = x318 - x6852;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7528 = x7527 * x6916;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7529 = x7526 + x7528;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7530 = x6853 * x6885;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7531 = x318 - x6853;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7532 = x7531 * x6917;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7533 = x7530 + x7532;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7534 = x6854 * x6886;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7535 = x318 - x6854;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7536 = x7535 * x6918;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7537 = x7534 + x7536;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7538 = x6855 * x6887;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7539 = x318 - x6855;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7540 = x7539 * x6919;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7541 = x7538 + x7540;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7542 = x6856 * x6888;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7543 = x318 - x6856;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7544 = x7543 * x6920;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7545 = x7542 + x7544;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7546 = x6857 * x6889;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7547 = x318 - x6857;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7548 = x7547 * x6921;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7549 = x7546 + x7548;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7550 = x6858 * x6890;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7551 = x318 - x6858;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7552 = x7551 * x6922;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7553 = x7550 + x7552;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7554 = x6859 * x6891;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7555 = x318 - x6859;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7556 = x7555 * x6923;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7557 = x7554 + x7556;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7558 = x6860 * x6892;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7559 = x318 - x6860;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7560 = x7559 * x6924;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7561 = x7558 + x7560;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7562 = x6861 * x6893;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7563 = x318 - x6861;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7564 = x7563 * x6925;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7565 = x7562 + x7564;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7566 = x6862 * x6894;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7567 = x318 - x6862;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7568 = x7567 * x6926;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7569 = x7566 + x7568;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7570 = x6863 * x6895;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7571 = x318 - x6863;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7572 = x7571 * x6927;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7573 = x7570 + x7572;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7574 = x6864 * x6896;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7575 = x318 - x6864;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7576 = x7575 * x6928;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7577 = x7574 + x7576;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7578 = x6865 * x6897;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7579 = x318 - x6865;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7580 = x7579 * x6929;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7581 = x7578 + x7580;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7582 = x6866 * x6898;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7583 = x318 - x6866;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7584 = x7583 * x6930;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7585 = x7582 + x7584;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7586 = x6867 * x6899;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7587 = x318 - x6867;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7588 = x7587 * x6931;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7589 = x7586 + x7588;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7590 = x6868 * x6900;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7591 = x318 - x6868;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7592 = x7591 * x6932;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7593 = x7590 + x7592;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7594 = x6869 * x6901;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7595 = x318 - x6869;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7596 = x7595 * x6933;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7597 = x7594 + x7596;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7598 = x6870 * x6902;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7599 = x318 - x6870;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7600 = x7599 * x6934;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7601 = x7598 + x7600;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7602 = x6871 * x6903;
      // loc("zirgen/circuit/recursion/sha.cpp":64:29)
      auto x7603 = x318 - x6871;
      // loc("zirgen/circuit/recursion/sha.cpp":64:28)
      auto x7604 = x7603 * x6935;
      // loc("zirgen/circuit/recursion/sha.cpp":64:14)
      auto x7605 = x7602 + x7604;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7606 = x7485 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7607 = x7481 + x7606;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7608 = x7489 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7609 = x7607 + x7608;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7610 = x7493 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7611 = x7609 + x7610;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7612 = x7497 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7613 = x7611 + x7612;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7614 = x7501 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7615 = x7613 + x7614;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7616 = x7505 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7617 = x7615 + x7616;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7618 = x7509 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7619 = x7617 + x7618;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7620 = x7513 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7621 = x7619 + x7620;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7622 = x7517 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7623 = x7621 + x7622;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7624 = x7521 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7625 = x7623 + x7624;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7626 = x7525 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7627 = x7625 + x7626;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7628 = x7529 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7629 = x7627 + x7628;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7630 = x7533 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7631 = x7629 + x7630;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7632 = x7537 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7633 = x7631 + x7632;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7634 = x7541 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7635 = x7633 + x7634;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7636 = x7549 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7637 = x7545 + x7636;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7638 = x7553 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7639 = x7637 + x7638;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7640 = x7557 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7641 = x7639 + x7640;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7642 = x7561 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7643 = x7641 + x7642;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7644 = x7565 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7645 = x7643 + x7644;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7646 = x7569 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7647 = x7645 + x7646;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7648 = x7573 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7649 = x7647 + x7648;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7650 = x7577 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7651 = x7649 + x7650;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7652 = x7581 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7653 = x7651 + x7652;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7654 = x7585 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7655 = x7653 + x7654;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7656 = x7589 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7657 = x7655 + x7656;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7658 = x7593 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7659 = x7657 + x7658;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7660 = x7597 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7661 = x7659 + x7660;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7662 = x7601 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7663 = x7661 + x7662;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7664 = x7605 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7665 = x7663 + x7664;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7666 = x7327 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7667 = x7324 + x7666;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7668 = x7330 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7669 = x7667 + x7668;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7670 = x7333 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7671 = x7669 + x7670;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7672 = x7336 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7673 = x7671 + x7672;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7674 = x7339 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7675 = x7673 + x7674;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7676 = x7342 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7677 = x7675 + x7676;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7678 = x7345 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7679 = x7677 + x7678;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7680 = x7348 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7681 = x7679 + x7680;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7682 = x7351 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7683 = x7681 + x7682;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7684 = x7354 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7685 = x7683 + x7684;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7686 = x7357 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7687 = x7685 + x7686;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7688 = x7360 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7689 = x7687 + x7688;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7690 = x7363 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7691 = x7689 + x7690;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7692 = x7366 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7693 = x7691 + x7692;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7694 = x7369 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7695 = x7693 + x7694;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7696 = x7375 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7697 = x7372 + x7696;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7698 = x7378 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7699 = x7697 + x7698;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7700 = x7381 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7701 = x7699 + x7700;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7702 = x7384 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7703 = x7701 + x7702;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7704 = x7387 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7705 = x7703 + x7704;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7706 = x7390 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7707 = x7705 + x7706;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7708 = x7393 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7709 = x7707 + x7708;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7710 = x7396 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7711 = x7709 + x7710;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7712 = x7399 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7713 = x7711 + x7712;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7714 = x7402 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7715 = x7713 + x7714;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7716 = x7405 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7717 = x7715 + x7716;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7718 = x7408 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7719 = x7717 + x7718;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7720 = x7411 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7721 = x7719 + x7720;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7722 = x7414 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7723 = x7721 + x7722;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x7724 = x7417 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x7725 = x7723 + x7724;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7726 = x7635 + x7695;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7727 = x7665 + x7725;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7728 = x7447 + x7726;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7729 = x7477 + x7727;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7730 = x6968 + x7728;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7731 = x6969 + x7729;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7732 = x6627 + x7730;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x7733 = x6708 + x7731;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7734 = x6712 * x6744;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7735 = x318 - x6776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7736 = x7734 * x7735;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7737 = x318 - x6744;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7738 = x6712 * x7737;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7739 = x7738 * x6776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7740 = x7736 + x7739;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7741 = x318 - x6712;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7742 = x7741 * x6744;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7743 = x7742 * x6776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7744 = x7740 + x7743;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7745 = x7734 * x6776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7746 = x7744 + x7745;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7747 = x6713 * x6745;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7748 = x318 - x6777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7749 = x7747 * x7748;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7750 = x318 - x6745;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7751 = x6713 * x7750;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7752 = x7751 * x6777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7753 = x7749 + x7752;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7754 = x318 - x6713;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7755 = x7754 * x6745;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7756 = x7755 * x6777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7757 = x7753 + x7756;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7758 = x7747 * x6777;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7759 = x7757 + x7758;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7760 = x6714 * x6746;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7761 = x318 - x6778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7762 = x7760 * x7761;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7763 = x318 - x6746;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7764 = x6714 * x7763;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7765 = x7764 * x6778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7766 = x7762 + x7765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7767 = x318 - x6714;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7768 = x7767 * x6746;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7769 = x7768 * x6778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7770 = x7766 + x7769;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7771 = x7760 * x6778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7772 = x7770 + x7771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7773 = x6715 * x6747;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7774 = x318 - x6779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7775 = x7773 * x7774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7776 = x318 - x6747;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7777 = x6715 * x7776;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7778 = x7777 * x6779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7779 = x7775 + x7778;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7780 = x318 - x6715;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7781 = x7780 * x6747;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7782 = x7781 * x6779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7783 = x7779 + x7782;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7784 = x7773 * x6779;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7785 = x7783 + x7784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7786 = x6716 * x6748;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7787 = x318 - x6780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7788 = x7786 * x7787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7789 = x318 - x6748;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7790 = x6716 * x7789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7791 = x7790 * x6780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7792 = x7788 + x7791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7793 = x318 - x6716;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7794 = x7793 * x6748;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7795 = x7794 * x6780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7796 = x7792 + x7795;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7797 = x7786 * x6780;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7798 = x7796 + x7797;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7799 = x6717 * x6749;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7800 = x318 - x6781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7801 = x7799 * x7800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7802 = x318 - x6749;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7803 = x6717 * x7802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7804 = x7803 * x6781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7805 = x7801 + x7804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7806 = x318 - x6717;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7807 = x7806 * x6749;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7808 = x7807 * x6781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7809 = x7805 + x7808;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7810 = x7799 * x6781;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7811 = x7809 + x7810;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7812 = x6718 * x6750;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7813 = x318 - x6782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7814 = x7812 * x7813;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7815 = x318 - x6750;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7816 = x6718 * x7815;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7817 = x7816 * x6782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7818 = x7814 + x7817;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7819 = x318 - x6718;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7820 = x7819 * x6750;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7821 = x7820 * x6782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7822 = x7818 + x7821;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7823 = x7812 * x6782;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7824 = x7822 + x7823;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7825 = x6719 * x6751;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7826 = x318 - x6783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7827 = x7825 * x7826;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7828 = x318 - x6751;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7829 = x6719 * x7828;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7830 = x7829 * x6783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7831 = x7827 + x7830;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7832 = x318 - x6719;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7833 = x7832 * x6751;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7834 = x7833 * x6783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7835 = x7831 + x7834;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7836 = x7825 * x6783;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7837 = x7835 + x7836;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7838 = x6720 * x6752;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7839 = x318 - x6784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7840 = x7838 * x7839;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7841 = x318 - x6752;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7842 = x6720 * x7841;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7843 = x7842 * x6784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7844 = x7840 + x7843;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7845 = x318 - x6720;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7846 = x7845 * x6752;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7847 = x7846 * x6784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7848 = x7844 + x7847;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7849 = x7838 * x6784;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7850 = x7848 + x7849;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7851 = x6721 * x6753;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7852 = x318 - x6785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7853 = x7851 * x7852;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7854 = x318 - x6753;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7855 = x6721 * x7854;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7856 = x7855 * x6785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7857 = x7853 + x7856;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7858 = x318 - x6721;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7859 = x7858 * x6753;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7860 = x7859 * x6785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7861 = x7857 + x7860;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7862 = x7851 * x6785;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7863 = x7861 + x7862;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7864 = x6722 * x6754;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7865 = x318 - x6786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7866 = x7864 * x7865;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7867 = x318 - x6754;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7868 = x6722 * x7867;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7869 = x7868 * x6786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7870 = x7866 + x7869;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7871 = x318 - x6722;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7872 = x7871 * x6754;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7873 = x7872 * x6786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7874 = x7870 + x7873;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7875 = x7864 * x6786;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7876 = x7874 + x7875;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7877 = x6723 * x6755;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7878 = x318 - x6787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7879 = x7877 * x7878;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7880 = x318 - x6755;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7881 = x6723 * x7880;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7882 = x7881 * x6787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7883 = x7879 + x7882;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7884 = x318 - x6723;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7885 = x7884 * x6755;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7886 = x7885 * x6787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7887 = x7883 + x7886;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7888 = x7877 * x6787;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7889 = x7887 + x7888;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7890 = x6724 * x6756;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7891 = x318 - x6788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7892 = x7890 * x7891;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7893 = x318 - x6756;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7894 = x6724 * x7893;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7895 = x7894 * x6788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7896 = x7892 + x7895;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7897 = x318 - x6724;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7898 = x7897 * x6756;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7899 = x7898 * x6788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7900 = x7896 + x7899;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7901 = x7890 * x6788;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7902 = x7900 + x7901;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7903 = x6725 * x6757;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7904 = x318 - x6789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7905 = x7903 * x7904;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7906 = x318 - x6757;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7907 = x6725 * x7906;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7908 = x7907 * x6789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7909 = x7905 + x7908;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7910 = x318 - x6725;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7911 = x7910 * x6757;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7912 = x7911 * x6789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7913 = x7909 + x7912;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7914 = x7903 * x6789;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7915 = x7913 + x7914;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7916 = x6726 * x6758;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7917 = x318 - x6790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7918 = x7916 * x7917;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7919 = x318 - x6758;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7920 = x6726 * x7919;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7921 = x7920 * x6790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7922 = x7918 + x7921;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7923 = x318 - x6726;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7924 = x7923 * x6758;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7925 = x7924 * x6790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7926 = x7922 + x7925;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7927 = x7916 * x6790;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7928 = x7926 + x7927;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7929 = x6727 * x6759;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7930 = x318 - x6791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7931 = x7929 * x7930;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7932 = x318 - x6759;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7933 = x6727 * x7932;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7934 = x7933 * x6791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7935 = x7931 + x7934;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7936 = x318 - x6727;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7937 = x7936 * x6759;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7938 = x7937 * x6791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7939 = x7935 + x7938;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7940 = x7929 * x6791;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7941 = x7939 + x7940;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7942 = x6728 * x6760;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7943 = x318 - x6792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7944 = x7942 * x7943;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7945 = x318 - x6760;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7946 = x6728 * x7945;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7947 = x7946 * x6792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7948 = x7944 + x7947;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7949 = x318 - x6728;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7950 = x7949 * x6760;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7951 = x7950 * x6792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7952 = x7948 + x7951;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7953 = x7942 * x6792;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7954 = x7952 + x7953;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7955 = x6729 * x6761;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7956 = x318 - x6793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7957 = x7955 * x7956;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7958 = x318 - x6761;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7959 = x6729 * x7958;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7960 = x7959 * x6793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7961 = x7957 + x7960;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7962 = x318 - x6729;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7963 = x7962 * x6761;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7964 = x7963 * x6793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7965 = x7961 + x7964;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7966 = x7955 * x6793;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7967 = x7965 + x7966;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7968 = x6730 * x6762;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7969 = x318 - x6794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7970 = x7968 * x7969;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7971 = x318 - x6762;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7972 = x6730 * x7971;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7973 = x7972 * x6794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7974 = x7970 + x7973;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7975 = x318 - x6730;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7976 = x7975 * x6762;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7977 = x7976 * x6794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7978 = x7974 + x7977;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7979 = x7968 * x6794;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7980 = x7978 + x7979;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7981 = x6731 * x6763;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7982 = x318 - x6795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7983 = x7981 * x7982;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7984 = x318 - x6763;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7985 = x6731 * x7984;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7986 = x7985 * x6795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7987 = x7983 + x7986;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x7988 = x318 - x6731;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7989 = x7988 * x6763;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x7990 = x7989 * x6795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7991 = x7987 + x7990;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x7992 = x7981 * x6795;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7993 = x7991 + x7992;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7994 = x6732 * x6764;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x7995 = x318 - x6796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x7996 = x7994 * x7995;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x7997 = x318 - x6764;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7998 = x6732 * x7997;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x7999 = x7998 * x6796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8000 = x7996 + x7999;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8001 = x318 - x6732;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8002 = x8001 * x6764;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8003 = x8002 * x6796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8004 = x8000 + x8003;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8005 = x7994 * x6796;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8006 = x8004 + x8005;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8007 = x6733 * x6765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8008 = x318 - x6797;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8009 = x8007 * x8008;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8010 = x318 - x6765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8011 = x6733 * x8010;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8012 = x8011 * x6797;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8013 = x8009 + x8012;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8014 = x318 - x6733;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8015 = x8014 * x6765;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8016 = x8015 * x6797;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8017 = x8013 + x8016;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8018 = x8007 * x6797;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8019 = x8017 + x8018;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8020 = x6734 * x6766;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8021 = x318 - x6798;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8022 = x8020 * x8021;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8023 = x318 - x6766;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8024 = x6734 * x8023;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8025 = x8024 * x6798;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8026 = x8022 + x8025;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8027 = x318 - x6734;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8028 = x8027 * x6766;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8029 = x8028 * x6798;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8030 = x8026 + x8029;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8031 = x8020 * x6798;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8032 = x8030 + x8031;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8033 = x6735 * x6767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8034 = x318 - x6799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8035 = x8033 * x8034;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8036 = x318 - x6767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8037 = x6735 * x8036;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8038 = x8037 * x6799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8039 = x8035 + x8038;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8040 = x318 - x6735;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8041 = x8040 * x6767;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8042 = x8041 * x6799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8043 = x8039 + x8042;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8044 = x8033 * x6799;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8045 = x8043 + x8044;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8046 = x6736 * x6768;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8047 = x318 - x6800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8048 = x8046 * x8047;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8049 = x318 - x6768;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8050 = x6736 * x8049;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8051 = x8050 * x6800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8052 = x8048 + x8051;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8053 = x318 - x6736;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8054 = x8053 * x6768;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8055 = x8054 * x6800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8056 = x8052 + x8055;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8057 = x8046 * x6800;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8058 = x8056 + x8057;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8059 = x6737 * x6769;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8060 = x318 - x6801;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8061 = x8059 * x8060;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8062 = x318 - x6769;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8063 = x6737 * x8062;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8064 = x8063 * x6801;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8065 = x8061 + x8064;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8066 = x318 - x6737;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8067 = x8066 * x6769;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8068 = x8067 * x6801;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8069 = x8065 + x8068;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8070 = x8059 * x6801;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8071 = x8069 + x8070;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8072 = x6738 * x6770;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8073 = x318 - x6802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8074 = x8072 * x8073;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8075 = x318 - x6770;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8076 = x6738 * x8075;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8077 = x8076 * x6802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8078 = x8074 + x8077;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8079 = x318 - x6738;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8080 = x8079 * x6770;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8081 = x8080 * x6802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8082 = x8078 + x8081;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8083 = x8072 * x6802;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8084 = x8082 + x8083;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8085 = x6739 * x6771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8086 = x318 - x6803;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8087 = x8085 * x8086;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8088 = x318 - x6771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8089 = x6739 * x8088;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8090 = x8089 * x6803;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8091 = x8087 + x8090;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8092 = x318 - x6739;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8093 = x8092 * x6771;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8094 = x8093 * x6803;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8095 = x8091 + x8094;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8096 = x8085 * x6803;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8097 = x8095 + x8096;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8098 = x6740 * x6772;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8099 = x318 - x6804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8100 = x8098 * x8099;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8101 = x318 - x6772;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8102 = x6740 * x8101;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8103 = x8102 * x6804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8104 = x8100 + x8103;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8105 = x318 - x6740;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8106 = x8105 * x6772;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8107 = x8106 * x6804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8108 = x8104 + x8107;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8109 = x8098 * x6804;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8110 = x8108 + x8109;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8111 = x6741 * x6773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8112 = x318 - x6805;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8113 = x8111 * x8112;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8114 = x318 - x6773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8115 = x6741 * x8114;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8116 = x8115 * x6805;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8117 = x8113 + x8116;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8118 = x318 - x6741;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8119 = x8118 * x6773;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8120 = x8119 * x6805;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8121 = x8117 + x8120;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8122 = x8111 * x6805;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8123 = x8121 + x8122;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8124 = x6742 * x6774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8125 = x318 - x6806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8126 = x8124 * x8125;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8127 = x318 - x6774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8128 = x6742 * x8127;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8129 = x8128 * x6806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8130 = x8126 + x8129;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8131 = x318 - x6742;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8132 = x8131 * x6774;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8133 = x8132 * x6806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8134 = x8130 + x8133;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8135 = x8124 * x6806;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8136 = x8134 + x8135;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8137 = x6743 * x6775;
      // loc("zirgen/circuit/recursion/sha.cpp":55:29)
      auto x8138 = x318 - x6807;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8139 = x8137 * x8138;
      // loc("zirgen/circuit/recursion/sha.cpp":55:49)
      auto x8140 = x318 - x6775;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8141 = x6743 * x8140;
      // loc("zirgen/circuit/recursion/sha.cpp":55:41)
      auto x8142 = x8141 * x6807;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8143 = x8139 + x8142;
      // loc("zirgen/circuit/recursion/sha.cpp":55:69)
      auto x8144 = x318 - x6743;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8145 = x8144 * x6775;
      // loc("zirgen/circuit/recursion/sha.cpp":55:68)
      auto x8146 = x8145 * x6807;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8147 = x8143 + x8146;
      // loc("zirgen/circuit/recursion/sha.cpp":56:14)
      auto x8148 = x8137 * x6807;
      // loc("zirgen/circuit/recursion/sha.cpp":55:14)
      auto x8149 = x8147 + x8148;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8150 = x7759 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8151 = x7746 + x8150;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8152 = x7772 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8153 = x8151 + x8152;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8154 = x7785 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8155 = x8153 + x8154;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8156 = x7798 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8157 = x8155 + x8156;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8158 = x7811 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8159 = x8157 + x8158;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8160 = x7824 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8161 = x8159 + x8160;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8162 = x7837 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8163 = x8161 + x8162;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8164 = x7850 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8165 = x8163 + x8164;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8166 = x7863 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8167 = x8165 + x8166;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8168 = x7876 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8169 = x8167 + x8168;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8170 = x7889 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8171 = x8169 + x8170;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8172 = x7902 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8173 = x8171 + x8172;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8174 = x7915 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8175 = x8173 + x8174;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8176 = x7928 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8177 = x8175 + x8176;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8178 = x7941 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8179 = x8177 + x8178;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8180 = x7967 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8181 = x7954 + x8180;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8182 = x7980 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8183 = x8181 + x8182;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8184 = x7993 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8185 = x8183 + x8184;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8186 = x8006 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8187 = x8185 + x8186;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8188 = x8019 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8189 = x8187 + x8188;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8190 = x8032 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8191 = x8189 + x8190;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8192 = x8045 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8193 = x8191 + x8192;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8194 = x8058 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8195 = x8193 + x8194;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8196 = x8071 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8197 = x8195 + x8196;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8198 = x8084 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8199 = x8197 + x8198;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8200 = x8097 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8201 = x8199 + x8200;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8202 = x8110 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8203 = x8201 + x8202;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8204 = x8123 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8205 = x8203 + x8204;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8206 = x8136 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8207 = x8205 + x8206;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8208 = x8149 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8209 = x8207 + x8208;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8210 = x7103 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8211 = x7100 + x8210;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8212 = x7106 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8213 = x8211 + x8212;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8214 = x7109 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8215 = x8213 + x8214;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8216 = x7112 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8217 = x8215 + x8216;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8218 = x7115 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8219 = x8217 + x8218;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8220 = x7118 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8221 = x8219 + x8220;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8222 = x7121 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8223 = x8221 + x8222;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8224 = x7124 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8225 = x8223 + x8224;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8226 = x7127 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8227 = x8225 + x8226;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8228 = x7130 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8229 = x8227 + x8228;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8230 = x7133 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8231 = x8229 + x8230;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8232 = x7136 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8233 = x8231 + x8232;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8234 = x7139 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8235 = x8233 + x8234;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8236 = x7142 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8237 = x8235 + x8236;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8238 = x7145 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8239 = x8237 + x8238;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8240 = x7151 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8241 = x7148 + x8240;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8242 = x7154 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8243 = x8241 + x8242;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8244 = x7157 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8245 = x8243 + x8244;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8246 = x7160 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8247 = x8245 + x8246;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8248 = x7163 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8249 = x8247 + x8248;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8250 = x7166 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8251 = x8249 + x8250;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8252 = x7169 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8253 = x8251 + x8252;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8254 = x7172 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8255 = x8253 + x8254;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8256 = x7175 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8257 = x8255 + x8256;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8258 = x7178 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8259 = x8257 + x8258;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8260 = x7181 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8261 = x8259 + x8260;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8262 = x7184 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8263 = x8261 + x8262;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8264 = x7187 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8265 = x8263 + x8264;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8266 = x7190 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8267 = x8265 + x8266;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8268 = x7193 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8269 = x8267 + x8268;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8270 = x8179 + x8239;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8271 = x8209 + x8269;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8272 = x7732 + x8270;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8273 = x7733 + x8271;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8274 = x6809 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8275 = x6808 + x8274;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8276 = x6810 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8277 = x8275 + x8276;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8278 = x6811 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8279 = x8277 + x8278;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8280 = x6812 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8281 = x8279 + x8280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8282 = x6813 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8283 = x8281 + x8282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8284 = x6814 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8285 = x8283 + x8284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8286 = x6815 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8287 = x8285 + x8286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8288 = x6816 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8289 = x8287 + x8288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8290 = x6817 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8291 = x8289 + x8290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8292 = x6818 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8293 = x8291 + x8292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8294 = x6819 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8295 = x8293 + x8294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8296 = x6820 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8297 = x8295 + x8296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8298 = x6821 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8299 = x8297 + x8298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8300 = x6822 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8301 = x8299 + x8300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8302 = x6823 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8303 = x8301 + x8302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8304 = x6825 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8305 = x6824 + x8304;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8306 = x6826 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8307 = x8305 + x8306;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8308 = x6827 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8309 = x8307 + x8308;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8310 = x6828 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8311 = x8309 + x8310;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8312 = x6829 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8313 = x8311 + x8312;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8314 = x6830 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8315 = x8313 + x8314;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8316 = x6831 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8317 = x8315 + x8316;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8318 = x6832 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8319 = x8317 + x8318;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8320 = x6833 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8321 = x8319 + x8320;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8322 = x6834 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8323 = x8321 + x8322;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8324 = x6835 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8325 = x8323 + x8324;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8326 = x6836 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8327 = x8325 + x8326;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8328 = x6837 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8329 = x8327 + x8328;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8330 = x6838 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8331 = x8329 + x8330;
      // loc("zirgen/circuit/recursion/sha.cpp":74:25)
      auto x8332 = x6839 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":74:16)
      auto x8333 = x8331 + x8332;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8334 = x7732 + x8303;
      // loc("zirgen/circuit/recursion/sha.cpp":83:14)
      auto x8335 = x7733 + x8333;
      // loc("zirgen/circuit/recursion/sha.cpp":290:5)
      {
        auto& reg = args[2][58 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8272);
        reg = x8272;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":291:5)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8334);
        reg = x8334;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":290:5)
      {
        auto& reg = args[2][59 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8273);
        reg = x8273;
      }
      // loc("zirgen/circuit/recursion/sha.cpp":291:5)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8335);
        reg = x8335;
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8336 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x8336 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8337 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x8337 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8338 = Fp(x8336.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8338);
          reg = x8338;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8339 = Fp(x8336.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8340 = x8339 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8340);
          reg = x8340;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8341 = Fp(x8336.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8342 = x8341 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8342);
          reg = x8342;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8343 = Fp(x8336.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8344 = x8343 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8344);
          reg = x8344;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8345 = Fp(x8336.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8346 = x8345 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8346);
          reg = x8346;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8347 = Fp(x8336.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8348 = x8347 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8348);
          reg = x8348;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8349 = Fp(x8336.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8350 = x8349 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8350);
          reg = x8350;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8351 = Fp(x8336.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8352 = x8351 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8352);
          reg = x8352;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8353 = Fp(x8336.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8354 = x8353 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8354);
          reg = x8354;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8355 = Fp(x8336.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8356 = x8355 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8356);
          reg = x8356;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8357 = Fp(x8336.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8358 = x8357 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8358);
          reg = x8358;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8359 = Fp(x8336.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8360 = x8359 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8360);
          reg = x8360;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8361 = Fp(x8336.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8362 = x8361 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8362);
          reg = x8362;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8363 = Fp(x8336.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8364 = x8363 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8364);
          reg = x8364;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8365 = Fp(x8336.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8366 = x8365 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8366);
          reg = x8366;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8367 = Fp(x8336.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8368 = x8367 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8368);
          reg = x8368;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8369 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x8369 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8370 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x8370 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8371 = x8370 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8372 = x8369 + x8371;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8373 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x8373 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8374 = x8373 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8375 = x8372 + x8374;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8376 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x8376 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8377 = x8376 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8378 = x8375 + x8377;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8379 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x8379 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8380 = x8379 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8381 = x8378 + x8380;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8382 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x8382 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8383 = x8382 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8384 = x8381 + x8383;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8385 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x8385 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8386 = x8385 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8387 = x8384 + x8386;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8388 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x8388 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8389 = x8388 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8390 = x8387 + x8389;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8391 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x8391 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8392 = x8391 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8393 = x8390 + x8392;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8394 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x8394 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8395 = x8394 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8396 = x8393 + x8395;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8397 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x8397 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8398 = x8397 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8399 = x8396 + x8398;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8400 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x8400 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8401 = x8400 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8402 = x8399 + x8401;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8403 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x8403 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8404 = x8403 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8405 = x8402 + x8404;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8406 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x8406 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8407 = x8406 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8408 = x8405 + x8407;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8409 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x8409 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8410 = x8409 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8411 = x8408 + x8410;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8412 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x8412 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8413 = x8412 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8414 = x8411 + x8413;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x8415 = x8336 - x8414;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x8416 = x8415 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x8417 = Fp(x8416.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8417);
          reg = x8417;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x8418 = x8337 + x8416;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8419 = Fp(x8418.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][42 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8419);
          reg = x8419;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8420 = Fp(x8418.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8421 = x8420 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][43 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8421);
          reg = x8421;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8422 = Fp(x8418.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8423 = x8422 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][44 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8423);
          reg = x8423;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8424 = Fp(x8418.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8425 = x8424 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][45 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8425);
          reg = x8425;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8426 = Fp(x8418.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8427 = x8426 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][46 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8427);
          reg = x8427;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8428 = Fp(x8418.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8429 = x8428 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][47 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8429);
          reg = x8429;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8430 = Fp(x8418.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8431 = x8430 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][48 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8431);
          reg = x8431;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8432 = Fp(x8418.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8433 = x8432 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][49 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8433);
          reg = x8433;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8434 = Fp(x8418.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8435 = x8434 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][50 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8435);
          reg = x8435;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8436 = Fp(x8418.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8437 = x8436 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][51 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8437);
          reg = x8437;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8438 = Fp(x8418.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8439 = x8438 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][52 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8439);
          reg = x8439;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8440 = Fp(x8418.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8441 = x8440 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][53 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8441);
          reg = x8441;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8442 = Fp(x8418.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8443 = x8442 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][54 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8443);
          reg = x8443;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8444 = Fp(x8418.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8445 = x8444 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][55 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8445);
          reg = x8445;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8446 = Fp(x8418.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8447 = x8446 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][56 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8447);
          reg = x8447;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8448 = Fp(x8418.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8449 = x8448 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][57 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8449);
          reg = x8449;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8450 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x8450 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8451 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x8451 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8452 = x8451 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8453 = x8450 + x8452;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8454 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x8454 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8455 = x8454 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8456 = x8453 + x8455;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8457 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x8457 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8458 = x8457 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8459 = x8456 + x8458;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8460 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x8460 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8461 = x8460 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8462 = x8459 + x8461;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8463 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x8463 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8464 = x8463 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8465 = x8462 + x8464;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8466 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x8466 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8467 = x8466 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8468 = x8465 + x8467;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8469 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x8469 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8470 = x8469 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8471 = x8468 + x8470;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8472 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x8472 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8473 = x8472 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8474 = x8471 + x8473;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8475 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x8475 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8476 = x8475 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8477 = x8474 + x8476;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8478 = args[2][52 * steps + ((cycle - 0) & mask)];
      assert(x8478 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8479 = x8478 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8480 = x8477 + x8479;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8481 = args[2][53 * steps + ((cycle - 0) & mask)];
      assert(x8481 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8482 = x8481 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8483 = x8480 + x8482;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8484 = args[2][54 * steps + ((cycle - 0) & mask)];
      assert(x8484 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8485 = x8484 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8486 = x8483 + x8485;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8487 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x8487 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8488 = x8487 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8489 = x8486 + x8488;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8490 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x8490 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8491 = x8490 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8492 = x8489 + x8491;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/a[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8493 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x8493 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8494 = x8493 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8495 = x8492 + x8494;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x8496 = x8418 - x8495;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x8497 = x8496 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x8498 = Fp(x8497.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8498);
          reg = x8498;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e_raw[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8499 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x8499 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e_raw[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8500 = args[2][93 * steps + ((cycle - 0) & mask)];
      assert(x8500 != Fp::invalid());
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8501 = Fp(x8499.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][60 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8501);
          reg = x8501;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8502 = Fp(x8499.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8503 = x8502 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][61 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8503);
          reg = x8503;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8504 = Fp(x8499.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8505 = x8504 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][62 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8505);
          reg = x8505;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8506 = Fp(x8499.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8507 = x8506 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][63 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8507);
          reg = x8507;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8508 = Fp(x8499.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8509 = x8508 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][64 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8509);
          reg = x8509;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8510 = Fp(x8499.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8511 = x8510 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][65 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8511);
          reg = x8511;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8512 = Fp(x8499.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8513 = x8512 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][66 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8513);
          reg = x8513;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8514 = Fp(x8499.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8515 = x8514 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][67 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8515);
          reg = x8515;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8516 = Fp(x8499.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8517 = x8516 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][68 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8517);
          reg = x8517;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8518 = Fp(x8499.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8519 = x8518 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][69 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8519);
          reg = x8519;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8520 = Fp(x8499.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8521 = x8520 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8521);
          reg = x8521;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8522 = Fp(x8499.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8523 = x8522 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8523);
          reg = x8523;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8524 = Fp(x8499.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8525 = x8524 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8525);
          reg = x8525;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8526 = Fp(x8499.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8527 = x8526 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8527);
          reg = x8527;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8528 = Fp(x8499.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8529 = x8528 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8529);
          reg = x8529;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8530 = Fp(x8499.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8531 = x8530 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8531);
          reg = x8531;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[0](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8532 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x8532 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[1](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8533 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x8533 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8534 = x8533 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8535 = x8532 + x8534;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[2](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8536 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x8536 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8537 = x8536 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8538 = x8535 + x8537;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[3](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8539 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x8539 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8540 = x8539 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8541 = x8538 + x8540;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[4](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8542 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x8542 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8543 = x8542 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8544 = x8541 + x8543;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[5](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8545 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x8545 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8546 = x8545 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8547 = x8544 + x8546;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[6](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8548 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x8548 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8549 = x8548 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8550 = x8547 + x8549;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[7](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8551 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x8551 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8552 = x8551 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8553 = x8550 + x8552;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[8](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8554 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x8554 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8555 = x8554 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8556 = x8553 + x8555;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[9](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8557 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x8557 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8558 = x8557 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8559 = x8556 + x8558;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[10](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8560 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x8560 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8561 = x8560 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8562 = x8559 + x8561;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[11](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8563 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x8563 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8564 = x8563 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8565 = x8562 + x8564;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[12](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8566 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x8566 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8567 = x8566 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8568 = x8565 + x8567;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[13](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8569 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8569 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8570 = x8569 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8571 = x8568 + x8570;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[14](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8572 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x8572 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8573 = x8572 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8574 = x8571 + x8573;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[15](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8575 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x8575 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8576 = x8575 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8577 = x8574 + x8576;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x8578 = x8499 - x8577;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x8579 = x8578 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":124:26)
        auto x8580 = Fp(x8579.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8580);
          reg = x8580;
        }
      }
      // loc("zirgen/circuit/recursion/sha.cpp":127:32)
      auto x8581 = x8500 + x8579;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8582 = Fp(x8581.asUInt32() & x318.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8582);
          reg = x8582;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8583 = Fp(x8581.asUInt32() & x317.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8584 = x8583 * x305;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8584);
          reg = x8584;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8585 = Fp(x8581.asUInt32() & x315.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8586 = x8585 * x304;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8586);
          reg = x8586;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8587 = Fp(x8581.asUInt32() & x311.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8588 = x8587 * x303;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8588);
          reg = x8588;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8589 = Fp(x8581.asUInt32() & x302.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8590 = x8589 * x301;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8590);
          reg = x8590;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8591 = Fp(x8581.asUInt32() & x300.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8592 = x8591 * x299;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8592);
          reg = x8592;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8593 = Fp(x8581.asUInt32() & x298.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8594 = x8593 * x297;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8594);
          reg = x8594;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8595 = Fp(x8581.asUInt32() & x296.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8596 = x8595 * x295;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8596);
          reg = x8596;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8597 = Fp(x8581.asUInt32() & x294.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8598 = x8597 * x293;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8598);
          reg = x8598;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8599 = Fp(x8581.asUInt32() & x292.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8600 = x8599 * x291;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8600);
          reg = x8600;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8601 = Fp(x8581.asUInt32() & x290.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8602 = x8601 * x289;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8602);
          reg = x8602;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8603 = Fp(x8581.asUInt32() & x288.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8604 = x8603 * x287;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8604);
          reg = x8604;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8605 = Fp(x8581.asUInt32() & x286.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8606 = x8605 * x285;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8606);
          reg = x8606;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8607 = Fp(x8581.asUInt32() & x284.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8608 = x8607 * x283;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8608);
          reg = x8608;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8609 = Fp(x8581.asUInt32() & x282.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8610 = x8609 * x281;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8610);
          reg = x8610;
        }
        // loc("zirgen/circuit/recursion/sha.cpp":99:29)
        auto x8611 = Fp(x8581.asUInt32() & x280.asUInt32());
        // loc("zirgen/circuit/recursion/sha.cpp":99:28)
        auto x8612 = x8611 * x279;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8612);
          reg = x8612;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[16](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8613 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8613 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[17](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8614 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x8614 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8615 = x8614 * x317;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8616 = x8613 + x8615;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[18](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8617 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x8617 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8618 = x8617 * x315;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8619 = x8616 + x8618;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[19](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8620 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x8620 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8621 = x8620 * x311;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8622 = x8619 + x8621;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[20](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8623 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x8623 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8624 = x8623 * x302;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8625 = x8622 + x8624;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[21](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8626 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x8626 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8627 = x8626 * x300;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8628 = x8625 + x8627;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[22](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8629 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x8629 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8630 = x8629 * x298;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8631 = x8628 + x8630;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[23](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8632 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x8632 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8633 = x8632 * x296;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8634 = x8631 + x8633;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[24](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8635 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x8635 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8636 = x8635 * x294;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8637 = x8634 + x8636;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[25](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8638 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8639 = x8638 * x292;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8640 = x8637 + x8639;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[26](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8641 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8642 = x8641 * x290;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8643 = x8640 + x8642;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[27](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8644 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8645 = x8644 * x288;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8646 = x8643 + x8645;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[28](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8647 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x8647 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8648 = x8647 * x286;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8649 = x8646 + x8648;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[29](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8650 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x8650 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8651 = x8650 * x284;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8652 = x8649 + x8651;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[30](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8653 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x8653 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8654 = x8653 * x282;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8655 = x8652 + x8654;
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/e[31](Bit)/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8656 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x8656 != Fp::invalid());
      // loc("zirgen/circuit/recursion/sha.cpp":104:17)
      auto x8657 = x8656 * x280;
      // loc("zirgen/circuit/recursion/sha.cpp":104:11)
      auto x8658 = x8655 + x8657;
      // loc("zirgen/circuit/recursion/sha.cpp":106:16)
      auto x8659 = x8581 - x8658;
      // loc("zirgen/circuit/recursion/sha.cpp":106:15)
      auto x8660 = x8659 * x278;
      {
        // loc("zirgen/circuit/recursion/sha.cpp":128:27)
        auto x8661 = Fp(x8660.asUInt32() & x316.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8661);
          reg = x8661;
        }
      }
    }
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/opcode(OneHot)/set_global(Reg)"("./zirgen/components/mux.h":49:25))
    auto x8662 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x8662 != Fp::invalid());
    if (x8662 != 0) {
      // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8663 = args[0][18 * steps + ((cycle - 0) & mask)];
      assert(x8663 != Fp::invalid());
      host_args.at(0) = x8663;
      host_args.at(1) = x8663;
      host(ctx, "log", "SET_GLOBAL, writing to digest %u//2, part %u%%2", host_args.data(), 2, host_outs.data(), 0);
      {
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8664 = (x8663 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8664);
          reg = x8664;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8665 = x8663 - x318;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8666 = (x8665 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8666);
          reg = x8666;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8667 = x8663 - x317;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8668 = (x8667 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8668);
          reg = x8668;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8669 = x8663 - x316;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x8670 = (x8669 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8670);
          reg = x8670;
        }
      }
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/select(OneHot)/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x8671 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x8671 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/select(OneHot)/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x8672 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x8672 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/select(OneHot)/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x8673 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x8673 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/select(OneHot)/hot[0](Reg)"("zirgen/circuit/recursion/macro.cpp":35:25))
      auto x8674 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x8674 != Fp::invalid());
      if (x8674 != 0) {
        // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8675 = args[0][17 * steps + ((cycle - 0) & mask)];
        assert(x8675 != Fp::invalid());
        {
          host_args.at(0) = x8675;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8676 = host_outs.at(0);
          auto x8677 = host_outs.at(1);
          auto x8678 = host_outs.at(2);
          auto x8679 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8676);
            reg = x8676;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8677);
            reg = x8677;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8678);
            reg = x8678;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8679);
            reg = x8679;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8675);
          reg = x8675;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8680 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x8680 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8681 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x8681 != Fp::invalid());
        host_args.at(0) = x319;
        host_args.at(1) = x319;
        host_args.at(2) = x319;
        host_args.at(3) = x8680;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][0] = x8680;
        host_args.at(0) = x319;
        host_args.at(1) = x319;
        host_args.at(2) = x318;
        host_args.at(3) = x8681;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][1] = x8681;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8682 = x8675 + x318;
        {
          host_args.at(0) = x8682;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8683 = host_outs.at(0);
          auto x8684 = host_outs.at(1);
          auto x8685 = host_outs.at(2);
          auto x8686 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8683);
            reg = x8683;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8684);
            reg = x8684;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8685);
            reg = x8685;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8686);
            reg = x8686;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8682);
          reg = x8682;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8687 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8687 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8688 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8688 != Fp::invalid());
        host_args.at(0) = x319;
        host_args.at(1) = x318;
        host_args.at(2) = x319;
        host_args.at(3) = x8687;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][2] = x8687;
        host_args.at(0) = x319;
        host_args.at(1) = x318;
        host_args.at(2) = x318;
        host_args.at(3) = x8688;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][3] = x8688;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8689 = x8675 + x317;
        {
          host_args.at(0) = x8689;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8690 = host_outs.at(0);
          auto x8691 = host_outs.at(1);
          auto x8692 = host_outs.at(2);
          auto x8693 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8690);
            reg = x8690;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8691);
            reg = x8691;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8692);
            reg = x8692;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8693);
            reg = x8693;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8689);
          reg = x8689;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8694 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8694 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8695 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8695 != Fp::invalid());
        host_args.at(0) = x319;
        host_args.at(1) = x317;
        host_args.at(2) = x319;
        host_args.at(3) = x8694;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][4] = x8694;
        host_args.at(0) = x319;
        host_args.at(1) = x317;
        host_args.at(2) = x318;
        host_args.at(3) = x8695;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][5] = x8695;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8696 = x8675 + x316;
        {
          host_args.at(0) = x8696;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8697 = host_outs.at(0);
          auto x8698 = host_outs.at(1);
          auto x8699 = host_outs.at(2);
          auto x8700 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8697);
            reg = x8697;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8698);
            reg = x8698;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8699);
            reg = x8699;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8700);
            reg = x8700;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8696);
          reg = x8696;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8701 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8701 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8702 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8702 != Fp::invalid());
        host_args.at(0) = x319;
        host_args.at(1) = x316;
        host_args.at(2) = x319;
        host_args.at(3) = x8701;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][6] = x8701;
        host_args.at(0) = x319;
        host_args.at(1) = x316;
        host_args.at(2) = x318;
        host_args.at(3) = x8702;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][7] = x8702;
      }
      if (x8671 != 0) {
        // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8703 = args[0][17 * steps + ((cycle - 0) & mask)];
        assert(x8703 != Fp::invalid());
        {
          host_args.at(0) = x8703;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8704 = host_outs.at(0);
          auto x8705 = host_outs.at(1);
          auto x8706 = host_outs.at(2);
          auto x8707 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8704);
            reg = x8704;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8705);
            reg = x8705;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8706);
            reg = x8706;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8707);
            reg = x8707;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8703);
          reg = x8703;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8708 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x8708 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8709 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x8709 != Fp::invalid());
        host_args.at(0) = x318;
        host_args.at(1) = x319;
        host_args.at(2) = x319;
        host_args.at(3) = x8708;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][8] = x8708;
        host_args.at(0) = x318;
        host_args.at(1) = x319;
        host_args.at(2) = x318;
        host_args.at(3) = x8709;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][9] = x8709;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8710 = x8703 + x318;
        {
          host_args.at(0) = x8710;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8711 = host_outs.at(0);
          auto x8712 = host_outs.at(1);
          auto x8713 = host_outs.at(2);
          auto x8714 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8711);
            reg = x8711;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8712);
            reg = x8712;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8713);
            reg = x8713;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8714);
            reg = x8714;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8710);
          reg = x8710;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8715 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8715 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8716 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8716 != Fp::invalid());
        host_args.at(0) = x318;
        host_args.at(1) = x318;
        host_args.at(2) = x319;
        host_args.at(3) = x8715;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][10] = x8715;
        host_args.at(0) = x318;
        host_args.at(1) = x318;
        host_args.at(2) = x318;
        host_args.at(3) = x8716;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][11] = x8716;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8717 = x8703 + x317;
        {
          host_args.at(0) = x8717;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8718 = host_outs.at(0);
          auto x8719 = host_outs.at(1);
          auto x8720 = host_outs.at(2);
          auto x8721 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8718);
            reg = x8718;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8719);
            reg = x8719;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8720);
            reg = x8720;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8721);
            reg = x8721;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8717);
          reg = x8717;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8722 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8722 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8723 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8723 != Fp::invalid());
        host_args.at(0) = x318;
        host_args.at(1) = x317;
        host_args.at(2) = x319;
        host_args.at(3) = x8722;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][12] = x8722;
        host_args.at(0) = x318;
        host_args.at(1) = x317;
        host_args.at(2) = x318;
        host_args.at(3) = x8723;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][13] = x8723;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8724 = x8703 + x316;
        {
          host_args.at(0) = x8724;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8725 = host_outs.at(0);
          auto x8726 = host_outs.at(1);
          auto x8727 = host_outs.at(2);
          auto x8728 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8725);
            reg = x8725;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8726);
            reg = x8726;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8727);
            reg = x8727;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8728);
            reg = x8728;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8724);
          reg = x8724;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8729 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8729 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8730 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8730 != Fp::invalid());
        host_args.at(0) = x318;
        host_args.at(1) = x316;
        host_args.at(2) = x319;
        host_args.at(3) = x8729;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][14] = x8729;
        host_args.at(0) = x318;
        host_args.at(1) = x316;
        host_args.at(2) = x318;
        host_args.at(3) = x8730;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][15] = x8730;
      }
      if (x8672 != 0) {
        // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8731 = args[0][17 * steps + ((cycle - 0) & mask)];
        assert(x8731 != Fp::invalid());
        {
          host_args.at(0) = x8731;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8732 = host_outs.at(0);
          auto x8733 = host_outs.at(1);
          auto x8734 = host_outs.at(2);
          auto x8735 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8732);
            reg = x8732;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8733);
            reg = x8733;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8734);
            reg = x8734;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8735);
            reg = x8735;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8731);
          reg = x8731;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8736 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x8736 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8737 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x8737 != Fp::invalid());
        host_args.at(0) = x317;
        host_args.at(1) = x319;
        host_args.at(2) = x319;
        host_args.at(3) = x8736;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][16] = x8736;
        host_args.at(0) = x317;
        host_args.at(1) = x319;
        host_args.at(2) = x318;
        host_args.at(3) = x8737;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][17] = x8737;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8738 = x8731 + x318;
        {
          host_args.at(0) = x8738;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8739 = host_outs.at(0);
          auto x8740 = host_outs.at(1);
          auto x8741 = host_outs.at(2);
          auto x8742 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8739);
            reg = x8739;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8740);
            reg = x8740;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8741);
            reg = x8741;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8742);
            reg = x8742;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8738);
          reg = x8738;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8743 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8743 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8744 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8744 != Fp::invalid());
        host_args.at(0) = x317;
        host_args.at(1) = x318;
        host_args.at(2) = x319;
        host_args.at(3) = x8743;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][18] = x8743;
        host_args.at(0) = x317;
        host_args.at(1) = x318;
        host_args.at(2) = x318;
        host_args.at(3) = x8744;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][19] = x8744;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8745 = x8731 + x317;
        {
          host_args.at(0) = x8745;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8746 = host_outs.at(0);
          auto x8747 = host_outs.at(1);
          auto x8748 = host_outs.at(2);
          auto x8749 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8746);
            reg = x8746;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8747);
            reg = x8747;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8748);
            reg = x8748;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8749);
            reg = x8749;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8745);
          reg = x8745;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8750 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8750 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8751 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8751 != Fp::invalid());
        host_args.at(0) = x317;
        host_args.at(1) = x317;
        host_args.at(2) = x319;
        host_args.at(3) = x8750;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][20] = x8750;
        host_args.at(0) = x317;
        host_args.at(1) = x317;
        host_args.at(2) = x318;
        host_args.at(3) = x8751;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][21] = x8751;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8752 = x8731 + x316;
        {
          host_args.at(0) = x8752;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8753 = host_outs.at(0);
          auto x8754 = host_outs.at(1);
          auto x8755 = host_outs.at(2);
          auto x8756 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8753);
            reg = x8753;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8754);
            reg = x8754;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8755);
            reg = x8755;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8756);
            reg = x8756;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8752);
          reg = x8752;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8757 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8757 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8758 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8758 != Fp::invalid());
        host_args.at(0) = x317;
        host_args.at(1) = x316;
        host_args.at(2) = x319;
        host_args.at(3) = x8757;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][22] = x8757;
        host_args.at(0) = x317;
        host_args.at(1) = x316;
        host_args.at(2) = x318;
        host_args.at(3) = x8758;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][23] = x8758;
      }
      if (x8673 != 0) {
        // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/macro_ops(recursion::MacroInst)/operand[0](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8759 = args[0][17 * steps + ((cycle - 0) & mask)];
        assert(x8759 != Fp::invalid());
        {
          host_args.at(0) = x8759;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8760 = host_outs.at(0);
          auto x8761 = host_outs.at(1);
          auto x8762 = host_outs.at(2);
          auto x8763 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8760);
            reg = x8760;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8761);
            reg = x8761;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8762);
            reg = x8762;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8763);
            reg = x8763;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8759);
          reg = x8759;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8764 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x8764 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8765 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x8765 != Fp::invalid());
        host_args.at(0) = x316;
        host_args.at(1) = x319;
        host_args.at(2) = x319;
        host_args.at(3) = x8764;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][24] = x8764;
        host_args.at(0) = x316;
        host_args.at(1) = x319;
        host_args.at(2) = x318;
        host_args.at(3) = x8765;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][25] = x8765;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8766 = x8759 + x318;
        {
          host_args.at(0) = x8766;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8767 = host_outs.at(0);
          auto x8768 = host_outs.at(1);
          auto x8769 = host_outs.at(2);
          auto x8770 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8767);
            reg = x8767;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8768);
            reg = x8768;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8769);
            reg = x8769;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8770);
            reg = x8770;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8766);
          reg = x8766;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8771 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x8771 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8772 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x8772 != Fp::invalid());
        host_args.at(0) = x316;
        host_args.at(1) = x318;
        host_args.at(2) = x319;
        host_args.at(3) = x8771;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][26] = x8771;
        host_args.at(0) = x316;
        host_args.at(1) = x318;
        host_args.at(2) = x318;
        host_args.at(3) = x8772;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][27] = x8772;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8773 = x8759 + x317;
        {
          host_args.at(0) = x8773;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8774 = host_outs.at(0);
          auto x8775 = host_outs.at(1);
          auto x8776 = host_outs.at(2);
          auto x8777 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8774);
            reg = x8774;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8775);
            reg = x8775;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8776);
            reg = x8776;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8777);
            reg = x8777;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8773);
          reg = x8773;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8778 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x8778 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8779 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x8779 != Fp::invalid());
        host_args.at(0) = x316;
        host_args.at(1) = x317;
        host_args.at(2) = x319;
        host_args.at(3) = x8778;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][28] = x8778;
        host_args.at(0) = x316;
        host_args.at(1) = x317;
        host_args.at(2) = x318;
        host_args.at(3) = x8779;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][29] = x8779;
        // loc("zirgen/circuit/recursion/macro.cpp":37:37)
        auto x8780 = x8759 + x316;
        {
          host_args.at(0) = x8780;
          host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8781 = host_outs.at(0);
          auto x8782 = host_outs.at(1);
          auto x8783 = host_outs.at(2);
          auto x8784 = host_outs.at(3);
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8781);
            reg = x8781;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8782);
            reg = x8782;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8783);
            reg = x8783;
          }
          // loc("zirgen/circuit/recursion/wom.cpp":49:5)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8784);
            reg = x8784;
          }
        }
        // loc("zirgen/circuit/recursion/wom.cpp":84:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8780);
          reg = x8780;
        }
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8785 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x8785 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x8786 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x8786 != Fp::invalid());
        host_args.at(0) = x316;
        host_args.at(1) = x316;
        host_args.at(2) = x319;
        host_args.at(3) = x8785;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][30] = x8785;
        host_args.at(0) = x316;
        host_args.at(1) = x316;
        host_args.at(2) = x318;
        host_args.at(3) = x8786;
        host(ctx, "log", "SET_GLOBAL(%u+%u,%u)->%x", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/circuit/recursion/macro.cpp":40:11)
        args[1][31] = x8786;
      }
    }
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/poseidon2_load(Reg)"("./zirgen/components/mux.h":49:25))
  auto x8787 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x8787 != Fp::invalid());
  if (x8787 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/do_mont(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x8788 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x8788 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":57:13)
    auto x8789 = x8788 * x248;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":57:63)
    auto x8790 = x318 - x8788;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":57:13)
    auto x8791 = x8789 + x8790;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8792 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x8792 != Fp::invalid());
    {
      host_args.at(0) = x8792;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8793 = host_outs.at(0);
      auto x8794 = host_outs.at(1);
      auto x8795 = host_outs.at(2);
      auto x8796 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8793);
        reg = x8793;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8794);
        reg = x8794;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8795);
        reg = x8795;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8796);
        reg = x8796;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":84:3)
    {
      auto& reg = args[2][5 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8792);
      reg = x8792;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
    auto x8797 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x8797 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8798 = x8797 * x8791;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8799 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x8799 != Fp::invalid());
    {
      host_args.at(0) = x8799;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8800 = host_outs.at(0);
      auto x8801 = host_outs.at(1);
      auto x8802 = host_outs.at(2);
      auto x8803 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8800);
        reg = x8800;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8801);
        reg = x8801;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8802);
        reg = x8802;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8803);
        reg = x8803;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":84:3)
    {
      auto& reg = args[2][10 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8799);
      reg = x8799;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
    auto x8804 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x8804 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8805 = x8804 * x8791;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8806 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x8806 != Fp::invalid());
    {
      host_args.at(0) = x8806;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8807 = host_outs.at(0);
      auto x8808 = host_outs.at(1);
      auto x8809 = host_outs.at(2);
      auto x8810 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8807);
        reg = x8807;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8808);
        reg = x8808;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8809);
        reg = x8809;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8810);
        reg = x8810;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":84:3)
    {
      auto& reg = args[2][15 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8806);
      reg = x8806;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
    auto x8811 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x8811 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8812 = x8811 * x8791;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8813 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x8813 != Fp::invalid());
    {
      host_args.at(0) = x8813;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8814 = host_outs.at(0);
      auto x8815 = host_outs.at(1);
      auto x8816 = host_outs.at(2);
      auto x8817 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8814);
        reg = x8814;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8815);
        reg = x8815;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8816);
        reg = x8816;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8817);
        reg = x8817;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":84:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8813);
      reg = x8813;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
    auto x8818 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x8818 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8819 = x8818 * x8791;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[4](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8820 = args[0][17 * steps + ((cycle - 0) & mask)];
    assert(x8820 != Fp::invalid());
    {
      host_args.at(0) = x8820;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8821 = host_outs.at(0);
      auto x8822 = host_outs.at(1);
      auto x8823 = host_outs.at(2);
      auto x8824 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8821);
        reg = x8821;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8822);
        reg = x8822;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8823);
        reg = x8823;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8824);
        reg = x8824;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":84:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8820);
      reg = x8820;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
    auto x8825 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x8825 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8826 = x8825 * x8791;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[5](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8827 = args[0][18 * steps + ((cycle - 0) & mask)];
    assert(x8827 != Fp::invalid());
    {
      host_args.at(0) = x8827;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8828 = host_outs.at(0);
      auto x8829 = host_outs.at(1);
      auto x8830 = host_outs.at(2);
      auto x8831 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8828);
        reg = x8828;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8829);
        reg = x8829;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8830);
        reg = x8830;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8831);
        reg = x8831;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":84:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8827);
      reg = x8827;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
    auto x8832 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x8832 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8833 = x8832 * x8791;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[6](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8834 = args[0][19 * steps + ((cycle - 0) & mask)];
    assert(x8834 != Fp::invalid());
    {
      host_args.at(0) = x8834;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8835 = host_outs.at(0);
      auto x8836 = host_outs.at(1);
      auto x8837 = host_outs.at(2);
      auto x8838 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8835);
        reg = x8835;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8836);
        reg = x8836;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8837);
        reg = x8837;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8838);
        reg = x8838;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":84:3)
    {
      auto& reg = args[2][35 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8834);
      reg = x8834;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
    auto x8839 = args[2][36 * steps + ((cycle - 0) & mask)];
    assert(x8839 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8840 = x8839 * x8791;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/inputs[7](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x8841 = args[0][20 * steps + ((cycle - 0) & mask)];
    assert(x8841 != Fp::invalid());
    {
      host_args.at(0) = x8841;
      host(ctx, "womRead", "", host_args.data(), 1, host_outs.data(), 4);
      auto x8842 = host_outs.at(0);
      auto x8843 = host_outs.at(1);
      auto x8844 = host_outs.at(2);
      auto x8845 = host_outs.at(3);
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8842);
        reg = x8842;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8843);
        reg = x8843;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8844);
        reg = x8844;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8845);
        reg = x8845;
      }
    }
    // loc("zirgen/circuit/recursion/wom.cpp":84:3)
    {
      auto& reg = args[2][40 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x8841);
      reg = x8841;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
    auto x8846 = args[2][41 * steps + ((cycle - 0) & mask)];
    assert(x8846 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":59:24)
    auto x8847 = x8846 * x8791;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/keep_state(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x8848 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x8848 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8849 = args[2][90 * steps + ((cycle - 1) & mask)];
    if (x8849 == Fp::invalid()) x8849 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8850 = x8848 * x8849;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/group(OneHot)/g0(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":65:13))
    auto x8851 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x8851 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8852 = x8851 * x8798;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8853 = x8850 + x8852;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8854 = args[2][91 * steps + ((cycle - 1) & mask)];
    if (x8854 == Fp::invalid()) x8854 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8855 = x8848 * x8854;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8856 = x8851 * x8805;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8857 = x8855 + x8856;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8858 = args[2][92 * steps + ((cycle - 1) & mask)];
    if (x8858 == Fp::invalid()) x8858 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8859 = x8848 * x8858;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8860 = x8851 * x8812;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8861 = x8859 + x8860;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8862 = args[2][93 * steps + ((cycle - 1) & mask)];
    if (x8862 == Fp::invalid()) x8862 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8863 = x8848 * x8862;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8864 = x8851 * x8819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8865 = x8863 + x8864;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8866 = args[2][94 * steps + ((cycle - 1) & mask)];
    if (x8866 == Fp::invalid()) x8866 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8867 = x8848 * x8866;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8868 = x8851 * x8826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8869 = x8867 + x8868;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8870 = args[2][95 * steps + ((cycle - 1) & mask)];
    if (x8870 == Fp::invalid()) x8870 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8871 = x8848 * x8870;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8872 = x8851 * x8833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8873 = x8871 + x8872;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8874 = args[2][96 * steps + ((cycle - 1) & mask)];
    if (x8874 == Fp::invalid()) x8874 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8875 = x8848 * x8874;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8876 = x8851 * x8840;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8877 = x8875 + x8876;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8878 = args[2][97 * steps + ((cycle - 1) & mask)];
    if (x8878 == Fp::invalid()) x8878 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8879 = x8848 * x8878;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8880 = x8851 * x8847;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8881 = x8879 + x8880;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8882 = args[2][98 * steps + ((cycle - 1) & mask)];
    if (x8882 == Fp::invalid()) x8882 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8883 = x8848 * x8882;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/group(OneHot)/g1(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":65:13))
    auto x8884 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x8884 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8885 = x8884 * x8798;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8886 = x8883 + x8885;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8887 = args[2][99 * steps + ((cycle - 1) & mask)];
    if (x8887 == Fp::invalid()) x8887 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8888 = x8848 * x8887;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8889 = x8884 * x8805;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8890 = x8888 + x8889;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8891 = args[2][100 * steps + ((cycle - 1) & mask)];
    if (x8891 == Fp::invalid()) x8891 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8892 = x8848 * x8891;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8893 = x8884 * x8812;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8894 = x8892 + x8893;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8895 = args[2][101 * steps + ((cycle - 1) & mask)];
    if (x8895 == Fp::invalid()) x8895 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8896 = x8848 * x8895;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8897 = x8884 * x8819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8898 = x8896 + x8897;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8899 = args[2][102 * steps + ((cycle - 1) & mask)];
    if (x8899 == Fp::invalid()) x8899 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8900 = x8848 * x8899;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8901 = x8884 * x8826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8902 = x8900 + x8901;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8903 = args[2][103 * steps + ((cycle - 1) & mask)];
    if (x8903 == Fp::invalid()) x8903 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8904 = x8848 * x8903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8905 = x8884 * x8833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8906 = x8904 + x8905;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8907 = args[2][104 * steps + ((cycle - 1) & mask)];
    if (x8907 == Fp::invalid()) x8907 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8908 = x8848 * x8907;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8909 = x8884 * x8840;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8910 = x8908 + x8909;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8911 = args[2][105 * steps + ((cycle - 1) & mask)];
    if (x8911 == Fp::invalid()) x8911 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8912 = x8848 * x8911;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8913 = x8884 * x8847;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8914 = x8912 + x8913;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8915 = args[2][106 * steps + ((cycle - 1) & mask)];
    if (x8915 == Fp::invalid()) x8915 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8916 = x8848 * x8915;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/group(OneHot)/g2(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":65:13))
    auto x8917 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x8917 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8918 = x8917 * x8798;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8919 = x8916 + x8918;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8920 = args[2][107 * steps + ((cycle - 1) & mask)];
    if (x8920 == Fp::invalid()) x8920 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8921 = x8848 * x8920;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8922 = x8917 * x8805;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8923 = x8921 + x8922;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8924 = args[2][108 * steps + ((cycle - 1) & mask)];
    if (x8924 == Fp::invalid()) x8924 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8925 = x8848 * x8924;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8926 = x8917 * x8812;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8927 = x8925 + x8926;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8928 = args[2][109 * steps + ((cycle - 1) & mask)];
    if (x8928 == Fp::invalid()) x8928 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8929 = x8848 * x8928;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8930 = x8917 * x8819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8931 = x8929 + x8930;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8932 = args[2][110 * steps + ((cycle - 1) & mask)];
    if (x8932 == Fp::invalid()) x8932 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8933 = x8848 * x8932;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8934 = x8917 * x8826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8935 = x8933 + x8934;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8936 = args[2][111 * steps + ((cycle - 1) & mask)];
    if (x8936 == Fp::invalid()) x8936 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8937 = x8848 * x8936;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8938 = x8917 * x8833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8939 = x8937 + x8938;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8940 = args[2][112 * steps + ((cycle - 1) & mask)];
    if (x8940 == Fp::invalid()) x8940 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8941 = x8848 * x8940;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8942 = x8917 * x8840;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8943 = x8941 + x8942;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":64:65))
    auto x8944 = args[2][113 * steps + ((cycle - 1) & mask)];
    if (x8944 == Fp::invalid()) x8944 = 0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8945 = x8848 * x8944;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":65:13)
    auto x8946 = x8917 * x8847;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":64:13)
    auto x8947 = x8945 + x8946;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x8948 = x8853 + x8857;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x8949 = x8861 + x8865;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8950 = x8857 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8951 = x8950 + x8949;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8952 = x8865 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8953 = x8952 + x8948;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8954 = x8949 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8955 = x8954 + x8953;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8956 = x8948 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8957 = x8956 + x8951;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x8958 = x8953 + x8957;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x8959 = x8951 + x8955;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x8960 = x8869 + x8873;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x8961 = x8877 + x8881;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8962 = x8873 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8963 = x8962 + x8961;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8964 = x8881 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8965 = x8964 + x8960;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8966 = x8961 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8967 = x8966 + x8965;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8968 = x8960 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8969 = x8968 + x8963;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x8970 = x8965 + x8969;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x8971 = x8963 + x8967;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8972 = x8958 + x8970;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8973 = x8957 + x8969;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8974 = x8959 + x8971;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8975 = x8955 + x8967;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x8976 = x8886 + x8890;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x8977 = x8894 + x8898;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8978 = x8890 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8979 = x8978 + x8977;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8980 = x8898 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8981 = x8980 + x8976;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8982 = x8977 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8983 = x8982 + x8981;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8984 = x8976 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x8985 = x8984 + x8979;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x8986 = x8981 + x8985;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x8987 = x8979 + x8983;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8988 = x8972 + x8986;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8989 = x8973 + x8985;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8990 = x8974 + x8987;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x8991 = x8975 + x8983;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x8992 = x8902 + x8906;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x8993 = x8910 + x8914;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8994 = x8906 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x8995 = x8994 + x8993;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8996 = x8914 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x8997 = x8996 + x8992;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8998 = x8993 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x8999 = x8998 + x8997;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9000 = x8992 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9001 = x9000 + x8995;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9002 = x8997 + x9001;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9003 = x8995 + x8999;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9004 = x8988 + x9002;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9005 = x8989 + x9001;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9006 = x8990 + x9003;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9007 = x8991 + x8999;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9008 = x8919 + x8923;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9009 = x8927 + x8931;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9010 = x8923 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9011 = x9010 + x9009;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9012 = x8931 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9013 = x9012 + x9008;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9014 = x9009 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9015 = x9014 + x9013;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9016 = x9008 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9017 = x9016 + x9011;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9018 = x9013 + x9017;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9019 = x9011 + x9015;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9020 = x9004 + x9018;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9021 = x9005 + x9017;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9022 = x9006 + x9019;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9023 = x9007 + x9015;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9024 = x8935 + x8939;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9025 = x8943 + x8947;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9026 = x8939 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9027 = x9026 + x9025;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9028 = x8947 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9029 = x9028 + x9024;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9030 = x9025 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9031 = x9030 + x9029;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9032 = x9024 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9033 = x9032 + x9027;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9034 = x9029 + x9033;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9035 = x9027 + x9031;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9036 = x9020 + x9034;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9037 = x9021 + x9033;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9038 = x9022 + x9035;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9039 = x9023 + x9031;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9040 = x8958 + x9036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9041 = x8957 + x9037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9042 = x8959 + x9038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9043 = x8955 + x9039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9044 = x8970 + x9036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9045 = x8969 + x9037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9046 = x8971 + x9038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9047 = x8967 + x9039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9048 = x8986 + x9036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9049 = x8985 + x9037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9050 = x8987 + x9038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9051 = x8983 + x9039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9052 = x9002 + x9036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9053 = x9001 + x9037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9054 = x9003 + x9038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9055 = x8999 + x9039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9056 = x9018 + x9036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9057 = x9017 + x9037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9058 = x9019 + x9038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9059 = x9015 + x9039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9060 = x9034 + x9036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9061 = x9033 + x9037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9062 = x9035 + x9038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9063 = x9031 + x9039;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_load(recursion::Poseidon2MemInst)/prep_full(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x9064 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x9064 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9065 = x9064 * x9040;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:39)
    auto x9066 = x318 - x9064;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9067 = x9066 * x8853;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9068 = x9065 + x9067;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9069 = x9064 * x247;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9070 = x9068 + x9069;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][90 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9070);
      reg = x9070;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9071 = x9064 * x9041;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9072 = x9066 * x8857;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9073 = x9071 + x9072;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9074 = x9064 * x246;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9075 = x9073 + x9074;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][91 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9075);
      reg = x9075;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9076 = x9064 * x9042;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9077 = x9066 * x8861;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9078 = x9076 + x9077;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9079 = x9064 * x245;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9080 = x9078 + x9079;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9080);
      reg = x9080;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9081 = x9064 * x9043;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9082 = x9066 * x8865;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9083 = x9081 + x9082;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9084 = x9064 * x244;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9085 = x9083 + x9084;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9085);
      reg = x9085;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9086 = x9064 * x9044;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9087 = x9066 * x8869;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9088 = x9086 + x9087;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9089 = x9064 * x243;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9090 = x9088 + x9089;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9090);
      reg = x9090;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9091 = x9064 * x9045;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9092 = x9066 * x8873;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9093 = x9091 + x9092;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9094 = x9064 * x242;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9095 = x9093 + x9094;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9095);
      reg = x9095;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9096 = x9064 * x9046;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9097 = x9066 * x8877;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9098 = x9096 + x9097;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9099 = x9064 * x241;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9100 = x9098 + x9099;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9100);
      reg = x9100;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9101 = x9064 * x9047;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9102 = x9066 * x8881;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9103 = x9101 + x9102;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9104 = x9064 * x240;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9105 = x9103 + x9104;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9105);
      reg = x9105;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9106 = x9064 * x9048;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9107 = x9066 * x8886;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9108 = x9106 + x9107;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9109 = x9064 * x239;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9110 = x9108 + x9109;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9110);
      reg = x9110;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9111 = x9064 * x9049;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9112 = x9066 * x8890;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9113 = x9111 + x9112;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9114 = x9064 * x238;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9115 = x9113 + x9114;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9115);
      reg = x9115;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9116 = x9064 * x9050;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9117 = x9066 * x8894;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9118 = x9116 + x9117;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9119 = x9064 * x237;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9120 = x9118 + x9119;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9120);
      reg = x9120;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9121 = x9064 * x9051;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9122 = x9066 * x8898;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9123 = x9121 + x9122;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9124 = x9064 * x236;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9125 = x9123 + x9124;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9125);
      reg = x9125;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9126 = x9064 * x9052;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9127 = x9066 * x8902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9128 = x9126 + x9127;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9129 = x9064 * x235;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9130 = x9128 + x9129;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9130);
      reg = x9130;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9131 = x9064 * x9053;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9132 = x9066 * x8906;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9133 = x9131 + x9132;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9134 = x9064 * x234;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9135 = x9133 + x9134;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9135);
      reg = x9135;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9136 = x9064 * x9054;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9137 = x9066 * x8910;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9138 = x9136 + x9137;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9139 = x9064 * x233;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9140 = x9138 + x9139;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9140);
      reg = x9140;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9141 = x9064 * x9055;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9142 = x9066 * x8914;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9143 = x9141 + x9142;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9144 = x9064 * x232;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9145 = x9143 + x9144;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9145);
      reg = x9145;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9146 = x9064 * x9056;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9147 = x9066 * x8919;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9148 = x9146 + x9147;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9149 = x9064 * x231;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9150 = x9148 + x9149;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9150);
      reg = x9150;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9151 = x9064 * x9057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9152 = x9066 * x8923;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9153 = x9151 + x9152;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9154 = x9064 * x230;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9155 = x9153 + x9154;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9155);
      reg = x9155;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9156 = x9064 * x9058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9157 = x9066 * x8927;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9158 = x9156 + x9157;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9159 = x9064 * x229;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9160 = x9158 + x9159;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9160);
      reg = x9160;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9161 = x9064 * x9059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9162 = x9066 * x8931;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9163 = x9161 + x9162;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9164 = x9064 * x228;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9165 = x9163 + x9164;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9165);
      reg = x9165;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9166 = x9064 * x9060;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9167 = x9066 * x8935;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9168 = x9166 + x9167;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9169 = x9064 * x227;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9170 = x9168 + x9169;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9170);
      reg = x9170;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9171 = x9064 * x9061;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9172 = x9066 * x8939;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9173 = x9171 + x9172;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9174 = x9064 * x226;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9175 = x9173 + x9174;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9175);
      reg = x9175;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9176 = x9064 * x9062;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9177 = x9066 * x8943;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9178 = x9176 + x9177;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9179 = x9064 * x225;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9180 = x9178 + x9179;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9180);
      reg = x9180;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9181 = x9064 * x9063;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:38)
    auto x9182 = x9066 * x8947;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":71:11)
    auto x9183 = x9181 + x9182;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:17)
    auto x9184 = x9064 * x224;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":72:11)
    auto x9185 = x9183 + x9184;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":73:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9185);
      reg = x9185;
    }
    // loc("./zirgen/components/onehot.h":46:19)
    auto x9186 = x8917 * x317;
    // loc("./zirgen/components/onehot.h":46:13)
    auto x9187 = x8884 + x9186;
    host_args.at(0) = x8848;
    host_args.at(1) = x9064;
    host_args.at(2) = x9187;
    host(ctx, "log", "POSEIDON2_LOAD: %u, %u, %u", host_args.data(), 3, host_outs.data(), 0);
    host_args.at(0) = x319;
    host_args.at(1) = x8798;
    host(ctx, "log", "  readVals[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x318;
    host_args.at(1) = x8805;
    host(ctx, "log", "  readVals[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x317;
    host_args.at(1) = x8812;
    host(ctx, "log", "  readVals[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x316;
    host_args.at(1) = x8819;
    host(ctx, "log", "  readVals[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x315;
    host_args.at(1) = x8826;
    host(ctx, "log", "  readVals[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x314;
    host_args.at(1) = x8833;
    host(ctx, "log", "  readVals[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x313;
    host_args.at(1) = x8840;
    host(ctx, "log", "  readVals[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x312;
    host_args.at(1) = x8847;
    host(ctx, "log", "  readVals[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x319;
    host_args.at(1) = x8853;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x318;
    host_args.at(1) = x8857;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x317;
    host_args.at(1) = x8861;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x316;
    host_args.at(1) = x8865;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x315;
    host_args.at(1) = x8869;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x314;
    host_args.at(1) = x8873;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x313;
    host_args.at(1) = x8877;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x312;
    host_args.at(1) = x8881;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x311;
    host_args.at(1) = x8886;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x310;
    host_args.at(1) = x8890;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x309;
    host_args.at(1) = x8894;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x308;
    host_args.at(1) = x8898;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x223;
    host_args.at(1) = x8902;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x222;
    host_args.at(1) = x8906;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x221;
    host_args.at(1) = x8910;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x220;
    host_args.at(1) = x8914;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x302;
    host_args.at(1) = x8919;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x219;
    host_args.at(1) = x8923;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x218;
    host_args.at(1) = x8927;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x217;
    host_args.at(1) = x8931;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x216;
    host_args.at(1) = x8935;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x215;
    host_args.at(1) = x8939;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x214;
    host_args.at(1) = x8943;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    host_args.at(0) = x213;
    host_args.at(1) = x8947;
    host(ctx, "log", "  in[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9188 = args[2][90 * steps + ((cycle - 0) & mask)];
    assert(x9188 != Fp::invalid());
    host_args.at(0) = x319;
    host_args.at(1) = x9188;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9189 = args[2][91 * steps + ((cycle - 0) & mask)];
    assert(x9189 != Fp::invalid());
    host_args.at(0) = x318;
    host_args.at(1) = x9189;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9190 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x9190 != Fp::invalid());
    host_args.at(0) = x317;
    host_args.at(1) = x9190;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9191 = args[2][93 * steps + ((cycle - 0) & mask)];
    assert(x9191 != Fp::invalid());
    host_args.at(0) = x316;
    host_args.at(1) = x9191;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9192 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x9192 != Fp::invalid());
    host_args.at(0) = x315;
    host_args.at(1) = x9192;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9193 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x9193 != Fp::invalid());
    host_args.at(0) = x314;
    host_args.at(1) = x9193;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9194 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x9194 != Fp::invalid());
    host_args.at(0) = x313;
    host_args.at(1) = x9194;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9195 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x9195 != Fp::invalid());
    host_args.at(0) = x312;
    host_args.at(1) = x9195;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9196 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x9196 != Fp::invalid());
    host_args.at(0) = x311;
    host_args.at(1) = x9196;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9197 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x9197 != Fp::invalid());
    host_args.at(0) = x310;
    host_args.at(1) = x9197;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9198 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x9198 != Fp::invalid());
    host_args.at(0) = x309;
    host_args.at(1) = x9198;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9199 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x9199 != Fp::invalid());
    host_args.at(0) = x308;
    host_args.at(1) = x9199;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9200 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x9200 != Fp::invalid());
    host_args.at(0) = x223;
    host_args.at(1) = x9200;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9201 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x9201 != Fp::invalid());
    host_args.at(0) = x222;
    host_args.at(1) = x9201;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9202 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x9202 != Fp::invalid());
    host_args.at(0) = x221;
    host_args.at(1) = x9202;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9203 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x9203 != Fp::invalid());
    host_args.at(0) = x220;
    host_args.at(1) = x9203;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9204 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x9204 != Fp::invalid());
    host_args.at(0) = x302;
    host_args.at(1) = x9204;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9205 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x9205 != Fp::invalid());
    host_args.at(0) = x219;
    host_args.at(1) = x9205;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9206 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x9206 != Fp::invalid());
    host_args.at(0) = x218;
    host_args.at(1) = x9206;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9207 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x9207 != Fp::invalid());
    host_args.at(0) = x217;
    host_args.at(1) = x9207;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9208 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x9208 != Fp::invalid());
    host_args.at(0) = x216;
    host_args.at(1) = x9208;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9209 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x9209 != Fp::invalid());
    host_args.at(0) = x215;
    host_args.at(1) = x9209;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9210 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x9210 != Fp::invalid());
    host_args.at(0) = x214;
    host_args.at(1) = x9210;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x9211 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x9211 != Fp::invalid());
    host_args.at(0) = x213;
    host_args.at(1) = x9211;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/poseidon2_full(Reg)"("./zirgen/components/mux.h":49:25))
  auto x9212 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x9212 != Fp::invalid());
  if (x9212 != 0) {
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9213 = args[2][90 * steps + ((cycle - 1) & mask)];
    assert(x9213 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9214 = args[2][91 * steps + ((cycle - 1) & mask)];
    assert(x9214 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9215 = args[2][92 * steps + ((cycle - 1) & mask)];
    assert(x9215 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9216 = args[2][93 * steps + ((cycle - 1) & mask)];
    assert(x9216 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9217 = args[2][94 * steps + ((cycle - 1) & mask)];
    assert(x9217 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9218 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x9218 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9219 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x9219 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9220 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x9220 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9221 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x9221 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9222 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x9222 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9223 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x9223 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9224 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x9224 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9225 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x9225 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9226 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x9226 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9227 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x9227 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9228 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x9228 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9229 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x9229 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9230 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x9230 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9231 = args[2][108 * steps + ((cycle - 1) & mask)];
    assert(x9231 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9232 = args[2][109 * steps + ((cycle - 1) & mask)];
    assert(x9232 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9233 = args[2][110 * steps + ((cycle - 1) & mask)];
    assert(x9233 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9234 = args[2][111 * steps + ((cycle - 1) & mask)];
    assert(x9234 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9235 = args[2][112 * steps + ((cycle - 1) & mask)];
    assert(x9235 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":144:42))
    auto x9236 = args[2][113 * steps + ((cycle - 1) & mask)];
    assert(x9236 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9237 = x9213 * x9213;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9238 = x9237 * x9237;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][5 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9238);
      reg = x9238;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9239 = args[2][5 * steps + ((cycle - 0) & mask)];
    assert(x9239 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9240 = x9239 * x9237;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9241 = x9240 * x9213;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9242 = x9214 * x9214;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9243 = x9242 * x9242;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][6 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9243);
      reg = x9243;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9244 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x9244 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9245 = x9244 * x9242;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9246 = x9245 * x9214;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9247 = x9215 * x9215;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9248 = x9247 * x9247;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][7 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9248);
      reg = x9248;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9249 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x9249 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9250 = x9249 * x9247;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9251 = x9250 * x9215;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9252 = x9216 * x9216;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9253 = x9252 * x9252;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][8 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9253);
      reg = x9253;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9254 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x9254 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9255 = x9254 * x9252;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9256 = x9255 * x9216;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9257 = x9217 * x9217;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9258 = x9257 * x9257;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9258);
      reg = x9258;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9259 = args[2][9 * steps + ((cycle - 0) & mask)];
    assert(x9259 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9260 = x9259 * x9257;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9261 = x9260 * x9217;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9262 = x9218 * x9218;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9263 = x9262 * x9262;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][10 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9263);
      reg = x9263;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9264 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x9264 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9265 = x9264 * x9262;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9266 = x9265 * x9218;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9267 = x9219 * x9219;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9268 = x9267 * x9267;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][11 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9268);
      reg = x9268;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9269 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x9269 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9270 = x9269 * x9267;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9271 = x9270 * x9219;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9272 = x9220 * x9220;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9273 = x9272 * x9272;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][12 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9273);
      reg = x9273;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9274 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x9274 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9275 = x9274 * x9272;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9276 = x9275 * x9220;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9277 = x9221 * x9221;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9278 = x9277 * x9277;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][13 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9278);
      reg = x9278;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9279 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x9279 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9280 = x9279 * x9277;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9281 = x9280 * x9221;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9282 = x9222 * x9222;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9283 = x9282 * x9282;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][14 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9283);
      reg = x9283;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9284 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x9284 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9285 = x9284 * x9282;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9286 = x9285 * x9222;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9287 = x9223 * x9223;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9288 = x9287 * x9287;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][15 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9288);
      reg = x9288;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9289 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x9289 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9290 = x9289 * x9287;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9291 = x9290 * x9223;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9292 = x9224 * x9224;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9293 = x9292 * x9292;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9293);
      reg = x9293;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9294 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x9294 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9295 = x9294 * x9292;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9296 = x9295 * x9224;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9297 = x9225 * x9225;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9298 = x9297 * x9297;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][17 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9298);
      reg = x9298;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9299 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x9299 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9300 = x9299 * x9297;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9301 = x9300 * x9225;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9302 = x9226 * x9226;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9303 = x9302 * x9302;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9303);
      reg = x9303;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9304 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x9304 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9305 = x9304 * x9302;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9306 = x9305 * x9226;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9307 = x9227 * x9227;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9308 = x9307 * x9307;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][19 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9308);
      reg = x9308;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9309 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x9309 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9310 = x9309 * x9307;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9311 = x9310 * x9227;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9312 = x9228 * x9228;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9313 = x9312 * x9312;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9313);
      reg = x9313;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9314 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x9314 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9315 = x9314 * x9312;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9316 = x9315 * x9228;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9317 = x9229 * x9229;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9318 = x9317 * x9317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][21 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9318);
      reg = x9318;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9319 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x9319 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9320 = x9319 * x9317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9321 = x9320 * x9229;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9322 = x9230 * x9230;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9323 = x9322 * x9322;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9323);
      reg = x9323;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9324 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x9324 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9325 = x9324 * x9322;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9326 = x9325 * x9230;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9327 = x9231 * x9231;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9328 = x9327 * x9327;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9328);
      reg = x9328;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9329 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x9329 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9330 = x9329 * x9327;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9331 = x9330 * x9231;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9332 = x9232 * x9232;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9333 = x9332 * x9332;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9333);
      reg = x9333;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9334 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x9334 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9335 = x9334 * x9332;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9336 = x9335 * x9232;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9337 = x9233 * x9233;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9338 = x9337 * x9337;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9338);
      reg = x9338;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9339 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x9339 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9340 = x9339 * x9337;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9341 = x9340 * x9233;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9342 = x9234 * x9234;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9343 = x9342 * x9342;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9343);
      reg = x9343;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9344 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x9344 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9345 = x9344 * x9342;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9346 = x9345 * x9234;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9347 = x9235 * x9235;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9348 = x9347 * x9347;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][27 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9348);
      reg = x9348;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9349 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x9349 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9350 = x9349 * x9347;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9351 = x9350 * x9235;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9352 = x9236 * x9236;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9353 = x9352 * x9352;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][28 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9353);
      reg = x9353;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9354 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x9354 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9355 = x9354 * x9352;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9356 = x9355 * x9236;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9357 = x9241 + x9246;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9358 = x9251 + x9256;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9359 = x9246 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9360 = x9359 + x9358;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9361 = x9256 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9362 = x9361 + x9357;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9363 = x9358 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9364 = x9363 + x9362;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9365 = x9357 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9366 = x9365 + x9360;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9367 = x9362 + x9366;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9368 = x9360 + x9364;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9369 = x9261 + x9266;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9370 = x9271 + x9276;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9371 = x9266 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9372 = x9371 + x9370;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9373 = x9276 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9374 = x9373 + x9369;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9375 = x9370 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9376 = x9375 + x9374;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9377 = x9369 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9378 = x9377 + x9372;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9379 = x9374 + x9378;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9380 = x9372 + x9376;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9381 = x9367 + x9379;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9382 = x9366 + x9378;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9383 = x9368 + x9380;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9384 = x9364 + x9376;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9385 = x9281 + x9286;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9386 = x9291 + x9296;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9387 = x9286 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9388 = x9387 + x9386;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9389 = x9296 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9390 = x9389 + x9385;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9391 = x9386 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9392 = x9391 + x9390;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9393 = x9385 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9394 = x9393 + x9388;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9395 = x9390 + x9394;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9396 = x9388 + x9392;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9397 = x9381 + x9395;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9398 = x9382 + x9394;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9399 = x9383 + x9396;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9400 = x9384 + x9392;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9401 = x9301 + x9306;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9402 = x9311 + x9316;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9403 = x9306 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9404 = x9403 + x9402;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9405 = x9316 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9406 = x9405 + x9401;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9407 = x9402 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9408 = x9407 + x9406;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9409 = x9401 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9410 = x9409 + x9404;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9411 = x9406 + x9410;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9412 = x9404 + x9408;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9413 = x9397 + x9411;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9414 = x9398 + x9410;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9415 = x9399 + x9412;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9416 = x9400 + x9408;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9417 = x9321 + x9326;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9418 = x9331 + x9336;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9419 = x9326 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9420 = x9419 + x9418;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9421 = x9336 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9422 = x9421 + x9417;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9423 = x9418 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9424 = x9423 + x9422;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9425 = x9417 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9426 = x9425 + x9420;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9427 = x9422 + x9426;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9428 = x9420 + x9424;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9429 = x9413 + x9427;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9430 = x9414 + x9426;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9431 = x9415 + x9428;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9432 = x9416 + x9424;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9433 = x9341 + x9346;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9434 = x9351 + x9356;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9435 = x9346 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9436 = x9435 + x9434;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9437 = x9356 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9438 = x9437 + x9433;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9439 = x9434 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9440 = x9439 + x9438;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9441 = x9433 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9442 = x9441 + x9436;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9443 = x9438 + x9442;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9444 = x9436 + x9440;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9445 = x9429 + x9443;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9446 = x9430 + x9442;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9447 = x9431 + x9444;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9448 = x9432 + x9440;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9449 = x9367 + x9445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9450 = x9366 + x9446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9451 = x9368 + x9447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9452 = x9364 + x9448;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9453 = x9379 + x9445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9454 = x9378 + x9446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9455 = x9380 + x9447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9456 = x9376 + x9448;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9457 = x9395 + x9445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9458 = x9394 + x9446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9459 = x9396 + x9447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9460 = x9392 + x9448;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9461 = x9411 + x9445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9462 = x9410 + x9446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9463 = x9412 + x9447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9464 = x9408 + x9448;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9465 = x9427 + x9445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9466 = x9426 + x9446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9467 = x9428 + x9447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9468 = x9424 + x9448;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9469 = x9443 + x9445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9470 = x9442 + x9446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9471 = x9444 + x9447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9472 = x9440 + x9448;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_full(recursion::Poseidon2FullInst)/cycle(OneHot)/c0(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":132:19))
    auto x9473 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x9473 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9474 = x9473 * x212;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_full(recursion::Poseidon2FullInst)/cycle(OneHot)/c1(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":132:19))
    auto x9475 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x9475 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9476 = x9475 * x211;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9477 = x9474 + x9476;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_full(recursion::Poseidon2FullInst)/cycle(OneHot)/c2(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":132:19))
    auto x9478 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x9478 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9479 = x9478 * x210;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9480 = x9477 + x9479;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_full(recursion::Poseidon2FullInst)/cycle(OneHot)/c3(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":132:19))
    auto x9481 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x9481 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9482 = x9481 * x209;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9483 = x9480 + x9482;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9484 = x9473 * x208;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9485 = x9475 * x207;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9486 = x9484 + x9485;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9487 = x9478 * x206;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9488 = x9486 + x9487;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9489 = x9481 * x205;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9490 = x9488 + x9489;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9491 = x9473 * x204;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9492 = x9475 * x203;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9493 = x9491 + x9492;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9494 = x9478 * x202;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9495 = x9493 + x9494;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9496 = x9481 * x201;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9497 = x9495 + x9496;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9498 = x9473 * x200;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9499 = x9475 * x199;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9500 = x9498 + x9499;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9501 = x9478 * x198;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9502 = x9500 + x9501;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9503 = x9481 * x197;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9504 = x9502 + x9503;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9505 = x9473 * x196;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9506 = x9475 * x195;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9507 = x9505 + x9506;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9508 = x9478 * x194;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9509 = x9507 + x9508;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9510 = x9481 * x193;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9511 = x9509 + x9510;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9512 = x9473 * x192;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9513 = x9475 * x191;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9514 = x9512 + x9513;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9515 = x9478 * x190;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9516 = x9514 + x9515;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9517 = x9481 * x189;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9518 = x9516 + x9517;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9519 = x9473 * x188;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9520 = x9475 * x187;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9521 = x9519 + x9520;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9522 = x9478 * x186;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9523 = x9521 + x9522;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9524 = x9481 * x185;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9525 = x9523 + x9524;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9526 = x9473 * x184;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9527 = x9475 * x183;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9528 = x9526 + x9527;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9529 = x9478 * x182;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9530 = x9528 + x9529;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9531 = x9481 * x181;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9532 = x9530 + x9531;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9533 = x9473 * x180;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9534 = x9475 * x179;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9535 = x9533 + x9534;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9536 = x9478 * x178;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9537 = x9535 + x9536;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9538 = x9481 * x177;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9539 = x9537 + x9538;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9540 = x9473 * x176;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9541 = x9475 * x175;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9542 = x9540 + x9541;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9543 = x9478 * x174;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9544 = x9542 + x9543;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9545 = x9481 * x173;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9546 = x9544 + x9545;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9547 = x9473 * x172;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9548 = x9475 * x171;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9549 = x9547 + x9548;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9550 = x9478 * x170;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9551 = x9549 + x9550;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9552 = x9481 * x169;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9553 = x9551 + x9552;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9554 = x9473 * x168;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9555 = x9475 * x167;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9556 = x9554 + x9555;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9557 = x9478 * x166;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9558 = x9556 + x9557;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9559 = x9481 * x165;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9560 = x9558 + x9559;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9561 = x9473 * x164;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9562 = x9475 * x163;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9563 = x9561 + x9562;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9564 = x9478 * x162;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9565 = x9563 + x9564;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9566 = x9481 * x161;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9567 = x9565 + x9566;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9568 = x9473 * x160;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9569 = x9475 * x159;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9570 = x9568 + x9569;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9571 = x9478 * x158;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9572 = x9570 + x9571;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9573 = x9481 * x157;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9574 = x9572 + x9573;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9575 = x9473 * x156;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9576 = x9475 * x155;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9577 = x9575 + x9576;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9578 = x9478 * x154;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9579 = x9577 + x9578;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9580 = x9481 * x153;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9581 = x9579 + x9580;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9582 = x9473 * x152;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9583 = x9475 * x151;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9584 = x9582 + x9583;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9585 = x9478 * x150;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9586 = x9584 + x9585;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9587 = x9481 * x149;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9588 = x9586 + x9587;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9589 = x9473 * x148;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9590 = x9475 * x147;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9591 = x9589 + x9590;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9592 = x9478 * x146;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9593 = x9591 + x9592;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9594 = x9481 * x145;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9595 = x9593 + x9594;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9596 = x9473 * x144;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9597 = x9475 * x143;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9598 = x9596 + x9597;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9599 = x9478 * x142;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9600 = x9598 + x9599;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9601 = x9481 * x141;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9602 = x9600 + x9601;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9603 = x9473 * x140;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9604 = x9475 * x139;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9605 = x9603 + x9604;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9606 = x9478 * x138;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9607 = x9605 + x9606;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9608 = x9481 * x137;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9609 = x9607 + x9608;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9610 = x9473 * x136;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9611 = x9475 * x135;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9612 = x9610 + x9611;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9613 = x9478 * x134;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9614 = x9612 + x9613;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9615 = x9481 * x133;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9616 = x9614 + x9615;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9617 = x9473 * x132;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9618 = x9475 * x131;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9619 = x9617 + x9618;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9620 = x9478 * x130;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9621 = x9619 + x9620;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9622 = x9481 * x129;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9623 = x9621 + x9622;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9624 = x9473 * x128;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9625 = x9475 * x127;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9626 = x9624 + x9625;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9627 = x9478 * x126;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9628 = x9626 + x9627;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9629 = x9481 * x125;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9630 = x9628 + x9629;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9631 = x9473 * x124;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9632 = x9475 * x123;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9633 = x9631 + x9632;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9634 = x9478 * x122;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9635 = x9633 + x9634;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9636 = x9481 * x121;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9637 = x9635 + x9636;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9638 = x9473 * x120;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9639 = x9475 * x119;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9640 = x9638 + x9639;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9641 = x9478 * x118;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9642 = x9640 + x9641;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9643 = x9481 * x117;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9644 = x9642 + x9643;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9645 = x9449 + x9483;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9645);
      reg = x9645;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9646 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x9646 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9647 = x9646 * x9646;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9648 = x9647 * x9647;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][53 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9648);
      reg = x9648;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9649 = args[2][53 * steps + ((cycle - 0) & mask)];
    assert(x9649 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9650 = x9649 * x9647;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9651 = x9650 * x9646;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9652 = x9450 + x9490;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9652);
      reg = x9652;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9653 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x9653 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9654 = x9653 * x9653;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9655 = x9654 * x9654;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][54 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9655);
      reg = x9655;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9656 = args[2][54 * steps + ((cycle - 0) & mask)];
    assert(x9656 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9657 = x9656 * x9654;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9658 = x9657 * x9653;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9659 = x9451 + x9497;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9659);
      reg = x9659;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9660 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x9660 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9661 = x9660 * x9660;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9662 = x9661 * x9661;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][55 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9662);
      reg = x9662;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9663 = args[2][55 * steps + ((cycle - 0) & mask)];
    assert(x9663 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9664 = x9663 * x9661;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9665 = x9664 * x9660;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9666 = x9452 + x9504;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][32 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9666);
      reg = x9666;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9667 = args[2][32 * steps + ((cycle - 0) & mask)];
    assert(x9667 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9668 = x9667 * x9667;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9669 = x9668 * x9668;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][56 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9669);
      reg = x9669;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9670 = args[2][56 * steps + ((cycle - 0) & mask)];
    assert(x9670 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9671 = x9670 * x9668;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9672 = x9671 * x9667;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9673 = x9453 + x9511;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9673);
      reg = x9673;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9674 = args[2][33 * steps + ((cycle - 0) & mask)];
    assert(x9674 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9675 = x9674 * x9674;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9676 = x9675 * x9675;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][57 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9676);
      reg = x9676;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9677 = args[2][57 * steps + ((cycle - 0) & mask)];
    assert(x9677 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9678 = x9677 * x9675;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9679 = x9678 * x9674;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9680 = x9454 + x9518;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][34 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9680);
      reg = x9680;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9681 = args[2][34 * steps + ((cycle - 0) & mask)];
    assert(x9681 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9682 = x9681 * x9681;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9683 = x9682 * x9682;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9683);
      reg = x9683;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9684 = args[2][58 * steps + ((cycle - 0) & mask)];
    assert(x9684 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9685 = x9684 * x9682;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9686 = x9685 * x9681;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9687 = x9455 + x9525;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][35 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9687);
      reg = x9687;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9688 = args[2][35 * steps + ((cycle - 0) & mask)];
    assert(x9688 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9689 = x9688 * x9688;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9690 = x9689 * x9689;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9690);
      reg = x9690;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9691 = args[2][59 * steps + ((cycle - 0) & mask)];
    assert(x9691 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9692 = x9691 * x9689;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9693 = x9692 * x9688;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9694 = x9456 + x9532;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][36 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9694);
      reg = x9694;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9695 = args[2][36 * steps + ((cycle - 0) & mask)];
    assert(x9695 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9696 = x9695 * x9695;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9697 = x9696 * x9696;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9697);
      reg = x9697;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9698 = args[2][60 * steps + ((cycle - 0) & mask)];
    assert(x9698 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9699 = x9698 * x9696;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9700 = x9699 * x9695;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9701 = x9457 + x9539;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][37 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9701);
      reg = x9701;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9702 = args[2][37 * steps + ((cycle - 0) & mask)];
    assert(x9702 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9703 = x9702 * x9702;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9704 = x9703 * x9703;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9704);
      reg = x9704;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9705 = args[2][61 * steps + ((cycle - 0) & mask)];
    assert(x9705 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9706 = x9705 * x9703;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9707 = x9706 * x9702;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9708 = x9458 + x9546;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][38 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9708);
      reg = x9708;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9709 = args[2][38 * steps + ((cycle - 0) & mask)];
    assert(x9709 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9710 = x9709 * x9709;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9711 = x9710 * x9710;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][62 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9711);
      reg = x9711;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9712 = args[2][62 * steps + ((cycle - 0) & mask)];
    assert(x9712 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9713 = x9712 * x9710;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9714 = x9713 * x9709;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9715 = x9459 + x9553;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][39 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9715);
      reg = x9715;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9716 = args[2][39 * steps + ((cycle - 0) & mask)];
    assert(x9716 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9717 = x9716 * x9716;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9718 = x9717 * x9717;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][63 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9718);
      reg = x9718;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9719 = args[2][63 * steps + ((cycle - 0) & mask)];
    assert(x9719 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9720 = x9719 * x9717;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9721 = x9720 * x9716;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9722 = x9460 + x9560;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][40 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9722);
      reg = x9722;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9723 = args[2][40 * steps + ((cycle - 0) & mask)];
    assert(x9723 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9724 = x9723 * x9723;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9725 = x9724 * x9724;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][64 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9725);
      reg = x9725;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9726 = args[2][64 * steps + ((cycle - 0) & mask)];
    assert(x9726 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9727 = x9726 * x9724;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9728 = x9727 * x9723;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9729 = x9461 + x9567;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][41 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9729);
      reg = x9729;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9730 = args[2][41 * steps + ((cycle - 0) & mask)];
    assert(x9730 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9731 = x9730 * x9730;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9732 = x9731 * x9731;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9732);
      reg = x9732;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9733 = args[2][65 * steps + ((cycle - 0) & mask)];
    assert(x9733 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9734 = x9733 * x9731;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9735 = x9734 * x9730;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9736 = x9462 + x9574;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][42 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9736);
      reg = x9736;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9737 = args[2][42 * steps + ((cycle - 0) & mask)];
    assert(x9737 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9738 = x9737 * x9737;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9739 = x9738 * x9738;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9739);
      reg = x9739;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9740 = args[2][66 * steps + ((cycle - 0) & mask)];
    assert(x9740 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9741 = x9740 * x9738;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9742 = x9741 * x9737;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9743 = x9463 + x9581;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][43 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9743);
      reg = x9743;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9744 = args[2][43 * steps + ((cycle - 0) & mask)];
    assert(x9744 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9745 = x9744 * x9744;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9746 = x9745 * x9745;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9746);
      reg = x9746;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9747 = args[2][67 * steps + ((cycle - 0) & mask)];
    assert(x9747 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9748 = x9747 * x9745;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9749 = x9748 * x9744;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9750 = x9464 + x9588;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][44 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9750);
      reg = x9750;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9751 = args[2][44 * steps + ((cycle - 0) & mask)];
    assert(x9751 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9752 = x9751 * x9751;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9753 = x9752 * x9752;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9753);
      reg = x9753;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9754 = args[2][68 * steps + ((cycle - 0) & mask)];
    assert(x9754 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9755 = x9754 * x9752;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9756 = x9755 * x9751;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9757 = x9465 + x9595;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][45 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9757);
      reg = x9757;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9758 = args[2][45 * steps + ((cycle - 0) & mask)];
    assert(x9758 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9759 = x9758 * x9758;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9760 = x9759 * x9759;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][69 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9760);
      reg = x9760;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9761 = args[2][69 * steps + ((cycle - 0) & mask)];
    assert(x9761 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9762 = x9761 * x9759;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9763 = x9762 * x9758;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9764 = x9466 + x9602;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][46 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9764);
      reg = x9764;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9765 = args[2][46 * steps + ((cycle - 0) & mask)];
    assert(x9765 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9766 = x9765 * x9765;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9767 = x9766 * x9766;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][70 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9767);
      reg = x9767;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9768 = args[2][70 * steps + ((cycle - 0) & mask)];
    assert(x9768 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9769 = x9768 * x9766;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9770 = x9769 * x9765;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9771 = x9467 + x9609;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][47 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9771);
      reg = x9771;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9772 = args[2][47 * steps + ((cycle - 0) & mask)];
    assert(x9772 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9773 = x9772 * x9772;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9774 = x9773 * x9773;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][71 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9774);
      reg = x9774;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9775 = args[2][71 * steps + ((cycle - 0) & mask)];
    assert(x9775 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9776 = x9775 * x9773;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9777 = x9776 * x9772;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9778 = x9468 + x9616;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][48 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9778);
      reg = x9778;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9779 = args[2][48 * steps + ((cycle - 0) & mask)];
    assert(x9779 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9780 = x9779 * x9779;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9781 = x9780 * x9780;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9781);
      reg = x9781;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9782 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x9782 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9783 = x9782 * x9780;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9784 = x9783 * x9779;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9785 = x9469 + x9623;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][49 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9785);
      reg = x9785;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9786 = args[2][49 * steps + ((cycle - 0) & mask)];
    assert(x9786 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9787 = x9786 * x9786;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9788 = x9787 * x9787;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9788);
      reg = x9788;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9789 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x9789 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9790 = x9789 * x9787;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9791 = x9790 * x9786;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9792 = x9470 + x9630;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][50 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9792);
      reg = x9792;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9793 = args[2][50 * steps + ((cycle - 0) & mask)];
    assert(x9793 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9794 = x9793 * x9793;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9795 = x9794 * x9794;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9795);
      reg = x9795;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9796 = args[2][74 * steps + ((cycle - 0) & mask)];
    assert(x9796 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9797 = x9796 * x9794;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9798 = x9797 * x9793;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9799 = x9471 + x9637;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][51 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9799);
      reg = x9799;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9800 = args[2][51 * steps + ((cycle - 0) & mask)];
    assert(x9800 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9801 = x9800 * x9800;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9802 = x9801 * x9801;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9802);
      reg = x9802;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9803 = args[2][75 * steps + ((cycle - 0) & mask)];
    assert(x9803 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9804 = x9803 * x9801;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9805 = x9804 * x9800;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:19)
    auto x9806 = x9472 + x9644;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":152:5)
    {
      auto& reg = args[2][52 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9806);
      reg = x9806;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":153:58))
    auto x9807 = args[2][52 * steps + ((cycle - 0) & mask)];
    assert(x9807 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x9808 = x9807 * x9807;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x9809 = x9808 * x9808;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][76 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x9809);
      reg = x9809;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_full(recursion::Poseidon2Full)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x9810 = args[2][76 * steps + ((cycle - 0) & mask)];
    assert(x9810 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9811 = x9810 * x9808;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x9812 = x9811 * x9807;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9813 = x9651 + x9658;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9814 = x9665 + x9672;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9815 = x9658 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9816 = x9815 + x9814;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9817 = x9672 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9818 = x9817 + x9813;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9819 = x9814 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9820 = x9819 + x9818;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9821 = x9813 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9822 = x9821 + x9816;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9823 = x9818 + x9822;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9824 = x9816 + x9820;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9825 = x9679 + x9686;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9826 = x9693 + x9700;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9827 = x9686 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9828 = x9827 + x9826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9829 = x9700 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9830 = x9829 + x9825;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9831 = x9826 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9832 = x9831 + x9830;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9833 = x9825 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9834 = x9833 + x9828;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9835 = x9830 + x9834;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9836 = x9828 + x9832;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9837 = x9823 + x9835;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9838 = x9822 + x9834;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9839 = x9824 + x9836;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9840 = x9820 + x9832;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9841 = x9707 + x9714;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9842 = x9721 + x9728;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9843 = x9714 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9844 = x9843 + x9842;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9845 = x9728 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9846 = x9845 + x9841;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9847 = x9842 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9848 = x9847 + x9846;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9849 = x9841 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9850 = x9849 + x9844;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9851 = x9846 + x9850;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9852 = x9844 + x9848;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9853 = x9837 + x9851;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9854 = x9838 + x9850;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9855 = x9839 + x9852;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9856 = x9840 + x9848;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9857 = x9735 + x9742;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9858 = x9749 + x9756;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9859 = x9742 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9860 = x9859 + x9858;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9861 = x9756 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9862 = x9861 + x9857;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9863 = x9858 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9864 = x9863 + x9862;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9865 = x9857 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9866 = x9865 + x9860;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9867 = x9862 + x9866;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9868 = x9860 + x9864;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9869 = x9853 + x9867;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9870 = x9854 + x9866;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9871 = x9855 + x9868;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9872 = x9856 + x9864;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9873 = x9763 + x9770;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9874 = x9777 + x9784;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9875 = x9770 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9876 = x9875 + x9874;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9877 = x9784 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9878 = x9877 + x9873;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9879 = x9874 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9880 = x9879 + x9878;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9881 = x9873 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9882 = x9881 + x9876;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9883 = x9878 + x9882;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9884 = x9876 + x9880;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9885 = x9869 + x9883;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9886 = x9870 + x9882;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9887 = x9871 + x9884;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9888 = x9872 + x9880;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":16:12)
    auto x9889 = x9791 + x9798;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":17:12)
    auto x9890 = x9805 + x9812;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9891 = x9798 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":18:12)
    auto x9892 = x9891 + x9890;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9893 = x9812 * x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":19:12)
    auto x9894 = x9893 + x9889;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9895 = x9890 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":20:12)
    auto x9896 = x9895 + x9894;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9897 = x9889 * x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":21:12)
    auto x9898 = x9897 + x9892;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":22:12)
    auto x9899 = x9894 + x9898;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":23:12)
    auto x9900 = x9892 + x9896;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9901 = x9885 + x9899;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9902 = x9886 + x9898;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9903 = x9887 + x9900;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":37:21)
    auto x9904 = x9888 + x9896;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9905 = x9823 + x9901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9906 = x9822 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9907 = x9824 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9908 = x9820 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9909 = x9835 + x9901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9910 = x9834 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9911 = x9836 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9912 = x9832 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9913 = x9851 + x9901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9914 = x9850 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9915 = x9852 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9916 = x9848 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9917 = x9867 + x9901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9918 = x9866 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9919 = x9868 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9920 = x9864 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9921 = x9883 + x9901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9922 = x9882 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9923 = x9884 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9924 = x9880 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9925 = x9899 + x9901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9926 = x9898 + x9902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9927 = x9900 + x9903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":42:14)
    auto x9928 = x9896 + x9904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9929 = x9473 * x116;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9930 = x9478 * x115;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9931 = x9929 + x9930;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9932 = x9473 * x114;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9933 = x9478 * x113;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9934 = x9932 + x9933;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9935 = x9473 * x112;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9936 = x9478 * x111;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9937 = x9935 + x9936;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9938 = x9473 * x110;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9939 = x9478 * x109;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9940 = x9938 + x9939;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9941 = x9473 * x108;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9942 = x9478 * x107;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9943 = x9941 + x9942;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9944 = x9473 * x106;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9945 = x9478 * x105;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9946 = x9944 + x9945;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9947 = x9473 * x104;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9948 = x9478 * x103;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9949 = x9947 + x9948;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9950 = x9473 * x102;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9951 = x9478 * x101;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9952 = x9950 + x9951;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9953 = x9473 * x100;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9954 = x9478 * x99;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9955 = x9953 + x9954;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9956 = x9473 * x98;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9957 = x9478 * x97;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9958 = x9956 + x9957;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9959 = x9473 * x96;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9960 = x9478 * x95;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9961 = x9959 + x9960;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9962 = x9473 * x94;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9963 = x9478 * x93;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9964 = x9962 + x9963;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9965 = x9473 * x92;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9966 = x9478 * x91;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9967 = x9965 + x9966;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9968 = x9473 * x90;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9969 = x9478 * x89;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9970 = x9968 + x9969;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9971 = x9473 * x88;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9972 = x9478 * x87;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9973 = x9971 + x9972;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9974 = x9473 * x86;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9975 = x9478 * x85;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9976 = x9974 + x9975;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9977 = x9473 * x84;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9978 = x9478 * x83;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9979 = x9977 + x9978;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9980 = x9473 * x82;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9981 = x9478 * x81;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9982 = x9980 + x9981;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9983 = x9473 * x80;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9984 = x9478 * x79;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9985 = x9983 + x9984;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9986 = x9473 * x78;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9987 = x9478 * x77;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9988 = x9986 + x9987;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9989 = x9473 * x76;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9990 = x9478 * x75;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9991 = x9989 + x9990;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9992 = x9473 * x74;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9993 = x9478 * x73;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9994 = x9992 + x9993;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9995 = x9473 * x72;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9996 = x9478 * x71;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x9997 = x9995 + x9996;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9998 = x9473 * x70;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:19)
    auto x9999 = x9478 * x69;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":132:13)
    auto x10000 = x9998 + x9999;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10001 = x9905 + x9931;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][90 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10001);
      reg = x10001;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10002 = x9906 + x9934;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][91 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10002);
      reg = x10002;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10003 = x9907 + x9937;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10003);
      reg = x10003;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10004 = x9908 + x9940;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10004);
      reg = x10004;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10005 = x9909 + x9943;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10005);
      reg = x10005;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10006 = x9910 + x9946;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10006);
      reg = x10006;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10007 = x9911 + x9949;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10007);
      reg = x10007;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10008 = x9912 + x9952;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10008);
      reg = x10008;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10009 = x9913 + x9955;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10009);
      reg = x10009;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10010 = x9914 + x9958;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10010);
      reg = x10010;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10011 = x9915 + x9961;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10011);
      reg = x10011;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10012 = x9916 + x9964;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10012);
      reg = x10012;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10013 = x9917 + x9967;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10013);
      reg = x10013;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10014 = x9918 + x9970;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10014);
      reg = x10014;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10015 = x9919 + x9973;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10015);
      reg = x10015;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10016 = x9920 + x9976;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10016);
      reg = x10016;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10017 = x9921 + x9979;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10017);
      reg = x10017;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10018 = x9922 + x9982;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10018);
      reg = x10018;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10019 = x9923 + x9985;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10019);
      reg = x10019;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10020 = x9924 + x9988;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10020);
      reg = x10020;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10021 = x9925 + x9991;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10021);
      reg = x10021;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10022 = x9926 + x9994;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10022);
      reg = x10022;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10023 = x9927 + x9997;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10023);
      reg = x10023;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:20)
    auto x10024 = x9928 + x10000;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":158:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10024);
      reg = x10024;
    }
    // loc("./zirgen/components/onehot.h":46:19)
    auto x10025 = x9478 * x317;
    // loc("./zirgen/components/onehot.h":46:13)
    auto x10026 = x9475 + x10025;
    // loc("./zirgen/components/onehot.h":46:19)
    auto x10027 = x9481 * x316;
    // loc("./zirgen/components/onehot.h":46:13)
    auto x10028 = x10026 + x10027;
    host_args.at(0) = x10028;
    host(ctx, "log", "POSEIDON2_FULL: %u", host_args.data(), 1, host_outs.data(), 0);
    host_args.at(0) = x9449;
    host_args.at(1) = x9450;
    host_args.at(2) = x9451;
    host_args.at(3) = x9452;
    host(ctx, "log", "  step1MExt: %u %u %u %u ...", host_args.data(), 4, host_outs.data(), 0);
    host_args.at(0) = x9905;
    host_args.at(1) = x9906;
    host_args.at(2) = x9907;
    host_args.at(3) = x9908;
    host(ctx, "log", "  step2MExt: %u %u %u %u ...", host_args.data(), 4, host_outs.data(), 0);
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/poseidon2_partial(Reg)"("./zirgen/components/mux.h":49:25))
  auto x10029 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x10029 != Fp::invalid());
  if (x10029 != 0) {
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10030 = args[2][90 * steps + ((cycle - 1) & mask)];
    assert(x10030 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10031 = args[2][91 * steps + ((cycle - 1) & mask)];
    assert(x10031 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10032 = args[2][92 * steps + ((cycle - 1) & mask)];
    assert(x10032 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10033 = args[2][93 * steps + ((cycle - 1) & mask)];
    assert(x10033 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10034 = args[2][94 * steps + ((cycle - 1) & mask)];
    assert(x10034 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10035 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x10035 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10036 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x10036 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10037 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x10037 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10038 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x10038 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10039 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x10039 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10040 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x10040 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10041 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x10041 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10042 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x10042 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10043 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x10043 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10044 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x10044 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10045 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x10045 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10046 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x10046 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10047 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x10047 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10048 = args[2][108 * steps + ((cycle - 1) & mask)];
    assert(x10048 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10049 = args[2][109 * steps + ((cycle - 1) & mask)];
    assert(x10049 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10050 = args[2][110 * steps + ((cycle - 1) & mask)];
    assert(x10050 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10051 = args[2][111 * steps + ((cycle - 1) & mask)];
    assert(x10051 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10052 = args[2][112 * steps + ((cycle - 1) & mask)];
    assert(x10052 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":176:37))
    auto x10053 = args[2][113 * steps + ((cycle - 1) & mask)];
    assert(x10053 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":178:3)
    {
      auto& reg = args[2][5 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10030);
      reg = x10030;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10054 = args[2][5 * steps + ((cycle - 0) & mask)];
    assert(x10054 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10055 = x10054 + x68;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10056 = x10055 * x10055;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10057 = x10056 * x10056;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10057);
      reg = x10057;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10058 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x10058 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10059 = x10058 * x10056;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10060 = x10059 * x10055;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10061 = x10060 + x10031;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10062 = x10061 + x10032;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10063 = x10062 + x10033;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10064 = x10063 + x10034;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10065 = x10064 + x10035;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10066 = x10065 + x10036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10067 = x10066 + x10037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10068 = x10067 + x10038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10069 = x10068 + x10039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10070 = x10069 + x10040;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10071 = x10070 + x10041;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10072 = x10071 + x10042;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10073 = x10072 + x10043;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10074 = x10073 + x10044;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10075 = x10074 + x10045;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10076 = x10075 + x10046;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10077 = x10076 + x10047;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10078 = x10077 + x10048;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10079 = x10078 + x10049;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10080 = x10079 + x10050;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10081 = x10080 + x10051;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10082 = x10081 + x10052;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10083 = x10082 + x10053;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10084 = x10060 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10085 = x10083 + x10084;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10086 = x10031 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10087 = x10083 + x10086;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10088 = x10032 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10089 = x10083 + x10088;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10090 = x10033 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10091 = x10083 + x10090;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10092 = x10034 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10093 = x10083 + x10092;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10094 = x10035 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10095 = x10083 + x10094;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10096 = x10036 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10097 = x10083 + x10096;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10098 = x10037 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10099 = x10083 + x10098;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10100 = x10038 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10101 = x10083 + x10100;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10102 = x10039 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10103 = x10083 + x10102;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10104 = x10040 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10105 = x10083 + x10104;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10106 = x10041 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10107 = x10083 + x10106;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10108 = x10042 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10109 = x10083 + x10108;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10110 = x10043 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10111 = x10083 + x10110;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10112 = x10044 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10113 = x10083 + x10112;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10114 = x10045 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10115 = x10083 + x10114;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10116 = x10046 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10117 = x10083 + x10116;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10118 = x10047 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10119 = x10083 + x10118;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10120 = x10048 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10121 = x10083 + x10120;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10122 = x10049 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10123 = x10083 + x10122;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10124 = x10050 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10125 = x10083 + x10124;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10126 = x10051 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10127 = x10083 + x10126;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10128 = x10052 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10129 = x10083 + x10128;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10130 = x10053 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10131 = x10083 + x10130;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][6 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10085);
      reg = x10085;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10132 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x10132 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10133 = x10132 + x43;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10134 = x10133 * x10133;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10135 = x10134 * x10134;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10135);
      reg = x10135;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10136 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x10136 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10137 = x10136 * x10134;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10138 = x10137 * x10133;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10139 = x10138 + x10087;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10140 = x10139 + x10089;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10141 = x10140 + x10091;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10142 = x10141 + x10093;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10143 = x10142 + x10095;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10144 = x10143 + x10097;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10145 = x10144 + x10099;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10146 = x10145 + x10101;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10147 = x10146 + x10103;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10148 = x10147 + x10105;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10149 = x10148 + x10107;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10150 = x10149 + x10109;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10151 = x10150 + x10111;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10152 = x10151 + x10113;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10153 = x10152 + x10115;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10154 = x10153 + x10117;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10155 = x10154 + x10119;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10156 = x10155 + x10121;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10157 = x10156 + x10123;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10158 = x10157 + x10125;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10159 = x10158 + x10127;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10160 = x10159 + x10129;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10161 = x10160 + x10131;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10162 = x10138 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10163 = x10161 + x10162;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10164 = x10087 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10165 = x10161 + x10164;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10166 = x10089 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10167 = x10161 + x10166;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10168 = x10091 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10169 = x10161 + x10168;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10170 = x10093 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10171 = x10161 + x10170;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10172 = x10095 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10173 = x10161 + x10172;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10174 = x10097 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10175 = x10161 + x10174;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10176 = x10099 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10177 = x10161 + x10176;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10178 = x10101 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10179 = x10161 + x10178;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10180 = x10103 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10181 = x10161 + x10180;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10182 = x10105 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10183 = x10161 + x10182;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10184 = x10107 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10185 = x10161 + x10184;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10186 = x10109 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10187 = x10161 + x10186;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10188 = x10111 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10189 = x10161 + x10188;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10190 = x10113 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10191 = x10161 + x10190;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10192 = x10115 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10193 = x10161 + x10192;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10194 = x10117 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10195 = x10161 + x10194;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10196 = x10119 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10197 = x10161 + x10196;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10198 = x10121 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10199 = x10161 + x10198;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10200 = x10123 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10201 = x10161 + x10200;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10202 = x10125 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10203 = x10161 + x10202;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10204 = x10127 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10205 = x10161 + x10204;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10206 = x10129 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10207 = x10161 + x10206;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10208 = x10131 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10209 = x10161 + x10208;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][7 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10163);
      reg = x10163;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10210 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x10210 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10211 = x10210 + x42;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10212 = x10211 * x10211;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10213 = x10212 * x10212;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10213);
      reg = x10213;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10214 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x10214 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10215 = x10214 * x10212;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10216 = x10215 * x10211;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10217 = x10216 + x10165;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10218 = x10217 + x10167;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10219 = x10218 + x10169;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10220 = x10219 + x10171;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10221 = x10220 + x10173;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10222 = x10221 + x10175;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10223 = x10222 + x10177;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10224 = x10223 + x10179;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10225 = x10224 + x10181;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10226 = x10225 + x10183;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10227 = x10226 + x10185;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10228 = x10227 + x10187;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10229 = x10228 + x10189;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10230 = x10229 + x10191;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10231 = x10230 + x10193;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10232 = x10231 + x10195;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10233 = x10232 + x10197;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10234 = x10233 + x10199;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10235 = x10234 + x10201;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10236 = x10235 + x10203;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10237 = x10236 + x10205;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10238 = x10237 + x10207;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10239 = x10238 + x10209;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10240 = x10216 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10241 = x10239 + x10240;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10242 = x10165 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10243 = x10239 + x10242;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10244 = x10167 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10245 = x10239 + x10244;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10246 = x10169 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10247 = x10239 + x10246;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10248 = x10171 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10249 = x10239 + x10248;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10250 = x10173 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10251 = x10239 + x10250;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10252 = x10175 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10253 = x10239 + x10252;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10254 = x10177 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10255 = x10239 + x10254;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10256 = x10179 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10257 = x10239 + x10256;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10258 = x10181 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10259 = x10239 + x10258;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10260 = x10183 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10261 = x10239 + x10260;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10262 = x10185 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10263 = x10239 + x10262;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10264 = x10187 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10265 = x10239 + x10264;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10266 = x10189 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10267 = x10239 + x10266;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10268 = x10191 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10269 = x10239 + x10268;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10270 = x10193 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10271 = x10239 + x10270;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10272 = x10195 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10273 = x10239 + x10272;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10274 = x10197 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10275 = x10239 + x10274;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10276 = x10199 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10277 = x10239 + x10276;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10278 = x10201 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10279 = x10239 + x10278;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10280 = x10203 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10281 = x10239 + x10280;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10282 = x10205 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10283 = x10239 + x10282;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10284 = x10207 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10285 = x10239 + x10284;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10286 = x10209 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10287 = x10239 + x10286;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][8 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10241);
      reg = x10241;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10288 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x10288 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10289 = x10288 + x41;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10290 = x10289 * x10289;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10291 = x10290 * x10290;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][32 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10291);
      reg = x10291;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10292 = args[2][32 * steps + ((cycle - 0) & mask)];
    assert(x10292 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10293 = x10292 * x10290;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10294 = x10293 * x10289;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10295 = x10294 + x10243;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10296 = x10295 + x10245;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10297 = x10296 + x10247;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10298 = x10297 + x10249;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10299 = x10298 + x10251;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10300 = x10299 + x10253;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10301 = x10300 + x10255;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10302 = x10301 + x10257;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10303 = x10302 + x10259;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10304 = x10303 + x10261;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10305 = x10304 + x10263;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10306 = x10305 + x10265;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10307 = x10306 + x10267;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10308 = x10307 + x10269;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10309 = x10308 + x10271;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10310 = x10309 + x10273;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10311 = x10310 + x10275;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10312 = x10311 + x10277;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10313 = x10312 + x10279;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10314 = x10313 + x10281;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10315 = x10314 + x10283;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10316 = x10315 + x10285;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10317 = x10316 + x10287;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10318 = x10294 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10319 = x10317 + x10318;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10320 = x10243 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10321 = x10317 + x10320;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10322 = x10245 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10323 = x10317 + x10322;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10324 = x10247 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10325 = x10317 + x10324;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10326 = x10249 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10327 = x10317 + x10326;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10328 = x10251 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10329 = x10317 + x10328;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10330 = x10253 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10331 = x10317 + x10330;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10332 = x10255 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10333 = x10317 + x10332;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10334 = x10257 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10335 = x10317 + x10334;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10336 = x10259 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10337 = x10317 + x10336;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10338 = x10261 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10339 = x10317 + x10338;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10340 = x10263 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10341 = x10317 + x10340;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10342 = x10265 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10343 = x10317 + x10342;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10344 = x10267 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10345 = x10317 + x10344;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10346 = x10269 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10347 = x10317 + x10346;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10348 = x10271 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10349 = x10317 + x10348;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10350 = x10273 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10351 = x10317 + x10350;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10352 = x10275 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10353 = x10317 + x10352;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10354 = x10277 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10355 = x10317 + x10354;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10356 = x10279 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10357 = x10317 + x10356;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10358 = x10281 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10359 = x10317 + x10358;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10360 = x10283 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10361 = x10317 + x10360;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10362 = x10285 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10363 = x10317 + x10362;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10364 = x10287 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10365 = x10317 + x10364;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10319);
      reg = x10319;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10366 = args[2][9 * steps + ((cycle - 0) & mask)];
    assert(x10366 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10367 = x10366 + x40;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10368 = x10367 * x10367;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10369 = x10368 * x10368;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10369);
      reg = x10369;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10370 = args[2][33 * steps + ((cycle - 0) & mask)];
    assert(x10370 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10371 = x10370 * x10368;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10372 = x10371 * x10367;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10373 = x10372 + x10321;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10374 = x10373 + x10323;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10375 = x10374 + x10325;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10376 = x10375 + x10327;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10377 = x10376 + x10329;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10378 = x10377 + x10331;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10379 = x10378 + x10333;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10380 = x10379 + x10335;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10381 = x10380 + x10337;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10382 = x10381 + x10339;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10383 = x10382 + x10341;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10384 = x10383 + x10343;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10385 = x10384 + x10345;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10386 = x10385 + x10347;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10387 = x10386 + x10349;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10388 = x10387 + x10351;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10389 = x10388 + x10353;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10390 = x10389 + x10355;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10391 = x10390 + x10357;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10392 = x10391 + x10359;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10393 = x10392 + x10361;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10394 = x10393 + x10363;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10395 = x10394 + x10365;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10396 = x10372 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10397 = x10395 + x10396;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10398 = x10321 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10399 = x10395 + x10398;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10400 = x10323 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10401 = x10395 + x10400;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10402 = x10325 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10403 = x10395 + x10402;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10404 = x10327 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10405 = x10395 + x10404;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10406 = x10329 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10407 = x10395 + x10406;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10408 = x10331 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10409 = x10395 + x10408;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10410 = x10333 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10411 = x10395 + x10410;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10412 = x10335 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10413 = x10395 + x10412;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10414 = x10337 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10415 = x10395 + x10414;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10416 = x10339 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10417 = x10395 + x10416;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10418 = x10341 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10419 = x10395 + x10418;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10420 = x10343 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10421 = x10395 + x10420;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10422 = x10345 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10423 = x10395 + x10422;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10424 = x10347 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10425 = x10395 + x10424;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10426 = x10349 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10427 = x10395 + x10426;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10428 = x10351 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10429 = x10395 + x10428;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10430 = x10353 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10431 = x10395 + x10430;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10432 = x10355 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10433 = x10395 + x10432;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10434 = x10357 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10435 = x10395 + x10434;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10436 = x10359 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10437 = x10395 + x10436;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10438 = x10361 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10439 = x10395 + x10438;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10440 = x10363 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10441 = x10395 + x10440;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10442 = x10365 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10443 = x10395 + x10442;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][10 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10397);
      reg = x10397;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10444 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x10444 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10445 = x10444 + x39;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10446 = x10445 * x10445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10447 = x10446 * x10446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][34 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10447);
      reg = x10447;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10448 = args[2][34 * steps + ((cycle - 0) & mask)];
    assert(x10448 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10449 = x10448 * x10446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10450 = x10449 * x10445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10451 = x10450 + x10399;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10452 = x10451 + x10401;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10453 = x10452 + x10403;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10454 = x10453 + x10405;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10455 = x10454 + x10407;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10456 = x10455 + x10409;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10457 = x10456 + x10411;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10458 = x10457 + x10413;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10459 = x10458 + x10415;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10460 = x10459 + x10417;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10461 = x10460 + x10419;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10462 = x10461 + x10421;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10463 = x10462 + x10423;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10464 = x10463 + x10425;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10465 = x10464 + x10427;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10466 = x10465 + x10429;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10467 = x10466 + x10431;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10468 = x10467 + x10433;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10469 = x10468 + x10435;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10470 = x10469 + x10437;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10471 = x10470 + x10439;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10472 = x10471 + x10441;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10473 = x10472 + x10443;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10474 = x10450 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10475 = x10473 + x10474;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10476 = x10399 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10477 = x10473 + x10476;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10478 = x10401 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10479 = x10473 + x10478;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10480 = x10403 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10481 = x10473 + x10480;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10482 = x10405 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10483 = x10473 + x10482;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10484 = x10407 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10485 = x10473 + x10484;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10486 = x10409 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10487 = x10473 + x10486;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10488 = x10411 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10489 = x10473 + x10488;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10490 = x10413 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10491 = x10473 + x10490;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10492 = x10415 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10493 = x10473 + x10492;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10494 = x10417 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10495 = x10473 + x10494;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10496 = x10419 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10497 = x10473 + x10496;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10498 = x10421 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10499 = x10473 + x10498;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10500 = x10423 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10501 = x10473 + x10500;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10502 = x10425 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10503 = x10473 + x10502;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10504 = x10427 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10505 = x10473 + x10504;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10506 = x10429 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10507 = x10473 + x10506;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10508 = x10431 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10509 = x10473 + x10508;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10510 = x10433 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10511 = x10473 + x10510;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10512 = x10435 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10513 = x10473 + x10512;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10514 = x10437 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10515 = x10473 + x10514;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10516 = x10439 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10517 = x10473 + x10516;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10518 = x10441 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10519 = x10473 + x10518;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10520 = x10443 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10521 = x10473 + x10520;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][11 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10475);
      reg = x10475;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10522 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x10522 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10523 = x10522 + x38;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10524 = x10523 * x10523;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10525 = x10524 * x10524;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][35 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10525);
      reg = x10525;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10526 = args[2][35 * steps + ((cycle - 0) & mask)];
    assert(x10526 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10527 = x10526 * x10524;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10528 = x10527 * x10523;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10529 = x10528 + x10477;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10530 = x10529 + x10479;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10531 = x10530 + x10481;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10532 = x10531 + x10483;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10533 = x10532 + x10485;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10534 = x10533 + x10487;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10535 = x10534 + x10489;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10536 = x10535 + x10491;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10537 = x10536 + x10493;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10538 = x10537 + x10495;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10539 = x10538 + x10497;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10540 = x10539 + x10499;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10541 = x10540 + x10501;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10542 = x10541 + x10503;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10543 = x10542 + x10505;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10544 = x10543 + x10507;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10545 = x10544 + x10509;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10546 = x10545 + x10511;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10547 = x10546 + x10513;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10548 = x10547 + x10515;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10549 = x10548 + x10517;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10550 = x10549 + x10519;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10551 = x10550 + x10521;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10552 = x10528 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10553 = x10551 + x10552;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10554 = x10477 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10555 = x10551 + x10554;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10556 = x10479 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10557 = x10551 + x10556;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10558 = x10481 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10559 = x10551 + x10558;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10560 = x10483 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10561 = x10551 + x10560;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10562 = x10485 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10563 = x10551 + x10562;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10564 = x10487 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10565 = x10551 + x10564;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10566 = x10489 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10567 = x10551 + x10566;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10568 = x10491 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10569 = x10551 + x10568;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10570 = x10493 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10571 = x10551 + x10570;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10572 = x10495 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10573 = x10551 + x10572;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10574 = x10497 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10575 = x10551 + x10574;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10576 = x10499 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10577 = x10551 + x10576;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10578 = x10501 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10579 = x10551 + x10578;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10580 = x10503 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10581 = x10551 + x10580;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10582 = x10505 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10583 = x10551 + x10582;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10584 = x10507 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10585 = x10551 + x10584;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10586 = x10509 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10587 = x10551 + x10586;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10588 = x10511 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10589 = x10551 + x10588;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10590 = x10513 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10591 = x10551 + x10590;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10592 = x10515 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10593 = x10551 + x10592;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10594 = x10517 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10595 = x10551 + x10594;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10596 = x10519 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10597 = x10551 + x10596;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10598 = x10521 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10599 = x10551 + x10598;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][12 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10553);
      reg = x10553;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10600 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x10600 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10601 = x10600 + x37;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10602 = x10601 * x10601;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10603 = x10602 * x10602;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][36 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10603);
      reg = x10603;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10604 = args[2][36 * steps + ((cycle - 0) & mask)];
    assert(x10604 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10605 = x10604 * x10602;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10606 = x10605 * x10601;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10607 = x10606 + x10555;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10608 = x10607 + x10557;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10609 = x10608 + x10559;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10610 = x10609 + x10561;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10611 = x10610 + x10563;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10612 = x10611 + x10565;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10613 = x10612 + x10567;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10614 = x10613 + x10569;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10615 = x10614 + x10571;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10616 = x10615 + x10573;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10617 = x10616 + x10575;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10618 = x10617 + x10577;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10619 = x10618 + x10579;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10620 = x10619 + x10581;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10621 = x10620 + x10583;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10622 = x10621 + x10585;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10623 = x10622 + x10587;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10624 = x10623 + x10589;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10625 = x10624 + x10591;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10626 = x10625 + x10593;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10627 = x10626 + x10595;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10628 = x10627 + x10597;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10629 = x10628 + x10599;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10630 = x10606 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10631 = x10629 + x10630;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10632 = x10555 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10633 = x10629 + x10632;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10634 = x10557 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10635 = x10629 + x10634;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10636 = x10559 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10637 = x10629 + x10636;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10638 = x10561 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10639 = x10629 + x10638;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10640 = x10563 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10641 = x10629 + x10640;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10642 = x10565 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10643 = x10629 + x10642;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10644 = x10567 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10645 = x10629 + x10644;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10646 = x10569 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10647 = x10629 + x10646;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10648 = x10571 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10649 = x10629 + x10648;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10650 = x10573 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10651 = x10629 + x10650;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10652 = x10575 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10653 = x10629 + x10652;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10654 = x10577 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10655 = x10629 + x10654;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10656 = x10579 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10657 = x10629 + x10656;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10658 = x10581 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10659 = x10629 + x10658;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10660 = x10583 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10661 = x10629 + x10660;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10662 = x10585 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10663 = x10629 + x10662;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10664 = x10587 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10665 = x10629 + x10664;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10666 = x10589 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10667 = x10629 + x10666;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10668 = x10591 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10669 = x10629 + x10668;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10670 = x10593 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10671 = x10629 + x10670;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10672 = x10595 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10673 = x10629 + x10672;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10674 = x10597 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10675 = x10629 + x10674;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10676 = x10599 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10677 = x10629 + x10676;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][13 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10631);
      reg = x10631;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10678 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x10678 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10679 = x10678 + x36;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10680 = x10679 * x10679;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10681 = x10680 * x10680;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][37 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10681);
      reg = x10681;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10682 = args[2][37 * steps + ((cycle - 0) & mask)];
    assert(x10682 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10683 = x10682 * x10680;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10684 = x10683 * x10679;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10685 = x10684 + x10633;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10686 = x10685 + x10635;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10687 = x10686 + x10637;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10688 = x10687 + x10639;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10689 = x10688 + x10641;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10690 = x10689 + x10643;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10691 = x10690 + x10645;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10692 = x10691 + x10647;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10693 = x10692 + x10649;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10694 = x10693 + x10651;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10695 = x10694 + x10653;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10696 = x10695 + x10655;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10697 = x10696 + x10657;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10698 = x10697 + x10659;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10699 = x10698 + x10661;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10700 = x10699 + x10663;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10701 = x10700 + x10665;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10702 = x10701 + x10667;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10703 = x10702 + x10669;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10704 = x10703 + x10671;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10705 = x10704 + x10673;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10706 = x10705 + x10675;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10707 = x10706 + x10677;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10708 = x10684 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10709 = x10707 + x10708;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10710 = x10633 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10711 = x10707 + x10710;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10712 = x10635 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10713 = x10707 + x10712;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10714 = x10637 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10715 = x10707 + x10714;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10716 = x10639 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10717 = x10707 + x10716;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10718 = x10641 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10719 = x10707 + x10718;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10720 = x10643 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10721 = x10707 + x10720;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10722 = x10645 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10723 = x10707 + x10722;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10724 = x10647 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10725 = x10707 + x10724;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10726 = x10649 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10727 = x10707 + x10726;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10728 = x10651 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10729 = x10707 + x10728;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10730 = x10653 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10731 = x10707 + x10730;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10732 = x10655 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10733 = x10707 + x10732;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10734 = x10657 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10735 = x10707 + x10734;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10736 = x10659 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10737 = x10707 + x10736;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10738 = x10661 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10739 = x10707 + x10738;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10740 = x10663 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10741 = x10707 + x10740;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10742 = x10665 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10743 = x10707 + x10742;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10744 = x10667 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10745 = x10707 + x10744;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10746 = x10669 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10747 = x10707 + x10746;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10748 = x10671 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10749 = x10707 + x10748;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10750 = x10673 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10751 = x10707 + x10750;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10752 = x10675 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10753 = x10707 + x10752;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10754 = x10677 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10755 = x10707 + x10754;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][14 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10709);
      reg = x10709;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10756 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x10756 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10757 = x10756 + x35;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10758 = x10757 * x10757;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10759 = x10758 * x10758;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][38 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10759);
      reg = x10759;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10760 = args[2][38 * steps + ((cycle - 0) & mask)];
    assert(x10760 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10761 = x10760 * x10758;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10762 = x10761 * x10757;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10763 = x10762 + x10711;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10764 = x10763 + x10713;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10765 = x10764 + x10715;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10766 = x10765 + x10717;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10767 = x10766 + x10719;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10768 = x10767 + x10721;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10769 = x10768 + x10723;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10770 = x10769 + x10725;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10771 = x10770 + x10727;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10772 = x10771 + x10729;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10773 = x10772 + x10731;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10774 = x10773 + x10733;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10775 = x10774 + x10735;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10776 = x10775 + x10737;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10777 = x10776 + x10739;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10778 = x10777 + x10741;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10779 = x10778 + x10743;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10780 = x10779 + x10745;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10781 = x10780 + x10747;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10782 = x10781 + x10749;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10783 = x10782 + x10751;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10784 = x10783 + x10753;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10785 = x10784 + x10755;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10786 = x10762 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10787 = x10785 + x10786;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10788 = x10711 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10789 = x10785 + x10788;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10790 = x10713 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10791 = x10785 + x10790;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10792 = x10715 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10793 = x10785 + x10792;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10794 = x10717 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10795 = x10785 + x10794;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10796 = x10719 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10797 = x10785 + x10796;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10798 = x10721 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10799 = x10785 + x10798;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10800 = x10723 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10801 = x10785 + x10800;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10802 = x10725 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10803 = x10785 + x10802;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10804 = x10727 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10805 = x10785 + x10804;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10806 = x10729 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10807 = x10785 + x10806;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10808 = x10731 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10809 = x10785 + x10808;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10810 = x10733 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10811 = x10785 + x10810;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10812 = x10735 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10813 = x10785 + x10812;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10814 = x10737 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10815 = x10785 + x10814;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10816 = x10739 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10817 = x10785 + x10816;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10818 = x10741 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10819 = x10785 + x10818;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10820 = x10743 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10821 = x10785 + x10820;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10822 = x10745 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10823 = x10785 + x10822;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10824 = x10747 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10825 = x10785 + x10824;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10826 = x10749 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10827 = x10785 + x10826;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10828 = x10751 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10829 = x10785 + x10828;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10830 = x10753 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10831 = x10785 + x10830;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10832 = x10755 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10833 = x10785 + x10832;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][15 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10787);
      reg = x10787;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10834 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x10834 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10835 = x10834 + x34;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10836 = x10835 * x10835;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10837 = x10836 * x10836;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][39 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10837);
      reg = x10837;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10838 = args[2][39 * steps + ((cycle - 0) & mask)];
    assert(x10838 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10839 = x10838 * x10836;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10840 = x10839 * x10835;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10841 = x10840 + x10789;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10842 = x10841 + x10791;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10843 = x10842 + x10793;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10844 = x10843 + x10795;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10845 = x10844 + x10797;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10846 = x10845 + x10799;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10847 = x10846 + x10801;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10848 = x10847 + x10803;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10849 = x10848 + x10805;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10850 = x10849 + x10807;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10851 = x10850 + x10809;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10852 = x10851 + x10811;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10853 = x10852 + x10813;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10854 = x10853 + x10815;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10855 = x10854 + x10817;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10856 = x10855 + x10819;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10857 = x10856 + x10821;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10858 = x10857 + x10823;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10859 = x10858 + x10825;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10860 = x10859 + x10827;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10861 = x10860 + x10829;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10862 = x10861 + x10831;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10863 = x10862 + x10833;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10864 = x10840 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10865 = x10863 + x10864;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10866 = x10789 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10867 = x10863 + x10866;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10868 = x10791 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10869 = x10863 + x10868;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10870 = x10793 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10871 = x10863 + x10870;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10872 = x10795 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10873 = x10863 + x10872;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10874 = x10797 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10875 = x10863 + x10874;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10876 = x10799 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10877 = x10863 + x10876;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10878 = x10801 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10879 = x10863 + x10878;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10880 = x10803 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10881 = x10863 + x10880;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10882 = x10805 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10883 = x10863 + x10882;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10884 = x10807 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10885 = x10863 + x10884;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10886 = x10809 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10887 = x10863 + x10886;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10888 = x10811 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10889 = x10863 + x10888;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10890 = x10813 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10891 = x10863 + x10890;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10892 = x10815 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10893 = x10863 + x10892;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10894 = x10817 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10895 = x10863 + x10894;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10896 = x10819 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10897 = x10863 + x10896;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10898 = x10821 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10899 = x10863 + x10898;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10900 = x10823 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10901 = x10863 + x10900;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10902 = x10825 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10903 = x10863 + x10902;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10904 = x10827 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10905 = x10863 + x10904;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10906 = x10829 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10907 = x10863 + x10906;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10908 = x10831 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10909 = x10863 + x10908;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10910 = x10833 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10911 = x10863 + x10910;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10865);
      reg = x10865;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10912 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x10912 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10913 = x10912 + x33;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10914 = x10913 * x10913;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10915 = x10914 * x10914;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][40 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10915);
      reg = x10915;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10916 = args[2][40 * steps + ((cycle - 0) & mask)];
    assert(x10916 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10917 = x10916 * x10914;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10918 = x10917 * x10913;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10919 = x10918 + x10867;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10920 = x10919 + x10869;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10921 = x10920 + x10871;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10922 = x10921 + x10873;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10923 = x10922 + x10875;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10924 = x10923 + x10877;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10925 = x10924 + x10879;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10926 = x10925 + x10881;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10927 = x10926 + x10883;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10928 = x10927 + x10885;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10929 = x10928 + x10887;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10930 = x10929 + x10889;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10931 = x10930 + x10891;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10932 = x10931 + x10893;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10933 = x10932 + x10895;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10934 = x10933 + x10897;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10935 = x10934 + x10899;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10936 = x10935 + x10901;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10937 = x10936 + x10903;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10938 = x10937 + x10905;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10939 = x10938 + x10907;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10940 = x10939 + x10909;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10941 = x10940 + x10911;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10942 = x10918 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10943 = x10941 + x10942;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10944 = x10867 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10945 = x10941 + x10944;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10946 = x10869 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10947 = x10941 + x10946;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10948 = x10871 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10949 = x10941 + x10948;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10950 = x10873 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10951 = x10941 + x10950;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10952 = x10875 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10953 = x10941 + x10952;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10954 = x10877 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10955 = x10941 + x10954;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10956 = x10879 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10957 = x10941 + x10956;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10958 = x10881 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10959 = x10941 + x10958;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10960 = x10883 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10961 = x10941 + x10960;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10962 = x10885 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10963 = x10941 + x10962;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10964 = x10887 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10965 = x10941 + x10964;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10966 = x10889 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10967 = x10941 + x10966;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10968 = x10891 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10969 = x10941 + x10968;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10970 = x10893 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10971 = x10941 + x10970;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10972 = x10895 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10973 = x10941 + x10972;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10974 = x10897 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10975 = x10941 + x10974;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10976 = x10899 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10977 = x10941 + x10976;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10978 = x10901 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10979 = x10941 + x10978;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10980 = x10903 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10981 = x10941 + x10980;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10982 = x10905 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10983 = x10941 + x10982;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10984 = x10907 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10985 = x10941 + x10984;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10986 = x10909 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10987 = x10941 + x10986;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x10988 = x10911 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x10989 = x10941 + x10988;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][17 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10943);
      reg = x10943;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x10990 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x10990 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x10991 = x10990 + x32;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x10992 = x10991 * x10991;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x10993 = x10992 * x10992;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][41 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x10993);
      reg = x10993;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x10994 = args[2][41 * steps + ((cycle - 0) & mask)];
    assert(x10994 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10995 = x10994 * x10992;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x10996 = x10995 * x10991;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10997 = x10996 + x10945;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10998 = x10997 + x10947;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x10999 = x10998 + x10949;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11000 = x10999 + x10951;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11001 = x11000 + x10953;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11002 = x11001 + x10955;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11003 = x11002 + x10957;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11004 = x11003 + x10959;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11005 = x11004 + x10961;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11006 = x11005 + x10963;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11007 = x11006 + x10965;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11008 = x11007 + x10967;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11009 = x11008 + x10969;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11010 = x11009 + x10971;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11011 = x11010 + x10973;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11012 = x11011 + x10975;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11013 = x11012 + x10977;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11014 = x11013 + x10979;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11015 = x11014 + x10981;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11016 = x11015 + x10983;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11017 = x11016 + x10985;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11018 = x11017 + x10987;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11019 = x11018 + x10989;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11020 = x10996 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11021 = x11019 + x11020;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11022 = x10945 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11023 = x11019 + x11022;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11024 = x10947 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11025 = x11019 + x11024;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11026 = x10949 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11027 = x11019 + x11026;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11028 = x10951 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11029 = x11019 + x11028;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11030 = x10953 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11031 = x11019 + x11030;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11032 = x10955 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11033 = x11019 + x11032;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11034 = x10957 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11035 = x11019 + x11034;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11036 = x10959 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11037 = x11019 + x11036;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11038 = x10961 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11039 = x11019 + x11038;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11040 = x10963 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11041 = x11019 + x11040;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11042 = x10965 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11043 = x11019 + x11042;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11044 = x10967 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11045 = x11019 + x11044;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11046 = x10969 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11047 = x11019 + x11046;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11048 = x10971 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11049 = x11019 + x11048;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11050 = x10973 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11051 = x11019 + x11050;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11052 = x10975 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11053 = x11019 + x11052;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11054 = x10977 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11055 = x11019 + x11054;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11056 = x10979 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11057 = x11019 + x11056;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11058 = x10981 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11059 = x11019 + x11058;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11060 = x10983 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11061 = x11019 + x11060;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11062 = x10985 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11063 = x11019 + x11062;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11064 = x10987 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11065 = x11019 + x11064;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11066 = x10989 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11067 = x11019 + x11066;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11021);
      reg = x11021;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x11068 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x11068 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x11069 = x11068 + x31;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x11070 = x11069 * x11069;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x11071 = x11070 * x11070;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][42 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11071);
      reg = x11071;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x11072 = args[2][42 * steps + ((cycle - 0) & mask)];
    assert(x11072 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11073 = x11072 * x11070;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11074 = x11073 * x11069;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11075 = x11074 + x11023;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11076 = x11075 + x11025;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11077 = x11076 + x11027;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11078 = x11077 + x11029;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11079 = x11078 + x11031;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11080 = x11079 + x11033;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11081 = x11080 + x11035;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11082 = x11081 + x11037;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11083 = x11082 + x11039;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11084 = x11083 + x11041;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11085 = x11084 + x11043;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11086 = x11085 + x11045;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11087 = x11086 + x11047;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11088 = x11087 + x11049;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11089 = x11088 + x11051;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11090 = x11089 + x11053;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11091 = x11090 + x11055;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11092 = x11091 + x11057;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11093 = x11092 + x11059;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11094 = x11093 + x11061;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11095 = x11094 + x11063;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11096 = x11095 + x11065;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11097 = x11096 + x11067;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11098 = x11074 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11099 = x11097 + x11098;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11100 = x11023 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11101 = x11097 + x11100;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11102 = x11025 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11103 = x11097 + x11102;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11104 = x11027 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11105 = x11097 + x11104;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11106 = x11029 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11107 = x11097 + x11106;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11108 = x11031 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11109 = x11097 + x11108;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11110 = x11033 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11111 = x11097 + x11110;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11112 = x11035 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11113 = x11097 + x11112;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11114 = x11037 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11115 = x11097 + x11114;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11116 = x11039 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11117 = x11097 + x11116;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11118 = x11041 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11119 = x11097 + x11118;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11120 = x11043 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11121 = x11097 + x11120;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11122 = x11045 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11123 = x11097 + x11122;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11124 = x11047 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11125 = x11097 + x11124;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11126 = x11049 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11127 = x11097 + x11126;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11128 = x11051 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11129 = x11097 + x11128;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11130 = x11053 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11131 = x11097 + x11130;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11132 = x11055 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11133 = x11097 + x11132;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11134 = x11057 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11135 = x11097 + x11134;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11136 = x11059 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11137 = x11097 + x11136;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11138 = x11061 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11139 = x11097 + x11138;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11140 = x11063 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11141 = x11097 + x11140;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11142 = x11065 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11143 = x11097 + x11142;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11144 = x11067 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11145 = x11097 + x11144;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][19 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11099);
      reg = x11099;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x11146 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x11146 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x11147 = x11146 + x30;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x11148 = x11147 * x11147;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x11149 = x11148 * x11148;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][43 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11149);
      reg = x11149;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x11150 = args[2][43 * steps + ((cycle - 0) & mask)];
    assert(x11150 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11151 = x11150 * x11148;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11152 = x11151 * x11147;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11153 = x11152 + x11101;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11154 = x11153 + x11103;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11155 = x11154 + x11105;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11156 = x11155 + x11107;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11157 = x11156 + x11109;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11158 = x11157 + x11111;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11159 = x11158 + x11113;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11160 = x11159 + x11115;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11161 = x11160 + x11117;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11162 = x11161 + x11119;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11163 = x11162 + x11121;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11164 = x11163 + x11123;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11165 = x11164 + x11125;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11166 = x11165 + x11127;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11167 = x11166 + x11129;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11168 = x11167 + x11131;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11169 = x11168 + x11133;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11170 = x11169 + x11135;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11171 = x11170 + x11137;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11172 = x11171 + x11139;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11173 = x11172 + x11141;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11174 = x11173 + x11143;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11175 = x11174 + x11145;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11176 = x11152 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11177 = x11175 + x11176;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11178 = x11101 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11179 = x11175 + x11178;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11180 = x11103 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11181 = x11175 + x11180;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11182 = x11105 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11183 = x11175 + x11182;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11184 = x11107 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11185 = x11175 + x11184;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11186 = x11109 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11187 = x11175 + x11186;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11188 = x11111 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11189 = x11175 + x11188;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11190 = x11113 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11191 = x11175 + x11190;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11192 = x11115 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11193 = x11175 + x11192;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11194 = x11117 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11195 = x11175 + x11194;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11196 = x11119 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11197 = x11175 + x11196;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11198 = x11121 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11199 = x11175 + x11198;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11200 = x11123 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11201 = x11175 + x11200;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11202 = x11125 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11203 = x11175 + x11202;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11204 = x11127 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11205 = x11175 + x11204;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11206 = x11129 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11207 = x11175 + x11206;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11208 = x11131 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11209 = x11175 + x11208;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11210 = x11133 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11211 = x11175 + x11210;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11212 = x11135 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11213 = x11175 + x11212;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11214 = x11137 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11215 = x11175 + x11214;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11216 = x11139 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11217 = x11175 + x11216;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11218 = x11141 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11219 = x11175 + x11218;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11220 = x11143 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11221 = x11175 + x11220;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11222 = x11145 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11223 = x11175 + x11222;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11177);
      reg = x11177;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x11224 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x11224 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x11225 = x11224 + x29;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x11226 = x11225 * x11225;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x11227 = x11226 * x11226;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][44 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11227);
      reg = x11227;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x11228 = args[2][44 * steps + ((cycle - 0) & mask)];
    assert(x11228 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11229 = x11228 * x11226;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11230 = x11229 * x11225;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11231 = x11230 + x11179;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11232 = x11231 + x11181;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11233 = x11232 + x11183;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11234 = x11233 + x11185;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11235 = x11234 + x11187;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11236 = x11235 + x11189;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11237 = x11236 + x11191;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11238 = x11237 + x11193;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11239 = x11238 + x11195;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11240 = x11239 + x11197;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11241 = x11240 + x11199;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11242 = x11241 + x11201;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11243 = x11242 + x11203;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11244 = x11243 + x11205;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11245 = x11244 + x11207;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11246 = x11245 + x11209;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11247 = x11246 + x11211;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11248 = x11247 + x11213;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11249 = x11248 + x11215;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11250 = x11249 + x11217;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11251 = x11250 + x11219;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11252 = x11251 + x11221;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11253 = x11252 + x11223;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11254 = x11230 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11255 = x11253 + x11254;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11256 = x11179 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11257 = x11253 + x11256;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11258 = x11181 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11259 = x11253 + x11258;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11260 = x11183 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11261 = x11253 + x11260;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11262 = x11185 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11263 = x11253 + x11262;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11264 = x11187 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11265 = x11253 + x11264;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11266 = x11189 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11267 = x11253 + x11266;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11268 = x11191 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11269 = x11253 + x11268;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11270 = x11193 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11271 = x11253 + x11270;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11272 = x11195 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11273 = x11253 + x11272;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11274 = x11197 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11275 = x11253 + x11274;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11276 = x11199 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11277 = x11253 + x11276;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11278 = x11201 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11279 = x11253 + x11278;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11280 = x11203 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11281 = x11253 + x11280;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11282 = x11205 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11283 = x11253 + x11282;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11284 = x11207 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11285 = x11253 + x11284;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11286 = x11209 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11287 = x11253 + x11286;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11288 = x11211 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11289 = x11253 + x11288;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11290 = x11213 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11291 = x11253 + x11290;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11292 = x11215 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11293 = x11253 + x11292;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11294 = x11217 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11295 = x11253 + x11294;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11296 = x11219 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11297 = x11253 + x11296;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11298 = x11221 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11299 = x11253 + x11298;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11300 = x11223 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11301 = x11253 + x11300;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][21 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11255);
      reg = x11255;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x11302 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x11302 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x11303 = x11302 + x28;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x11304 = x11303 * x11303;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x11305 = x11304 * x11304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][45 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11305);
      reg = x11305;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x11306 = args[2][45 * steps + ((cycle - 0) & mask)];
    assert(x11306 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11307 = x11306 * x11304;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11308 = x11307 * x11303;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11309 = x11308 + x11257;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11310 = x11309 + x11259;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11311 = x11310 + x11261;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11312 = x11311 + x11263;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11313 = x11312 + x11265;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11314 = x11313 + x11267;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11315 = x11314 + x11269;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11316 = x11315 + x11271;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11317 = x11316 + x11273;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11318 = x11317 + x11275;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11319 = x11318 + x11277;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11320 = x11319 + x11279;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11321 = x11320 + x11281;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11322 = x11321 + x11283;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11323 = x11322 + x11285;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11324 = x11323 + x11287;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11325 = x11324 + x11289;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11326 = x11325 + x11291;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11327 = x11326 + x11293;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11328 = x11327 + x11295;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11329 = x11328 + x11297;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11330 = x11329 + x11299;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11331 = x11330 + x11301;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11332 = x11308 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11333 = x11331 + x11332;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11334 = x11257 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11335 = x11331 + x11334;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11336 = x11259 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11337 = x11331 + x11336;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11338 = x11261 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11339 = x11331 + x11338;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11340 = x11263 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11341 = x11331 + x11340;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11342 = x11265 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11343 = x11331 + x11342;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11344 = x11267 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11345 = x11331 + x11344;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11346 = x11269 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11347 = x11331 + x11346;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11348 = x11271 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11349 = x11331 + x11348;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11350 = x11273 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11351 = x11331 + x11350;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11352 = x11275 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11353 = x11331 + x11352;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11354 = x11277 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11355 = x11331 + x11354;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11356 = x11279 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11357 = x11331 + x11356;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11358 = x11281 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11359 = x11331 + x11358;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11360 = x11283 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11361 = x11331 + x11360;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11362 = x11285 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11363 = x11331 + x11362;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11364 = x11287 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11365 = x11331 + x11364;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11366 = x11289 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11367 = x11331 + x11366;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11368 = x11291 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11369 = x11331 + x11368;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11370 = x11293 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11371 = x11331 + x11370;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11372 = x11295 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11373 = x11331 + x11372;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11374 = x11297 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11375 = x11331 + x11374;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11376 = x11299 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11377 = x11331 + x11376;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11378 = x11301 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11379 = x11331 + x11378;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11333);
      reg = x11333;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x11380 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x11380 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x11381 = x11380 + x27;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x11382 = x11381 * x11381;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x11383 = x11382 * x11382;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][46 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11383);
      reg = x11383;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x11384 = args[2][46 * steps + ((cycle - 0) & mask)];
    assert(x11384 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11385 = x11384 * x11382;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11386 = x11385 * x11381;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11387 = x11386 + x11335;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11388 = x11387 + x11337;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11389 = x11388 + x11339;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11390 = x11389 + x11341;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11391 = x11390 + x11343;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11392 = x11391 + x11345;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11393 = x11392 + x11347;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11394 = x11393 + x11349;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11395 = x11394 + x11351;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11396 = x11395 + x11353;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11397 = x11396 + x11355;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11398 = x11397 + x11357;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11399 = x11398 + x11359;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11400 = x11399 + x11361;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11401 = x11400 + x11363;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11402 = x11401 + x11365;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11403 = x11402 + x11367;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11404 = x11403 + x11369;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11405 = x11404 + x11371;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11406 = x11405 + x11373;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11407 = x11406 + x11375;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11408 = x11407 + x11377;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11409 = x11408 + x11379;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11410 = x11386 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11411 = x11409 + x11410;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11412 = x11335 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11413 = x11409 + x11412;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11414 = x11337 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11415 = x11409 + x11414;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11416 = x11339 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11417 = x11409 + x11416;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11418 = x11341 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11419 = x11409 + x11418;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11420 = x11343 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11421 = x11409 + x11420;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11422 = x11345 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11423 = x11409 + x11422;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11424 = x11347 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11425 = x11409 + x11424;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11426 = x11349 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11427 = x11409 + x11426;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11428 = x11351 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11429 = x11409 + x11428;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11430 = x11353 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11431 = x11409 + x11430;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11432 = x11355 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11433 = x11409 + x11432;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11434 = x11357 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11435 = x11409 + x11434;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11436 = x11359 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11437 = x11409 + x11436;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11438 = x11361 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11439 = x11409 + x11438;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11440 = x11363 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11441 = x11409 + x11440;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11442 = x11365 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11443 = x11409 + x11442;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11444 = x11367 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11445 = x11409 + x11444;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11446 = x11369 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11447 = x11409 + x11446;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11448 = x11371 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11449 = x11409 + x11448;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11450 = x11373 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11451 = x11409 + x11450;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11452 = x11375 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11453 = x11409 + x11452;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11454 = x11377 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11455 = x11409 + x11454;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11456 = x11379 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11457 = x11409 + x11456;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11411);
      reg = x11411;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x11458 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x11458 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x11459 = x11458 + x26;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x11460 = x11459 * x11459;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x11461 = x11460 * x11460;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][47 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11461);
      reg = x11461;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x11462 = args[2][47 * steps + ((cycle - 0) & mask)];
    assert(x11462 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11463 = x11462 * x11460;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11464 = x11463 * x11459;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11465 = x11464 + x11413;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11466 = x11465 + x11415;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11467 = x11466 + x11417;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11468 = x11467 + x11419;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11469 = x11468 + x11421;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11470 = x11469 + x11423;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11471 = x11470 + x11425;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11472 = x11471 + x11427;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11473 = x11472 + x11429;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11474 = x11473 + x11431;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11475 = x11474 + x11433;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11476 = x11475 + x11435;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11477 = x11476 + x11437;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11478 = x11477 + x11439;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11479 = x11478 + x11441;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11480 = x11479 + x11443;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11481 = x11480 + x11445;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11482 = x11481 + x11447;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11483 = x11482 + x11449;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11484 = x11483 + x11451;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11485 = x11484 + x11453;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11486 = x11485 + x11455;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11487 = x11486 + x11457;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11488 = x11464 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11489 = x11487 + x11488;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11490 = x11413 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11491 = x11487 + x11490;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11492 = x11415 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11493 = x11487 + x11492;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11494 = x11417 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11495 = x11487 + x11494;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11496 = x11419 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11497 = x11487 + x11496;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11498 = x11421 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11499 = x11487 + x11498;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11500 = x11423 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11501 = x11487 + x11500;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11502 = x11425 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11503 = x11487 + x11502;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11504 = x11427 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11505 = x11487 + x11504;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11506 = x11429 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11507 = x11487 + x11506;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11508 = x11431 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11509 = x11487 + x11508;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11510 = x11433 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11511 = x11487 + x11510;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11512 = x11435 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11513 = x11487 + x11512;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11514 = x11437 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11515 = x11487 + x11514;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11516 = x11439 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11517 = x11487 + x11516;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11518 = x11441 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11519 = x11487 + x11518;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11520 = x11443 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11521 = x11487 + x11520;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11522 = x11445 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11523 = x11487 + x11522;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11524 = x11447 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11525 = x11487 + x11524;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11526 = x11449 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11527 = x11487 + x11526;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11528 = x11451 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11529 = x11487 + x11528;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11530 = x11453 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11531 = x11487 + x11530;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11532 = x11455 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11533 = x11487 + x11532;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11534 = x11457 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11535 = x11487 + x11534;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11489);
      reg = x11489;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x11536 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x11536 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x11537 = x11536 + x25;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x11538 = x11537 * x11537;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x11539 = x11538 * x11538;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][48 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11539);
      reg = x11539;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x11540 = args[2][48 * steps + ((cycle - 0) & mask)];
    assert(x11540 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11541 = x11540 * x11538;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11542 = x11541 * x11537;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11543 = x11542 + x11491;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11544 = x11543 + x11493;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11545 = x11544 + x11495;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11546 = x11545 + x11497;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11547 = x11546 + x11499;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11548 = x11547 + x11501;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11549 = x11548 + x11503;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11550 = x11549 + x11505;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11551 = x11550 + x11507;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11552 = x11551 + x11509;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11553 = x11552 + x11511;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11554 = x11553 + x11513;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11555 = x11554 + x11515;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11556 = x11555 + x11517;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11557 = x11556 + x11519;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11558 = x11557 + x11521;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11559 = x11558 + x11523;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11560 = x11559 + x11525;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11561 = x11560 + x11527;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11562 = x11561 + x11529;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11563 = x11562 + x11531;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11564 = x11563 + x11533;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11565 = x11564 + x11535;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11566 = x11542 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11567 = x11565 + x11566;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11568 = x11491 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11569 = x11565 + x11568;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11570 = x11493 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11571 = x11565 + x11570;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11572 = x11495 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11573 = x11565 + x11572;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11574 = x11497 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11575 = x11565 + x11574;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11576 = x11499 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11577 = x11565 + x11576;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11578 = x11501 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11579 = x11565 + x11578;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11580 = x11503 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11581 = x11565 + x11580;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11582 = x11505 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11583 = x11565 + x11582;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11584 = x11507 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11585 = x11565 + x11584;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11586 = x11509 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11587 = x11565 + x11586;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11588 = x11511 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11589 = x11565 + x11588;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11590 = x11513 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11591 = x11565 + x11590;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11592 = x11515 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11593 = x11565 + x11592;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11594 = x11517 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11595 = x11565 + x11594;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11596 = x11519 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11597 = x11565 + x11596;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11598 = x11521 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11599 = x11565 + x11598;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11600 = x11523 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11601 = x11565 + x11600;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11602 = x11525 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11603 = x11565 + x11602;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11604 = x11527 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11605 = x11565 + x11604;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11606 = x11529 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11607 = x11565 + x11606;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11608 = x11531 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11609 = x11565 + x11608;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11610 = x11533 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11611 = x11565 + x11610;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11612 = x11535 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11613 = x11565 + x11612;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11567);
      reg = x11567;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":180:41))
    auto x11614 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x11614 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":183:13)
    auto x11615 = x11614 + x24;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":103:13)
    auto x11616 = x11615 * x11615;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":104:13)
    auto x11617 = x11616 * x11616;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":105:3)
    {
      auto& reg = args[2][49 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11617);
      reg = x11617;
    }
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_partial(recursion::Poseidon2Partial)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":106:14))
    auto x11618 = args[2][49 * steps + ((cycle - 0) & mask)];
    assert(x11618 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11619 = x11618 * x11616;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":107:13)
    auto x11620 = x11619 * x11615;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11621 = x11620 + x11569;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11622 = x11621 + x11571;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11623 = x11622 + x11573;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11624 = x11623 + x11575;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11625 = x11624 + x11577;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11626 = x11625 + x11579;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11627 = x11626 + x11581;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11628 = x11627 + x11583;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11629 = x11628 + x11585;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11630 = x11629 + x11587;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11631 = x11630 + x11589;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11632 = x11631 + x11591;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11633 = x11632 + x11593;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11634 = x11633 + x11595;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11635 = x11634 + x11597;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11636 = x11635 + x11599;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11637 = x11636 + x11601;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11638 = x11637 + x11603;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11639 = x11638 + x11605;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11640 = x11639 + x11607;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11641 = x11640 + x11609;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11642 = x11641 + x11611;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":94:11)
    auto x11643 = x11642 + x11613;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11644 = x11620 * x67;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11645 = x11643 + x11644;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11646 = x11569 * x66;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11647 = x11643 + x11646;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11648 = x11571 * x65;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11649 = x11643 + x11648;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11650 = x11573 * x64;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11651 = x11643 + x11650;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11652 = x11575 * x63;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11653 = x11643 + x11652;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11654 = x11577 * x62;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11655 = x11643 + x11654;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11656 = x11579 * x61;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11657 = x11643 + x11656;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11658 = x11581 * x60;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11659 = x11643 + x11658;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11660 = x11583 * x59;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11661 = x11643 + x11660;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11662 = x11585 * x58;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11663 = x11643 + x11662;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11664 = x11587 * x57;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11665 = x11643 + x11664;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11666 = x11589 * x56;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11667 = x11643 + x11666;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11668 = x11591 * x55;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11669 = x11643 + x11668;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11670 = x11593 * x54;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11671 = x11643 + x11670;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11672 = x11595 * x53;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11673 = x11643 + x11672;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11674 = x11597 * x52;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11675 = x11643 + x11674;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11676 = x11599 * x51;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11677 = x11643 + x11676;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11678 = x11601 * x50;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11679 = x11643 + x11678;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11680 = x11603 * x49;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11681 = x11643 + x11680;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11682 = x11605 * x48;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11683 = x11643 + x11682;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11684 = x11607 * x47;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11685 = x11643 + x11684;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11686 = x11609 * x46;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11687 = x11643 + x11686;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11688 = x11611 * x45;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11689 = x11643 + x11688;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:20)
    auto x11690 = x11613 * x44;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":97:14)
    auto x11691 = x11643 + x11690;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":188:5)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11645);
      reg = x11645;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11692 = x11645 + x23;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][90 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11692);
      reg = x11692;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11693 = x11647 + x22;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][91 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11693);
      reg = x11693;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11694 = x11649 + x21;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11694);
      reg = x11694;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11695 = x11651 + x20;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11695);
      reg = x11695;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11696 = x11653 + x19;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11696);
      reg = x11696;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11697 = x11655 + x18;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11697);
      reg = x11697;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11698 = x11657 + x17;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11698);
      reg = x11698;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11699 = x11659 + x16;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11699);
      reg = x11699;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11700 = x11661 + x15;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11700);
      reg = x11700;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11701 = x11663 + x14;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11701);
      reg = x11701;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11702 = x11665 + x13;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11702);
      reg = x11702;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11703 = x11667 + x12;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11703);
      reg = x11703;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11704 = x11669 + x11;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11704);
      reg = x11704;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11705 = x11671 + x10;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11705);
      reg = x11705;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11706 = x11673 + x9;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11706);
      reg = x11706;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11707 = x11675 + x8;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11707);
      reg = x11707;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11708 = x11677 + x7;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11708);
      reg = x11708;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11709 = x11679 + x6;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11709);
      reg = x11709;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11710 = x11681 + x5;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11710);
      reg = x11710;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11711 = x11683 + x4;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11711);
      reg = x11711;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11712 = x11685 + x3;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11712);
      reg = x11712;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11713 = x11687 + x2;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11713);
      reg = x11713;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11714 = x11689 + x1;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11714);
      reg = x11714;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":192:13)
    auto x11715 = x11691 + x0;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":193:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11715);
      reg = x11715;
    }
    host(ctx, "log", "POSEIDON2_PARTIAL", host_args.data(), 0, host_outs.data(), 0);
  }
  // loc("top(recursion::Top)/code(recursion::Code)/select(OneHot)/poseidon2_store(Reg)"("./zirgen/components/mux.h":49:25))
  auto x11716 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x11716 != Fp::invalid());
  if (x11716 != 0) {
    // loc("top(recursion::Top)/code(recursion::Code)/write_addr(Reg)"("zirgen/circuit/recursion/top.cpp":22:49))
    auto x11717 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x11717 != Fp::invalid());
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_store(recursion::Poseidon2MemInst)/group(OneHot)/g0(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":214:39))
    auto x11718 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x11718 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11719 = args[2][90 * steps + ((cycle - 1) & mask)];
    assert(x11719 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11720 = x11718 * x11719;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11721 = args[2][91 * steps + ((cycle - 1) & mask)];
    assert(x11721 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11722 = x11718 * x11721;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11723 = args[2][92 * steps + ((cycle - 1) & mask)];
    assert(x11723 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11724 = x11718 * x11723;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11725 = args[2][93 * steps + ((cycle - 1) & mask)];
    assert(x11725 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11726 = x11718 * x11725;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11727 = args[2][94 * steps + ((cycle - 1) & mask)];
    assert(x11727 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11728 = x11718 * x11727;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11729 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x11729 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11730 = x11718 * x11729;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11731 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x11731 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11732 = x11718 * x11731;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11733 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x11733 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11734 = x11718 * x11733;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_store(recursion::Poseidon2MemInst)/group(OneHot)/g1(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":214:39))
    auto x11735 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x11735 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11736 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x11736 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11737 = x11735 * x11736;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11738 = x11720 + x11737;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11739 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x11739 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11740 = x11735 * x11739;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11741 = x11722 + x11740;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11742 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x11742 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11743 = x11735 * x11742;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11744 = x11724 + x11743;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11745 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x11745 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11746 = x11735 * x11745;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11747 = x11726 + x11746;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11748 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x11748 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11749 = x11735 * x11748;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11750 = x11728 + x11749;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11751 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x11751 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11752 = x11735 * x11751;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11753 = x11730 + x11752;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11754 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x11754 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11755 = x11735 * x11754;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11756 = x11732 + x11755;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11757 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x11757 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11758 = x11735 * x11757;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11759 = x11734 + x11758;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_store(recursion::Poseidon2MemInst)/group(OneHot)/g2(Reg)"("zirgen/circuit/recursion/poseidon2.cpp":214:39))
    auto x11760 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x11760 != Fp::invalid());
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11761 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x11761 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11762 = x11760 * x11761;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11763 = x11738 + x11762;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11764 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x11764 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11765 = x11760 * x11764;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11766 = x11741 + x11765;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11767 = args[2][108 * steps + ((cycle - 1) & mask)];
    assert(x11767 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11768 = x11760 * x11767;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11769 = x11744 + x11768;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11770 = args[2][109 * steps + ((cycle - 1) & mask)];
    assert(x11770 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11771 = x11760 * x11770;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11772 = x11747 + x11771;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11773 = args[2][110 * steps + ((cycle - 1) & mask)];
    assert(x11773 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11774 = x11760 * x11773;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11775 = x11750 + x11774;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11776 = args[2][111 * steps + ((cycle - 1) & mask)];
    assert(x11776 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11777 = x11760 * x11776;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11778 = x11753 + x11777;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11779 = args[2][112 * steps + ((cycle - 1) & mask)];
    assert(x11779 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11780 = x11760 * x11779;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11781 = x11756 + x11780;
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("zirgen/circuit/recursion/poseidon2.cpp":214:88))
    auto x11782 = args[2][113 * steps + ((cycle - 1) & mask)];
    assert(x11782 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:39)
    auto x11783 = x11760 * x11782;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":214:22)
    auto x11784 = x11759 + x11783;
    // loc("top(recursion::Top)/code(recursion::Code)/inst(Mux)/poseidon2_store(recursion::Poseidon2MemInst)/do_mont(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x11785 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x11785 != Fp::invalid());
    // loc("zirgen/circuit/recursion/poseidon2.cpp":216:13)
    auto x11786 = x11785 * x249;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":216:61)
    auto x11787 = x318 - x11785;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":216:13)
    auto x11788 = x11786 + x11787;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:37)
    auto x11789 = x11763 * x11788;
    // loc("zirgen/circuit/recursion/wom.cpp":89:3)
    {
      auto& reg = args[2][5 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11717);
      reg = x11717;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][6 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11789);
      reg = x11789;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][7 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][8 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11790 = args[2][5 * steps + ((cycle - 0) & mask)];
      assert(x11790 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11791 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x11791 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11792 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x11792 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11793 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x11793 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11794 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x11794 != Fp::invalid());
      host_args.at(0) = x11790;
      host_args.at(1) = x11791;
      host_args.at(2) = x11792;
      host_args.at(3) = x11793;
      host_args.at(4) = x11794;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:21)
    auto x11795 = x11717 + x318;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:37)
    auto x11796 = x11766 * x11788;
    // loc("zirgen/circuit/recursion/wom.cpp":89:3)
    {
      auto& reg = args[2][10 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11795);
      reg = x11795;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][11 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11796);
      reg = x11796;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][12 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][13 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][14 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11797 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x11797 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11798 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x11798 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11799 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11799 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11800 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11800 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11801 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x11801 != Fp::invalid());
      host_args.at(0) = x11797;
      host_args.at(1) = x11798;
      host_args.at(2) = x11799;
      host_args.at(3) = x11800;
      host_args.at(4) = x11801;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:21)
    auto x11802 = x11717 + x317;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:37)
    auto x11803 = x11769 * x11788;
    // loc("zirgen/circuit/recursion/wom.cpp":89:3)
    {
      auto& reg = args[2][15 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11802);
      reg = x11802;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11803);
      reg = x11803;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][17 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][19 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11804 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x11804 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11805 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x11805 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11806 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x11806 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11807 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x11807 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11808 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11808 != Fp::invalid());
      host_args.at(0) = x11804;
      host_args.at(1) = x11805;
      host_args.at(2) = x11806;
      host_args.at(3) = x11807;
      host_args.at(4) = x11808;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:21)
    auto x11809 = x11717 + x316;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:37)
    auto x11810 = x11772 * x11788;
    // loc("zirgen/circuit/recursion/wom.cpp":89:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11809);
      reg = x11809;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][21 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11810);
      reg = x11810;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11811 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11811 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11812 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11812 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11813 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11813 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11814 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11814 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11815 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11815 != Fp::invalid());
      host_args.at(0) = x11811;
      host_args.at(1) = x11812;
      host_args.at(2) = x11813;
      host_args.at(3) = x11814;
      host_args.at(4) = x11815;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:21)
    auto x11816 = x11717 + x315;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:37)
    auto x11817 = x11775 * x11788;
    // loc("zirgen/circuit/recursion/wom.cpp":89:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11816);
      reg = x11816;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11817);
      reg = x11817;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][27 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][28 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11818 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11818 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11819 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11819 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11820 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11820 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11821 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11821 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11822 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11822 != Fp::invalid());
      host_args.at(0) = x11818;
      host_args.at(1) = x11819;
      host_args.at(2) = x11820;
      host_args.at(3) = x11821;
      host_args.at(4) = x11822;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:21)
    auto x11823 = x11717 + x314;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:37)
    auto x11824 = x11778 * x11788;
    // loc("zirgen/circuit/recursion/wom.cpp":89:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11823);
      reg = x11823;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11824);
      reg = x11824;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][32 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][34 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11825 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11825 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11826 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11826 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11827 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11827 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11828 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11828 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11829 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11829 != Fp::invalid());
      host_args.at(0) = x11825;
      host_args.at(1) = x11826;
      host_args.at(2) = x11827;
      host_args.at(3) = x11828;
      host_args.at(4) = x11829;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:21)
    auto x11830 = x11717 + x313;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:37)
    auto x11831 = x11781 * x11788;
    // loc("zirgen/circuit/recursion/wom.cpp":89:3)
    {
      auto& reg = args[2][35 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11830);
      reg = x11830;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][36 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11831);
      reg = x11831;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][37 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][38 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][39 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11832 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11832 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11833 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11833 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11834 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11834 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11835 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11835 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11836 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11836 != Fp::invalid());
      host_args.at(0) = x11832;
      host_args.at(1) = x11833;
      host_args.at(2) = x11834;
      host_args.at(3) = x11835;
      host_args.at(4) = x11836;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:21)
    auto x11837 = x11717 + x312;
    // loc("zirgen/circuit/recursion/poseidon2.cpp":218:37)
    auto x11838 = x11784 * x11788;
    // loc("zirgen/circuit/recursion/wom.cpp":89:3)
    {
      auto& reg = args[2][40 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11837);
      reg = x11837;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][41 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11838);
      reg = x11838;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][42 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][43 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    // loc("zirgen/circuit/recursion/wom.cpp":49:5)
    {
      auto& reg = args[2][44 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x319);
      reg = x319;
    }
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11839 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11839 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11840 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x11840 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11841 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x11841 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11842 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x11842 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11843 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x11843 != Fp::invalid());
      host_args.at(0) = x11839;
      host_args.at(1) = x11840;
      host_args.at(2) = x11841;
      host_args.at(3) = x11842;
      host_args.at(4) = x11843;
      host(ctx, "womWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][90 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11719);
      reg = x11719;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][91 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11721);
      reg = x11721;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11723);
      reg = x11723;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11725);
      reg = x11725;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11727);
      reg = x11727;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11729);
      reg = x11729;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11731);
      reg = x11731;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11733);
      reg = x11733;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11736);
      reg = x11736;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11739);
      reg = x11739;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11742);
      reg = x11742;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11745);
      reg = x11745;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11748);
      reg = x11748;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11751);
      reg = x11751;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11754);
      reg = x11754;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11757);
      reg = x11757;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11761);
      reg = x11761;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11764);
      reg = x11764;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11767);
      reg = x11767;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11770);
      reg = x11770;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11773);
      reg = x11773;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11776);
      reg = x11776;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11779);
      reg = x11779;
    }
    // loc("zirgen/circuit/recursion/poseidon2.cpp":221:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x11782);
      reg = x11782;
    }
    // loc("./zirgen/components/onehot.h":46:19)
    auto x11844 = x11760 * x317;
    // loc("./zirgen/components/onehot.h":46:13)
    auto x11845 = x11735 + x11844;
    host_args.at(0) = x11845;
    host(ctx, "log", "POSEIDON2_OUTPUT: %u", host_args.data(), 1, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11846 = args[2][90 * steps + ((cycle - 0) & mask)];
    assert(x11846 != Fp::invalid());
    host_args.at(0) = x319;
    host_args.at(1) = x11846;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11847 = args[2][91 * steps + ((cycle - 0) & mask)];
    assert(x11847 != Fp::invalid());
    host_args.at(0) = x318;
    host_args.at(1) = x11847;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11848 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x11848 != Fp::invalid());
    host_args.at(0) = x317;
    host_args.at(1) = x11848;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11849 = args[2][93 * steps + ((cycle - 0) & mask)];
    assert(x11849 != Fp::invalid());
    host_args.at(0) = x316;
    host_args.at(1) = x11849;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11850 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x11850 != Fp::invalid());
    host_args.at(0) = x315;
    host_args.at(1) = x11850;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11851 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x11851 != Fp::invalid());
    host_args.at(0) = x314;
    host_args.at(1) = x11851;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11852 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x11852 != Fp::invalid());
    host_args.at(0) = x313;
    host_args.at(1) = x11852;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11853 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x11853 != Fp::invalid());
    host_args.at(0) = x312;
    host_args.at(1) = x11853;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11854 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x11854 != Fp::invalid());
    host_args.at(0) = x311;
    host_args.at(1) = x11854;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11855 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x11855 != Fp::invalid());
    host_args.at(0) = x310;
    host_args.at(1) = x11855;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11856 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x11856 != Fp::invalid());
    host_args.at(0) = x309;
    host_args.at(1) = x11856;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11857 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x11857 != Fp::invalid());
    host_args.at(0) = x308;
    host_args.at(1) = x11857;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11858 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x11858 != Fp::invalid());
    host_args.at(0) = x223;
    host_args.at(1) = x11858;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11859 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x11859 != Fp::invalid());
    host_args.at(0) = x222;
    host_args.at(1) = x11859;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11860 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x11860 != Fp::invalid());
    host_args.at(0) = x221;
    host_args.at(1) = x11860;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11861 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x11861 != Fp::invalid());
    host_args.at(0) = x220;
    host_args.at(1) = x11861;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11862 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x11862 != Fp::invalid());
    host_args.at(0) = x302;
    host_args.at(1) = x11862;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11863 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x11863 != Fp::invalid());
    host_args.at(0) = x219;
    host_args.at(1) = x11863;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11864 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x11864 != Fp::invalid());
    host_args.at(0) = x218;
    host_args.at(1) = x11864;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11865 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x11865 != Fp::invalid());
    host_args.at(0) = x217;
    host_args.at(1) = x11865;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11866 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x11866 != Fp::invalid());
    host_args.at(0) = x216;
    host_args.at(1) = x11866;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11867 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x11867 != Fp::invalid());
    host_args.at(0) = x215;
    host_args.at(1) = x11867;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11868 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x11868 != Fp::invalid());
    host_args.at(0) = x214;
    host_args.at(1) = x11868;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
    // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x11869 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x11869 != Fp::invalid());
    host_args.at(0) = x213;
    host_args.at(1) = x11869;
    host(ctx, "log", "  output[%u]: %u", host_args.data(), 2, host_outs.data(), 0);
  }
  if (x1368 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11870 = args[0][7 * steps + ((cycle - 0) & mask)];
    assert(x11870 != Fp::invalid());
    if (x11870 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11871 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x11871 != Fp::invalid());
    if (x11871 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11872 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x11872 != Fp::invalid());
    if (x11872 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11873 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x11873 != Fp::invalid());
    if (x11873 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11874 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x11874 != Fp::invalid());
    if (x11874 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11875 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x11875 != Fp::invalid());
    if (x11875 != 0) {
      {
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x319);
          reg = x319;
        }
      }
    }
  }
  if (x8787 != 0) {
    {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
    }
  }
  if (x11716 != 0) {
    {
      // loc("zirgen/circuit/recursion/wom.cpp":12:3)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
      // loc("zirgen/circuit/recursion/wom.cpp":49:5)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x319);
        reg = x319;
      }
    }
  }
  if (x320 != 0) {
    {
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11876 = args[2][5 * steps + ((cycle - 0) & mask)];
      assert(x11876 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11877 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x11877 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11878 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x11878 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11879 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x11879 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11880 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x11880 != Fp::invalid());
      host_args.at(0) = x11876;
      host_args.at(1) = x11877;
      host_args.at(2) = x11878;
      host_args.at(3) = x11879;
      host_args.at(4) = x11880;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11881 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x11881 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11882 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x11882 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11883 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11883 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11884 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11884 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11885 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x11885 != Fp::invalid());
      host_args.at(0) = x11881;
      host_args.at(1) = x11882;
      host_args.at(2) = x11883;
      host_args.at(3) = x11884;
      host_args.at(4) = x11885;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11886 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x11886 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11887 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x11887 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11888 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x11888 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11889 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x11889 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11890 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11890 != Fp::invalid());
      host_args.at(0) = x11886;
      host_args.at(1) = x11887;
      host_args.at(2) = x11888;
      host_args.at(3) = x11889;
      host_args.at(4) = x11890;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11891 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11891 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11892 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11892 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11893 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11893 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11894 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11894 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11895 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11895 != Fp::invalid());
      host_args.at(0) = x11891;
      host_args.at(1) = x11892;
      host_args.at(2) = x11893;
      host_args.at(3) = x11894;
      host_args.at(4) = x11895;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11896 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11896 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11897 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11897 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11898 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11898 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11899 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11899 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11900 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11900 != Fp::invalid());
      host_args.at(0) = x11896;
      host_args.at(1) = x11897;
      host_args.at(2) = x11898;
      host_args.at(3) = x11899;
      host_args.at(4) = x11900;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11901 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11901 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11902 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11902 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11903 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11903 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11904 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11904 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11905 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11905 != Fp::invalid());
      host_args.at(0) = x11901;
      host_args.at(1) = x11902;
      host_args.at(2) = x11903;
      host_args.at(3) = x11904;
      host_args.at(4) = x11905;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11906 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11906 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11907 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11907 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11908 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11908 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11909 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11909 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11910 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11910 != Fp::invalid());
      host_args.at(0) = x11906;
      host_args.at(1) = x11907;
      host_args.at(2) = x11908;
      host_args.at(3) = x11909;
      host_args.at(4) = x11910;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11911 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11911 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11912 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x11912 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11913 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x11913 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11914 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x11914 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11915 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x11915 != Fp::invalid());
      host_args.at(0) = x11911;
      host_args.at(1) = x11912;
      host_args.at(2) = x11913;
      host_args.at(3) = x11914;
      host_args.at(4) = x11915;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x11916 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x11916 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11917 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x11917 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11918 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x11918 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11919 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x11919 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/micro_ops(recursion::MicroOps)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x11920 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x11920 != Fp::invalid());
      host_args.at(0) = x11916;
      host_args.at(1) = x11917;
      host_args.at(2) = x11918;
      host_args.at(3) = x11919;
      host_args.at(4) = x11920;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
    }
  }
  if (x1368 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11921 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x11921 != Fp::invalid());
    if (x11921 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11922 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11922 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11923 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11923 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11924 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11924 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11925 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11925 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11926 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11926 != Fp::invalid());
        host_args.at(0) = x11922;
        host_args.at(1) = x11923;
        host_args.at(2) = x11924;
        host_args.at(3) = x11925;
        host_args.at(4) = x11926;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11927 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11927 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11928 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11928 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11929 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11929 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11930 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11930 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11931 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11931 != Fp::invalid());
        host_args.at(0) = x11927;
        host_args.at(1) = x11928;
        host_args.at(2) = x11929;
        host_args.at(3) = x11930;
        host_args.at(4) = x11931;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11932 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x11932 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11933 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x11933 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11934 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x11934 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11935 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x11935 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_and_elem(recursion::BitAndElem)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11936 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x11936 != Fp::invalid());
        host_args.at(0) = x11932;
        host_args.at(1) = x11933;
        host_args.at(2) = x11934;
        host_args.at(3) = x11935;
        host_args.at(4) = x11936;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11937 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x11937 != Fp::invalid());
    if (x11937 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11938 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11938 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11939 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11939 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11940 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11940 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11941 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11941 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11942 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11942 != Fp::invalid());
        host_args.at(0) = x11938;
        host_args.at(1) = x11939;
        host_args.at(2) = x11940;
        host_args.at(3) = x11941;
        host_args.at(4) = x11942;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11943 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11943 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11944 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11944 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11945 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11945 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11946 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11946 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11947 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11947 != Fp::invalid());
        host_args.at(0) = x11943;
        host_args.at(1) = x11944;
        host_args.at(2) = x11945;
        host_args.at(3) = x11946;
        host_args.at(4) = x11947;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11948 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x11948 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11949 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x11949 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11950 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x11950 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11951 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x11951 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/bit_op_shorts(recursion::BitOpShorts)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11952 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x11952 != Fp::invalid());
        host_args.at(0) = x11948;
        host_args.at(1) = x11949;
        host_args.at(2) = x11950;
        host_args.at(3) = x11951;
        host_args.at(4) = x11952;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11953 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x11953 != Fp::invalid());
    if (x11953 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11954 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11954 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11955 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11955 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11956 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11956 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11957 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11957 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11958 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11958 != Fp::invalid());
        host_args.at(0) = x11954;
        host_args.at(1) = x11955;
        host_args.at(2) = x11956;
        host_args.at(3) = x11957;
        host_args.at(4) = x11958;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11959 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11959 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11960 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11960 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11961 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11961 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11962 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11962 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_init(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11963 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11963 != Fp::invalid());
        host_args.at(0) = x11959;
        host_args.at(1) = x11960;
        host_args.at(2) = x11961;
        host_args.at(3) = x11962;
        host_args.at(4) = x11963;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11964 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x11964 != Fp::invalid());
    if (x11964 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11965 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11965 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11966 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11966 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11967 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11967 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11968 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11968 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11969 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11969 != Fp::invalid());
        host_args.at(0) = x11965;
        host_args.at(1) = x11966;
        host_args.at(2) = x11967;
        host_args.at(3) = x11968;
        host_args.at(4) = x11969;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11970 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11970 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11971 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11971 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11972 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11972 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11973 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11973 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_fini(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11974 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11974 != Fp::invalid());
        host_args.at(0) = x11970;
        host_args.at(1) = x11971;
        host_args.at(2) = x11972;
        host_args.at(3) = x11973;
        host_args.at(4) = x11974;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11975 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x11975 != Fp::invalid());
    if (x11975 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11976 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11976 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11977 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11977 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11978 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11978 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11979 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11979 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11980 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11980 != Fp::invalid());
        host_args.at(0) = x11976;
        host_args.at(1) = x11977;
        host_args.at(2) = x11978;
        host_args.at(3) = x11979;
        host_args.at(4) = x11980;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11981 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11981 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11982 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11982 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11983 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11983 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11984 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11984 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_load(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11985 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11985 != Fp::invalid());
        host_args.at(0) = x11981;
        host_args.at(1) = x11982;
        host_args.at(2) = x11983;
        host_args.at(3) = x11984;
        host_args.at(4) = x11985;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11986 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x11986 != Fp::invalid());
    if (x11986 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11987 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x11987 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11988 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x11988 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11989 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x11989 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11990 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x11990 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11991 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11991 != Fp::invalid());
        host_args.at(0) = x11987;
        host_args.at(1) = x11988;
        host_args.at(2) = x11989;
        host_args.at(3) = x11990;
        host_args.at(4) = x11991;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11992 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11992 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11993 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x11993 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11994 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x11994 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11995 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x11995 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/sha_mix(recursion::ShaWrap)/sha_cycle(recursion::ShaCycle)/recursion::WomBody/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11996 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x11996 != Fp::invalid());
        host_args.at(0) = x11992;
        host_args.at(1) = x11993;
        host_args.at(2) = x11994;
        host_args.at(3) = x11995;
        host_args.at(4) = x11996;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x11997 = args[0][16 * steps + ((cycle - 0) & mask)];
    assert(x11997 != Fp::invalid());
    if (x11997 != 0) {
      {
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x11998 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x11998 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x11999 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x11999 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12000 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x12000 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12001 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x12001 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12002 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x12002 != Fp::invalid());
        host_args.at(0) = x11998;
        host_args.at(1) = x11999;
        host_args.at(2) = x12000;
        host_args.at(3) = x12001;
        host_args.at(4) = x12002;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x12003 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x12003 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12004 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x12004 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12005 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x12005 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12006 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x12006 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12007 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x12007 != Fp::invalid());
        host_args.at(0) = x12003;
        host_args.at(1) = x12004;
        host_args.at(2) = x12005;
        host_args.at(3) = x12006;
        host_args.at(4) = x12007;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x12008 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x12008 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12009 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x12009 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12010 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x12010 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12011 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x12011 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12012 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x12012 != Fp::invalid());
        host_args.at(0) = x12008;
        host_args.at(1) = x12009;
        host_args.at(2) = x12010;
        host_args.at(3) = x12011;
        host_args.at(4) = x12012;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
        auto x12013 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x12013 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12014 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x12014 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12015 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x12015 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12016 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x12016 != Fp::invalid());
        // loc("top(recursion::Top)/mux(Mux)/macro_ops(recursion::MacroOp)/mux(Mux)/set_global(recursion::SetGlobal)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
        auto x12017 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x12017 != Fp::invalid());
        host_args.at(0) = x12013;
        host_args.at(1) = x12014;
        host_args.at(2) = x12015;
        host_args.at(3) = x12016;
        host_args.at(4) = x12017;
        host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      }
    }
  }
  if (x8787 != 0) {
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12018 = args[2][5 * steps + ((cycle - 0) & mask)];
      assert(x12018 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12019 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x12019 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12020 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x12020 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12021 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x12021 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12022 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x12022 != Fp::invalid());
      host_args.at(0) = x12018;
      host_args.at(1) = x12019;
      host_args.at(2) = x12020;
      host_args.at(3) = x12021;
      host_args.at(4) = x12022;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12023 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x12023 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12024 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x12024 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12025 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x12025 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12026 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x12026 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12027 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x12027 != Fp::invalid());
      host_args.at(0) = x12023;
      host_args.at(1) = x12024;
      host_args.at(2) = x12025;
      host_args.at(3) = x12026;
      host_args.at(4) = x12027;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12028 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x12028 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12029 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x12029 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12030 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x12030 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12031 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x12031 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12032 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x12032 != Fp::invalid());
      host_args.at(0) = x12028;
      host_args.at(1) = x12029;
      host_args.at(2) = x12030;
      host_args.at(3) = x12031;
      host_args.at(4) = x12032;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12033 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x12033 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12034 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x12034 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12035 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x12035 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12036 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x12036 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12037 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x12037 != Fp::invalid());
      host_args.at(0) = x12033;
      host_args.at(1) = x12034;
      host_args.at(2) = x12035;
      host_args.at(3) = x12036;
      host_args.at(4) = x12037;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12038 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x12038 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12039 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x12039 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12040 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x12040 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12041 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x12041 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12042 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x12042 != Fp::invalid());
      host_args.at(0) = x12038;
      host_args.at(1) = x12039;
      host_args.at(2) = x12040;
      host_args.at(3) = x12041;
      host_args.at(4) = x12042;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12043 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x12043 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12044 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x12044 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12045 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x12045 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12046 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x12046 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12047 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x12047 != Fp::invalid());
      host_args.at(0) = x12043;
      host_args.at(1) = x12044;
      host_args.at(2) = x12045;
      host_args.at(3) = x12046;
      host_args.at(4) = x12047;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12048 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x12048 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12049 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x12049 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12050 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x12050 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12051 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x12051 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12052 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x12052 != Fp::invalid());
      host_args.at(0) = x12048;
      host_args.at(1) = x12049;
      host_args.at(2) = x12050;
      host_args.at(3) = x12051;
      host_args.at(4) = x12052;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12053 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x12053 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12054 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x12054 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12055 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x12055 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12056 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x12056 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12057 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x12057 != Fp::invalid());
      host_args.at(0) = x12053;
      host_args.at(1) = x12054;
      host_args.at(2) = x12055;
      host_args.at(3) = x12056;
      host_args.at(4) = x12057;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12058 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x12058 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12059 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x12059 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12060 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x12060 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12061 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x12061 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_load(recursion::Poseidon2Load)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12062 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x12062 != Fp::invalid());
      host_args.at(0) = x12058;
      host_args.at(1) = x12059;
      host_args.at(2) = x12060;
      host_args.at(3) = x12061;
      host_args.at(4) = x12062;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
    }
  }
  if (x11716 != 0) {
    {
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12063 = args[2][5 * steps + ((cycle - 0) & mask)];
      assert(x12063 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12064 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x12064 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12065 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x12065 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12066 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x12066 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12067 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x12067 != Fp::invalid());
      host_args.at(0) = x12063;
      host_args.at(1) = x12064;
      host_args.at(2) = x12065;
      host_args.at(3) = x12066;
      host_args.at(4) = x12067;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12068 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x12068 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12069 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x12069 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12070 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x12070 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12071 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x12071 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12072 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x12072 != Fp::invalid());
      host_args.at(0) = x12068;
      host_args.at(1) = x12069;
      host_args.at(2) = x12070;
      host_args.at(3) = x12071;
      host_args.at(4) = x12072;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12073 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x12073 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12074 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x12074 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12075 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x12075 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12076 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x12076 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12077 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x12077 != Fp::invalid());
      host_args.at(0) = x12073;
      host_args.at(1) = x12074;
      host_args.at(2) = x12075;
      host_args.at(3) = x12076;
      host_args.at(4) = x12077;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12078 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x12078 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12079 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x12079 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12080 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x12080 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12081 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x12081 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12082 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x12082 != Fp::invalid());
      host_args.at(0) = x12078;
      host_args.at(1) = x12079;
      host_args.at(2) = x12080;
      host_args.at(3) = x12081;
      host_args.at(4) = x12082;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12083 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x12083 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12084 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x12084 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12085 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x12085 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12086 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x12086 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12087 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x12087 != Fp::invalid());
      host_args.at(0) = x12083;
      host_args.at(1) = x12084;
      host_args.at(2) = x12085;
      host_args.at(3) = x12086;
      host_args.at(4) = x12087;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12088 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x12088 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12089 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x12089 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12090 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x12090 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12091 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x12091 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12092 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x12092 != Fp::invalid());
      host_args.at(0) = x12088;
      host_args.at(1) = x12089;
      host_args.at(2) = x12090;
      host_args.at(3) = x12091;
      host_args.at(4) = x12092;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12093 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x12093 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12094 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x12094 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12095 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x12095 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12096 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x12096 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12097 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x12097 != Fp::invalid());
      host_args.at(0) = x12093;
      host_args.at(1) = x12094;
      host_args.at(2) = x12095;
      host_args.at(3) = x12096;
      host_args.at(4) = x12097;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12098 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x12098 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12099 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x12099 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12100 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x12100 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12101 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x12101 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12102 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x12102 != Fp::invalid());
      host_args.at(0) = x12098;
      host_args.at(1) = x12099;
      host_args.at(2) = x12100;
      host_args.at(3) = x12101;
      host_args.at(4) = x12102;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/addr(Reg)"("zirgen/circuit/recursion/wom.cpp":22:27))
      auto x12103 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x12103 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[0](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12104 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x12104 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[1](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12105 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x12105 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[2](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12106 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x12106 != Fp::invalid());
      // loc("top(recursion::Top)/mux(Mux)/poseidon2_store(recursion::Poseidon2Store)/wom_body(recursion::WomBody)/plonk_body(PlonkBody)/recursion::impl::WomPlonkElement/data[3](Reg)"("zirgen/circuit/recursion/wom.cpp":42:14))
      auto x12107 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x12107 != Fp::invalid());
      host_args.at(0) = x12103;
      host_args.at(1) = x12104;
      host_args.at(2) = x12105;
      host_args.at(3) = x12106;
      host_args.at(4) = x12107;
      host(ctx, "plonkWrite", "wom", host_args.data(), 5, host_outs.data(), 0);
    }
  }
  return x319;
}

} // namespace risc0::circuit::recursion
// clang-format on
